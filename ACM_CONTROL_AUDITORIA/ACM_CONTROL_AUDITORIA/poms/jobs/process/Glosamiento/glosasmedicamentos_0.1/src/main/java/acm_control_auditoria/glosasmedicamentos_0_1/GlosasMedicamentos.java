// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package acm_control_auditoria.glosasmedicamentos_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Glosamiento;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_10
	//import java.util.List;

	//the import part of tJavaRow_13
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaRow_12
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_9
	//import java.util.List;

	//the import part of tJavaRow_11
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: GlosasMedicamentos Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class GlosasMedicamentos implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(BANDERA != null){
				
					this.setProperty("BANDERA", BANDERA.toString());
				
			}
			
			if(bodega != null){
				
					this.setProperty("bodega", bodega.toString());
				
			}
			
			if(cantidad != null){
				
					this.setProperty("cantidad", cantidad.toString());
				
			}
			
			if(cantidad_despachada != null){
				
					this.setProperty("cantidad_despachada", cantidad_despachada.toString());
				
			}
			
			if(cantidad_solicitada != null){
				
					this.setProperty("cantidad_solicitada", cantidad_solicitada.toString());
				
			}
			
			if(codigo_autorizacion != null){
				
					this.setProperty("codigo_autorizacion", codigo_autorizacion.toString());
				
			}
			
			if(codigo_cie10 != null){
				
					this.setProperty("codigo_cie10", codigo_cie10.toString());
				
			}
			
			if(codigo_cum != null){
				
					this.setProperty("codigo_cum", codigo_cum.toString());
				
			}
			
			if(codigo_cups != null){
				
					this.setProperty("codigo_cups", codigo_cups.toString());
				
			}
			
			if(concentracion != null){
				
					this.setProperty("concentracion", concentracion.toString());
				
			}
			
			if(confidencialidad != null){
				
					this.setProperty("confidencialidad", confidencialidad.toString());
				
			}
			
			if(CONTRATOS_ID != null){
				
					this.setProperty("CONTRATOS_ID", CONTRATOS_ID.toString());
				
			}
			
			if(ctc_aprobado != null){
				
					this.setProperty("ctc_aprobado", ctc_aprobado.toString());
				
			}
			
			if(descripcion_cie10 != null){
				
					this.setProperty("descripcion_cie10", descripcion_cie10.toString());
				
			}
			
			if(descripcion_cups != null){
				
					this.setProperty("descripcion_cups", descripcion_cups.toString());
				
			}
			
			if(documento != null){
				
					this.setProperty("documento", documento.toString());
				
			}
			
			if(esm != null){
				
					this.setProperty("esm", esm.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(EstAfiliacionActivo != null){
				
					this.setProperty("EstAfiliacionActivo", EstAfiliacionActivo.toString());
				
			}
			
			if(EstAfiliacionProvisional != null){
				
					this.setProperty("EstAfiliacionProvisional", EstAfiliacionProvisional.toString());
				
			}
			
			if(EstAfiliaicionInactivo != null){
				
					this.setProperty("EstAfiliaicionInactivo", EstAfiliaicionInactivo.toString());
				
			}
			
			if(EstArchivoPCE != null){
				
					this.setProperty("EstArchivoPCE", EstArchivoPCE.toString());
				
			}
			
			if(fecha_autorizacion != null){
				
					this.setProperty("fecha_autorizacion", fecha_autorizacion.toString());
				
			}
			
			if(fecha_dispensacion != null){
				
					this.setProperty("fecha_dispensacion", fecha_dispensacion.toString());
				
			}
			
			if(fecha_egreso != null){
				
					this.setProperty("fecha_egreso", fecha_egreso.toString());
				
			}
			
			if(fecha_factura != null){
				
					this.setProperty("fecha_factura", fecha_factura.toString());
				
			}
			
			if(fecha_formulacion != null){
				
					this.setProperty("fecha_formulacion", fecha_formulacion.toString());
				
			}
			
			if(fecha_ingreso != null){
				
					this.setProperty("fecha_ingreso", fecha_ingreso.toString());
				
			}
			
			if(FECHA_NULL != null){
				
					String pattern_FECHA_NULL = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_NULL = "";
					String[] parts_FECHA_NULL = value_FECHA_NULL.split(";");
					if(parts_FECHA_NULL.length > 1){
						pattern_FECHA_NULL = parts_FECHA_NULL[0];
						this.setProperty("FECHA_NULL", pattern_FECHA_NULL + ";" + FormatterUtils.format_Date(FECHA_NULL, pattern_FECHA_NULL));
					}else{
						this.setProperty("FECHA_NULL", FormatterUtils.format_Date(FECHA_NULL, pattern_FECHA_NULL));
					}
				
			}
			
			if(fecha_registro != null){
				
					this.setProperty("fecha_registro", fecha_registro.toString());
				
			}
			
			if(fecha_servicio != null){
				
					this.setProperty("fecha_servicio", fecha_servicio.toString());
				
			}
			
			if(fecha_vencimiento != null){
				
					this.setProperty("fecha_vencimiento", fecha_vencimiento.toString());
				
			}
			
			if(fuerza_militar != null){
				
					this.setProperty("fuerza_militar", fuerza_militar.toString());
				
			}
			
			if(HORA != null){
				
					this.setProperty("HORA", HORA.toString());
				
			}
			
			if(invima != null){
				
					this.setProperty("invima", invima.toString());
				
			}
			
			if(laboratorio != null){
				
					this.setProperty("laboratorio", laboratorio.toString());
				
			}
			
			if(lote != null){
				
					this.setProperty("lote", lote.toString());
				
			}
			
			if(lugar_dispensacion != null){
				
					this.setProperty("lugar_dispensacion", lugar_dispensacion.toString());
				
			}
			
			if(MEDCONTRATOS_ID != null){
				
					this.setProperty("MEDCONTRATOS_ID", MEDCONTRATOS_ID.toString());
				
			}
			
			if(Narchivo != null){
				
					this.setProperty("Narchivo", Narchivo.toString());
				
			}
			
			if(nombre_medicamento != null){
				
					this.setProperty("nombre_medicamento", nombre_medicamento.toString());
				
			}
			
			if(numero != null){
				
					this.setProperty("numero", numero.toString());
				
			}
			
			if(numero_factura != null){
				
					this.setProperty("numero_factura", numero_factura.toString());
				
			}
			
			if(numero_formula != null){
				
					this.setProperty("numero_formula", numero_formula.toString());
				
			}
			
			if(observaciones != null){
				
					this.setProperty("observaciones", observaciones.toString());
				
			}
			
			if(origen_formulacion != null){
				
					this.setProperty("origen_formulacion", origen_formulacion.toString());
				
			}
			
			if(periodo != null){
				
					this.setProperty("periodo", periodo.toString());
				
			}
			
			if(prefijo != null){
				
					this.setProperty("prefijo", prefijo.toString());
				
			}
			
			if(presentacion != null){
				
					this.setProperty("presentacion", presentacion.toString());
				
			}
			
			if(PRESTADOR != null){
				
					this.setProperty("PRESTADOR", PRESTADOR.toString());
				
			}
			
			if(producto_comercial != null){
				
					this.setProperty("producto_comercial", producto_comercial.toString());
				
			}
			
			if(servicio != null){
				
					this.setProperty("servicio", servicio.toString());
				
			}
			
			if(ssmp != null){
				
					this.setProperty("ssmp", ssmp.toString());
				
			}
			
			if(subtotal != null){
				
					this.setProperty("subtotal", subtotal.toString());
				
			}
			
			if(tipificacion != null){
				
					this.setProperty("tipificacion", tipificacion.toString());
				
			}
			
			if(tipo != null){
				
					this.setProperty("tipo", tipo.toString());
				
			}
			
			if(tipo_documento != null){
				
					this.setProperty("tipo_documento", tipo_documento.toString());
				
			}
			
			if(tipo_formula != null){
				
					this.setProperty("tipo_formula", tipo_formula.toString());
				
			}
			
			if(tipo_servicio != null){
				
					this.setProperty("tipo_servicio", tipo_servicio.toString());
				
			}
			
			if(TipoRespuesta != null){
				
					this.setProperty("TipoRespuesta", TipoRespuesta.toString());
				
			}
			
			if(tirilla != null){
				
					this.setProperty("tirilla", tirilla.toString());
				
			}
			
			if(unidad_medida != null){
				
					this.setProperty("unidad_medida", unidad_medida.toString());
				
			}
			
			if(valor_gravado != null){
				
					this.setProperty("valor_gravado", valor_gravado.toString());
				
			}
			
			if(valor_intermediacion != null){
				
					this.setProperty("valor_intermediacion", valor_intermediacion.toString());
				
			}
			
			if(valor_total != null){
				
					this.setProperty("valor_total", valor_total.toString());
				
			}
			
			if(valor_unitario != null){
				
					this.setProperty("valor_unitario", valor_unitario.toString());
				
			}
			
			if(via_administracion != null){
				
					this.setProperty("via_administracion", via_administracion.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(PathStorage != null){
				
					this.setProperty("PathStorage", PathStorage.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(CargueArchivoId != null){
				
					this.setProperty("CargueArchivoId", CargueArchivoId.toString());
				
			}
			
			if(fechaArchivoErrores != null){
				
					this.setProperty("fechaArchivoErrores", fechaArchivoErrores.toString());
				
			}
			
			if(nErroresArchivo != null){
				
					this.setProperty("nErroresArchivo", nErroresArchivo.toString());
				
			}
			
			if(nRegArchivo != null){
				
					this.setProperty("nRegArchivo", nRegArchivo.toString());
				
			}
			
			if(vArchivo_Id != null){
				
					this.setProperty("vArchivo_Id", vArchivo_Id.toString());
				
			}
			
			if(vCantRegistros != null){
				
					this.setProperty("vCantRegistros", vCantRegistros.toString());
				
			}
			
			if(vEstadoCarga != null){
				
					this.setProperty("vEstadoCarga", vEstadoCarga.toString());
				
			}
			
			if(vIdTipoArchivo != null){
				
					this.setProperty("vIdTipoArchivo", vIdTipoArchivo.toString());
				
			}
			
			if(vNombreArchivo != null){
				
					this.setProperty("vNombreArchivo", vNombreArchivo.toString());
				
			}
			
			if(vNombreTipoArchivo != null){
				
					this.setProperty("vNombreTipoArchivo", vNombreTipoArchivo.toString());
				
			}
			
			if(vPeriodo != null){
				
					String pattern_vPeriodo = "yyyy-MM-dd HH:mm:ss";
					String value_vPeriodo = "";
					String[] parts_vPeriodo = value_vPeriodo.split(";");
					if(parts_vPeriodo.length > 1){
						pattern_vPeriodo = parts_vPeriodo[0];
						this.setProperty("vPeriodo", pattern_vPeriodo + ";" + FormatterUtils.format_Date(vPeriodo, pattern_vPeriodo));
					}else{
						this.setProperty("vPeriodo", FormatterUtils.format_Date(vPeriodo, pattern_vPeriodo));
					}
				
			}
			
			if(vRecepcionId != null){
				
					this.setProperty("vRecepcionId", vRecepcionId.toString());
				
			}
			
			if(vTipoArchivo != null){
				
					this.setProperty("vTipoArchivo", vTipoArchivo.toString());
				
			}
			
			if(contador != null){
				
					this.setProperty("contador", contador.toString());
				
			}
			
			if(eCIE10 != null){
				
					this.setProperty("eCIE10", eCIE10.toString());
				
			}
			
			if(eComercial != null){
				
					this.setProperty("eComercial", eComercial.toString());
				
			}
			
			if(eConcentracion != null){
				
					this.setProperty("eConcentracion", eConcentracion.toString());
				
			}
			
			if(eCTC != null){
				
					this.setProperty("eCTC", eCTC.toString());
				
			}
			
			if(eCum != null){
				
					this.setProperty("eCum", eCum.toString());
				
			}
			
			if(eCUPS != null){
				
					this.setProperty("eCUPS", eCUPS.toString());
				
			}
			
			if(eESM != null){
				
					this.setProperty("eESM", eESM.toString());
				
			}
			
			if(eGeneral != null){
				
					this.setProperty("eGeneral", eGeneral.toString());
				
			}
			
			if(eGenerico != null){
				
					this.setProperty("eGenerico", eGenerico.toString());
				
			}
			
			if(eInvima != null){
				
					this.setProperty("eInvima", eInvima.toString());
				
			}
			
			if(eLaboratorio != null){
				
					this.setProperty("eLaboratorio", eLaboratorio.toString());
				
			}
			
			if(ePersona != null){
				
					this.setProperty("ePersona", ePersona.toString());
				
			}
			
			if(ePresentacion != null){
				
					this.setProperty("ePresentacion", ePresentacion.toString());
				
			}
			
			if(eSSMP != null){
				
					this.setProperty("eSSMP", eSSMP.toString());
				
			}
			
			if(eTipoFormula != null){
				
					this.setProperty("eTipoFormula", eTipoFormula.toString());
				
			}
			
			if(eUmedida != null){
				
					this.setProperty("eUmedida", eUmedida.toString());
				
			}
			
			if(eViaAdministracion != null){
				
					this.setProperty("eViaAdministracion", eViaAdministracion.toString());
				
			}
			
			if(code != null){
				
					this.setProperty("code", code.toString());
				
			}
			
			if(context != null){
				
					this.setProperty("context", context.toString());
				
			}
			
			if(job != null){
				
					this.setProperty("job", job.toString());
				
			}
			
			if(message != null){
				
					this.setProperty("message", message.toString());
				
			}
			
			if(moment != null){
				
					String pattern_moment = "yyyy-MM-dd HH:mm:ss";
					String value_moment = "";
					String[] parts_moment = value_moment.split(";");
					if(parts_moment.length > 1){
						pattern_moment = parts_moment[0];
						this.setProperty("moment", pattern_moment + ";" + FormatterUtils.format_Date(moment, pattern_moment));
					}else{
						this.setProperty("moment", FormatterUtils.format_Date(moment, pattern_moment));
					}
				
			}
			
			if(origen != null){
				
					this.setProperty("origen", origen.toString());
				
			}
			
			if(priority != null){
				
					this.setProperty("priority", priority.toString());
				
			}
			
			if(project != null){
				
					this.setProperty("project", project.toString());
				
			}
			
			if(server_destino != null){
				
					this.setProperty("server_destino", server_destino.toString());
				
			}
			
			if(server_origen != null){
				
					this.setProperty("server_origen", server_origen.toString());
				
			}
			
			if(service_name_destino != null){
				
					this.setProperty("service_name_destino", service_name_destino.toString());
				
			}
			
			if(service_name_origen != null){
				
					this.setProperty("service_name_origen", service_name_origen.toString());
				
			}
			
			if(user_destino != null){
				
					this.setProperty("user_destino", user_destino.toString());
				
			}
			
			if(user_origen != null){
				
					this.setProperty("user_origen", user_origen.toString());
				
			}
			
			if(Cerrada != null){
				
					this.setProperty("Cerrada", Cerrada.toString());
				
			}
			
			if(Editada != null){
				
					this.setProperty("Editada", Editada.toString());
				
			}
			
			if(Editando != null){
				
					this.setProperty("Editando", Editando.toString());
				
			}
			
			if(Finalizada != null){
				
					this.setProperty("Finalizada", Finalizada.toString());
				
			}
			
			if(Iniciada != null){
				
					this.setProperty("Iniciada", Iniciada.toString());
				
			}
			
			if(Manual != null){
				
					this.setProperty("Manual", Manual.toString());
				
			}
			
			if(SinInniciar != null){
				
					this.setProperty("SinInniciar", SinInniciar.toString());
				
			}
			
			if(estActivo != null){
				
					this.setProperty("estActivo", estActivo.toString());
				
			}
			
			if(estCancelado != null){
				
					this.setProperty("estCancelado", estCancelado.toString());
				
			}
			
			if(estEnProceso != null){
				
					this.setProperty("estEnProceso", estEnProceso.toString());
				
			}
			
			if(estErrorArchivo != null){
				
					this.setProperty("estErrorArchivo", estErrorArchivo.toString());
				
			}
			
			if(estErrorProcesamiento != null){
				
					this.setProperty("estErrorProcesamiento", estErrorProcesamiento.toString());
				
			}
			
			if(estInactivo != null){
				
					this.setProperty("estInactivo", estInactivo.toString());
				
			}
			
			if(estPausado != null){
				
					this.setProperty("estPausado", estPausado.toString());
				
			}
			
			if(estProcesado != null){
				
					this.setProperty("estProcesado", estProcesado.toString());
				
			}
			
			if(EstValidado != null){
				
					this.setProperty("EstValidado", EstValidado.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(BANDERA_EJECUCION != null){
				
					this.setProperty("BANDERA_EJECUCION", BANDERA_EJECUCION.toString());
				
			}
			
			if(DCARGUE_ID != null){
				
					this.setProperty("DCARGUE_ID", DCARGUE_ID.toString());
				
			}
			
			if(DESTINO != null){
				
					this.setProperty("DESTINO", DESTINO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(JOB_ID != null){
				
					this.setProperty("JOB_ID", JOB_ID.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RECEPCION_ID != null){
				
					this.setProperty("RECEPCION_ID", RECEPCION_ID.toString());
				
			}
			
			if(TJOB != null){
				
					this.setProperty("TJOB", TJOB.toString());
				
			}
			
			if(EstadoArchivo != null){
				
					this.setProperty("EstadoArchivo", EstadoArchivo.toString());
				
			}
			
			if(Fauditoria != null){
				
					String pattern_Fauditoria = "yyyy-MM-dd HH:mm:ss";
					String value_Fauditoria = "";
					String[] parts_Fauditoria = value_Fauditoria.split(";");
					if(parts_Fauditoria.length > 1){
						pattern_Fauditoria = parts_Fauditoria[0];
						this.setProperty("Fauditoria", pattern_Fauditoria + ";" + FormatterUtils.format_Date(Fauditoria, pattern_Fauditoria));
					}else{
						this.setProperty("Fauditoria", FormatterUtils.format_Date(Fauditoria, pattern_Fauditoria));
					}
				
			}
			
			if(HAUDITORIA_ID != null){
				
					this.setProperty("HAUDITORIA_ID", HAUDITORIA_ID.toString());
				
			}
			
			if(Nfactura != null){
				
					this.setProperty("Nfactura", Nfactura.toString());
				
			}
			
			if(Sprefijo != null){
				
					this.setProperty("Sprefijo", Sprefijo.toString());
				
			}
			
			if(SumaFactura != null){
				
					this.setProperty("SumaFactura", SumaFactura.toString());
				
			}
			
			if(SumaGlosas != null){
				
					this.setProperty("SumaGlosas", SumaGlosas.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_SenderName != null){
				
					this.setProperty("mail_SenderName", mail_SenderName.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
			if(AfiliacionDerechos != null){
				
					this.setProperty("AfiliacionDerechos", AfiliacionDerechos.toString());
				
			}
			
			if(AfiliacionDerechosD != null){
				
					this.setProperty("AfiliacionDerechosD", AfiliacionDerechosD.toString());
				
			}
			
			if(AfiliacionInactiva != null){
				
					this.setProperty("AfiliacionInactiva", AfiliacionInactiva.toString());
				
			}
			
			if(AfiliacionInactivaD != null){
				
					this.setProperty("AfiliacionInactivaD", AfiliacionInactivaD.toString());
				
			}
			
			if(AutorizacionCobrado != null){
				
					this.setProperty("AutorizacionCobrado", AutorizacionCobrado.toString());
				
			}
			
			if(AutorizacionCobradoD != null){
				
					this.setProperty("AutorizacionCobradoD", AutorizacionCobradoD.toString());
				
			}
			
			if(AutorizacionCups != null){
				
					this.setProperty("AutorizacionCups", AutorizacionCups.toString());
				
			}
			
			if(AutorizacionCupsD != null){
				
					this.setProperty("AutorizacionCupsD", AutorizacionCupsD.toString());
				
			}
			
			if(AutorizacionNoExiste != null){
				
					this.setProperty("AutorizacionNoExiste", AutorizacionNoExiste.toString());
				
			}
			
			if(AutorizacionNoExisteD != null){
				
					this.setProperty("AutorizacionNoExisteD", AutorizacionNoExisteD.toString());
				
			}
			
			if(AutorizacionPersona != null){
				
					this.setProperty("AutorizacionPersona", AutorizacionPersona.toString());
				
			}
			
			if(AutorizacionPersonaD != null){
				
					this.setProperty("AutorizacionPersonaD", AutorizacionPersonaD.toString());
				
			}
			
			if(AutorizacionPrestador != null){
				
					this.setProperty("AutorizacionPrestador", AutorizacionPrestador.toString());
				
			}
			
			if(AutorizacionPrestadorD != null){
				
					this.setProperty("AutorizacionPrestadorD", AutorizacionPrestadorD.toString());
				
			}
			
			if(CantidadFormulada != null){
				
					this.setProperty("CantidadFormulada", CantidadFormulada.toString());
				
			}
			
			if(CantidadFormuladaD != null){
				
					this.setProperty("CantidadFormuladaD", CantidadFormuladaD.toString());
				
			}
			
			if(FacturaAuditada != null){
				
					this.setProperty("FacturaAuditada", FacturaAuditada.toString());
				
			}
			
			if(FacturaAuditadaD != null){
				
					this.setProperty("FacturaAuditadaD", FacturaAuditadaD.toString());
				
			}
			
			if(MedicamentoNoPactado != null){
				
					this.setProperty("MedicamentoNoPactado", MedicamentoNoPactado.toString());
				
			}
			
			if(MedicamentoNoPactadoD != null){
				
					this.setProperty("MedicamentoNoPactadoD", MedicamentoNoPactadoD.toString());
				
			}
			
			if(PorcetajeConsumo != null){
				
					this.setProperty("PorcetajeConsumo", PorcetajeConsumo.toString());
				
			}
			
			if(PorcetajeConsumoD != null){
				
					this.setProperty("PorcetajeConsumoD", PorcetajeConsumoD.toString());
				
			}
			
			if(SumaFacturas != null){
				
					this.setProperty("SumaFacturas", SumaFacturas.toString());
				
			}
			
			if(SumaFacturasD != null){
				
					this.setProperty("SumaFacturasD", SumaFacturasD.toString());
				
			}
			
			if(TiempoEntrega != null){
				
					this.setProperty("TiempoEntrega", TiempoEntrega.toString());
				
			}
			
			if(TiempoEntregaD != null){
				
					this.setProperty("TiempoEntregaD", TiempoEntregaD.toString());
				
			}
			
			if(ValorDiferente != null){
				
					this.setProperty("ValorDiferente", ValorDiferente.toString());
				
			}
			
			if(ValorDiferenteD != null){
				
					this.setProperty("ValorDiferenteD", ValorDiferenteD.toString());
				
			}
			
			if(ValorNoPactado != null){
				
					this.setProperty("ValorNoPactado", ValorNoPactado.toString());
				
			}
			
			if(ValorNoPactadoD != null){
				
					this.setProperty("ValorNoPactadoD", ValorNoPactadoD.toString());
				
			}
			
			if(VidaUtil != null){
				
					this.setProperty("VidaUtil", VidaUtil.toString());
				
			}
			
			if(VidaUtilD != null){
				
					this.setProperty("VidaUtilD", VidaUtilD.toString());
				
			}
			
			if(AUDITORIA_ID != null){
				
					this.setProperty("AUDITORIA_ID", AUDITORIA_ID.toString());
				
			}
			
			if(ETAPASNORMATIVIDAD_ID != null){
				
					this.setProperty("ETAPASNORMATIVIDAD_ID", ETAPASNORMATIVIDAD_ID.toString());
				
			}
			
			if(FRADICADO != null){
				
					String pattern_FRADICADO = "yyyy-MM-dd HH:mm:ss";
					String value_FRADICADO = "";
					String[] parts_FRADICADO = value_FRADICADO.split(";");
					if(parts_FRADICADO.length > 1){
						pattern_FRADICADO = parts_FRADICADO[0];
						this.setProperty("FRADICADO", pattern_FRADICADO + ";" + FormatterUtils.format_Date(FRADICADO, pattern_FRADICADO));
					}else{
						this.setProperty("FRADICADO", FormatterUtils.format_Date(FRADICADO, pattern_FRADICADO));
					}
				
			}
			
			if(NORMATIVIDAD_ETAPA_ID != null){
				
					this.setProperty("NORMATIVIDAD_ETAPA_ID", NORMATIVIDAD_ETAPA_ID.toString());
				
			}
			
			if(NORMATIVIDAD_GLOSA_ID != null){
				
					this.setProperty("NORMATIVIDAD_GLOSA_ID", NORMATIVIDAD_GLOSA_ID.toString());
				
			}
			
			if(SUMATORIA != null){
				
					this.setProperty("SUMATORIA", SUMATORIA.toString());
				
			}
			
			if(SUMATORIA_FACTURA != null){
				
					this.setProperty("SUMATORIA_FACTURA", SUMATORIA_FACTURA.toString());
				
			}
			
			if(UORG_ID != null){
				
					this.setProperty("UORG_ID", UORG_ID.toString());
				
			}
			
			if(USUARIOS_ID != null){
				
					this.setProperty("USUARIOS_ID", USUARIOS_ID.toString());
				
			}
			
			if(VIDA_UTIL != null){
				
					this.setProperty("VIDA_UTIL", VIDA_UTIL.toString());
				
			}
			
			if(vFechaFinContrato != null){
				
					String pattern_vFechaFinContrato = "yyyy-MM-dd HH:mm:ss";
					String value_vFechaFinContrato = "";
					String[] parts_vFechaFinContrato = value_vFechaFinContrato.split(";");
					if(parts_vFechaFinContrato.length > 1){
						pattern_vFechaFinContrato = parts_vFechaFinContrato[0];
						this.setProperty("vFechaFinContrato", pattern_vFechaFinContrato + ";" + FormatterUtils.format_Date(vFechaFinContrato, pattern_vFechaFinContrato));
					}else{
						this.setProperty("vFechaFinContrato", FormatterUtils.format_Date(vFechaFinContrato, pattern_vFechaFinContrato));
					}
				
			}
			
			if(vFechaIniContrato != null){
				
					String pattern_vFechaIniContrato = "yyyy-MM-dd HH:mm:ss";
					String value_vFechaIniContrato = "";
					String[] parts_vFechaIniContrato = value_vFechaIniContrato.split(";");
					if(parts_vFechaIniContrato.length > 1){
						pattern_vFechaIniContrato = parts_vFechaIniContrato[0];
						this.setProperty("vFechaIniContrato", pattern_vFechaIniContrato + ";" + FormatterUtils.format_Date(vFechaIniContrato, pattern_vFechaIniContrato));
					}else{
						this.setProperty("vFechaIniContrato", FormatterUtils.format_Date(vFechaIniContrato, pattern_vFechaIniContrato));
					}
				
			}
			
			if(vIntermediacionDisp != null){
				
					this.setProperty("vIntermediacionDisp", vIntermediacionDisp.toString());
				
			}
			
			if(vIntermediacionSum != null){
				
					this.setProperty("vIntermediacionSum", vIntermediacionSum.toString());
				
			}
			
			if(vTipificacion != null){
				
					this.setProperty("vTipificacion", vTipificacion.toString());
				
			}
			
			if(vTipoArchivoSigla != null){
				
					this.setProperty("vTipoArchivoSigla", vTipoArchivoSigla.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer BANDERA;
public Integer getBANDERA(){
	return this.BANDERA;
}
public String bodega;
public String getBodega(){
	return this.bodega;
}
public String cantidad;
public String getCantidad(){
	return this.cantidad;
}
public String cantidad_despachada;
public String getCantidad_despachada(){
	return this.cantidad_despachada;
}
public String cantidad_solicitada;
public String getCantidad_solicitada(){
	return this.cantidad_solicitada;
}
public String codigo_autorizacion;
public String getCodigo_autorizacion(){
	return this.codigo_autorizacion;
}
public String codigo_cie10;
public String getCodigo_cie10(){
	return this.codigo_cie10;
}
public String codigo_cum;
public String getCodigo_cum(){
	return this.codigo_cum;
}
public String codigo_cups;
public String getCodigo_cups(){
	return this.codigo_cups;
}
public String concentracion;
public String getConcentracion(){
	return this.concentracion;
}
public String confidencialidad;
public String getConfidencialidad(){
	return this.confidencialidad;
}
public BigDecimal CONTRATOS_ID;
public BigDecimal getCONTRATOS_ID(){
	return this.CONTRATOS_ID;
}
public String ctc_aprobado;
public String getCtc_aprobado(){
	return this.ctc_aprobado;
}
public String descripcion_cie10;
public String getDescripcion_cie10(){
	return this.descripcion_cie10;
}
public String descripcion_cups;
public String getDescripcion_cups(){
	return this.descripcion_cups;
}
public String documento;
public String getDocumento(){
	return this.documento;
}
public String esm;
public String getEsm(){
	return this.esm;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public Integer EstAfiliacionActivo;
public Integer getEstAfiliacionActivo(){
	return this.EstAfiliacionActivo;
}
public Integer EstAfiliacionProvisional;
public Integer getEstAfiliacionProvisional(){
	return this.EstAfiliacionProvisional;
}
public Integer EstAfiliaicionInactivo;
public Integer getEstAfiliaicionInactivo(){
	return this.EstAfiliaicionInactivo;
}
public BigDecimal EstArchivoPCE;
public BigDecimal getEstArchivoPCE(){
	return this.EstArchivoPCE;
}
public String fecha_autorizacion;
public String getFecha_autorizacion(){
	return this.fecha_autorizacion;
}
public String fecha_dispensacion;
public String getFecha_dispensacion(){
	return this.fecha_dispensacion;
}
public String fecha_egreso;
public String getFecha_egreso(){
	return this.fecha_egreso;
}
public String fecha_factura;
public String getFecha_factura(){
	return this.fecha_factura;
}
public String fecha_formulacion;
public String getFecha_formulacion(){
	return this.fecha_formulacion;
}
public String fecha_ingreso;
public String getFecha_ingreso(){
	return this.fecha_ingreso;
}
public java.util.Date FECHA_NULL;
public java.util.Date getFECHA_NULL(){
	return this.FECHA_NULL;
}
public String fecha_registro;
public String getFecha_registro(){
	return this.fecha_registro;
}
public String fecha_servicio;
public String getFecha_servicio(){
	return this.fecha_servicio;
}
public String fecha_vencimiento;
public String getFecha_vencimiento(){
	return this.fecha_vencimiento;
}
public String fuerza_militar;
public String getFuerza_militar(){
	return this.fuerza_militar;
}
public Integer HORA;
public Integer getHORA(){
	return this.HORA;
}
public String invima;
public String getInvima(){
	return this.invima;
}
public String laboratorio;
public String getLaboratorio(){
	return this.laboratorio;
}
public String lote;
public String getLote(){
	return this.lote;
}
public String lugar_dispensacion;
public String getLugar_dispensacion(){
	return this.lugar_dispensacion;
}
public BigDecimal MEDCONTRATOS_ID;
public BigDecimal getMEDCONTRATOS_ID(){
	return this.MEDCONTRATOS_ID;
}
public String Narchivo;
public String getNarchivo(){
	return this.Narchivo;
}
public String nombre_medicamento;
public String getNombre_medicamento(){
	return this.nombre_medicamento;
}
public String numero;
public String getNumero(){
	return this.numero;
}
public String numero_factura;
public String getNumero_factura(){
	return this.numero_factura;
}
public String numero_formula;
public String getNumero_formula(){
	return this.numero_formula;
}
public String observaciones;
public String getObservaciones(){
	return this.observaciones;
}
public String origen_formulacion;
public String getOrigen_formulacion(){
	return this.origen_formulacion;
}
public String periodo;
public String getPeriodo(){
	return this.periodo;
}
public String prefijo;
public String getPrefijo(){
	return this.prefijo;
}
public String presentacion;
public String getPresentacion(){
	return this.presentacion;
}
public BigDecimal PRESTADOR;
public BigDecimal getPRESTADOR(){
	return this.PRESTADOR;
}
public String producto_comercial;
public String getProducto_comercial(){
	return this.producto_comercial;
}
public String servicio;
public String getServicio(){
	return this.servicio;
}
public String ssmp;
public String getSsmp(){
	return this.ssmp;
}
public String subtotal;
public String getSubtotal(){
	return this.subtotal;
}
public String tipificacion;
public String getTipificacion(){
	return this.tipificacion;
}
public String tipo;
public String getTipo(){
	return this.tipo;
}
public String tipo_documento;
public String getTipo_documento(){
	return this.tipo_documento;
}
public String tipo_formula;
public String getTipo_formula(){
	return this.tipo_formula;
}
public String tipo_servicio;
public String getTipo_servicio(){
	return this.tipo_servicio;
}
public BigDecimal TipoRespuesta;
public BigDecimal getTipoRespuesta(){
	return this.TipoRespuesta;
}
public String tirilla;
public String getTirilla(){
	return this.tirilla;
}
public String unidad_medida;
public String getUnidad_medida(){
	return this.unidad_medida;
}
public String valor_gravado;
public String getValor_gravado(){
	return this.valor_gravado;
}
public String valor_intermediacion;
public String getValor_intermediacion(){
	return this.valor_intermediacion;
}
public String valor_total;
public String getValor_total(){
	return this.valor_total;
}
public String valor_unitario;
public String getValor_unitario(){
	return this.valor_unitario;
}
public String via_administracion;
public String getVia_administracion(){
	return this.via_administracion;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String PathStorage;
public String getPathStorage(){
	return this.PathStorage;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Integer CargueArchivoId;
public Integer getCargueArchivoId(){
	return this.CargueArchivoId;
}
public String fechaArchivoErrores;
public String getFechaArchivoErrores(){
	return this.fechaArchivoErrores;
}
public Integer nErroresArchivo;
public Integer getNErroresArchivo(){
	return this.nErroresArchivo;
}
public Integer nRegArchivo;
public Integer getNRegArchivo(){
	return this.nRegArchivo;
}
public BigDecimal vArchivo_Id;
public BigDecimal getVArchivo_Id(){
	return this.vArchivo_Id;
}
public Integer vCantRegistros;
public Integer getVCantRegistros(){
	return this.vCantRegistros;
}
public String vEstadoCarga;
public String getVEstadoCarga(){
	return this.vEstadoCarga;
}
public BigDecimal vIdTipoArchivo;
public BigDecimal getVIdTipoArchivo(){
	return this.vIdTipoArchivo;
}
public String vNombreArchivo;
public String getVNombreArchivo(){
	return this.vNombreArchivo;
}
public String vNombreTipoArchivo;
public String getVNombreTipoArchivo(){
	return this.vNombreTipoArchivo;
}
public java.util.Date vPeriodo;
public java.util.Date getVPeriodo(){
	return this.vPeriodo;
}
public BigDecimal vRecepcionId;
public BigDecimal getVRecepcionId(){
	return this.vRecepcionId;
}
public String vTipoArchivo;
public String getVTipoArchivo(){
	return this.vTipoArchivo;
}
public Integer contador;
public Integer getContador(){
	return this.contador;
}
public String eCIE10;
public String getECIE10(){
	return this.eCIE10;
}
public String eComercial;
public String getEComercial(){
	return this.eComercial;
}
public String eConcentracion;
public String getEConcentracion(){
	return this.eConcentracion;
}
public String eCTC;
public String getECTC(){
	return this.eCTC;
}
public String eCum;
public String getECum(){
	return this.eCum;
}
public String eCUPS;
public String getECUPS(){
	return this.eCUPS;
}
public String eESM;
public String getEESM(){
	return this.eESM;
}
public String eGeneral;
public String getEGeneral(){
	return this.eGeneral;
}
public String eGenerico;
public String getEGenerico(){
	return this.eGenerico;
}
public String eInvima;
public String getEInvima(){
	return this.eInvima;
}
public String eLaboratorio;
public String getELaboratorio(){
	return this.eLaboratorio;
}
public String ePersona;
public String getEPersona(){
	return this.ePersona;
}
public String ePresentacion;
public String getEPresentacion(){
	return this.ePresentacion;
}
public String eSSMP;
public String getESSMP(){
	return this.eSSMP;
}
public String eTipoFormula;
public String getETipoFormula(){
	return this.eTipoFormula;
}
public String eUmedida;
public String getEUmedida(){
	return this.eUmedida;
}
public String eViaAdministracion;
public String getEViaAdministracion(){
	return this.eViaAdministracion;
}
public Integer code;
public Integer getCode(){
	return this.code;
}
public String context;
public String getContext(){
	return this.context;
}
public String job;
public String getJob(){
	return this.job;
}
public String message;
public String getMessage(){
	return this.message;
}
public java.util.Date moment;
public java.util.Date getMoment(){
	return this.moment;
}
public String origen;
public String getOrigen(){
	return this.origen;
}
public Integer priority;
public Integer getPriority(){
	return this.priority;
}
public String project;
public String getProject(){
	return this.project;
}
public String server_destino;
public String getServer_destino(){
	return this.server_destino;
}
public String server_origen;
public String getServer_origen(){
	return this.server_origen;
}
public String service_name_destino;
public String getService_name_destino(){
	return this.service_name_destino;
}
public String service_name_origen;
public String getService_name_origen(){
	return this.service_name_origen;
}
public String user_destino;
public String getUser_destino(){
	return this.user_destino;
}
public String user_origen;
public String getUser_origen(){
	return this.user_origen;
}
public BigDecimal Cerrada;
public BigDecimal getCerrada(){
	return this.Cerrada;
}
public BigDecimal Editada;
public BigDecimal getEditada(){
	return this.Editada;
}
public BigDecimal Editando;
public BigDecimal getEditando(){
	return this.Editando;
}
public BigDecimal Finalizada;
public BigDecimal getFinalizada(){
	return this.Finalizada;
}
public BigDecimal Iniciada;
public BigDecimal getIniciada(){
	return this.Iniciada;
}
public BigDecimal Manual;
public BigDecimal getManual(){
	return this.Manual;
}
public BigDecimal SinInniciar;
public BigDecimal getSinInniciar(){
	return this.SinInniciar;
}
public BigDecimal estActivo;
public BigDecimal getEstActivo(){
	return this.estActivo;
}
public BigDecimal estCancelado;
public BigDecimal getEstCancelado(){
	return this.estCancelado;
}
public BigDecimal estEnProceso;
public BigDecimal getEstEnProceso(){
	return this.estEnProceso;
}
public BigDecimal estErrorArchivo;
public BigDecimal getEstErrorArchivo(){
	return this.estErrorArchivo;
}
public BigDecimal estErrorProcesamiento;
public BigDecimal getEstErrorProcesamiento(){
	return this.estErrorProcesamiento;
}
public BigDecimal estInactivo;
public BigDecimal getEstInactivo(){
	return this.estInactivo;
}
public BigDecimal estPausado;
public BigDecimal getEstPausado(){
	return this.estPausado;
}
public BigDecimal estProcesado;
public BigDecimal getEstProcesado(){
	return this.estProcesado;
}
public BigDecimal EstValidado;
public BigDecimal getEstValidado(){
	return this.EstValidado;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public Integer BANDERA_EJECUCION;
public Integer getBANDERA_EJECUCION(){
	return this.BANDERA_EJECUCION;
}
public BigDecimal DCARGUE_ID;
public BigDecimal getDCARGUE_ID(){
	return this.DCARGUE_ID;
}
public String DESTINO;
public String getDESTINO(){
	return this.DESTINO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public BigDecimal JOB_ID;
public BigDecimal getJOB_ID(){
	return this.JOB_ID;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public BigDecimal RECEPCION_ID;
public BigDecimal getRECEPCION_ID(){
	return this.RECEPCION_ID;
}
public Integer TJOB;
public Integer getTJOB(){
	return this.TJOB;
}
public Integer EstadoArchivo;
public Integer getEstadoArchivo(){
	return this.EstadoArchivo;
}
public java.util.Date Fauditoria;
public java.util.Date getFauditoria(){
	return this.Fauditoria;
}
public BigDecimal HAUDITORIA_ID;
public BigDecimal getHAUDITORIA_ID(){
	return this.HAUDITORIA_ID;
}
public String Nfactura;
public String getNfactura(){
	return this.Nfactura;
}
public String Sprefijo;
public String getSprefijo(){
	return this.Sprefijo;
}
public Double SumaFactura;
public Double getSumaFactura(){
	return this.SumaFactura;
}
public Double SumaGlosas;
public Double getSumaGlosas(){
	return this.SumaGlosas;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public String mail_Password;
public String getMail_Password(){
	return this.mail_Password;
}
public String mail_SenderName;
public String getMail_SenderName(){
	return this.mail_SenderName;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
public BigDecimal AfiliacionDerechos;
public BigDecimal getAfiliacionDerechos(){
	return this.AfiliacionDerechos;
}
public String AfiliacionDerechosD;
public String getAfiliacionDerechosD(){
	return this.AfiliacionDerechosD;
}
public BigDecimal AfiliacionInactiva;
public BigDecimal getAfiliacionInactiva(){
	return this.AfiliacionInactiva;
}
public String AfiliacionInactivaD;
public String getAfiliacionInactivaD(){
	return this.AfiliacionInactivaD;
}
public BigDecimal AutorizacionCobrado;
public BigDecimal getAutorizacionCobrado(){
	return this.AutorizacionCobrado;
}
public String AutorizacionCobradoD;
public String getAutorizacionCobradoD(){
	return this.AutorizacionCobradoD;
}
public BigDecimal AutorizacionCups;
public BigDecimal getAutorizacionCups(){
	return this.AutorizacionCups;
}
public String AutorizacionCupsD;
public String getAutorizacionCupsD(){
	return this.AutorizacionCupsD;
}
public BigDecimal AutorizacionNoExiste;
public BigDecimal getAutorizacionNoExiste(){
	return this.AutorizacionNoExiste;
}
public String AutorizacionNoExisteD;
public String getAutorizacionNoExisteD(){
	return this.AutorizacionNoExisteD;
}
public BigDecimal AutorizacionPersona;
public BigDecimal getAutorizacionPersona(){
	return this.AutorizacionPersona;
}
public String AutorizacionPersonaD;
public String getAutorizacionPersonaD(){
	return this.AutorizacionPersonaD;
}
public BigDecimal AutorizacionPrestador;
public BigDecimal getAutorizacionPrestador(){
	return this.AutorizacionPrestador;
}
public String AutorizacionPrestadorD;
public String getAutorizacionPrestadorD(){
	return this.AutorizacionPrestadorD;
}
public BigDecimal CantidadFormulada;
public BigDecimal getCantidadFormulada(){
	return this.CantidadFormulada;
}
public String CantidadFormuladaD;
public String getCantidadFormuladaD(){
	return this.CantidadFormuladaD;
}
public BigDecimal FacturaAuditada;
public BigDecimal getFacturaAuditada(){
	return this.FacturaAuditada;
}
public String FacturaAuditadaD;
public String getFacturaAuditadaD(){
	return this.FacturaAuditadaD;
}
public BigDecimal MedicamentoNoPactado;
public BigDecimal getMedicamentoNoPactado(){
	return this.MedicamentoNoPactado;
}
public String MedicamentoNoPactadoD;
public String getMedicamentoNoPactadoD(){
	return this.MedicamentoNoPactadoD;
}
public BigDecimal PorcetajeConsumo;
public BigDecimal getPorcetajeConsumo(){
	return this.PorcetajeConsumo;
}
public String PorcetajeConsumoD;
public String getPorcetajeConsumoD(){
	return this.PorcetajeConsumoD;
}
public BigDecimal SumaFacturas;
public BigDecimal getSumaFacturas(){
	return this.SumaFacturas;
}
public String SumaFacturasD;
public String getSumaFacturasD(){
	return this.SumaFacturasD;
}
public BigDecimal TiempoEntrega;
public BigDecimal getTiempoEntrega(){
	return this.TiempoEntrega;
}
public String TiempoEntregaD;
public String getTiempoEntregaD(){
	return this.TiempoEntregaD;
}
public BigDecimal ValorDiferente;
public BigDecimal getValorDiferente(){
	return this.ValorDiferente;
}
public String ValorDiferenteD;
public String getValorDiferenteD(){
	return this.ValorDiferenteD;
}
public BigDecimal ValorNoPactado;
public BigDecimal getValorNoPactado(){
	return this.ValorNoPactado;
}
public String ValorNoPactadoD;
public String getValorNoPactadoD(){
	return this.ValorNoPactadoD;
}
public BigDecimal VidaUtil;
public BigDecimal getVidaUtil(){
	return this.VidaUtil;
}
public String VidaUtilD;
public String getVidaUtilD(){
	return this.VidaUtilD;
}
public BigDecimal AUDITORIA_ID;
public BigDecimal getAUDITORIA_ID(){
	return this.AUDITORIA_ID;
}
public BigDecimal ETAPASNORMATIVIDAD_ID;
public BigDecimal getETAPASNORMATIVIDAD_ID(){
	return this.ETAPASNORMATIVIDAD_ID;
}
public java.util.Date FRADICADO;
public java.util.Date getFRADICADO(){
	return this.FRADICADO;
}
public BigDecimal NORMATIVIDAD_ETAPA_ID;
public BigDecimal getNORMATIVIDAD_ETAPA_ID(){
	return this.NORMATIVIDAD_ETAPA_ID;
}
public BigDecimal NORMATIVIDAD_GLOSA_ID;
public BigDecimal getNORMATIVIDAD_GLOSA_ID(){
	return this.NORMATIVIDAD_GLOSA_ID;
}
public Double SUMATORIA;
public Double getSUMATORIA(){
	return this.SUMATORIA;
}
public Double SUMATORIA_FACTURA;
public Double getSUMATORIA_FACTURA(){
	return this.SUMATORIA_FACTURA;
}
public BigDecimal UORG_ID;
public BigDecimal getUORG_ID(){
	return this.UORG_ID;
}
public BigDecimal USUARIOS_ID;
public BigDecimal getUSUARIOS_ID(){
	return this.USUARIOS_ID;
}
public Integer VIDA_UTIL;
public Integer getVIDA_UTIL(){
	return this.VIDA_UTIL;
}
public java.util.Date vFechaFinContrato;
public java.util.Date getVFechaFinContrato(){
	return this.vFechaFinContrato;
}
public java.util.Date vFechaIniContrato;
public java.util.Date getVFechaIniContrato(){
	return this.vFechaIniContrato;
}
public BigDecimal vIntermediacionDisp;
public BigDecimal getVIntermediacionDisp(){
	return this.vIntermediacionDisp;
}
public BigDecimal vIntermediacionSum;
public BigDecimal getVIntermediacionSum(){
	return this.vIntermediacionSum;
}
public String vTipificacion;
public String getVTipificacion(){
	return this.vTipificacion;
}
public String vTipoArchivoSigla;
public String getVTipoArchivoSigla(){
	return this.vTipoArchivoSigla;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "GlosasMedicamentos";
	private final String projectName = "ACM_CONTROL_AUDITORIA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				GlosasMedicamentos.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(GlosasMedicamentos.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tReplicate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_25_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_27_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleRow_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_26_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row62_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row63_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row61_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row44_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row52_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row65_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_27_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row67_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_29_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_6_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_6_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_6_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_3_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_3_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_3_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_5_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_5_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_5_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_4_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_4_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_4_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_10_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_7_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_7_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_7_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					((java.util.Map)threadLocal.get()).put("errorCode", null);
					tDie_1Process(globalMap);
					if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
						((java.util.Map)threadLocal.get()).put("status", "end");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_25_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_27_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_29_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_10_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;
context.PathStorage = row1.PathStorage;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");


System.out.println("- Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);
System.out.println("- Port: "+context.db_origen_Port);
System.out.println("- PDB: "+context.db_origen_Server);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk26", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Fail connection", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Fail connection");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Fail connection");
	globalMap.put("tDie_1_DIE_MESSAGES", "Fail connection");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableRow<row29Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public String RADICADO;

				public String getRADICADO () {
					return this.RADICADO;
				}

				public Boolean RADICADOIsNullable(){
				    return true;
				}
				public Boolean RADICADOIsKey(){
				    return false;
				}
				public Integer RADICADOLength(){
				    return null;
				}
				public Integer RADICADOPrecision(){
				    return null;
				}
				public String RADICADODefault(){
				
					return null;
				
				}
				public String RADICADOComment(){
				
				    return "";
				
				}
				public String RADICADOPattern(){
				
					return "";
				
				}
				public String RADICADOOriginalDbColumnName(){
				
					return "RADICADO";
				
				}

				
			    public java.util.Date FRADICADO;

				public java.util.Date getFRADICADO () {
					return this.FRADICADO;
				}

				public Boolean FRADICADOIsNullable(){
				    return true;
				}
				public Boolean FRADICADOIsKey(){
				    return false;
				}
				public Integer FRADICADOLength(){
				    return null;
				}
				public Integer FRADICADOPrecision(){
				    return null;
				}
				public String FRADICADODefault(){
				
					return null;
				
				}
				public String FRADICADOComment(){
				
				    return "";
				
				}
				public String FRADICADOPattern(){
				
					return "";
				
				}
				public String FRADICADOOriginalDbColumnName(){
				
					return "FRADICADO";
				
				}

				
			    public java.util.Date FECHA_AUDITORIA;

				public java.util.Date getFECHA_AUDITORIA () {
					return this.FECHA_AUDITORIA;
				}

				public Boolean FECHA_AUDITORIAIsNullable(){
				    return true;
				}
				public Boolean FECHA_AUDITORIAIsKey(){
				    return false;
				}
				public Integer FECHA_AUDITORIALength(){
				    return null;
				}
				public Integer FECHA_AUDITORIAPrecision(){
				    return null;
				}
				public String FECHA_AUDITORIADefault(){
				
					return null;
				
				}
				public String FECHA_AUDITORIAComment(){
				
				    return "";
				
				}
				public String FECHA_AUDITORIAPattern(){
				
					return "";
				
				}
				public String FECHA_AUDITORIAOriginalDbColumnName(){
				
					return "FECHA_AUDITORIA";
				
				}

				
			    public java.util.Date FRECIBIDO;

				public java.util.Date getFRECIBIDO () {
					return this.FRECIBIDO;
				}

				public Boolean FRECIBIDOIsNullable(){
				    return true;
				}
				public Boolean FRECIBIDOIsKey(){
				    return false;
				}
				public Integer FRECIBIDOLength(){
				    return null;
				}
				public Integer FRECIBIDOPrecision(){
				    return null;
				}
				public String FRECIBIDODefault(){
				
					return null;
				
				}
				public String FRECIBIDOComment(){
				
				    return "";
				
				}
				public String FRECIBIDOPattern(){
				
					return "";
				
				}
				public String FRECIBIDOOriginalDbColumnName(){
				
					return "FRECIBIDO";
				
				}

				
			    public String TPAGO;

				public String getTPAGO () {
					return this.TPAGO;
				}

				public Boolean TPAGOIsNullable(){
				    return true;
				}
				public Boolean TPAGOIsKey(){
				    return false;
				}
				public Integer TPAGOLength(){
				    return null;
				}
				public Integer TPAGOPrecision(){
				    return null;
				}
				public String TPAGODefault(){
				
					return null;
				
				}
				public String TPAGOComment(){
				
				    return "";
				
				}
				public String TPAGOPattern(){
				
					return "";
				
				}
				public String TPAGOOriginalDbColumnName(){
				
					return "TPAGO";
				
				}

				
			    public String FACTURAS;

				public String getFACTURAS () {
					return this.FACTURAS;
				}

				public Boolean FACTURASIsNullable(){
				    return true;
				}
				public Boolean FACTURASIsKey(){
				    return false;
				}
				public Integer FACTURASLength(){
				    return null;
				}
				public Integer FACTURASPrecision(){
				    return null;
				}
				public String FACTURASDefault(){
				
					return null;
				
				}
				public String FACTURASComment(){
				
				    return "";
				
				}
				public String FACTURASPattern(){
				
					return "";
				
				}
				public String FACTURASOriginalDbColumnName(){
				
					return "FACTURAS";
				
				}

				
			    public String OBSERVACIONFACTURA;

				public String getOBSERVACIONFACTURA () {
					return this.OBSERVACIONFACTURA;
				}

				public Boolean OBSERVACIONFACTURAIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONFACTURAIsKey(){
				    return false;
				}
				public Integer OBSERVACIONFACTURALength(){
				    return null;
				}
				public Integer OBSERVACIONFACTURAPrecision(){
				    return null;
				}
				public String OBSERVACIONFACTURADefault(){
				
					return null;
				
				}
				public String OBSERVACIONFACTURAComment(){
				
				    return "";
				
				}
				public String OBSERVACIONFACTURAPattern(){
				
					return "";
				
				}
				public String OBSERVACIONFACTURAOriginalDbColumnName(){
				
					return "OBSERVACIONFACTURA";
				
				}

				
			    public String RIPSFORMATO;

				public String getRIPSFORMATO () {
					return this.RIPSFORMATO;
				}

				public Boolean RIPSFORMATOIsNullable(){
				    return true;
				}
				public Boolean RIPSFORMATOIsKey(){
				    return false;
				}
				public Integer RIPSFORMATOLength(){
				    return null;
				}
				public Integer RIPSFORMATOPrecision(){
				    return null;
				}
				public String RIPSFORMATODefault(){
				
					return null;
				
				}
				public String RIPSFORMATOComment(){
				
				    return "";
				
				}
				public String RIPSFORMATOPattern(){
				
					return "";
				
				}
				public String RIPSFORMATOOriginalDbColumnName(){
				
					return "RIPSFORMATO";
				
				}

				
			    public String OBSERVACIONRIPS;

				public String getOBSERVACIONRIPS () {
					return this.OBSERVACIONRIPS;
				}

				public Boolean OBSERVACIONRIPSIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONRIPSIsKey(){
				    return false;
				}
				public Integer OBSERVACIONRIPSLength(){
				    return null;
				}
				public Integer OBSERVACIONRIPSPrecision(){
				    return null;
				}
				public String OBSERVACIONRIPSDefault(){
				
					return null;
				
				}
				public String OBSERVACIONRIPSComment(){
				
				    return "";
				
				}
				public String OBSERVACIONRIPSPattern(){
				
					return "";
				
				}
				public String OBSERVACIONRIPSOriginalDbColumnName(){
				
					return "OBSERVACIONRIPS";
				
				}

				
			    public BigDecimal CANTFACTURAS;

				public BigDecimal getCANTFACTURAS () {
					return this.CANTFACTURAS;
				}

				public Boolean CANTFACTURASIsNullable(){
				    return false;
				}
				public Boolean CANTFACTURASIsKey(){
				    return false;
				}
				public Integer CANTFACTURASLength(){
				    return null;
				}
				public Integer CANTFACTURASPrecision(){
				    return null;
				}
				public String CANTFACTURASDefault(){
				
					return "";
				
				}
				public String CANTFACTURASComment(){
				
				    return "";
				
				}
				public String CANTFACTURASPattern(){
				
					return "";
				
				}
				public String CANTFACTURASOriginalDbColumnName(){
				
					return "CANTFACTURAS";
				
				}

				
			    public BigDecimal CANTFOLIOS;

				public BigDecimal getCANTFOLIOS () {
					return this.CANTFOLIOS;
				}

				public Boolean CANTFOLIOSIsNullable(){
				    return false;
				}
				public Boolean CANTFOLIOSIsKey(){
				    return false;
				}
				public Integer CANTFOLIOSLength(){
				    return null;
				}
				public Integer CANTFOLIOSPrecision(){
				    return null;
				}
				public String CANTFOLIOSDefault(){
				
					return "";
				
				}
				public String CANTFOLIOSComment(){
				
				    return "";
				
				}
				public String CANTFOLIOSPattern(){
				
					return "";
				
				}
				public String CANTFOLIOSOriginalDbColumnName(){
				
					return "CANTFOLIOS";
				
				}

				
			    public BigDecimal CANTDISCOS;

				public BigDecimal getCANTDISCOS () {
					return this.CANTDISCOS;
				}

				public Boolean CANTDISCOSIsNullable(){
				    return false;
				}
				public Boolean CANTDISCOSIsKey(){
				    return false;
				}
				public Integer CANTDISCOSLength(){
				    return null;
				}
				public Integer CANTDISCOSPrecision(){
				    return null;
				}
				public String CANTDISCOSDefault(){
				
					return "";
				
				}
				public String CANTDISCOSComment(){
				
				    return "";
				
				}
				public String CANTDISCOSPattern(){
				
					return "";
				
				}
				public String CANTDISCOSOriginalDbColumnName(){
				
					return "CANTDISCOS";
				
				}

				
			    public BigDecimal CANTOFICIOS;

				public BigDecimal getCANTOFICIOS () {
					return this.CANTOFICIOS;
				}

				public Boolean CANTOFICIOSIsNullable(){
				    return false;
				}
				public Boolean CANTOFICIOSIsKey(){
				    return false;
				}
				public Integer CANTOFICIOSLength(){
				    return null;
				}
				public Integer CANTOFICIOSPrecision(){
				    return null;
				}
				public String CANTOFICIOSDefault(){
				
					return "";
				
				}
				public String CANTOFICIOSComment(){
				
				    return "";
				
				}
				public String CANTOFICIOSPattern(){
				
					return "";
				
				}
				public String CANTOFICIOSOriginalDbColumnName(){
				
					return "CANTOFICIOS";
				
				}

				
			    public String OTROS;

				public String getOTROS () {
					return this.OTROS;
				}

				public Boolean OTROSIsNullable(){
				    return true;
				}
				public Boolean OTROSIsKey(){
				    return false;
				}
				public Integer OTROSLength(){
				    return null;
				}
				public Integer OTROSPrecision(){
				    return null;
				}
				public String OTROSDefault(){
				
					return "";
				
				}
				public String OTROSComment(){
				
				    return "";
				
				}
				public String OTROSPattern(){
				
					return "";
				
				}
				public String OTROSOriginalDbColumnName(){
				
					return "OTROS";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return "";
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return "";
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "";
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return "";
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal MEDCONTRATOS_ID;

				public BigDecimal getMEDCONTRATOS_ID () {
					return this.MEDCONTRATOS_ID;
				}

				public Boolean MEDCONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean MEDCONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer MEDCONTRATOS_IDLength(){
				    return null;
				}
				public Integer MEDCONTRATOS_IDPrecision(){
				    return null;
				}
				public String MEDCONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String MEDCONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDOriginalDbColumnName(){
				
					return "MEDCONTRATOS_ID";
				
				}

				
			    public BigDecimal CANTFACTURASDETALLE;

				public BigDecimal getCANTFACTURASDETALLE () {
					return this.CANTFACTURASDETALLE;
				}

				public Boolean CANTFACTURASDETALLEIsNullable(){
				    return true;
				}
				public Boolean CANTFACTURASDETALLEIsKey(){
				    return false;
				}
				public Integer CANTFACTURASDETALLELength(){
				    return null;
				}
				public Integer CANTFACTURASDETALLEPrecision(){
				    return null;
				}
				public String CANTFACTURASDETALLEDefault(){
				
					return "";
				
				}
				public String CANTFACTURASDETALLEComment(){
				
				    return "";
				
				}
				public String CANTFACTURASDETALLEPattern(){
				
					return "";
				
				}
				public String CANTFACTURASDETALLEOriginalDbColumnName(){
				
					return "CANTFACTURASDETALLE";
				
				}

				
			    public String RESOLUCION;

				public String getRESOLUCION () {
					return this.RESOLUCION;
				}

				public Boolean RESOLUCIONIsNullable(){
				    return true;
				}
				public Boolean RESOLUCIONIsKey(){
				    return false;
				}
				public Integer RESOLUCIONLength(){
				    return null;
				}
				public Integer RESOLUCIONPrecision(){
				    return null;
				}
				public String RESOLUCIONDefault(){
				
					return "";
				
				}
				public String RESOLUCIONComment(){
				
				    return "";
				
				}
				public String RESOLUCIONPattern(){
				
					return "";
				
				}
				public String RESOLUCIONOriginalDbColumnName(){
				
					return "RESOLUCION";
				
				}

				
			    public BigDecimal JOBS_ID;

				public BigDecimal getJOBS_ID () {
					return this.JOBS_ID;
				}

				public Boolean JOBS_IDIsNullable(){
				    return true;
				}
				public Boolean JOBS_IDIsKey(){
				    return false;
				}
				public Integer JOBS_IDLength(){
				    return null;
				}
				public Integer JOBS_IDPrecision(){
				    return null;
				}
				public String JOBS_IDDefault(){
				
					return "";
				
				}
				public String JOBS_IDComment(){
				
				    return "";
				
				}
				public String JOBS_IDPattern(){
				
					return "";
				
				}
				public String JOBS_IDOriginalDbColumnName(){
				
					return "JOBS_ID";
				
				}

				
			    public BigDecimal CONFTIEMPOS_ID;

				public BigDecimal getCONFTIEMPOS_ID () {
					return this.CONFTIEMPOS_ID;
				}

				public Boolean CONFTIEMPOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONFTIEMPOS_IDIsKey(){
				    return false;
				}
				public Integer CONFTIEMPOS_IDLength(){
				    return null;
				}
				public Integer CONFTIEMPOS_IDPrecision(){
				    return null;
				}
				public String CONFTIEMPOS_IDDefault(){
				
					return "";
				
				}
				public String CONFTIEMPOS_IDComment(){
				
				    return "";
				
				}
				public String CONFTIEMPOS_IDPattern(){
				
					return "";
				
				}
				public String CONFTIEMPOS_IDOriginalDbColumnName(){
				
					return "CONFTIEMPOS_ID";
				
				}

				
			    public BigDecimal NORMATIVIDAD_ETAPA_ID;

				public BigDecimal getNORMATIVIDAD_ETAPA_ID () {
					return this.NORMATIVIDAD_ETAPA_ID;
				}

				public Boolean NORMATIVIDAD_ETAPA_IDIsNullable(){
				    return true;
				}
				public Boolean NORMATIVIDAD_ETAPA_IDIsKey(){
				    return false;
				}
				public Integer NORMATIVIDAD_ETAPA_IDLength(){
				    return null;
				}
				public Integer NORMATIVIDAD_ETAPA_IDPrecision(){
				    return null;
				}
				public String NORMATIVIDAD_ETAPA_IDDefault(){
				
					return "";
				
				}
				public String NORMATIVIDAD_ETAPA_IDComment(){
				
				    return "";
				
				}
				public String NORMATIVIDAD_ETAPA_IDPattern(){
				
					return "";
				
				}
				public String NORMATIVIDAD_ETAPA_IDOriginalDbColumnName(){
				
					return "NORMATIVIDAD_ETAPA_ID";
				
				}

				
			    public BigDecimal NORMATIVIDAD_GLOSA_ID;

				public BigDecimal getNORMATIVIDAD_GLOSA_ID () {
					return this.NORMATIVIDAD_GLOSA_ID;
				}

				public Boolean NORMATIVIDAD_GLOSA_IDIsNullable(){
				    return true;
				}
				public Boolean NORMATIVIDAD_GLOSA_IDIsKey(){
				    return false;
				}
				public Integer NORMATIVIDAD_GLOSA_IDLength(){
				    return null;
				}
				public Integer NORMATIVIDAD_GLOSA_IDPrecision(){
				    return null;
				}
				public String NORMATIVIDAD_GLOSA_IDDefault(){
				
					return "";
				
				}
				public String NORMATIVIDAD_GLOSA_IDComment(){
				
				    return "";
				
				}
				public String NORMATIVIDAD_GLOSA_IDPattern(){
				
					return "";
				
				}
				public String NORMATIVIDAD_GLOSA_IDOriginalDbColumnName(){
				
					return "NORMATIVIDAD_GLOSA_ID";
				
				}

				
			    public java.util.Date FCIERRE;

				public java.util.Date getFCIERRE () {
					return this.FCIERRE;
				}

				public Boolean FCIERREIsNullable(){
				    return true;
				}
				public Boolean FCIERREIsKey(){
				    return false;
				}
				public Integer FCIERRELength(){
				    return null;
				}
				public Integer FCIERREPrecision(){
				    return null;
				}
				public String FCIERREDefault(){
				
					return "";
				
				}
				public String FCIERREComment(){
				
				    return "";
				
				}
				public String FCIERREPattern(){
				
					return "";
				
				}
				public String FCIERREOriginalDbColumnName(){
				
					return "FCIERRE";
				
				}

				
			    public BigDecimal GRUPOS_ID;

				public BigDecimal getGRUPOS_ID () {
					return this.GRUPOS_ID;
				}

				public Boolean GRUPOS_IDIsNullable(){
				    return true;
				}
				public Boolean GRUPOS_IDIsKey(){
				    return false;
				}
				public Integer GRUPOS_IDLength(){
				    return null;
				}
				public Integer GRUPOS_IDPrecision(){
				    return null;
				}
				public String GRUPOS_IDDefault(){
				
					return "";
				
				}
				public String GRUPOS_IDComment(){
				
				    return "";
				
				}
				public String GRUPOS_IDPattern(){
				
					return "";
				
				}
				public String GRUPOS_IDOriginalDbColumnName(){
				
					return "GRUPOS_ID";
				
				}

				
			    public BigDecimal ESTEXTDERECHOS_ID;

				public BigDecimal getESTEXTDERECHOS_ID () {
					return this.ESTEXTDERECHOS_ID;
				}

				public Boolean ESTEXTDERECHOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTEXTDERECHOS_IDIsKey(){
				    return false;
				}
				public Integer ESTEXTDERECHOS_IDLength(){
				    return null;
				}
				public Integer ESTEXTDERECHOS_IDPrecision(){
				    return null;
				}
				public String ESTEXTDERECHOS_IDDefault(){
				
					return "";
				
				}
				public String ESTEXTDERECHOS_IDComment(){
				
				    return "";
				
				}
				public String ESTEXTDERECHOS_IDPattern(){
				
					return "";
				
				}
				public String ESTEXTDERECHOS_IDOriginalDbColumnName(){
				
					return "ESTEXTDERECHOS_ID";
				
				}

				
			    public BigDecimal VTOTALCALCULADO;

				public BigDecimal getVTOTALCALCULADO () {
					return this.VTOTALCALCULADO;
				}

				public Boolean VTOTALCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VTOTALCALCULADOIsKey(){
				    return false;
				}
				public Integer VTOTALCALCULADOLength(){
				    return null;
				}
				public Integer VTOTALCALCULADOPrecision(){
				    return null;
				}
				public String VTOTALCALCULADODefault(){
				
					return "";
				
				}
				public String VTOTALCALCULADOComment(){
				
				    return "";
				
				}
				public String VTOTALCALCULADOPattern(){
				
					return "";
				
				}
				public String VTOTALCALCULADOOriginalDbColumnName(){
				
					return "VTOTALCALCULADO";
				
				}

				
			    public java.util.Date FCIERRETAPAUNO;

				public java.util.Date getFCIERRETAPAUNO () {
					return this.FCIERRETAPAUNO;
				}

				public Boolean FCIERRETAPAUNOIsNullable(){
				    return true;
				}
				public Boolean FCIERRETAPAUNOIsKey(){
				    return false;
				}
				public Integer FCIERRETAPAUNOLength(){
				    return null;
				}
				public Integer FCIERRETAPAUNOPrecision(){
				    return null;
				}
				public String FCIERRETAPAUNODefault(){
				
					return "";
				
				}
				public String FCIERRETAPAUNOComment(){
				
				    return "";
				
				}
				public String FCIERRETAPAUNOPattern(){
				
					return "";
				
				}
				public String FCIERRETAPAUNOOriginalDbColumnName(){
				
					return "FCIERRETAPAUNO";
				
				}

				
			    public java.util.Date FCIERRETAPADOS;

				public java.util.Date getFCIERRETAPADOS () {
					return this.FCIERRETAPADOS;
				}

				public Boolean FCIERRETAPADOSIsNullable(){
				    return true;
				}
				public Boolean FCIERRETAPADOSIsKey(){
				    return false;
				}
				public Integer FCIERRETAPADOSLength(){
				    return null;
				}
				public Integer FCIERRETAPADOSPrecision(){
				    return null;
				}
				public String FCIERRETAPADOSDefault(){
				
					return "";
				
				}
				public String FCIERRETAPADOSComment(){
				
				    return "";
				
				}
				public String FCIERRETAPADOSPattern(){
				
					return "";
				
				}
				public String FCIERRETAPADOSOriginalDbColumnName(){
				
					return "FCIERRETAPADOS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.RADICADO = readString(dis);
					
					this.FRADICADO = readDate(dis);
					
					this.FECHA_AUDITORIA = readDate(dis);
					
					this.FRECIBIDO = readDate(dis);
					
					this.TPAGO = readString(dis);
					
					this.FACTURAS = readString(dis);
					
					this.OBSERVACIONFACTURA = readString(dis);
					
					this.RIPSFORMATO = readString(dis);
					
					this.OBSERVACIONRIPS = readString(dis);
					
						this.CANTFACTURAS = (BigDecimal) dis.readObject();
					
						this.CANTFOLIOS = (BigDecimal) dis.readObject();
					
						this.CANTDISCOS = (BigDecimal) dis.readObject();
					
						this.CANTOFICIOS = (BigDecimal) dis.readObject();
					
					this.OTROS = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CANTFACTURASDETALLE = (BigDecimal) dis.readObject();
					
					this.RESOLUCION = readString(dis);
					
						this.JOBS_ID = (BigDecimal) dis.readObject();
					
						this.CONFTIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.NORMATIVIDAD_ETAPA_ID = (BigDecimal) dis.readObject();
					
						this.NORMATIVIDAD_GLOSA_ID = (BigDecimal) dis.readObject();
					
					this.FCIERRE = readDate(dis);
					
						this.GRUPOS_ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
						this.VTOTALCALCULADO = (BigDecimal) dis.readObject();
					
					this.FCIERRETAPAUNO = readDate(dis);
					
					this.FCIERRETAPADOS = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.RADICADO = readString(dis);
					
					this.FRADICADO = readDate(dis);
					
					this.FECHA_AUDITORIA = readDate(dis);
					
					this.FRECIBIDO = readDate(dis);
					
					this.TPAGO = readString(dis);
					
					this.FACTURAS = readString(dis);
					
					this.OBSERVACIONFACTURA = readString(dis);
					
					this.RIPSFORMATO = readString(dis);
					
					this.OBSERVACIONRIPS = readString(dis);
					
						this.CANTFACTURAS = (BigDecimal) dis.readObject();
					
						this.CANTFOLIOS = (BigDecimal) dis.readObject();
					
						this.CANTDISCOS = (BigDecimal) dis.readObject();
					
						this.CANTOFICIOS = (BigDecimal) dis.readObject();
					
					this.OTROS = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.PERIODO = readDate(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.CANTFACTURASDETALLE = (BigDecimal) dis.readObject();
					
					this.RESOLUCION = readString(dis);
					
						this.JOBS_ID = (BigDecimal) dis.readObject();
					
						this.CONFTIEMPOS_ID = (BigDecimal) dis.readObject();
					
						this.NORMATIVIDAD_ETAPA_ID = (BigDecimal) dis.readObject();
					
						this.NORMATIVIDAD_GLOSA_ID = (BigDecimal) dis.readObject();
					
					this.FCIERRE = readDate(dis);
					
						this.GRUPOS_ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
						this.VTOTALCALCULADO = (BigDecimal) dis.readObject();
					
					this.FCIERRETAPAUNO = readDate(dis);
					
					this.FCIERRETAPADOS = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// String
				
						writeString(this.RADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FRADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUDITORIA,dos);
					
					// java.util.Date
				
						writeDate(this.FRECIBIDO,dos);
					
					// String
				
						writeString(this.TPAGO,dos);
					
					// String
				
						writeString(this.FACTURAS,dos);
					
					// String
				
						writeString(this.OBSERVACIONFACTURA,dos);
					
					// String
				
						writeString(this.RIPSFORMATO,dos);
					
					// String
				
						writeString(this.OBSERVACIONRIPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFACTURAS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFOLIOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTDISCOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTOFICIOS);
					
					// String
				
						writeString(this.OTROS,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFACTURASDETALLE);
					
					// String
				
						writeString(this.RESOLUCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.JOBS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONFTIEMPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NORMATIVIDAD_ETAPA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.NORMATIVIDAD_GLOSA_ID);
					
					// java.util.Date
				
						writeDate(this.FCIERRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GRUPOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTEXTDERECHOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTALCALCULADO);
					
					// java.util.Date
				
						writeDate(this.FCIERRETAPAUNO,dos);
					
					// java.util.Date
				
						writeDate(this.FCIERRETAPADOS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// String
				
						writeString(this.RADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FRADICADO,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA_AUDITORIA,dos);
					
					// java.util.Date
				
						writeDate(this.FRECIBIDO,dos);
					
					// String
				
						writeString(this.TPAGO,dos);
					
					// String
				
						writeString(this.FACTURAS,dos);
					
					// String
				
						writeString(this.OBSERVACIONFACTURA,dos);
					
					// String
				
						writeString(this.RIPSFORMATO,dos);
					
					// String
				
						writeString(this.OBSERVACIONRIPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFACTURAS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFOLIOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTDISCOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTOFICIOS);
					
					// String
				
						writeString(this.OTROS,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFACTURASDETALLE);
					
					// String
				
						writeString(this.RESOLUCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.JOBS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONFTIEMPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NORMATIVIDAD_ETAPA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.NORMATIVIDAD_GLOSA_ID);
					
					// java.util.Date
				
						writeDate(this.FCIERRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GRUPOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTEXTDERECHOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTALCALCULADO);
					
					// java.util.Date
				
						writeDate(this.FCIERRETAPAUNO,dos);
					
					// java.util.Date
				
						writeDate(this.FCIERRETAPADOS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",RADICADO="+RADICADO);
		sb.append(",FRADICADO="+String.valueOf(FRADICADO));
		sb.append(",FECHA_AUDITORIA="+String.valueOf(FECHA_AUDITORIA));
		sb.append(",FRECIBIDO="+String.valueOf(FRECIBIDO));
		sb.append(",TPAGO="+TPAGO);
		sb.append(",FACTURAS="+FACTURAS);
		sb.append(",OBSERVACIONFACTURA="+OBSERVACIONFACTURA);
		sb.append(",RIPSFORMATO="+RIPSFORMATO);
		sb.append(",OBSERVACIONRIPS="+OBSERVACIONRIPS);
		sb.append(",CANTFACTURAS="+String.valueOf(CANTFACTURAS));
		sb.append(",CANTFOLIOS="+String.valueOf(CANTFOLIOS));
		sb.append(",CANTDISCOS="+String.valueOf(CANTDISCOS));
		sb.append(",CANTOFICIOS="+String.valueOf(CANTOFICIOS));
		sb.append(",OTROS="+OTROS);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",MEDCONTRATOS_ID="+String.valueOf(MEDCONTRATOS_ID));
		sb.append(",CANTFACTURASDETALLE="+String.valueOf(CANTFACTURASDETALLE));
		sb.append(",RESOLUCION="+RESOLUCION);
		sb.append(",JOBS_ID="+String.valueOf(JOBS_ID));
		sb.append(",CONFTIEMPOS_ID="+String.valueOf(CONFTIEMPOS_ID));
		sb.append(",NORMATIVIDAD_ETAPA_ID="+String.valueOf(NORMATIVIDAD_ETAPA_ID));
		sb.append(",NORMATIVIDAD_GLOSA_ID="+String.valueOf(NORMATIVIDAD_GLOSA_ID));
		sb.append(",FCIERRE="+String.valueOf(FCIERRE));
		sb.append(",GRUPOS_ID="+String.valueOf(GRUPOS_ID));
		sb.append(",ESTEXTDERECHOS_ID="+String.valueOf(ESTEXTDERECHOS_ID));
		sb.append(",VTOTALCALCULADO="+String.valueOf(VTOTALCALCULADO));
		sb.append(",FCIERRETAPAUNO="+String.valueOf(FCIERRETAPAUNO));
		sb.append(",FCIERRETAPADOS="+String.valueOf(FCIERRETAPADOS));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				String driverClass_tOracleInput_2 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_2);
				
			String url_tOracleInput_2 = null;
				url_tOracleInput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_2 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_2 = context.db_origen_Password; 

				String dbPwd_tOracleInput_2 = decryptedPassword_tOracleInput_2;

				
					java.util.Properties atnParamsPrope_tOracleInput_2 = new java.util.Properties();
					atnParamsPrope_tOracleInput_2.put("user",dbUser_tOracleInput_2);
					atnParamsPrope_tOracleInput_2.put("password",dbPwd_tOracleInput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_2 = java.sql.DriverManager.getConnection(url_tOracleInput_2, atnParamsPrope_tOracleInput_2);
				java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_2.next()) {
					sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
				}
                                if (!(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                                }
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \nID,\nPRESTADOR_ID,\nRADICADO,\nFRADICADO,\nACM.SumaDiasHabilesFecha (FRADICADO,1,UORG_ID) AS FECHA_AUDITORIA,"
+"\nFRECIBIDO,\nTPAGO,\nFACTURAS,\nOBSERVACIONFACTURA,\nRIPSFORMATO,\nOBSERVACIONRIPS,\nCANTFACTURAS,\nCANTFOLIOS,\nCANTDIS"
+"COS,\nCANTOFICIOS,\nOTROS,\nOBSERVACIONES,\nFECHA,\nUSUARIOS_ID,\nUORG_ID,\nESTADO,\nESTREGISTRO_ID,\nPERIODO,\nCONTRATO"
+"S_ID,\nMEDCONTRATOS_ID,\nCANTFACTURASDETALLE,\nRESOLUCION,\nJOBS_ID,\nCONFTIEMPOS_ID,\nNORMATIVIDAD_ETAPA_ID,\nNORMATIVI"
+"DAD_GLOSA_ID,\nFCIERRE,\nGRUPOS_ID,\nESTEXTDERECHOS_ID,\nVTOTALCALCULADO,\nFCIERRETAPAUNO,\nFCIERRETAPADOS\nFROM ACM_REC"
+"EPCION \n WHERE ID ="+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row29.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row29.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row29.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row29.PRESTADOR_ID = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row29.RADICADO = null;
							} else {
	                         		
        	row29.RADICADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row29.FRADICADO = null;
							} else {
										
			row29.FRADICADO = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 4);
		                    }
							if(colQtyInRs_tOracleInput_2 < 5) {
								row29.FECHA_AUDITORIA = null;
							} else {
										
			row29.FECHA_AUDITORIA = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 5);
		                    }
							if(colQtyInRs_tOracleInput_2 < 6) {
								row29.FRECIBIDO = null;
							} else {
										
			row29.FRECIBIDO = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 6);
		                    }
							if(colQtyInRs_tOracleInput_2 < 7) {
								row29.TPAGO = null;
							} else {
	                         		
        	row29.TPAGO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 8) {
								row29.FACTURAS = null;
							} else {
	                         		
        	row29.FACTURAS = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 9) {
								row29.OBSERVACIONFACTURA = null;
							} else {
	                         		
        	row29.OBSERVACIONFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 10) {
								row29.RIPSFORMATO = null;
							} else {
	                         		
        	row29.RIPSFORMATO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 11) {
								row29.OBSERVACIONRIPS = null;
							} else {
	                         		
        	row29.OBSERVACIONRIPS = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 12) {
								row29.CANTFACTURAS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(12) != null) {
						row29.CANTFACTURAS = rs_tOracleInput_2.getBigDecimal(12);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 13) {
								row29.CANTFOLIOS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(13) != null) {
						row29.CANTFOLIOS = rs_tOracleInput_2.getBigDecimal(13);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 14) {
								row29.CANTDISCOS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(14) != null) {
						row29.CANTDISCOS = rs_tOracleInput_2.getBigDecimal(14);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 15) {
								row29.CANTOFICIOS = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(15) != null) {
						row29.CANTOFICIOS = rs_tOracleInput_2.getBigDecimal(15);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 16) {
								row29.OTROS = null;
							} else {
	                         		
        	row29.OTROS = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 17) {
								row29.OBSERVACIONES = null;
							} else {
	                         		
        	row29.OBSERVACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 18) {
								row29.FECHA = null;
							} else {
										
			row29.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 18);
		                    }
							if(colQtyInRs_tOracleInput_2 < 19) {
								row29.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(19) != null) {
						row29.USUARIOS_ID = rs_tOracleInput_2.getBigDecimal(19);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 20) {
								row29.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(20) != null) {
						row29.UORG_ID = rs_tOracleInput_2.getBigDecimal(20);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 21) {
								row29.ESTADO = null;
							} else {
	                         		
        	row29.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 22) {
								row29.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(22) != null) {
						row29.ESTREGISTRO_ID = rs_tOracleInput_2.getBigDecimal(22);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 23) {
								row29.PERIODO = null;
							} else {
										
			row29.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 23);
		                    }
							if(colQtyInRs_tOracleInput_2 < 24) {
								row29.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(24) != null) {
						row29.CONTRATOS_ID = rs_tOracleInput_2.getBigDecimal(24);
					} else {
				
						row29.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 25) {
								row29.MEDCONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(25) != null) {
						row29.MEDCONTRATOS_ID = rs_tOracleInput_2.getBigDecimal(25);
					} else {
				
						row29.MEDCONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 26) {
								row29.CANTFACTURASDETALLE = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(26) != null) {
						row29.CANTFACTURASDETALLE = rs_tOracleInput_2.getBigDecimal(26);
					} else {
				
						row29.CANTFACTURASDETALLE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 27) {
								row29.RESOLUCION = null;
							} else {
	                         		
        	row29.RESOLUCION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 28) {
								row29.JOBS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(28) != null) {
						row29.JOBS_ID = rs_tOracleInput_2.getBigDecimal(28);
					} else {
				
						row29.JOBS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 29) {
								row29.CONFTIEMPOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(29) != null) {
						row29.CONFTIEMPOS_ID = rs_tOracleInput_2.getBigDecimal(29);
					} else {
				
						row29.CONFTIEMPOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 30) {
								row29.NORMATIVIDAD_ETAPA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(30) != null) {
						row29.NORMATIVIDAD_ETAPA_ID = rs_tOracleInput_2.getBigDecimal(30);
					} else {
				
						row29.NORMATIVIDAD_ETAPA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 31) {
								row29.NORMATIVIDAD_GLOSA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(31) != null) {
						row29.NORMATIVIDAD_GLOSA_ID = rs_tOracleInput_2.getBigDecimal(31);
					} else {
				
						row29.NORMATIVIDAD_GLOSA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 32) {
								row29.FCIERRE = null;
							} else {
										
			row29.FCIERRE = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 32);
		                    }
							if(colQtyInRs_tOracleInput_2 < 33) {
								row29.GRUPOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(33) != null) {
						row29.GRUPOS_ID = rs_tOracleInput_2.getBigDecimal(33);
					} else {
				
						row29.GRUPOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 34) {
								row29.ESTEXTDERECHOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(34) != null) {
						row29.ESTEXTDERECHOS_ID = rs_tOracleInput_2.getBigDecimal(34);
					} else {
				
						row29.ESTEXTDERECHOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 35) {
								row29.VTOTALCALCULADO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(35) != null) {
						row29.VTOTALCALCULADO = rs_tOracleInput_2.getBigDecimal(35);
					} else {
				
						row29.VTOTALCALCULADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 36) {
								row29.FCIERRETAPAUNO = null;
							} else {
										
			row29.FCIERRETAPAUNO = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 36);
		                    }
							if(colQtyInRs_tOracleInput_2 < 37) {
								row29.FCIERRETAPADOS = null;
							} else {
										
			row29.FCIERRETAPADOS = routines.system.JDBCUtil.getDate(rs_tOracleInput_2, 37);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					

    //Code generate according to input schema and output schema
//Code generate according to input schema and output schema


context.PRESTADOR = row29.PRESTADOR_ID;
context.USUARIOS_ID= row29.USUARIOS_ID;
context.UORG_ID = row29.UORG_ID;
context.NORMATIVIDAD_ETAPA_ID = row29.NORMATIVIDAD_ETAPA_ID;
context.NORMATIVIDAD_GLOSA_ID = row29.NORMATIVIDAD_GLOSA_ID;
context.FRADICADO = row29.FRADICADO;
context.Fauditoria = row29.FECHA_AUDITORIA;
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
	if(conn_tOracleInput_2 != null && !conn_tOracleInput_2.isClosed()) {
	
			conn_tOracleInput_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk29", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				String driverClass_tOracleInput_3 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_3);
				
			String url_tOracleInput_3 = null;
				url_tOracleInput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_3 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_3 = context.db_origen_Password; 

				String dbPwd_tOracleInput_3 = decryptedPassword_tOracleInput_3;

				
					java.util.Properties atnParamsPrope_tOracleInput_3 = new java.util.Properties();
					atnParamsPrope_tOracleInput_3.put("user",dbUser_tOracleInput_3);
					atnParamsPrope_tOracleInput_3.put("password",dbPwd_tOracleInput_3);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_3.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_3 = java.sql.DriverManager.getConnection(url_tOracleInput_3, atnParamsPrope_tOracleInput_3);
				java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_3.next()) {
					sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
				}
                                if (!(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                                }
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \nET.ID \nFROM \nACM_ETAPASNORMATIVIDAD  ET\nINNER JOIN ACM_NORMATIVIDAD NOR ON NOR.ID = ET.NORMATIVIDAD_ID\nINN"
+"ER JOIN ACM_RECEPCION RE ON RE.NORMATIVIDAD_ETAPA_ID = NOR.ID\nWHERE ET.CODIGO = 1 \nAND ET.ESTADO = 'Activo'\nAND ET.ES"
+"TREGISTRO_ID =1\nAND RE.ID = "+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row31.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row31.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.ETAPASNORMATIVIDAD_ID = row31.ID;

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
	if(conn_tOracleInput_3 != null && !conn_tOracleInput_3.isClosed()) {
	
			conn_tOracleInput_3.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk30", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableRow<row38Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row38Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				String driverClass_tOracleInput_4 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_4);
				
			String url_tOracleInput_4 = null;
				url_tOracleInput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_4 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_4 = context.db_origen_Password; 

				String dbPwd_tOracleInput_4 = decryptedPassword_tOracleInput_4;

				
					java.util.Properties atnParamsPrope_tOracleInput_4 = new java.util.Properties();
					atnParamsPrope_tOracleInput_4.put("user",dbUser_tOracleInput_4);
					atnParamsPrope_tOracleInput_4.put("password",dbPwd_tOracleInput_4);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_4.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_4 = java.sql.DriverManager.getConnection(url_tOracleInput_4, atnParamsPrope_tOracleInput_4);
				java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_4.next()) {
					sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
				}
                                if (!(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                                }
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT \nNC.ID, \nNC.NOMBRE, \nNC.SIGLA,\nANC.CAUSALGLOSAS_ID\nFROM \nACM_NOCONFORMIDADES NC\nINNER JOIN ACM_CAUSALGLOS"
+"A_NOCONFRMDADES CN ON CN.NOCONFORMIDADES_ID = NC.ID\nINNER JOIN ACM_NORMAS_CAUSALGLOSAS ANC ON ANC.ID = CN.NORMAS_CAUSAL"
+"GLOSAS_ID\nINNER JOIN ACM_RECEPCION RE ON RE.ID = "+context.RECEPCION_ID+"  AND RE.NORMATIVIDAD_GLOSA_ID = ANC.NORMATIVIDAD_ID\nWHERE NC.ESTADO = 'Activo'\nAND CN.ESTADO = 'Activo'\nAND ANC.EST"
+"ADO = 'Activo'\nAND NC.ESTREGISTRO_ID = 1\nAND CN.ESTREGISTRO_ID = 1\nAND ANC.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row38.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row38.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row38.NOMBRE = null;
							} else {
	                         		
        	row38.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row38.SIGLA = null;
							} else {
	                         		
        	row38.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row38.CAUSALGLOSAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(4) != null) {
						row38.CAUSALGLOSAS_ID = rs_tOracleInput_4.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					



    
		row38Struct oneRow_tHashOutput_2 = new row38Struct();
				
					oneRow_tHashOutput_2.ID = row38.ID;
					oneRow_tHashOutput_2.NOMBRE = row38.NOMBRE;
					oneRow_tHashOutput_2.SIGLA = row38.SIGLA;
					oneRow_tHashOutput_2.CAUSALGLOSAS_ID = row38.CAUSALGLOSAS_ID;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
	if(conn_tOracleInput_4 != null && !conn_tOracleInput_4.isClosed()) {
	
			conn_tOracleInput_4.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk31", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row39Struct implements routines.system.IPersistableRow<row39Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();
row41Struct row41 = new row41Struct();
row39Struct row39 = new row39Struct();





	
	/**
	 * [tHashOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_18", false);
		start_Hash.put("tHashOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tHashOutput_18 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row41Struct> tHashFile_tHashOutput_18 = null;
		String hashKey_tHashOutput_18 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_18";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_18)){
			    if(mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18) == null){
	      		    mf_tHashOutput_18.getResourceMap().put(hashKey_tHashOutput_18, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row41Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }else{
			    	tHashFile_tHashOutput_18 = mf_tHashOutput_18.getResourceMap().get(hashKey_tHashOutput_18);
			    }
			}
        int nb_line_tHashOutput_18 = 0;

 



/**
 * [tHashOutput_18 begin ] stop
 */




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tReplicate_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tReplicate_1", false);
		start_Hash.put("tReplicate_1", System.currentTimeMillis());
		
	
	currentComponent="tReplicate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tReplicate_1 = 0;
		

 



/**
 * [tReplicate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				String driverClass_tOracleInput_5 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_5);
				
			String url_tOracleInput_5 = null;
				url_tOracleInput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_5 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_5 = context.db_origen_Password; 

				String dbPwd_tOracleInput_5 = decryptedPassword_tOracleInput_5;

				
					java.util.Properties atnParamsPrope_tOracleInput_5 = new java.util.Properties();
					atnParamsPrope_tOracleInput_5.put("user",dbUser_tOracleInput_5);
					atnParamsPrope_tOracleInput_5.put("password",dbPwd_tOracleInput_5);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_5.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_5 = java.sql.DriverManager.getConnection(url_tOracleInput_5, atnParamsPrope_tOracleInput_5);
				java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_5.next()) {
					sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
				}
                                if (!(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                }
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT \nNC.ID, \nNC.NOMBRE, \nNC.SIGLA,\nANC.CAUSALGLOSAS_ID\nFROM \nACM_NOCONFORMIDADES NC\nINNER JOIN ACM_CAUSALGLOS"
+"A_NOCONFRMDADES CN ON CN.NOCONFORMIDADES_ID = NC.ID\nINNER JOIN ACM_NORMAS_CAUSALGLOSAS ANC ON ANC.ID = CN.NORMAS_CAUSAL"
+"GLOSAS_ID\nINNER JOIN ACM_RECEPCION RE ON RE.ID = "+context.RECEPCION_ID+"  AND RE.NORMATIVIDAD_GLOSA_ID = ANC.NORMATIVIDAD_ID\nWHERE NC.ESTADO = 'Activo'\nAND CN.ESTADO = 'Activo'\nAND ANC.EST"
+"ADO = 'Activo'\nAND NC.ESTREGISTRO_ID = 1\nAND CN.ESTREGISTRO_ID = 1\nAND ANC.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row3.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row3.NOMBRE = null;
							} else {
	                         		
        	row3.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row3.SIGLA = null;
							} else {
	                         		
        	row3.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row3.CAUSALGLOSAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(4) != null) {
						row3.CAUSALGLOSAS_ID = rs_tOracleInput_5.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tReplicate_1 main ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					


	row41 = new row41Struct();
						
	row41.ID = row3.ID;								
	row41.NOMBRE = row3.NOMBRE;								
	row41.SIGLA = row3.SIGLA;								
	row41.CAUSALGLOSAS_ID = row3.CAUSALGLOSAS_ID;			
	row39 = new row39Struct();
						
	row39.ID = row3.ID;								
	row39.NOMBRE = row3.NOMBRE;								
	row39.SIGLA = row3.SIGLA;								
	row39.CAUSALGLOSAS_ID = row3.CAUSALGLOSAS_ID;			


 


	tos_count_tReplicate_1++;

/**
 * [tReplicate_1 main ] stop
 */
	
	/**
	 * [tReplicate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_18 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					



    
		row41Struct oneRow_tHashOutput_18 = new row41Struct();
				
					oneRow_tHashOutput_18.ID = row41.ID;
					oneRow_tHashOutput_18.NOMBRE = row41.NOMBRE;
					oneRow_tHashOutput_18.SIGLA = row41.SIGLA;
					oneRow_tHashOutput_18.CAUSALGLOSAS_ID = row41.CAUSALGLOSAS_ID;
		
        tHashFile_tHashOutput_18.put(oneRow_tHashOutput_18);
        nb_line_tHashOutput_18 ++;

 


	tos_count_tHashOutput_18++;

/**
 * [tHashOutput_18 main ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 process_data_end ] stop
 */




	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					

    //Code generate according to input schema and output schema

switch(row39.SIGLA) {
  case "ANES":
    // code block
    context.AutorizacionNoExiste = row39.CAUSALGLOSAS_ID;
    context.AutorizacionNoExisteD = row39.SIGLA;
    break;
  case "ANAPC":
    // code block
     context.AutorizacionPrestador = row39.CAUSALGLOSAS_ID;
     context.AutorizacionPrestadorD = row39.SIGLA;
    break;
  case "ANAPS":
    // code block
     context.AutorizacionPersona = row39.CAUSALGLOSAS_ID;
     context.AutorizacionPersonaD = row39.SIGLA;
    break;
  case "NCACP":
    // code block
     context.AutorizacionCups = row39.CAUSALGLOSAS_ID;
     context.AutorizacionCupsD = row39.SIGLA;
    break;
  case "ASC":
    // code block
     context.AutorizacionCobrado = row39.CAUSALGLOSAS_ID;
     context.AutorizacionCobradoD = row39.SIGLA;
    break;
  case "VD":
    // code block
     context.AfiliacionDerechos = row39.CAUSALGLOSAS_ID;
     context.AfiliacionDerechosD = row39.SIGLA;
    break;
  case "VFTNC":
    // code block
     context.SumaFacturas = row39.CAUSALGLOSAS_ID;
     context.SumaFacturasD = row39.SIGLA;
    break;
  case "NFA":
    // code block
     context.FacturaAuditada = row39.CAUSALGLOSAS_ID;
     context.FacturaAuditadaD = row39.SIGLA;
    break;
  case "VUDM":
    // code block
     context.VidaUtil = row39.CAUSALGLOSAS_ID;
     context.VidaUtilD = row39.SIGLA;
    break;
  case "MNP":
    // code block
     context.MedicamentoNoPactado = row39.CAUSALGLOSAS_ID;
     context.MedicamentoNoPactadoD = row39.SIGLA;
    break;
  case "VNP":
    // code block
     context.ValorNoPactado = row39.CAUSALGLOSAS_ID;
     context.ValorNoPactadoD = row39.SIGLA;
    break;
  case "NCTEP":
    // code block
     context.TiempoEntrega = row39.CAUSALGLOSAS_ID;
     context.TiempoEntregaD = row39.SIGLA;
    break;
  case "NCFCE":
    // code block
     context.CantidadFormulada = row39.CAUSALGLOSAS_ID;
     context.CantidadFormuladaD = row39.SIGLA;
    break;
  case "PIPA":
    // code block
     context.AfiliacionInactiva = row39.CAUSALGLOSAS_ID;
     context.AfiliacionInactivaD = row39.SIGLA;
    break;
  case "NCPC":
    // code block
     context.PorcetajeConsumo = row39.CAUSALGLOSAS_ID;
     context.PorcetajeConsumoD = row39.SIGLA;
    break;
}
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tReplicate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
	if(conn_tOracleInput_5 != null && !conn_tOracleInput_5.isClosed()) {
	
			conn_tOracleInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tReplicate_1 end ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tReplicate_1", true);
end_Hash.put("tReplicate_1", System.currentTimeMillis());




/**
 * [tReplicate_1 end ] stop
 */

	
	/**
	 * [tHashOutput_18 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	
globalMap.put("tHashOutput_18_NB_LINE", nb_line_tHashOutput_18);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tHashOutput_18", true);
end_Hash.put("tHashOutput_18", System.currentTimeMillis());




/**
 * [tHashOutput_18 end ] stop
 */




	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk32", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tReplicate_1 finally ] start
	 */

	

	
	
	currentComponent="tReplicate_1";
	
	

 



/**
 * [tReplicate_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 finally ] stop
 */




	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public String CUMS;

				public String getCUMS () {
					return this.CUMS;
				}

				public Boolean CUMSIsNullable(){
				    return true;
				}
				public Boolean CUMSIsKey(){
				    return false;
				}
				public Integer CUMSLength(){
				    return 92;
				}
				public Integer CUMSPrecision(){
				    return 0;
				}
				public String CUMSDefault(){
				
					return null;
				
				}
				public String CUMSComment(){
				
				    return "";
				
				}
				public String CUMSPattern(){
				
					return "";
				
				}
				public String CUMSOriginalDbColumnName(){
				
					return "CUMS";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return 50;
				}
				public Integer INVIMAPrecision(){
				    return 0;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String INVIMA_HOMOLOGO;

				public String getINVIMA_HOMOLOGO () {
					return this.INVIMA_HOMOLOGO;
				}

				public Boolean INVIMA_HOMOLOGOIsNullable(){
				    return true;
				}
				public Boolean INVIMA_HOMOLOGOIsKey(){
				    return false;
				}
				public Integer INVIMA_HOMOLOGOLength(){
				    return 50;
				}
				public Integer INVIMA_HOMOLOGOPrecision(){
				    return 0;
				}
				public String INVIMA_HOMOLOGODefault(){
				
					return null;
				
				}
				public String INVIMA_HOMOLOGOComment(){
				
				    return "";
				
				}
				public String INVIMA_HOMOLOGOPattern(){
				
					return "";
				
				}
				public String INVIMA_HOMOLOGOOriginalDbColumnName(){
				
					return "INVIMA_HOMOLOGO";
				
				}

				
			    public java.util.Date FINICIO;

				public java.util.Date getFINICIO () {
					return this.FINICIO;
				}

				public Boolean FINICIOIsNullable(){
				    return true;
				}
				public Boolean FINICIOIsKey(){
				    return false;
				}
				public Integer FINICIOLength(){
				    return 0;
				}
				public Integer FINICIOPrecision(){
				    return 0;
				}
				public String FINICIODefault(){
				
					return null;
				
				}
				public String FINICIOComment(){
				
				    return "";
				
				}
				public String FINICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINICIOOriginalDbColumnName(){
				
					return "FINICIO";
				
				}

				
			    public java.util.Date FFIN;

				public java.util.Date getFFIN () {
					return this.FFIN;
				}

				public Boolean FFINIsNullable(){
				    return true;
				}
				public Boolean FFINIsKey(){
				    return false;
				}
				public Integer FFINLength(){
				    return 0;
				}
				public Integer FFINPrecision(){
				    return 0;
				}
				public String FFINDefault(){
				
					return null;
				
				}
				public String FFINComment(){
				
				    return "";
				
				}
				public String FFINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFINOriginalDbColumnName(){
				
					return "FFIN";
				
				}

				
			    public BigDecimal PRECIO;

				public BigDecimal getPRECIO () {
					return this.PRECIO;
				}

				public Boolean PRECIOIsNullable(){
				    return false;
				}
				public Boolean PRECIOIsKey(){
				    return false;
				}
				public Integer PRECIOLength(){
				    return 0;
				}
				public Integer PRECIOPrecision(){
				    return null;
				}
				public String PRECIODefault(){
				
					return "";
				
				}
				public String PRECIOComment(){
				
				    return "";
				
				}
				public String PRECIOPattern(){
				
					return "";
				
				}
				public String PRECIOOriginalDbColumnName(){
				
					return "PRECIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.CUMS = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.INVIMA_HOMOLOGO = readString(dis);
					
					this.FINICIO = readDate(dis);
					
					this.FFIN = readDate(dis);
					
						this.PRECIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.CUMS = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.INVIMA_HOMOLOGO = readString(dis);
					
					this.FINICIO = readDate(dis);
					
					this.FFIN = readDate(dis);
					
						this.PRECIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CUMS,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.INVIMA_HOMOLOGO,dos);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FFIN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CUMS,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.INVIMA_HOMOLOGO,dos);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FFIN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CUMS="+CUMS);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",INVIMA_HOMOLOGO="+INVIMA_HOMOLOGO);
		sb.append(",FINICIO="+String.valueOf(FINICIO));
		sb.append(",FFIN="+String.valueOf(FFIN));
		sb.append(",PRECIO="+String.valueOf(PRECIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				String driverClass_tOracleInput_6 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_6);
				
			String url_tOracleInput_6 = null;
				url_tOracleInput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_6 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_6 = context.db_origen_Password; 

				String dbPwd_tOracleInput_6 = decryptedPassword_tOracleInput_6;

				
					java.util.Properties atnParamsPrope_tOracleInput_6 = new java.util.Properties();
					atnParamsPrope_tOracleInput_6.put("user",dbUser_tOracleInput_6);
					atnParamsPrope_tOracleInput_6.put("password",dbPwd_tOracleInput_6);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_6.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_6 = java.sql.DriverManager.getConnection(url_tOracleInput_6, atnParamsPrope_tOracleInput_6);
				java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_6.next()) {
					sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
				}
                                if (!(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                                }
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "\nSELECT \n    CASE WHEN DPRO.EXPEDIENTECUM IS NOT NULL THEN DPRO.EXPEDIENTECUM || '-' ||  TO_CHAR(DPRO.CONSECUTIVOCUM)"
+" END CUMS,\n    UPPER(REPLACE(DPRO.INVIMA, ' ')) AS INVIMA,\n    UPPER(REPLACE(HOM.INVIMA, ' ')) AS INVIMA_HOMOLOGO,\n  "
+"  HD.FINICIO,\n    HD.FFIN, \n    HD.PRECIO\nFROM MED_ACUERDOS AC\nINNER JOIN MED_DACUERDOS DA ON DA.ACUERDOS_ID = AC.ID"
+"\nINNER JOIN MED_DACUERDOSFORMAS DAC ON DAC.DACUERDOS_ID = DA.ID\nINNER JOIN MED_FORMASFARMACEUTICAS MFOR ON MFOR.ID = D"
+"AC.FORMASFARMACEUTICAS_ID\nINNER JOIN MED_PRODUCTOS PRO ON PRO.FORMASFARMACEUTICAS_ID = MFOR.ID\nINNER JOIN MED_DPRODUCT"
+"OS DPRO ON DPRO.PRODUCTOS_ID = PRO.ID\nINNER JOIN MED_DCONTRATOS DC ON DC.PRODUCTOS_ID = PRO.ID\nINNER JOIN MED_HDCONTRA"
+"TOS HD ON HD.DCONTRATOS_ID = DC.ID\nLEFT JOIN MED_DPRODUCTOSINVIMA HOM ON UPPER(REPLACE(DPRO.INVIMA, ' ')) = UPPER(REPLA"
+"CE(HOM.CODPRODUCTOINVIMA, ' '))\nWHERE /*AC.ESTADO = 'Activo'\nAND DA.ESTADO = 'Activo'\nAND DAC.ESTADO = 'Activo'\nAND "
+"MFOR.ESTADO = 'Activo'\nAND PRO.ESTADO = 'Activo'\nAND*/ AC.ESTREGISTRO_ID = 1\nAND DA.ESTREGISTRO_ID =1\nAND DAC.ESTREG"
+"ISTRO_ID =1\nAND MFOR.ESTREGISTRO_ID = 1\nAND PRO.ESTREGISTRO_ID = 1\nAND DPRO.ESTREGISTRO_ID = 1\nAND HD.ESTREGISTRO_ID"
+" =1\n";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row4.CUMS = null;
							} else {
	                         		
        	row4.CUMS = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row4.INVIMA = null;
							} else {
	                         		
        	row4.INVIMA = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row4.INVIMA_HOMOLOGO = null;
							} else {
	                         		
        	row4.INVIMA_HOMOLOGO = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row4.FINICIO = null;
							} else {
										
			row4.FINICIO = routines.system.JDBCUtil.getDate(rs_tOracleInput_6, 4);
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row4.FFIN = null;
							} else {
										
			row4.FFIN = routines.system.JDBCUtil.getDate(rs_tOracleInput_6, 5);
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row4.PRECIO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(6) != null) {
						row4.PRECIO = rs_tOracleInput_6.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_3 = new row4Struct();
				
					oneRow_tHashOutput_3.CUMS = row4.CUMS;
					oneRow_tHashOutput_3.INVIMA = row4.INVIMA;
					oneRow_tHashOutput_3.INVIMA_HOMOLOGO = row4.INVIMA_HOMOLOGO;
					oneRow_tHashOutput_3.FINICIO = row4.FINICIO;
					oneRow_tHashOutput_3.FFIN = row4.FFIN;
					oneRow_tHashOutput_3.PRECIO = row4.PRECIO;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
	if(conn_tOracleInput_6 != null && !conn_tOracleInput_6.isClosed()) {
	
			conn_tOracleInput_6.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk33", 0, "ok");
								} 
							
							tOracleInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public Integer VALOR;

				public Integer getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return true;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return 0;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.VALOR,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR="+String.valueOf(VALOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				String driverClass_tOracleInput_9 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_9);
				
			String url_tOracleInput_9 = null;
				url_tOracleInput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_9 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_9 = context.db_origen_Password; 

				String dbPwd_tOracleInput_9 = decryptedPassword_tOracleInput_9;

				
					java.util.Properties atnParamsPrope_tOracleInput_9 = new java.util.Properties();
					atnParamsPrope_tOracleInput_9.put("user",dbUser_tOracleInput_9);
					atnParamsPrope_tOracleInput_9.put("password",dbPwd_tOracleInput_9);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_9.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_9 = java.sql.DriverManager.getConnection(url_tOracleInput_9, atnParamsPrope_tOracleInput_9);
				java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_9.next()) {
					sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
				}
                                if (!(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                                }
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "SELECT \n\n             to_number(C.VALOR) as VALOR\n        FROM SALUDSIS.MED_CONFIGURACIONES C\n       INNER JOIN SAL"
+"UDSIS.MED_UMEDIDA U\n          ON C.UMEDIDA_ID = U.ID\n       WHERE C.ESTREGISTRO_ID = 1\n       AND C.SIGLA = 'AVM'";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row9.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row9.VALOR = rs_tOracleInput_9.getInt(1);
					} else {
				
						row9.VALOR = null;
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

    context.VIDA_UTIL = row9.VALOR;

    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
	if(conn_tOracleInput_9 != null && !conn_tOracleInput_9.isClosed()) {
	
			conn_tOracleInput_9.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk34", 0, "ok");
								} 
							
							tOracleInput_10Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public java.util.Date FRADICADO;

				public java.util.Date getFRADICADO () {
					return this.FRADICADO;
				}

				public Boolean FRADICADOIsNullable(){
				    return true;
				}
				public Boolean FRADICADOIsKey(){
				    return false;
				}
				public Integer FRADICADOLength(){
				    return null;
				}
				public Integer FRADICADOPrecision(){
				    return null;
				}
				public String FRADICADODefault(){
				
					return null;
				
				}
				public String FRADICADOComment(){
				
				    return "";
				
				}
				public String FRADICADOPattern(){
				
					return "";
				
				}
				public String FRADICADOOriginalDbColumnName(){
				
					return "FRADICADO";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FRADICADO = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.FRADICADO = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FRADICADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// java.util.Date
				
						writeDate(this.FRADICADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",FRADICADO="+String.valueOf(FRADICADO));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				String driverClass_tOracleInput_10 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_10);
				
			String url_tOracleInput_10 = null;
				url_tOracleInput_10 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_10 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_10 = context.db_origen_Password; 

				String dbPwd_tOracleInput_10 = decryptedPassword_tOracleInput_10;

				
					java.util.Properties atnParamsPrope_tOracleInput_10 = new java.util.Properties();
					atnParamsPrope_tOracleInput_10.put("user",dbUser_tOracleInput_10);
					atnParamsPrope_tOracleInput_10.put("password",dbPwd_tOracleInput_10);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_10.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_10 = java.sql.DriverManager.getConnection(url_tOracleInput_10, atnParamsPrope_tOracleInput_10);
				java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_10.next()) {
					sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
				}
                                if (!(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                                }
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement();

		    String dbquery_tOracleInput_10 = "SELECT RE.PRESTADOR_ID, RE.UORG_ID, RE.FRADICADO, RE.USUARIOS_ID FROM ACM_RECEPCION RE WHERE RE.ID ="+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row21.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row21.PRESTADOR_ID = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row21.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row21.UORG_ID = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row21.FRADICADO = null;
							} else {
										
			row21.FRADICADO = routines.system.JDBCUtil.getDate(rs_tOracleInput_10, 3);
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row21.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(4) != null) {
						row21.USUARIOS_ID = rs_tOracleInput_10.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.PRESTADOR = row21.PRESTADOR_ID;
context.UORG_ID = row21.UORG_ID;
context.FRADICADO = row21.FRADICADO;
context.USUARIOS_ID = row21.USUARIOS_ID;

    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
	if(conn_tOracleInput_10 != null && !conn_tOracleInput_10.isClosed()) {
	
			conn_tOracleInput_10.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk35", 0, "ok");
								} 
							
							tOracleInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();




	
	/**
	 * [tJavaRow_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_10", false);
		start_Hash.put("tJavaRow_10", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tJavaRow_10 = 0;
		

int nb_line_tJavaRow_10 = 0;

 



/**
 * [tJavaRow_10 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				String driverClass_tOracleInput_12 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_12);
				
			String url_tOracleInput_12 = null;
				url_tOracleInput_12 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_12 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_12 = context.db_origen_Password; 

				String dbPwd_tOracleInput_12 = decryptedPassword_tOracleInput_12;

				
					java.util.Properties atnParamsPrope_tOracleInput_12 = new java.util.Properties();
					atnParamsPrope_tOracleInput_12.put("user",dbUser_tOracleInput_12);
					atnParamsPrope_tOracleInput_12.put("password",dbPwd_tOracleInput_12);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_12.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_12 = java.sql.DriverManager.getConnection(url_tOracleInput_12, atnParamsPrope_tOracleInput_12);
				java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_12.next()) {
					sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
				}
                                if (!(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                                }
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement();

		    String dbquery_tOracleInput_12 = "SELECT \nET.ID \nFROM \nACM_ETAPASNORMATIVIDAD  ET\nINNER JOIN ACM_NORMATIVIDAD NOR ON NOR.ID = ET.NORMATIVIDAD_ID\nINN"
+"ER JOIN ACM_RECEPCION RE ON RE.NORMATIVIDAD_ETAPA_ID = NOR.ID\nWHERE ET.CODIGO = 1 \nAND ET.ESTADO = 'Activo'\nAND ET.ES"
+"TREGISTRO_ID =1\nAND RE.ID = "+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row24.ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row24.ID = rs_tOracleInput_12.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_10 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.ETAPASNORMATIVIDAD_ID = row24.ID;

    nb_line_tJavaRow_10++;   

 


	tos_count_tJavaRow_10++;

/**
 * [tJavaRow_10 main ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
	if(conn_tOracleInput_12 != null && !conn_tOracleInput_12.isClosed()) {
	
			conn_tOracleInput_12.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tJavaRow_10 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

globalMap.put("tJavaRow_10_NB_LINE",nb_line_tJavaRow_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tJavaRow_10", true);
end_Hash.put("tJavaRow_10", System.currentTimeMillis());




/**
 * [tJavaRow_10 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk36", 0, "ok");
								} 
							
							tOracleInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tJavaRow_10 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_10";
	
	

 



/**
 * [tJavaRow_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row45Struct row45 = new row45Struct();




	
	/**
	 * [tJavaRow_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_13", false);
		start_Hash.put("tJavaRow_13", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tJavaRow_13 = 0;
		

int nb_line_tJavaRow_13 = 0;

 



/**
 * [tJavaRow_13 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				String driverClass_tOracleInput_18 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_18);
				
			String url_tOracleInput_18 = null;
				url_tOracleInput_18 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_18 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_18 = context.db_origen_Password; 

				String dbPwd_tOracleInput_18 = decryptedPassword_tOracleInput_18;

				
					java.util.Properties atnParamsPrope_tOracleInput_18 = new java.util.Properties();
					atnParamsPrope_tOracleInput_18.put("user",dbUser_tOracleInput_18);
					atnParamsPrope_tOracleInput_18.put("password",dbPwd_tOracleInput_18);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_18.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_18 = java.sql.DriverManager.getConnection(url_tOracleInput_18, atnParamsPrope_tOracleInput_18);
				java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_18.next()) {
					sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
				}
                                if (!(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                                }
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement();

		    String dbquery_tOracleInput_18 = "SELECT ID,NOMBRE FROM ACM_ESTAUDITORIAS";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row45.ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row45.ID = rs_tOracleInput_18.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row45.NOMBRE = null;
							} else {
	                         		
        	row45.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_13 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					

    //Code generate according to input schema and output schema

switch(row45.NOMBRE){
	case "Sin iniciar":
		context.SinInniciar = row45.ID;
		//System.out.println(context.estActivo);
		break;
	case "Iniciada":
		context.Iniciada = row45.ID;
		//System.out.println(context.estInactivo);
		break;
	case "Cerrada":
		context.Cerrada = row45.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Editando":
		context.Editando = row45.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Editada":
		context.Editada = row45.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Finalizada":
		context.Finalizada = row45.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Manual":
		context.Manual = row45.ID;
		//System.out.println(context.estEnProceso);
		break;
}
    nb_line_tJavaRow_13++;   

 


	tos_count_tJavaRow_13++;

/**
 * [tJavaRow_13 main ] stop
 */
	
	/**
	 * [tJavaRow_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
	if(conn_tOracleInput_18 != null && !conn_tOracleInput_18.isClosed()) {
	
			conn_tOracleInput_18.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tJavaRow_13 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

globalMap.put("tJavaRow_13_NB_LINE",nb_line_tJavaRow_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tJavaRow_13", true);
end_Hash.put("tJavaRow_13", System.currentTimeMillis());




/**
 * [tJavaRow_13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tJavaRow_13 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_13";
	
	

 



/**
 * [tJavaRow_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out6Struct implements routines.system.IPersistableRow<out6Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out7Struct implements routines.system.IPersistableRow<out7Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out8Struct implements routines.system.IPersistableRow<out8Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out24Struct implements routines.system.IPersistableRow<out24Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out25Struct implements routines.system.IPersistableRow<out25Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out14Struct implements routines.system.IPersistableRow<out14Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal VALOR_FACTURA;

				public BigDecimal getVALOR_FACTURA () {
					return this.VALOR_FACTURA;
				}

				public Boolean VALOR_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VALOR_FACTURAIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURALength(){
				    return null;
				}
				public Integer VALOR_FACTURAPrecision(){
				    return null;
				}
				public String VALOR_FACTURADefault(){
				
					return "";
				
				}
				public String VALOR_FACTURAComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURAPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURAOriginalDbColumnName(){
				
					return "VALOR_FACTURA";
				
				}

				
			    public BigDecimal VCALCULADO_FACTURA;

				public BigDecimal getVCALCULADO_FACTURA () {
					return this.VCALCULADO_FACTURA;
				}

				public Boolean VCALCULADO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VCALCULADO_FACTURAIsKey(){
				    return false;
				}
				public Integer VCALCULADO_FACTURALength(){
				    return null;
				}
				public Integer VCALCULADO_FACTURAPrecision(){
				    return null;
				}
				public String VCALCULADO_FACTURADefault(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAComment(){
				
				    return "";
				
				}
				public String VCALCULADO_FACTURAPattern(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAOriginalDbColumnName(){
				
					return "VCALCULADO_FACTURA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return true;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return null;
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return null;
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return false;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID1;

				public BigDecimal getDFORMMEDINSUMOS_ID1 () {
					return this.DFORMMEDINSUMOS_ID1;
				}

				public Boolean DFORMMEDINSUMOS_ID1IsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_ID1IsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_ID1Length(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_ID1Precision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_ID1Default(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Comment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Pattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1OriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FVENCIMIENTO_SALUDSIS;

				public java.util.Date getFVENCIMIENTO_SALUDSIS () {
					return this.FVENCIMIENTO_SALUDSIS;
				}

				public Boolean FVENCIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FVENCIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FVENCIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FVENCIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FVENCIMIENTO_SALUDSIS";
				
				}

				
			    public java.util.Date FMOVIMIENTO_SALUDSIS;

				public java.util.Date getFMOVIMIENTO_SALUDSIS () {
					return this.FMOVIMIENTO_SALUDSIS;
				}

				public Boolean FMOVIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FMOVIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FMOVIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FMOVIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FMOVIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FMOVIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FMOVIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FMOVIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FMOVIMIENTO_SALUDSIS";
				
				}

				
			    public BigDecimal CANTIDAD_SALUDSIS;

				public BigDecimal getCANTIDAD_SALUDSIS () {
					return this.CANTIDAD_SALUDSIS;
				}

				public Boolean CANTIDAD_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_SALUDSISIsKey(){
				    return false;
				}
				public Integer CANTIDAD_SALUDSISLength(){
				    return null;
				}
				public Integer CANTIDAD_SALUDSISPrecision(){
				    return null;
				}
				public String CANTIDAD_SALUDSISDefault(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISComment(){
				
				    return "";
				
				}
				public String CANTIDAD_SALUDSISPattern(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISOriginalDbColumnName(){
				
					return "CANTIDAD_SALUDSIS";
				
				}

				
			    public Integer VINTERMEDIACION;

				public Integer getVINTERMEDIACION () {
					return this.VINTERMEDIACION;
				}

				public Boolean VINTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VINTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VINTERMEDIACIONLength(){
				    return null;
				}
				public Integer VINTERMEDIACIONPrecision(){
				    return null;
				}
				public String VINTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VINTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String VINTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VINTERMEDIACIONOriginalDbColumnName(){
				
					return "VINTERMEDIACION";
				
				}

				
			    public BigDecimal VCALCULADO_TOTAL;

				public BigDecimal getVCALCULADO_TOTAL () {
					return this.VCALCULADO_TOTAL;
				}

				public Boolean VCALCULADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean VCALCULADO_TOTALIsKey(){
				    return false;
				}
				public Integer VCALCULADO_TOTALLength(){
				    return null;
				}
				public Integer VCALCULADO_TOTALPrecision(){
				    return null;
				}
				public String VCALCULADO_TOTALDefault(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALComment(){
				
				    return "";
				
				}
				public String VCALCULADO_TOTALPattern(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALOriginalDbColumnName(){
				
					return "VCALCULADO_TOTAL";
				
				}

				
			    public Integer BANDERA_TOTAL;

				public Integer getBANDERA_TOTAL () {
					return this.BANDERA_TOTAL;
				}

				public Boolean BANDERA_TOTALIsNullable(){
				    return true;
				}
				public Boolean BANDERA_TOTALIsKey(){
				    return false;
				}
				public Integer BANDERA_TOTALLength(){
				    return null;
				}
				public Integer BANDERA_TOTALPrecision(){
				    return null;
				}
				public String BANDERA_TOTALDefault(){
				
					return "";
				
				}
				public String BANDERA_TOTALComment(){
				
				    return "";
				
				}
				public String BANDERA_TOTALPattern(){
				
					return "";
				
				}
				public String BANDERA_TOTALOriginalDbColumnName(){
				
					return "BANDERA_TOTAL";
				
				}

				
			    public Integer BANDERA_PORCENTAJE;

				public Integer getBANDERA_PORCENTAJE () {
					return this.BANDERA_PORCENTAJE;
				}

				public Boolean BANDERA_PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean BANDERA_PORCENTAJEIsKey(){
				    return false;
				}
				public Integer BANDERA_PORCENTAJELength(){
				    return null;
				}
				public Integer BANDERA_PORCENTAJEPrecision(){
				    return null;
				}
				public String BANDERA_PORCENTAJEDefault(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEComment(){
				
				    return "";
				
				}
				public String BANDERA_PORCENTAJEPattern(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEOriginalDbColumnName(){
				
					return "BANDERA_PORCENTAJE";
				
				}

				
			    public BigDecimal CANTENTREGADA_ANTERIOR;

				public BigDecimal getCANTENTREGADA_ANTERIOR () {
					return this.CANTENTREGADA_ANTERIOR;
				}

				public Boolean CANTENTREGADA_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean CANTENTREGADA_ANTERIORIsKey(){
				    return false;
				}
				public Integer CANTENTREGADA_ANTERIORLength(){
				    return null;
				}
				public Integer CANTENTREGADA_ANTERIORPrecision(){
				    return null;
				}
				public String CANTENTREGADA_ANTERIORDefault(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIORComment(){
				
				    return "";
				
				}
				public String CANTENTREGADA_ANTERIORPattern(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIOROriginalDbColumnName(){
				
					return "CANTENTREGADA_ANTERIOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR_FACTURA="+String.valueOf(VALOR_FACTURA));
		sb.append(",VCALCULADO_FACTURA="+String.valueOf(VCALCULADO_FACTURA));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",DFORMMEDINSUMOS_ID1="+String.valueOf(DFORMMEDINSUMOS_ID1));
		sb.append(",FVENCIMIENTO_SALUDSIS="+String.valueOf(FVENCIMIENTO_SALUDSIS));
		sb.append(",FMOVIMIENTO_SALUDSIS="+String.valueOf(FMOVIMIENTO_SALUDSIS));
		sb.append(",CANTIDAD_SALUDSIS="+String.valueOf(CANTIDAD_SALUDSIS));
		sb.append(",VINTERMEDIACION="+String.valueOf(VINTERMEDIACION));
		sb.append(",VCALCULADO_TOTAL="+String.valueOf(VCALCULADO_TOTAL));
		sb.append(",BANDERA_TOTAL="+String.valueOf(BANDERA_TOTAL));
		sb.append(",BANDERA_PORCENTAJE="+String.valueOf(BANDERA_PORCENTAJE));
		sb.append(",CANTENTREGADA_ANTERIOR="+String.valueOf(CANTENTREGADA_ANTERIOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal VALOR_FACTURA;

				public BigDecimal getVALOR_FACTURA () {
					return this.VALOR_FACTURA;
				}

				public Boolean VALOR_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VALOR_FACTURAIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURALength(){
				    return null;
				}
				public Integer VALOR_FACTURAPrecision(){
				    return null;
				}
				public String VALOR_FACTURADefault(){
				
					return "";
				
				}
				public String VALOR_FACTURAComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURAPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURAOriginalDbColumnName(){
				
					return "VALOR_FACTURA";
				
				}

				
			    public BigDecimal VCALCULADO_FACTURA;

				public BigDecimal getVCALCULADO_FACTURA () {
					return this.VCALCULADO_FACTURA;
				}

				public Boolean VCALCULADO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VCALCULADO_FACTURAIsKey(){
				    return false;
				}
				public Integer VCALCULADO_FACTURALength(){
				    return null;
				}
				public Integer VCALCULADO_FACTURAPrecision(){
				    return null;
				}
				public String VCALCULADO_FACTURADefault(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAComment(){
				
				    return "";
				
				}
				public String VCALCULADO_FACTURAPattern(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAOriginalDbColumnName(){
				
					return "VCALCULADO_FACTURA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return true;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return null;
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return null;
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return false;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID1;

				public BigDecimal getDFORMMEDINSUMOS_ID1 () {
					return this.DFORMMEDINSUMOS_ID1;
				}

				public Boolean DFORMMEDINSUMOS_ID1IsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_ID1IsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_ID1Length(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_ID1Precision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_ID1Default(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Comment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Pattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1OriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FVENCIMIENTO_SALUDSIS;

				public java.util.Date getFVENCIMIENTO_SALUDSIS () {
					return this.FVENCIMIENTO_SALUDSIS;
				}

				public Boolean FVENCIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FVENCIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FVENCIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FVENCIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FVENCIMIENTO_SALUDSIS";
				
				}

				
			    public java.util.Date FMOVIMIENTO_SALUDSIS;

				public java.util.Date getFMOVIMIENTO_SALUDSIS () {
					return this.FMOVIMIENTO_SALUDSIS;
				}

				public Boolean FMOVIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FMOVIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FMOVIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FMOVIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FMOVIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FMOVIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FMOVIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FMOVIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FMOVIMIENTO_SALUDSIS";
				
				}

				
			    public BigDecimal CANTIDAD_SALUDSIS;

				public BigDecimal getCANTIDAD_SALUDSIS () {
					return this.CANTIDAD_SALUDSIS;
				}

				public Boolean CANTIDAD_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_SALUDSISIsKey(){
				    return false;
				}
				public Integer CANTIDAD_SALUDSISLength(){
				    return null;
				}
				public Integer CANTIDAD_SALUDSISPrecision(){
				    return null;
				}
				public String CANTIDAD_SALUDSISDefault(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISComment(){
				
				    return "";
				
				}
				public String CANTIDAD_SALUDSISPattern(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISOriginalDbColumnName(){
				
					return "CANTIDAD_SALUDSIS";
				
				}

				
			    public Integer VINTERMEDIACION;

				public Integer getVINTERMEDIACION () {
					return this.VINTERMEDIACION;
				}

				public Boolean VINTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VINTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VINTERMEDIACIONLength(){
				    return null;
				}
				public Integer VINTERMEDIACIONPrecision(){
				    return null;
				}
				public String VINTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VINTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String VINTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VINTERMEDIACIONOriginalDbColumnName(){
				
					return "VINTERMEDIACION";
				
				}

				
			    public BigDecimal VCALCULADO_TOTAL;

				public BigDecimal getVCALCULADO_TOTAL () {
					return this.VCALCULADO_TOTAL;
				}

				public Boolean VCALCULADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean VCALCULADO_TOTALIsKey(){
				    return false;
				}
				public Integer VCALCULADO_TOTALLength(){
				    return null;
				}
				public Integer VCALCULADO_TOTALPrecision(){
				    return null;
				}
				public String VCALCULADO_TOTALDefault(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALComment(){
				
				    return "";
				
				}
				public String VCALCULADO_TOTALPattern(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALOriginalDbColumnName(){
				
					return "VCALCULADO_TOTAL";
				
				}

				
			    public Integer BANDERA_TOTAL;

				public Integer getBANDERA_TOTAL () {
					return this.BANDERA_TOTAL;
				}

				public Boolean BANDERA_TOTALIsNullable(){
				    return true;
				}
				public Boolean BANDERA_TOTALIsKey(){
				    return false;
				}
				public Integer BANDERA_TOTALLength(){
				    return null;
				}
				public Integer BANDERA_TOTALPrecision(){
				    return null;
				}
				public String BANDERA_TOTALDefault(){
				
					return "";
				
				}
				public String BANDERA_TOTALComment(){
				
				    return "";
				
				}
				public String BANDERA_TOTALPattern(){
				
					return "";
				
				}
				public String BANDERA_TOTALOriginalDbColumnName(){
				
					return "BANDERA_TOTAL";
				
				}

				
			    public Integer BANDERA_PORCENTAJE;

				public Integer getBANDERA_PORCENTAJE () {
					return this.BANDERA_PORCENTAJE;
				}

				public Boolean BANDERA_PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean BANDERA_PORCENTAJEIsKey(){
				    return false;
				}
				public Integer BANDERA_PORCENTAJELength(){
				    return null;
				}
				public Integer BANDERA_PORCENTAJEPrecision(){
				    return null;
				}
				public String BANDERA_PORCENTAJEDefault(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEComment(){
				
				    return "";
				
				}
				public String BANDERA_PORCENTAJEPattern(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEOriginalDbColumnName(){
				
					return "BANDERA_PORCENTAJE";
				
				}

				
			    public BigDecimal CANTENTREGADA_ANTERIOR;

				public BigDecimal getCANTENTREGADA_ANTERIOR () {
					return this.CANTENTREGADA_ANTERIOR;
				}

				public Boolean CANTENTREGADA_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean CANTENTREGADA_ANTERIORIsKey(){
				    return false;
				}
				public Integer CANTENTREGADA_ANTERIORLength(){
				    return null;
				}
				public Integer CANTENTREGADA_ANTERIORPrecision(){
				    return null;
				}
				public String CANTENTREGADA_ANTERIORDefault(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIORComment(){
				
				    return "";
				
				}
				public String CANTENTREGADA_ANTERIORPattern(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIOROriginalDbColumnName(){
				
					return "CANTENTREGADA_ANTERIOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR_FACTURA="+String.valueOf(VALOR_FACTURA));
		sb.append(",VCALCULADO_FACTURA="+String.valueOf(VCALCULADO_FACTURA));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",DFORMMEDINSUMOS_ID1="+String.valueOf(DFORMMEDINSUMOS_ID1));
		sb.append(",FVENCIMIENTO_SALUDSIS="+String.valueOf(FVENCIMIENTO_SALUDSIS));
		sb.append(",FMOVIMIENTO_SALUDSIS="+String.valueOf(FMOVIMIENTO_SALUDSIS));
		sb.append(",CANTIDAD_SALUDSIS="+String.valueOf(CANTIDAD_SALUDSIS));
		sb.append(",VINTERMEDIACION="+String.valueOf(VINTERMEDIACION));
		sb.append(",VCALCULADO_TOTAL="+String.valueOf(VCALCULADO_TOTAL));
		sb.append(",BANDERA_TOTAL="+String.valueOf(BANDERA_TOTAL));
		sb.append(",BANDERA_PORCENTAJE="+String.valueOf(BANDERA_PORCENTAJE));
		sb.append(",CANTENTREGADA_ANTERIOR="+String.valueOf(CANTENTREGADA_ANTERIOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal VALOR_FACTURA;

				public BigDecimal getVALOR_FACTURA () {
					return this.VALOR_FACTURA;
				}

				public Boolean VALOR_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VALOR_FACTURAIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURALength(){
				    return null;
				}
				public Integer VALOR_FACTURAPrecision(){
				    return null;
				}
				public String VALOR_FACTURADefault(){
				
					return "";
				
				}
				public String VALOR_FACTURAComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURAPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURAOriginalDbColumnName(){
				
					return "VALOR_FACTURA";
				
				}

				
			    public BigDecimal VCALCULADO_FACTURA;

				public BigDecimal getVCALCULADO_FACTURA () {
					return this.VCALCULADO_FACTURA;
				}

				public Boolean VCALCULADO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VCALCULADO_FACTURAIsKey(){
				    return false;
				}
				public Integer VCALCULADO_FACTURALength(){
				    return null;
				}
				public Integer VCALCULADO_FACTURAPrecision(){
				    return null;
				}
				public String VCALCULADO_FACTURADefault(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAComment(){
				
				    return "";
				
				}
				public String VCALCULADO_FACTURAPattern(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAOriginalDbColumnName(){
				
					return "VCALCULADO_FACTURA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return true;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return null;
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return null;
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return false;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID1;

				public BigDecimal getDFORMMEDINSUMOS_ID1 () {
					return this.DFORMMEDINSUMOS_ID1;
				}

				public Boolean DFORMMEDINSUMOS_ID1IsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_ID1IsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_ID1Length(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_ID1Precision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_ID1Default(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Comment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Pattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1OriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FVENCIMIENTO_SALUDSIS;

				public java.util.Date getFVENCIMIENTO_SALUDSIS () {
					return this.FVENCIMIENTO_SALUDSIS;
				}

				public Boolean FVENCIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FVENCIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FVENCIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FVENCIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FVENCIMIENTO_SALUDSIS";
				
				}

				
			    public java.util.Date FMOVIMIENTO_SALUDSIS;

				public java.util.Date getFMOVIMIENTO_SALUDSIS () {
					return this.FMOVIMIENTO_SALUDSIS;
				}

				public Boolean FMOVIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FMOVIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FMOVIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FMOVIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FMOVIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FMOVIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FMOVIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FMOVIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FMOVIMIENTO_SALUDSIS";
				
				}

				
			    public BigDecimal CANTIDAD_SALUDSIS;

				public BigDecimal getCANTIDAD_SALUDSIS () {
					return this.CANTIDAD_SALUDSIS;
				}

				public Boolean CANTIDAD_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_SALUDSISIsKey(){
				    return false;
				}
				public Integer CANTIDAD_SALUDSISLength(){
				    return null;
				}
				public Integer CANTIDAD_SALUDSISPrecision(){
				    return null;
				}
				public String CANTIDAD_SALUDSISDefault(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISComment(){
				
				    return "";
				
				}
				public String CANTIDAD_SALUDSISPattern(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISOriginalDbColumnName(){
				
					return "CANTIDAD_SALUDSIS";
				
				}

				
			    public Integer VINTERMEDIACION;

				public Integer getVINTERMEDIACION () {
					return this.VINTERMEDIACION;
				}

				public Boolean VINTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VINTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VINTERMEDIACIONLength(){
				    return null;
				}
				public Integer VINTERMEDIACIONPrecision(){
				    return null;
				}
				public String VINTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VINTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String VINTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VINTERMEDIACIONOriginalDbColumnName(){
				
					return "VINTERMEDIACION";
				
				}

				
			    public BigDecimal VCALCULADO_TOTAL;

				public BigDecimal getVCALCULADO_TOTAL () {
					return this.VCALCULADO_TOTAL;
				}

				public Boolean VCALCULADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean VCALCULADO_TOTALIsKey(){
				    return false;
				}
				public Integer VCALCULADO_TOTALLength(){
				    return null;
				}
				public Integer VCALCULADO_TOTALPrecision(){
				    return null;
				}
				public String VCALCULADO_TOTALDefault(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALComment(){
				
				    return "";
				
				}
				public String VCALCULADO_TOTALPattern(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALOriginalDbColumnName(){
				
					return "VCALCULADO_TOTAL";
				
				}

				
			    public Integer BANDERA_TOTAL;

				public Integer getBANDERA_TOTAL () {
					return this.BANDERA_TOTAL;
				}

				public Boolean BANDERA_TOTALIsNullable(){
				    return true;
				}
				public Boolean BANDERA_TOTALIsKey(){
				    return false;
				}
				public Integer BANDERA_TOTALLength(){
				    return null;
				}
				public Integer BANDERA_TOTALPrecision(){
				    return null;
				}
				public String BANDERA_TOTALDefault(){
				
					return "";
				
				}
				public String BANDERA_TOTALComment(){
				
				    return "";
				
				}
				public String BANDERA_TOTALPattern(){
				
					return "";
				
				}
				public String BANDERA_TOTALOriginalDbColumnName(){
				
					return "BANDERA_TOTAL";
				
				}

				
			    public Integer BANDERA_PORCENTAJE;

				public Integer getBANDERA_PORCENTAJE () {
					return this.BANDERA_PORCENTAJE;
				}

				public Boolean BANDERA_PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean BANDERA_PORCENTAJEIsKey(){
				    return false;
				}
				public Integer BANDERA_PORCENTAJELength(){
				    return null;
				}
				public Integer BANDERA_PORCENTAJEPrecision(){
				    return null;
				}
				public String BANDERA_PORCENTAJEDefault(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEComment(){
				
				    return "";
				
				}
				public String BANDERA_PORCENTAJEPattern(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEOriginalDbColumnName(){
				
					return "BANDERA_PORCENTAJE";
				
				}

				
			    public BigDecimal CANTENTREGADA_ANTERIOR;

				public BigDecimal getCANTENTREGADA_ANTERIOR () {
					return this.CANTENTREGADA_ANTERIOR;
				}

				public Boolean CANTENTREGADA_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean CANTENTREGADA_ANTERIORIsKey(){
				    return false;
				}
				public Integer CANTENTREGADA_ANTERIORLength(){
				    return null;
				}
				public Integer CANTENTREGADA_ANTERIORPrecision(){
				    return null;
				}
				public String CANTENTREGADA_ANTERIORDefault(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIORComment(){
				
				    return "";
				
				}
				public String CANTENTREGADA_ANTERIORPattern(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIOROriginalDbColumnName(){
				
					return "CANTENTREGADA_ANTERIOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR_FACTURA="+String.valueOf(VALOR_FACTURA));
		sb.append(",VCALCULADO_FACTURA="+String.valueOf(VCALCULADO_FACTURA));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",DFORMMEDINSUMOS_ID1="+String.valueOf(DFORMMEDINSUMOS_ID1));
		sb.append(",FVENCIMIENTO_SALUDSIS="+String.valueOf(FVENCIMIENTO_SALUDSIS));
		sb.append(",FMOVIMIENTO_SALUDSIS="+String.valueOf(FMOVIMIENTO_SALUDSIS));
		sb.append(",CANTIDAD_SALUDSIS="+String.valueOf(CANTIDAD_SALUDSIS));
		sb.append(",VINTERMEDIACION="+String.valueOf(VINTERMEDIACION));
		sb.append(",VCALCULADO_TOTAL="+String.valueOf(VCALCULADO_TOTAL));
		sb.append(",BANDERA_TOTAL="+String.valueOf(BANDERA_TOTAL));
		sb.append(",BANDERA_PORCENTAJE="+String.valueOf(BANDERA_PORCENTAJE));
		sb.append(",CANTENTREGADA_ANTERIOR="+String.valueOf(CANTENTREGADA_ANTERIOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_1Process(globalMap);
		tOracleInput_8Process(globalMap);
		tOracleInput_7Process(globalMap);
		tHashInput_23Process(globalMap);
		tHashInput_24Process(globalMap);

		row2Struct row2 = new row2Struct();
row2Struct row5 = row2;
out1Struct out1 = new out1Struct();
out4Struct out4 = new out4Struct();
out5Struct out5 = new out5Struct();
out6Struct out6 = new out6Struct();
out7Struct out7 = new out7Struct();
out8Struct out8 = new out8Struct();
out9Struct out9 = new out9Struct();
out2Struct out2 = new out2Struct();
out3Struct out3 = new out3Struct();
out24Struct out24 = new out24Struct();
out25Struct out25 = new out25Struct();
out14Struct out14 = new out14Struct();






	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */




	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashOutput_5 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_5.getKeyMap().put("tHashFile_GlosasMedicamentos_" +pid + "_tHashOutput_5", "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_4");
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */




	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashOutput_6 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_6.getKeyMap().put("tHashFile_GlosasMedicamentos_" +pid + "_tHashOutput_6", "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_4");
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */




	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out6");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out6Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out6Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */




	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out7");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out6Struct> tHashFile_tHashOutput_8 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_8.getKeyMap().put("tHashFile_GlosasMedicamentos_" +pid + "_tHashOutput_8", "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_7");
        int nb_line_tHashOutput_8 = 0;

 



/**
 * [tHashOutput_8 begin ] stop
 */




	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out8");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out6Struct> tHashFile_tHashOutput_9 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_9.getKeyMap().put("tHashFile_GlosasMedicamentos_" +pid + "_tHashOutput_9", "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_7");
        int nb_line_tHashOutput_9 = 0;

 



/**
 * [tHashOutput_9 begin ] stop
 */




	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out9");
					}
				
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;

 



/**
 * [tHashOutput_10 begin ] stop
 */




	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct> tHashFile_tHashOutput_11 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_11.getKeyMap().put("tHashFile_GlosasMedicamentos_" +pid + "_tHashOutput_11", "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_10");
        int nb_line_tHashOutput_11 = 0;

 



/**
 * [tHashOutput_11 begin ] stop
 */




	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct> tHashFile_tHashOutput_12 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_12.getKeyMap().put("tHashFile_GlosasMedicamentos_" +pid + "_tHashOutput_12", "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_10");
        int nb_line_tHashOutput_12 = 0;

 



/**
 * [tHashOutput_12 begin ] stop
 */




	
	/**
	 * [tHashOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_20", false);
		start_Hash.put("tHashOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out24");
					}
				
		int tos_count_tHashOutput_20 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out24Struct> tHashFile_tHashOutput_20 = null;
		String hashKey_tHashOutput_20 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_20";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_20)){
			    if(mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20) == null){
	      		    mf_tHashOutput_20.getResourceMap().put(hashKey_tHashOutput_20, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out24Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }else{
			    	tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }
			}
        int nb_line_tHashOutput_20 = 0;

 



/**
 * [tHashOutput_20 begin ] stop
 */




	
	/**
	 * [tHashOutput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_21", false);
		start_Hash.put("tHashOutput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out25");
					}
				
		int tos_count_tHashOutput_21 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out24Struct> tHashFile_tHashOutput_21 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_21.getKeyMap().put("tHashFile_GlosasMedicamentos_" +pid + "_tHashOutput_21", "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_20");
        int nb_line_tHashOutput_21 = 0;

 



/**
 * [tHashOutput_21 begin ] stop
 */




	
	/**
	 * [tHashOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_16", false);
		start_Hash.put("tHashOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out14");
					}
				
		int tos_count_tHashOutput_16 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out14Struct> tHashFile_tHashOutput_16 = null;
		String hashKey_tHashOutput_16 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_16";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_16)){
			    if(mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16) == null){
	      		    mf_tHashOutput_16.getResourceMap().put(hashKey_tHashOutput_16, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out14Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }else{
			    	tHashFile_tHashOutput_16 = mf_tHashOutput_16.getResourceMap().get(hashKey_tHashOutput_16);
			    }
			}
        int nb_line_tHashOutput_16 = 0;

 



/**
 * [tHashOutput_16 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct> tHash_Lookup_row62 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct>) 
					globalMap.get( "tHash_Lookup_row62" ))
					;					
					
	

row62Struct row62HashKey = new row62Struct();
row62Struct row62Default = new row62Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct> tHash_Lookup_row63 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct>) 
					globalMap.get( "tHash_Lookup_row63" ))
					;					
					
	

row63Struct row63HashKey = new row63Struct();
row63Struct row63Default = new row63Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
out4Struct out4_tmp = new out4Struct();
out5Struct out5_tmp = new out5Struct();
out6Struct out6_tmp = new out6Struct();
out7Struct out7_tmp = new out7Struct();
out8Struct out8_tmp = new out8Struct();
out9Struct out9_tmp = new out9Struct();
out2Struct out2_tmp = new out2Struct();
out3Struct out3_tmp = new out3Struct();
out24Struct out24_tmp = new out24Struct();
out25Struct out25_tmp = new out25Struct();
out14Struct out14_tmp = new out14Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				String driverClass_tOracleInput_1 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_1);
				
			String url_tOracleInput_1 = null;
				url_tOracleInput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_1 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_1 = context.db_origen_Password; 

				String dbPwd_tOracleInput_1 = decryptedPassword_tOracleInput_1;

				
					java.util.Properties atnParamsPrope_tOracleInput_1 = new java.util.Properties();
					atnParamsPrope_tOracleInput_1.put("user",dbUser_tOracleInput_1);
					atnParamsPrope_tOracleInput_1.put("password",dbPwd_tOracleInput_1);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_1 = java.sql.DriverManager.getConnection(url_tOracleInput_1, atnParamsPrope_tOracleInput_1);
				java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_1.next()) {
					sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
				}
                                if (!(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                                }
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT\nFA.VALOR AS VALOR_FACTURA,\nFA.VCALCULADO AS VCALCULADO_FACTURA,\nAD.ID,\nAD.RECEPCION_ID,\nAD.FACTURA_ID,\nAD."
+"PREFIJO,\nAD.NUMERO_FACTURA,\nAD.LUGAR,\nAD.PERIODO,\nAD.SIGLAESM,\nAD.SIGLAFUERZA,\nAD.FORMULA,\nAD.TIRILLA,\nAD.FFORMU"
+"ALCION,\nAD.FDISPENSACION,\nAD.DOCUMENTO,\nAD.TDOCUMENTOS_ID,\nAD.TFORMULAS_ID,\nAD.TORIGEN_ID,\nAD.CODIGOCUM,\nUPPER(RE"
+"PLACE(AD.INVIMA,' ')) AS INVIMA,\nAD.CODIGOSSMP,\nAD.NOMBREMEDICAMENTO,\nAD.LABORATORIO,\nAD.BODEGA,\nAD.LOTE,\nAD.FVENC"
+"IMIENTO,\nAD.CANTFORMULADA,\nAD.CANTENTREGADA,\nAD.VUNITARIO,\nAD.SUBTOTAL,\nAD.INTERMEDIACION,\nAD.VTOTAL,\nAD.VGRAVADO"
+",\nAD.DCARGUE_ID,\nAD.DFORMMEDINSUMOS_ID,\nAD.FECHA,\nAD.USUARIOS_ID,\nAD.UORG_ID,\nAD.ESTADO,\nAD.ESTREGISTRO_ID,\nAD.T"
+"IPIFICACION,\nAD.TDOCUMENTO,\nAD.TFORMULA,\nAD.TORIGEN,\nAD.VGLOSADO,\nAD.VSOPORTADO,\nAD.VACEPTADO,\nAD.VRATIFICADO,\nA"
+"D.VAVALPAGO,\nAD.PERSONAS_ID,\nAD.DOSIS,\nAD.FRECUENCIA,\nAD.PRODUCTOS_ID,\nAD.CIE10_ID,\nAD.DFORMMEDINSUMOS_ID,\nDMO.FV"
+"ENCIMIENTO AS FVENCIMIENTO_SALUDSIS, \nDMO.FMOVIMIENTO AS FMOVIMIENTO_SALUDSIS, \nDF.CANTIDAD AS CANTIDAD_SALUDSIS,\nCAS"
+"E WHEN DMO.VINTERMEDIACION = 0 AND DMO.SUBTOTAL > 0 THEN 1 ELSE 0 END AS VINTERMEDIACION ,\nNVL(FA.VCALCULADO,0) AS VCAL"
+"CULADO_TOTAL,\nCASE \nWHEN FA.VALOR <> FA.VCALCULADO THEN  1\nELSE 0 END AS BANDERA_TOTAL,\nCASE \nWHEN FECHA.FECHA_FIN_"
+"MED >  AD.FFORMUALCION AND ((TRUNC((FECHA.FECHA_FIN_MED- AD.FFORMUALCION)/FECHA.FRECUENCIA)*(FECHA.DOSIS))/FECHA.CANTENT"
+"REGADA)*100 < 80 THEN 1\nELSE 0 END AS BANDERA_PORCENTAJE,\nNVL(REPE.CANTENTREGADA,0) AS CANTENTREGADA_ANTERIOR\nFROM AC"
+"M_DFACTURAFORMULACION AD\nINNER JOIN ACM_FACTURA FA ON FA.ID = AD.FACTURA_ID\nLEFT JOIN (SELECT * FROM (\n            SE"
+"LECT \n            ROW_NUMBER() OVER (PARTITION BY  DOCUMENTO, TDOCUMENTOS_ID, CODIGOCUM ORDER BY FDISPENSACION DESC) AS"
+" NUMERO,\n            FDISPENSACION , \n            DOCUMENTO,\n            TDOCUMENTOS_ID,\n            CODIGOCUM,\n   "
+"         CANTENTREGADA,\n            DOSIS,\n            FRECUENCIA,\n            FDISPENSACION+TRUNC(((CANTENTREGADA/DO"
+"SIS)* FRECUENCIA)/24) AS FECHA_FIN_MED\n            FROM ACM_DFACTURAFORMULACION \n            WHERE RECEPCION_ID <> "+context.RECEPCION_ID+") T\n            WHERE \n            T.NUMERO = 1) FECHA ON FECHA.DOCUMENTO = AD.DOCUMENTO AND FECHA.TDOCUMENTOS_ID = A"
+"D.TDOCUMENTOS_ID  AND FECHA.CODIGOCUM = AD.CODIGOCUM\nLEFT JOIN (SELECT \n            SUM(DFAC.CANTENTREGADA) AS CANTENT"
+"REGADA,\n            DFAC.CODIGOCUM,\n            DFAC.FORMULA\n            FROM ACM_DFACTURAFORMULACION DFAC\n         "
+"   WHERE DFAC.RECEPCION_ID <> "+context.RECEPCION_ID+"\n            GROUP BY \n            DFAC.CODIGOCUM,\n            DFAC.FORMULA) REPE ON REPE.FORMULA = AD.FORMULA AND R"
+"EPE.CODIGOCUM = AD.CODIGOCUM\nLEFT JOIN (SELECT \n            DMO.DFORMMEDINSUMOS_ID,\n            MOV.FMOVIMIENTO,\n   "
+"         INV.FVENCIMIENTO,\n            TI.CONSECUTIVO AS TIRILLA,\n            MOV.SOPORTE AS FORMULA,\n            INV"
+".PRODUCTOS_ID,\n            DMO.VINTERMEDIACION,\n            DMO.SUBTOTAL\n        FROM MED_DMOVIMIENTOS DMO \n        "
+"INNER JOIN MED_MOVIMIENTOS MOV ON MOV.ID = DMO.MOVIMIENTOS_ID\n        INNER JOIN MED_TIRILLAS TI ON TI.ID = MOV.TIRILLA"
+"S_ID\n        INNER JOIN MED_INVENTARIOS INV ON INV.ID = DMO.INVENTARIOS_ID) DMO ON DMO.DFORMMEDINSUMOS_ID = AD.DFORMMED"
+"INSUMOS_ID AND DMO.PRODUCTOS_ID =  AD.PRODUCTOS_ID AND DMO.TIRILLA = AD.TIRILLA AND DMO.FORMULA = AD.FORMULA\nLEFT JOIN "
+"HCL_DFORMMEDINSUMOS DF ON DF.ID = AD.DFORMMEDINSUMOS_ID\nWHERE AD.RECEPCION_ID = " +context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row2.VALOR_FACTURA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row2.VALOR_FACTURA = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row2.VCALCULADO_FACTURA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row2.VCALCULADO_FACTURA = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row2.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(3) != null) {
						row2.ID = rs_tOracleInput_1.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row2.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(4) != null) {
						row2.RECEPCION_ID = rs_tOracleInput_1.getBigDecimal(4);
					} else {
				
						row2.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row2.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row2.FACTURA_ID = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
						row2.FACTURA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row2.PREFIJO = null;
							} else {
	                         		
        	row2.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row2.NUMERO_FACTURA = null;
							} else {
	                         		
        	row2.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row2.LUGAR = null;
							} else {
	                         		
        	row2.LUGAR = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row2.PERIODO = null;
							} else {
										
			row2.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 9);
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row2.SIGLAESM = null;
							} else {
	                         		
        	row2.SIGLAESM = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row2.SIGLAFUERZA = null;
							} else {
	                         		
        	row2.SIGLAFUERZA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row2.FORMULA = null;
							} else {
	                         		
        	row2.FORMULA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row2.TIRILLA = null;
							} else {
	                         		
        	row2.TIRILLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 13, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row2.FFORMUALCION = null;
							} else {
										
			row2.FFORMUALCION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 14);
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row2.FDISPENSACION = null;
							} else {
										
			row2.FDISPENSACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 15);
		                    }
							if(colQtyInRs_tOracleInput_1 < 16) {
								row2.DOCUMENTO = null;
							} else {
	                         		
        	row2.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 17) {
								row2.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(17) != null) {
						row2.TDOCUMENTOS_ID = rs_tOracleInput_1.getBigDecimal(17);
					} else {
				
						row2.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 18) {
								row2.TFORMULAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(18) != null) {
						row2.TFORMULAS_ID = rs_tOracleInput_1.getBigDecimal(18);
					} else {
				
						row2.TFORMULAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 19) {
								row2.TORIGEN_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(19) != null) {
						row2.TORIGEN_ID = rs_tOracleInput_1.getBigDecimal(19);
					} else {
				
						row2.TORIGEN_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 20) {
								row2.CODIGOCUM = null;
							} else {
	                         		
        	row2.CODIGOCUM = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 21) {
								row2.INVIMA = null;
							} else {
	                         		
        	row2.INVIMA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 22) {
								row2.CODIGOSSMP = null;
							} else {
	                         		
        	row2.CODIGOSSMP = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 23) {
								row2.NOMBREMEDICAMENTO = null;
							} else {
	                         		
        	row2.NOMBREMEDICAMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 24) {
								row2.LABORATORIO = null;
							} else {
	                         		
        	row2.LABORATORIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 25) {
								row2.BODEGA = null;
							} else {
	                         		
        	row2.BODEGA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 26) {
								row2.LOTE = null;
							} else {
	                         		
        	row2.LOTE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 27) {
								row2.FVENCIMIENTO = null;
							} else {
										
			row2.FVENCIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 27);
		                    }
							if(colQtyInRs_tOracleInput_1 < 28) {
								row2.CANTFORMULADA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(28) != null) {
						row2.CANTFORMULADA = rs_tOracleInput_1.getBigDecimal(28);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 29) {
								row2.CANTENTREGADA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(29) != null) {
						row2.CANTENTREGADA = rs_tOracleInput_1.getBigDecimal(29);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 30) {
								row2.VUNITARIO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(30) != null) {
						row2.VUNITARIO = rs_tOracleInput_1.getBigDecimal(30);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 31) {
								row2.SUBTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(31) != null) {
						row2.SUBTOTAL = rs_tOracleInput_1.getBigDecimal(31);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 32) {
								row2.INTERMEDIACION = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(32) != null) {
						row2.INTERMEDIACION = rs_tOracleInput_1.getBigDecimal(32);
					} else {
				
						row2.INTERMEDIACION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 33) {
								row2.VTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(33) != null) {
						row2.VTOTAL = rs_tOracleInput_1.getBigDecimal(33);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 34) {
								row2.VGRAVADO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(34) != null) {
						row2.VGRAVADO = rs_tOracleInput_1.getBigDecimal(34);
					} else {
				
						row2.VGRAVADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 35) {
								row2.DCARGUE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(35) != null) {
						row2.DCARGUE_ID = rs_tOracleInput_1.getBigDecimal(35);
					} else {
				
						row2.DCARGUE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 36) {
								row2.DFORMMEDINSUMOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(36) != null) {
						row2.DFORMMEDINSUMOS_ID = rs_tOracleInput_1.getBigDecimal(36);
					} else {
				
						row2.DFORMMEDINSUMOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 37) {
								row2.FECHA = null;
							} else {
										
			row2.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 37);
		                    }
							if(colQtyInRs_tOracleInput_1 < 38) {
								row2.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(38) != null) {
						row2.USUARIOS_ID = rs_tOracleInput_1.getBigDecimal(38);
					} else {
				
						row2.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 39) {
								row2.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(39) != null) {
						row2.UORG_ID = rs_tOracleInput_1.getBigDecimal(39);
					} else {
				
						row2.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 40) {
								row2.ESTADO = null;
							} else {
	                         		
        	row2.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 40, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 41) {
								row2.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(41) != null) {
						row2.ESTREGISTRO_ID = rs_tOracleInput_1.getBigDecimal(41);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 42) {
								row2.TIPIFICACION = null;
							} else {
	                         		
        	row2.TIPIFICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 42, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 43) {
								row2.TDOCUMENTO = null;
							} else {
	                         		
        	row2.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 43, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 44) {
								row2.TFORMULA = null;
							} else {
	                         		
        	row2.TFORMULA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 44, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 45) {
								row2.TORIGEN = null;
							} else {
	                         		
        	row2.TORIGEN = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 45, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 46) {
								row2.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(46) != null) {
						row2.VGLOSADO = rs_tOracleInput_1.getBigDecimal(46);
					} else {
				
						row2.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 47) {
								row2.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(47) != null) {
						row2.VSOPORTADO = rs_tOracleInput_1.getBigDecimal(47);
					} else {
				
						row2.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 48) {
								row2.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(48) != null) {
						row2.VACEPTADO = rs_tOracleInput_1.getBigDecimal(48);
					} else {
				
						row2.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 49) {
								row2.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(49) != null) {
						row2.VRATIFICADO = rs_tOracleInput_1.getBigDecimal(49);
					} else {
				
						row2.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 50) {
								row2.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(50) != null) {
						row2.VAVALPAGO = rs_tOracleInput_1.getBigDecimal(50);
					} else {
				
						row2.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 51) {
								row2.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(51) != null) {
						row2.PERSONAS_ID = rs_tOracleInput_1.getBigDecimal(51);
					} else {
				
						row2.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 52) {
								row2.DOSIS = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(52) != null) {
						row2.DOSIS = rs_tOracleInput_1.getBigDecimal(52);
					} else {
				
						row2.DOSIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 53) {
								row2.FRECUENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(53) != null) {
						row2.FRECUENCIA = rs_tOracleInput_1.getBigDecimal(53);
					} else {
				
						row2.FRECUENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 54) {
								row2.PRODUCTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(54) != null) {
						row2.PRODUCTOS_ID = rs_tOracleInput_1.getBigDecimal(54);
					} else {
				
						row2.PRODUCTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 55) {
								row2.CIE10_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(55) != null) {
						row2.CIE10_ID = rs_tOracleInput_1.getBigDecimal(55);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 56) {
								row2.DFORMMEDINSUMOS_ID1 = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(56) != null) {
						row2.DFORMMEDINSUMOS_ID1 = rs_tOracleInput_1.getBigDecimal(56);
					} else {
				
						row2.DFORMMEDINSUMOS_ID1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 57) {
								row2.FVENCIMIENTO_SALUDSIS = null;
							} else {
										
			row2.FVENCIMIENTO_SALUDSIS = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 57);
		                    }
							if(colQtyInRs_tOracleInput_1 < 58) {
								row2.FMOVIMIENTO_SALUDSIS = null;
							} else {
										
			row2.FMOVIMIENTO_SALUDSIS = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 58);
		                    }
							if(colQtyInRs_tOracleInput_1 < 59) {
								row2.CANTIDAD_SALUDSIS = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(59) != null) {
						row2.CANTIDAD_SALUDSIS = rs_tOracleInput_1.getBigDecimal(59);
					} else {
				
						row2.CANTIDAD_SALUDSIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 60) {
								row2.VINTERMEDIACION = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(60) != null) {
						row2.VINTERMEDIACION = rs_tOracleInput_1.getInt(60);
					} else {
				
						row2.VINTERMEDIACION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 61) {
								row2.VCALCULADO_TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(61) != null) {
						row2.VCALCULADO_TOTAL = rs_tOracleInput_1.getBigDecimal(61);
					} else {
				
						row2.VCALCULADO_TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 62) {
								row2.BANDERA_TOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(62) != null) {
						row2.BANDERA_TOTAL = rs_tOracleInput_1.getInt(62);
					} else {
				
						row2.BANDERA_TOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 63) {
								row2.BANDERA_PORCENTAJE = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(63) != null) {
						row2.BANDERA_PORCENTAJE = rs_tOracleInput_1.getInt(63);
					} else {
				
						row2.BANDERA_PORCENTAJE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 64) {
								row2.CANTENTREGADA_ANTERIOR = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(64) != null) {
						row2.CANTENTREGADA_ANTERIOR = rs_tOracleInput_1.getBigDecimal(64);
					} else {
				
						row2.CANTENTREGADA_ANTERIOR = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					



    
		row2Struct oneRow_tHashOutput_1 = new row2Struct();
				
					oneRow_tHashOutput_1.VALOR_FACTURA = row2.VALOR_FACTURA;
					oneRow_tHashOutput_1.VCALCULADO_FACTURA = row2.VCALCULADO_FACTURA;
					oneRow_tHashOutput_1.ID = row2.ID;
					oneRow_tHashOutput_1.RECEPCION_ID = row2.RECEPCION_ID;
					oneRow_tHashOutput_1.FACTURA_ID = row2.FACTURA_ID;
					oneRow_tHashOutput_1.PREFIJO = row2.PREFIJO;
					oneRow_tHashOutput_1.NUMERO_FACTURA = row2.NUMERO_FACTURA;
					oneRow_tHashOutput_1.LUGAR = row2.LUGAR;
					oneRow_tHashOutput_1.PERIODO = row2.PERIODO;
					oneRow_tHashOutput_1.SIGLAESM = row2.SIGLAESM;
					oneRow_tHashOutput_1.SIGLAFUERZA = row2.SIGLAFUERZA;
					oneRow_tHashOutput_1.FORMULA = row2.FORMULA;
					oneRow_tHashOutput_1.TIRILLA = row2.TIRILLA;
					oneRow_tHashOutput_1.FFORMUALCION = row2.FFORMUALCION;
					oneRow_tHashOutput_1.FDISPENSACION = row2.FDISPENSACION;
					oneRow_tHashOutput_1.DOCUMENTO = row2.DOCUMENTO;
					oneRow_tHashOutput_1.TDOCUMENTOS_ID = row2.TDOCUMENTOS_ID;
					oneRow_tHashOutput_1.TFORMULAS_ID = row2.TFORMULAS_ID;
					oneRow_tHashOutput_1.TORIGEN_ID = row2.TORIGEN_ID;
					oneRow_tHashOutput_1.CODIGOCUM = row2.CODIGOCUM;
					oneRow_tHashOutput_1.INVIMA = row2.INVIMA;
					oneRow_tHashOutput_1.CODIGOSSMP = row2.CODIGOSSMP;
					oneRow_tHashOutput_1.NOMBREMEDICAMENTO = row2.NOMBREMEDICAMENTO;
					oneRow_tHashOutput_1.LABORATORIO = row2.LABORATORIO;
					oneRow_tHashOutput_1.BODEGA = row2.BODEGA;
					oneRow_tHashOutput_1.LOTE = row2.LOTE;
					oneRow_tHashOutput_1.FVENCIMIENTO = row2.FVENCIMIENTO;
					oneRow_tHashOutput_1.CANTFORMULADA = row2.CANTFORMULADA;
					oneRow_tHashOutput_1.CANTENTREGADA = row2.CANTENTREGADA;
					oneRow_tHashOutput_1.VUNITARIO = row2.VUNITARIO;
					oneRow_tHashOutput_1.SUBTOTAL = row2.SUBTOTAL;
					oneRow_tHashOutput_1.INTERMEDIACION = row2.INTERMEDIACION;
					oneRow_tHashOutput_1.VTOTAL = row2.VTOTAL;
					oneRow_tHashOutput_1.VGRAVADO = row2.VGRAVADO;
					oneRow_tHashOutput_1.DCARGUE_ID = row2.DCARGUE_ID;
					oneRow_tHashOutput_1.DFORMMEDINSUMOS_ID = row2.DFORMMEDINSUMOS_ID;
					oneRow_tHashOutput_1.FECHA = row2.FECHA;
					oneRow_tHashOutput_1.USUARIOS_ID = row2.USUARIOS_ID;
					oneRow_tHashOutput_1.UORG_ID = row2.UORG_ID;
					oneRow_tHashOutput_1.ESTADO = row2.ESTADO;
					oneRow_tHashOutput_1.ESTREGISTRO_ID = row2.ESTREGISTRO_ID;
					oneRow_tHashOutput_1.TIPIFICACION = row2.TIPIFICACION;
					oneRow_tHashOutput_1.TDOCUMENTO = row2.TDOCUMENTO;
					oneRow_tHashOutput_1.TFORMULA = row2.TFORMULA;
					oneRow_tHashOutput_1.TORIGEN = row2.TORIGEN;
					oneRow_tHashOutput_1.VGLOSADO = row2.VGLOSADO;
					oneRow_tHashOutput_1.VSOPORTADO = row2.VSOPORTADO;
					oneRow_tHashOutput_1.VACEPTADO = row2.VACEPTADO;
					oneRow_tHashOutput_1.VRATIFICADO = row2.VRATIFICADO;
					oneRow_tHashOutput_1.VAVALPAGO = row2.VAVALPAGO;
					oneRow_tHashOutput_1.PERSONAS_ID = row2.PERSONAS_ID;
					oneRow_tHashOutput_1.DOSIS = row2.DOSIS;
					oneRow_tHashOutput_1.FRECUENCIA = row2.FRECUENCIA;
					oneRow_tHashOutput_1.PRODUCTOS_ID = row2.PRODUCTOS_ID;
					oneRow_tHashOutput_1.CIE10_ID = row2.CIE10_ID;
					oneRow_tHashOutput_1.DFORMMEDINSUMOS_ID1 = row2.DFORMMEDINSUMOS_ID1;
					oneRow_tHashOutput_1.FVENCIMIENTO_SALUDSIS = row2.FVENCIMIENTO_SALUDSIS;
					oneRow_tHashOutput_1.FMOVIMIENTO_SALUDSIS = row2.FMOVIMIENTO_SALUDSIS;
					oneRow_tHashOutput_1.CANTIDAD_SALUDSIS = row2.CANTIDAD_SALUDSIS;
					oneRow_tHashOutput_1.VINTERMEDIACION = row2.VINTERMEDIACION;
					oneRow_tHashOutput_1.VCALCULADO_TOTAL = row2.VCALCULADO_TOTAL;
					oneRow_tHashOutput_1.BANDERA_TOTAL = row2.BANDERA_TOTAL;
					oneRow_tHashOutput_1.BANDERA_PORCENTAJE = row2.BANDERA_PORCENTAJE;
					oneRow_tHashOutput_1.CANTENTREGADA_ANTERIOR = row2.CANTENTREGADA_ANTERIOR;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 
     row5 = row2;


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row6Struct row6 = null;
					
						row8Struct row8 = null;
					
						row7Struct row7 = null;
					
						row62Struct row62 = null;
					
						row63Struct row63 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row6HashKey.DOCUMENTO = row5.DOCUMENTO ;
                        		    		
                        		    		    row6HashKey.TDOCUMENTOS_ID = row5.TDOCUMENTOS_ID ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row8HashKey.NUMERO = row5.NUMERO_FACTURA;
                        		    		
                        		    		    row8HashKey.PREFIJO = row5.PREFIJO ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row7HashKey.CUMS = row5.CODIGOCUM ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
							
                    		  	  		
								if( !rejectedInnerJoin_tMap_1 && 
									
									!(
										
										TalendDate.compareDate(row7.FINICIO,row5.FDISPENSACION,"yyyy-MM-dd") < 1 && TalendDate.compareDate(row5.FDISPENSACION,row7.FFIN,"yyyy-MM-dd") < 1
										
									)
									
								) { // G 016
                    		  	  		  
									fromLookup_row7 = null;
									row7 = row7Default;
                    		  	  		  		
									
								} // G 016
     	               		  	
								
     	               		  	  	  
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row62" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow62 = false;
       		  	    	
       		  	    	
 							row62Struct row62ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row62HashKey.INVIMA = row5.INVIMA ;
                        		    		

								
		                        	row62HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row62.lookup( row62HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row62Struct fromLookup_row62 = null;
							row62 = row62Default;
										 
							
								 
							
							
								if (tHash_Lookup_row62 !=null && tHash_Lookup_row62.hasNext()) { // G 099
								
							
								
								fromLookup_row62 = tHash_Lookup_row62.next();

							
							
								} // G 099
							
							

							if(fromLookup_row62 != null) {
								row62 = fromLookup_row62;
							}
							
							
							
			  							
							
                    		  	  		
								if( !rejectedInnerJoin_tMap_1 && 
									
									!(
										
										TalendDate.compareDate(row62.FINICIO,row5.FDISPENSACION,"yyyy-MM-dd") < 1 && TalendDate.compareDate(row5.FDISPENSACION,row62.FFIN,"yyyy-MM-dd") < 1
										
									)
									
								) { // G 016
                    		  	  		  
									fromLookup_row62 = null;
									row62 = row62Default;
                    		  	  		  		
									
								} // G 016
     	               		  	
								
     	               		  	  	  
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row63" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow63 = false;
       		  	    	
       		  	    	
 							row63Struct row63ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row63HashKey.INVIMA_HOMOLOGO = row5.INVIMA ;
                        		    		

								
		                        	row63HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row63.lookup( row63HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row63Struct fromLookup_row63 = null;
							row63 = row63Default;
										 
							
								 
							
							
								if (tHash_Lookup_row63 !=null && tHash_Lookup_row63.hasNext()) { // G 099
								
							
								
								fromLookup_row63 = tHash_Lookup_row63.next();

							
							
								} // G 099
							
							

							if(fromLookup_row63 != null) {
								row63 = fromLookup_row63;
							}
							
							
							
			  							
							
                    		  	  		
								if( !rejectedInnerJoin_tMap_1 && 
									
									!(
										
										TalendDate.compareDate(row63.FINICIO,row5.FDISPENSACION,"yyyy-MM-dd") < 1 && TalendDate.compareDate(row5.FDISPENSACION,row63.FFIN,"yyyy-MM-dd") < 1
										
									)
									
								) { // G 016
                    		  	  		  
									fromLookup_row63 = null;
									row63 = row63Default;
                    		  	  		  		
									
								} // G 016
     	               		  	
								
     	               		  	  	  
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;
out4 = null;
out5 = null;
out6 = null;
out7 = null;
out8 = null;
out9 = null;
out2 = null;
out3 = null;
out24 = null;
out25 = null;
out14 = null;


// # Output table : 'out1'
// # Filter conditions 
if( 

row6.ESTADO != 0

 ) {
out1_tmp.ID = row5.ID ;
out1_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out1_tmp.FACTURA_ID = row5.FACTURA_ID ;
out1_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out1_tmp.VTOTAL = row5.VTOTAL ;
out1_tmp.VINFORMATIVO = new BigDecimal(0);
out1_tmp.GLOSACAUSADA = (row6.ESTADO == 1)? context.AfiliacionDerechos : context.AfiliacionInactiva ;
out1_tmp.SIGLA = (row6.ESTADO == 1)? context.AfiliacionDerechosD : context.AfiliacionInactivaD ;
out1 = out1_tmp;
} // closing filter/reject

// # Output table : 'out4'
// # Filter conditions 
if( 

row5.VINTERMEDIACION == 1 && row5.INTERMEDIACION.doubleValue() > 0.0 

 ) {
out4_tmp.ID = row5.ID ;
out4_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out4_tmp.FACTURA_ID = row5.FACTURA_ID ;
out4_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out4_tmp.VTOTAL = row5.VTOTAL ;
out4_tmp.VINFORMATIVO = row5.INTERMEDIACION ;
out4_tmp.GLOSACAUSADA = context.TiempoEntrega;
out4_tmp.SIGLA = context.TiempoEntregaD;
out4 = out4_tmp;
} // closing filter/reject

// # Output table : 'out5'
// # Filter conditions 
if( 

row8.NUMERO != null

 ) {
out5_tmp.ID = row5.ID ;
out5_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out5_tmp.FACTURA_ID = row5.FACTURA_ID ;
out5_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out5_tmp.VTOTAL = row5.VTOTAL ;
out5_tmp.VINFORMATIVO = new BigDecimal(0);
out5_tmp.GLOSACAUSADA = context.FacturaAuditada;
out5_tmp.SIGLA = context.FacturaAuditadaD;
out5 = out5_tmp;
} // closing filter/reject

// # Output table : 'out6'
// # Filter conditions 
if( 

( row5.FDISPENSACION.getTime() - row5.FFORMUALCION.getTime() ) >context.VIDA_UTIL	

 ) {
out6_tmp.ID = row5.ID ;
out6_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out6_tmp.FACTURA_ID = row5.FACTURA_ID ;
out6_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out6_tmp.VTOTAL = row5.VTOTAL ;
out6_tmp.VINFORMATIVO = new BigDecimal(0);
out6_tmp.GLOSACAUSADA = context.VidaUtil;
out6_tmp.SIGLA = context.VidaUtilD;
out6 = out6_tmp;
} // closing filter/reject

// # Output table : 'out7'
// # Filter conditions 
if( 

row5.BANDERA_TOTAL == 1

 ) {
out7_tmp.ID = row5.ID ;
out7_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out7_tmp.FACTURA_ID = row5.FACTURA_ID ;
out7_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out7_tmp.VTOTAL = row5.VTOTAL ;
out7_tmp.VINFORMATIVO = new BigDecimal(0);
out7_tmp.GLOSACAUSADA = context.SumaFacturas;
out7_tmp.SIGLA = context.SumaFacturasD;
out7 = out7_tmp;
} // closing filter/reject

// # Output table : 'out8'
// # Filter conditions 
if( 

row5.BANDERA_PORCENTAJE ==1

 ) {
out8_tmp.ID = row5.ID ;
out8_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out8_tmp.FACTURA_ID = row5.FACTURA_ID ;
out8_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out8_tmp.VTOTAL = row5.VTOTAL ;
out8_tmp.VINFORMATIVO = new BigDecimal(0);
out8_tmp.GLOSACAUSADA = context.PorcetajeConsumo;
out8_tmp.SIGLA = context.PorcetajeConsumoD;
out8 = out8_tmp;
} // closing filter/reject

// # Output table : 'out9'
// # Filter conditions 
if( 

(row5.CANTENTREGADA_ANTERIOR.intValue() + row5.CANTENTREGADA.intValue() ) >  row5.CANTFORMULADA.intValue()

 ) {
out9_tmp.ID = row5.ID ;
out9_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out9_tmp.FACTURA_ID = row5.FACTURA_ID ;
out9_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out9_tmp.VTOTAL = row5.VTOTAL ;
out9_tmp.VINFORMATIVO = (row5.CANTENTREGADA_ANTERIOR.intValue() > 0) ? row5.VTOTAL : new BigDecimal(((row5.CANTENTREGADA.intValue() + row5.CANTENTREGADA_ANTERIOR.intValue())-row5.CANTFORMULADA.intValue())*row5.VUNITARIO.intValue()) ;
out9_tmp.GLOSACAUSADA = context.CantidadFormulada;
out9_tmp.SIGLA = context.CantidadFormuladaD;
out9 = out9_tmp;
} // closing filter/reject

// # Output table : 'out2'
// # Filter conditions 
if( 

row7.CUMS == null && row62.CUMS == null && row63.CUMS == null

 ) {
out2_tmp.ID = row5.ID ;
out2_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out2_tmp.FACTURA_ID = row5.FACTURA_ID ;
out2_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out2_tmp.VTOTAL = row5.VTOTAL ;
out2_tmp.VINFORMATIVO = new BigDecimal(0);
out2_tmp.GLOSACAUSADA = context.MedicamentoNoPactado;
out2_tmp.SIGLA = context.MedicamentoNoPactadoD;
out2 = out2_tmp;
} // closing filter/reject

// # Output table : 'out3'
// # Filter conditions 
if( 

row7.CUMS != null &&  row7.PRECIO.intValue()  <  row5.VUNITARIO.intValue()  

 ) {
out3_tmp.ID = row5.ID ;
out3_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out3_tmp.FACTURA_ID = row5.FACTURA_ID ;
out3_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out3_tmp.VTOTAL = row5.VTOTAL ;
out3_tmp.VINFORMATIVO = row5.VUNITARIO.subtract(row7.PRECIO) ;
out3_tmp.GLOSACAUSADA = context.ValorNoPactado;
out3_tmp.SIGLA = context.ValorNoPactadoD;
out3 = out3_tmp;
} // closing filter/reject

// # Output table : 'out24'
// # Filter conditions 
if( 

row62.CUMS != null && row7.CUMS == null &&  row62.PRECIO.intValue()  <  row5.VUNITARIO.intValue()

 ) {
out24_tmp.ID = row5.ID ;
out24_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out24_tmp.FACTURA_ID = row5.FACTURA_ID ;
out24_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out24_tmp.VTOTAL = row5.VTOTAL ;
out24_tmp.VINFORMATIVO = row5.VUNITARIO.subtract(row62.PRECIO) ;
out24_tmp.GLOSACAUSADA = context.ValorNoPactado;
out24_tmp.SIGLA = context.ValorNoPactadoD;
out24 = out24_tmp;
} // closing filter/reject

// # Output table : 'out25'
// # Filter conditions 
if( 

row63.CUMS != null && row7.CUMS == null &&  row63.PRECIO.intValue()  <  row5.VUNITARIO.intValue()

 ) {
out25_tmp.ID = row5.ID ;
out25_tmp.RECEPCION_ID = row5.RECEPCION_ID ;
out25_tmp.FACTURA_ID = row5.FACTURA_ID ;
out25_tmp.NUMERO_FACTURA = row5.NUMERO_FACTURA ;
out25_tmp.VTOTAL = row5.VTOTAL ;
out25_tmp.VINFORMATIVO = row5.VUNITARIO.subtract(row63.PRECIO) ;
out25_tmp.GLOSACAUSADA = context.ValorNoPactado;
out25_tmp.SIGLA = context.ValorNoPactadoD;
out25 = out25_tmp;
} // closing filter/reject

// # Output table : 'out14'
// # Filter conditions 
if( 

row6.PERSONAS_ID != null

 ) {
out14_tmp.ID = row5.ID ;
out14_tmp.PERSONAS_ID = row6.PERSONAS_ID ;
out14 = out14_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					



    
		out1Struct oneRow_tHashOutput_4 = new out1Struct();
				
					oneRow_tHashOutput_4.ID = out1.ID;
					oneRow_tHashOutput_4.RECEPCION_ID = out1.RECEPCION_ID;
					oneRow_tHashOutput_4.FACTURA_ID = out1.FACTURA_ID;
					oneRow_tHashOutput_4.NUMERO_FACTURA = out1.NUMERO_FACTURA;
					oneRow_tHashOutput_4.VTOTAL = out1.VTOTAL;
					oneRow_tHashOutput_4.VINFORMATIVO = out1.VINFORMATIVO;
					oneRow_tHashOutput_4.GLOSACAUSADA = out1.GLOSACAUSADA;
					oneRow_tHashOutput_4.SIGLA = out1.SIGLA;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */

} // End of branch "out1"




// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					




		if(tHashFile_tHashOutput_5 == null){
			tHashFile_tHashOutput_5 = mf_tHashOutput_5.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_4");
			mf_tHashOutput_5.getResourceMap().put("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_5", tHashFile_tHashOutput_5);
		}
		out1Struct oneRow_tHashOutput_5 = new out1Struct();
			oneRow_tHashOutput_5.ID = out4.ID;
			oneRow_tHashOutput_5.RECEPCION_ID = out4.RECEPCION_ID;
			oneRow_tHashOutput_5.FACTURA_ID = out4.FACTURA_ID;
			oneRow_tHashOutput_5.NUMERO_FACTURA = out4.NUMERO_FACTURA;
			oneRow_tHashOutput_5.VTOTAL = out4.VTOTAL;
			oneRow_tHashOutput_5.VINFORMATIVO = out4.VINFORMATIVO;
			oneRow_tHashOutput_5.GLOSACAUSADA = out4.GLOSACAUSADA;
			oneRow_tHashOutput_5.SIGLA = out4.SIGLA;
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;	

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */

} // End of branch "out4"




// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					




		if(tHashFile_tHashOutput_6 == null){
			tHashFile_tHashOutput_6 = mf_tHashOutput_6.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_4");
			mf_tHashOutput_6.getResourceMap().put("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_6", tHashFile_tHashOutput_6);
		}
		out1Struct oneRow_tHashOutput_6 = new out1Struct();
			oneRow_tHashOutput_6.ID = out5.ID;
			oneRow_tHashOutput_6.RECEPCION_ID = out5.RECEPCION_ID;
			oneRow_tHashOutput_6.FACTURA_ID = out5.FACTURA_ID;
			oneRow_tHashOutput_6.NUMERO_FACTURA = out5.NUMERO_FACTURA;
			oneRow_tHashOutput_6.VTOTAL = out5.VTOTAL;
			oneRow_tHashOutput_6.VINFORMATIVO = out5.VINFORMATIVO;
			oneRow_tHashOutput_6.GLOSACAUSADA = out5.GLOSACAUSADA;
			oneRow_tHashOutput_6.SIGLA = out5.SIGLA;
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;	

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */

} // End of branch "out5"




// Start of branch "out6"
if(out6 != null) { 



	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out6"
						
						);
					}
					



    
		out6Struct oneRow_tHashOutput_7 = new out6Struct();
				
					oneRow_tHashOutput_7.ID = out6.ID;
					oneRow_tHashOutput_7.RECEPCION_ID = out6.RECEPCION_ID;
					oneRow_tHashOutput_7.FACTURA_ID = out6.FACTURA_ID;
					oneRow_tHashOutput_7.NUMERO_FACTURA = out6.NUMERO_FACTURA;
					oneRow_tHashOutput_7.VTOTAL = out6.VTOTAL;
					oneRow_tHashOutput_7.VINFORMATIVO = out6.VINFORMATIVO;
					oneRow_tHashOutput_7.GLOSACAUSADA = out6.GLOSACAUSADA;
					oneRow_tHashOutput_7.SIGLA = out6.SIGLA;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */

} // End of branch "out6"




// Start of branch "out7"
if(out7 != null) { 



	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out7"
						
						);
					}
					




		if(tHashFile_tHashOutput_8 == null){
			tHashFile_tHashOutput_8 = mf_tHashOutput_8.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_7");
			mf_tHashOutput_8.getResourceMap().put("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_8", tHashFile_tHashOutput_8);
		}
		out6Struct oneRow_tHashOutput_8 = new out6Struct();
			oneRow_tHashOutput_8.ID = out7.ID;
			oneRow_tHashOutput_8.RECEPCION_ID = out7.RECEPCION_ID;
			oneRow_tHashOutput_8.FACTURA_ID = out7.FACTURA_ID;
			oneRow_tHashOutput_8.NUMERO_FACTURA = out7.NUMERO_FACTURA;
			oneRow_tHashOutput_8.VTOTAL = out7.VTOTAL;
			oneRow_tHashOutput_8.VINFORMATIVO = out7.VINFORMATIVO;
			oneRow_tHashOutput_8.GLOSACAUSADA = out7.GLOSACAUSADA;
			oneRow_tHashOutput_8.SIGLA = out7.SIGLA;
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;	

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */

} // End of branch "out7"




// Start of branch "out8"
if(out8 != null) { 



	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out8"
						
						);
					}
					




		if(tHashFile_tHashOutput_9 == null){
			tHashFile_tHashOutput_9 = mf_tHashOutput_9.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_7");
			mf_tHashOutput_9.getResourceMap().put("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_9", tHashFile_tHashOutput_9);
		}
		out6Struct oneRow_tHashOutput_9 = new out6Struct();
			oneRow_tHashOutput_9.ID = out8.ID;
			oneRow_tHashOutput_9.RECEPCION_ID = out8.RECEPCION_ID;
			oneRow_tHashOutput_9.FACTURA_ID = out8.FACTURA_ID;
			oneRow_tHashOutput_9.NUMERO_FACTURA = out8.NUMERO_FACTURA;
			oneRow_tHashOutput_9.VTOTAL = out8.VTOTAL;
			oneRow_tHashOutput_9.VINFORMATIVO = out8.VINFORMATIVO;
			oneRow_tHashOutput_9.GLOSACAUSADA = out8.GLOSACAUSADA;
			oneRow_tHashOutput_9.SIGLA = out8.SIGLA;
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;	

 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */

} // End of branch "out8"




// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out9"
						
						);
					}
					



    
		out9Struct oneRow_tHashOutput_10 = new out9Struct();
				
					oneRow_tHashOutput_10.ID = out9.ID;
					oneRow_tHashOutput_10.RECEPCION_ID = out9.RECEPCION_ID;
					oneRow_tHashOutput_10.FACTURA_ID = out9.FACTURA_ID;
					oneRow_tHashOutput_10.NUMERO_FACTURA = out9.NUMERO_FACTURA;
					oneRow_tHashOutput_10.VTOTAL = out9.VTOTAL;
					oneRow_tHashOutput_10.VINFORMATIVO = out9.VINFORMATIVO;
					oneRow_tHashOutput_10.GLOSACAUSADA = out9.GLOSACAUSADA;
					oneRow_tHashOutput_10.SIGLA = out9.SIGLA;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;

 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */

} // End of branch "out9"




// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					




		if(tHashFile_tHashOutput_11 == null){
			tHashFile_tHashOutput_11 = mf_tHashOutput_11.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_10");
			mf_tHashOutput_11.getResourceMap().put("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_11", tHashFile_tHashOutput_11);
		}
		out9Struct oneRow_tHashOutput_11 = new out9Struct();
			oneRow_tHashOutput_11.ID = out2.ID;
			oneRow_tHashOutput_11.RECEPCION_ID = out2.RECEPCION_ID;
			oneRow_tHashOutput_11.FACTURA_ID = out2.FACTURA_ID;
			oneRow_tHashOutput_11.NUMERO_FACTURA = out2.NUMERO_FACTURA;
			oneRow_tHashOutput_11.VTOTAL = out2.VTOTAL;
			oneRow_tHashOutput_11.VINFORMATIVO = out2.VINFORMATIVO;
			oneRow_tHashOutput_11.GLOSACAUSADA = out2.GLOSACAUSADA;
			oneRow_tHashOutput_11.SIGLA = out2.SIGLA;
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;	

 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */

} // End of branch "out2"




// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					




		if(tHashFile_tHashOutput_12 == null){
			tHashFile_tHashOutput_12 = mf_tHashOutput_12.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_10");
			mf_tHashOutput_12.getResourceMap().put("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_12", tHashFile_tHashOutput_12);
		}
		out9Struct oneRow_tHashOutput_12 = new out9Struct();
			oneRow_tHashOutput_12.ID = out3.ID;
			oneRow_tHashOutput_12.RECEPCION_ID = out3.RECEPCION_ID;
			oneRow_tHashOutput_12.FACTURA_ID = out3.FACTURA_ID;
			oneRow_tHashOutput_12.NUMERO_FACTURA = out3.NUMERO_FACTURA;
			oneRow_tHashOutput_12.VTOTAL = out3.VTOTAL;
			oneRow_tHashOutput_12.VINFORMATIVO = out3.VINFORMATIVO;
			oneRow_tHashOutput_12.GLOSACAUSADA = out3.GLOSACAUSADA;
			oneRow_tHashOutput_12.SIGLA = out3.SIGLA;
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;	

 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */

} // End of branch "out3"




// Start of branch "out24"
if(out24 != null) { 



	
	/**
	 * [tHashOutput_20 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out24"
						
						);
					}
					



    
		out24Struct oneRow_tHashOutput_20 = new out24Struct();
				
					oneRow_tHashOutput_20.ID = out24.ID;
					oneRow_tHashOutput_20.RECEPCION_ID = out24.RECEPCION_ID;
					oneRow_tHashOutput_20.FACTURA_ID = out24.FACTURA_ID;
					oneRow_tHashOutput_20.NUMERO_FACTURA = out24.NUMERO_FACTURA;
					oneRow_tHashOutput_20.VTOTAL = out24.VTOTAL;
					oneRow_tHashOutput_20.VINFORMATIVO = out24.VINFORMATIVO;
					oneRow_tHashOutput_20.GLOSACAUSADA = out24.GLOSACAUSADA;
					oneRow_tHashOutput_20.SIGLA = out24.SIGLA;
		
        tHashFile_tHashOutput_20.put(oneRow_tHashOutput_20);
        nb_line_tHashOutput_20 ++;

 


	tos_count_tHashOutput_20++;

/**
 * [tHashOutput_20 main ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 process_data_end ] stop
 */

} // End of branch "out24"




// Start of branch "out25"
if(out25 != null) { 



	
	/**
	 * [tHashOutput_21 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out25"
						
						);
					}
					




		if(tHashFile_tHashOutput_21 == null){
			tHashFile_tHashOutput_21 = mf_tHashOutput_21.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_20");
			mf_tHashOutput_21.getResourceMap().put("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_21", tHashFile_tHashOutput_21);
		}
		out24Struct oneRow_tHashOutput_21 = new out24Struct();
			oneRow_tHashOutput_21.ID = out25.ID;
			oneRow_tHashOutput_21.RECEPCION_ID = out25.RECEPCION_ID;
			oneRow_tHashOutput_21.FACTURA_ID = out25.FACTURA_ID;
			oneRow_tHashOutput_21.NUMERO_FACTURA = out25.NUMERO_FACTURA;
			oneRow_tHashOutput_21.VTOTAL = out25.VTOTAL;
			oneRow_tHashOutput_21.VINFORMATIVO = out25.VINFORMATIVO;
			oneRow_tHashOutput_21.GLOSACAUSADA = out25.GLOSACAUSADA;
			oneRow_tHashOutput_21.SIGLA = out25.SIGLA;
        tHashFile_tHashOutput_21.put(oneRow_tHashOutput_21);
        nb_line_tHashOutput_21 ++;	

 


	tos_count_tHashOutput_21++;

/**
 * [tHashOutput_21 main ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	

 



/**
 * [tHashOutput_21 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	

 



/**
 * [tHashOutput_21 process_data_end ] stop
 */

} // End of branch "out25"




// Start of branch "out14"
if(out14 != null) { 



	
	/**
	 * [tHashOutput_16 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out14"
						
						);
					}
					



    
		out14Struct oneRow_tHashOutput_16 = new out14Struct();
				
					oneRow_tHashOutput_16.ID = out14.ID;
					oneRow_tHashOutput_16.PERSONAS_ID = out14.PERSONAS_ID;
		
        tHashFile_tHashOutput_16.put(oneRow_tHashOutput_16);
        nb_line_tHashOutput_16 ++;

 


	tos_count_tHashOutput_16++;

/**
 * [tHashOutput_16 main ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 process_data_end ] stop
 */

} // End of branch "out14"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
	if(conn_tOracleInput_1 != null && !conn_tOracleInput_1.isClosed()) {
	
			conn_tOracleInput_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row62 != null) {
						tHash_Lookup_row62.endGet();
					}
					globalMap.remove( "tHash_Lookup_row62" );

					
					
				
					if(tHash_Lookup_row63 != null) {
						tHash_Lookup_row63.endGet();
					}
					globalMap.remove( "tHash_Lookup_row63" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */




	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */




	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */




	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out6");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */




	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out7");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */




	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out8");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */




	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out9");
			  	}
			  	
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());




/**
 * [tHashOutput_10 end ] stop
 */




	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */




	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */




	
	/**
	 * [tHashOutput_20 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	
globalMap.put("tHashOutput_20_NB_LINE", nb_line_tHashOutput_20);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out24");
			  	}
			  	
 

ok_Hash.put("tHashOutput_20", true);
end_Hash.put("tHashOutput_20", System.currentTimeMillis());




/**
 * [tHashOutput_20 end ] stop
 */




	
	/**
	 * [tHashOutput_21 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	
globalMap.put("tHashOutput_21_NB_LINE", nb_line_tHashOutput_21);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out25");
			  	}
			  	
 

ok_Hash.put("tHashOutput_21", true);
end_Hash.put("tHashOutput_21", System.currentTimeMillis());




/**
 * [tHashOutput_21 end ] stop
 */




	
	/**
	 * [tHashOutput_16 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	
globalMap.put("tHashOutput_16_NB_LINE", nb_line_tHashOutput_16);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out14");
			  	}
			  	
 

ok_Hash.put("tHashOutput_16", true);
end_Hash.put("tHashOutput_16", System.currentTimeMillis());




/**
 * [tHashOutput_16 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tHashInput_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row62"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row63"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */




	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */




	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */




	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */




	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 finally ] stop
 */




	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 finally ] stop
 */




	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 finally ] stop
 */




	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 finally ] stop
 */




	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 finally ] stop
 */




	
	/**
	 * [tHashOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 finally ] stop
 */




	
	/**
	 * [tHashOutput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_21";
	
	

 



/**
 * [tHashOutput_21 finally ] stop
 */




	
	/**
	 * [tHashOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row47Struct implements routines.system.IPersistableRow<row47Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row48Struct implements routines.system.IPersistableRow<row48Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row48Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row49Struct implements routines.system.IPersistableRow<row49Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row49Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();

		row48Struct row48 = new row48Struct();

		row49Struct row49 = new row49Struct();

		row50Struct row50 = new row50Struct();

			row47Struct row47 = new row47Struct();




	
	/**
	 * [tHashOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_19", false);
		start_Hash.put("tHashOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tHashOutput_19 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row47Struct> tHashFile_tHashOutput_19 = null;
		String hashKey_tHashOutput_19 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_19";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_19)){
			    if(mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19) == null){
	      		    mf_tHashOutput_19.getResourceMap().put(hashKey_tHashOutput_19, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row47Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }else{
			    	tHashFile_tHashOutput_19 = mf_tHashOutput_19.getResourceMap().get(hashKey_tHashOutput_19);
			    }
			}
        int nb_line_tHashOutput_19 = 0;

 



/**
 * [tHashOutput_19 begin ] stop
 */



	
	/**
	 * [tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_2", false);
		start_Hash.put("tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tUnite_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50","row46","row49","row48");
					}
				
		int tos_count_tUnite_2 = 0;
		

int nb_line_tUnite_2 = 0;

 



/**
 * [tUnite_2 begin ] stop
 */
	
	/**
	 * [tHashInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_18", false);
		start_Hash.put("tHashInput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_18";
	
	
		int tos_count_tHashInput_18 = 0;
		


int nb_line_tHashInput_18 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out1Struct> tHashFile_tHashInput_18 = mf_tHashInput_18.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_18==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out1Struct> iterator_tHashInput_18 = tHashFile_tHashInput_18.iterator();
while (iterator_tHashInput_18.hasNext()) {
    out1Struct next_tHashInput_18 = iterator_tHashInput_18.next();

	row46.ID = next_tHashInput_18.ID;
	row46.RECEPCION_ID = next_tHashInput_18.RECEPCION_ID;
	row46.FACTURA_ID = next_tHashInput_18.FACTURA_ID;
	row46.NUMERO_FACTURA = next_tHashInput_18.NUMERO_FACTURA;
	row46.VTOTAL = next_tHashInput_18.VTOTAL;
	row46.VINFORMATIVO = next_tHashInput_18.VINFORMATIVO;
	row46.GLOSACAUSADA = next_tHashInput_18.GLOSACAUSADA;
	row46.SIGLA = next_tHashInput_18.SIGLA;

 



/**
 * [tHashInput_18 begin ] stop
 */
	
	/**
	 * [tHashInput_18 main ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 


	tos_count_tHashInput_18++;

/**
 * [tHashInput_18 main ] stop
 */
	
	/**
	 * [tHashInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row46"
									
							);
						}
						
//////////
 

// for output
			row47 = new row47Struct();
								
			row47.ID = row46.ID;								
			row47.RECEPCION_ID = row46.RECEPCION_ID;								
			row47.FACTURA_ID = row46.FACTURA_ID;								
			row47.NUMERO_FACTURA = row46.NUMERO_FACTURA;								
			row47.VTOTAL = row46.VTOTAL;								
			row47.VINFORMATIVO = row46.VINFORMATIVO;								
			row47.GLOSACAUSADA = row46.GLOSACAUSADA;								
			row47.SIGLA = row46.SIGLA;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					



    
		row47Struct oneRow_tHashOutput_19 = new row47Struct();
				
					oneRow_tHashOutput_19.ID = row47.ID;
					oneRow_tHashOutput_19.RECEPCION_ID = row47.RECEPCION_ID;
					oneRow_tHashOutput_19.FACTURA_ID = row47.FACTURA_ID;
					oneRow_tHashOutput_19.NUMERO_FACTURA = row47.NUMERO_FACTURA;
					oneRow_tHashOutput_19.VTOTAL = row47.VTOTAL;
					oneRow_tHashOutput_19.VINFORMATIVO = row47.VINFORMATIVO;
					oneRow_tHashOutput_19.GLOSACAUSADA = row47.GLOSACAUSADA;
					oneRow_tHashOutput_19.SIGLA = row47.SIGLA;
		
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;

 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_18 end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	
    

		
			nb_line_tHashInput_18++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_18_NB_LINE", nb_line_tHashInput_18);       

 

ok_Hash.put("tHashInput_18", true);
end_Hash.put("tHashInput_18", System.currentTimeMillis());




/**
 * [tHashInput_18 end ] stop
 */
	
	/**
	 * [tHashInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_19", false);
		start_Hash.put("tHashInput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_19";
	
	
		int tos_count_tHashInput_19 = 0;
		


int nb_line_tHashInput_19 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out6Struct> tHashFile_tHashInput_19 = mf_tHashInput_19.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_19==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out6Struct> iterator_tHashInput_19 = tHashFile_tHashInput_19.iterator();
while (iterator_tHashInput_19.hasNext()) {
    out6Struct next_tHashInput_19 = iterator_tHashInput_19.next();

	row48.ID = next_tHashInput_19.ID;
	row48.RECEPCION_ID = next_tHashInput_19.RECEPCION_ID;
	row48.FACTURA_ID = next_tHashInput_19.FACTURA_ID;
	row48.NUMERO_FACTURA = next_tHashInput_19.NUMERO_FACTURA;
	row48.VTOTAL = next_tHashInput_19.VTOTAL;
	row48.VINFORMATIVO = next_tHashInput_19.VINFORMATIVO;
	row48.GLOSACAUSADA = next_tHashInput_19.GLOSACAUSADA;
	row48.SIGLA = next_tHashInput_19.SIGLA;

 



/**
 * [tHashInput_19 begin ] stop
 */
	
	/**
	 * [tHashInput_19 main ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 


	tos_count_tHashInput_19++;

/**
 * [tHashInput_19 main ] stop
 */
	
	/**
	 * [tHashInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row48"
									
							);
						}
						
//////////
 

// for output
			row47 = new row47Struct();
								
			row47.ID = row48.ID;								
			row47.RECEPCION_ID = row48.RECEPCION_ID;								
			row47.FACTURA_ID = row48.FACTURA_ID;								
			row47.NUMERO_FACTURA = row48.NUMERO_FACTURA;								
			row47.VTOTAL = row48.VTOTAL;								
			row47.VINFORMATIVO = row48.VINFORMATIVO;								
			row47.GLOSACAUSADA = row48.GLOSACAUSADA;								
			row47.SIGLA = row48.SIGLA;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					



    
		row47Struct oneRow_tHashOutput_19 = new row47Struct();
				
					oneRow_tHashOutput_19.ID = row47.ID;
					oneRow_tHashOutput_19.RECEPCION_ID = row47.RECEPCION_ID;
					oneRow_tHashOutput_19.FACTURA_ID = row47.FACTURA_ID;
					oneRow_tHashOutput_19.NUMERO_FACTURA = row47.NUMERO_FACTURA;
					oneRow_tHashOutput_19.VTOTAL = row47.VTOTAL;
					oneRow_tHashOutput_19.VINFORMATIVO = row47.VINFORMATIVO;
					oneRow_tHashOutput_19.GLOSACAUSADA = row47.GLOSACAUSADA;
					oneRow_tHashOutput_19.SIGLA = row47.SIGLA;
		
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;

 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_19 end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	
    

		
			nb_line_tHashInput_19++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_19_NB_LINE", nb_line_tHashInput_19);       

 

ok_Hash.put("tHashInput_19", true);
end_Hash.put("tHashInput_19", System.currentTimeMillis());




/**
 * [tHashInput_19 end ] stop
 */
	
	/**
	 * [tHashInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_20", false);
		start_Hash.put("tHashInput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_20";
	
	
		int tos_count_tHashInput_20 = 0;
		


int nb_line_tHashInput_20 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out9Struct> tHashFile_tHashInput_20 = mf_tHashInput_20.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_20==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out9Struct> iterator_tHashInput_20 = tHashFile_tHashInput_20.iterator();
while (iterator_tHashInput_20.hasNext()) {
    out9Struct next_tHashInput_20 = iterator_tHashInput_20.next();

	row49.ID = next_tHashInput_20.ID;
	row49.RECEPCION_ID = next_tHashInput_20.RECEPCION_ID;
	row49.FACTURA_ID = next_tHashInput_20.FACTURA_ID;
	row49.NUMERO_FACTURA = next_tHashInput_20.NUMERO_FACTURA;
	row49.VTOTAL = next_tHashInput_20.VTOTAL;
	row49.VINFORMATIVO = next_tHashInput_20.VINFORMATIVO;
	row49.GLOSACAUSADA = next_tHashInput_20.GLOSACAUSADA;
	row49.SIGLA = next_tHashInput_20.SIGLA;

 



/**
 * [tHashInput_20 begin ] stop
 */
	
	/**
	 * [tHashInput_20 main ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 


	tos_count_tHashInput_20++;

/**
 * [tHashInput_20 main ] stop
 */
	
	/**
	 * [tHashInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row49"
									
							);
						}
						
//////////
 

// for output
			row47 = new row47Struct();
								
			row47.ID = row49.ID;								
			row47.RECEPCION_ID = row49.RECEPCION_ID;								
			row47.FACTURA_ID = row49.FACTURA_ID;								
			row47.NUMERO_FACTURA = row49.NUMERO_FACTURA;								
			row47.VTOTAL = row49.VTOTAL;								
			row47.VINFORMATIVO = row49.VINFORMATIVO;								
			row47.GLOSACAUSADA = row49.GLOSACAUSADA;								
			row47.SIGLA = row49.SIGLA;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					



    
		row47Struct oneRow_tHashOutput_19 = new row47Struct();
				
					oneRow_tHashOutput_19.ID = row47.ID;
					oneRow_tHashOutput_19.RECEPCION_ID = row47.RECEPCION_ID;
					oneRow_tHashOutput_19.FACTURA_ID = row47.FACTURA_ID;
					oneRow_tHashOutput_19.NUMERO_FACTURA = row47.NUMERO_FACTURA;
					oneRow_tHashOutput_19.VTOTAL = row47.VTOTAL;
					oneRow_tHashOutput_19.VINFORMATIVO = row47.VINFORMATIVO;
					oneRow_tHashOutput_19.GLOSACAUSADA = row47.GLOSACAUSADA;
					oneRow_tHashOutput_19.SIGLA = row47.SIGLA;
		
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;

 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_20 end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	
    

		
			nb_line_tHashInput_20++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_20_NB_LINE", nb_line_tHashInput_20);       

 

ok_Hash.put("tHashInput_20", true);
end_Hash.put("tHashInput_20", System.currentTimeMillis());




/**
 * [tHashInput_20 end ] stop
 */
	
	/**
	 * [tHashInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_21", false);
		start_Hash.put("tHashInput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_21";
	
	
		int tos_count_tHashInput_21 = 0;
		


int nb_line_tHashInput_21 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out24Struct> tHashFile_tHashInput_21 = mf_tHashInput_21.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_20");
if(tHashFile_tHashInput_21==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out24Struct> iterator_tHashInput_21 = tHashFile_tHashInput_21.iterator();
while (iterator_tHashInput_21.hasNext()) {
    out24Struct next_tHashInput_21 = iterator_tHashInput_21.next();

	row50.ID = next_tHashInput_21.ID;
	row50.RECEPCION_ID = next_tHashInput_21.RECEPCION_ID;
	row50.FACTURA_ID = next_tHashInput_21.FACTURA_ID;
	row50.NUMERO_FACTURA = next_tHashInput_21.NUMERO_FACTURA;
	row50.VTOTAL = next_tHashInput_21.VTOTAL;
	row50.VINFORMATIVO = next_tHashInput_21.VINFORMATIVO;
	row50.GLOSACAUSADA = next_tHashInput_21.GLOSACAUSADA;
	row50.SIGLA = next_tHashInput_21.SIGLA;

 



/**
 * [tHashInput_21 begin ] stop
 */
	
	/**
	 * [tHashInput_21 main ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 


	tos_count_tHashInput_21++;

/**
 * [tHashInput_21 main ] stop
 */
	
	/**
	 * [tHashInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row50"
									
							);
						}
						
//////////
 

// for output
			row47 = new row47Struct();
								
			row47.ID = row50.ID;								
			row47.RECEPCION_ID = row50.RECEPCION_ID;								
			row47.FACTURA_ID = row50.FACTURA_ID;								
			row47.NUMERO_FACTURA = row50.NUMERO_FACTURA;								
			row47.VTOTAL = row50.VTOTAL;								
			row47.VINFORMATIVO = row50.VINFORMATIVO;								
			row47.GLOSACAUSADA = row50.GLOSACAUSADA;								
			row47.SIGLA = row50.SIGLA;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					



    
		row47Struct oneRow_tHashOutput_19 = new row47Struct();
				
					oneRow_tHashOutput_19.ID = row47.ID;
					oneRow_tHashOutput_19.RECEPCION_ID = row47.RECEPCION_ID;
					oneRow_tHashOutput_19.FACTURA_ID = row47.FACTURA_ID;
					oneRow_tHashOutput_19.NUMERO_FACTURA = row47.NUMERO_FACTURA;
					oneRow_tHashOutput_19.VTOTAL = row47.VTOTAL;
					oneRow_tHashOutput_19.VINFORMATIVO = row47.VINFORMATIVO;
					oneRow_tHashOutput_19.GLOSACAUSADA = row47.GLOSACAUSADA;
					oneRow_tHashOutput_19.SIGLA = row47.SIGLA;
		
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;

 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_21 end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	
    

		
			nb_line_tHashInput_21++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_20");
	


	globalMap.put("tHashInput_21_NB_LINE", nb_line_tHashInput_21);       

 

ok_Hash.put("tHashInput_21", true);
end_Hash.put("tHashInput_21", System.currentTimeMillis());




/**
 * [tHashInput_21 end ] stop
 */
	
	/**
	 * [tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50","row46","row49","row48");
			  	}
			  	
 

ok_Hash.put("tUnite_2", true);
end_Hash.put("tUnite_2", System.currentTimeMillis());




/**
 * [tUnite_2 end ] stop
 */

	
	/**
	 * [tHashOutput_19 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
globalMap.put("tHashOutput_19_NB_LINE", nb_line_tHashOutput_19);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tHashOutput_19", true);
end_Hash.put("tHashOutput_19", System.currentTimeMillis());




/**
 * [tHashOutput_19 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_18:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tHashInput_25Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 finally ] stop
 */
	
	/**
	 * [tHashInput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 finally ] stop
 */
	
	/**
	 * [tHashInput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 finally ] stop
 */
	
	/**
	 * [tHashInput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 finally ] stop
 */
	
	/**
	 * [tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class InsPersonasDfacturaformulacionStruct implements routines.system.IPersistableRow<InsPersonasDfacturaformulacionStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102027\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - GEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final InsPersonasDfacturaformulacionStruct other = (InsPersonasDfacturaformulacionStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(InsPersonasDfacturaformulacionStruct other) {

		other.ID = this.ID;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            
	}

	public void copyKeysDataTo(InsPersonasDfacturaformulacionStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsPersonasDfacturaformulacionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();
InsPersonasDfacturaformulacionStruct InsPersonasDfacturaformulacion = new InsPersonasDfacturaformulacionStruct();





	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsPersonasDfacturaformulacion");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int updateKeyCount_tOracleOutput_3 = 1;
        if(updateKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_3 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 10000;
            int commitCounter_tOracleOutput_3 = 0;
        int batchSize_tOracleOutput_3 = 10000;
        int batchSizeCounter_tOracleOutput_3=0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("ACM_DFACTURAFORMULACION");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("ACM_DFACTURAFORMULACION");
        }
                String update_tOracleOutput_3 = "UPDATE " + tableName_tOracleOutput_3 + " SET PERSONAS_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(update_tOracleOutput_3);
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_7", false);
		start_Hash.put("tMap_7", System.currentTimeMillis());
		
	
	currentComponent="tMap_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tMap_7 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_7__Struct  {
}
Var__tMap_7__Struct Var__tMap_7 = new Var__tMap_7__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsPersonasDfacturaformulacionStruct InsPersonasDfacturaformulacion_tmp = new InsPersonasDfacturaformulacionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_7 begin ] stop
 */



	
	/**
	 * [tHashInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_25", false);
		start_Hash.put("tHashInput_25", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_25";
	
	
		int tos_count_tHashInput_25 = 0;
		


int nb_line_tHashInput_25 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_25=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out14Struct> tHashFile_tHashInput_25 = mf_tHashInput_25.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_16");
if(tHashFile_tHashInput_25==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out14Struct> iterator_tHashInput_25 = tHashFile_tHashInput_25.iterator();
while (iterator_tHashInput_25.hasNext()) {
    out14Struct next_tHashInput_25 = iterator_tHashInput_25.next();

	row25.ID = next_tHashInput_25.ID;
	row25.PERSONAS_ID = next_tHashInput_25.PERSONAS_ID;

 



/**
 * [tHashInput_25 begin ] stop
 */
	
	/**
	 * [tHashInput_25 main ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 


	tos_count_tHashInput_25++;

/**
 * [tHashInput_25 main ] stop
 */
	
	/**
	 * [tHashInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tMap_7 main ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_7 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_7 = false;
		boolean mainRowRejected_tMap_7 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_7__Struct Var = Var__tMap_7;// ###############################
        // ###############################
        // # Output tables

InsPersonasDfacturaformulacion = null;


// # Output table : 'InsPersonasDfacturaformulacion'
InsPersonasDfacturaformulacion_tmp.ID = row25.ID ;
InsPersonasDfacturaformulacion_tmp.PERSONAS_ID = row25.PERSONAS_ID ;
InsPersonasDfacturaformulacion = InsPersonasDfacturaformulacion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_7 = false;










 


	tos_count_tMap_7++;

/**
 * [tMap_7 main ] stop
 */
	
	/**
	 * [tMap_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_begin ] stop
 */
// Start of branch "InsPersonasDfacturaformulacion"
if(InsPersonasDfacturaformulacion != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsPersonasDfacturaformulacion"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    pstmt_tOracleOutput_3.setBigDecimal(1, InsPersonasDfacturaformulacion.PERSONAS_ID);


                    pstmt_tOracleOutput_3.setBigDecimal(2 + count_tOracleOutput_3, InsPersonasDfacturaformulacion.ID);

                pstmt_tOracleOutput_3.addBatch();
                nb_line_tOracleOutput_3++;
                batchSizeCounter_tOracleOutput_3++;
            if (batchSize_tOracleOutput_3 > 0 &&  batchSize_tOracleOutput_3 <= batchSizeCounter_tOracleOutput_3) {
                try {
                    pstmt_tOracleOutput_3.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
			        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
			    	String errormessage_tOracleOutput_3;
					if (ne_tOracleOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
						errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
					}else{
						errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_3);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                    updatedCount_tOracleOutput_3
                += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                batchSizeCounter_tOracleOutput_3 = 0;
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(batchSizeCounter_tOracleOutput_3 > 0) {
                        try {
                            pstmt_tOracleOutput_3.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
					        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
					    	String errormessage_tOracleOutput_3;
							if (ne_tOracleOutput_3 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
								errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
							}else{
								errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_3);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                            updatedCount_tOracleOutput_3
                        += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                        rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                    	batchSizeCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "InsPersonasDfacturaformulacion"




	
	/**
	 * [tMap_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_25 end ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	
    

		
			nb_line_tHashInput_25++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_16");
	


	globalMap.put("tHashInput_25_NB_LINE", nb_line_tHashInput_25);       

 

ok_Hash.put("tHashInput_25", true);
end_Hash.put("tHashInput_25", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tHashInput_2Process(globalMap);



/**
 * [tHashInput_25 end ] stop
 */

	
	/**
	 * [tMap_7 end ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tMap_7", true);
end_Hash.put("tMap_7", System.currentTimeMillis());




/**
 * [tMap_7 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_3 > 0) {
            try {
            	if (pstmt_tOracleOutput_3 != null) {
					
					pstmt_tOracleOutput_3.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
		        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
		    	String errormessage_tOracleOutput_3;
				if (ne_tOracleOutput_3 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
					errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
				}else{
					errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_3);
            	
        	}
        	if (pstmt_tOracleOutput_3 != null) {
            	tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_3
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
				rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
            }
        }
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsPersonasDfacturaformulacion");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_25 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 finally ] stop
 */

	
	/**
	 * [tMap_7 finally ] start
	 */

	

	
	
	currentComponent="tMap_7";
	
	

 



/**
 * [tMap_7 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CANTIDAD;

				public Integer getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CANTIDAD;

				public Integer getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CANTIDAD;

				public Integer getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_2Struct implements routines.system.IPersistableRow<after_tHashInput_2Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_6Process(globalMap);

		row10Struct row10 = new row10Struct();
out10Struct out10 = new out10Struct();
row11Struct row11 = new row11Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out10");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal ID;int count = 0;
       			int CANTIDAD_clmCount = 0;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.ID == null) {
								if (other.ID != null) 
									return false;
							} else if (!this.ID.equals(other.ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out10Struct out10_tmp = new out10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row47Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row47Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row47Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row10.ID = next_tHashInput_2.ID;
	row10.RECEPCION_ID = next_tHashInput_2.RECEPCION_ID;
	row10.FACTURA_ID = next_tHashInput_2.FACTURA_ID;
	row10.NUMERO_FACTURA = next_tHashInput_2.NUMERO_FACTURA;
	row10.VTOTAL = next_tHashInput_2.VTOTAL;
	row10.VINFORMATIVO = next_tHashInput_2.VINFORMATIVO;
	row10.GLOSACAUSADA = next_tHashInput_2.GLOSACAUSADA;
	row10.SIGLA = next_tHashInput_2.SIGLA;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row16Struct row16 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row16HashKey.SIGLA = row10.SIGLA ;
                        		    		
                        		    		    row16HashKey.CAUSALGLOSAS_ID = row10.GLOSACAUSADA ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row16.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out10 = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'out10'
out10_tmp.ID = row10.ID ;
out10_tmp.CANTIDAD = null;
out10 = out10_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out10"
if(out10 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out10"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.ID = out10.ID;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.ID = operation_finder_tAggregateRow_1.ID;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				operation_result_tAggregateRow_1.CANTIDAD_clmCount++;
				operation_result_tAggregateRow_1.count++;
				


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "out10"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out10");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_13", false);
		start_Hash.put("tHashOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_13 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_13 = null;
		String hashKey_tHashOutput_13 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_13";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_13)){
			    if(mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13) == null){
	      		    mf_tHashOutput_13.getResourceMap().put(hashKey_tHashOutput_13, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }else{
			    	tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }
			}
        int nb_line_tHashOutput_13 = 0;

 



/**
 * [tHashOutput_13 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

            				    row11.ID = aggregated_row_tAggregateRow_1.ID;
            				    row11.CANTIDAD = (int) aggregated_row_tAggregateRow_1.count;
	                                	row11.CANTIDAD = (int) aggregated_row_tAggregateRow_1.CANTIDAD_clmCount;
	                                	

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_13 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_13 = new row11Struct();
				
					oneRow_tHashOutput_13.ID = row11.ID;
					oneRow_tHashOutput_13.CANTIDAD = row11.CANTIDAD;
		
        tHashFile_tHashOutput_13.put(oneRow_tHashOutput_13);
        nb_line_tHashOutput_13 ++;

 


	tos_count_tHashOutput_13++;

/**
 * [tHashOutput_13 main ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_13 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	
globalMap.put("tHashOutput_13_NB_LINE", nb_line_tHashOutput_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_13", true);
end_Hash.put("tHashOutput_13", System.currentTimeMillis());




/**
 * [tHashOutput_13 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tHashInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class out17Struct implements routines.system.IPersistableRow<out17Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_6 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_6> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_6 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class FStruct implements routines.system.IPersistableRow<FStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(FStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_3Struct implements routines.system.IPersistableRow<after_tHashInput_3Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return null;
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_4Process(globalMap);
		tHashInput_5Process(globalMap);
		tHashInput_26Process(globalMap);

		row12Struct row12 = new row12Struct();
out11Struct out11 = new out11Struct();
row23Struct row23 = new row23Struct();
out17Struct out17 = new out17Struct();
FStruct F = new FStruct();





	
	/**
	 * [tAggregateRow_6_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGOUT", false);
		start_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out11");
					}
				
		int tos_count_tAggregateRow_6_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_6 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_6 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_6 utilClass_tAggregateRow_6 = new UtilClass_tAggregateRow_6();

	

	class AggOperationStruct_tAggregateRow_6 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal ID;
    				BigDecimal FACTURA_ID;BigDecimal VTOTAL_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
							
							result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_6 other = (AggOperationStruct_tAggregateRow_6) obj;
			
							if (this.ID == null) {
								if (other.ID != null) 
									return false;
							} else if (!this.ID.equals(other.ID)) 
								return false;
						
							if (this.FACTURA_ID == null) {
								if (other.FACTURA_ID != null) 
									return false;
							} else if (!this.FACTURA_ID.equals(other.FACTURA_ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_6 operation_result_tAggregateRow_6 = null;
	AggOperationStruct_tAggregateRow_6 operation_finder_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();
	java.util.Map<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6> hash_tAggregateRow_6 = new java.util.HashMap<AggOperationStruct_tAggregateRow_6,AggOperationStruct_tAggregateRow_6>();
	

 



/**
 * [tAggregateRow_6_AGGOUT begin ] stop
 */




	
	/**
	 * [tHashOutput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_23", false);
		start_Hash.put("tHashOutput_23", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"F");
					}
				
		int tos_count_tHashOutput_23 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_23=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<FStruct> tHashFile_tHashOutput_23 = null;
		String hashKey_tHashOutput_23 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_23";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_23)){
			    if(mf_tHashOutput_23.getResourceMap().get(hashKey_tHashOutput_23) == null){
	      		    mf_tHashOutput_23.getResourceMap().put(hashKey_tHashOutput_23, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<FStruct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_23 = mf_tHashOutput_23.getResourceMap().get(hashKey_tHashOutput_23);
			    }else{
			    	tHashFile_tHashOutput_23 = mf_tHashOutput_23.getResourceMap().get(hashKey_tHashOutput_23);
			    }
			}
        int nb_line_tHashOutput_23 = 0;

 



/**
 * [tHashOutput_23 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out11Struct out11_tmp = new out11Struct();
FStruct F_tmp = new FStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row47Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_19");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row47Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row47Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row12.ID = next_tHashInput_3.ID;
	row12.RECEPCION_ID = next_tHashInput_3.RECEPCION_ID;
	row12.FACTURA_ID = next_tHashInput_3.FACTURA_ID;
	row12.NUMERO_FACTURA = next_tHashInput_3.NUMERO_FACTURA;
	row12.VTOTAL = next_tHashInput_3.VTOTAL;
	row12.VINFORMATIVO = next_tHashInput_3.VINFORMATIVO;
	row12.GLOSACAUSADA = next_tHashInput_3.GLOSACAUSADA;
	row12.SIGLA = next_tHashInput_3.SIGLA;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
						row13Struct row13 = null;
					
						row15Struct row15 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row13HashKey.ID = row12.ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row13.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.ID = '" + row13HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3 = false;
								
                        		    		    row15HashKey.SIGLA = row12.SIGLA ;
                        		    		
                        		    		    row15HashKey.CAUSALGLOSAS_ID = row12.GLOSACAUSADA ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out11 = null;
F = null;

if(!rejectedInnerJoin_tMap_3 ) {

// # Output table : 'out11'
out11_tmp.ID = row12.ID ;
out11_tmp.RECEPCION_ID = row12.RECEPCION_ID ;
out11_tmp.FACTURA_ID = row12.FACTURA_ID ;
out11_tmp.NUMERO_FACTURA = row12.NUMERO_FACTURA ;
out11_tmp.VTOTAL = row13.CANTIDAD == 0 ?  new BigDecimal(1) : Glosamiento.GetGlosamiento(row12.VTOTAL, new BigDecimal(row13.CANTIDAD)) ;
out11_tmp.VINFORMATIVO = row12.VINFORMATIVO ;
out11_tmp.GLOSACAUSADA = row12.GLOSACAUSADA ;
out11_tmp.SIGLA = row12.SIGLA ;
out11 = out11_tmp;

// # Output table : 'F'
F_tmp.ID = row12.ID ;
F_tmp.RECEPCION_ID = row12.RECEPCION_ID ;
F_tmp.FACTURA_ID = row12.FACTURA_ID ;
F_tmp.NUMERO_FACTURA = row12.NUMERO_FACTURA ;
F_tmp.VTOTAL = row13.CANTIDAD == 0 ?  new BigDecimal(1) : Glosamiento.GetGlosamiento(row12.VTOTAL, new BigDecimal(row13.CANTIDAD)) ;
F_tmp.VINFORMATIVO = row12.VINFORMATIVO ;
F_tmp.GLOSACAUSADA = row12.GLOSACAUSADA ;
F_tmp.SIGLA = row12.SIGLA ;
F = F_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tAggregateRow_6_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out11"
						
						);
					}
					
	
operation_finder_tAggregateRow_6.ID = out11.ID;
			operation_finder_tAggregateRow_6.FACTURA_ID = out11.FACTURA_ID;
			

	operation_finder_tAggregateRow_6.hashCodeDirty = true;
	
	operation_result_tAggregateRow_6 = hash_tAggregateRow_6.get(operation_finder_tAggregateRow_6);

	

	if(operation_result_tAggregateRow_6 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_6 = new AggOperationStruct_tAggregateRow_6();

		operation_result_tAggregateRow_6.ID = operation_finder_tAggregateRow_6.ID;
				operation_result_tAggregateRow_6.FACTURA_ID = operation_finder_tAggregateRow_6.FACTURA_ID;
				
		
		

		hash_tAggregateRow_6.put(operation_result_tAggregateRow_6, operation_result_tAggregateRow_6);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_6.VTOTAL_sum == null) {
						operation_result_tAggregateRow_6.VTOTAL_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_6.VTOTAL_sum = operation_result_tAggregateRow_6.VTOTAL_sum.add(
						new BigDecimal(
							String.valueOf(
								out11.VTOTAL
							)
						)
					);
					


 


	tos_count_tAggregateRow_6_AGGOUT++;

/**
 * [tAggregateRow_6_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

 



/**
 * [tAggregateRow_6_AGGOUT process_data_end ] stop
 */

} // End of branch "out11"




// Start of branch "F"
if(F != null) { 



	
	/**
	 * [tHashOutput_23 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"F"
						
						);
					}
					



    
		FStruct oneRow_tHashOutput_23 = new FStruct();
				
					oneRow_tHashOutput_23.ID = F.ID;
					oneRow_tHashOutput_23.RECEPCION_ID = F.RECEPCION_ID;
					oneRow_tHashOutput_23.FACTURA_ID = F.FACTURA_ID;
					oneRow_tHashOutput_23.NUMERO_FACTURA = F.NUMERO_FACTURA;
					oneRow_tHashOutput_23.VTOTAL = F.VTOTAL;
					oneRow_tHashOutput_23.VINFORMATIVO = F.VINFORMATIVO;
					oneRow_tHashOutput_23.GLOSACAUSADA = F.GLOSACAUSADA;
					oneRow_tHashOutput_23.SIGLA = F.SIGLA;
		
        tHashFile_tHashOutput_23.put(oneRow_tHashOutput_23);
        nb_line_tHashOutput_23 ++;

 


	tos_count_tHashOutput_23++;

/**
 * [tHashOutput_23 main ] stop
 */
	
	/**
	 * [tHashOutput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_23";
	
	

 



/**
 * [tHashOutput_23 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_23";
	
	

 



/**
 * [tHashOutput_23 process_data_end ] stop
 */

} // End of branch "F"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_19");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out11");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_6_AGGOUT", true);
end_Hash.put("tAggregateRow_6_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGOUT end ] stop
 */



	
	/**
	 * [tHashOutput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_22", false);
		start_Hash.put("tHashOutput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out17");
					}
				
		int tos_count_tHashOutput_22 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out17Struct> tHashFile_tHashOutput_22 = null;
		String hashKey_tHashOutput_22 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_22";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_22)){
			    if(mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22) == null){
	      		    mf_tHashOutput_22.getResourceMap().put(hashKey_tHashOutput_22, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out17Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }else{
			    	tHashFile_tHashOutput_22 = mf_tHashOutput_22.getResourceMap().get(hashKey_tHashOutput_22);
			    }
			}
        int nb_line_tHashOutput_22 = 0;

 



/**
 * [tHashOutput_22 begin ] stop
 */



	
	/**
	 * [tMap_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_17", false);
		start_Hash.put("tMap_17", System.currentTimeMillis());
		
	
	currentComponent="tMap_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tMap_17 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct> tHash_Lookup_row61 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct>) 
					globalMap.get( "tHash_Lookup_row61" ))
					;					
					
	

row61Struct row61HashKey = new row61Struct();
row61Struct row61Default = new row61Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_17__Struct  {
}
Var__tMap_17__Struct Var__tMap_17 = new Var__tMap_17__Struct();
// ###############################

// ###############################
// # Outputs initialization
out17Struct out17_tmp = new out17Struct();
// ###############################

        
        



        









 



/**
 * [tMap_17 begin ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_6_AGGIN", false);
		start_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	
		int tos_count_tAggregateRow_6_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_6> values_tAggregateRow_6 = hash_tAggregateRow_6.values();

globalMap.put("tAggregateRow_6_NB_LINE", values_tAggregateRow_6.size());

for(AggOperationStruct_tAggregateRow_6 aggregated_row_tAggregateRow_6 : values_tAggregateRow_6) { // G_AggR_600



 



/**
 * [tAggregateRow_6_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

            				    row23.ID = aggregated_row_tAggregateRow_6.ID;
            				    
            				    row23.FACTURA_ID = aggregated_row_tAggregateRow_6.FACTURA_ID;
            				    row23.VTOTAL = aggregated_row_tAggregateRow_6.VTOTAL_sum;
                                	

 


	tos_count_tAggregateRow_6_AGGIN++;

/**
 * [tAggregateRow_6_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

 



/**
 * [tAggregateRow_6_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_17 main ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_17 = false;
		
						row61Struct row61 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_17 = false;
		boolean mainRowRejected_tMap_17 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row61" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow61 = false;
       		  	    	
       		  	    	
 							row61Struct row61ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_17) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_17 = false;
								
                        		    		    row61HashKey.ID = row23.ID ;
                        		    		
                        		    		    row61HashKey.FACTURA_ID = row23.FACTURA_ID ;
                        		    		

								
		                        	row61HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row61.lookup( row61HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row61Struct fromLookup_row61 = null;
							row61 = row61Default;
										 
							
								 
							
							
								if (tHash_Lookup_row61 !=null && tHash_Lookup_row61.hasNext()) { // G 099
								
							
								
								fromLookup_row61 = tHash_Lookup_row61.next();

							
							
								} // G 099
							
							

							if(fromLookup_row61 != null) {
								row61 = fromLookup_row61;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_17__Struct Var = Var__tMap_17;// ###############################
        // ###############################
        // # Output tables

out17 = null;


// # Output table : 'out17'
out17_tmp.ID = row23.ID ;
out17_tmp.FACTURA_ID = row23.FACTURA_ID ;
out17_tmp.NUMERO_FACTURA = row23.NUMERO_FACTURA ;
out17_tmp.VTOTAL = Glosamiento.GetDecimal(row61.VTOTAL, row23.VTOTAL) ;
out17 = out17_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_17 = false;










 


	tos_count_tMap_17++;

/**
 * [tMap_17 main ] stop
 */
	
	/**
	 * [tMap_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_begin ] stop
 */
// Start of branch "out17"
if(out17 != null) { 



	
	/**
	 * [tHashOutput_22 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out17"
						
						);
					}
					



    
		out17Struct oneRow_tHashOutput_22 = new out17Struct();
				
					oneRow_tHashOutput_22.ID = out17.ID;
					oneRow_tHashOutput_22.FACTURA_ID = out17.FACTURA_ID;
					oneRow_tHashOutput_22.NUMERO_FACTURA = out17.NUMERO_FACTURA;
					oneRow_tHashOutput_22.VTOTAL = out17.VTOTAL;
		
        tHashFile_tHashOutput_22.put(oneRow_tHashOutput_22);
        nb_line_tHashOutput_22 ++;

 


	tos_count_tHashOutput_22++;

/**
 * [tHashOutput_22 main ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	

 



/**
 * [tHashOutput_22 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	

 



/**
 * [tHashOutput_22 process_data_end ] stop
 */

} // End of branch "out17"




	
	/**
	 * [tMap_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_6_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

 



/**
 * [tAggregateRow_6_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_6_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_6_AGGIN", true);
end_Hash.put("tAggregateRow_6_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_6_AGGIN end ] stop
 */

	
	/**
	 * [tMap_17 end ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row61 != null) {
						tHash_Lookup_row61.endGet();
					}
					globalMap.remove( "tHash_Lookup_row61" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tMap_17", true);
end_Hash.put("tMap_17", System.currentTimeMillis());




/**
 * [tMap_17 end ] stop
 */

	
	/**
	 * [tHashOutput_22 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	
globalMap.put("tHashOutput_22_NB_LINE", nb_line_tHashOutput_22);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out17");
			  	}
			  	
 

ok_Hash.put("tHashOutput_22", true);
end_Hash.put("tHashOutput_22", System.currentTimeMillis());




/**
 * [tHashOutput_22 end ] stop
 */













	
	/**
	 * [tHashOutput_23 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_23";
	
	
globalMap.put("tHashOutput_23_NB_LINE", nb_line_tHashOutput_23);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"F");
			  	}
			  	
 

ok_Hash.put("tHashOutput_23", true);
end_Hash.put("tHashOutput_23", System.currentTimeMillis());




/**
 * [tHashOutput_23 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tHashInput_27Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_17"
					     			globalMap.remove("tHash_Lookup_row61"); 
				     			
							//free memory for "tAggregateRow_6_AGGIN"
							globalMap.remove("tAggregateRow_6");
						
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_3"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGOUT";
	
	

 



/**
 * [tAggregateRow_6_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_6_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_6";
	
	currentComponent="tAggregateRow_6_AGGIN";
	
	

 



/**
 * [tAggregateRow_6_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_17 finally ] start
	 */

	

	
	
	currentComponent="tMap_17";
	
	

 



/**
 * [tMap_17 finally ] stop
 */

	
	/**
	 * [tHashOutput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_22";
	
	

 



/**
 * [tHashOutput_22 finally ] stop
 */













	
	/**
	 * [tHashOutput_23 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_23";
	
	

 



/**
 * [tHashOutput_23 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class out19Struct implements routines.system.IPersistableRow<out19Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row64Struct implements routines.system.IPersistableRow<row64Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row64Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_27Struct implements routines.system.IPersistableRow<after_tHashInput_27Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_27Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_27_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_28Process(globalMap);

		row64Struct row64 = new row64Struct();
out19Struct out19 = new out19Struct();





	
	/**
	 * [tHashOutput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_24", false);
		start_Hash.put("tHashOutput_24", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_24";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out19");
					}
				
		int tos_count_tHashOutput_24 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_24=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out19Struct> tHashFile_tHashOutput_24 = null;
		String hashKey_tHashOutput_24 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_24";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_24)){
			    if(mf_tHashOutput_24.getResourceMap().get(hashKey_tHashOutput_24) == null){
	      		    mf_tHashOutput_24.getResourceMap().put(hashKey_tHashOutput_24, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out19Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_24 = mf_tHashOutput_24.getResourceMap().get(hashKey_tHashOutput_24);
			    }else{
			    	tHashFile_tHashOutput_24 = mf_tHashOutput_24.getResourceMap().get(hashKey_tHashOutput_24);
			    }
			}
        int nb_line_tHashOutput_24 = 0;

 



/**
 * [tHashOutput_24 begin ] stop
 */



	
	/**
	 * [tMap_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_18", false);
		start_Hash.put("tMap_18", System.currentTimeMillis());
		
	
	currentComponent="tMap_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row64");
					}
				
		int tos_count_tMap_18 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct> tHash_Lookup_row65 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct>) 
					globalMap.get( "tHash_Lookup_row65" ))
					;					
					
	

row65Struct row65HashKey = new row65Struct();
row65Struct row65Default = new row65Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_18__Struct  {
}
Var__tMap_18__Struct Var__tMap_18 = new Var__tMap_18__Struct();
// ###############################

// ###############################
// # Outputs initialization
out19Struct out19_tmp = new out19Struct();
// ###############################

        
        



        









 



/**
 * [tMap_18 begin ] stop
 */



	
	/**
	 * [tHashInput_27 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_27", false);
		start_Hash.put("tHashInput_27", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_27";
	
	
		int tos_count_tHashInput_27 = 0;
		


int nb_line_tHashInput_27 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_27=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out17Struct> tHashFile_tHashInput_27 = mf_tHashInput_27.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_22");
if(tHashFile_tHashInput_27==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out17Struct> iterator_tHashInput_27 = tHashFile_tHashInput_27.iterator();
while (iterator_tHashInput_27.hasNext()) {
    out17Struct next_tHashInput_27 = iterator_tHashInput_27.next();

	row64.ID = next_tHashInput_27.ID;
	row64.FACTURA_ID = next_tHashInput_27.FACTURA_ID;
	row64.NUMERO_FACTURA = next_tHashInput_27.NUMERO_FACTURA;
	row64.VTOTAL = next_tHashInput_27.VTOTAL;

 



/**
 * [tHashInput_27 begin ] stop
 */
	
	/**
	 * [tHashInput_27 main ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 


	tos_count_tHashInput_27++;

/**
 * [tHashInput_27 main ] stop
 */
	
	/**
	 * [tHashInput_27 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 



/**
 * [tHashInput_27 process_data_begin ] stop
 */

	
	/**
	 * [tMap_18 main ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row64"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_18 = false;
		
						row65Struct row65 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_18 = false;
		boolean mainRowRejected_tMap_18 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row65" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow65 = false;
       		  	    	
       		  	    	
 							row65Struct row65ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_18) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_18 = false;
								
                        		    		    row65HashKey.ID = row64.ID ;
                        		    		
                        		    		    row65HashKey.FACTURA_ID = row64.FACTURA_ID ;
                        		    		

								
		                        	row65HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row65.lookup( row65HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row65Struct fromLookup_row65 = null;
							row65 = row65Default;
										 
							
								 
							
							
								if (tHash_Lookup_row65 !=null && tHash_Lookup_row65.hasNext()) { // G 099
								
							
								
								fromLookup_row65 = tHash_Lookup_row65.next();

							
							
								} // G 099
							
							

							if(fromLookup_row65 != null) {
								row65 = fromLookup_row65;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_18__Struct Var = Var__tMap_18;// ###############################
        // ###############################
        // # Output tables

out19 = null;


// # Output table : 'out19'
out19_tmp.ID = row65.ID ;
out19_tmp.RECEPCION_ID = row65.RECEPCION_ID ;
out19_tmp.FACTURA_ID = row65.FACTURA_ID ;
out19_tmp.NUMERO_FACTURA = row65.NUMERO_FACTURA ;
out19_tmp.VTOTAL = row65.VTOTAL.add(row64.VTOTAL) ;
out19_tmp.VINFORMATIVO = row65.VINFORMATIVO ;
out19_tmp.GLOSACAUSADA = row65.GLOSACAUSADA ;
out19_tmp.SIGLA = row65.SIGLA ;
out19 = out19_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_18 = false;










 


	tos_count_tMap_18++;

/**
 * [tMap_18 main ] stop
 */
	
	/**
	 * [tMap_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_begin ] stop
 */
// Start of branch "out19"
if(out19 != null) { 



	
	/**
	 * [tHashOutput_24 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_24";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out19"
						
						);
					}
					



    
		out19Struct oneRow_tHashOutput_24 = new out19Struct();
				
					oneRow_tHashOutput_24.ID = out19.ID;
					oneRow_tHashOutput_24.RECEPCION_ID = out19.RECEPCION_ID;
					oneRow_tHashOutput_24.FACTURA_ID = out19.FACTURA_ID;
					oneRow_tHashOutput_24.NUMERO_FACTURA = out19.NUMERO_FACTURA;
					oneRow_tHashOutput_24.VTOTAL = out19.VTOTAL;
					oneRow_tHashOutput_24.VINFORMATIVO = out19.VINFORMATIVO;
					oneRow_tHashOutput_24.GLOSACAUSADA = out19.GLOSACAUSADA;
					oneRow_tHashOutput_24.SIGLA = out19.SIGLA;
		
        tHashFile_tHashOutput_24.put(oneRow_tHashOutput_24);
        nb_line_tHashOutput_24 ++;

 


	tos_count_tHashOutput_24++;

/**
 * [tHashOutput_24 main ] stop
 */
	
	/**
	 * [tHashOutput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_24";
	
	

 



/**
 * [tHashOutput_24 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_24";
	
	

 



/**
 * [tHashOutput_24 process_data_end ] stop
 */

} // End of branch "out19"




	
	/**
	 * [tMap_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_27 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 



/**
 * [tHashInput_27 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_27 end ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	
    

		
			nb_line_tHashInput_27++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_22");
	


	globalMap.put("tHashInput_27_NB_LINE", nb_line_tHashInput_27);       

 

ok_Hash.put("tHashInput_27", true);
end_Hash.put("tHashInput_27", System.currentTimeMillis());




/**
 * [tHashInput_27 end ] stop
 */

	
	/**
	 * [tMap_18 end ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row65 != null) {
						tHash_Lookup_row65.endGet();
					}
					globalMap.remove( "tHash_Lookup_row65" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row64");
			  	}
			  	
 

ok_Hash.put("tMap_18", true);
end_Hash.put("tMap_18", System.currentTimeMillis());




/**
 * [tMap_18 end ] stop
 */

	
	/**
	 * [tHashOutput_24 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_24";
	
	
globalMap.put("tHashOutput_24_NB_LINE", nb_line_tHashOutput_24);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out19");
			  	}
			  	
 

ok_Hash.put("tHashOutput_24", true);
end_Hash.put("tHashOutput_24", System.currentTimeMillis());




/**
 * [tHashOutput_24 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_27:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk27", 0, "ok");
								} 
							
							tHashInput_29Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_18"
					     			globalMap.remove("tHash_Lookup_row65"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_27 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_27";
	
	

 



/**
 * [tHashInput_27 finally ] stop
 */

	
	/**
	 * [tMap_18 finally ] start
	 */

	

	
	
	currentComponent="tMap_18";
	
	

 



/**
 * [tMap_18 finally ] stop
 */

	
	/**
	 * [tHashOutput_24 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_24";
	
	

 



/**
 * [tHashOutput_24 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_27_SUBPROCESS_STATE", 1);
	}
	


public static class out20Struct implements routines.system.IPersistableRow<out20Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row66Struct implements routines.system.IPersistableRow<row66Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row66Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_29Struct implements routines.system.IPersistableRow<after_tHashInput_29Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_29Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_29Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_29_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_30Process(globalMap);

		row66Struct row66 = new row66Struct();
out20Struct out20 = new out20Struct();





	
	/**
	 * [tHashOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_14", false);
		start_Hash.put("tHashOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out20");
					}
				
		int tos_count_tHashOutput_14 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out20Struct> tHashFile_tHashOutput_14 = null;
		String hashKey_tHashOutput_14 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_14";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_14)){
			    if(mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14) == null){
	      		    mf_tHashOutput_14.getResourceMap().put(hashKey_tHashOutput_14, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out20Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }else{
			    	tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }
			}
        int nb_line_tHashOutput_14 = 0;

 



/**
 * [tHashOutput_14 begin ] stop
 */



	
	/**
	 * [tMap_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_21", false);
		start_Hash.put("tMap_21", System.currentTimeMillis());
		
	
	currentComponent="tMap_21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row66");
					}
				
		int tos_count_tMap_21 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct> tHash_Lookup_row67 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct>) 
					globalMap.get( "tHash_Lookup_row67" ))
					;					
					
	

row67Struct row67HashKey = new row67Struct();
row67Struct row67Default = new row67Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_21__Struct  {
}
Var__tMap_21__Struct Var__tMap_21 = new Var__tMap_21__Struct();
// ###############################

// ###############################
// # Outputs initialization
out20Struct out20_tmp = new out20Struct();
// ###############################

        
        



        









 



/**
 * [tMap_21 begin ] stop
 */



	
	/**
	 * [tHashInput_29 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_29", false);
		start_Hash.put("tHashInput_29", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_29";
	
	
		int tos_count_tHashInput_29 = 0;
		


int nb_line_tHashInput_29 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_29=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<FStruct> tHashFile_tHashInput_29 = mf_tHashInput_29.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_23");
if(tHashFile_tHashInput_29==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<FStruct> iterator_tHashInput_29 = tHashFile_tHashInput_29.iterator();
while (iterator_tHashInput_29.hasNext()) {
    FStruct next_tHashInput_29 = iterator_tHashInput_29.next();

	row66.ID = next_tHashInput_29.ID;
	row66.RECEPCION_ID = next_tHashInput_29.RECEPCION_ID;
	row66.FACTURA_ID = next_tHashInput_29.FACTURA_ID;
	row66.NUMERO_FACTURA = next_tHashInput_29.NUMERO_FACTURA;
	row66.VTOTAL = next_tHashInput_29.VTOTAL;
	row66.VINFORMATIVO = next_tHashInput_29.VINFORMATIVO;
	row66.GLOSACAUSADA = next_tHashInput_29.GLOSACAUSADA;
	row66.SIGLA = next_tHashInput_29.SIGLA;

 



/**
 * [tHashInput_29 begin ] stop
 */
	
	/**
	 * [tHashInput_29 main ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 


	tos_count_tHashInput_29++;

/**
 * [tHashInput_29 main ] stop
 */
	
	/**
	 * [tHashInput_29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 



/**
 * [tHashInput_29 process_data_begin ] stop
 */

	
	/**
	 * [tMap_21 main ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row66"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_21 = false;
		
						row67Struct row67 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_21 = false;
		boolean mainRowRejected_tMap_21 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row67" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow67 = false;
       		  	    	
       		  	    	
 							row67Struct row67ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_21) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_21 = false;
								
                        		    		    row67HashKey.ID = row66.ID ;
                        		    		
                        		    		    row67HashKey.FACTURA_ID = row66.FACTURA_ID ;
                        		    		
                        		    		    row67HashKey.GLOSACAUSADA = row66.GLOSACAUSADA ;
                        		    		
                        		    		    row67HashKey.SIGLA = row66.SIGLA ;
                        		    		

								
		                        	row67HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row67.lookup( row67HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row67Struct fromLookup_row67 = null;
							row67 = row67Default;
										 
							
								 
							
							
								if (tHash_Lookup_row67 !=null && tHash_Lookup_row67.hasNext()) { // G 099
								
							
								
								fromLookup_row67 = tHash_Lookup_row67.next();

							
							
								} // G 099
							
							

							if(fromLookup_row67 != null) {
								row67 = fromLookup_row67;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_21__Struct Var = Var__tMap_21;// ###############################
        // ###############################
        // # Output tables

out20 = null;


// # Output table : 'out20'
out20_tmp.ID = row66.ID ;
out20_tmp.RECEPCION_ID = row66.RECEPCION_ID ;
out20_tmp.FACTURA_ID = row66.FACTURA_ID ;
out20_tmp.NUMERO_FACTURA = row66.NUMERO_FACTURA ;
out20_tmp.VTOTAL = (row67.VTOTAL != null)? row67.VTOTAL.doubleValue() : row66.VTOTAL.doubleValue() ;
out20_tmp.VINFORMATIVO = row66.VINFORMATIVO ;
out20_tmp.GLOSACAUSADA = row66.GLOSACAUSADA ;
out20_tmp.SIGLA = row66.SIGLA ;
out20 = out20_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_21 = false;










 


	tos_count_tMap_21++;

/**
 * [tMap_21 main ] stop
 */
	
	/**
	 * [tMap_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_begin ] stop
 */
// Start of branch "out20"
if(out20 != null) { 



	
	/**
	 * [tHashOutput_14 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out20"
						
						);
					}
					



    
		out20Struct oneRow_tHashOutput_14 = new out20Struct();
				
					oneRow_tHashOutput_14.ID = out20.ID;
					oneRow_tHashOutput_14.RECEPCION_ID = out20.RECEPCION_ID;
					oneRow_tHashOutput_14.FACTURA_ID = out20.FACTURA_ID;
					oneRow_tHashOutput_14.NUMERO_FACTURA = out20.NUMERO_FACTURA;
					oneRow_tHashOutput_14.VTOTAL = out20.VTOTAL;
					oneRow_tHashOutput_14.VINFORMATIVO = out20.VINFORMATIVO;
					oneRow_tHashOutput_14.GLOSACAUSADA = out20.GLOSACAUSADA;
					oneRow_tHashOutput_14.SIGLA = out20.SIGLA;
		
        tHashFile_tHashOutput_14.put(oneRow_tHashOutput_14);
        nb_line_tHashOutput_14 ++;

 


	tos_count_tHashOutput_14++;

/**
 * [tHashOutput_14 main ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 process_data_end ] stop
 */

} // End of branch "out20"




	
	/**
	 * [tMap_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_29 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 



/**
 * [tHashInput_29 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_29 end ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	
    

		
			nb_line_tHashInput_29++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_23");
	


	globalMap.put("tHashInput_29_NB_LINE", nb_line_tHashInput_29);       

 

ok_Hash.put("tHashInput_29", true);
end_Hash.put("tHashInput_29", System.currentTimeMillis());




/**
 * [tHashInput_29 end ] stop
 */

	
	/**
	 * [tMap_21 end ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row67 != null) {
						tHash_Lookup_row67.endGet();
					}
					globalMap.remove( "tHash_Lookup_row67" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row66");
			  	}
			  	
 

ok_Hash.put("tMap_21", true);
end_Hash.put("tMap_21", System.currentTimeMillis());




/**
 * [tMap_21 end ] stop
 */

	
	/**
	 * [tHashOutput_14 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	
globalMap.put("tHashOutput_14_NB_LINE", nb_line_tHashOutput_14);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out20");
			  	}
			  	
 

ok_Hash.put("tHashOutput_14", true);
end_Hash.put("tHashOutput_14", System.currentTimeMillis());




/**
 * [tHashOutput_14 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_29:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk28", 0, "ok");
								} 
							
							tHashInput_9Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_21"
					     			globalMap.remove("tHash_Lookup_row67"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_29 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_29";
	
	

 



/**
 * [tHashInput_29 finally ] stop
 */

	
	/**
	 * [tMap_21 finally ] start
	 */

	

	
	
	currentComponent="tMap_21";
	
	

 



/**
 * [tMap_21 finally ] stop
 */

	
	/**
	 * [tHashOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_29_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
			        this.VTOTAL = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
			        this.VTOTAL = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
			        this.VTOTAL = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
			        this.VTOTAL = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class copyOfout10Struct implements routines.system.IPersistableRow<copyOfout10Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
			        this.VTOTAL = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
			        this.VTOTAL = dis.readDouble();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_9Struct implements routines.system.IPersistableRow<after_tHashInput_9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_17Process(globalMap);

		row19Struct row19 = new row19Struct();
copyOfout10Struct copyOfout10 = new copyOfout10Struct();
row20Struct row20 = new row20Struct();





	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout10");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal SUMA_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct>) 
					globalMap.get( "tHash_Lookup_row44" ))
					;					
					
	

row44Struct row44HashKey = new row44Struct();
row44Struct row44Default = new row44Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout10Struct copyOfout10_tmp = new copyOfout10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";
	
	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out20Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out20Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    out20Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row19.ID = next_tHashInput_9.ID;
	row19.RECEPCION_ID = next_tHashInput_9.RECEPCION_ID;
	row19.FACTURA_ID = next_tHashInput_9.FACTURA_ID;
	row19.NUMERO_FACTURA = next_tHashInput_9.NUMERO_FACTURA;
	row19.VTOTAL = next_tHashInput_9.VTOTAL;
	row19.VINFORMATIVO = next_tHashInput_9.VINFORMATIVO;
	row19.GLOSACAUSADA = next_tHashInput_9.GLOSACAUSADA;
	row19.SIGLA = next_tHashInput_9.SIGLA;

 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row44Struct row44 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row44" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow44 = false;
       		  	    	
       		  	    	
 							row44Struct row44ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row44HashKey.SIGLA = row19.SIGLA ;
                        		    		
                        		    		    row44HashKey.CAUSALGLOSAS_ID = row19.GLOSACAUSADA ;
                        		    		

								
		                        	row44HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row44.lookup( row44HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row44.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_4 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row44Struct fromLookup_row44 = null;
							row44 = row44Default;
										 
							
								 
							
							
								if (tHash_Lookup_row44 !=null && tHash_Lookup_row44.hasNext()) { // G 099
								
							
								
								fromLookup_row44 = tHash_Lookup_row44.next();

							
							
								} // G 099
							
							

							if(fromLookup_row44 != null) {
								row44 = fromLookup_row44;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

copyOfout10 = null;

if(!rejectedInnerJoin_tMap_4 ) {

// # Output table : 'copyOfout10'
copyOfout10_tmp.SUMA = null;
copyOfout10_tmp.VTOTAL = row19.VTOTAL ;
copyOfout10 = copyOfout10_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "copyOfout10"
if(copyOfout10 != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout10"
						
						);
					}
					
	


	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_2.SUMA_sum == null) {
						operation_result_tAggregateRow_2.SUMA_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_2.SUMA_sum = operation_result_tAggregateRow_2.SUMA_sum.add(
						new BigDecimal(
							String.valueOf(
								copyOfout10.VTOTAL
							)
						)
					);
					


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "copyOfout10"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row44 != null) {
						tHash_Lookup_row44.endGet();
					}
					globalMap.remove( "tHash_Lookup_row44" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout10");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

    								if(aggregated_row_tAggregateRow_2.SUMA_sum != null) {
    								row20.SUMA = aggregated_row_tAggregateRow_2.SUMA_sum.doubleValue();
										
    								}else{
    								
    									row20.SUMA = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.SumaGlosas = row20.SUMA ;
System.out.println("Sumatoria - Glosas: " + context.SumaGlosas);

    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_9:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tHashInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row44"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_5 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_5> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_5 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_3 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_3> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_3 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out15Struct implements routines.system.IPersistableRow<out15Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out16Struct implements routines.system.IPersistableRow<out16Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal VALOR_FACTURA;

				public BigDecimal getVALOR_FACTURA () {
					return this.VALOR_FACTURA;
				}

				public Boolean VALOR_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VALOR_FACTURAIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURALength(){
				    return null;
				}
				public Integer VALOR_FACTURAPrecision(){
				    return null;
				}
				public String VALOR_FACTURADefault(){
				
					return "";
				
				}
				public String VALOR_FACTURAComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURAPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURAOriginalDbColumnName(){
				
					return "VALOR_FACTURA";
				
				}

				
			    public BigDecimal VCALCULADO_FACTURA;

				public BigDecimal getVCALCULADO_FACTURA () {
					return this.VCALCULADO_FACTURA;
				}

				public Boolean VCALCULADO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VCALCULADO_FACTURAIsKey(){
				    return false;
				}
				public Integer VCALCULADO_FACTURALength(){
				    return null;
				}
				public Integer VCALCULADO_FACTURAPrecision(){
				    return null;
				}
				public String VCALCULADO_FACTURADefault(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAComment(){
				
				    return "";
				
				}
				public String VCALCULADO_FACTURAPattern(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAOriginalDbColumnName(){
				
					return "VCALCULADO_FACTURA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return false;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return null;
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return null;
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID1;

				public BigDecimal getDFORMMEDINSUMOS_ID1 () {
					return this.DFORMMEDINSUMOS_ID1;
				}

				public Boolean DFORMMEDINSUMOS_ID1IsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_ID1IsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_ID1Length(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_ID1Precision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_ID1Default(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Comment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Pattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1OriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FVENCIMIENTO_SALUDSIS;

				public java.util.Date getFVENCIMIENTO_SALUDSIS () {
					return this.FVENCIMIENTO_SALUDSIS;
				}

				public Boolean FVENCIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FVENCIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FVENCIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FVENCIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FVENCIMIENTO_SALUDSIS";
				
				}

				
			    public java.util.Date FMOVIMIENTO_SALUDSIS;

				public java.util.Date getFMOVIMIENTO_SALUDSIS () {
					return this.FMOVIMIENTO_SALUDSIS;
				}

				public Boolean FMOVIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FMOVIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FMOVIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FMOVIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FMOVIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FMOVIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FMOVIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FMOVIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FMOVIMIENTO_SALUDSIS";
				
				}

				
			    public BigDecimal CANTIDAD_SALUDSIS;

				public BigDecimal getCANTIDAD_SALUDSIS () {
					return this.CANTIDAD_SALUDSIS;
				}

				public Boolean CANTIDAD_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_SALUDSISIsKey(){
				    return false;
				}
				public Integer CANTIDAD_SALUDSISLength(){
				    return null;
				}
				public Integer CANTIDAD_SALUDSISPrecision(){
				    return null;
				}
				public String CANTIDAD_SALUDSISDefault(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISComment(){
				
				    return "";
				
				}
				public String CANTIDAD_SALUDSISPattern(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISOriginalDbColumnName(){
				
					return "CANTIDAD_SALUDSIS";
				
				}

				
			    public Integer VINTERMEDIACION;

				public Integer getVINTERMEDIACION () {
					return this.VINTERMEDIACION;
				}

				public Boolean VINTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VINTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VINTERMEDIACIONLength(){
				    return null;
				}
				public Integer VINTERMEDIACIONPrecision(){
				    return null;
				}
				public String VINTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VINTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String VINTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VINTERMEDIACIONOriginalDbColumnName(){
				
					return "VINTERMEDIACION";
				
				}

				
			    public BigDecimal VCALCULADO_TOTAL;

				public BigDecimal getVCALCULADO_TOTAL () {
					return this.VCALCULADO_TOTAL;
				}

				public Boolean VCALCULADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean VCALCULADO_TOTALIsKey(){
				    return false;
				}
				public Integer VCALCULADO_TOTALLength(){
				    return null;
				}
				public Integer VCALCULADO_TOTALPrecision(){
				    return null;
				}
				public String VCALCULADO_TOTALDefault(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALComment(){
				
				    return "";
				
				}
				public String VCALCULADO_TOTALPattern(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALOriginalDbColumnName(){
				
					return "VCALCULADO_TOTAL";
				
				}

				
			    public Integer BANDERA_TOTAL;

				public Integer getBANDERA_TOTAL () {
					return this.BANDERA_TOTAL;
				}

				public Boolean BANDERA_TOTALIsNullable(){
				    return true;
				}
				public Boolean BANDERA_TOTALIsKey(){
				    return false;
				}
				public Integer BANDERA_TOTALLength(){
				    return null;
				}
				public Integer BANDERA_TOTALPrecision(){
				    return null;
				}
				public String BANDERA_TOTALDefault(){
				
					return "";
				
				}
				public String BANDERA_TOTALComment(){
				
				    return "";
				
				}
				public String BANDERA_TOTALPattern(){
				
					return "";
				
				}
				public String BANDERA_TOTALOriginalDbColumnName(){
				
					return "BANDERA_TOTAL";
				
				}

				
			    public Integer BANDERA_PORCENTAJE;

				public Integer getBANDERA_PORCENTAJE () {
					return this.BANDERA_PORCENTAJE;
				}

				public Boolean BANDERA_PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean BANDERA_PORCENTAJEIsKey(){
				    return false;
				}
				public Integer BANDERA_PORCENTAJELength(){
				    return null;
				}
				public Integer BANDERA_PORCENTAJEPrecision(){
				    return null;
				}
				public String BANDERA_PORCENTAJEDefault(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEComment(){
				
				    return "";
				
				}
				public String BANDERA_PORCENTAJEPattern(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEOriginalDbColumnName(){
				
					return "BANDERA_PORCENTAJE";
				
				}

				
			    public BigDecimal CANTENTREGADA_ANTERIOR;

				public BigDecimal getCANTENTREGADA_ANTERIOR () {
					return this.CANTENTREGADA_ANTERIOR;
				}

				public Boolean CANTENTREGADA_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean CANTENTREGADA_ANTERIORIsKey(){
				    return false;
				}
				public Integer CANTENTREGADA_ANTERIORLength(){
				    return null;
				}
				public Integer CANTENTREGADA_ANTERIORPrecision(){
				    return null;
				}
				public String CANTENTREGADA_ANTERIORDefault(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIORComment(){
				
				    return "";
				
				}
				public String CANTENTREGADA_ANTERIORPattern(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIOROriginalDbColumnName(){
				
					return "CANTENTREGADA_ANTERIOR";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.VALOR_FACTURA = (BigDecimal) dis.readObject();
					
						this.VCALCULADO_FACTURA = (BigDecimal) dis.readObject();
					
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID1 = (BigDecimal) dis.readObject();
					
					this.FVENCIMIENTO_SALUDSIS = readDate(dis);
					
					this.FMOVIMIENTO_SALUDSIS = readDate(dis);
					
						this.CANTIDAD_SALUDSIS = (BigDecimal) dis.readObject();
					
						this.VINTERMEDIACION = readInteger(dis);
					
						this.VCALCULADO_TOTAL = (BigDecimal) dis.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis);
					
						this.BANDERA_PORCENTAJE = readInteger(dis);
					
						this.CANTENTREGADA_ANTERIOR = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO_SALUDSIS,dos);
					
					// java.util.Date
				
						writeDate(this.FMOVIMIENTO_SALUDSIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD_SALUDSIS);
					
					// Integer
				
						writeInteger(this.VINTERMEDIACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO_TOTAL);
					
					// Integer
				
						writeInteger(this.BANDERA_TOTAL,dos);
					
					// Integer
				
						writeInteger(this.BANDERA_PORCENTAJE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR_FACTURA="+String.valueOf(VALOR_FACTURA));
		sb.append(",VCALCULADO_FACTURA="+String.valueOf(VCALCULADO_FACTURA));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",DFORMMEDINSUMOS_ID1="+String.valueOf(DFORMMEDINSUMOS_ID1));
		sb.append(",FVENCIMIENTO_SALUDSIS="+String.valueOf(FVENCIMIENTO_SALUDSIS));
		sb.append(",FMOVIMIENTO_SALUDSIS="+String.valueOf(FMOVIMIENTO_SALUDSIS));
		sb.append(",CANTIDAD_SALUDSIS="+String.valueOf(CANTIDAD_SALUDSIS));
		sb.append(",VINTERMEDIACION="+String.valueOf(VINTERMEDIACION));
		sb.append(",VCALCULADO_TOTAL="+String.valueOf(VCALCULADO_TOTAL));
		sb.append(",BANDERA_TOTAL="+String.valueOf(BANDERA_TOTAL));
		sb.append(",BANDERA_PORCENTAJE="+String.valueOf(BANDERA_PORCENTAJE));
		sb.append(",CANTENTREGADA_ANTERIOR="+String.valueOf(CANTENTREGADA_ANTERIOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();
out15Struct out15 = new out15Struct();
row18Struct row18 = new row18Struct();
out16Struct out16 = new out16Struct();
row51Struct row51 = new row51Struct();





	
	/**
	 * [tAggregateRow_3_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGOUT", false);
		start_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out15");
					}
				
		int tos_count_tAggregateRow_3_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_3 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_3 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_3 utilClass_tAggregateRow_3 = new UtilClass_tAggregateRow_3();

	

	class AggOperationStruct_tAggregateRow_3 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal SUMA_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_3 other = (AggOperationStruct_tAggregateRow_3) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_3 operation_result_tAggregateRow_3 = null;
	AggOperationStruct_tAggregateRow_3 operation_finder_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();
	java.util.Map<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3> hash_tAggregateRow_3 = new java.util.HashMap<AggOperationStruct_tAggregateRow_3,AggOperationStruct_tAggregateRow_3>();
	

 



/**
 * [tAggregateRow_3_AGGOUT begin ] stop
 */




	
	/**
	 * [tAggregateRow_5_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGOUT", false);
		start_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out16");
					}
				
		int tos_count_tAggregateRow_5_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_5 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_5 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_5 utilClass_tAggregateRow_5 = new UtilClass_tAggregateRow_5();

	

	class AggOperationStruct_tAggregateRow_5 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal FACTURA_ID;BigDecimal SUMA_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_5 other = (AggOperationStruct_tAggregateRow_5) obj;
			
							if (this.FACTURA_ID == null) {
								if (other.FACTURA_ID != null) 
									return false;
							} else if (!this.FACTURA_ID.equals(other.FACTURA_ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_5 operation_result_tAggregateRow_5 = null;
	AggOperationStruct_tAggregateRow_5 operation_finder_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();
	java.util.Map<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5> hash_tAggregateRow_5 = new java.util.HashMap<AggOperationStruct_tAggregateRow_5,AggOperationStruct_tAggregateRow_5>();
	

 



/**
 * [tAggregateRow_5_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_13", false);
		start_Hash.put("tMap_13", System.currentTimeMillis());
		
	
	currentComponent="tMap_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_13 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_13__Struct  {
}
Var__tMap_13__Struct Var__tMap_13 = new Var__tMap_13__Struct();
// ###############################

// ###############################
// # Outputs initialization
out15Struct out15_tmp = new out15Struct();
out16Struct out16_tmp = new out16Struct();
// ###############################

        
        



        









 



/**
 * [tMap_13 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row2Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row17.VALOR_FACTURA = next_tHashInput_7.VALOR_FACTURA;
	row17.VCALCULADO_FACTURA = next_tHashInput_7.VCALCULADO_FACTURA;
	row17.ID = next_tHashInput_7.ID;
	row17.RECEPCION_ID = next_tHashInput_7.RECEPCION_ID;
	row17.FACTURA_ID = next_tHashInput_7.FACTURA_ID;
	row17.PREFIJO = next_tHashInput_7.PREFIJO;
	row17.NUMERO_FACTURA = next_tHashInput_7.NUMERO_FACTURA;
	row17.LUGAR = next_tHashInput_7.LUGAR;
	row17.PERIODO = next_tHashInput_7.PERIODO;
	row17.SIGLAESM = next_tHashInput_7.SIGLAESM;
	row17.SIGLAFUERZA = next_tHashInput_7.SIGLAFUERZA;
	row17.FORMULA = next_tHashInput_7.FORMULA;
	row17.TIRILLA = next_tHashInput_7.TIRILLA;
	row17.FFORMUALCION = next_tHashInput_7.FFORMUALCION;
	row17.FDISPENSACION = next_tHashInput_7.FDISPENSACION;
	row17.DOCUMENTO = next_tHashInput_7.DOCUMENTO;
	row17.TDOCUMENTOS_ID = next_tHashInput_7.TDOCUMENTOS_ID;
	row17.TFORMULAS_ID = next_tHashInput_7.TFORMULAS_ID;
	row17.TORIGEN_ID = next_tHashInput_7.TORIGEN_ID;
	row17.CODIGOCUM = next_tHashInput_7.CODIGOCUM;
	row17.INVIMA = next_tHashInput_7.INVIMA;
	row17.CODIGOSSMP = next_tHashInput_7.CODIGOSSMP;
	row17.NOMBREMEDICAMENTO = next_tHashInput_7.NOMBREMEDICAMENTO;
	row17.LABORATORIO = next_tHashInput_7.LABORATORIO;
	row17.BODEGA = next_tHashInput_7.BODEGA;
	row17.LOTE = next_tHashInput_7.LOTE;
	row17.FVENCIMIENTO = next_tHashInput_7.FVENCIMIENTO;
	row17.CANTFORMULADA = next_tHashInput_7.CANTFORMULADA;
	row17.CANTENTREGADA = next_tHashInput_7.CANTENTREGADA;
	row17.VUNITARIO = next_tHashInput_7.VUNITARIO;
	row17.SUBTOTAL = next_tHashInput_7.SUBTOTAL;
	row17.INTERMEDIACION = next_tHashInput_7.INTERMEDIACION;
	row17.VTOTAL = next_tHashInput_7.VTOTAL;
	row17.VGRAVADO = next_tHashInput_7.VGRAVADO;
	row17.DCARGUE_ID = next_tHashInput_7.DCARGUE_ID;
	row17.DFORMMEDINSUMOS_ID = next_tHashInput_7.DFORMMEDINSUMOS_ID;
	row17.FECHA = next_tHashInput_7.FECHA;
	row17.USUARIOS_ID = next_tHashInput_7.USUARIOS_ID;
	row17.UORG_ID = next_tHashInput_7.UORG_ID;
	row17.ESTADO = next_tHashInput_7.ESTADO;
	row17.ESTREGISTRO_ID = next_tHashInput_7.ESTREGISTRO_ID;
	row17.TIPIFICACION = next_tHashInput_7.TIPIFICACION;
	row17.TDOCUMENTO = next_tHashInput_7.TDOCUMENTO;
	row17.TFORMULA = next_tHashInput_7.TFORMULA;
	row17.TORIGEN = next_tHashInput_7.TORIGEN;
	row17.VGLOSADO = next_tHashInput_7.VGLOSADO;
	row17.VSOPORTADO = next_tHashInput_7.VSOPORTADO;
	row17.VACEPTADO = next_tHashInput_7.VACEPTADO;
	row17.VRATIFICADO = next_tHashInput_7.VRATIFICADO;
	row17.VAVALPAGO = next_tHashInput_7.VAVALPAGO;
	row17.PERSONAS_ID = next_tHashInput_7.PERSONAS_ID;
	row17.DOSIS = next_tHashInput_7.DOSIS;
	row17.FRECUENCIA = next_tHashInput_7.FRECUENCIA;
	row17.PRODUCTOS_ID = next_tHashInput_7.PRODUCTOS_ID;
	row17.CIE10_ID = next_tHashInput_7.CIE10_ID;
	row17.DFORMMEDINSUMOS_ID1 = next_tHashInput_7.DFORMMEDINSUMOS_ID1;
	row17.FVENCIMIENTO_SALUDSIS = next_tHashInput_7.FVENCIMIENTO_SALUDSIS;
	row17.FMOVIMIENTO_SALUDSIS = next_tHashInput_7.FMOVIMIENTO_SALUDSIS;
	row17.CANTIDAD_SALUDSIS = next_tHashInput_7.CANTIDAD_SALUDSIS;
	row17.VINTERMEDIACION = next_tHashInput_7.VINTERMEDIACION;
	row17.VCALCULADO_TOTAL = next_tHashInput_7.VCALCULADO_TOTAL;
	row17.BANDERA_TOTAL = next_tHashInput_7.BANDERA_TOTAL;
	row17.BANDERA_PORCENTAJE = next_tHashInput_7.BANDERA_PORCENTAJE;
	row17.CANTENTREGADA_ANTERIOR = next_tHashInput_7.CANTENTREGADA_ANTERIOR;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_13 main ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_13 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_13 = false;
		boolean mainRowRejected_tMap_13 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_13__Struct Var = Var__tMap_13;// ###############################
        // ###############################
        // # Output tables

out15 = null;
out16 = null;


// # Output table : 'out15'
out15_tmp.FACTURA_ID = row17.FACTURA_ID ;
out15_tmp.VTOTAL = row17.VTOTAL ;
out15_tmp.SUMA = null;
out15 = out15_tmp;

// # Output table : 'out16'
out16_tmp.FACTURA_ID = row17.FACTURA_ID ;
out16_tmp.VTOTAL = row17.VTOTAL ;
out16_tmp.SUMA = null;
out16 = out16_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_13 = false;










 


	tos_count_tMap_13++;

/**
 * [tMap_13 main ] stop
 */
	
	/**
	 * [tMap_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_begin ] stop
 */
// Start of branch "out15"
if(out15 != null) { 



	
	/**
	 * [tAggregateRow_3_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out15"
						
						);
					}
					
	


	operation_finder_tAggregateRow_3.hashCodeDirty = true;
	
	operation_result_tAggregateRow_3 = hash_tAggregateRow_3.get(operation_finder_tAggregateRow_3);

	

	if(operation_result_tAggregateRow_3 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_3 = new AggOperationStruct_tAggregateRow_3();

		
		
		

		hash_tAggregateRow_3.put(operation_result_tAggregateRow_3, operation_result_tAggregateRow_3);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_3.SUMA_sum == null) {
						operation_result_tAggregateRow_3.SUMA_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_3.SUMA_sum = operation_result_tAggregateRow_3.SUMA_sum.add(
						new BigDecimal(
							String.valueOf(
								out15.VTOTAL
							)
						)
					);
					


 


	tos_count_tAggregateRow_3_AGGOUT++;

/**
 * [tAggregateRow_3_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT process_data_end ] stop
 */

} // End of branch "out15"




// Start of branch "out16"
if(out16 != null) { 



	
	/**
	 * [tAggregateRow_5_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out16"
						
						);
					}
					
	
operation_finder_tAggregateRow_5.FACTURA_ID = out16.FACTURA_ID;
			

	operation_finder_tAggregateRow_5.hashCodeDirty = true;
	
	operation_result_tAggregateRow_5 = hash_tAggregateRow_5.get(operation_finder_tAggregateRow_5);

	

	if(operation_result_tAggregateRow_5 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_5 = new AggOperationStruct_tAggregateRow_5();

		operation_result_tAggregateRow_5.FACTURA_ID = operation_finder_tAggregateRow_5.FACTURA_ID;
				
		
		

		hash_tAggregateRow_5.put(operation_result_tAggregateRow_5, operation_result_tAggregateRow_5);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_5.SUMA_sum == null) {
						operation_result_tAggregateRow_5.SUMA_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_5.SUMA_sum = operation_result_tAggregateRow_5.SUMA_sum.add(
						new BigDecimal(
							String.valueOf(
								out16.VTOTAL
							)
						)
					);
					


 


	tos_count_tAggregateRow_5_AGGOUT++;

/**
 * [tAggregateRow_5_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

 



/**
 * [tAggregateRow_5_AGGOUT process_data_end ] stop
 */

} // End of branch "out16"




	
	/**
	 * [tMap_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tMap_13 end ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_13", true);
end_Hash.put("tMap_13", System.currentTimeMillis());




/**
 * [tMap_13 end ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out15");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_3_AGGOUT", true);
end_Hash.put("tAggregateRow_3_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGOUT end ] stop
 */


	
	/**
	 * [tJavaRow_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_12", false);
		start_Hash.put("tJavaRow_12", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tJavaRow_12 = 0;
		

int nb_line_tJavaRow_12 = 0;

 



/**
 * [tJavaRow_12 begin ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_3_AGGIN", false);
		start_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	
		int tos_count_tAggregateRow_3_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_3> values_tAggregateRow_3 = hash_tAggregateRow_3.values();

globalMap.put("tAggregateRow_3_NB_LINE", values_tAggregateRow_3.size());

for(AggOperationStruct_tAggregateRow_3 aggregated_row_tAggregateRow_3 : values_tAggregateRow_3) { // G_AggR_600



 



/**
 * [tAggregateRow_3_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

    								if(aggregated_row_tAggregateRow_3.SUMA_sum != null) {
    								row18.SUMA = aggregated_row_tAggregateRow_3.SUMA_sum.doubleValue();
										
    								}else{
    								
    									row18.SUMA = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_3_AGGIN++;

/**
 * [tAggregateRow_3_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_12 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.SumaFactura = row18.SUMA;
System.out.println(context.SumaFactura);
    nb_line_tJavaRow_12++;   

 


	tos_count_tJavaRow_12++;

/**
 * [tJavaRow_12 main ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_3_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_3_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_3_AGGIN", true);
end_Hash.put("tAggregateRow_3_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_3_AGGIN end ] stop
 */

	
	/**
	 * [tJavaRow_12 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

globalMap.put("tJavaRow_12_NB_LINE",nb_line_tJavaRow_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tJavaRow_12", true);
end_Hash.put("tJavaRow_12", System.currentTimeMillis());




/**
 * [tJavaRow_12 end ] stop
 */










	
	/**
	 * [tAggregateRow_5_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out16");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_5_AGGOUT", true);
end_Hash.put("tAggregateRow_5_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_15", false);
		start_Hash.put("tHashOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tHashOutput_15 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row51Struct> tHashFile_tHashOutput_15 = null;
		String hashKey_tHashOutput_15 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_15";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_15)){
			    if(mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15) == null){
	      		    mf_tHashOutput_15.getResourceMap().put(hashKey_tHashOutput_15, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row51Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }else{
			    	tHashFile_tHashOutput_15 = mf_tHashOutput_15.getResourceMap().get(hashKey_tHashOutput_15);
			    }
			}
        int nb_line_tHashOutput_15 = 0;

 



/**
 * [tHashOutput_15 begin ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_5_AGGIN", false);
		start_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	
		int tos_count_tAggregateRow_5_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_5> values_tAggregateRow_5 = hash_tAggregateRow_5.values();

globalMap.put("tAggregateRow_5_NB_LINE", values_tAggregateRow_5.size());

for(AggOperationStruct_tAggregateRow_5 aggregated_row_tAggregateRow_5 : values_tAggregateRow_5) { // G_AggR_600



 



/**
 * [tAggregateRow_5_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

            				    row51.FACTURA_ID = aggregated_row_tAggregateRow_5.FACTURA_ID;
            				    
    								if(aggregated_row_tAggregateRow_5.SUMA_sum != null) {
    								row51.SUMA = aggregated_row_tAggregateRow_5.SUMA_sum.doubleValue();
										
    								}else{
    								
    									row51.SUMA = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_5_AGGIN++;

/**
 * [tAggregateRow_5_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

 



/**
 * [tAggregateRow_5_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_15 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row51"
						
						);
					}
					



    
		row51Struct oneRow_tHashOutput_15 = new row51Struct();
				
					oneRow_tHashOutput_15.FACTURA_ID = row51.FACTURA_ID;
					oneRow_tHashOutput_15.VTOTAL = row51.VTOTAL;
					oneRow_tHashOutput_15.SUMA = row51.SUMA;
		
        tHashFile_tHashOutput_15.put(oneRow_tHashOutput_15);
        nb_line_tHashOutput_15 ++;

 


	tos_count_tHashOutput_15++;

/**
 * [tHashOutput_15 main ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_5_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

 



/**
 * [tAggregateRow_5_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_5_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_5_AGGIN", true);
end_Hash.put("tAggregateRow_5_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_5_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_15 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	
globalMap.put("tHashOutput_15_NB_LINE", nb_line_tHashOutput_15);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tHashOutput_15", true);
end_Hash.put("tHashOutput_15", System.currentTimeMillis());




/**
 * [tHashOutput_15 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk18", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_5_AGGIN"
							globalMap.remove("tAggregateRow_5");
						
							//free memory for "tAggregateRow_3_AGGIN"
							globalMap.remove("tAggregateRow_3");
						
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tMap_13 finally ] start
	 */

	

	
	
	currentComponent="tMap_13";
	
	

 



/**
 * [tMap_13 finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGOUT";
	
	

 



/**
 * [tAggregateRow_3_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_3_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_3";
	
	currentComponent="tAggregateRow_3_AGGIN";
	
	

 



/**
 * [tAggregateRow_3_AGGIN finally ] stop
 */

	
	/**
	 * [tJavaRow_12 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_12";
	
	

 



/**
 * [tJavaRow_12 finally ] stop
 */










	
	/**
	 * [tAggregateRow_5_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGOUT";
	
	

 



/**
 * [tAggregateRow_5_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_5_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_5";
	
	currentComponent="tAggregateRow_5_AGGIN";
	
	

 



/**
 * [tAggregateRow_5_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


if (context.SumaGlosas == null ) {
context.SumaGlosas  = 0.0;
} 

if (context.SumaFactura == null ) {
context.SumaFactura  = 0.0;
}   

 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

   			if (context.SumaFactura > 0.0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tFixedFlowInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class out12Struct implements routines.system.IPersistableRow<out12Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public java.util.Date FINICIO;

				public java.util.Date getFINICIO () {
					return this.FINICIO;
				}

				public Boolean FINICIOIsNullable(){
				    return false;
				}
				public Boolean FINICIOIsKey(){
				    return false;
				}
				public Integer FINICIOLength(){
				    return 7;
				}
				public Integer FINICIOPrecision(){
				    return 0;
				}
				public String FINICIODefault(){
				
					return null;
				
				}
				public String FINICIOComment(){
				
				    return "Fecha de Fin de la auditoria";
				
				}
				public String FINICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINICIOOriginalDbColumnName(){
				
					return "FINICIO";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR;

				public BigDecimal getPRESTADOR () {
					return this.PRESTADOR;
				}

				public Boolean PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PRESTADORIsKey(){
				    return false;
				}
				public Integer PRESTADORLength(){
				    return 0;
				}
				public Integer PRESTADORPrecision(){
				    return null;
				}
				public String PRESTADORDefault(){
				
					return null;
				
				}
				public String PRESTADORComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String PRESTADORPattern(){
				
					return "";
				
				}
				public String PRESTADOROriginalDbColumnName(){
				
					return "PRESTADOR";
				
				}

				
			    public double VGLOSADO;

				public double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return false;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double VAVALPAGO;

				public Double getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor aceptado";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal ESTAUDITORIA_ID;

				public BigDecimal getESTAUDITORIA_ID () {
					return this.ESTAUDITORIA_ID;
				}

				public Boolean ESTAUDITORIA_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIA_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIA_IDLength(){
				    return 0;
				}
				public Integer ESTAUDITORIA_IDPrecision(){
				    return null;
				}
				public String ESTAUDITORIA_IDDefault(){
				
					return null;
				
				}
				public String ESTAUDITORIA_IDComment(){
				
				    return "FK - ACM_ESTAUDITORIA";
				
				}
				public String ESTAUDITORIA_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIA_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIA_ID";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.FINICIO = readDate(dis);
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
						this.ESTAUDITORIA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.FINICIO = readDate(dis);
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
						this.ESTAUDITORIA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTAUDITORIA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTAUDITORIA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FINICIO="+String.valueOf(FINICIO));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR="+String.valueOf(PRESTADOR));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",ESTAUDITORIA_ID="+String.valueOf(ESTAUDITORIA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public java.util.Date FINICIO;

				public java.util.Date getFINICIO () {
					return this.FINICIO;
				}

				public Boolean FINICIOIsNullable(){
				    return true;
				}
				public Boolean FINICIOIsKey(){
				    return false;
				}
				public Integer FINICIOLength(){
				    return null;
				}
				public Integer FINICIOPrecision(){
				    return null;
				}
				public String FINICIODefault(){
				
					return null;
				
				}
				public String FINICIOComment(){
				
				    return "";
				
				}
				public String FINICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINICIOOriginalDbColumnName(){
				
					return "FINICIO";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return null;
				}
				public Integer DESCRIPCIONPrecision(){
				    return null;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal PRESTADOR;

				public BigDecimal getPRESTADOR () {
					return this.PRESTADOR;
				}

				public Boolean PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PRESTADORIsKey(){
				    return false;
				}
				public Integer PRESTADORLength(){
				    return null;
				}
				public Integer PRESTADORPrecision(){
				    return null;
				}
				public String PRESTADORDefault(){
				
					return null;
				
				}
				public String PRESTADORComment(){
				
				    return "";
				
				}
				public String PRESTADORPattern(){
				
					return "";
				
				}
				public String PRESTADOROriginalDbColumnName(){
				
					return "PRESTADOR";
				
				}

				
			    public Double VGLOSADO;

				public Double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return null;
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double VAVALPAGO;

				public Double getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return null;
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.FINICIO = readDate(dis);
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.FINICIO = readDate(dis);
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FINICIO="+String.valueOf(FINICIO));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PRESTADOR="+String.valueOf(PRESTADOR));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();
out12Struct out12 = new out12Struct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out12");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 10000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 10000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("ACM_AUDITORIAS");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("ACM_AUDITORIAS");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (RECEPCION_ID,FINICIO,DESCRIPCION,USUARIOS_ID,UORG_ID,PRESTADOR,VGLOSADO,VAVALPAGO,ESTAUDITORIA_ID) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out12Struct out12_tmp = new out12Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row22.RECEPCION_ID = context.RECEPCION_ID;
    	            	        	            	
    	            		row22.FINICIO = context.Fauditoria;
    	            	        	            	
    	            		row22.DESCRIPCION = "Glosamiento automatico de medicamentos";
    	            	        	            	
    	            		row22.USUARIOS_ID = context.USUARIOS_ID;
    	            	        	            	
    	            		row22.UORG_ID = context.UORG_ID;
    	            	        	            	
    	            		row22.PRESTADOR = context.PRESTADOR;
    	            	        	            	
    	            		row22.VGLOSADO = context.SumaGlosas == null? 0: context.SumaGlosas;
    	            	        	            	
    	            		row22.VAVALPAGO = (context.SumaGlosas != 0)?  0.0 :  context.SumaFactura;
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out12 = null;


// # Output table : 'out12'
out12_tmp.RECEPCION_ID = row22.RECEPCION_ID ;
out12_tmp.FINICIO = row22.FINICIO ;
out12_tmp.DESCRIPCION = row22.DESCRIPCION ;
out12_tmp.USUARIOS_ID = row22.USUARIOS_ID ;
out12_tmp.UORG_ID = row22.UORG_ID ;
out12_tmp.PRESTADOR = row22.PRESTADOR ;
out12_tmp.VGLOSADO = row22.VGLOSADO;
out12_tmp.VAVALPAGO = row22.VAVALPAGO ;
out12_tmp.ESTAUDITORIA_ID = context.SinInniciar;
out12 = out12_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out12"
if(out12 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out12"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setBigDecimal(1, out12.RECEPCION_ID);

                        if(out12.FINICIO != null) {
pstmt_tOracleOutput_1.setObject(2, new java.sql.Timestamp(out12.FINICIO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.DATE);
}

                        if(out12.DESCRIPCION == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, out12.DESCRIPCION);
}

                        pstmt_tOracleOutput_1.setBigDecimal(4, out12.USUARIOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(5, out12.UORG_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(6, out12.PRESTADOR);

                        pstmt_tOracleOutput_1.setDouble(7, out12.VGLOSADO);

                        if(out12.VAVALPAGO == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_1.setDouble(8, out12.VAVALPAGO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(9, out12.ESTAUDITORIA_ID);

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    insertedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            insertedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "out12"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out12");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tOracleInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout7Struct implements routines.system.IPersistableRow<copyOfout7Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return false;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "FK - ACM_AUDITORIAS";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 4000;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VLGOSADO;

				public BigDecimal getVLGOSADO () {
					return this.VLGOSADO;
				}

				public Boolean VLGOSADOIsNullable(){
				    return true;
				}
				public Boolean VLGOSADOIsKey(){
				    return false;
				}
				public Integer VLGOSADOLength(){
				    return 0;
				}
				public Integer VLGOSADOPrecision(){
				    return null;
				}
				public String VLGOSADODefault(){
				
					return "0";
				
				}
				public String VLGOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VLGOSADOPattern(){
				
					return "";
				
				}
				public String VLGOSADOOriginalDbColumnName(){
				
					return "VLGOSADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return null;
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public java.util.Date FIETAPA;

				public java.util.Date getFIETAPA () {
					return this.FIETAPA;
				}

				public Boolean FIETAPAIsNullable(){
				    return false;
				}
				public Boolean FIETAPAIsKey(){
				    return false;
				}
				public Integer FIETAPALength(){
				    return 7;
				}
				public Integer FIETAPAPrecision(){
				    return 0;
				}
				public String FIETAPADefault(){
				
					return null;
				
				}
				public String FIETAPAComment(){
				
				    return "Fecha inicio etapa";
				
				}
				public String FIETAPAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FIETAPAOriginalDbColumnName(){
				
					return "FIETAPA";
				
				}

				
			    public BigDecimal ESTAUDITORIA_ID;

				public BigDecimal getESTAUDITORIA_ID () {
					return this.ESTAUDITORIA_ID;
				}

				public Boolean ESTAUDITORIA_IDIsNullable(){
				    return true;
				}
				public Boolean ESTAUDITORIA_IDIsKey(){
				    return false;
				}
				public Integer ESTAUDITORIA_IDLength(){
				    return 0;
				}
				public Integer ESTAUDITORIA_IDPrecision(){
				    return null;
				}
				public String ESTAUDITORIA_IDDefault(){
				
					return null;
				
				}
				public String ESTAUDITORIA_IDComment(){
				
				    return "FK - ACM_ESTAUDITORIA";
				
				}
				public String ESTAUDITORIA_IDPattern(){
				
					return "";
				
				}
				public String ESTAUDITORIA_IDOriginalDbColumnName(){
				
					return "ESTAUDITORIA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VLGOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.FIETAPA = readDate(dis);
					
						this.ESTAUDITORIA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VLGOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.FIETAPA = readDate(dis);
					
						this.ESTAUDITORIA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLGOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// java.util.Date
				
						writeDate(this.FIETAPA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTAUDITORIA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLGOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// java.util.Date
				
						writeDate(this.FIETAPA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTAUDITORIA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VLGOSADO="+String.valueOf(VLGOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",FIETAPA="+String.valueOf(FIETAPA));
		sb.append(",ESTAUDITORIA_ID="+String.valueOf(ESTAUDITORIA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out13Struct implements routines.system.IPersistableRow<out13Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public java.util.Date FINICIO;

				public java.util.Date getFINICIO () {
					return this.FINICIO;
				}

				public Boolean FINICIOIsNullable(){
				    return false;
				}
				public Boolean FINICIOIsKey(){
				    return false;
				}
				public Integer FINICIOLength(){
				    return null;
				}
				public Integer FINICIOPrecision(){
				    return null;
				}
				public String FINICIODefault(){
				
					return null;
				
				}
				public String FINICIOComment(){
				
				    return "";
				
				}
				public String FINICIOPattern(){
				
					return "";
				
				}
				public String FINICIOOriginalDbColumnName(){
				
					return "FINICIO";
				
				}

				
			    public java.util.Date FFIN;

				public java.util.Date getFFIN () {
					return this.FFIN;
				}

				public Boolean FFINIsNullable(){
				    return true;
				}
				public Boolean FFINIsKey(){
				    return false;
				}
				public Integer FFINLength(){
				    return null;
				}
				public Integer FFINPrecision(){
				    return null;
				}
				public String FFINDefault(){
				
					return null;
				
				}
				public String FFINComment(){
				
				    return "";
				
				}
				public String FFINPattern(){
				
					return "";
				
				}
				public String FFINOriginalDbColumnName(){
				
					return "FFIN";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return null;
				}
				public Integer DESCRIPCIONPrecision(){
				    return null;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal PRESTADOR;

				public BigDecimal getPRESTADOR () {
					return this.PRESTADOR;
				}

				public Boolean PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PRESTADORIsKey(){
				    return false;
				}
				public Integer PRESTADORLength(){
				    return null;
				}
				public Integer PRESTADORPrecision(){
				    return null;
				}
				public String PRESTADORDefault(){
				
					return "";
				
				}
				public String PRESTADORComment(){
				
				    return "";
				
				}
				public String PRESTADORPattern(){
				
					return "";
				
				}
				public String PRESTADOROriginalDbColumnName(){
				
					return "PRESTADOR";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return false;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return false;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return false;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return false;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.FINICIO = readDate(dis);
					
					this.FFIN = readDate(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.FINICIO = readDate(dis);
					
					this.FFIN = readDate(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FFIN,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// java.util.Date
				
						writeDate(this.FINICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FFIN,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FINICIO="+String.valueOf(FINICIO));
		sb.append(",FFIN="+String.valueOf(FFIN));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",PRESTADOR="+String.valueOf(PRESTADOR));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();
copyOfout7Struct copyOfout7 = new copyOfout7Struct();
out13Struct out13 = new out13Struct();





	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout7");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 10000;
            int commitCounter_tOracleOutput_2 = 0;
        int batchSize_tOracleOutput_2 = 10000;
        int batchSizeCounter_tOracleOutput_2=0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("ACM_HAUDITORIAS");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("ACM_HAUDITORIAS");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (RECEPCION_ID,ETAPASNORMATIVIDAD_ID,AUDITORIAS_ID,DESCRIPCION,USUARIOS_ID,UORG_ID,VLGOSADO,VAVALPAGO,FIETAPA,ESTAUDITORIA_ID) VALUES (?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */




	
	/**
	 * [tJavaRow_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_9", false);
		start_Hash.put("tJavaRow_9", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out13");
					}
				
		int tos_count_tJavaRow_9 = 0;
		

int nb_line_tJavaRow_9 = 0;

 



/**
 * [tJavaRow_9 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout7Struct copyOfout7_tmp = new copyOfout7Struct();
out13Struct out13_tmp = new out13Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				String driverClass_tOracleInput_11 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_11);
				
			String url_tOracleInput_11 = null;
				url_tOracleInput_11 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_11 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_11 = context.db_origen_Password; 

				String dbPwd_tOracleInput_11 = decryptedPassword_tOracleInput_11;

				
					java.util.Properties atnParamsPrope_tOracleInput_11 = new java.util.Properties();
					atnParamsPrope_tOracleInput_11.put("user",dbUser_tOracleInput_11);
					atnParamsPrope_tOracleInput_11.put("password",dbPwd_tOracleInput_11);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_11.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_11 = java.sql.DriverManager.getConnection(url_tOracleInput_11, atnParamsPrope_tOracleInput_11);
				java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_11.next()) {
					sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
				}
                                if (!(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                                }
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = "SELECT  * FROM ACM_AUDITORIAS WHERE RECEPCION_ID = " +context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row30.ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row30.ID = rs_tOracleInput_11.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row30.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(2) != null) {
						row30.RECEPCION_ID = rs_tOracleInput_11.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row30.FINICIO = null;
							} else {
										
			row30.FINICIO = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 3);
		                    }
							if(colQtyInRs_tOracleInput_11 < 4) {
								row30.FFIN = null;
							} else {
										
			row30.FFIN = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 4);
		                    }
							if(colQtyInRs_tOracleInput_11 < 5) {
								row30.DESCRIPCION = null;
							} else {
	                         		
        	row30.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 6) {
								row30.FECHA = null;
							} else {
										
			row30.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_11, 6);
		                    }
							if(colQtyInRs_tOracleInput_11 < 7) {
								row30.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(7) != null) {
						row30.USUARIOS_ID = rs_tOracleInput_11.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 8) {
								row30.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(8) != null) {
						row30.UORG_ID = rs_tOracleInput_11.getBigDecimal(8);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 9) {
								row30.ESTADO = null;
							} else {
	                         		
        	row30.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 10) {
								row30.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(10) != null) {
						row30.ESTREGISTRO_ID = rs_tOracleInput_11.getBigDecimal(10);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 11) {
								row30.PRESTADOR = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(11) != null) {
						row30.PRESTADOR = rs_tOracleInput_11.getBigDecimal(11);
					} else {
				
						row30.PRESTADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 12) {
								row30.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(12) != null) {
						row30.VGLOSADO = rs_tOracleInput_11.getBigDecimal(12);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 13) {
								row30.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(13) != null) {
						row30.VAVALPAGO = rs_tOracleInput_11.getBigDecimal(13);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 14) {
								row30.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(14) != null) {
						row30.VACEPTADO = rs_tOracleInput_11.getBigDecimal(14);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 15) {
								row30.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(15) != null) {
						row30.VSOPORTADO = rs_tOracleInput_11.getBigDecimal(15);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

copyOfout7 = null;
out13 = null;


// # Output table : 'copyOfout7'
copyOfout7_tmp.RECEPCION_ID = context.RECEPCION_ID;
copyOfout7_tmp.ETAPASNORMATIVIDAD_ID = context.ETAPASNORMATIVIDAD_ID;
copyOfout7_tmp.AUDITORIAS_ID = row30.ID ;
copyOfout7_tmp.DESCRIPCION = "etapa 1";
copyOfout7_tmp.USUARIOS_ID = context.USUARIOS_ID;
copyOfout7_tmp.UORG_ID = context.UORG_ID;
copyOfout7_tmp.VLGOSADO = row30.VGLOSADO ;
copyOfout7_tmp.VAVALPAGO = row30.VAVALPAGO ;
copyOfout7_tmp.FIETAPA = context.Fauditoria;
copyOfout7_tmp.ESTAUDITORIA_ID = context.SinInniciar;
copyOfout7 = copyOfout7_tmp;

// # Output table : 'out13'
out13_tmp.ID = row30.ID ;
out13 = out13_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "copyOfout7"
if(copyOfout7 != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout7"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        pstmt_tOracleOutput_2.setBigDecimal(1, copyOfout7.RECEPCION_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(2, copyOfout7.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(3, copyOfout7.AUDITORIAS_ID);

                        if(copyOfout7.DESCRIPCION == null) {
pstmt_tOracleOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(4, copyOfout7.DESCRIPCION);
}

                        pstmt_tOracleOutput_2.setBigDecimal(5, copyOfout7.USUARIOS_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(6, copyOfout7.UORG_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(7, copyOfout7.VLGOSADO);

                        pstmt_tOracleOutput_2.setBigDecimal(8, copyOfout7.VAVALPAGO);

                        if(copyOfout7.FIETAPA != null) {
pstmt_tOracleOutput_2.setObject(9, new java.sql.Timestamp(copyOfout7.FIETAPA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_2.setNull(9, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_2.setBigDecimal(10, copyOfout7.ESTAUDITORIA_ID);

                pstmt_tOracleOutput_2.addBatch();
                nb_line_tOracleOutput_2++;
                batchSizeCounter_tOracleOutput_2++;
            if (batchSize_tOracleOutput_2 > 0 &&  batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
                try {
                    pstmt_tOracleOutput_2.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
			        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
			    	String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
					}else{
						errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_2);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                    insertedCount_tOracleOutput_2
                += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                batchSizeCounter_tOracleOutput_2 = 0;
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(batchSizeCounter_tOracleOutput_2 > 0) {
                        try {
                            pstmt_tOracleOutput_2.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
					        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
					    	String errormessage_tOracleOutput_2;
							if (ne_tOracleOutput_2 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
								errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
							}else{
								errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_2);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                            insertedCount_tOracleOutput_2
                        += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                        rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                    	batchSizeCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "copyOfout7"




// Start of branch "out13"
if(out13 != null) { 



	
	/**
	 * [tJavaRow_9 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out13"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.AUDITORIA_ID = out13.ID;

    nb_line_tJavaRow_9++;   

 


	tos_count_tJavaRow_9++;

/**
 * [tJavaRow_9 main ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 process_data_end ] stop
 */

} // End of branch "out13"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
	if(conn_tOracleInput_11 != null && !conn_tOracleInput_11.isClosed()) {
	
			conn_tOracleInput_11.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_2 > 0) {
            try {
            	if (pstmt_tOracleOutput_2 != null) {
					
					pstmt_tOracleOutput_2.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
		        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
		    	String errormessage_tOracleOutput_2;
				if (ne_tOracleOutput_2 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
					errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
				}else{
					errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_2);
            	
        	}
        	if (pstmt_tOracleOutput_2 != null) {
            	tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_2
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
				rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
            }
        }
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout7");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */




	
	/**
	 * [tJavaRow_9 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

globalMap.put("tJavaRow_9_NB_LINE",nb_line_tJavaRow_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out13");
			  	}
			  	
 

ok_Hash.put("tJavaRow_9", true);
end_Hash.put("tJavaRow_9", System.currentTimeMillis());




/**
 * [tJavaRow_9 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tOracleInput_16Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */




	
	/**
	 * [tJavaRow_9 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_9";
	
	

 



/**
 * [tJavaRow_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();




	
	/**
	 * [tJavaRow_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_11", false);
		start_Hash.put("tJavaRow_11", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tJavaRow_11 = 0;
		

int nb_line_tJavaRow_11 = 0;

 



/**
 * [tJavaRow_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				String driverClass_tOracleInput_16 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_16);
				
			String url_tOracleInput_16 = null;
				url_tOracleInput_16 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_16 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_16 = context.db_origen_Password; 

				String dbPwd_tOracleInput_16 = decryptedPassword_tOracleInput_16;

				
					java.util.Properties atnParamsPrope_tOracleInput_16 = new java.util.Properties();
					atnParamsPrope_tOracleInput_16.put("user",dbUser_tOracleInput_16);
					atnParamsPrope_tOracleInput_16.put("password",dbPwd_tOracleInput_16);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_16.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_16 = java.sql.DriverManager.getConnection(url_tOracleInput_16, atnParamsPrope_tOracleInput_16);
				java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_16.next()) {
					sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
				}
                                if (!(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                                }
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement();

		    String dbquery_tOracleInput_16 = "SELECT  ID FROM ACM_HAUDITORIAS WHERE RECEPCION_ID = " +context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row43.ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row43.ID = rs_tOracleInput_16.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_11 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.HAUDITORIA_ID = row43.ID;

    nb_line_tJavaRow_11++;   

 


	tos_count_tJavaRow_11++;

/**
 * [tJavaRow_11 main ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
	if(conn_tOracleInput_16 != null && !conn_tOracleInput_16.isClosed()) {
	
			conn_tOracleInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tJavaRow_11 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

globalMap.put("tJavaRow_11_NB_LINE",nb_line_tJavaRow_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tJavaRow_11", true);
end_Hash.put("tJavaRow_11", System.currentTimeMillis());




/**
 * [tJavaRow_11 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_16:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tJavaRow_11 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_11";
	
	

 



/**
 * [tJavaRow_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


String foo = "bar";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tHashOutput_14_NB_LINE")) > 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tHashInput_10Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (((Integer)globalMap.get("tHashOutput_14_NB_LINE")) == 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tOracleRow_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMATORIA;

				public Double getSUMATORIA () {
					return this.SUMATORIA;
				}

				public Boolean SUMATORIAIsNullable(){
				    return true;
				}
				public Boolean SUMATORIAIsKey(){
				    return false;
				}
				public Integer SUMATORIALength(){
				    return null;
				}
				public Integer SUMATORIAPrecision(){
				    return null;
				}
				public String SUMATORIADefault(){
				
					return null;
				
				}
				public String SUMATORIAComment(){
				
				    return "";
				
				}
				public String SUMATORIAPattern(){
				
					return "";
				
				}
				public String SUMATORIAOriginalDbColumnName(){
				
					return "SUMATORIA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMATORIA="+String.valueOf(SUMATORIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_4 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_4> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMATORIA;

				public Double getSUMATORIA () {
					return this.SUMATORIA;
				}

				public Boolean SUMATORIAIsNullable(){
				    return true;
				}
				public Boolean SUMATORIAIsKey(){
				    return false;
				}
				public Integer SUMATORIALength(){
				    return null;
				}
				public Integer SUMATORIAPrecision(){
				    return null;
				}
				public String SUMATORIADefault(){
				
					return null;
				
				}
				public String SUMATORIAComment(){
				
				    return "";
				
				}
				public String SUMATORIAPattern(){
				
					return "";
				
				}
				public String SUMATORIAOriginalDbColumnName(){
				
					return "SUMATORIA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMATORIA="+String.valueOf(SUMATORIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_4 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out141Struct implements routines.system.IPersistableRow<out141Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMATORIA;

				public Double getSUMATORIA () {
					return this.SUMATORIA;
				}

				public Boolean SUMATORIAIsNullable(){
				    return true;
				}
				public Boolean SUMATORIAIsKey(){
				    return false;
				}
				public Integer SUMATORIALength(){
				    return null;
				}
				public Integer SUMATORIAPrecision(){
				    return null;
				}
				public String SUMATORIADefault(){
				
					return null;
				
				}
				public String SUMATORIAComment(){
				
				    return "";
				
				}
				public String SUMATORIAPattern(){
				
					return "";
				
				}
				public String SUMATORIAOriginalDbColumnName(){
				
					return "SUMATORIA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMATORIA="+String.valueOf(SUMATORIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out141Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row26Struct row26 = new row26Struct();
out141Struct out141 = new out141Struct();
row32Struct row32 = new row32Struct();





	
	/**
	 * [tAggregateRow_4_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGOUT", false);
		start_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out141");
					}
				
		int tos_count_tAggregateRow_4_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_4 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_4 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_4 utilClass_tAggregateRow_4 = new UtilClass_tAggregateRow_4();

	

	class AggOperationStruct_tAggregateRow_4 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal FACTURA_ID;BigDecimal SUMATORIA_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_4 other = (AggOperationStruct_tAggregateRow_4) obj;
			
							if (this.FACTURA_ID == null) {
								if (other.FACTURA_ID != null) 
									return false;
							} else if (!this.FACTURA_ID.equals(other.FACTURA_ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_4 operation_result_tAggregateRow_4 = null;
	AggOperationStruct_tAggregateRow_4 operation_finder_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();
	java.util.Map<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4> hash_tAggregateRow_4 = new java.util.HashMap<AggOperationStruct_tAggregateRow_4,AggOperationStruct_tAggregateRow_4>();
	

 



/**
 * [tAggregateRow_4_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_19", false);
		start_Hash.put("tMap_19", System.currentTimeMillis());
		
	
	currentComponent="tMap_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tMap_19 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_19__Struct  {
}
Var__tMap_19__Struct Var__tMap_19 = new Var__tMap_19__Struct();
// ###############################

// ###############################
// # Outputs initialization
out141Struct out141_tmp = new out141Struct();
// ###############################

        
        



        









 



/**
 * [tMap_19 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out20Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out20Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    out20Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row26.ID = next_tHashInput_10.ID;
	row26.RECEPCION_ID = next_tHashInput_10.RECEPCION_ID;
	row26.FACTURA_ID = next_tHashInput_10.FACTURA_ID;
	row26.NUMERO_FACTURA = next_tHashInput_10.NUMERO_FACTURA;
	row26.VTOTAL = next_tHashInput_10.VTOTAL;
	row26.VINFORMATIVO = next_tHashInput_10.VINFORMATIVO;
	row26.GLOSACAUSADA = next_tHashInput_10.GLOSACAUSADA;
	row26.SIGLA = next_tHashInput_10.SIGLA;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tMap_19 main ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_19 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_19 = false;
		boolean mainRowRejected_tMap_19 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_19__Struct Var = Var__tMap_19;// ###############################
        // ###############################
        // # Output tables

out141 = null;


// # Output table : 'out141'
out141_tmp.FACTURA_ID = row26.FACTURA_ID ;
out141_tmp.VTOTAL = row26.VTOTAL ;
out141_tmp.SUMATORIA = null;
out141 = out141_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_19 = false;










 


	tos_count_tMap_19++;

/**
 * [tMap_19 main ] stop
 */
	
	/**
	 * [tMap_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 process_data_begin ] stop
 */
// Start of branch "out141"
if(out141 != null) { 



	
	/**
	 * [tAggregateRow_4_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out141"
						
						);
					}
					
	
operation_finder_tAggregateRow_4.FACTURA_ID = out141.FACTURA_ID;
			

	operation_finder_tAggregateRow_4.hashCodeDirty = true;
	
	operation_result_tAggregateRow_4 = hash_tAggregateRow_4.get(operation_finder_tAggregateRow_4);

	

	if(operation_result_tAggregateRow_4 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_4 = new AggOperationStruct_tAggregateRow_4();

		operation_result_tAggregateRow_4.FACTURA_ID = operation_finder_tAggregateRow_4.FACTURA_ID;
				
		
		

		hash_tAggregateRow_4.put(operation_result_tAggregateRow_4, operation_result_tAggregateRow_4);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_4.SUMATORIA_sum == null) {
						operation_result_tAggregateRow_4.SUMATORIA_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_4.SUMATORIA_sum = operation_result_tAggregateRow_4.SUMATORIA_sum.add(
						new BigDecimal(
							String.valueOf(
								out141.VTOTAL
							)
						)
					);
					


 


	tos_count_tAggregateRow_4_AGGOUT++;

/**
 * [tAggregateRow_4_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT process_data_end ] stop
 */

} // End of branch "out141"




	
	/**
	 * [tMap_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tMap_19 end ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tMap_19", true);
end_Hash.put("tMap_19", System.currentTimeMillis());




/**
 * [tMap_19 end ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out141");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_4_AGGOUT", true);
end_Hash.put("tAggregateRow_4_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_17", false);
		start_Hash.put("tHashOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tHashOutput_17 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_17 = null;
		String hashKey_tHashOutput_17 = "tHashFile_GlosasMedicamentos_" + pid + "_tHashOutput_17";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_17)){
			    if(mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17) == null){
	      		    mf_tHashOutput_17.getResourceMap().put(hashKey_tHashOutput_17, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }else{
			    	tHashFile_tHashOutput_17 = mf_tHashOutput_17.getResourceMap().get(hashKey_tHashOutput_17);
			    }
			}
        int nb_line_tHashOutput_17 = 0;

 



/**
 * [tHashOutput_17 begin ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_4_AGGIN", false);
		start_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	
		int tos_count_tAggregateRow_4_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_4> values_tAggregateRow_4 = hash_tAggregateRow_4.values();

globalMap.put("tAggregateRow_4_NB_LINE", values_tAggregateRow_4.size());

for(AggOperationStruct_tAggregateRow_4 aggregated_row_tAggregateRow_4 : values_tAggregateRow_4) { // G_AggR_600



 



/**
 * [tAggregateRow_4_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

            				    row32.FACTURA_ID = aggregated_row_tAggregateRow_4.FACTURA_ID;
            				    
    								if(aggregated_row_tAggregateRow_4.SUMATORIA_sum != null) {
    								row32.SUMATORIA = aggregated_row_tAggregateRow_4.SUMATORIA_sum.doubleValue();
										
    								}else{
    								
    									row32.SUMATORIA = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_4_AGGIN++;

/**
 * [tAggregateRow_4_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_17 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					



    
		row32Struct oneRow_tHashOutput_17 = new row32Struct();
				
					oneRow_tHashOutput_17.FACTURA_ID = row32.FACTURA_ID;
					oneRow_tHashOutput_17.VTOTAL = row32.VTOTAL;
					oneRow_tHashOutput_17.SUMATORIA = row32.SUMATORIA;
		
        tHashFile_tHashOutput_17.put(oneRow_tHashOutput_17);
        nb_line_tHashOutput_17 ++;

 


	tos_count_tHashOutput_17++;

/**
 * [tHashOutput_17 main ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_4_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_4_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_4_AGGIN", true);
end_Hash.put("tAggregateRow_4_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_4_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_17 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	
globalMap.put("tHashOutput_17_NB_LINE", nb_line_tHashOutput_17);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tHashOutput_17", true);
end_Hash.put("tHashOutput_17", System.currentTimeMillis());




/**
 * [tHashOutput_17 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_10:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tHashInput_12Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_4_AGGIN"
							globalMap.remove("tAggregateRow_4");
						
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tMap_19 finally ] start
	 */

	

	
	
	currentComponent="tMap_19";
	
	

 



/**
 * [tMap_19 finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGOUT";
	
	

 



/**
 * [tAggregateRow_4_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_4_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_4";
	
	currentComponent="tAggregateRow_4_AGGIN";
	
	

 



/**
 * [tAggregateRow_4_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout11Struct implements routines.system.IPersistableRow<copyOfout11Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_117407\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Double VGLOSADO;

				public Double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "VALOR GLOSADO";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double VAVALPAGO;

				public Double getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "VALOR AVAL DE PAGO";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final copyOfout11Struct other = (copyOfout11Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(copyOfout11Struct other) {

		other.ID = this.ID;
	            other.VGLOSADO = this.VGLOSADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            
	}

	public void copyKeysDataTo(copyOfout11Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row36Struct implements routines.system.IPersistableRow<row36Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMATORIA;

				public Double getSUMATORIA () {
					return this.SUMATORIA;
				}

				public Boolean SUMATORIAIsNullable(){
				    return true;
				}
				public Boolean SUMATORIAIsKey(){
				    return false;
				}
				public Integer SUMATORIALength(){
				    return null;
				}
				public Integer SUMATORIAPrecision(){
				    return null;
				}
				public String SUMATORIADefault(){
				
					return null;
				
				}
				public String SUMATORIAComment(){
				
				    return "";
				
				}
				public String SUMATORIAPattern(){
				
					return "";
				
				}
				public String SUMATORIAOriginalDbColumnName(){
				
					return "SUMATORIA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMATORIA="+String.valueOf(SUMATORIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_12Struct implements routines.system.IPersistableRow<after_tHashInput_12Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMATORIA;

				public Double getSUMATORIA () {
					return this.SUMATORIA;
				}

				public Boolean SUMATORIAIsNullable(){
				    return true;
				}
				public Boolean SUMATORIAIsKey(){
				    return false;
				}
				public Integer SUMATORIALength(){
				    return null;
				}
				public Integer SUMATORIAPrecision(){
				    return null;
				}
				public String SUMATORIADefault(){
				
					return null;
				
				}
				public String SUMATORIAComment(){
				
				    return "";
				
				}
				public String SUMATORIAPattern(){
				
					return "";
				
				}
				public String SUMATORIAOriginalDbColumnName(){
				
					return "SUMATORIA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
			        this.VTOTAL = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMATORIA = null;
           				} else {
           			    	this.SUMATORIA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// Double
				
						if(this.SUMATORIA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMATORIA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMATORIA="+String.valueOf(SUMATORIA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_8Process(globalMap);

		row36Struct row36 = new row36Struct();
copyOfout11Struct copyOfout11 = new copyOfout11Struct();





	
	/**
	 * [tOracleOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_5", false);
		start_Hash.put("tOracleOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout11");
					}
				
		int tos_count_tOracleOutput_5 = 0;
		






        int updateKeyCount_tOracleOutput_5 = 1;
        if(updateKeyCount_tOracleOutput_5 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_5 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_5 = 0;
    int nb_line_update_tOracleOutput_5 = 0;
    int nb_line_inserted_tOracleOutput_5 = 0;
    int nb_line_deleted_tOracleOutput_5 = 0;
    int nb_line_rejected_tOracleOutput_5 = 0;

    int tmp_batchUpdateCount_tOracleOutput_5 = 0;

    int deletedCount_tOracleOutput_5=0;
    int updatedCount_tOracleOutput_5=0;
    int insertedCount_tOracleOutput_5=0;
    int rowsToCommitCount_tOracleOutput_5=0;
    int rejectedCount_tOracleOutput_5=0;

    boolean whetherReject_tOracleOutput_5 = false;

    java.sql.Connection conn_tOracleOutput_5 = null;

    //optional table
    String dbschema_tOracleOutput_5 = null;
    String tableName_tOracleOutput_5 = null;
                    String driverClass_tOracleOutput_5 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_5);
                String url_tOracleOutput_5 = null;
                    url_tOracleOutput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_5 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_5 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_5 = decryptedPassword_tOracleOutput_5;
                dbschema_tOracleOutput_5 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_5 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_5.put("user",dbUser_tOracleOutput_5);
                    atnParamsPrope_tOracleOutput_5.put("password",dbPwd_tOracleOutput_5);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_5.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_5 = java.sql.DriverManager.getConnection(url_tOracleOutput_5, atnParamsPrope_tOracleOutput_5);
        resourceMap.put("conn_tOracleOutput_5", conn_tOracleOutput_5);
            conn_tOracleOutput_5.setAutoCommit(false);
            int commitEvery_tOracleOutput_5 = 10000;
            int commitCounter_tOracleOutput_5 = 0;
        int batchSize_tOracleOutput_5 = 10000;
        int batchSizeCounter_tOracleOutput_5=0;
        int count_tOracleOutput_5=0;

        if(dbschema_tOracleOutput_5 == null || dbschema_tOracleOutput_5.trim().length() == 0) {
            tableName_tOracleOutput_5 = ("ACM_FACTURA");
        } else {
            tableName_tOracleOutput_5 = dbschema_tOracleOutput_5 + "." + ("ACM_FACTURA");
        }
                String update_tOracleOutput_5 = "UPDATE " + tableName_tOracleOutput_5 + " SET VGLOSADO = ?,VAVALPAGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_5 = conn_tOracleOutput_5.prepareStatement(update_tOracleOutput_5);
                resourceMap.put("pstmt_tOracleOutput_5", pstmt_tOracleOutput_5);





 



/**
 * [tOracleOutput_5 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout11Struct copyOfout11_tmp = new copyOfout11Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";
	
	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_17");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row32Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    row32Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row36.FACTURA_ID = next_tHashInput_12.FACTURA_ID;
	row36.VTOTAL = next_tHashInput_12.VTOTAL;
	row36.SUMATORIA = next_tHashInput_12.SUMATORIA;

 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
						row14Struct row14 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row14HashKey.FACTURA_ID = row36.FACTURA_ID ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_9 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.FACTURA_ID = '" + row14HashKey.FACTURA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfout11 = null;

if(!rejectedInnerJoin_tMap_9 ) {

// # Output table : 'copyOfout11'
copyOfout11_tmp.ID = row36.FACTURA_ID ;
copyOfout11_tmp.VGLOSADO = row36.SUMATORIA;
copyOfout11_tmp.VAVALPAGO = (row36.SUMATORIA != 0)? 0.0 : row14.SUMA ;
copyOfout11 = copyOfout11_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfout11"
if(copyOfout11 != null) { 



	
	/**
	 * [tOracleOutput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout11"
						
						);
					}
					



        whetherReject_tOracleOutput_5 = false;
                    if(copyOfout11.VGLOSADO == null) {
pstmt_tOracleOutput_5.setNull(1, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_5.setDouble(1, copyOfout11.VGLOSADO);
}

                    if(copyOfout11.VAVALPAGO == null) {
pstmt_tOracleOutput_5.setNull(2, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_5.setDouble(2, copyOfout11.VAVALPAGO);
}


                    pstmt_tOracleOutput_5.setBigDecimal(3 + count_tOracleOutput_5, copyOfout11.ID);

                pstmt_tOracleOutput_5.addBatch();
                nb_line_tOracleOutput_5++;
                batchSizeCounter_tOracleOutput_5++;
            if (batchSize_tOracleOutput_5 > 0 &&  batchSize_tOracleOutput_5 <= batchSizeCounter_tOracleOutput_5) {
                try {
                    pstmt_tOracleOutput_5.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
			        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
			    	String errormessage_tOracleOutput_5;
					if (ne_tOracleOutput_5 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
						errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
					}else{
						errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_5);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                    updatedCount_tOracleOutput_5
                += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                batchSizeCounter_tOracleOutput_5 = 0;
            }
                commitCounter_tOracleOutput_5++;
                if(commitEvery_tOracleOutput_5 <= commitCounter_tOracleOutput_5) {
                    if(batchSizeCounter_tOracleOutput_5 > 0) {
                        try {
                            pstmt_tOracleOutput_5.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
					        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
					    	String errormessage_tOracleOutput_5;
							if (ne_tOracleOutput_5 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
								errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
							}else{
								errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_5);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
                            updatedCount_tOracleOutput_5
                        += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                        rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    }
                    conn_tOracleOutput_5.commit();
                    if(rowsToCommitCount_tOracleOutput_5 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_5 = 0;
                    }
                    commitCounter_tOracleOutput_5=0;
                    	batchSizeCounter_tOracleOutput_5=0;
                }

 


	tos_count_tOracleOutput_5++;

/**
 * [tOracleOutput_5 main ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	

 



/**
 * [tOracleOutput_5 process_data_end ] stop
 */

} // End of branch "copyOfout11"




	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_17");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tOracleOutput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_5 > 0) {
            try {
            	if (pstmt_tOracleOutput_5 != null) {
					
					pstmt_tOracleOutput_5.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_5){
globalMap.put("tOracleOutput_5_ERROR_MESSAGE",e_tOracleOutput_5.getMessage());
		        java.sql.SQLException ne_tOracleOutput_5 = e_tOracleOutput_5.getNextException(),sqle_tOracleOutput_5=null;
		    	String errormessage_tOracleOutput_5;
				if (ne_tOracleOutput_5 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_5 = new java.sql.SQLException(e_tOracleOutput_5.getMessage() + "\ncaused by: " + ne_tOracleOutput_5.getMessage(), ne_tOracleOutput_5.getSQLState(), ne_tOracleOutput_5.getErrorCode(), ne_tOracleOutput_5);
					errormessage_tOracleOutput_5 = sqle_tOracleOutput_5.getMessage();
				}else{
					errormessage_tOracleOutput_5 = e_tOracleOutput_5.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_5);
            	
        	}
        	if (pstmt_tOracleOutput_5 != null) {
            	tmp_batchUpdateCount_tOracleOutput_5 = pstmt_tOracleOutput_5.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_5
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
				rowsToCommitCount_tOracleOutput_5 += (tmp_batchUpdateCount_tOracleOutput_5!=-1?tmp_batchUpdateCount_tOracleOutput_5:0);
            }
        }
        if(pstmt_tOracleOutput_5 != null) {
			
				pstmt_tOracleOutput_5.close();
				resourceMap.remove("pstmt_tOracleOutput_5");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_5", true);
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
		}
		conn_tOracleOutput_5.commit();
		if(commitCounter_tOracleOutput_5 > 0 && rowsToCommitCount_tOracleOutput_5 != 0) {
			
			rowsToCommitCount_tOracleOutput_5 = 0;
		}
		commitCounter_tOracleOutput_5 = 0;
		
		
		conn_tOracleOutput_5 .close();
		
		resourceMap.put("finish_tOracleOutput_5", true);
   	

	
	nb_line_deleted_tOracleOutput_5=nb_line_deleted_tOracleOutput_5+ deletedCount_tOracleOutput_5;
	nb_line_update_tOracleOutput_5=nb_line_update_tOracleOutput_5 + updatedCount_tOracleOutput_5;
	nb_line_inserted_tOracleOutput_5=nb_line_inserted_tOracleOutput_5 + insertedCount_tOracleOutput_5;
	nb_line_rejected_tOracleOutput_5=nb_line_rejected_tOracleOutput_5 + rejectedCount_tOracleOutput_5;
	
        globalMap.put("tOracleOutput_5_NB_LINE",nb_line_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_UPDATED",nb_line_update_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_5);
        globalMap.put("tOracleOutput_5_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_5);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout11");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_5", true);
end_Hash.put("tOracleOutput_5", System.currentTimeMillis());




/**
 * [tOracleOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_12:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tOracleOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_5";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_5") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_5 = null;
                if ((pstmtToClose_tOracleOutput_5 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_5")) != null) {
                    pstmtToClose_tOracleOutput_5.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_5") == null){
            java.sql.Connection ctn_tOracleOutput_5 = null;
            if((ctn_tOracleOutput_5 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_5")) != null){
                try {
                    ctn_tOracleOutput_5.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_5) {
                    String errorMessage_tOracleOutput_5 = "failed to close the connection in tOracleOutput_5 :" + sqlEx_tOracleOutput_5.getMessage();
                    System.err.println(errorMessage_tOracleOutput_5);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout9Struct implements routines.system.IPersistableRow<copyOfout9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor Aval de pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return false;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return 0;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return false;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return 0;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "";
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return false;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return 50;
				}
				public Integer TFACTURAPrecision(){
				    return 0;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 20;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return 50;
				}
				public Integer NUMEROPrecision(){
				    return 0;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 50;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal MEDCONTRATOS_ID;

				public BigDecimal getMEDCONTRATOS_ID () {
					return this.MEDCONTRATOS_ID;
				}

				public Boolean MEDCONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean MEDCONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer MEDCONTRATOS_IDLength(){
				    return 0;
				}
				public Integer MEDCONTRATOS_IDPrecision(){
				    return null;
				}
				public String MEDCONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String MEDCONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDOriginalDbColumnName(){
				
					return "MEDCONTRATOS_ID";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return 0;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal SECUENCIA;

				public BigDecimal getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return 0;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "";
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return 0;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return "";
				
				}
				public String TCARGUEComment(){
				
				    return "";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",MEDCONTRATOS_ID="+String.valueOf(MEDCONTRATOS_ID));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();
copyOfout9Struct copyOfout9 = new copyOfout9Struct();





	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout9");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
                    String driverClass_tOracleOutput_4 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_4);
                String url_tOracleOutput_4 = null;
                    url_tOracleOutput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_4 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_4 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_4 = decryptedPassword_tOracleOutput_4;
                dbschema_tOracleOutput_4 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_4 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_4.put("user",dbUser_tOracleOutput_4);
                    atnParamsPrope_tOracleOutput_4.put("password",dbPwd_tOracleOutput_4);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_4.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_4 = java.sql.DriverManager.getConnection(url_tOracleOutput_4, atnParamsPrope_tOracleOutput_4);
        resourceMap.put("conn_tOracleOutput_4", conn_tOracleOutput_4);
            conn_tOracleOutput_4.setAutoCommit(false);
            int commitEvery_tOracleOutput_4 = 10000;
            int commitCounter_tOracleOutput_4 = 0;
        int batchSize_tOracleOutput_4 = 10000;
        int batchSizeCounter_tOracleOutput_4=0;
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("ACM_HFACTURAS");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("ACM_HFACTURAS");
        }
                String insert_tOracleOutput_4 = "INSERT INTO " + tableName_tOracleOutput_4 + " (ETAPASNORMATIVIDAD_ID,FACTURA_ID,USUARIOS_ID,UORG_ID,VGLOSADO,VAVALPAGO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(insert_tOracleOutput_4);
                        resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout9Struct copyOfout9_tmp = new copyOfout9Struct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				String driverClass_tOracleInput_13 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_13);
				
			String url_tOracleInput_13 = null;
				url_tOracleInput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_13 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_13 = context.db_origen_Password; 

				String dbPwd_tOracleInput_13 = decryptedPassword_tOracleInput_13;

				
					java.util.Properties atnParamsPrope_tOracleInput_13 = new java.util.Properties();
					atnParamsPrope_tOracleInput_13.put("user",dbUser_tOracleInput_13);
					atnParamsPrope_tOracleInput_13.put("password",dbPwd_tOracleInput_13);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_13.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_13 = java.sql.DriverManager.getConnection(url_tOracleInput_13, atnParamsPrope_tOracleInput_13);
				java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_13.next()) {
					sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
				}
                                if (!(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                                }
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement();

		    String dbquery_tOracleInput_13 = "SELECT * FROM ACM_FACTURA WHERE RECEPCION_ID ="+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row27.ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row27.ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row27.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row27.RECEPCION_ID = rs_tOracleInput_13.getBigDecimal(2);
					} else {
				
						row27.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row27.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(3) != null) {
						row27.CONTRATOS_ID = rs_tOracleInput_13.getBigDecimal(3);
					} else {
				
						row27.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 4) {
								row27.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(4) != null) {
						row27.PRESTADOR_ID = rs_tOracleInput_13.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 5) {
								row27.CANTPACIENTES = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(5) != null) {
						row27.CANTPACIENTES = rs_tOracleInput_13.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 6) {
								row27.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(6) != null) {
						row27.VALOR = rs_tOracleInput_13.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 7) {
								row27.VCALCULADO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(7) != null) {
						row27.VCALCULADO = rs_tOracleInput_13.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 8) {
								row27.TFACTURA = null;
							} else {
	                         		
        	row27.TFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 9) {
								row27.FECHA = null;
							} else {
										
			row27.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_13, 9);
		                    }
							if(colQtyInRs_tOracleInput_13 < 10) {
								row27.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(10) != null) {
						row27.USUARIOS_ID = rs_tOracleInput_13.getBigDecimal(10);
					} else {
				
						row27.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 11) {
								row27.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(11) != null) {
						row27.UORG_ID = rs_tOracleInput_13.getBigDecimal(11);
					} else {
				
						row27.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 12) {
								row27.ESTADO = null;
							} else {
	                         		
        	row27.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 13) {
								row27.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(13) != null) {
						row27.ESTREGISTRO_ID = rs_tOracleInput_13.getBigDecimal(13);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 14) {
								row27.NUMERO = null;
							} else {
	                         		
        	row27.NUMERO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 15) {
								row27.PREFIJO = null;
							} else {
	                         		
        	row27.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 16) {
								row27.MEDCONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(16) != null) {
						row27.MEDCONTRATOS_ID = rs_tOracleInput_13.getBigDecimal(16);
					} else {
				
						row27.MEDCONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 17) {
								row27.DCARGUE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(17) != null) {
						row27.DCARGUE_ID = rs_tOracleInput_13.getBigDecimal(17);
					} else {
				
						row27.DCARGUE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 18) {
								row27.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(18) != null) {
						row27.VGLOSADO = rs_tOracleInput_13.getBigDecimal(18);
					} else {
				
						row27.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 19) {
								row27.SECUENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(19) != null) {
						row27.SECUENCIA = rs_tOracleInput_13.getBigDecimal(19);
					} else {
				
						row27.SECUENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 20) {
								row27.TCARGUE = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(20) != null) {
						row27.TCARGUE = rs_tOracleInput_13.getBigDecimal(20);
					} else {
				
						row27.TCARGUE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 21) {
								row27.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(21) != null) {
						row27.VSOPORTADO = rs_tOracleInput_13.getBigDecimal(21);
					} else {
				
						row27.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 22) {
								row27.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(22) != null) {
						row27.VACEPTADO = rs_tOracleInput_13.getBigDecimal(22);
					} else {
				
						row27.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 23) {
								row27.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(23) != null) {
						row27.VRATIFICADO = rs_tOracleInput_13.getBigDecimal(23);
					} else {
				
						row27.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 24) {
								row27.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(24) != null) {
						row27.VAVALPAGO = rs_tOracleInput_13.getBigDecimal(24);
					} else {
				
						row27.VAVALPAGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

copyOfout9 = null;


// # Output table : 'copyOfout9'
copyOfout9_tmp.ETAPASNORMATIVIDAD_ID = context.ETAPASNORMATIVIDAD_ID;
copyOfout9_tmp.FACTURA_ID = row27.ID ;
copyOfout9_tmp.USUARIOS_ID = row27.USUARIOS_ID ;
copyOfout9_tmp.UORG_ID = row27.UORG_ID ;
copyOfout9_tmp.VGLOSADO = row27.VGLOSADO ;
copyOfout9_tmp.VAVALPAGO = row27.VAVALPAGO ;
copyOfout9_tmp.HAUDITORIAS_ID = context.HAUDITORIA_ID;
copyOfout9 = copyOfout9_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "copyOfout9"
if(copyOfout9 != null) { 



	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout9"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                        pstmt_tOracleOutput_4.setBigDecimal(1, copyOfout9.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(2, copyOfout9.FACTURA_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(3, copyOfout9.USUARIOS_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(4, copyOfout9.UORG_ID);

                        pstmt_tOracleOutput_4.setBigDecimal(5, copyOfout9.VGLOSADO);

                        pstmt_tOracleOutput_4.setBigDecimal(6, copyOfout9.VAVALPAGO);

                        pstmt_tOracleOutput_4.setBigDecimal(7, copyOfout9.HAUDITORIAS_ID);

                pstmt_tOracleOutput_4.addBatch();
                nb_line_tOracleOutput_4++;
                batchSizeCounter_tOracleOutput_4++;
            if (batchSize_tOracleOutput_4 > 0 &&  batchSize_tOracleOutput_4 <= batchSizeCounter_tOracleOutput_4) {
                try {
                    pstmt_tOracleOutput_4.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
			        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
			    	String errormessage_tOracleOutput_4;
					if (ne_tOracleOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
						errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
					}else{
						errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_4);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                    insertedCount_tOracleOutput_4
                += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                batchSizeCounter_tOracleOutput_4 = 0;
            }
                commitCounter_tOracleOutput_4++;
                if(commitEvery_tOracleOutput_4 <= commitCounter_tOracleOutput_4) {
                    if(batchSizeCounter_tOracleOutput_4 > 0) {
                        try {
                            pstmt_tOracleOutput_4.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
					        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
					    	String errormessage_tOracleOutput_4;
							if (ne_tOracleOutput_4 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
								errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
							}else{
								errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_4);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                            insertedCount_tOracleOutput_4
                        += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                        rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    }
                    conn_tOracleOutput_4.commit();
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_4 = 0;
                    }
                    commitCounter_tOracleOutput_4=0;
                    	batchSizeCounter_tOracleOutput_4=0;
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */

} // End of branch "copyOfout9"




	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
	if(conn_tOracleInput_13 != null && !conn_tOracleInput_13.isClosed()) {
	
			conn_tOracleInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_4 > 0) {
            try {
            	if (pstmt_tOracleOutput_4 != null) {
					
					pstmt_tOracleOutput_4.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
		        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
		    	String errormessage_tOracleOutput_4;
				if (ne_tOracleOutput_4 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
					errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
				}else{
					errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_4);
            	
        	}
        	if (pstmt_tOracleOutput_4 != null) {
            	tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_4
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
				rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
            }
        }
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
		}
		conn_tOracleOutput_4.commit();
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
			rowsToCommitCount_tOracleOutput_4 = 0;
		}
		commitCounter_tOracleOutput_4 = 0;
		
		
		conn_tOracleOutput_4 .close();
		
		resourceMap.put("finish_tOracleOutput_4", true);
   	

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout9");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tHashInput_13Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_4") == null){
            java.sql.Connection ctn_tOracleOutput_4 = null;
            if((ctn_tOracleOutput_4 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_4")) != null){
                try {
                    ctn_tOracleOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_4) {
                    String errorMessage_tOracleOutput_4 = "failed to close the connection in tOracleOutput_4 :" + sqlEx_tOracleOutput_4.getMessage();
                    System.err.println(errorMessage_tOracleOutput_4);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class UpdDfacmStruct implements routines.system.IPersistableRow<UpdDfacmStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102027\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Double VGLOSADO;

				public Double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double VAVALPAGO;

				public Double getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return null;
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UpdDfacmStruct other = (UpdDfacmStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UpdDfacmStruct other) {

		other.ID = this.ID;
	            other.VGLOSADO = this.VGLOSADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            
	}

	public void copyKeysDataTo(UpdDfacmStruct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UpdDfacmStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row53Struct implements routines.system.IPersistableRow<row53Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public double VGLOSADO;

				public double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return false;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row53Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_7 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_7> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public double VGLOSADO;

				public double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return false;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_7 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out18Struct implements routines.system.IPersistableRow<out18Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public double VGLOSADO;

				public double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return false;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			        this.VGLOSADO = dis.readDouble();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// double
				
		            	dos.writeDouble(this.VGLOSADO);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_13Struct implements routines.system.IPersistableRow<after_tHashInput_13Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_11Process(globalMap);

		row34Struct row34 = new row34Struct();
out18Struct out18 = new out18Struct();
row53Struct row53 = new row53Struct();
UpdDfacmStruct UpdDfacm = new UpdDfacmStruct();





	
	/**
	 * [tAggregateRow_7_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGOUT", false);
		start_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out18");
					}
				
		int tos_count_tAggregateRow_7_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_7 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_7 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_7 utilClass_tAggregateRow_7 = new UtilClass_tAggregateRow_7();

	

	class AggOperationStruct_tAggregateRow_7 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal ID;BigDecimal SUMA_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_7 other = (AggOperationStruct_tAggregateRow_7) obj;
			
							if (this.ID == null) {
								if (other.ID != null) 
									return false;
							} else if (!this.ID.equals(other.ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_7 operation_result_tAggregateRow_7 = null;
	AggOperationStruct_tAggregateRow_7 operation_finder_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();
	java.util.Map<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7> hash_tAggregateRow_7 = new java.util.HashMap<AggOperationStruct_tAggregateRow_7,AggOperationStruct_tAggregateRow_7>();
	

 



/**
 * [tAggregateRow_7_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_14", false);
		start_Hash.put("tMap_14", System.currentTimeMillis());
		
	
	currentComponent="tMap_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tMap_14 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_14__Struct  {
}
Var__tMap_14__Struct Var__tMap_14 = new Var__tMap_14__Struct();
// ###############################

// ###############################
// # Outputs initialization
out18Struct out18_tmp = new out18Struct();
// ###############################

        
        



        









 



/**
 * [tMap_14 begin ] stop
 */



	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";
	
	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out20Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out20Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    out20Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row34.ID = next_tHashInput_13.ID;
	row34.RECEPCION_ID = next_tHashInput_13.RECEPCION_ID;
	row34.FACTURA_ID = next_tHashInput_13.FACTURA_ID;
	row34.NUMERO_FACTURA = next_tHashInput_13.NUMERO_FACTURA;
	row34.VTOTAL = next_tHashInput_13.VTOTAL;
	row34.VINFORMATIVO = next_tHashInput_13.VINFORMATIVO;
	row34.GLOSACAUSADA = next_tHashInput_13.GLOSACAUSADA;
	row34.SIGLA = next_tHashInput_13.SIGLA;

 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tMap_14 main ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_14 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_14 = false;
		boolean mainRowRejected_tMap_14 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_14__Struct Var = Var__tMap_14;// ###############################
        // ###############################
        // # Output tables

out18 = null;


// # Output table : 'out18'
out18_tmp.ID = row34.ID ;
out18_tmp.VGLOSADO = row34.VTOTAL ;
out18_tmp.SUMA = null;
out18 = out18_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_14 = false;










 


	tos_count_tMap_14++;

/**
 * [tMap_14 main ] stop
 */
	
	/**
	 * [tMap_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_begin ] stop
 */
// Start of branch "out18"
if(out18 != null) { 



	
	/**
	 * [tAggregateRow_7_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out18"
						
						);
					}
					
	
operation_finder_tAggregateRow_7.ID = out18.ID;
			

	operation_finder_tAggregateRow_7.hashCodeDirty = true;
	
	operation_result_tAggregateRow_7 = hash_tAggregateRow_7.get(operation_finder_tAggregateRow_7);

	

	if(operation_result_tAggregateRow_7 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_7 = new AggOperationStruct_tAggregateRow_7();

		operation_result_tAggregateRow_7.ID = operation_finder_tAggregateRow_7.ID;
				
		
		

		hash_tAggregateRow_7.put(operation_result_tAggregateRow_7, operation_result_tAggregateRow_7);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_7.SUMA_sum == null) {
						operation_result_tAggregateRow_7.SUMA_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_7.SUMA_sum = operation_result_tAggregateRow_7.SUMA_sum.add(
						new BigDecimal(
							String.valueOf(
								out18.VGLOSADO
							)
						)
					);
					


 


	tos_count_tAggregateRow_7_AGGOUT++;

/**
 * [tAggregateRow_7_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

 



/**
 * [tAggregateRow_7_AGGOUT process_data_end ] stop
 */

} // End of branch "out18"




	
	/**
	 * [tMap_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */

	
	/**
	 * [tMap_14 end ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tMap_14", true);
end_Hash.put("tMap_14", System.currentTimeMillis());




/**
 * [tMap_14 end ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out18");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_7_AGGOUT", true);
end_Hash.put("tAggregateRow_7_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_8", false);
		start_Hash.put("tOracleOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UpdDfacm");
					}
				
		int tos_count_tOracleOutput_8 = 0;
		






        int updateKeyCount_tOracleOutput_8 = 1;
        if(updateKeyCount_tOracleOutput_8 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_8 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_8 = 0;
    int nb_line_update_tOracleOutput_8 = 0;
    int nb_line_inserted_tOracleOutput_8 = 0;
    int nb_line_deleted_tOracleOutput_8 = 0;
    int nb_line_rejected_tOracleOutput_8 = 0;

    int tmp_batchUpdateCount_tOracleOutput_8 = 0;

    int deletedCount_tOracleOutput_8=0;
    int updatedCount_tOracleOutput_8=0;
    int insertedCount_tOracleOutput_8=0;
    int rowsToCommitCount_tOracleOutput_8=0;
    int rejectedCount_tOracleOutput_8=0;

    boolean whetherReject_tOracleOutput_8 = false;

    java.sql.Connection conn_tOracleOutput_8 = null;

    //optional table
    String dbschema_tOracleOutput_8 = null;
    String tableName_tOracleOutput_8 = null;
                    String driverClass_tOracleOutput_8 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_8);
                String url_tOracleOutput_8 = null;
                    url_tOracleOutput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_8 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_8 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_8 = decryptedPassword_tOracleOutput_8;
                dbschema_tOracleOutput_8 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_8 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_8.put("user",dbUser_tOracleOutput_8);
                    atnParamsPrope_tOracleOutput_8.put("password",dbPwd_tOracleOutput_8);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_8.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_8 = java.sql.DriverManager.getConnection(url_tOracleOutput_8, atnParamsPrope_tOracleOutput_8);
        resourceMap.put("conn_tOracleOutput_8", conn_tOracleOutput_8);
            conn_tOracleOutput_8.setAutoCommit(false);
            int commitEvery_tOracleOutput_8 = 10000;
            int commitCounter_tOracleOutput_8 = 0;
        int batchSize_tOracleOutput_8 = 10000;
        int batchSizeCounter_tOracleOutput_8=0;
        int count_tOracleOutput_8=0;

        if(dbschema_tOracleOutput_8 == null || dbschema_tOracleOutput_8.trim().length() == 0) {
            tableName_tOracleOutput_8 = ("ACM_DFACTURAFORMULACION");
        } else {
            tableName_tOracleOutput_8 = dbschema_tOracleOutput_8 + "." + ("ACM_DFACTURAFORMULACION");
        }
                String update_tOracleOutput_8 = "UPDATE " + tableName_tOracleOutput_8 + " SET VGLOSADO = ?,VAVALPAGO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_8 = conn_tOracleOutput_8.prepareStatement(update_tOracleOutput_8);
                resourceMap.put("pstmt_tOracleOutput_8", pstmt_tOracleOutput_8);





 



/**
 * [tOracleOutput_8 begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row53");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
					globalMap.get( "tHash_Lookup_row33" ))
					;					
					
	

row33Struct row33HashKey = new row33Struct();
row33Struct row33Default = new row33Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
UpdDfacmStruct UpdDfacm_tmp = new UpdDfacmStruct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_7_AGGIN", false);
		start_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	
		int tos_count_tAggregateRow_7_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_7> values_tAggregateRow_7 = hash_tAggregateRow_7.values();

globalMap.put("tAggregateRow_7_NB_LINE", values_tAggregateRow_7.size());

for(AggOperationStruct_tAggregateRow_7 aggregated_row_tAggregateRow_7 : values_tAggregateRow_7) { // G_AggR_600



 



/**
 * [tAggregateRow_7_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

            				    row53.ID = aggregated_row_tAggregateRow_7.ID;
            				    
    								if(aggregated_row_tAggregateRow_7.SUMA_sum != null) {
    								row53.SUMA = aggregated_row_tAggregateRow_7.SUMA_sum.doubleValue();
										
    								}else{
    								
    									row53.SUMA = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_7_AGGIN++;

/**
 * [tAggregateRow_7_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

 



/**
 * [tAggregateRow_7_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row53"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
						row33Struct row33 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row33" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow33 = false;
       		  	    	
       		  	    	
 							row33Struct row33ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_10) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_10 = false;
								
                        		    		    row33HashKey.ID = row53.ID ;
                        		    		

								
		                        	row33HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row33.lookup( row33HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row33 != null && tHash_Lookup_row33.getCount(row33HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row33' and it contains more one result from keys :  row33.ID = '" + row33HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row33Struct fromLookup_row33 = null;
							row33 = row33Default;
										 
							
								 
							
							
								if (tHash_Lookup_row33 !=null && tHash_Lookup_row33.hasNext()) { // G 099
								
							
								
								fromLookup_row33 = tHash_Lookup_row33.next();

							
							
								} // G 099
							
							

							if(fromLookup_row33 != null) {
								row33 = fromLookup_row33;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

UpdDfacm = null;


// # Output table : 'UpdDfacm'
UpdDfacm_tmp.ID = row53.ID ;
UpdDfacm_tmp.VGLOSADO = row53.SUMA ;
UpdDfacm_tmp.VAVALPAGO = (row53.SUMA != 0)? 0.0 : row33.VTOTAL.doubleValue() ;
UpdDfacm = UpdDfacm_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "UpdDfacm"
if(UpdDfacm != null) { 



	
	/**
	 * [tOracleOutput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UpdDfacm"
						
						);
					}
					



        whetherReject_tOracleOutput_8 = false;
                    if(UpdDfacm.VGLOSADO == null) {
pstmt_tOracleOutput_8.setNull(1, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_8.setDouble(1, UpdDfacm.VGLOSADO);
}

                    if(UpdDfacm.VAVALPAGO == null) {
pstmt_tOracleOutput_8.setNull(2, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_8.setDouble(2, UpdDfacm.VAVALPAGO);
}


                    pstmt_tOracleOutput_8.setBigDecimal(3 + count_tOracleOutput_8, UpdDfacm.ID);

                pstmt_tOracleOutput_8.addBatch();
                nb_line_tOracleOutput_8++;
                batchSizeCounter_tOracleOutput_8++;
            if (batchSize_tOracleOutput_8 > 0 &&  batchSize_tOracleOutput_8 <= batchSizeCounter_tOracleOutput_8) {
                try {
                    pstmt_tOracleOutput_8.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
			        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
			    	String errormessage_tOracleOutput_8;
					if (ne_tOracleOutput_8 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
						errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
					}else{
						errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_8);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                    updatedCount_tOracleOutput_8
                += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                batchSizeCounter_tOracleOutput_8 = 0;
            }
                commitCounter_tOracleOutput_8++;
                if(commitEvery_tOracleOutput_8 <= commitCounter_tOracleOutput_8) {
                    if(batchSizeCounter_tOracleOutput_8 > 0) {
                        try {
                            pstmt_tOracleOutput_8.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
					        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
					    	String errormessage_tOracleOutput_8;
							if (ne_tOracleOutput_8 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
								errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
							}else{
								errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_8);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
                            updatedCount_tOracleOutput_8
                        += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                        rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    }
                    conn_tOracleOutput_8.commit();
                    if(rowsToCommitCount_tOracleOutput_8 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_8 = 0;
                    }
                    commitCounter_tOracleOutput_8=0;
                    	batchSizeCounter_tOracleOutput_8=0;
                }

 


	tos_count_tOracleOutput_8++;

/**
 * [tOracleOutput_8 main ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	

 



/**
 * [tOracleOutput_8 process_data_end ] stop
 */

} // End of branch "UpdDfacm"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_7_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

 



/**
 * [tAggregateRow_7_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_7_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_7_AGGIN", true);
end_Hash.put("tAggregateRow_7_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_7_AGGIN end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row33 != null) {
						tHash_Lookup_row33.endGet();
					}
					globalMap.remove( "tHash_Lookup_row33" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row53");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tOracleOutput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_8 > 0) {
            try {
            	if (pstmt_tOracleOutput_8 != null) {
					
					pstmt_tOracleOutput_8.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_8){
globalMap.put("tOracleOutput_8_ERROR_MESSAGE",e_tOracleOutput_8.getMessage());
		        java.sql.SQLException ne_tOracleOutput_8 = e_tOracleOutput_8.getNextException(),sqle_tOracleOutput_8=null;
		    	String errormessage_tOracleOutput_8;
				if (ne_tOracleOutput_8 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_8 = new java.sql.SQLException(e_tOracleOutput_8.getMessage() + "\ncaused by: " + ne_tOracleOutput_8.getMessage(), ne_tOracleOutput_8.getSQLState(), ne_tOracleOutput_8.getErrorCode(), ne_tOracleOutput_8);
					errormessage_tOracleOutput_8 = sqle_tOracleOutput_8.getMessage();
				}else{
					errormessage_tOracleOutput_8 = e_tOracleOutput_8.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_8);
            	
        	}
        	if (pstmt_tOracleOutput_8 != null) {
            	tmp_batchUpdateCount_tOracleOutput_8 = pstmt_tOracleOutput_8.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_8
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
				rowsToCommitCount_tOracleOutput_8 += (tmp_batchUpdateCount_tOracleOutput_8!=-1?tmp_batchUpdateCount_tOracleOutput_8:0);
            }
        }
        if(pstmt_tOracleOutput_8 != null) {
			
				pstmt_tOracleOutput_8.close();
				resourceMap.remove("pstmt_tOracleOutput_8");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_8", true);
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
		}
		conn_tOracleOutput_8.commit();
		if(commitCounter_tOracleOutput_8 > 0 && rowsToCommitCount_tOracleOutput_8 != 0) {
			
			rowsToCommitCount_tOracleOutput_8 = 0;
		}
		commitCounter_tOracleOutput_8 = 0;
		
		
		conn_tOracleOutput_8 .close();
		
		resourceMap.put("finish_tOracleOutput_8", true);
   	

	
	nb_line_deleted_tOracleOutput_8=nb_line_deleted_tOracleOutput_8+ deletedCount_tOracleOutput_8;
	nb_line_update_tOracleOutput_8=nb_line_update_tOracleOutput_8 + updatedCount_tOracleOutput_8;
	nb_line_inserted_tOracleOutput_8=nb_line_inserted_tOracleOutput_8 + insertedCount_tOracleOutput_8;
	nb_line_rejected_tOracleOutput_8=nb_line_rejected_tOracleOutput_8 + rejectedCount_tOracleOutput_8;
	
        globalMap.put("tOracleOutput_8_NB_LINE",nb_line_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_UPDATED",nb_line_update_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_8);
        globalMap.put("tOracleOutput_8_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_8);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UpdDfacm");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_8", true);
end_Hash.put("tOracleOutput_8", System.currentTimeMillis());




/**
 * [tOracleOutput_8 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_13:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_10"
					     			globalMap.remove("tHash_Lookup_row33"); 
				     			
							//free memory for "tAggregateRow_7_AGGIN"
							globalMap.remove("tAggregateRow_7");
						
				try{
					
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 finally ] stop
 */

	
	/**
	 * [tMap_14 finally ] start
	 */

	

	
	
	currentComponent="tMap_14";
	
	

 



/**
 * [tMap_14 finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGOUT";
	
	

 



/**
 * [tAggregateRow_7_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_7_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_7";
	
	currentComponent="tAggregateRow_7_AGGIN";
	
	

 



/**
 * [tAggregateRow_7_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tOracleOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_8";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_8") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_8 = null;
                if ((pstmtToClose_tOracleOutput_8 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_8")) != null) {
                    pstmtToClose_tOracleOutput_8.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_8") == null){
            java.sql.Connection ctn_tOracleOutput_8 = null;
            if((ctn_tOracleOutput_8 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_8")) != null){
                try {
                    ctn_tOracleOutput_8.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_8) {
                    String errorMessage_tOracleOutput_8 = "failed to close the connection in tOracleOutput_8 :" + sqlEx_tOracleOutput_8.getMessage();
                    System.err.println(errorMessage_tOracleOutput_8);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_8 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class InsHdfacStruct implements routines.system.IPersistableRow<InsHdfacStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "Observaciones del historico de los servicios registrados";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal DFACTURAFORMULACION_ID;

				public BigDecimal getDFACTURAFORMULACION_ID () {
					return this.DFACTURAFORMULACION_ID;
				}

				public Boolean DFACTURAFORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURAFORMULACION_IDIsKey(){
				    return false;
				}
				public Integer DFACTURAFORMULACION_IDLength(){
				    return 0;
				}
				public Integer DFACTURAFORMULACION_IDPrecision(){
				    return null;
				}
				public String DFACTURAFORMULACION_IDDefault(){
				
					return null;
				
				}
				public String DFACTURAFORMULACION_IDComment(){
				
				    return "FK - ACM_DFACTURAFORMULACION";
				
				}
				public String DFACTURAFORMULACION_IDPattern(){
				
					return "";
				
				}
				public String DFACTURAFORMULACION_IDOriginalDbColumnName(){
				
					return "DFACTURAFORMULACION_ID";
				
				}

				
			    public BigDecimal VLGLOSADO;

				public BigDecimal getVLGLOSADO () {
					return this.VLGLOSADO;
				}

				public Boolean VLGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VLGLOSADOIsKey(){
				    return false;
				}
				public Integer VLGLOSADOLength(){
				    return 0;
				}
				public Integer VLGLOSADOPrecision(){
				    return null;
				}
				public String VLGLOSADODefault(){
				
					return "0";
				
				}
				public String VLGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VLGLOSADOPattern(){
				
					return "";
				
				}
				public String VLGLOSADOOriginalDbColumnName(){
				
					return "VLGLOSADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor aval de pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",DFACTURAFORMULACION_ID="+String.valueOf(DFACTURAFORMULACION_ID));
		sb.append(",VLGLOSADO="+String.valueOf(VLGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsHdfacStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return false;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return "";
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return "";
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return "";
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return "";
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return "";
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return "";
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return "";
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return "";
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return "";
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return "";
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return "";
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return "";
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "";
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return "";
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return "";
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return "";
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return "";
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_14Struct implements routines.system.IPersistableRow<after_tOracleInput_14Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return false;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return "";
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return "";
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return "";
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return "";
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return "";
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return "";
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return "";
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return "";
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return "";
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return "";
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return "";
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return "";
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "";
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return "";
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return "";
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return "";
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return "";
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_14Process(globalMap);

		row28Struct row28 = new row28Struct();
InsHdfacStruct InsHdfac = new InsHdfacStruct();





	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsHdfac");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
                    String driverClass_tOracleOutput_6 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_6);
                String url_tOracleOutput_6 = null;
                    url_tOracleOutput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_6 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_6 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_6 = decryptedPassword_tOracleOutput_6;
                dbschema_tOracleOutput_6 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_6 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_6.put("user",dbUser_tOracleOutput_6);
                    atnParamsPrope_tOracleOutput_6.put("password",dbPwd_tOracleOutput_6);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_6.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_6 = java.sql.DriverManager.getConnection(url_tOracleOutput_6, atnParamsPrope_tOracleOutput_6);
        resourceMap.put("conn_tOracleOutput_6", conn_tOracleOutput_6);
            conn_tOracleOutput_6.setAutoCommit(false);
            int commitEvery_tOracleOutput_6 = 10000;
            int commitCounter_tOracleOutput_6 = 0;
        int batchSize_tOracleOutput_6 = 10000;
        int batchSizeCounter_tOracleOutput_6=0;
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("ACM_HDFACTURASERVICIO");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("ACM_HDFACTURASERVICIO");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (ETAPASNORMATIVIDAD_ID,OBSERVACIONES,USUARIOS_ID,UORG_ID,DFACTURAFORMULACION_ID,VLGLOSADO,VAVALPAGO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_20", false);
		start_Hash.put("tMap_20", System.currentTimeMillis());
		
	
	currentComponent="tMap_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tMap_20 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
					globalMap.get( "tHash_Lookup_row35" ))
					;					
					
	

row35Struct row35HashKey = new row35Struct();
row35Struct row35Default = new row35Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_20__Struct  {
}
Var__tMap_20__Struct Var__tMap_20 = new Var__tMap_20__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsHdfacStruct InsHdfac_tmp = new InsHdfacStruct();
// ###############################

        
        



        









 



/**
 * [tMap_20 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				String driverClass_tOracleInput_14 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_14);
				
			String url_tOracleInput_14 = null;
				url_tOracleInput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_14 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_14 = context.db_origen_Password; 

				String dbPwd_tOracleInput_14 = decryptedPassword_tOracleInput_14;

				
					java.util.Properties atnParamsPrope_tOracleInput_14 = new java.util.Properties();
					atnParamsPrope_tOracleInput_14.put("user",dbUser_tOracleInput_14);
					atnParamsPrope_tOracleInput_14.put("password",dbPwd_tOracleInput_14);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_14.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_14 = java.sql.DriverManager.getConnection(url_tOracleInput_14, atnParamsPrope_tOracleInput_14);
				java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_14.next()) {
					sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
				}
                                if (!(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                                }
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement();

		    String dbquery_tOracleInput_14 = "SELECT * FROM ACM_DFACTURAFORMULACION WHERE RECEPCION_ID ="+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row28.ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row28.ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row28.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(2) != null) {
						row28.RECEPCION_ID = rs_tOracleInput_14.getBigDecimal(2);
					} else {
				
						row28.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 3) {
								row28.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(3) != null) {
						row28.FACTURA_ID = rs_tOracleInput_14.getBigDecimal(3);
					} else {
				
						row28.FACTURA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 4) {
								row28.PREFIJO = null;
							} else {
	                         		
        	row28.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 5) {
								row28.NUMERO_FACTURA = null;
							} else {
	                         		
        	row28.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 6) {
								row28.LUGAR = null;
							} else {
	                         		
        	row28.LUGAR = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 7) {
								row28.PERIODO = null;
							} else {
										
			row28.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_14, 7);
		                    }
							if(colQtyInRs_tOracleInput_14 < 8) {
								row28.SIGLAESM = null;
							} else {
	                         		
        	row28.SIGLAESM = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 9) {
								row28.SIGLAFUERZA = null;
							} else {
	                         		
        	row28.SIGLAFUERZA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 10) {
								row28.FORMULA = null;
							} else {
	                         		
        	row28.FORMULA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 11) {
								row28.TIRILLA = null;
							} else {
	                         		
        	row28.TIRILLA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 12) {
								row28.FFORMUALCION = null;
							} else {
										
			row28.FFORMUALCION = routines.system.JDBCUtil.getDate(rs_tOracleInput_14, 12);
		                    }
							if(colQtyInRs_tOracleInput_14 < 13) {
								row28.FDISPENSACION = null;
							} else {
										
			row28.FDISPENSACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_14, 13);
		                    }
							if(colQtyInRs_tOracleInput_14 < 14) {
								row28.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row28.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 15) {
								row28.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row28.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 16) {
								row28.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row28.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 17) {
								row28.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row28.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 18) {
								row28.DOCUMENTO = null;
							} else {
	                         		
        	row28.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 19) {
								row28.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(19) != null) {
						row28.TDOCUMENTOS_ID = rs_tOracleInput_14.getBigDecimal(19);
					} else {
				
						row28.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 20) {
								row28.TFORMULAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(20) != null) {
						row28.TFORMULAS_ID = rs_tOracleInput_14.getBigDecimal(20);
					} else {
				
						row28.TFORMULAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 21) {
								row28.TORIGEN_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(21) != null) {
						row28.TORIGEN_ID = rs_tOracleInput_14.getBigDecimal(21);
					} else {
				
						row28.TORIGEN_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 22) {
								row28.CODIGOCUM = null;
							} else {
	                         		
        	row28.CODIGOCUM = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 23) {
								row28.INVIMA = null;
							} else {
	                         		
        	row28.INVIMA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 24) {
								row28.CODIGOSSMP = null;
							} else {
	                         		
        	row28.CODIGOSSMP = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 25) {
								row28.NOMBREMEDICAMENTO = null;
							} else {
	                         		
        	row28.NOMBREMEDICAMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 26) {
								row28.LABORATORIO = null;
							} else {
	                         		
        	row28.LABORATORIO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 27) {
								row28.BODEGA = null;
							} else {
	                         		
        	row28.BODEGA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 28) {
								row28.LOTE = null;
							} else {
	                         		
        	row28.LOTE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 29) {
								row28.FVENCIMIENTO = null;
							} else {
										
			row28.FVENCIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_14, 29);
		                    }
							if(colQtyInRs_tOracleInput_14 < 30) {
								row28.CANTFORMULADA = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(30) != null) {
						row28.CANTFORMULADA = rs_tOracleInput_14.getBigDecimal(30);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 31) {
								row28.CANTENTREGADA = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(31) != null) {
						row28.CANTENTREGADA = rs_tOracleInput_14.getBigDecimal(31);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 32) {
								row28.VUNITARIO = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(32) != null) {
						row28.VUNITARIO = rs_tOracleInput_14.getBigDecimal(32);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 33) {
								row28.SUBTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(33) != null) {
						row28.SUBTOTAL = rs_tOracleInput_14.getBigDecimal(33);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 34) {
								row28.INTERMEDIACION = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(34) != null) {
						row28.INTERMEDIACION = rs_tOracleInput_14.getBigDecimal(34);
					} else {
				
						row28.INTERMEDIACION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 35) {
								row28.VTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(35) != null) {
						row28.VTOTAL = rs_tOracleInput_14.getBigDecimal(35);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 36) {
								row28.VGRAVADO = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(36) != null) {
						row28.VGRAVADO = rs_tOracleInput_14.getBigDecimal(36);
					} else {
				
						row28.VGRAVADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 37) {
								row28.DCARGUE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(37) != null) {
						row28.DCARGUE_ID = rs_tOracleInput_14.getBigDecimal(37);
					} else {
				
						row28.DCARGUE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 38) {
								row28.DFORMMEDINSUMOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(38) != null) {
						row28.DFORMMEDINSUMOS_ID = rs_tOracleInput_14.getBigDecimal(38);
					} else {
				
						row28.DFORMMEDINSUMOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 39) {
								row28.FECHA = null;
							} else {
										
			row28.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_14, 39);
		                    }
							if(colQtyInRs_tOracleInput_14 < 40) {
								row28.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(40) != null) {
						row28.USUARIOS_ID = rs_tOracleInput_14.getBigDecimal(40);
					} else {
				
						row28.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 41) {
								row28.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(41) != null) {
						row28.UORG_ID = rs_tOracleInput_14.getBigDecimal(41);
					} else {
				
						row28.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 42) {
								row28.ESTADO = null;
							} else {
	                         		
        	row28.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 42, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 43) {
								row28.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(43) != null) {
						row28.ESTREGISTRO_ID = rs_tOracleInput_14.getBigDecimal(43);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 44) {
								row28.TIPIFICACION = null;
							} else {
	                         		
        	row28.TIPIFICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 44, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 45) {
								row28.TDOCUMENTO = null;
							} else {
	                         		
        	row28.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 45, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 46) {
								row28.TFORMULA = null;
							} else {
	                         		
        	row28.TFORMULA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 46, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 47) {
								row28.TORIGEN = null;
							} else {
	                         		
        	row28.TORIGEN = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 47, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 48) {
								row28.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(48) != null) {
						row28.VGLOSADO = rs_tOracleInput_14.getBigDecimal(48);
					} else {
				
						row28.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 49) {
								row28.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(49) != null) {
						row28.VSOPORTADO = rs_tOracleInput_14.getBigDecimal(49);
					} else {
				
						row28.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 50) {
								row28.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(50) != null) {
						row28.VACEPTADO = rs_tOracleInput_14.getBigDecimal(50);
					} else {
				
						row28.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 51) {
								row28.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(51) != null) {
						row28.VRATIFICADO = rs_tOracleInput_14.getBigDecimal(51);
					} else {
				
						row28.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 52) {
								row28.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(52) != null) {
						row28.VAVALPAGO = rs_tOracleInput_14.getBigDecimal(52);
					} else {
				
						row28.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 53) {
								row28.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(53) != null) {
						row28.PERSONAS_ID = rs_tOracleInput_14.getBigDecimal(53);
					} else {
				
						row28.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 54) {
								row28.DOSIS = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(54) != null) {
						row28.DOSIS = rs_tOracleInput_14.getBigDecimal(54);
					} else {
				
						row28.DOSIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 55) {
								row28.FRECUENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(55) != null) {
						row28.FRECUENCIA = rs_tOracleInput_14.getBigDecimal(55);
					} else {
				
						row28.FRECUENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 56) {
								row28.PRODUCTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(56) != null) {
						row28.PRODUCTOS_ID = rs_tOracleInput_14.getBigDecimal(56);
					} else {
				
						row28.PRODUCTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 57) {
								row28.CIE10_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(57) != null) {
						row28.CIE10_ID = rs_tOracleInput_14.getBigDecimal(57);
					} else {
				
						row28.CIE10_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_20 main ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_20 = false;
		
						row35Struct row35 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_20 = false;
		boolean mainRowRejected_tMap_20 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row35" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow35 = false;
       		  	    	
       		  	    	
 							row35Struct row35ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_20) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_20 = false;
								
                        		    		    row35HashKey.ID = row28.ID ;
                        		    		

								
		                        	row35HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row35.lookup( row35HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row35 != null && tHash_Lookup_row35.getCount(row35HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row35' and it contains more one result from keys :  row35.ID = '" + row35HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row35Struct fromLookup_row35 = null;
							row35 = row35Default;
										 
							
								 
							
							
								if (tHash_Lookup_row35 !=null && tHash_Lookup_row35.hasNext()) { // G 099
								
							
								
								fromLookup_row35 = tHash_Lookup_row35.next();

							
							
								} // G 099
							
							

							if(fromLookup_row35 != null) {
								row35 = fromLookup_row35;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_20__Struct Var = Var__tMap_20;// ###############################
        // ###############################
        // # Output tables

InsHdfac = null;


// # Output table : 'InsHdfac'
InsHdfac_tmp.ETAPASNORMATIVIDAD_ID = context.ETAPASNORMATIVIDAD_ID;
InsHdfac_tmp.OBSERVACIONES = "Glosamiento automatico";
InsHdfac_tmp.USUARIOS_ID = context.USUARIOS_ID;
InsHdfac_tmp.UORG_ID = context.UORG_ID;
InsHdfac_tmp.DFACTURAFORMULACION_ID = row28.ID ;
InsHdfac_tmp.VLGLOSADO = row28.VGLOSADO ;
InsHdfac_tmp.VAVALPAGO = row28.VAVALPAGO ;
InsHdfac_tmp.HAUDITORIAS_ID = context.HAUDITORIA_ID;
InsHdfac = InsHdfac_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_20 = false;










 


	tos_count_tMap_20++;

/**
 * [tMap_20 main ] stop
 */
	
	/**
	 * [tMap_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	

 



/**
 * [tMap_20 process_data_begin ] stop
 */
// Start of branch "InsHdfac"
if(InsHdfac != null) { 



	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsHdfac"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                        pstmt_tOracleOutput_6.setBigDecimal(1, InsHdfac.ETAPASNORMATIVIDAD_ID);

                        if(InsHdfac.OBSERVACIONES == null) {
pstmt_tOracleOutput_6.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(2, InsHdfac.OBSERVACIONES);
}

                        pstmt_tOracleOutput_6.setBigDecimal(3, InsHdfac.USUARIOS_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(4, InsHdfac.UORG_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(5, InsHdfac.DFACTURAFORMULACION_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(6, InsHdfac.VLGLOSADO);

                        pstmt_tOracleOutput_6.setBigDecimal(7, InsHdfac.VAVALPAGO);

                        pstmt_tOracleOutput_6.setBigDecimal(8, InsHdfac.HAUDITORIAS_ID);

                pstmt_tOracleOutput_6.addBatch();
                nb_line_tOracleOutput_6++;
                batchSizeCounter_tOracleOutput_6++;
            if (batchSize_tOracleOutput_6 > 0 &&  batchSize_tOracleOutput_6 <= batchSizeCounter_tOracleOutput_6) {
                try {
                    pstmt_tOracleOutput_6.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
			        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
			    	String errormessage_tOracleOutput_6;
					if (ne_tOracleOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
						errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
					}else{
						errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_6);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                    insertedCount_tOracleOutput_6
                += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                batchSizeCounter_tOracleOutput_6 = 0;
            }
                commitCounter_tOracleOutput_6++;
                if(commitEvery_tOracleOutput_6 <= commitCounter_tOracleOutput_6) {
                    if(batchSizeCounter_tOracleOutput_6 > 0) {
                        try {
                            pstmt_tOracleOutput_6.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
					        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
					    	String errormessage_tOracleOutput_6;
							if (ne_tOracleOutput_6 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
								errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
							}else{
								errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_6);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                            insertedCount_tOracleOutput_6
                        += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                        rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    }
                    conn_tOracleOutput_6.commit();
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_6 = 0;
                    }
                    commitCounter_tOracleOutput_6=0;
                    	batchSizeCounter_tOracleOutput_6=0;
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */

} // End of branch "InsHdfac"




	
	/**
	 * [tMap_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	

 



/**
 * [tMap_20 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
	if(conn_tOracleInput_14 != null && !conn_tOracleInput_14.isClosed()) {
	
			conn_tOracleInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tMap_20 end ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row35 != null) {
						tHash_Lookup_row35.endGet();
					}
					globalMap.remove( "tHash_Lookup_row35" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tMap_20", true);
end_Hash.put("tMap_20", System.currentTimeMillis());




/**
 * [tMap_20 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_6 > 0) {
            try {
            	if (pstmt_tOracleOutput_6 != null) {
					
					pstmt_tOracleOutput_6.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
		        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
		    	String errormessage_tOracleOutput_6;
				if (ne_tOracleOutput_6 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
					errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
				}else{
					errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_6);
            	
        	}
        	if (pstmt_tOracleOutput_6 != null) {
            	tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_6
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
				rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
            }
        }
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
		}
		conn_tOracleOutput_6.commit();
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
			rowsToCommitCount_tOracleOutput_6 = 0;
		}
		commitCounter_tOracleOutput_6 = 0;
		
		
		conn_tOracleOutput_6 .close();
		
		resourceMap.put("finish_tOracleOutput_6", true);
   	

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsHdfac");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tHashInput_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_20"
					     			globalMap.remove("tHash_Lookup_row35"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tMap_20 finally ] start
	 */

	

	
	
	currentComponent="tMap_20";
	
	

 



/**
 * [tMap_20 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_6") == null){
            java.sql.Connection ctn_tOracleOutput_6 = null;
            if((ctn_tOracleOutput_6 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_6")) != null){
                try {
                    ctn_tOracleOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_6) {
                    String errorMessage_tOracleOutput_6 = "failed to close the connection in tOracleOutput_6 :" + sqlEx_tOracleOutput_6.getMessage();
                    System.err.println(errorMessage_tOracleOutput_6);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout12Struct implements routines.system.IPersistableRow<copyOfout12Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal DFACTURAFORMULACION_ID;

				public BigDecimal getDFACTURAFORMULACION_ID () {
					return this.DFACTURAFORMULACION_ID;
				}

				public Boolean DFACTURAFORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURAFORMULACION_IDIsKey(){
				    return false;
				}
				public Integer DFACTURAFORMULACION_IDLength(){
				    return 0;
				}
				public Integer DFACTURAFORMULACION_IDPrecision(){
				    return null;
				}
				public String DFACTURAFORMULACION_IDDefault(){
				
					return null;
				
				}
				public String DFACTURAFORMULACION_IDComment(){
				
				    return "FK - ACM_DFACTURAFORMULACION";
				
				}
				public String DFACTURAFORMULACION_IDPattern(){
				
					return "";
				
				}
				public String DFACTURAFORMULACION_IDOriginalDbColumnName(){
				
					return "DFACTURAFORMULACION_ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "FK - ACM_AUDITORIAS";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return null;
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "FK - ACM_CAUSALGLOSAS";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				
			    public double VALOR;

				public double getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "0";
				
				}
				public String VALORComment(){
				
				    return "Valor inicial";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public Double VGLOSADO;

				public Double getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public Double VAVALPAGO;

				public Double getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return null;
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "OBservaci\u00F3n de las glosas causadas";
				
				}
				public String OBSERVACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
			        this.VALOR = dis.readDouble();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
			        this.VALOR = dis.readDouble();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VGLOSADO = null;
           				} else {
           			    	this.VGLOSADO = dis.readDouble();
           				}
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VAVALPAGO = null;
           				} else {
           			    	this.VAVALPAGO = dis.readDouble();
           				}
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// double
				
		            	dos.writeDouble(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// double
				
		            	dos.writeDouble(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// Double
				
						if(this.VGLOSADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VGLOSADO);
		            	}
					
					// Double
				
						if(this.VAVALPAGO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VAVALPAGO);
		            	}
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",DFACTURAFORMULACION_ID="+String.valueOf(DFACTURAFORMULACION_ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",OBSERVACION="+OBSERVACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row37Struct implements routines.system.IPersistableRow<row37Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_15Struct implements routines.system.IPersistableRow<after_tHashInput_15Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
			        this.VTOTAL = dis.readDouble();
					
						this.VINFORMATIVO = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// double
				
		            	dos.writeDouble(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VINFORMATIVO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_16Process(globalMap);
		tHashInput_22Process(globalMap);

		row37Struct row37 = new row37Struct();
copyOfout12Struct copyOfout12 = new copyOfout12Struct();





	
	/**
	 * [tOracleOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_10", false);
		start_Hash.put("tOracleOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout12");
					}
				
		int tos_count_tOracleOutput_10 = 0;
		






    
    int nb_line_tOracleOutput_10 = 0;
    int nb_line_update_tOracleOutput_10 = 0;
    int nb_line_inserted_tOracleOutput_10 = 0;
    int nb_line_deleted_tOracleOutput_10 = 0;
    int nb_line_rejected_tOracleOutput_10 = 0;

    int tmp_batchUpdateCount_tOracleOutput_10 = 0;

    int deletedCount_tOracleOutput_10=0;
    int updatedCount_tOracleOutput_10=0;
    int insertedCount_tOracleOutput_10=0;
    int rowsToCommitCount_tOracleOutput_10=0;
    int rejectedCount_tOracleOutput_10=0;

    boolean whetherReject_tOracleOutput_10 = false;

    java.sql.Connection conn_tOracleOutput_10 = null;

    //optional table
    String dbschema_tOracleOutput_10 = null;
    String tableName_tOracleOutput_10 = null;
                    String driverClass_tOracleOutput_10 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_10);
                String url_tOracleOutput_10 = null;
                    url_tOracleOutput_10 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_10 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_10 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_10 = decryptedPassword_tOracleOutput_10;
                dbschema_tOracleOutput_10 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_10 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_10.put("user",dbUser_tOracleOutput_10);
                    atnParamsPrope_tOracleOutput_10.put("password",dbPwd_tOracleOutput_10);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_10.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_10 = java.sql.DriverManager.getConnection(url_tOracleOutput_10, atnParamsPrope_tOracleOutput_10);
        resourceMap.put("conn_tOracleOutput_10", conn_tOracleOutput_10);
            conn_tOracleOutput_10.setAutoCommit(false);
            int commitEvery_tOracleOutput_10 = 10000;
            int commitCounter_tOracleOutput_10 = 0;
        int batchSize_tOracleOutput_10 = 10000;
        int batchSizeCounter_tOracleOutput_10=0;
        int count_tOracleOutput_10=0;

        if(dbschema_tOracleOutput_10 == null || dbschema_tOracleOutput_10.trim().length() == 0) {
            tableName_tOracleOutput_10 = ("ACM_GLOSASCAUSADAS");
        } else {
            tableName_tOracleOutput_10 = dbschema_tOracleOutput_10 + "." + ("ACM_GLOSASCAUSADAS");
        }
                String insert_tOracleOutput_10 = "INSERT INTO " + tableName_tOracleOutput_10 + " (RECEPCION_ID,DFACTURAFORMULACION_ID,AUDITORIAS_ID,FACTURA_ID,CAUSALGLOSAS_ID,VALOR,USUARIOS_ID,UORG_ID,VGLOSADO,VAVALPAGO,OBSERVACION) VALUES (?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_10 = conn_tOracleOutput_10.prepareStatement(insert_tOracleOutput_10);
                        resourceMap.put("pstmt_tOracleOutput_10", pstmt_tOracleOutput_10);





 



/**
 * [tOracleOutput_10 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
					globalMap.get( "tHash_Lookup_row42" ))
					;					
					
	

row42Struct row42HashKey = new row42Struct();
row42Struct row42Default = new row42Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct> tHash_Lookup_row52 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct>) 
					globalMap.get( "tHash_Lookup_row52" ))
					;					
					
	

row52Struct row52HashKey = new row52Struct();
row52Struct row52Default = new row52Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout12Struct copyOfout12_tmp = new copyOfout12Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tHashInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_15", false);
		start_Hash.put("tHashInput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_15";
	
	
		int tos_count_tHashInput_15 = 0;
		


int nb_line_tHashInput_15 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out20Struct> tHashFile_tHashInput_15 = mf_tHashInput_15.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_15==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out20Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
while (iterator_tHashInput_15.hasNext()) {
    out20Struct next_tHashInput_15 = iterator_tHashInput_15.next();

	row37.ID = next_tHashInput_15.ID;
	row37.RECEPCION_ID = next_tHashInput_15.RECEPCION_ID;
	row37.FACTURA_ID = next_tHashInput_15.FACTURA_ID;
	row37.NUMERO_FACTURA = next_tHashInput_15.NUMERO_FACTURA;
	row37.VTOTAL = next_tHashInput_15.VTOTAL;
	row37.VINFORMATIVO = next_tHashInput_15.VINFORMATIVO;
	row37.GLOSACAUSADA = next_tHashInput_15.GLOSACAUSADA;
	row37.SIGLA = next_tHashInput_15.SIGLA;

 



/**
 * [tHashInput_15 begin ] stop
 */
	
	/**
	 * [tHashInput_15 main ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 


	tos_count_tHashInput_15++;

/**
 * [tHashInput_15 main ] stop
 */
	
	/**
	 * [tHashInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
						row42Struct row42 = null;
					
						row52Struct row52 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row42HashKey.SIGLA = row37.SIGLA ;
                        		    		
                        		    		    row42HashKey.CAUSALGLOSAS_ID = row37.GLOSACAUSADA ;
                        		    		

								
		                        	row42HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								 
							
							
								if (tHash_Lookup_row42 !=null && tHash_Lookup_row42.hasNext()) { // G 099
								
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							
							
								} // G 099
							
							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row52" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow52 = false;
       		  	    	
       		  	    	
 							row52Struct row52ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row52HashKey.ID = row37.ID ;
                        		    		

								
		                        	row52HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row52.lookup( row52HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row52.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_11 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row52 != null && tHash_Lookup_row52.getCount(row52HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row52' and it contains more one result from keys :  row52.ID = '" + row52HashKey.ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row52Struct fromLookup_row52 = null;
							row52 = row52Default;
										 
							
								 
							
							
								if (tHash_Lookup_row52 !=null && tHash_Lookup_row52.hasNext()) { // G 099
								
							
								
								fromLookup_row52 = tHash_Lookup_row52.next();

							
							
								} // G 099
							
							

							if(fromLookup_row52 != null) {
								row52 = fromLookup_row52;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

copyOfout12 = null;

if(!rejectedInnerJoin_tMap_11 ) {

// # Output table : 'copyOfout12'
copyOfout12_tmp.RECEPCION_ID = context.RECEPCION_ID;
copyOfout12_tmp.DFACTURAFORMULACION_ID = row37.ID ;
copyOfout12_tmp.AUDITORIAS_ID = context.AUDITORIA_ID;
copyOfout12_tmp.FACTURA_ID = row37.FACTURA_ID ;
copyOfout12_tmp.CAUSALGLOSAS_ID = row37.GLOSACAUSADA ;
copyOfout12_tmp.VALOR = row37.VTOTAL ;
copyOfout12_tmp.USUARIOS_ID = context.USUARIOS_ID;
copyOfout12_tmp.UORG_ID = context.UORG_ID;
copyOfout12_tmp.VGLOSADO = row37.VTOTAL ;
copyOfout12_tmp.VAVALPAGO = (row37.VTOTAL!= 0.0)? 0.0 :  row52.VTOTAL.doubleValue() ;
copyOfout12_tmp.OBSERVACION = (row37.VINFORMATIVO.intValue() == 0)? row42.NOMBRE :
row42.NOMBRE + " (Valor para glosa manual " + row37.VINFORMATIVO.toString() +" )" ;
copyOfout12 = copyOfout12_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "copyOfout12"
if(copyOfout12 != null) { 



	
	/**
	 * [tOracleOutput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout12"
						
						);
					}
					



        whetherReject_tOracleOutput_10 = false;
                        pstmt_tOracleOutput_10.setBigDecimal(1, copyOfout12.RECEPCION_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(2, copyOfout12.DFACTURAFORMULACION_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(3, copyOfout12.AUDITORIAS_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(4, copyOfout12.FACTURA_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(5, copyOfout12.CAUSALGLOSAS_ID);

                        pstmt_tOracleOutput_10.setDouble(6, copyOfout12.VALOR);

                        pstmt_tOracleOutput_10.setBigDecimal(7, copyOfout12.USUARIOS_ID);

                        pstmt_tOracleOutput_10.setBigDecimal(8, copyOfout12.UORG_ID);

                        if(copyOfout12.VGLOSADO == null) {
pstmt_tOracleOutput_10.setNull(9, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_10.setDouble(9, copyOfout12.VGLOSADO);
}

                        if(copyOfout12.VAVALPAGO == null) {
pstmt_tOracleOutput_10.setNull(10, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_10.setDouble(10, copyOfout12.VAVALPAGO);
}

                        if(copyOfout12.OBSERVACION == null) {
pstmt_tOracleOutput_10.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_10.setString(11, copyOfout12.OBSERVACION);
}

                pstmt_tOracleOutput_10.addBatch();
                nb_line_tOracleOutput_10++;
                batchSizeCounter_tOracleOutput_10++;
            if (batchSize_tOracleOutput_10 > 0 &&  batchSize_tOracleOutput_10 <= batchSizeCounter_tOracleOutput_10) {
                try {
                    pstmt_tOracleOutput_10.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
			        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
			    	String errormessage_tOracleOutput_10;
					if (ne_tOracleOutput_10 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
						errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
					}else{
						errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_10);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                    insertedCount_tOracleOutput_10
                += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                batchSizeCounter_tOracleOutput_10 = 0;
            }
                commitCounter_tOracleOutput_10++;
                if(commitEvery_tOracleOutput_10 <= commitCounter_tOracleOutput_10) {
                    if(batchSizeCounter_tOracleOutput_10 > 0) {
                        try {
                            pstmt_tOracleOutput_10.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
					        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
					    	String errormessage_tOracleOutput_10;
							if (ne_tOracleOutput_10 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
								errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
							}else{
								errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_10);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
                            insertedCount_tOracleOutput_10
                        += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                        rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    }
                    conn_tOracleOutput_10.commit();
                    if(rowsToCommitCount_tOracleOutput_10 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_10 = 0;
                    }
                    commitCounter_tOracleOutput_10=0;
                    	batchSizeCounter_tOracleOutput_10=0;
                }

 


	tos_count_tOracleOutput_10++;

/**
 * [tOracleOutput_10 main ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	

 



/**
 * [tOracleOutput_10 process_data_end ] stop
 */

} // End of branch "copyOfout12"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_15 end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	
    

		
			nb_line_tHashInput_15++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);       

 

ok_Hash.put("tHashInput_15", true);
end_Hash.put("tHashInput_15", System.currentTimeMillis());




/**
 * [tHashInput_15 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row42 != null) {
						tHash_Lookup_row42.endGet();
					}
					globalMap.remove( "tHash_Lookup_row42" );

					
					
				
					if(tHash_Lookup_row52 != null) {
						tHash_Lookup_row52.endGet();
					}
					globalMap.remove( "tHash_Lookup_row52" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_10 > 0) {
            try {
            	if (pstmt_tOracleOutput_10 != null) {
					
					pstmt_tOracleOutput_10.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_10){
globalMap.put("tOracleOutput_10_ERROR_MESSAGE",e_tOracleOutput_10.getMessage());
		        java.sql.SQLException ne_tOracleOutput_10 = e_tOracleOutput_10.getNextException(),sqle_tOracleOutput_10=null;
		    	String errormessage_tOracleOutput_10;
				if (ne_tOracleOutput_10 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_10 = new java.sql.SQLException(e_tOracleOutput_10.getMessage() + "\ncaused by: " + ne_tOracleOutput_10.getMessage(), ne_tOracleOutput_10.getSQLState(), ne_tOracleOutput_10.getErrorCode(), ne_tOracleOutput_10);
					errormessage_tOracleOutput_10 = sqle_tOracleOutput_10.getMessage();
				}else{
					errormessage_tOracleOutput_10 = e_tOracleOutput_10.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_10);
            	
        	}
        	if (pstmt_tOracleOutput_10 != null) {
            	tmp_batchUpdateCount_tOracleOutput_10 = pstmt_tOracleOutput_10.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_10
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
				rowsToCommitCount_tOracleOutput_10 += (tmp_batchUpdateCount_tOracleOutput_10!=-1?tmp_batchUpdateCount_tOracleOutput_10:0);
            }
        }
        if(pstmt_tOracleOutput_10 != null) {
			
				pstmt_tOracleOutput_10.close();
				resourceMap.remove("pstmt_tOracleOutput_10");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_10", true);
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
		}
		conn_tOracleOutput_10.commit();
		if(commitCounter_tOracleOutput_10 > 0 && rowsToCommitCount_tOracleOutput_10 != 0) {
			
			rowsToCommitCount_tOracleOutput_10 = 0;
		}
		commitCounter_tOracleOutput_10 = 0;
		
		
		conn_tOracleOutput_10 .close();
		
		resourceMap.put("finish_tOracleOutput_10", true);
   	

	
	nb_line_deleted_tOracleOutput_10=nb_line_deleted_tOracleOutput_10+ deletedCount_tOracleOutput_10;
	nb_line_update_tOracleOutput_10=nb_line_update_tOracleOutput_10 + updatedCount_tOracleOutput_10;
	nb_line_inserted_tOracleOutput_10=nb_line_inserted_tOracleOutput_10 + insertedCount_tOracleOutput_10;
	nb_line_rejected_tOracleOutput_10=nb_line_rejected_tOracleOutput_10 + rejectedCount_tOracleOutput_10;
	
        globalMap.put("tOracleOutput_10_NB_LINE",nb_line_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_UPDATED",nb_line_update_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_10);
        globalMap.put("tOracleOutput_10_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_10);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout12");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_10", true);
end_Hash.put("tOracleOutput_10", System.currentTimeMillis());




/**
 * [tOracleOutput_10 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tOracleInput_15Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row42"); 
				     			
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row52"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_10";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_10") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_10 = null;
                if ((pstmtToClose_tOracleOutput_10 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_10")) != null) {
                    pstmtToClose_tOracleOutput_10.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_10") == null){
            java.sql.Connection ctn_tOracleOutput_10 = null;
            if((ctn_tOracleOutput_10 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_10")) != null){
                try {
                    ctn_tOracleOutput_10.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_10) {
                    String errorMessage_tOracleOutput_10 = "failed to close the connection in tOracleOutput_10 :" + sqlEx_tOracleOutput_10.getMessage();
                    System.err.println(errorMessage_tOracleOutput_10);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_10 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class aoutStruct implements routines.system.IPersistableRow<aoutStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal GLOSASCAUSADAS_ID;

				public BigDecimal getGLOSASCAUSADAS_ID () {
					return this.GLOSASCAUSADAS_ID;
				}

				public Boolean GLOSASCAUSADAS_IDIsNullable(){
				    return false;
				}
				public Boolean GLOSASCAUSADAS_IDIsKey(){
				    return false;
				}
				public Integer GLOSASCAUSADAS_IDLength(){
				    return 0;
				}
				public Integer GLOSASCAUSADAS_IDPrecision(){
				    return null;
				}
				public String GLOSASCAUSADAS_IDDefault(){
				
					return null;
				
				}
				public String GLOSASCAUSADAS_IDComment(){
				
				    return "FK - ACM_GLOSASCAUSADAS";
				
				}
				public String GLOSASCAUSADAS_IDPattern(){
				
					return "";
				
				}
				public String GLOSASCAUSADAS_IDOriginalDbColumnName(){
				
					return "GLOSASCAUSADAS_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "Observaciones del historico de las glosas causadas";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor aceptado";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.GLOSASCAUSADAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.GLOSASCAUSADAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSASCAUSADAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSASCAUSADAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",GLOSASCAUSADAS_ID="+String.valueOf(GLOSASCAUSADAS_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(aoutStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row40Struct implements routines.system.IPersistableRow<row40Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal DFACTURASERVICIO_ID;

				public BigDecimal getDFACTURASERVICIO_ID () {
					return this.DFACTURASERVICIO_ID;
				}

				public Boolean DFACTURASERVICIO_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURASERVICIO_IDIsKey(){
				    return false;
				}
				public Integer DFACTURASERVICIO_IDLength(){
				    return 0;
				}
				public Integer DFACTURASERVICIO_IDPrecision(){
				    return null;
				}
				public String DFACTURASERVICIO_IDDefault(){
				
					return "";
				
				}
				public String DFACTURASERVICIO_IDComment(){
				
				    return "";
				
				}
				public String DFACTURASERVICIO_IDPattern(){
				
					return "";
				
				}
				public String DFACTURASERVICIO_IDOriginalDbColumnName(){
				
					return "DFACTURASERVICIO_ID";
				
				}

				
			    public BigDecimal DFACTURAFORMULACION_ID;

				public BigDecimal getDFACTURAFORMULACION_ID () {
					return this.DFACTURAFORMULACION_ID;
				}

				public Boolean DFACTURAFORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURAFORMULACION_IDIsKey(){
				    return false;
				}
				public Integer DFACTURAFORMULACION_IDLength(){
				    return 0;
				}
				public Integer DFACTURAFORMULACION_IDPrecision(){
				    return null;
				}
				public String DFACTURAFORMULACION_IDDefault(){
				
					return "";
				
				}
				public String DFACTURAFORMULACION_IDComment(){
				
				    return "";
				
				}
				public String DFACTURAFORMULACION_IDPattern(){
				
					return "";
				
				}
				public String DFACTURAFORMULACION_IDOriginalDbColumnName(){
				
					return "DFACTURAFORMULACION_ID";
				
				}

				
			    public BigDecimal AUDITORIAS_ID;

				public BigDecimal getAUDITORIAS_ID () {
					return this.AUDITORIAS_ID;
				}

				public Boolean AUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean AUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer AUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer AUDITORIAS_IDPrecision(){
				    return null;
				}
				public String AUDITORIAS_IDDefault(){
				
					return "";
				
				}
				public String AUDITORIAS_IDComment(){
				
				    return "";
				
				}
				public String AUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String AUDITORIAS_IDOriginalDbColumnName(){
				
					return "AUDITORIAS_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 20;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public String OBSERVACION;

				public String getOBSERVACION () {
					return this.OBSERVACION;
				}

				public Boolean OBSERVACIONIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONIsKey(){
				    return false;
				}
				public Integer OBSERVACIONLength(){
				    return 4000;
				}
				public Integer OBSERVACIONPrecision(){
				    return 0;
				}
				public String OBSERVACIONDefault(){
				
					return null;
				
				}
				public String OBSERVACIONComment(){
				
				    return "";
				
				}
				public String OBSERVACIONPattern(){
				
					return "";
				
				}
				public String OBSERVACIONOriginalDbColumnName(){
				
					return "OBSERVACION";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURASERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURASERVICIO_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.AUDITORIAS_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
					this.OBSERVACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURASERVICIO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURASERVICIO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUDITORIAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// String
				
						writeString(this.OBSERVACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",DFACTURASERVICIO_ID="+String.valueOf(DFACTURASERVICIO_ID));
		sb.append(",DFACTURAFORMULACION_ID="+String.valueOf(DFACTURAFORMULACION_ID));
		sb.append(",AUDITORIAS_ID="+String.valueOf(AUDITORIAS_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",OBSERVACION="+OBSERVACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();
aoutStruct aout = new aoutStruct();





	
	/**
	 * [tOracleOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_9", false);
		start_Hash.put("tOracleOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"aout");
					}
				
		int tos_count_tOracleOutput_9 = 0;
		






    
    int nb_line_tOracleOutput_9 = 0;
    int nb_line_update_tOracleOutput_9 = 0;
    int nb_line_inserted_tOracleOutput_9 = 0;
    int nb_line_deleted_tOracleOutput_9 = 0;
    int nb_line_rejected_tOracleOutput_9 = 0;

    int tmp_batchUpdateCount_tOracleOutput_9 = 0;

    int deletedCount_tOracleOutput_9=0;
    int updatedCount_tOracleOutput_9=0;
    int insertedCount_tOracleOutput_9=0;
    int rowsToCommitCount_tOracleOutput_9=0;
    int rejectedCount_tOracleOutput_9=0;

    boolean whetherReject_tOracleOutput_9 = false;

    java.sql.Connection conn_tOracleOutput_9 = null;

    //optional table
    String dbschema_tOracleOutput_9 = null;
    String tableName_tOracleOutput_9 = null;
                    String driverClass_tOracleOutput_9 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_9);
                String url_tOracleOutput_9 = null;
                    url_tOracleOutput_9 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_9 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_9 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_9 = decryptedPassword_tOracleOutput_9;
                dbschema_tOracleOutput_9 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_9 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_9.put("user",dbUser_tOracleOutput_9);
                    atnParamsPrope_tOracleOutput_9.put("password",dbPwd_tOracleOutput_9);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_9.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_9 = java.sql.DriverManager.getConnection(url_tOracleOutput_9, atnParamsPrope_tOracleOutput_9);
        resourceMap.put("conn_tOracleOutput_9", conn_tOracleOutput_9);
            conn_tOracleOutput_9.setAutoCommit(false);
            int commitEvery_tOracleOutput_9 = 10000;
            int commitCounter_tOracleOutput_9 = 0;
        int batchSize_tOracleOutput_9 = 10000;
        int batchSizeCounter_tOracleOutput_9=0;
        int count_tOracleOutput_9=0;

        if(dbschema_tOracleOutput_9 == null || dbschema_tOracleOutput_9.trim().length() == 0) {
            tableName_tOracleOutput_9 = ("ACM_HGLOSASCAUSADAS");
        } else {
            tableName_tOracleOutput_9 = dbschema_tOracleOutput_9 + "." + ("ACM_HGLOSASCAUSADAS");
        }
                String insert_tOracleOutput_9 = "INSERT INTO " + tableName_tOracleOutput_9 + " (ETAPASNORMATIVIDAD_ID,GLOSASCAUSADAS_ID,FACTURA_ID,OBSERVACIONES,USUARIOS_ID,UORG_ID,VGLOSADO,VAVALPAGO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_9 = conn_tOracleOutput_9.prepareStatement(insert_tOracleOutput_9);
                        resourceMap.put("pstmt_tOracleOutput_9", pstmt_tOracleOutput_9);





 



/**
 * [tOracleOutput_9 begin ] stop
 */



	
	/**
	 * [tMap_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_12", false);
		start_Hash.put("tMap_12", System.currentTimeMillis());
		
	
	currentComponent="tMap_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tMap_12 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_12__Struct  {
}
Var__tMap_12__Struct Var__tMap_12 = new Var__tMap_12__Struct();
// ###############################

// ###############################
// # Outputs initialization
aoutStruct aout_tmp = new aoutStruct();
// ###############################

        
        



        









 



/**
 * [tMap_12 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				String driverClass_tOracleInput_15 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_15);
				
			String url_tOracleInput_15 = null;
				url_tOracleInput_15 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_15 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_15 = context.db_origen_Password; 

				String dbPwd_tOracleInput_15 = decryptedPassword_tOracleInput_15;

				
					java.util.Properties atnParamsPrope_tOracleInput_15 = new java.util.Properties();
					atnParamsPrope_tOracleInput_15.put("user",dbUser_tOracleInput_15);
					atnParamsPrope_tOracleInput_15.put("password",dbPwd_tOracleInput_15);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_15.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_15 = java.sql.DriverManager.getConnection(url_tOracleInput_15, atnParamsPrope_tOracleInput_15);
				java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_15.next()) {
					sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
				}
                                if (!(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                                }
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement();

		    String dbquery_tOracleInput_15 = "SELECT * FROM ACM_GLOSASCAUSADAS\nWHERE RECEPCION_ID = " +context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row40.ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row40.ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row40.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(2) != null) {
						row40.RECEPCION_ID = rs_tOracleInput_15.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 3) {
								row40.DFACTURASERVICIO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(3) != null) {
						row40.DFACTURASERVICIO_ID = rs_tOracleInput_15.getBigDecimal(3);
					} else {
				
						row40.DFACTURASERVICIO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 4) {
								row40.DFACTURAFORMULACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(4) != null) {
						row40.DFACTURAFORMULACION_ID = rs_tOracleInput_15.getBigDecimal(4);
					} else {
				
						row40.DFACTURAFORMULACION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 5) {
								row40.AUDITORIAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(5) != null) {
						row40.AUDITORIAS_ID = rs_tOracleInput_15.getBigDecimal(5);
					} else {
				
						row40.AUDITORIAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 6) {
								row40.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(6) != null) {
						row40.FACTURA_ID = rs_tOracleInput_15.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 7) {
								row40.CAUSALGLOSAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(7) != null) {
						row40.CAUSALGLOSAS_ID = rs_tOracleInput_15.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 8) {
								row40.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(8) != null) {
						row40.VALOR = rs_tOracleInput_15.getBigDecimal(8);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 9) {
								row40.FECHA = null;
							} else {
										
			row40.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_15, 9);
		                    }
							if(colQtyInRs_tOracleInput_15 < 10) {
								row40.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(10) != null) {
						row40.USUARIOS_ID = rs_tOracleInput_15.getBigDecimal(10);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 11) {
								row40.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(11) != null) {
						row40.UORG_ID = rs_tOracleInput_15.getBigDecimal(11);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 12) {
								row40.ESTADO = null;
							} else {
	                         		
        	row40.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_15 < 13) {
								row40.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(13) != null) {
						row40.ESTREGISTRO_ID = rs_tOracleInput_15.getBigDecimal(13);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 14) {
								row40.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(14) != null) {
						row40.VGLOSADO = rs_tOracleInput_15.getBigDecimal(14);
					} else {
				
						row40.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 15) {
								row40.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(15) != null) {
						row40.VSOPORTADO = rs_tOracleInput_15.getBigDecimal(15);
					} else {
				
						row40.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 16) {
								row40.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(16) != null) {
						row40.VACEPTADO = rs_tOracleInput_15.getBigDecimal(16);
					} else {
				
						row40.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 17) {
								row40.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(17) != null) {
						row40.VRATIFICADO = rs_tOracleInput_15.getBigDecimal(17);
					} else {
				
						row40.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 18) {
								row40.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(18) != null) {
						row40.VAVALPAGO = rs_tOracleInput_15.getBigDecimal(18);
					} else {
				
						row40.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 19) {
								row40.OBSERVACION = null;
							} else {
	                         		
        	row40.OBSERVACION = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 19, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tMap_12 main ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row40"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_12 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_12 = false;
		boolean mainRowRejected_tMap_12 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_12__Struct Var = Var__tMap_12;// ###############################
        // ###############################
        // # Output tables

aout = null;


// # Output table : 'aout'
aout_tmp.ETAPASNORMATIVIDAD_ID = context.ETAPASNORMATIVIDAD_ID;
aout_tmp.GLOSASCAUSADAS_ID = row40.ID ;
aout_tmp.FACTURA_ID = row40.FACTURA_ID ;
aout_tmp.OBSERVACIONES = row40.OBSERVACION ;
aout_tmp.USUARIOS_ID = row40.USUARIOS_ID ;
aout_tmp.UORG_ID = row40.UORG_ID ;
aout_tmp.VGLOSADO = row40.VGLOSADO ;
aout_tmp.VAVALPAGO = row40.VAVALPAGO ;
aout_tmp.HAUDITORIAS_ID = context.HAUDITORIA_ID;
aout = aout_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_12 = false;










 


	tos_count_tMap_12++;

/**
 * [tMap_12 main ] stop
 */
	
	/**
	 * [tMap_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_begin ] stop
 */
// Start of branch "aout"
if(aout != null) { 



	
	/**
	 * [tOracleOutput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"aout"
						
						);
					}
					



        whetherReject_tOracleOutput_9 = false;
                        pstmt_tOracleOutput_9.setBigDecimal(1, aout.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(2, aout.GLOSASCAUSADAS_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(3, aout.FACTURA_ID);

                        if(aout.OBSERVACIONES == null) {
pstmt_tOracleOutput_9.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_9.setString(4, aout.OBSERVACIONES);
}

                        pstmt_tOracleOutput_9.setBigDecimal(5, aout.USUARIOS_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(6, aout.UORG_ID);

                        pstmt_tOracleOutput_9.setBigDecimal(7, aout.VGLOSADO);

                        pstmt_tOracleOutput_9.setBigDecimal(8, aout.VAVALPAGO);

                        pstmt_tOracleOutput_9.setBigDecimal(9, aout.HAUDITORIAS_ID);

                pstmt_tOracleOutput_9.addBatch();
                nb_line_tOracleOutput_9++;
                batchSizeCounter_tOracleOutput_9++;
            if (batchSize_tOracleOutput_9 > 0 &&  batchSize_tOracleOutput_9 <= batchSizeCounter_tOracleOutput_9) {
                try {
                    pstmt_tOracleOutput_9.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
			        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
			    	String errormessage_tOracleOutput_9;
					if (ne_tOracleOutput_9 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
						errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
					}else{
						errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_9);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                    insertedCount_tOracleOutput_9
                += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                batchSizeCounter_tOracleOutput_9 = 0;
            }
                commitCounter_tOracleOutput_9++;
                if(commitEvery_tOracleOutput_9 <= commitCounter_tOracleOutput_9) {
                    if(batchSizeCounter_tOracleOutput_9 > 0) {
                        try {
                            pstmt_tOracleOutput_9.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
					        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
					    	String errormessage_tOracleOutput_9;
							if (ne_tOracleOutput_9 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
								errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
							}else{
								errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_9);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
                            insertedCount_tOracleOutput_9
                        += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                        rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    }
                    conn_tOracleOutput_9.commit();
                    if(rowsToCommitCount_tOracleOutput_9 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_9 = 0;
                    }
                    commitCounter_tOracleOutput_9=0;
                    	batchSizeCounter_tOracleOutput_9=0;
                }

 


	tos_count_tOracleOutput_9++;

/**
 * [tOracleOutput_9 main ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	

 



/**
 * [tOracleOutput_9 process_data_end ] stop
 */

} // End of branch "aout"




	
	/**
	 * [tMap_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
	if(conn_tOracleInput_15 != null && !conn_tOracleInput_15.isClosed()) {
	
			conn_tOracleInput_15.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tMap_12 end ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tMap_12", true);
end_Hash.put("tMap_12", System.currentTimeMillis());




/**
 * [tMap_12 end ] stop
 */

	
	/**
	 * [tOracleOutput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_9 > 0) {
            try {
            	if (pstmt_tOracleOutput_9 != null) {
					
					pstmt_tOracleOutput_9.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_9){
globalMap.put("tOracleOutput_9_ERROR_MESSAGE",e_tOracleOutput_9.getMessage());
		        java.sql.SQLException ne_tOracleOutput_9 = e_tOracleOutput_9.getNextException(),sqle_tOracleOutput_9=null;
		    	String errormessage_tOracleOutput_9;
				if (ne_tOracleOutput_9 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_9 = new java.sql.SQLException(e_tOracleOutput_9.getMessage() + "\ncaused by: " + ne_tOracleOutput_9.getMessage(), ne_tOracleOutput_9.getSQLState(), ne_tOracleOutput_9.getErrorCode(), ne_tOracleOutput_9);
					errormessage_tOracleOutput_9 = sqle_tOracleOutput_9.getMessage();
				}else{
					errormessage_tOracleOutput_9 = e_tOracleOutput_9.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_9);
            	
        	}
        	if (pstmt_tOracleOutput_9 != null) {
            	tmp_batchUpdateCount_tOracleOutput_9 = pstmt_tOracleOutput_9.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_9
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
				rowsToCommitCount_tOracleOutput_9 += (tmp_batchUpdateCount_tOracleOutput_9!=-1?tmp_batchUpdateCount_tOracleOutput_9:0);
            }
        }
        if(pstmt_tOracleOutput_9 != null) {
			
				pstmt_tOracleOutput_9.close();
				resourceMap.remove("pstmt_tOracleOutput_9");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_9", true);
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
		}
		conn_tOracleOutput_9.commit();
		if(commitCounter_tOracleOutput_9 > 0 && rowsToCommitCount_tOracleOutput_9 != 0) {
			
			rowsToCommitCount_tOracleOutput_9 = 0;
		}
		commitCounter_tOracleOutput_9 = 0;
		
		
		conn_tOracleOutput_9 .close();
		
		resourceMap.put("finish_tOracleOutput_9", true);
   	

	
	nb_line_deleted_tOracleOutput_9=nb_line_deleted_tOracleOutput_9+ deletedCount_tOracleOutput_9;
	nb_line_update_tOracleOutput_9=nb_line_update_tOracleOutput_9 + updatedCount_tOracleOutput_9;
	nb_line_inserted_tOracleOutput_9=nb_line_inserted_tOracleOutput_9 + insertedCount_tOracleOutput_9;
	nb_line_rejected_tOracleOutput_9=nb_line_rejected_tOracleOutput_9 + rejectedCount_tOracleOutput_9;
	
        globalMap.put("tOracleOutput_9_NB_LINE",nb_line_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_UPDATED",nb_line_update_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_9);
        globalMap.put("tOracleOutput_9_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_9);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"aout");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_9", true);
end_Hash.put("tOracleOutput_9", System.currentTimeMillis());




/**
 * [tOracleOutput_9 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_15:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk19", 0, "ok");
								} 
							
							tFixedFlowInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tMap_12 finally ] start
	 */

	

	
	
	currentComponent="tMap_12";
	
	

 



/**
 * [tMap_12 finally ] stop
 */

	
	/**
	 * [tOracleOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_9";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_9") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_9 = null;
                if ((pstmtToClose_tOracleOutput_9 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_9")) != null) {
                    pstmtToClose_tOracleOutput_9.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_9") == null){
            java.sql.Connection ctn_tOracleOutput_9 = null;
            if((ctn_tOracleOutput_9 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_9")) != null){
                try {
                    ctn_tOracleOutput_9.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_9) {
                    String errorMessage_tOracleOutput_9 = "failed to close the connection in tOracleOutput_9 :" + sqlEx_tOracleOutput_9.getMessage();
                    System.err.println(errorMessage_tOracleOutput_9);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_9 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row54Struct implements routines.system.IPersistableRow<row54Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ESTEXTDERECHOS_ID;

				public BigDecimal getESTEXTDERECHOS_ID () {
					return this.ESTEXTDERECHOS_ID;
				}

				public Boolean ESTEXTDERECHOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTEXTDERECHOS_IDIsKey(){
				    return false;
				}
				public Integer ESTEXTDERECHOS_IDLength(){
				    return null;
				}
				public Integer ESTEXTDERECHOS_IDPrecision(){
				    return null;
				}
				public String ESTEXTDERECHOS_IDDefault(){
				
					return null;
				
				}
				public String ESTEXTDERECHOS_IDComment(){
				
				    return "";
				
				}
				public String ESTEXTDERECHOS_IDPattern(){
				
					return "";
				
				}
				public String ESTEXTDERECHOS_IDOriginalDbColumnName(){
				
					return "ESTEXTDERECHOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row54Struct other = (row54Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row54Struct other) {

		other.ID = this.ID;
	            other.ESTEXTDERECHOS_ID = this.ESTEXTDERECHOS_ID;
	            
	}

	public void copyKeysDataTo(row54Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTEXTDERECHOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTEXTDERECHOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTEXTDERECHOS_ID="+String.valueOf(ESTEXTDERECHOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row54Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row54Struct row54 = new row54Struct();




	
	/**
	 * [tOracleOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_7", false);
		start_Hash.put("tOracleOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row54");
					}
				
		int tos_count_tOracleOutput_7 = 0;
		






        int updateKeyCount_tOracleOutput_7 = 1;
        if(updateKeyCount_tOracleOutput_7 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_7 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_7 = 0;
    int nb_line_update_tOracleOutput_7 = 0;
    int nb_line_inserted_tOracleOutput_7 = 0;
    int nb_line_deleted_tOracleOutput_7 = 0;
    int nb_line_rejected_tOracleOutput_7 = 0;

    int tmp_batchUpdateCount_tOracleOutput_7 = 0;

    int deletedCount_tOracleOutput_7=0;
    int updatedCount_tOracleOutput_7=0;
    int insertedCount_tOracleOutput_7=0;
    int rowsToCommitCount_tOracleOutput_7=0;
    int rejectedCount_tOracleOutput_7=0;

    boolean whetherReject_tOracleOutput_7 = false;

    java.sql.Connection conn_tOracleOutput_7 = null;

    //optional table
    String dbschema_tOracleOutput_7 = null;
    String tableName_tOracleOutput_7 = null;
                    String driverClass_tOracleOutput_7 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_7);
                String url_tOracleOutput_7 = null;
                    url_tOracleOutput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_7 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_7 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_7 = decryptedPassword_tOracleOutput_7;
                dbschema_tOracleOutput_7 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_7 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_7.put("user",dbUser_tOracleOutput_7);
                    atnParamsPrope_tOracleOutput_7.put("password",dbPwd_tOracleOutput_7);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_7.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_7 = java.sql.DriverManager.getConnection(url_tOracleOutput_7, atnParamsPrope_tOracleOutput_7);
        resourceMap.put("conn_tOracleOutput_7", conn_tOracleOutput_7);
            conn_tOracleOutput_7.setAutoCommit(false);
            int commitEvery_tOracleOutput_7 = 10000;
            int commitCounter_tOracleOutput_7 = 0;
        int batchSize_tOracleOutput_7 = 10000;
        int batchSizeCounter_tOracleOutput_7=0;
        int count_tOracleOutput_7=0;

        if(dbschema_tOracleOutput_7 == null || dbschema_tOracleOutput_7.trim().length() == 0) {
            tableName_tOracleOutput_7 = ("ACM_RECEPCION");
        } else {
            tableName_tOracleOutput_7 = dbschema_tOracleOutput_7 + "." + ("ACM_RECEPCION");
        }
                String update_tOracleOutput_7 = "UPDATE " + tableName_tOracleOutput_7 + " SET ESTEXTDERECHOS_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_7 = conn_tOracleOutput_7.prepareStatement(update_tOracleOutput_7);
                resourceMap.put("pstmt_tOracleOutput_7", pstmt_tOracleOutput_7);





 



/**
 * [tOracleOutput_7 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row54.ID = context.RECEPCION_ID;
    	            	        	            	
    	            		row54.ESTEXTDERECHOS_ID = new BigDecimal(7);
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row54"
						
						);
					}
					



        whetherReject_tOracleOutput_7 = false;
                    pstmt_tOracleOutput_7.setBigDecimal(1, row54.ESTEXTDERECHOS_ID);


                    pstmt_tOracleOutput_7.setBigDecimal(2 + count_tOracleOutput_7, row54.ID);

                pstmt_tOracleOutput_7.addBatch();
                nb_line_tOracleOutput_7++;
                batchSizeCounter_tOracleOutput_7++;
            if (batchSize_tOracleOutput_7 > 0 &&  batchSize_tOracleOutput_7 <= batchSizeCounter_tOracleOutput_7) {
                try {
                    pstmt_tOracleOutput_7.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
			        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
			    	String errormessage_tOracleOutput_7;
					if (ne_tOracleOutput_7 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
						errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
					}else{
						errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_7);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                    updatedCount_tOracleOutput_7
                += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                batchSizeCounter_tOracleOutput_7 = 0;
            }
                commitCounter_tOracleOutput_7++;
                if(commitEvery_tOracleOutput_7 <= commitCounter_tOracleOutput_7) {
                    if(batchSizeCounter_tOracleOutput_7 > 0) {
                        try {
                            pstmt_tOracleOutput_7.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
					        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
					    	String errormessage_tOracleOutput_7;
							if (ne_tOracleOutput_7 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
								errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
							}else{
								errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_7);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
                            updatedCount_tOracleOutput_7
                        += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                        rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    }
                    conn_tOracleOutput_7.commit();
                    if(rowsToCommitCount_tOracleOutput_7 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_7 = 0;
                    }
                    commitCounter_tOracleOutput_7=0;
                    	batchSizeCounter_tOracleOutput_7=0;
                }

 


	tos_count_tOracleOutput_7++;

/**
 * [tOracleOutput_7 main ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	

 



/**
 * [tOracleOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_7 > 0) {
            try {
            	if (pstmt_tOracleOutput_7 != null) {
					
					pstmt_tOracleOutput_7.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_7){
globalMap.put("tOracleOutput_7_ERROR_MESSAGE",e_tOracleOutput_7.getMessage());
		        java.sql.SQLException ne_tOracleOutput_7 = e_tOracleOutput_7.getNextException(),sqle_tOracleOutput_7=null;
		    	String errormessage_tOracleOutput_7;
				if (ne_tOracleOutput_7 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_7 = new java.sql.SQLException(e_tOracleOutput_7.getMessage() + "\ncaused by: " + ne_tOracleOutput_7.getMessage(), ne_tOracleOutput_7.getSQLState(), ne_tOracleOutput_7.getErrorCode(), ne_tOracleOutput_7);
					errormessage_tOracleOutput_7 = sqle_tOracleOutput_7.getMessage();
				}else{
					errormessage_tOracleOutput_7 = e_tOracleOutput_7.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_7);
            	
        	}
        	if (pstmt_tOracleOutput_7 != null) {
            	tmp_batchUpdateCount_tOracleOutput_7 = pstmt_tOracleOutput_7.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_7
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
				rowsToCommitCount_tOracleOutput_7 += (tmp_batchUpdateCount_tOracleOutput_7!=-1?tmp_batchUpdateCount_tOracleOutput_7:0);
            }
        }
        if(pstmt_tOracleOutput_7 != null) {
			
				pstmt_tOracleOutput_7.close();
				resourceMap.remove("pstmt_tOracleOutput_7");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_7", true);
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
		}
		conn_tOracleOutput_7.commit();
		if(commitCounter_tOracleOutput_7 > 0 && rowsToCommitCount_tOracleOutput_7 != 0) {
			
			rowsToCommitCount_tOracleOutput_7 = 0;
		}
		commitCounter_tOracleOutput_7 = 0;
		
		
		conn_tOracleOutput_7 .close();
		
		resourceMap.put("finish_tOracleOutput_7", true);
   	

	
	nb_line_deleted_tOracleOutput_7=nb_line_deleted_tOracleOutput_7+ deletedCount_tOracleOutput_7;
	nb_line_update_tOracleOutput_7=nb_line_update_tOracleOutput_7 + updatedCount_tOracleOutput_7;
	nb_line_inserted_tOracleOutput_7=nb_line_inserted_tOracleOutput_7 + insertedCount_tOracleOutput_7;
	nb_line_rejected_tOracleOutput_7=nb_line_rejected_tOracleOutput_7 + rejectedCount_tOracleOutput_7;
	
        globalMap.put("tOracleOutput_7_NB_LINE",nb_line_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_UPDATED",nb_line_update_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_7);
        globalMap.put("tOracleOutput_7_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_7);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row54");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_7", true);
end_Hash.put("tOracleOutput_7", System.currentTimeMillis());




/**
 * [tOracleOutput_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_7";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_7") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_7 = null;
                if ((pstmtToClose_tOracleOutput_7 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_7")) != null) {
                    pstmtToClose_tOracleOutput_7.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_7") == null){
            java.sql.Connection ctn_tOracleOutput_7 = null;
            if((ctn_tOracleOutput_7 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_7")) != null){
                try {
                    ctn_tOracleOutput_7.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_7) {
                    String errorMessage_tOracleOutput_7 = "failed to close the connection in tOracleOutput_7 :" + sqlEx_tOracleOutput_7.getMessage();
                    System.err.println(errorMessage_tOracleOutput_7);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "update acm_factura \nset  vavalpago = valor\nwhere recepcion_id =" + context.RECEPCION_ID  ;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk21", 0, "ok");
								} 
							
							tOracleInput_17Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfcopyOfout9Struct implements routines.system.IPersistableRow<copyOfcopyOfout9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "0";
				
				}
				public String VGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor Aval de pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfcopyOfout9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row58Struct implements routines.system.IPersistableRow<row58Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return false;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return 0;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return false;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return 0;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "";
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return false;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return 50;
				}
				public Integer TFACTURAPrecision(){
				    return 0;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return 20;
				}
				public Integer ESTADOPrecision(){
				    return 0;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return 50;
				}
				public Integer NUMEROPrecision(){
				    return 0;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 50;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal MEDCONTRATOS_ID;

				public BigDecimal getMEDCONTRATOS_ID () {
					return this.MEDCONTRATOS_ID;
				}

				public Boolean MEDCONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean MEDCONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer MEDCONTRATOS_IDLength(){
				    return 0;
				}
				public Integer MEDCONTRATOS_IDPrecision(){
				    return null;
				}
				public String MEDCONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String MEDCONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDOriginalDbColumnName(){
				
					return "MEDCONTRATOS_ID";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return 0;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return 0;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal SECUENCIA;

				public BigDecimal getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return 0;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "";
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return 0;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return "";
				
				}
				public String TCARGUEComment(){
				
				    return "";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return 0;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return 0;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return 0;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",MEDCONTRATOS_ID="+String.valueOf(MEDCONTRATOS_ID));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row58Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row58Struct row58 = new row58Struct();
copyOfcopyOfout9Struct copyOfcopyOfout9 = new copyOfcopyOfout9Struct();





	
	/**
	 * [tOracleOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_12", false);
		start_Hash.put("tOracleOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfcopyOfout9");
					}
				
		int tos_count_tOracleOutput_12 = 0;
		






    
    int nb_line_tOracleOutput_12 = 0;
    int nb_line_update_tOracleOutput_12 = 0;
    int nb_line_inserted_tOracleOutput_12 = 0;
    int nb_line_deleted_tOracleOutput_12 = 0;
    int nb_line_rejected_tOracleOutput_12 = 0;

    int tmp_batchUpdateCount_tOracleOutput_12 = 0;

    int deletedCount_tOracleOutput_12=0;
    int updatedCount_tOracleOutput_12=0;
    int insertedCount_tOracleOutput_12=0;
    int rowsToCommitCount_tOracleOutput_12=0;
    int rejectedCount_tOracleOutput_12=0;

    boolean whetherReject_tOracleOutput_12 = false;

    java.sql.Connection conn_tOracleOutput_12 = null;

    //optional table
    String dbschema_tOracleOutput_12 = null;
    String tableName_tOracleOutput_12 = null;
                    String driverClass_tOracleOutput_12 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_12);
                String url_tOracleOutput_12 = null;
                    url_tOracleOutput_12 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_12 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_12 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_12 = decryptedPassword_tOracleOutput_12;
                dbschema_tOracleOutput_12 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_12 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_12.put("user",dbUser_tOracleOutput_12);
                    atnParamsPrope_tOracleOutput_12.put("password",dbPwd_tOracleOutput_12);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_12.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_12 = java.sql.DriverManager.getConnection(url_tOracleOutput_12, atnParamsPrope_tOracleOutput_12);
        resourceMap.put("conn_tOracleOutput_12", conn_tOracleOutput_12);
            conn_tOracleOutput_12.setAutoCommit(false);
            int commitEvery_tOracleOutput_12 = 10000;
            int commitCounter_tOracleOutput_12 = 0;
        int batchSize_tOracleOutput_12 = 10000;
        int batchSizeCounter_tOracleOutput_12=0;
        int count_tOracleOutput_12=0;

        if(dbschema_tOracleOutput_12 == null || dbschema_tOracleOutput_12.trim().length() == 0) {
            tableName_tOracleOutput_12 = ("ACM_HFACTURAS");
        } else {
            tableName_tOracleOutput_12 = dbschema_tOracleOutput_12 + "." + ("ACM_HFACTURAS");
        }
                String insert_tOracleOutput_12 = "INSERT INTO " + tableName_tOracleOutput_12 + " (ETAPASNORMATIVIDAD_ID,FACTURA_ID,USUARIOS_ID,UORG_ID,VGLOSADO,VAVALPAGO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_12 = conn_tOracleOutput_12.prepareStatement(insert_tOracleOutput_12);
                        resourceMap.put("pstmt_tOracleOutput_12", pstmt_tOracleOutput_12);





 



/**
 * [tOracleOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_15", false);
		start_Hash.put("tMap_15", System.currentTimeMillis());
		
	
	currentComponent="tMap_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row58");
					}
				
		int tos_count_tMap_15 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_15__Struct  {
}
Var__tMap_15__Struct Var__tMap_15 = new Var__tMap_15__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfcopyOfout9Struct copyOfcopyOfout9_tmp = new copyOfcopyOfout9Struct();
// ###############################

        
        



        









 



/**
 * [tMap_15 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				String driverClass_tOracleInput_17 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_17);
				
			String url_tOracleInput_17 = null;
				url_tOracleInput_17 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_17 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_17 = context.db_origen_Password; 

				String dbPwd_tOracleInput_17 = decryptedPassword_tOracleInput_17;

				
					java.util.Properties atnParamsPrope_tOracleInput_17 = new java.util.Properties();
					atnParamsPrope_tOracleInput_17.put("user",dbUser_tOracleInput_17);
					atnParamsPrope_tOracleInput_17.put("password",dbPwd_tOracleInput_17);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_17.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_17 = java.sql.DriverManager.getConnection(url_tOracleInput_17, atnParamsPrope_tOracleInput_17);
				java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_17.next()) {
					sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
				}
                                if (!(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                                }
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement();

		    String dbquery_tOracleInput_17 = "SELECT * FROM ACM_FACTURA WHERE RECEPCION_ID ="+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row58.ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(1) != null) {
						row58.ID = rs_tOracleInput_17.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row58.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(2) != null) {
						row58.RECEPCION_ID = rs_tOracleInput_17.getBigDecimal(2);
					} else {
				
						row58.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 3) {
								row58.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(3) != null) {
						row58.CONTRATOS_ID = rs_tOracleInput_17.getBigDecimal(3);
					} else {
				
						row58.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 4) {
								row58.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(4) != null) {
						row58.PRESTADOR_ID = rs_tOracleInput_17.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 5) {
								row58.CANTPACIENTES = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(5) != null) {
						row58.CANTPACIENTES = rs_tOracleInput_17.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 6) {
								row58.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(6) != null) {
						row58.VALOR = rs_tOracleInput_17.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 7) {
								row58.VCALCULADO = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(7) != null) {
						row58.VCALCULADO = rs_tOracleInput_17.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 8) {
								row58.TFACTURA = null;
							} else {
	                         		
        	row58.TFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 9) {
								row58.FECHA = null;
							} else {
										
			row58.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_17, 9);
		                    }
							if(colQtyInRs_tOracleInput_17 < 10) {
								row58.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(10) != null) {
						row58.USUARIOS_ID = rs_tOracleInput_17.getBigDecimal(10);
					} else {
				
						row58.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 11) {
								row58.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(11) != null) {
						row58.UORG_ID = rs_tOracleInput_17.getBigDecimal(11);
					} else {
				
						row58.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 12) {
								row58.ESTADO = null;
							} else {
	                         		
        	row58.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 13) {
								row58.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(13) != null) {
						row58.ESTREGISTRO_ID = rs_tOracleInput_17.getBigDecimal(13);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 14) {
								row58.NUMERO = null;
							} else {
	                         		
        	row58.NUMERO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 15) {
								row58.PREFIJO = null;
							} else {
	                         		
        	row58.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_17 < 16) {
								row58.MEDCONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(16) != null) {
						row58.MEDCONTRATOS_ID = rs_tOracleInput_17.getBigDecimal(16);
					} else {
				
						row58.MEDCONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 17) {
								row58.DCARGUE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(17) != null) {
						row58.DCARGUE_ID = rs_tOracleInput_17.getBigDecimal(17);
					} else {
				
						row58.DCARGUE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 18) {
								row58.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(18) != null) {
						row58.VGLOSADO = rs_tOracleInput_17.getBigDecimal(18);
					} else {
				
						row58.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 19) {
								row58.SECUENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(19) != null) {
						row58.SECUENCIA = rs_tOracleInput_17.getBigDecimal(19);
					} else {
				
						row58.SECUENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 20) {
								row58.TCARGUE = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(20) != null) {
						row58.TCARGUE = rs_tOracleInput_17.getBigDecimal(20);
					} else {
				
						row58.TCARGUE = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 21) {
								row58.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(21) != null) {
						row58.VSOPORTADO = rs_tOracleInput_17.getBigDecimal(21);
					} else {
				
						row58.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 22) {
								row58.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(22) != null) {
						row58.VACEPTADO = rs_tOracleInput_17.getBigDecimal(22);
					} else {
				
						row58.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 23) {
								row58.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(23) != null) {
						row58.VRATIFICADO = rs_tOracleInput_17.getBigDecimal(23);
					} else {
				
						row58.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 24) {
								row58.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(24) != null) {
						row58.VAVALPAGO = rs_tOracleInput_17.getBigDecimal(24);
					} else {
				
						row58.VAVALPAGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tMap_15 main ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row58"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_15 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_15 = false;
		boolean mainRowRejected_tMap_15 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_15__Struct Var = Var__tMap_15;// ###############################
        // ###############################
        // # Output tables

copyOfcopyOfout9 = null;


// # Output table : 'copyOfcopyOfout9'
copyOfcopyOfout9_tmp.ETAPASNORMATIVIDAD_ID = context.ETAPASNORMATIVIDAD_ID;
copyOfcopyOfout9_tmp.FACTURA_ID = row58.ID ;
copyOfcopyOfout9_tmp.USUARIOS_ID = row58.USUARIOS_ID ;
copyOfcopyOfout9_tmp.UORG_ID = row58.UORG_ID ;
copyOfcopyOfout9_tmp.VGLOSADO = row58.VGLOSADO ;
copyOfcopyOfout9_tmp.VAVALPAGO = row58.VAVALPAGO ;
copyOfcopyOfout9_tmp.HAUDITORIAS_ID = context.HAUDITORIA_ID;
copyOfcopyOfout9 = copyOfcopyOfout9_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_15 = false;










 


	tos_count_tMap_15++;

/**
 * [tMap_15 main ] stop
 */
	
	/**
	 * [tMap_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_begin ] stop
 */
// Start of branch "copyOfcopyOfout9"
if(copyOfcopyOfout9 != null) { 



	
	/**
	 * [tOracleOutput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfcopyOfout9"
						
						);
					}
					



        whetherReject_tOracleOutput_12 = false;
                        pstmt_tOracleOutput_12.setBigDecimal(1, copyOfcopyOfout9.ETAPASNORMATIVIDAD_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(2, copyOfcopyOfout9.FACTURA_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(3, copyOfcopyOfout9.USUARIOS_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(4, copyOfcopyOfout9.UORG_ID);

                        pstmt_tOracleOutput_12.setBigDecimal(5, copyOfcopyOfout9.VGLOSADO);

                        pstmt_tOracleOutput_12.setBigDecimal(6, copyOfcopyOfout9.VAVALPAGO);

                        pstmt_tOracleOutput_12.setBigDecimal(7, copyOfcopyOfout9.HAUDITORIAS_ID);

                pstmt_tOracleOutput_12.addBatch();
                nb_line_tOracleOutput_12++;
                batchSizeCounter_tOracleOutput_12++;
            if (batchSize_tOracleOutput_12 > 0 &&  batchSize_tOracleOutput_12 <= batchSizeCounter_tOracleOutput_12) {
                try {
                    pstmt_tOracleOutput_12.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
			        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
			    	String errormessage_tOracleOutput_12;
					if (ne_tOracleOutput_12 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
						errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
					}else{
						errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_12);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                    insertedCount_tOracleOutput_12
                += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                batchSizeCounter_tOracleOutput_12 = 0;
            }
                commitCounter_tOracleOutput_12++;
                if(commitEvery_tOracleOutput_12 <= commitCounter_tOracleOutput_12) {
                    if(batchSizeCounter_tOracleOutput_12 > 0) {
                        try {
                            pstmt_tOracleOutput_12.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
					        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
					    	String errormessage_tOracleOutput_12;
							if (ne_tOracleOutput_12 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
								errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
							}else{
								errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_12);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
                            insertedCount_tOracleOutput_12
                        += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                        rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    }
                    conn_tOracleOutput_12.commit();
                    if(rowsToCommitCount_tOracleOutput_12 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_12 = 0;
                    }
                    commitCounter_tOracleOutput_12=0;
                    	batchSizeCounter_tOracleOutput_12=0;
                }

 


	tos_count_tOracleOutput_12++;

/**
 * [tOracleOutput_12 main ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	

 



/**
 * [tOracleOutput_12 process_data_end ] stop
 */

} // End of branch "copyOfcopyOfout9"




	
	/**
	 * [tMap_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
	if(conn_tOracleInput_17 != null && !conn_tOracleInput_17.isClosed()) {
	
			conn_tOracleInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tMap_15 end ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row58");
			  	}
			  	
 

ok_Hash.put("tMap_15", true);
end_Hash.put("tMap_15", System.currentTimeMillis());




/**
 * [tMap_15 end ] stop
 */

	
	/**
	 * [tOracleOutput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_12 > 0) {
            try {
            	if (pstmt_tOracleOutput_12 != null) {
					
					pstmt_tOracleOutput_12.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_12){
globalMap.put("tOracleOutput_12_ERROR_MESSAGE",e_tOracleOutput_12.getMessage());
		        java.sql.SQLException ne_tOracleOutput_12 = e_tOracleOutput_12.getNextException(),sqle_tOracleOutput_12=null;
		    	String errormessage_tOracleOutput_12;
				if (ne_tOracleOutput_12 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_12 = new java.sql.SQLException(e_tOracleOutput_12.getMessage() + "\ncaused by: " + ne_tOracleOutput_12.getMessage(), ne_tOracleOutput_12.getSQLState(), ne_tOracleOutput_12.getErrorCode(), ne_tOracleOutput_12);
					errormessage_tOracleOutput_12 = sqle_tOracleOutput_12.getMessage();
				}else{
					errormessage_tOracleOutput_12 = e_tOracleOutput_12.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_12);
            	
        	}
        	if (pstmt_tOracleOutput_12 != null) {
            	tmp_batchUpdateCount_tOracleOutput_12 = pstmt_tOracleOutput_12.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_12
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
				rowsToCommitCount_tOracleOutput_12 += (tmp_batchUpdateCount_tOracleOutput_12!=-1?tmp_batchUpdateCount_tOracleOutput_12:0);
            }
        }
        if(pstmt_tOracleOutput_12 != null) {
			
				pstmt_tOracleOutput_12.close();
				resourceMap.remove("pstmt_tOracleOutput_12");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_12", true);
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
		}
		conn_tOracleOutput_12.commit();
		if(commitCounter_tOracleOutput_12 > 0 && rowsToCommitCount_tOracleOutput_12 != 0) {
			
			rowsToCommitCount_tOracleOutput_12 = 0;
		}
		commitCounter_tOracleOutput_12 = 0;
		
		
		conn_tOracleOutput_12 .close();
		
		resourceMap.put("finish_tOracleOutput_12", true);
   	

	
	nb_line_deleted_tOracleOutput_12=nb_line_deleted_tOracleOutput_12+ deletedCount_tOracleOutput_12;
	nb_line_update_tOracleOutput_12=nb_line_update_tOracleOutput_12 + updatedCount_tOracleOutput_12;
	nb_line_inserted_tOracleOutput_12=nb_line_inserted_tOracleOutput_12 + insertedCount_tOracleOutput_12;
	nb_line_rejected_tOracleOutput_12=nb_line_rejected_tOracleOutput_12 + rejectedCount_tOracleOutput_12;
	
        globalMap.put("tOracleOutput_12_NB_LINE",nb_line_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_UPDATED",nb_line_update_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_12);
        globalMap.put("tOracleOutput_12_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_12);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfcopyOfout9");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_12", true);
end_Hash.put("tOracleOutput_12", System.currentTimeMillis());




/**
 * [tOracleOutput_12 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk22", 0, "ok");
								} 
							
							tOracleRow_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tMap_15 finally ] start
	 */

	

	
	
	currentComponent="tMap_15";
	
	

 



/**
 * [tMap_15 finally ] stop
 */

	
	/**
	 * [tOracleOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_12";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_12") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_12 = null;
                if ((pstmtToClose_tOracleOutput_12 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_12")) != null) {
                    pstmtToClose_tOracleOutput_12.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_12") == null){
            java.sql.Connection ctn_tOracleOutput_12 = null;
            if((ctn_tOracleOutput_12 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_12")) != null){
                try {
                    ctn_tOracleOutput_12.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_12) {
                    String errorMessage_tOracleOutput_12 = "failed to close the connection in tOracleOutput_12 :" + sqlEx_tOracleOutput_12.getMessage();
                    System.err.println(errorMessage_tOracleOutput_12);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_2", false);
		start_Hash.put("tOracleRow_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_2";
	
	
		int tos_count_tOracleRow_2 = 0;
		

	java.sql.Connection conn_tOracleRow_2 = null;
	String query_tOracleRow_2 = "";
	boolean whetherReject_tOracleRow_2 = false;
	int count_tOracleRow_2 = 0;
				conn_tOracleRow_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_2", conn_tOracleRow_2);
        java.sql.Statement stmt_tOracleRow_2 = conn_tOracleRow_2.createStatement();
        resourceMap.put("stmt_tOracleRow_2", stmt_tOracleRow_2);

 



/**
 * [tOracleRow_2 begin ] stop
 */
	
	/**
	 * [tOracleRow_2 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

query_tOracleRow_2 = "update acm_dfacturaformulacion \nset  vavalpago = vtotal\nwhere recepcion_id =" + context.RECEPCION_ID  ;
whetherReject_tOracleRow_2 = false;
globalMap.put("tOracleRow_2_QUERY",query_tOracleRow_2);
try {
		stmt_tOracleRow_2.execute(query_tOracleRow_2);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_2_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_2 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_2) {
		
	}
	

 


	tos_count_tOracleRow_2++;

/**
 * [tOracleRow_2 main ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

 



/**
 * [tOracleRow_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_2 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

	globalMap.put("tOracleRow_2_NB_LINE", count_tOracleRow_2);
        stmt_tOracleRow_2.close();
        resourceMap.remove("stmt_tOracleRow_2");
    resourceMap.put("statementClosed_tOracleRow_2", true);
    resourceMap.put("finish_tOracleRow_2", true);

 

ok_Hash.put("tOracleRow_2", true);
end_Hash.put("tOracleRow_2", System.currentTimeMillis());




/**
 * [tOracleRow_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk23", 0, "ok");
								} 
							
							tOracleInput_19Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_2";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_2") == null) {
            java.sql.Statement stmtToClose_tOracleRow_2 = null;
            if ((stmtToClose_tOracleRow_2 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_2")) != null) {
                stmtToClose_tOracleRow_2.close();
            }
    }
 



/**
 * [tOracleRow_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_2_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfInsHdfacStruct implements routines.system.IPersistableRow<copyOfInsHdfacStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ETAPASNORMATIVIDAD_ID;

				public BigDecimal getETAPASNORMATIVIDAD_ID () {
					return this.ETAPASNORMATIVIDAD_ID;
				}

				public Boolean ETAPASNORMATIVIDAD_IDIsNullable(){
				    return false;
				}
				public Boolean ETAPASNORMATIVIDAD_IDIsKey(){
				    return false;
				}
				public Integer ETAPASNORMATIVIDAD_IDLength(){
				    return 0;
				}
				public Integer ETAPASNORMATIVIDAD_IDPrecision(){
				    return null;
				}
				public String ETAPASNORMATIVIDAD_IDDefault(){
				
					return null;
				
				}
				public String ETAPASNORMATIVIDAD_IDComment(){
				
				    return "FK - ACM_ETAPASNORMATIVIDAD";
				
				}
				public String ETAPASNORMATIVIDAD_IDPattern(){
				
					return "";
				
				}
				public String ETAPASNORMATIVIDAD_IDOriginalDbColumnName(){
				
					return "ETAPASNORMATIVIDAD_ID";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return 4000;
				}
				public Integer OBSERVACIONESPrecision(){
				    return 0;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "Observaciones del historico de los servicios registrados";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal DFACTURAFORMULACION_ID;

				public BigDecimal getDFACTURAFORMULACION_ID () {
					return this.DFACTURAFORMULACION_ID;
				}

				public Boolean DFACTURAFORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean DFACTURAFORMULACION_IDIsKey(){
				    return false;
				}
				public Integer DFACTURAFORMULACION_IDLength(){
				    return 0;
				}
				public Integer DFACTURAFORMULACION_IDPrecision(){
				    return null;
				}
				public String DFACTURAFORMULACION_IDDefault(){
				
					return null;
				
				}
				public String DFACTURAFORMULACION_IDComment(){
				
				    return "FK - ACM_DFACTURAFORMULACION";
				
				}
				public String DFACTURAFORMULACION_IDPattern(){
				
					return "";
				
				}
				public String DFACTURAFORMULACION_IDOriginalDbColumnName(){
				
					return "DFACTURAFORMULACION_ID";
				
				}

				
			    public BigDecimal VLGLOSADO;

				public BigDecimal getVLGLOSADO () {
					return this.VLGLOSADO;
				}

				public Boolean VLGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VLGLOSADOIsKey(){
				    return false;
				}
				public Integer VLGLOSADOLength(){
				    return 0;
				}
				public Integer VLGLOSADOPrecision(){
				    return null;
				}
				public String VLGLOSADODefault(){
				
					return "0";
				
				}
				public String VLGLOSADOComment(){
				
				    return "Valor Glosado para la Etapa";
				
				}
				public String VLGLOSADOPattern(){
				
					return "";
				
				}
				public String VLGLOSADOOriginalDbColumnName(){
				
					return "VLGLOSADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return 0;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "0";
				
				}
				public String VAVALPAGOComment(){
				
				    return "Valor aval de pago";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal HAUDITORIAS_ID;

				public BigDecimal getHAUDITORIAS_ID () {
					return this.HAUDITORIAS_ID;
				}

				public Boolean HAUDITORIAS_IDIsNullable(){
				    return true;
				}
				public Boolean HAUDITORIAS_IDIsKey(){
				    return false;
				}
				public Integer HAUDITORIAS_IDLength(){
				    return 0;
				}
				public Integer HAUDITORIAS_IDPrecision(){
				    return null;
				}
				public String HAUDITORIAS_IDDefault(){
				
					return null;
				
				}
				public String HAUDITORIAS_IDComment(){
				
				    return "FK - ACM_HAUDITORIAS";
				
				}
				public String HAUDITORIAS_IDPattern(){
				
					return "";
				
				}
				public String HAUDITORIAS_IDOriginalDbColumnName(){
				
					return "HAUDITORIAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ETAPASNORMATIVIDAD_ID = (BigDecimal) dis.readObject();
					
					this.OBSERVACIONES = readString(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.DFACTURAFORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.VLGLOSADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.HAUDITORIAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ETAPASNORMATIVIDAD_ID);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFACTURAFORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VLGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.HAUDITORIAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ETAPASNORMATIVIDAD_ID="+String.valueOf(ETAPASNORMATIVIDAD_ID));
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",DFACTURAFORMULACION_ID="+String.valueOf(DFACTURAFORMULACION_ID));
		sb.append(",VLGLOSADO="+String.valueOf(VLGLOSADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",HAUDITORIAS_ID="+String.valueOf(HAUDITORIAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfInsHdfacStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row59Struct implements routines.system.IPersistableRow<row59Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return false;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return "";
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return "";
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String PRIMER_NOMBRE;

				public String getPRIMER_NOMBRE () {
					return this.PRIMER_NOMBRE;
				}

				public Boolean PRIMER_NOMBREIsNullable(){
				    return true;
				}
				public Boolean PRIMER_NOMBREIsKey(){
				    return false;
				}
				public Integer PRIMER_NOMBRELength(){
				    return null;
				}
				public Integer PRIMER_NOMBREPrecision(){
				    return null;
				}
				public String PRIMER_NOMBREDefault(){
				
					return "";
				
				}
				public String PRIMER_NOMBREComment(){
				
				    return "";
				
				}
				public String PRIMER_NOMBREPattern(){
				
					return "";
				
				}
				public String PRIMER_NOMBREOriginalDbColumnName(){
				
					return "PRIMER_NOMBRE";
				
				}

				
			    public String SEGUNDO_NOMBRE;

				public String getSEGUNDO_NOMBRE () {
					return this.SEGUNDO_NOMBRE;
				}

				public Boolean SEGUNDO_NOMBREIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_NOMBREIsKey(){
				    return false;
				}
				public Integer SEGUNDO_NOMBRELength(){
				    return null;
				}
				public Integer SEGUNDO_NOMBREPrecision(){
				    return null;
				}
				public String SEGUNDO_NOMBREDefault(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREComment(){
				
				    return "";
				
				}
				public String SEGUNDO_NOMBREPattern(){
				
					return "";
				
				}
				public String SEGUNDO_NOMBREOriginalDbColumnName(){
				
					return "SEGUNDO_NOMBRE";
				
				}

				
			    public String PRIMER_APELLIDO;

				public String getPRIMER_APELLIDO () {
					return this.PRIMER_APELLIDO;
				}

				public Boolean PRIMER_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean PRIMER_APELLIDOIsKey(){
				    return false;
				}
				public Integer PRIMER_APELLIDOLength(){
				    return null;
				}
				public Integer PRIMER_APELLIDOPrecision(){
				    return null;
				}
				public String PRIMER_APELLIDODefault(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOComment(){
				
				    return "";
				
				}
				public String PRIMER_APELLIDOPattern(){
				
					return "";
				
				}
				public String PRIMER_APELLIDOOriginalDbColumnName(){
				
					return "PRIMER_APELLIDO";
				
				}

				
			    public String SEGUNDO_APELLIDO;

				public String getSEGUNDO_APELLIDO () {
					return this.SEGUNDO_APELLIDO;
				}

				public Boolean SEGUNDO_APELLIDOIsNullable(){
				    return true;
				}
				public Boolean SEGUNDO_APELLIDOIsKey(){
				    return false;
				}
				public Integer SEGUNDO_APELLIDOLength(){
				    return null;
				}
				public Integer SEGUNDO_APELLIDOPrecision(){
				    return null;
				}
				public String SEGUNDO_APELLIDODefault(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOComment(){
				
				    return "";
				
				}
				public String SEGUNDO_APELLIDOPattern(){
				
					return "";
				
				}
				public String SEGUNDO_APELLIDOOriginalDbColumnName(){
				
					return "SEGUNDO_APELLIDO";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return "";
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return "";
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return "";
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return "";
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return "";
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return "";
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return "";
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return "";
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return "";
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "";
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return "";
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return "";
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return "";
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return "";
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.LUGAR = readString(dis);
					
					this.PERIODO = readDate(dis);
					
					this.SIGLAESM = readString(dis);
					
					this.SIGLAFUERZA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.PRIMER_NOMBRE = readString(dis);
					
					this.SEGUNDO_NOMBRE = readString(dis);
					
					this.PRIMER_APELLIDO = readString(dis);
					
					this.SEGUNDO_APELLIDO = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.CODIGOSSMP = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.LABORATORIO = readString(dis);
					
					this.BODEGA = readString(dis);
					
					this.LOTE = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.VGLOSADO = (BigDecimal) dis.readObject();
					
						this.VSOPORTADO = (BigDecimal) dis.readObject();
					
						this.VACEPTADO = (BigDecimal) dis.readObject();
					
						this.VRATIFICADO = (BigDecimal) dis.readObject();
					
						this.VAVALPAGO = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.LUGAR,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// String
				
						writeString(this.SIGLAESM,dos);
					
					// String
				
						writeString(this.SIGLAFUERZA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.PRIMER_NOMBRE,dos);
					
					// String
				
						writeString(this.SEGUNDO_NOMBRE,dos);
					
					// String
				
						writeString(this.PRIMER_APELLIDO,dos);
					
					// String
				
						writeString(this.SEGUNDO_APELLIDO,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.CODIGOSSMP,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// String
				
						writeString(this.LABORATORIO,dos);
					
					// String
				
						writeString(this.BODEGA,dos);
					
					// String
				
						writeString(this.LOTE,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGLOSADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VSOPORTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VACEPTADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VRATIFICADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VAVALPAGO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",PRIMER_NOMBRE="+PRIMER_NOMBRE);
		sb.append(",SEGUNDO_NOMBRE="+SEGUNDO_NOMBRE);
		sb.append(",PRIMER_APELLIDO="+PRIMER_APELLIDO);
		sb.append(",SEGUNDO_APELLIDO="+SEGUNDO_APELLIDO);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row59Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row59Struct row59 = new row59Struct();
copyOfInsHdfacStruct copyOfInsHdfac = new copyOfInsHdfacStruct();





	
	/**
	 * [tOracleOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_13", false);
		start_Hash.put("tOracleOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfInsHdfac");
					}
				
		int tos_count_tOracleOutput_13 = 0;
		






    
    int nb_line_tOracleOutput_13 = 0;
    int nb_line_update_tOracleOutput_13 = 0;
    int nb_line_inserted_tOracleOutput_13 = 0;
    int nb_line_deleted_tOracleOutput_13 = 0;
    int nb_line_rejected_tOracleOutput_13 = 0;

    int tmp_batchUpdateCount_tOracleOutput_13 = 0;

    int deletedCount_tOracleOutput_13=0;
    int updatedCount_tOracleOutput_13=0;
    int insertedCount_tOracleOutput_13=0;
    int rowsToCommitCount_tOracleOutput_13=0;
    int rejectedCount_tOracleOutput_13=0;

    boolean whetherReject_tOracleOutput_13 = false;

    java.sql.Connection conn_tOracleOutput_13 = null;

    //optional table
    String dbschema_tOracleOutput_13 = null;
    String tableName_tOracleOutput_13 = null;
                    String driverClass_tOracleOutput_13 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_13);
                String url_tOracleOutput_13 = null;
                    url_tOracleOutput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_13 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_13 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_13 = decryptedPassword_tOracleOutput_13;
                dbschema_tOracleOutput_13 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_13 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_13.put("user",dbUser_tOracleOutput_13);
                    atnParamsPrope_tOracleOutput_13.put("password",dbPwd_tOracleOutput_13);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_13.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_13 = java.sql.DriverManager.getConnection(url_tOracleOutput_13, atnParamsPrope_tOracleOutput_13);
        resourceMap.put("conn_tOracleOutput_13", conn_tOracleOutput_13);
            conn_tOracleOutput_13.setAutoCommit(false);
            int commitEvery_tOracleOutput_13 = 10000;
            int commitCounter_tOracleOutput_13 = 0;
        int batchSize_tOracleOutput_13 = 10000;
        int batchSizeCounter_tOracleOutput_13=0;
        int count_tOracleOutput_13=0;

        if(dbschema_tOracleOutput_13 == null || dbschema_tOracleOutput_13.trim().length() == 0) {
            tableName_tOracleOutput_13 = ("ACM_HDFACTURASERVICIO");
        } else {
            tableName_tOracleOutput_13 = dbschema_tOracleOutput_13 + "." + ("ACM_HDFACTURASERVICIO");
        }
                String insert_tOracleOutput_13 = "INSERT INTO " + tableName_tOracleOutput_13 + " (ETAPASNORMATIVIDAD_ID,OBSERVACIONES,USUARIOS_ID,UORG_ID,DFACTURAFORMULACION_ID,VLGLOSADO,VAVALPAGO,HAUDITORIAS_ID) VALUES (?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_13 = conn_tOracleOutput_13.prepareStatement(insert_tOracleOutput_13);
                        resourceMap.put("pstmt_tOracleOutput_13", pstmt_tOracleOutput_13);





 



/**
 * [tOracleOutput_13 begin ] stop
 */



	
	/**
	 * [tMap_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_16", false);
		start_Hash.put("tMap_16", System.currentTimeMillis());
		
	
	currentComponent="tMap_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row59");
					}
				
		int tos_count_tMap_16 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_16__Struct  {
}
Var__tMap_16__Struct Var__tMap_16 = new Var__tMap_16__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfInsHdfacStruct copyOfInsHdfac_tmp = new copyOfInsHdfacStruct();
// ###############################

        
        



        









 



/**
 * [tMap_16 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				String driverClass_tOracleInput_19 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_19);
				
			String url_tOracleInput_19 = null;
				url_tOracleInput_19 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_19 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_19 = context.db_origen_Password; 

				String dbPwd_tOracleInput_19 = decryptedPassword_tOracleInput_19;

				
					java.util.Properties atnParamsPrope_tOracleInput_19 = new java.util.Properties();
					atnParamsPrope_tOracleInput_19.put("user",dbUser_tOracleInput_19);
					atnParamsPrope_tOracleInput_19.put("password",dbPwd_tOracleInput_19);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_19.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_19 = java.sql.DriverManager.getConnection(url_tOracleInput_19, atnParamsPrope_tOracleInput_19);
				java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_19.next()) {
					sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
				}
                                if (!(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                                }
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement();

		    String dbquery_tOracleInput_19 = "SELECT * FROM ACM_DFACTURAFORMULACION WHERE RECEPCION_ID ="+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row59.ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row59.ID = rs_tOracleInput_19.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row59.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(2) != null) {
						row59.RECEPCION_ID = rs_tOracleInput_19.getBigDecimal(2);
					} else {
				
						row59.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row59.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(3) != null) {
						row59.FACTURA_ID = rs_tOracleInput_19.getBigDecimal(3);
					} else {
				
						row59.FACTURA_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 4) {
								row59.PREFIJO = null;
							} else {
	                         		
        	row59.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 5) {
								row59.NUMERO_FACTURA = null;
							} else {
	                         		
        	row59.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 6) {
								row59.LUGAR = null;
							} else {
	                         		
        	row59.LUGAR = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 7) {
								row59.PERIODO = null;
							} else {
										
			row59.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_19, 7);
		                    }
							if(colQtyInRs_tOracleInput_19 < 8) {
								row59.SIGLAESM = null;
							} else {
	                         		
        	row59.SIGLAESM = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 9) {
								row59.SIGLAFUERZA = null;
							} else {
	                         		
        	row59.SIGLAFUERZA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 10) {
								row59.FORMULA = null;
							} else {
	                         		
        	row59.FORMULA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 11) {
								row59.TIRILLA = null;
							} else {
	                         		
        	row59.TIRILLA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 12) {
								row59.FFORMUALCION = null;
							} else {
										
			row59.FFORMUALCION = routines.system.JDBCUtil.getDate(rs_tOracleInput_19, 12);
		                    }
							if(colQtyInRs_tOracleInput_19 < 13) {
								row59.FDISPENSACION = null;
							} else {
										
			row59.FDISPENSACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_19, 13);
		                    }
							if(colQtyInRs_tOracleInput_19 < 14) {
								row59.PRIMER_NOMBRE = null;
							} else {
	                         		
        	row59.PRIMER_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 15) {
								row59.SEGUNDO_NOMBRE = null;
							} else {
	                         		
        	row59.SEGUNDO_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 16) {
								row59.PRIMER_APELLIDO = null;
							} else {
	                         		
        	row59.PRIMER_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 17) {
								row59.SEGUNDO_APELLIDO = null;
							} else {
	                         		
        	row59.SEGUNDO_APELLIDO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 18) {
								row59.DOCUMENTO = null;
							} else {
	                         		
        	row59.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 18, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 19) {
								row59.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(19) != null) {
						row59.TDOCUMENTOS_ID = rs_tOracleInput_19.getBigDecimal(19);
					} else {
				
						row59.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 20) {
								row59.TFORMULAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(20) != null) {
						row59.TFORMULAS_ID = rs_tOracleInput_19.getBigDecimal(20);
					} else {
				
						row59.TFORMULAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 21) {
								row59.TORIGEN_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(21) != null) {
						row59.TORIGEN_ID = rs_tOracleInput_19.getBigDecimal(21);
					} else {
				
						row59.TORIGEN_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 22) {
								row59.CODIGOCUM = null;
							} else {
	                         		
        	row59.CODIGOCUM = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 23) {
								row59.INVIMA = null;
							} else {
	                         		
        	row59.INVIMA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 23, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 24) {
								row59.CODIGOSSMP = null;
							} else {
	                         		
        	row59.CODIGOSSMP = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 24, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 25) {
								row59.NOMBREMEDICAMENTO = null;
							} else {
	                         		
        	row59.NOMBREMEDICAMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 25, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 26) {
								row59.LABORATORIO = null;
							} else {
	                         		
        	row59.LABORATORIO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 26, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 27) {
								row59.BODEGA = null;
							} else {
	                         		
        	row59.BODEGA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 27, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 28) {
								row59.LOTE = null;
							} else {
	                         		
        	row59.LOTE = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 28, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 29) {
								row59.FVENCIMIENTO = null;
							} else {
										
			row59.FVENCIMIENTO = routines.system.JDBCUtil.getDate(rs_tOracleInput_19, 29);
		                    }
							if(colQtyInRs_tOracleInput_19 < 30) {
								row59.CANTFORMULADA = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(30) != null) {
						row59.CANTFORMULADA = rs_tOracleInput_19.getBigDecimal(30);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 31) {
								row59.CANTENTREGADA = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(31) != null) {
						row59.CANTENTREGADA = rs_tOracleInput_19.getBigDecimal(31);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 32) {
								row59.VUNITARIO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(32) != null) {
						row59.VUNITARIO = rs_tOracleInput_19.getBigDecimal(32);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 33) {
								row59.SUBTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(33) != null) {
						row59.SUBTOTAL = rs_tOracleInput_19.getBigDecimal(33);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 34) {
								row59.INTERMEDIACION = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(34) != null) {
						row59.INTERMEDIACION = rs_tOracleInput_19.getBigDecimal(34);
					} else {
				
						row59.INTERMEDIACION = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 35) {
								row59.VTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(35) != null) {
						row59.VTOTAL = rs_tOracleInput_19.getBigDecimal(35);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 36) {
								row59.VGRAVADO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(36) != null) {
						row59.VGRAVADO = rs_tOracleInput_19.getBigDecimal(36);
					} else {
				
						row59.VGRAVADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 37) {
								row59.DCARGUE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(37) != null) {
						row59.DCARGUE_ID = rs_tOracleInput_19.getBigDecimal(37);
					} else {
				
						row59.DCARGUE_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 38) {
								row59.DFORMMEDINSUMOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(38) != null) {
						row59.DFORMMEDINSUMOS_ID = rs_tOracleInput_19.getBigDecimal(38);
					} else {
				
						row59.DFORMMEDINSUMOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 39) {
								row59.FECHA = null;
							} else {
										
			row59.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_19, 39);
		                    }
							if(colQtyInRs_tOracleInput_19 < 40) {
								row59.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(40) != null) {
						row59.USUARIOS_ID = rs_tOracleInput_19.getBigDecimal(40);
					} else {
				
						row59.USUARIOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 41) {
								row59.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(41) != null) {
						row59.UORG_ID = rs_tOracleInput_19.getBigDecimal(41);
					} else {
				
						row59.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 42) {
								row59.ESTADO = null;
							} else {
	                         		
        	row59.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 42, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 43) {
								row59.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(43) != null) {
						row59.ESTREGISTRO_ID = rs_tOracleInput_19.getBigDecimal(43);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 44) {
								row59.TIPIFICACION = null;
							} else {
	                         		
        	row59.TIPIFICACION = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 44, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 45) {
								row59.TDOCUMENTO = null;
							} else {
	                         		
        	row59.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 45, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 46) {
								row59.TFORMULA = null;
							} else {
	                         		
        	row59.TFORMULA = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 46, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 47) {
								row59.TORIGEN = null;
							} else {
	                         		
        	row59.TORIGEN = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 47, false);
		                    }
							if(colQtyInRs_tOracleInput_19 < 48) {
								row59.VGLOSADO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(48) != null) {
						row59.VGLOSADO = rs_tOracleInput_19.getBigDecimal(48);
					} else {
				
						row59.VGLOSADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 49) {
								row59.VSOPORTADO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(49) != null) {
						row59.VSOPORTADO = rs_tOracleInput_19.getBigDecimal(49);
					} else {
				
						row59.VSOPORTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 50) {
								row59.VACEPTADO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(50) != null) {
						row59.VACEPTADO = rs_tOracleInput_19.getBigDecimal(50);
					} else {
				
						row59.VACEPTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 51) {
								row59.VRATIFICADO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(51) != null) {
						row59.VRATIFICADO = rs_tOracleInput_19.getBigDecimal(51);
					} else {
				
						row59.VRATIFICADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 52) {
								row59.VAVALPAGO = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(52) != null) {
						row59.VAVALPAGO = rs_tOracleInput_19.getBigDecimal(52);
					} else {
				
						row59.VAVALPAGO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 53) {
								row59.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(53) != null) {
						row59.PERSONAS_ID = rs_tOracleInput_19.getBigDecimal(53);
					} else {
				
						row59.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 54) {
								row59.DOSIS = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(54) != null) {
						row59.DOSIS = rs_tOracleInput_19.getBigDecimal(54);
					} else {
				
						row59.DOSIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 55) {
								row59.FRECUENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(55) != null) {
						row59.FRECUENCIA = rs_tOracleInput_19.getBigDecimal(55);
					} else {
				
						row59.FRECUENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 56) {
								row59.PRODUCTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(56) != null) {
						row59.PRODUCTOS_ID = rs_tOracleInput_19.getBigDecimal(56);
					} else {
				
						row59.PRODUCTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 57) {
								row59.CIE10_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(57) != null) {
						row59.CIE10_ID = rs_tOracleInput_19.getBigDecimal(57);
					} else {
				
						row59.CIE10_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tMap_16 main ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row59"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_16 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_16 = false;
		boolean mainRowRejected_tMap_16 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_16__Struct Var = Var__tMap_16;// ###############################
        // ###############################
        // # Output tables

copyOfInsHdfac = null;


// # Output table : 'copyOfInsHdfac'
copyOfInsHdfac_tmp.ETAPASNORMATIVIDAD_ID = context.ETAPASNORMATIVIDAD_ID;
copyOfInsHdfac_tmp.OBSERVACIONES = "Glosamiento automatico";
copyOfInsHdfac_tmp.USUARIOS_ID = context.USUARIOS_ID;
copyOfInsHdfac_tmp.UORG_ID = context.UORG_ID;
copyOfInsHdfac_tmp.DFACTURAFORMULACION_ID = row59.ID ;
copyOfInsHdfac_tmp.VLGLOSADO = row59.VGLOSADO ;
copyOfInsHdfac_tmp.VAVALPAGO = row59.VAVALPAGO ;
copyOfInsHdfac_tmp.HAUDITORIAS_ID = context.HAUDITORIA_ID;
copyOfInsHdfac = copyOfInsHdfac_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_16 = false;










 


	tos_count_tMap_16++;

/**
 * [tMap_16 main ] stop
 */
	
	/**
	 * [tMap_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 process_data_begin ] stop
 */
// Start of branch "copyOfInsHdfac"
if(copyOfInsHdfac != null) { 



	
	/**
	 * [tOracleOutput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfInsHdfac"
						
						);
					}
					



        whetherReject_tOracleOutput_13 = false;
                        pstmt_tOracleOutput_13.setBigDecimal(1, copyOfInsHdfac.ETAPASNORMATIVIDAD_ID);

                        if(copyOfInsHdfac.OBSERVACIONES == null) {
pstmt_tOracleOutput_13.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_13.setString(2, copyOfInsHdfac.OBSERVACIONES);
}

                        pstmt_tOracleOutput_13.setBigDecimal(3, copyOfInsHdfac.USUARIOS_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(4, copyOfInsHdfac.UORG_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(5, copyOfInsHdfac.DFACTURAFORMULACION_ID);

                        pstmt_tOracleOutput_13.setBigDecimal(6, copyOfInsHdfac.VLGLOSADO);

                        pstmt_tOracleOutput_13.setBigDecimal(7, copyOfInsHdfac.VAVALPAGO);

                        pstmt_tOracleOutput_13.setBigDecimal(8, copyOfInsHdfac.HAUDITORIAS_ID);

                pstmt_tOracleOutput_13.addBatch();
                nb_line_tOracleOutput_13++;
                batchSizeCounter_tOracleOutput_13++;
            if (batchSize_tOracleOutput_13 > 0 &&  batchSize_tOracleOutput_13 <= batchSizeCounter_tOracleOutput_13) {
                try {
                    pstmt_tOracleOutput_13.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
			        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
			    	String errormessage_tOracleOutput_13;
					if (ne_tOracleOutput_13 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
						errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
					}else{
						errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_13);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                    insertedCount_tOracleOutput_13
                += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                batchSizeCounter_tOracleOutput_13 = 0;
            }
                commitCounter_tOracleOutput_13++;
                if(commitEvery_tOracleOutput_13 <= commitCounter_tOracleOutput_13) {
                    if(batchSizeCounter_tOracleOutput_13 > 0) {
                        try {
                            pstmt_tOracleOutput_13.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
					        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
					    	String errormessage_tOracleOutput_13;
							if (ne_tOracleOutput_13 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
								errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
							}else{
								errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_13);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
                            insertedCount_tOracleOutput_13
                        += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                        rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    }
                    conn_tOracleOutput_13.commit();
                    if(rowsToCommitCount_tOracleOutput_13 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_13 = 0;
                    }
                    commitCounter_tOracleOutput_13=0;
                    	batchSizeCounter_tOracleOutput_13=0;
                }

 


	tos_count_tOracleOutput_13++;

/**
 * [tOracleOutput_13 main ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	

 



/**
 * [tOracleOutput_13 process_data_end ] stop
 */

} // End of branch "copyOfInsHdfac"




	
	/**
	 * [tMap_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
	if(conn_tOracleInput_19 != null && !conn_tOracleInput_19.isClosed()) {
	
			conn_tOracleInput_19.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tMap_16 end ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row59");
			  	}
			  	
 

ok_Hash.put("tMap_16", true);
end_Hash.put("tMap_16", System.currentTimeMillis());




/**
 * [tMap_16 end ] stop
 */

	
	/**
	 * [tOracleOutput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_13 > 0) {
            try {
            	if (pstmt_tOracleOutput_13 != null) {
					
					pstmt_tOracleOutput_13.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_13){
globalMap.put("tOracleOutput_13_ERROR_MESSAGE",e_tOracleOutput_13.getMessage());
		        java.sql.SQLException ne_tOracleOutput_13 = e_tOracleOutput_13.getNextException(),sqle_tOracleOutput_13=null;
		    	String errormessage_tOracleOutput_13;
				if (ne_tOracleOutput_13 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_13 = new java.sql.SQLException(e_tOracleOutput_13.getMessage() + "\ncaused by: " + ne_tOracleOutput_13.getMessage(), ne_tOracleOutput_13.getSQLState(), ne_tOracleOutput_13.getErrorCode(), ne_tOracleOutput_13);
					errormessage_tOracleOutput_13 = sqle_tOracleOutput_13.getMessage();
				}else{
					errormessage_tOracleOutput_13 = e_tOracleOutput_13.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_13);
            	
        	}
        	if (pstmt_tOracleOutput_13 != null) {
            	tmp_batchUpdateCount_tOracleOutput_13 = pstmt_tOracleOutput_13.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_13
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
				rowsToCommitCount_tOracleOutput_13 += (tmp_batchUpdateCount_tOracleOutput_13!=-1?tmp_batchUpdateCount_tOracleOutput_13:0);
            }
        }
        if(pstmt_tOracleOutput_13 != null) {
			
				pstmt_tOracleOutput_13.close();
				resourceMap.remove("pstmt_tOracleOutput_13");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_13", true);
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
		}
		conn_tOracleOutput_13.commit();
		if(commitCounter_tOracleOutput_13 > 0 && rowsToCommitCount_tOracleOutput_13 != 0) {
			
			rowsToCommitCount_tOracleOutput_13 = 0;
		}
		commitCounter_tOracleOutput_13 = 0;
		
		
		conn_tOracleOutput_13 .close();
		
		resourceMap.put("finish_tOracleOutput_13", true);
   	

	
	nb_line_deleted_tOracleOutput_13=nb_line_deleted_tOracleOutput_13+ deletedCount_tOracleOutput_13;
	nb_line_update_tOracleOutput_13=nb_line_update_tOracleOutput_13 + updatedCount_tOracleOutput_13;
	nb_line_inserted_tOracleOutput_13=nb_line_inserted_tOracleOutput_13 + insertedCount_tOracleOutput_13;
	nb_line_rejected_tOracleOutput_13=nb_line_rejected_tOracleOutput_13 + rejectedCount_tOracleOutput_13;
	
        globalMap.put("tOracleOutput_13_NB_LINE",nb_line_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_UPDATED",nb_line_update_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_13);
        globalMap.put("tOracleOutput_13_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_13);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfInsHdfac");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_13", true);
end_Hash.put("tOracleOutput_13", System.currentTimeMillis());




/**
 * [tOracleOutput_13 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk24", 0, "ok");
								} 
							
							tFixedFlowInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tMap_16 finally ] start
	 */

	

	
	
	currentComponent="tMap_16";
	
	

 



/**
 * [tMap_16 finally ] stop
 */

	
	/**
	 * [tOracleOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_13";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_13") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_13 = null;
                if ((pstmtToClose_tOracleOutput_13 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_13")) != null) {
                    pstmtToClose_tOracleOutput_13.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_13") == null){
            java.sql.Connection ctn_tOracleOutput_13 = null;
            if((ctn_tOracleOutput_13 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_13")) != null){
                try {
                    ctn_tOracleOutput_13.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_13) {
                    String errorMessage_tOracleOutput_13 = "failed to close the connection in tOracleOutput_13 :" + sqlEx_tOracleOutput_13.getMessage();
                    System.err.println(errorMessage_tOracleOutput_13);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_13 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row60Struct implements routines.system.IPersistableRow<row60Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ESTEXTDERECHOS_ID;

				public BigDecimal getESTEXTDERECHOS_ID () {
					return this.ESTEXTDERECHOS_ID;
				}

				public Boolean ESTEXTDERECHOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTEXTDERECHOS_IDIsKey(){
				    return false;
				}
				public Integer ESTEXTDERECHOS_IDLength(){
				    return null;
				}
				public Integer ESTEXTDERECHOS_IDPrecision(){
				    return null;
				}
				public String ESTEXTDERECHOS_IDDefault(){
				
					return null;
				
				}
				public String ESTEXTDERECHOS_IDComment(){
				
				    return "";
				
				}
				public String ESTEXTDERECHOS_IDPattern(){
				
					return "";
				
				}
				public String ESTEXTDERECHOS_IDOriginalDbColumnName(){
				
					return "ESTEXTDERECHOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row60Struct other = (row60Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row60Struct other) {

		other.ID = this.ID;
	            other.ESTEXTDERECHOS_ID = this.ESTEXTDERECHOS_ID;
	            
	}

	public void copyKeysDataTo(row60Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTEXTDERECHOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTEXTDERECHOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTEXTDERECHOS_ID="+String.valueOf(ESTEXTDERECHOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row60Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row60Struct row60 = new row60Struct();




	
	/**
	 * [tOracleOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_14", false);
		start_Hash.put("tOracleOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row60");
					}
				
		int tos_count_tOracleOutput_14 = 0;
		






        int updateKeyCount_tOracleOutput_14 = 1;
        if(updateKeyCount_tOracleOutput_14 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_14 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_14 = 0;
    int nb_line_update_tOracleOutput_14 = 0;
    int nb_line_inserted_tOracleOutput_14 = 0;
    int nb_line_deleted_tOracleOutput_14 = 0;
    int nb_line_rejected_tOracleOutput_14 = 0;

    int tmp_batchUpdateCount_tOracleOutput_14 = 0;

    int deletedCount_tOracleOutput_14=0;
    int updatedCount_tOracleOutput_14=0;
    int insertedCount_tOracleOutput_14=0;
    int rowsToCommitCount_tOracleOutput_14=0;
    int rejectedCount_tOracleOutput_14=0;

    boolean whetherReject_tOracleOutput_14 = false;

    java.sql.Connection conn_tOracleOutput_14 = null;

    //optional table
    String dbschema_tOracleOutput_14 = null;
    String tableName_tOracleOutput_14 = null;
                    String driverClass_tOracleOutput_14 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_14);
                String url_tOracleOutput_14 = null;
                    url_tOracleOutput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_14 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_14 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_14 = decryptedPassword_tOracleOutput_14;
                dbschema_tOracleOutput_14 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_14 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_14.put("user",dbUser_tOracleOutput_14);
                    atnParamsPrope_tOracleOutput_14.put("password",dbPwd_tOracleOutput_14);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_14.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_14 = java.sql.DriverManager.getConnection(url_tOracleOutput_14, atnParamsPrope_tOracleOutput_14);
        resourceMap.put("conn_tOracleOutput_14", conn_tOracleOutput_14);
            conn_tOracleOutput_14.setAutoCommit(false);
            int commitEvery_tOracleOutput_14 = 10000;
            int commitCounter_tOracleOutput_14 = 0;
        int batchSize_tOracleOutput_14 = 10000;
        int batchSizeCounter_tOracleOutput_14=0;
        int count_tOracleOutput_14=0;

        if(dbschema_tOracleOutput_14 == null || dbschema_tOracleOutput_14.trim().length() == 0) {
            tableName_tOracleOutput_14 = ("ACM_RECEPCION");
        } else {
            tableName_tOracleOutput_14 = dbschema_tOracleOutput_14 + "." + ("ACM_RECEPCION");
        }
                String update_tOracleOutput_14 = "UPDATE " + tableName_tOracleOutput_14 + " SET ESTEXTDERECHOS_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_14 = conn_tOracleOutput_14.prepareStatement(update_tOracleOutput_14);
                resourceMap.put("pstmt_tOracleOutput_14", pstmt_tOracleOutput_14);





 



/**
 * [tOracleOutput_14 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row60.ID = context.RECEPCION_ID;
    	            	        	            	
    	            		row60.ESTEXTDERECHOS_ID = new BigDecimal(7);
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row60"
						
						);
					}
					



        whetherReject_tOracleOutput_14 = false;
                    pstmt_tOracleOutput_14.setBigDecimal(1, row60.ESTEXTDERECHOS_ID);


                    pstmt_tOracleOutput_14.setBigDecimal(2 + count_tOracleOutput_14, row60.ID);

                pstmt_tOracleOutput_14.addBatch();
                nb_line_tOracleOutput_14++;
                batchSizeCounter_tOracleOutput_14++;
            if (batchSize_tOracleOutput_14 > 0 &&  batchSize_tOracleOutput_14 <= batchSizeCounter_tOracleOutput_14) {
                try {
                    pstmt_tOracleOutput_14.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
			        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
			    	String errormessage_tOracleOutput_14;
					if (ne_tOracleOutput_14 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
						errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
					}else{
						errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_14);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                    updatedCount_tOracleOutput_14
                += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                batchSizeCounter_tOracleOutput_14 = 0;
            }
                commitCounter_tOracleOutput_14++;
                if(commitEvery_tOracleOutput_14 <= commitCounter_tOracleOutput_14) {
                    if(batchSizeCounter_tOracleOutput_14 > 0) {
                        try {
                            pstmt_tOracleOutput_14.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
					        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
					    	String errormessage_tOracleOutput_14;
							if (ne_tOracleOutput_14 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
								errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
							}else{
								errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_14);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
                            updatedCount_tOracleOutput_14
                        += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                        rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    }
                    conn_tOracleOutput_14.commit();
                    if(rowsToCommitCount_tOracleOutput_14 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_14 = 0;
                    }
                    commitCounter_tOracleOutput_14=0;
                    	batchSizeCounter_tOracleOutput_14=0;
                }

 


	tos_count_tOracleOutput_14++;

/**
 * [tOracleOutput_14 main ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	

 



/**
 * [tOracleOutput_14 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_14 > 0) {
            try {
            	if (pstmt_tOracleOutput_14 != null) {
					
					pstmt_tOracleOutput_14.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_14){
globalMap.put("tOracleOutput_14_ERROR_MESSAGE",e_tOracleOutput_14.getMessage());
		        java.sql.SQLException ne_tOracleOutput_14 = e_tOracleOutput_14.getNextException(),sqle_tOracleOutput_14=null;
		    	String errormessage_tOracleOutput_14;
				if (ne_tOracleOutput_14 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_14 = new java.sql.SQLException(e_tOracleOutput_14.getMessage() + "\ncaused by: " + ne_tOracleOutput_14.getMessage(), ne_tOracleOutput_14.getSQLState(), ne_tOracleOutput_14.getErrorCode(), ne_tOracleOutput_14);
					errormessage_tOracleOutput_14 = sqle_tOracleOutput_14.getMessage();
				}else{
					errormessage_tOracleOutput_14 = e_tOracleOutput_14.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_14);
            	
        	}
        	if (pstmt_tOracleOutput_14 != null) {
            	tmp_batchUpdateCount_tOracleOutput_14 = pstmt_tOracleOutput_14.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_14
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
				rowsToCommitCount_tOracleOutput_14 += (tmp_batchUpdateCount_tOracleOutput_14!=-1?tmp_batchUpdateCount_tOracleOutput_14:0);
            }
        }
        if(pstmt_tOracleOutput_14 != null) {
			
				pstmt_tOracleOutput_14.close();
				resourceMap.remove("pstmt_tOracleOutput_14");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_14", true);
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
		}
		conn_tOracleOutput_14.commit();
		if(commitCounter_tOracleOutput_14 > 0 && rowsToCommitCount_tOracleOutput_14 != 0) {
			
			rowsToCommitCount_tOracleOutput_14 = 0;
		}
		commitCounter_tOracleOutput_14 = 0;
		
		
		conn_tOracleOutput_14 .close();
		
		resourceMap.put("finish_tOracleOutput_14", true);
   	

	
	nb_line_deleted_tOracleOutput_14=nb_line_deleted_tOracleOutput_14+ deletedCount_tOracleOutput_14;
	nb_line_update_tOracleOutput_14=nb_line_update_tOracleOutput_14 + updatedCount_tOracleOutput_14;
	nb_line_inserted_tOracleOutput_14=nb_line_inserted_tOracleOutput_14 + insertedCount_tOracleOutput_14;
	nb_line_rejected_tOracleOutput_14=nb_line_rejected_tOracleOutput_14 + rejectedCount_tOracleOutput_14;
	
        globalMap.put("tOracleOutput_14_NB_LINE",nb_line_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_UPDATED",nb_line_update_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_14);
        globalMap.put("tOracleOutput_14_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_14);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row60");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_14", true);
end_Hash.put("tOracleOutput_14", System.currentTimeMillis());




/**
 * [tOracleOutput_14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_14";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_14") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_14 = null;
                if ((pstmtToClose_tOracleOutput_14 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_14")) != null) {
                    pstmtToClose_tOracleOutput_14.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_14") == null){
            java.sql.Connection ctn_tOracleOutput_14 = null;
            if((ctn_tOracleOutput_14 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_14")) != null){
                try {
                    ctn_tOracleOutput_14.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_14) {
                    String errorMessage_tOracleOutput_14 = "failed to close the connection in tOracleOutput_14 :" + sqlEx_tOracleOutput_14.getMessage();
                    System.err.println(errorMessage_tOracleOutput_14);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CUMS;

				public String getCUMS () {
					return this.CUMS;
				}

				public Boolean CUMSIsNullable(){
				    return true;
				}
				public Boolean CUMSIsKey(){
				    return false;
				}
				public Integer CUMSLength(){
				    return 92;
				}
				public Integer CUMSPrecision(){
				    return 0;
				}
				public String CUMSDefault(){
				
					return null;
				
				}
				public String CUMSComment(){
				
				    return "";
				
				}
				public String CUMSPattern(){
				
					return "";
				
				}
				public String CUMSOriginalDbColumnName(){
				
					return "CUMS";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return 50;
				}
				public Integer INVIMAPrecision(){
				    return 0;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String INVIMA_HOMOLOGO;

				public String getINVIMA_HOMOLOGO () {
					return this.INVIMA_HOMOLOGO;
				}

				public Boolean INVIMA_HOMOLOGOIsNullable(){
				    return true;
				}
				public Boolean INVIMA_HOMOLOGOIsKey(){
				    return false;
				}
				public Integer INVIMA_HOMOLOGOLength(){
				    return 50;
				}
				public Integer INVIMA_HOMOLOGOPrecision(){
				    return 0;
				}
				public String INVIMA_HOMOLOGODefault(){
				
					return null;
				
				}
				public String INVIMA_HOMOLOGOComment(){
				
				    return "";
				
				}
				public String INVIMA_HOMOLOGOPattern(){
				
					return "";
				
				}
				public String INVIMA_HOMOLOGOOriginalDbColumnName(){
				
					return "INVIMA_HOMOLOGO";
				
				}

				
			    public java.util.Date FINICIO;

				public java.util.Date getFINICIO () {
					return this.FINICIO;
				}

				public Boolean FINICIOIsNullable(){
				    return true;
				}
				public Boolean FINICIOIsKey(){
				    return false;
				}
				public Integer FINICIOLength(){
				    return 0;
				}
				public Integer FINICIOPrecision(){
				    return 0;
				}
				public String FINICIODefault(){
				
					return null;
				
				}
				public String FINICIOComment(){
				
				    return "";
				
				}
				public String FINICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINICIOOriginalDbColumnName(){
				
					return "FINICIO";
				
				}

				
			    public java.util.Date FFIN;

				public java.util.Date getFFIN () {
					return this.FFIN;
				}

				public Boolean FFINIsNullable(){
				    return true;
				}
				public Boolean FFINIsKey(){
				    return false;
				}
				public Integer FFINLength(){
				    return 0;
				}
				public Integer FFINPrecision(){
				    return 0;
				}
				public String FFINDefault(){
				
					return null;
				
				}
				public String FFINComment(){
				
				    return "";
				
				}
				public String FFINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFINOriginalDbColumnName(){
				
					return "FFIN";
				
				}

				
			    public BigDecimal PRECIO;

				public BigDecimal getPRECIO () {
					return this.PRECIO;
				}

				public Boolean PRECIOIsNullable(){
				    return false;
				}
				public Boolean PRECIOIsKey(){
				    return false;
				}
				public Integer PRECIOLength(){
				    return 0;
				}
				public Integer PRECIOPrecision(){
				    return null;
				}
				public String PRECIODefault(){
				
					return "";
				
				}
				public String PRECIOComment(){
				
				    return "";
				
				}
				public String PRECIOPattern(){
				
					return "";
				
				}
				public String PRECIOOriginalDbColumnName(){
				
					return "PRECIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CUMS == null) ? 0 : this.CUMS.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.CUMS == null) {
							if (other.CUMS != null)
								return false;
						
						} else if (!this.CUMS.equals(other.CUMS))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.CUMS = this.CUMS;
	            other.INVIMA = this.INVIMA;
	            other.INVIMA_HOMOLOGO = this.INVIMA_HOMOLOGO;
	            other.FINICIO = this.FINICIO;
	            other.FFIN = this.FFIN;
	            other.PRECIO = this.PRECIO;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.CUMS = this.CUMS;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.CUMS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.CUMS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CUMS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CUMS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.INVIMA = readString(dis,ois);
					
						this.INVIMA_HOMOLOGO = readString(dis,ois);
					
						this.FINICIO = readDate(dis,ois);
					
						this.FFIN = readDate(dis,ois);
					
       			    	this.PRECIO = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.INVIMA = readString(dis,objectIn);
					
						this.INVIMA_HOMOLOGO = readString(dis,objectIn);
					
						this.FINICIO = readDate(dis,objectIn);
					
						this.FFIN = readDate(dis,objectIn);
					
       			    	this.PRECIO = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.INVIMA, dos, oos);
					
						writeString(this.INVIMA_HOMOLOGO, dos, oos);
					
						writeDate(this.FINICIO, dos, oos);
					
						writeDate(this.FFIN, dos, oos);
					
       			    	oos.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.INVIMA, dos, objectOut);
					
						writeString(this.INVIMA_HOMOLOGO, dos, objectOut);
					
						writeDate(this.FINICIO, dos, objectOut);
					
						writeDate(this.FFIN, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CUMS="+CUMS);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",INVIMA_HOMOLOGO="+INVIMA_HOMOLOGO);
		sb.append(",FINICIO="+String.valueOf(FINICIO));
		sb.append(",FFIN="+String.valueOf(FFIN));
		sb.append(",PRECIO="+String.valueOf(PRECIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CUMS, other.CUMS);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row5,row7,row8,row6,row62,row63) outputs:(out1,out4,out5,out6,out7,out8,out9,out2,out3,out24,out25,out14)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row4Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row7.CUMS = next_tHashInput_1.CUMS;
	row7.INVIMA = next_tHashInput_1.INVIMA;
	row7.INVIMA_HOMOLOGO = next_tHashInput_1.INVIMA_HOMOLOGO;
	row7.FINICIO = next_tHashInput_1.FINICIO;
	row7.FFIN = next_tHashInput_1.FFIN;
	row7.PRECIO = next_tHashInput_1.PRECIO;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.CUMS = row7.CUMS;
				
				row7_HashRow.INVIMA = row7.INVIMA;
				
				row7_HashRow.INVIMA_HOMOLOGO = row7.INVIMA_HOMOLOGO;
				
				row7_HashRow.FINICIO = row7.FINICIO;
				
				row7_HashRow.FFIN = row7.FFIN;
				
				row7_HashRow.PRECIO = row7.PRECIO;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return 50;
				}
				public Integer NUMEROPrecision(){
				    return 0;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 50;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMERO == null) ? 0 : this.NUMERO.hashCode());
					
						result = prime * result + ((this.PREFIJO == null) ? 0 : this.PREFIJO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.NUMERO == null) {
							if (other.NUMERO != null)
								return false;
						
						} else if (!this.NUMERO.equals(other.NUMERO))
						
							return false;
					
						if (this.PREFIJO == null) {
							if (other.PREFIJO != null)
								return false;
						
						} else if (!this.PREFIJO.equals(other.PREFIJO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.NUMERO = this.NUMERO;
	            other.PREFIJO = this.PREFIJO;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.NUMERO = this.NUMERO;
	            	other.PREFIJO = this.PREFIJO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		

		

        }

		
        	finally {}

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		

		

        }

		
        	finally {}

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
        	}
        	finally {}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
        	}
        	finally {}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMERO, other.NUMERO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PREFIJO, other.PREFIJO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_8 - inputs:(after_tOracleInput_1) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_1 - inputs:(row5,row7,row8,row6,row62,row63) outputs:(out1,out4,out5,out6,out7,out8,out9,out2,out3,out24,out25,out14)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				String driverClass_tOracleInput_8 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_8);
				
			String url_tOracleInput_8 = null;
				url_tOracleInput_8 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_8 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_8 = context.db_origen_Password; 

				String dbPwd_tOracleInput_8 = decryptedPassword_tOracleInput_8;

				
					java.util.Properties atnParamsPrope_tOracleInput_8 = new java.util.Properties();
					atnParamsPrope_tOracleInput_8.put("user",dbUser_tOracleInput_8);
					atnParamsPrope_tOracleInput_8.put("password",dbPwd_tOracleInput_8);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_8.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_8 = java.sql.DriverManager.getConnection(url_tOracleInput_8, atnParamsPrope_tOracleInput_8);
				java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_8.next()) {
					sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
				}
                                if (!(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                                }
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT FA2.NUMERO,FA2.PREFIJO FROM ACM_FACTURA FA\nINNER JOIN ACM_FACTURA FA2 ON FA2.NUMERO = FA.NUMERO AND FA2.PREFIJO"
+" = FA.PREFIJO AND FA.ID <> FA2.ID\nINNER JOIN ACM_RECEPCION RE ON RE.ID = FA2.RECEPCION_ID\nWHERE \nRE.ESTADO = 'Aprobad"
+"o'\nAND RE.ID = "+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row8.NUMERO = null;
							} else {
	                         		
        	row8.NUMERO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row8.PREFIJO = null;
							} else {
	                         		
        	row8.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 2, false);
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.NUMERO = row8.NUMERO;
				
				row8_HashRow.PREFIJO = row8.PREFIJO;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
	if(conn_tOracleInput_8 != null && !conn_tOracleInput_8.isClosed()) {
	
			conn_tOracleInput_8.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return "";
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.DOCUMENTO == null) ? 0 : this.DOCUMENTO.hashCode());
					
						result = prime * result + ((this.TDOCUMENTOS_ID == null) ? 0 : this.TDOCUMENTOS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.DOCUMENTO == null) {
							if (other.DOCUMENTO != null)
								return false;
						
						} else if (!this.DOCUMENTO.equals(other.DOCUMENTO))
						
							return false;
					
						if (this.TDOCUMENTOS_ID == null) {
							if (other.TDOCUMENTOS_ID != null)
								return false;
						
						} else if (!this.TDOCUMENTOS_ID.equals(other.TDOCUMENTOS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.TDOCUMENTOS_ID = this.TDOCUMENTOS_ID;
	            other.ESTADO = this.ESTADO;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.DOCUMENTO = this.DOCUMENTO;
	            	other.TDOCUMENTOS_ID = this.TDOCUMENTOS_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.PERSONAS_ID = (BigDecimal) ois.readObject();
					
						this.ESTADO = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.PERSONAS_ID = (BigDecimal) objectIn.readObject();
					
						this.ESTADO = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.PERSONAS_ID);
					
					writeInteger(this.ESTADO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PERSONAS_ID);
					
					writeInteger(this.ESTADO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",ESTADO="+String.valueOf(ESTADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.DOCUMENTO, other.DOCUMENTO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TDOCUMENTOS_ID, other.TDOCUMENTOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tOracleInput_7 - inputs:(after_tOracleInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_1 - inputs:(row5,row7,row8,row6,row62,row63) outputs:(out1,out4,out5,out6,out7,out8,out9,out2,out3,out24,out25,out14)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				String driverClass_tOracleInput_7 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_7);
				
			String url_tOracleInput_7 = null;
				url_tOracleInput_7 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_7 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_7 = context.db_origen_Password; 

				String dbPwd_tOracleInput_7 = decryptedPassword_tOracleInput_7;

				
					java.util.Properties atnParamsPrope_tOracleInput_7 = new java.util.Properties();
					atnParamsPrope_tOracleInput_7.put("user",dbUser_tOracleInput_7);
					atnParamsPrope_tOracleInput_7.put("password",dbPwd_tOracleInput_7);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_7.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_7 = java.sql.DriverManager.getConnection(url_tOracleInput_7, atnParamsPrope_tOracleInput_7);
				java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_7.next()) {
					sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
				}
                                if (!(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                                }
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT \nDISTINCT \nT.PERSONAS_ID,\nT.DOCUMENTO,\nT.TDOCUMENTOS_ID,\nCASE \nWHEN T.ESTADO = 'No afiliado' THEN 1\nWHEN "
+"T.ESTADO = 'Inactivo' THEN 2\nELSE 0 END AS ESTADO\nFROM (SELECT \n				PER.ID AS PERSONAS_ID,\n                AD.DOCUME"
+"NTO,\n                AD.TDOCUMENTOS_ID,\n                REP.GetEstadoDate(NVL(PER.ID,0),TO_DATE (TO_CHAR(NVL(AD.FDISPE"
+"NSACION,SYSDATE),'DD/MM/YYYY'),'DD/MM/YYYY')) AS ESTADO\n                FROM ACM_DFACTURAFORMULACION AD\n              "
+"  LEFT JOIN GEN_PERSONAS PER ON PER.DOCUMENTO  = AD.DOCUMENTO AND PER.TDOCUMENTOS_ID = AD.TDOCUMENTOS_ID AND PER.ESTREGI"
+"STRO_ID = 1\n                WHERE AD.RECEPCION_ID = "+context.RECEPCION_ID+"\n)T";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row6.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row6.PERSONAS_ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
						row6.PERSONAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row6.DOCUMENTO = null;
							} else {
	                         		
        	row6.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row6.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(3) != null) {
						row6.TDOCUMENTOS_ID = rs_tOracleInput_7.getBigDecimal(3);
					} else {
				
						row6.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row6.ESTADO = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(4) != null) {
						row6.ESTADO = rs_tOracleInput_7.getInt(4);
					} else {
				
						row6.ESTADO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.PERSONAS_ID = row6.PERSONAS_ID;
				
				row6_HashRow.DOCUMENTO = row6.DOCUMENTO;
				
				row6_HashRow.TDOCUMENTOS_ID = row6.TDOCUMENTOS_ID;
				
				row6_HashRow.ESTADO = row6.ESTADO;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
	if(conn_tOracleInput_7 != null && !conn_tOracleInput_7.isClosed()) {
	
			conn_tOracleInput_7.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row62Struct implements routines.system.IPersistableComparableLookupRow<row62Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CUMS;

				public String getCUMS () {
					return this.CUMS;
				}

				public Boolean CUMSIsNullable(){
				    return true;
				}
				public Boolean CUMSIsKey(){
				    return false;
				}
				public Integer CUMSLength(){
				    return 92;
				}
				public Integer CUMSPrecision(){
				    return 0;
				}
				public String CUMSDefault(){
				
					return null;
				
				}
				public String CUMSComment(){
				
				    return "";
				
				}
				public String CUMSPattern(){
				
					return "";
				
				}
				public String CUMSOriginalDbColumnName(){
				
					return "CUMS";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return 50;
				}
				public Integer INVIMAPrecision(){
				    return 0;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String INVIMA_HOMOLOGO;

				public String getINVIMA_HOMOLOGO () {
					return this.INVIMA_HOMOLOGO;
				}

				public Boolean INVIMA_HOMOLOGOIsNullable(){
				    return true;
				}
				public Boolean INVIMA_HOMOLOGOIsKey(){
				    return false;
				}
				public Integer INVIMA_HOMOLOGOLength(){
				    return 50;
				}
				public Integer INVIMA_HOMOLOGOPrecision(){
				    return 0;
				}
				public String INVIMA_HOMOLOGODefault(){
				
					return null;
				
				}
				public String INVIMA_HOMOLOGOComment(){
				
				    return "";
				
				}
				public String INVIMA_HOMOLOGOPattern(){
				
					return "";
				
				}
				public String INVIMA_HOMOLOGOOriginalDbColumnName(){
				
					return "INVIMA_HOMOLOGO";
				
				}

				
			    public java.util.Date FINICIO;

				public java.util.Date getFINICIO () {
					return this.FINICIO;
				}

				public Boolean FINICIOIsNullable(){
				    return true;
				}
				public Boolean FINICIOIsKey(){
				    return false;
				}
				public Integer FINICIOLength(){
				    return 0;
				}
				public Integer FINICIOPrecision(){
				    return 0;
				}
				public String FINICIODefault(){
				
					return null;
				
				}
				public String FINICIOComment(){
				
				    return "";
				
				}
				public String FINICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINICIOOriginalDbColumnName(){
				
					return "FINICIO";
				
				}

				
			    public java.util.Date FFIN;

				public java.util.Date getFFIN () {
					return this.FFIN;
				}

				public Boolean FFINIsNullable(){
				    return true;
				}
				public Boolean FFINIsKey(){
				    return false;
				}
				public Integer FFINLength(){
				    return 0;
				}
				public Integer FFINPrecision(){
				    return 0;
				}
				public String FFINDefault(){
				
					return null;
				
				}
				public String FFINComment(){
				
				    return "";
				
				}
				public String FFINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFINOriginalDbColumnName(){
				
					return "FFIN";
				
				}

				
			    public BigDecimal PRECIO;

				public BigDecimal getPRECIO () {
					return this.PRECIO;
				}

				public Boolean PRECIOIsNullable(){
				    return false;
				}
				public Boolean PRECIOIsKey(){
				    return false;
				}
				public Integer PRECIOLength(){
				    return 0;
				}
				public Integer PRECIOPrecision(){
				    return null;
				}
				public String PRECIODefault(){
				
					return "";
				
				}
				public String PRECIOComment(){
				
				    return "";
				
				}
				public String PRECIOPattern(){
				
					return "";
				
				}
				public String PRECIOOriginalDbColumnName(){
				
					return "PRECIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.INVIMA == null) ? 0 : this.INVIMA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row62Struct other = (row62Struct) obj;
		
						if (this.INVIMA == null) {
							if (other.INVIMA != null)
								return false;
						
						} else if (!this.INVIMA.equals(other.INVIMA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row62Struct other) {

		other.CUMS = this.CUMS;
	            other.INVIMA = this.INVIMA;
	            other.INVIMA_HOMOLOGO = this.INVIMA_HOMOLOGO;
	            other.FINICIO = this.FINICIO;
	            other.FFIN = this.FFIN;
	            other.PRECIO = this.PRECIO;
	            
	}

	public void copyKeysDataTo(row62Struct other) {

		other.INVIMA = this.INVIMA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.INVIMA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.INVIMA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INVIMA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.INVIMA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CUMS = readString(dis,ois);
					
						this.INVIMA_HOMOLOGO = readString(dis,ois);
					
						this.FINICIO = readDate(dis,ois);
					
						this.FFIN = readDate(dis,ois);
					
       			    	this.PRECIO = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CUMS = readString(dis,objectIn);
					
						this.INVIMA_HOMOLOGO = readString(dis,objectIn);
					
						this.FINICIO = readDate(dis,objectIn);
					
						this.FFIN = readDate(dis,objectIn);
					
       			    	this.PRECIO = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CUMS, dos, oos);
					
						writeString(this.INVIMA_HOMOLOGO, dos, oos);
					
						writeDate(this.FINICIO, dos, oos);
					
						writeDate(this.FFIN, dos, oos);
					
       			    	oos.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.CUMS, dos, objectOut);
					
						writeString(this.INVIMA_HOMOLOGO, dos, objectOut);
					
						writeDate(this.FINICIO, dos, objectOut);
					
						writeDate(this.FFIN, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CUMS="+CUMS);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",INVIMA_HOMOLOGO="+INVIMA_HOMOLOGO);
		sb.append(",FINICIO="+String.valueOf(FINICIO));
		sb.append(",FFIN="+String.valueOf(FFIN));
		sb.append(",PRECIO="+String.valueOf(PRECIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row62Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.INVIMA, other.INVIMA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row62Struct row62 = new row62Struct();




	
	/**
	 * [tAdvancedHash_row62 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row62", false);
		start_Hash.put("tAdvancedHash_row62", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row62";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row62");
					}
				
		int tos_count_tAdvancedHash_row62 = 0;
		

			   		// connection name:row62
			   		// source node:tHashInput_23 - inputs:(after_tOracleInput_1) outputs:(row62,row62) | target node:tAdvancedHash_row62 - inputs:(row62) outputs:()
			   		// linked node: tMap_1 - inputs:(row5,row7,row8,row6,row62,row63) outputs:(out1,out4,out5,out6,out7,out8,out9,out2,out3,out24,out25,out14)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row62 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row62Struct> tHash_Lookup_row62 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row62Struct>getLookup(matchingModeEnum_row62);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row62", tHash_Lookup_row62);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row62 begin ] stop
 */



	
	/**
	 * [tHashInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_23", false);
		start_Hash.put("tHashInput_23", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_23";
	
	
		int tos_count_tHashInput_23 = 0;
		


int nb_line_tHashInput_23 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_23=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_23 = mf_tHashInput_23.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_23==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_23 = tHashFile_tHashInput_23.iterator();
while (iterator_tHashInput_23.hasNext()) {
    row4Struct next_tHashInput_23 = iterator_tHashInput_23.next();

	row62.CUMS = next_tHashInput_23.CUMS;
	row62.INVIMA = next_tHashInput_23.INVIMA;
	row62.INVIMA_HOMOLOGO = next_tHashInput_23.INVIMA_HOMOLOGO;
	row62.FINICIO = next_tHashInput_23.FINICIO;
	row62.FFIN = next_tHashInput_23.FFIN;
	row62.PRECIO = next_tHashInput_23.PRECIO;

 



/**
 * [tHashInput_23 begin ] stop
 */
	
	/**
	 * [tHashInput_23 main ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 


	tos_count_tHashInput_23++;

/**
 * [tHashInput_23 main ] stop
 */
	
	/**
	 * [tHashInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row62 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row62"
						
						);
					}
					


			   
			   

					row62Struct row62_HashRow = new row62Struct();
		   	   	   
				
				row62_HashRow.CUMS = row62.CUMS;
				
				row62_HashRow.INVIMA = row62.INVIMA;
				
				row62_HashRow.INVIMA_HOMOLOGO = row62.INVIMA_HOMOLOGO;
				
				row62_HashRow.FINICIO = row62.FINICIO;
				
				row62_HashRow.FFIN = row62.FFIN;
				
				row62_HashRow.PRECIO = row62.PRECIO;
				
			tHash_Lookup_row62.put(row62_HashRow);
			
            




 


	tos_count_tAdvancedHash_row62++;

/**
 * [tAdvancedHash_row62 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row62 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";
	
	

 



/**
 * [tAdvancedHash_row62 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row62 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";
	
	

 



/**
 * [tAdvancedHash_row62 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_23 end ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	
    

		
			nb_line_tHashInput_23++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_23_NB_LINE", nb_line_tHashInput_23);       

 

ok_Hash.put("tHashInput_23", true);
end_Hash.put("tHashInput_23", System.currentTimeMillis());




/**
 * [tHashInput_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row62 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";
	
	

tHash_Lookup_row62.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row62");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row62", true);
end_Hash.put("tAdvancedHash_row62", System.currentTimeMillis());




/**
 * [tAdvancedHash_row62 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_23 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row62 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row62";
	
	

 



/**
 * [tAdvancedHash_row62 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row63Struct implements routines.system.IPersistableComparableLookupRow<row63Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CUMS;

				public String getCUMS () {
					return this.CUMS;
				}

				public Boolean CUMSIsNullable(){
				    return true;
				}
				public Boolean CUMSIsKey(){
				    return false;
				}
				public Integer CUMSLength(){
				    return 92;
				}
				public Integer CUMSPrecision(){
				    return 0;
				}
				public String CUMSDefault(){
				
					return null;
				
				}
				public String CUMSComment(){
				
				    return "";
				
				}
				public String CUMSPattern(){
				
					return "";
				
				}
				public String CUMSOriginalDbColumnName(){
				
					return "CUMS";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return 50;
				}
				public Integer INVIMAPrecision(){
				    return 0;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String INVIMA_HOMOLOGO;

				public String getINVIMA_HOMOLOGO () {
					return this.INVIMA_HOMOLOGO;
				}

				public Boolean INVIMA_HOMOLOGOIsNullable(){
				    return true;
				}
				public Boolean INVIMA_HOMOLOGOIsKey(){
				    return false;
				}
				public Integer INVIMA_HOMOLOGOLength(){
				    return 50;
				}
				public Integer INVIMA_HOMOLOGOPrecision(){
				    return 0;
				}
				public String INVIMA_HOMOLOGODefault(){
				
					return null;
				
				}
				public String INVIMA_HOMOLOGOComment(){
				
				    return "";
				
				}
				public String INVIMA_HOMOLOGOPattern(){
				
					return "";
				
				}
				public String INVIMA_HOMOLOGOOriginalDbColumnName(){
				
					return "INVIMA_HOMOLOGO";
				
				}

				
			    public java.util.Date FINICIO;

				public java.util.Date getFINICIO () {
					return this.FINICIO;
				}

				public Boolean FINICIOIsNullable(){
				    return true;
				}
				public Boolean FINICIOIsKey(){
				    return false;
				}
				public Integer FINICIOLength(){
				    return 0;
				}
				public Integer FINICIOPrecision(){
				    return 0;
				}
				public String FINICIODefault(){
				
					return null;
				
				}
				public String FINICIOComment(){
				
				    return "";
				
				}
				public String FINICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FINICIOOriginalDbColumnName(){
				
					return "FINICIO";
				
				}

				
			    public java.util.Date FFIN;

				public java.util.Date getFFIN () {
					return this.FFIN;
				}

				public Boolean FFINIsNullable(){
				    return true;
				}
				public Boolean FFINIsKey(){
				    return false;
				}
				public Integer FFINLength(){
				    return 0;
				}
				public Integer FFINPrecision(){
				    return 0;
				}
				public String FFINDefault(){
				
					return null;
				
				}
				public String FFINComment(){
				
				    return "";
				
				}
				public String FFINPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFINOriginalDbColumnName(){
				
					return "FFIN";
				
				}

				
			    public BigDecimal PRECIO;

				public BigDecimal getPRECIO () {
					return this.PRECIO;
				}

				public Boolean PRECIOIsNullable(){
				    return false;
				}
				public Boolean PRECIOIsKey(){
				    return false;
				}
				public Integer PRECIOLength(){
				    return 0;
				}
				public Integer PRECIOPrecision(){
				    return null;
				}
				public String PRECIODefault(){
				
					return "";
				
				}
				public String PRECIOComment(){
				
				    return "";
				
				}
				public String PRECIOPattern(){
				
					return "";
				
				}
				public String PRECIOOriginalDbColumnName(){
				
					return "PRECIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.INVIMA_HOMOLOGO == null) ? 0 : this.INVIMA_HOMOLOGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row63Struct other = (row63Struct) obj;
		
						if (this.INVIMA_HOMOLOGO == null) {
							if (other.INVIMA_HOMOLOGO != null)
								return false;
						
						} else if (!this.INVIMA_HOMOLOGO.equals(other.INVIMA_HOMOLOGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row63Struct other) {

		other.CUMS = this.CUMS;
	            other.INVIMA = this.INVIMA;
	            other.INVIMA_HOMOLOGO = this.INVIMA_HOMOLOGO;
	            other.FINICIO = this.FINICIO;
	            other.FFIN = this.FFIN;
	            other.PRECIO = this.PRECIO;
	            
	}

	public void copyKeysDataTo(row63Struct other) {

		other.INVIMA_HOMOLOGO = this.INVIMA_HOMOLOGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.INVIMA_HOMOLOGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.INVIMA_HOMOLOGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.INVIMA_HOMOLOGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.INVIMA_HOMOLOGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CUMS = readString(dis,ois);
					
						this.INVIMA = readString(dis,ois);
					
						this.FINICIO = readDate(dis,ois);
					
						this.FFIN = readDate(dis,ois);
					
       			    	this.PRECIO = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CUMS = readString(dis,objectIn);
					
						this.INVIMA = readString(dis,objectIn);
					
						this.FINICIO = readDate(dis,objectIn);
					
						this.FFIN = readDate(dis,objectIn);
					
       			    	this.PRECIO = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.CUMS, dos, oos);
					
						writeString(this.INVIMA, dos, oos);
					
						writeDate(this.FINICIO, dos, oos);
					
						writeDate(this.FFIN, dos, oos);
					
       			    	oos.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.CUMS, dos, objectOut);
					
						writeString(this.INVIMA, dos, objectOut);
					
						writeDate(this.FINICIO, dos, objectOut);
					
						writeDate(this.FFIN, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PRECIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CUMS="+CUMS);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",INVIMA_HOMOLOGO="+INVIMA_HOMOLOGO);
		sb.append(",FINICIO="+String.valueOf(FINICIO));
		sb.append(",FFIN="+String.valueOf(FFIN));
		sb.append(",PRECIO="+String.valueOf(PRECIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row63Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.INVIMA_HOMOLOGO, other.INVIMA_HOMOLOGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row63Struct row63 = new row63Struct();




	
	/**
	 * [tAdvancedHash_row63 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row63", false);
		start_Hash.put("tAdvancedHash_row63", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row63";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row63");
					}
				
		int tos_count_tAdvancedHash_row63 = 0;
		

			   		// connection name:row63
			   		// source node:tHashInput_24 - inputs:(after_tOracleInput_1) outputs:(row63,row63) | target node:tAdvancedHash_row63 - inputs:(row63) outputs:()
			   		// linked node: tMap_1 - inputs:(row5,row7,row8,row6,row62,row63) outputs:(out1,out4,out5,out6,out7,out8,out9,out2,out3,out24,out25,out14)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row63 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row63Struct> tHash_Lookup_row63 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row63Struct>getLookup(matchingModeEnum_row63);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row63", tHash_Lookup_row63);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row63 begin ] stop
 */



	
	/**
	 * [tHashInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_24", false);
		start_Hash.put("tHashInput_24", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_24";
	
	
		int tos_count_tHashInput_24 = 0;
		


int nb_line_tHashInput_24 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_24=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_24 = mf_tHashInput_24.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_24==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_24 = tHashFile_tHashInput_24.iterator();
while (iterator_tHashInput_24.hasNext()) {
    row4Struct next_tHashInput_24 = iterator_tHashInput_24.next();

	row63.CUMS = next_tHashInput_24.CUMS;
	row63.INVIMA = next_tHashInput_24.INVIMA;
	row63.INVIMA_HOMOLOGO = next_tHashInput_24.INVIMA_HOMOLOGO;
	row63.FINICIO = next_tHashInput_24.FINICIO;
	row63.FFIN = next_tHashInput_24.FFIN;
	row63.PRECIO = next_tHashInput_24.PRECIO;

 



/**
 * [tHashInput_24 begin ] stop
 */
	
	/**
	 * [tHashInput_24 main ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 


	tos_count_tHashInput_24++;

/**
 * [tHashInput_24 main ] stop
 */
	
	/**
	 * [tHashInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row63 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row63"
						
						);
					}
					


			   
			   

					row63Struct row63_HashRow = new row63Struct();
		   	   	   
				
				row63_HashRow.CUMS = row63.CUMS;
				
				row63_HashRow.INVIMA = row63.INVIMA;
				
				row63_HashRow.INVIMA_HOMOLOGO = row63.INVIMA_HOMOLOGO;
				
				row63_HashRow.FINICIO = row63.FINICIO;
				
				row63_HashRow.FFIN = row63.FFIN;
				
				row63_HashRow.PRECIO = row63.PRECIO;
				
			tHash_Lookup_row63.put(row63_HashRow);
			
            




 


	tos_count_tAdvancedHash_row63++;

/**
 * [tAdvancedHash_row63 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row63 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

 



/**
 * [tAdvancedHash_row63 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row63 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

 



/**
 * [tAdvancedHash_row63 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_24 end ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	
    

		
			nb_line_tHashInput_24++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_24_NB_LINE", nb_line_tHashInput_24);       

 

ok_Hash.put("tHashInput_24", true);
end_Hash.put("tHashInput_24", System.currentTimeMillis());




/**
 * [tHashInput_24 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row63 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

tHash_Lookup_row63.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row63");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row63", true);
end_Hash.put("tAdvancedHash_row63", System.currentTimeMillis());




/**
 * [tAdvancedHash_row63 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_24 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row63 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row63";
	
	

 



/**
 * [tAdvancedHash_row63 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CAUSALGLOSAS_ID == null) ? 0 : this.CAUSALGLOSAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CAUSALGLOSAS_ID == null) {
							if (other.CAUSALGLOSAS_ID != null)
								return false;
						
						} else if (!this.CAUSALGLOSAS_ID.equals(other.CAUSALGLOSAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CAUSALGLOSAS_ID, other.CAUSALGLOSAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tHashInput_6 - inputs:(after_tHashInput_2) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_2 - inputs:(row10,row16) outputs:(out10)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row41Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row41Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row41Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row16.ID = next_tHashInput_6.ID;
	row16.NOMBRE = next_tHashInput_6.NOMBRE;
	row16.SIGLA = next_tHashInput_6.SIGLA;
	row16.CAUSALGLOSAS_ID = next_tHashInput_6.CAUSALGLOSAS_ID;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.ID = row16.ID;
				
				row16_HashRow.NOMBRE = row16.NOMBRE;
				
				row16_HashRow.SIGLA = row16.SIGLA;
				
				row16_HashRow.CAUSALGLOSAS_ID = row16.CAUSALGLOSAS_ID;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CANTIDAD;

				public Integer getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.ID = this.ID;
	            other.CANTIDAD = this.CANTIDAD;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CANTIDAD = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CANTIDAD = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.CANTIDAD, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.CANTIDAD, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tHashInput_4 - inputs:(after_tHashInput_3) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_3 - inputs:(row12,row13,row15) outputs:(out11,F)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_13");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row11Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row11Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row13.ID = next_tHashInput_4.ID;
	row13.CANTIDAD = next_tHashInput_4.CANTIDAD;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.ID = row13.ID;
				
				row13_HashRow.CANTIDAD = row13.CANTIDAD;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_13");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CAUSALGLOSAS_ID == null) ? 0 : this.CAUSALGLOSAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CAUSALGLOSAS_ID == null) {
							if (other.CAUSALGLOSAS_ID != null)
								return false;
						
						} else if (!this.CAUSALGLOSAS_ID.equals(other.CAUSALGLOSAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CAUSALGLOSAS_ID, other.CAUSALGLOSAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tHashInput_5 - inputs:(after_tHashInput_3) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_3 - inputs:(row12,row13,row15) outputs:(out11,F)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row41Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row41Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row41Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row15.ID = next_tHashInput_5.ID;
	row15.NOMBRE = next_tHashInput_5.NOMBRE;
	row15.SIGLA = next_tHashInput_5.SIGLA;
	row15.CAUSALGLOSAS_ID = next_tHashInput_5.CAUSALGLOSAS_ID;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.ID = row15.ID;
				
				row15_HashRow.NOMBRE = row15.NOMBRE;
				
				row15_HashRow.SIGLA = row15.SIGLA;
				
				row15_HashRow.CAUSALGLOSAS_ID = row15.CAUSALGLOSAS_ID;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row61Struct implements routines.system.IPersistableComparableLookupRow<row61Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal VALOR_FACTURA;

				public BigDecimal getVALOR_FACTURA () {
					return this.VALOR_FACTURA;
				}

				public Boolean VALOR_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VALOR_FACTURAIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURALength(){
				    return null;
				}
				public Integer VALOR_FACTURAPrecision(){
				    return null;
				}
				public String VALOR_FACTURADefault(){
				
					return "";
				
				}
				public String VALOR_FACTURAComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURAPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURAOriginalDbColumnName(){
				
					return "VALOR_FACTURA";
				
				}

				
			    public BigDecimal VCALCULADO_FACTURA;

				public BigDecimal getVCALCULADO_FACTURA () {
					return this.VCALCULADO_FACTURA;
				}

				public Boolean VCALCULADO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VCALCULADO_FACTURAIsKey(){
				    return false;
				}
				public Integer VCALCULADO_FACTURALength(){
				    return null;
				}
				public Integer VCALCULADO_FACTURAPrecision(){
				    return null;
				}
				public String VCALCULADO_FACTURADefault(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAComment(){
				
				    return "";
				
				}
				public String VCALCULADO_FACTURAPattern(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAOriginalDbColumnName(){
				
					return "VCALCULADO_FACTURA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return true;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return true;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return null;
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return null;
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return false;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID1;

				public BigDecimal getDFORMMEDINSUMOS_ID1 () {
					return this.DFORMMEDINSUMOS_ID1;
				}

				public Boolean DFORMMEDINSUMOS_ID1IsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_ID1IsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_ID1Length(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_ID1Precision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_ID1Default(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Comment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Pattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1OriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FVENCIMIENTO_SALUDSIS;

				public java.util.Date getFVENCIMIENTO_SALUDSIS () {
					return this.FVENCIMIENTO_SALUDSIS;
				}

				public Boolean FVENCIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FVENCIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FVENCIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FVENCIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FVENCIMIENTO_SALUDSIS";
				
				}

				
			    public java.util.Date FMOVIMIENTO_SALUDSIS;

				public java.util.Date getFMOVIMIENTO_SALUDSIS () {
					return this.FMOVIMIENTO_SALUDSIS;
				}

				public Boolean FMOVIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FMOVIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FMOVIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FMOVIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FMOVIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FMOVIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FMOVIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FMOVIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FMOVIMIENTO_SALUDSIS";
				
				}

				
			    public BigDecimal CANTIDAD_SALUDSIS;

				public BigDecimal getCANTIDAD_SALUDSIS () {
					return this.CANTIDAD_SALUDSIS;
				}

				public Boolean CANTIDAD_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_SALUDSISIsKey(){
				    return false;
				}
				public Integer CANTIDAD_SALUDSISLength(){
				    return null;
				}
				public Integer CANTIDAD_SALUDSISPrecision(){
				    return null;
				}
				public String CANTIDAD_SALUDSISDefault(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISComment(){
				
				    return "";
				
				}
				public String CANTIDAD_SALUDSISPattern(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISOriginalDbColumnName(){
				
					return "CANTIDAD_SALUDSIS";
				
				}

				
			    public Integer VINTERMEDIACION;

				public Integer getVINTERMEDIACION () {
					return this.VINTERMEDIACION;
				}

				public Boolean VINTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VINTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VINTERMEDIACIONLength(){
				    return null;
				}
				public Integer VINTERMEDIACIONPrecision(){
				    return null;
				}
				public String VINTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VINTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String VINTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VINTERMEDIACIONOriginalDbColumnName(){
				
					return "VINTERMEDIACION";
				
				}

				
			    public BigDecimal VCALCULADO_TOTAL;

				public BigDecimal getVCALCULADO_TOTAL () {
					return this.VCALCULADO_TOTAL;
				}

				public Boolean VCALCULADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean VCALCULADO_TOTALIsKey(){
				    return false;
				}
				public Integer VCALCULADO_TOTALLength(){
				    return null;
				}
				public Integer VCALCULADO_TOTALPrecision(){
				    return null;
				}
				public String VCALCULADO_TOTALDefault(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALComment(){
				
				    return "";
				
				}
				public String VCALCULADO_TOTALPattern(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALOriginalDbColumnName(){
				
					return "VCALCULADO_TOTAL";
				
				}

				
			    public Integer BANDERA_TOTAL;

				public Integer getBANDERA_TOTAL () {
					return this.BANDERA_TOTAL;
				}

				public Boolean BANDERA_TOTALIsNullable(){
				    return true;
				}
				public Boolean BANDERA_TOTALIsKey(){
				    return false;
				}
				public Integer BANDERA_TOTALLength(){
				    return null;
				}
				public Integer BANDERA_TOTALPrecision(){
				    return null;
				}
				public String BANDERA_TOTALDefault(){
				
					return "";
				
				}
				public String BANDERA_TOTALComment(){
				
				    return "";
				
				}
				public String BANDERA_TOTALPattern(){
				
					return "";
				
				}
				public String BANDERA_TOTALOriginalDbColumnName(){
				
					return "BANDERA_TOTAL";
				
				}

				
			    public Integer BANDERA_PORCENTAJE;

				public Integer getBANDERA_PORCENTAJE () {
					return this.BANDERA_PORCENTAJE;
				}

				public Boolean BANDERA_PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean BANDERA_PORCENTAJEIsKey(){
				    return false;
				}
				public Integer BANDERA_PORCENTAJELength(){
				    return null;
				}
				public Integer BANDERA_PORCENTAJEPrecision(){
				    return null;
				}
				public String BANDERA_PORCENTAJEDefault(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEComment(){
				
				    return "";
				
				}
				public String BANDERA_PORCENTAJEPattern(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEOriginalDbColumnName(){
				
					return "BANDERA_PORCENTAJE";
				
				}

				
			    public BigDecimal CANTENTREGADA_ANTERIOR;

				public BigDecimal getCANTENTREGADA_ANTERIOR () {
					return this.CANTENTREGADA_ANTERIOR;
				}

				public Boolean CANTENTREGADA_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean CANTENTREGADA_ANTERIORIsKey(){
				    return false;
				}
				public Integer CANTENTREGADA_ANTERIORLength(){
				    return null;
				}
				public Integer CANTENTREGADA_ANTERIORPrecision(){
				    return null;
				}
				public String CANTENTREGADA_ANTERIORDefault(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIORComment(){
				
				    return "";
				
				}
				public String CANTENTREGADA_ANTERIORPattern(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIOROriginalDbColumnName(){
				
					return "CANTENTREGADA_ANTERIOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row61Struct other = (row61Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.FACTURA_ID == null) {
							if (other.FACTURA_ID != null)
								return false;
						
						} else if (!this.FACTURA_ID.equals(other.FACTURA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row61Struct other) {

		other.VALOR_FACTURA = this.VALOR_FACTURA;
	            other.VCALCULADO_FACTURA = this.VCALCULADO_FACTURA;
	            other.ID = this.ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.FACTURA_ID = this.FACTURA_ID;
	            other.PREFIJO = this.PREFIJO;
	            other.NUMERO_FACTURA = this.NUMERO_FACTURA;
	            other.LUGAR = this.LUGAR;
	            other.PERIODO = this.PERIODO;
	            other.SIGLAESM = this.SIGLAESM;
	            other.SIGLAFUERZA = this.SIGLAFUERZA;
	            other.FORMULA = this.FORMULA;
	            other.TIRILLA = this.TIRILLA;
	            other.FFORMUALCION = this.FFORMUALCION;
	            other.FDISPENSACION = this.FDISPENSACION;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.TDOCUMENTOS_ID = this.TDOCUMENTOS_ID;
	            other.TFORMULAS_ID = this.TFORMULAS_ID;
	            other.TORIGEN_ID = this.TORIGEN_ID;
	            other.CODIGOCUM = this.CODIGOCUM;
	            other.INVIMA = this.INVIMA;
	            other.CODIGOSSMP = this.CODIGOSSMP;
	            other.NOMBREMEDICAMENTO = this.NOMBREMEDICAMENTO;
	            other.LABORATORIO = this.LABORATORIO;
	            other.BODEGA = this.BODEGA;
	            other.LOTE = this.LOTE;
	            other.FVENCIMIENTO = this.FVENCIMIENTO;
	            other.CANTFORMULADA = this.CANTFORMULADA;
	            other.CANTENTREGADA = this.CANTENTREGADA;
	            other.VUNITARIO = this.VUNITARIO;
	            other.SUBTOTAL = this.SUBTOTAL;
	            other.INTERMEDIACION = this.INTERMEDIACION;
	            other.VTOTAL = this.VTOTAL;
	            other.VGRAVADO = this.VGRAVADO;
	            other.DCARGUE_ID = this.DCARGUE_ID;
	            other.DFORMMEDINSUMOS_ID = this.DFORMMEDINSUMOS_ID;
	            other.FECHA = this.FECHA;
	            other.USUARIOS_ID = this.USUARIOS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.TIPIFICACION = this.TIPIFICACION;
	            other.TDOCUMENTO = this.TDOCUMENTO;
	            other.TFORMULA = this.TFORMULA;
	            other.TORIGEN = this.TORIGEN;
	            other.VGLOSADO = this.VGLOSADO;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VRATIFICADO = this.VRATIFICADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.DOSIS = this.DOSIS;
	            other.FRECUENCIA = this.FRECUENCIA;
	            other.PRODUCTOS_ID = this.PRODUCTOS_ID;
	            other.CIE10_ID = this.CIE10_ID;
	            other.DFORMMEDINSUMOS_ID1 = this.DFORMMEDINSUMOS_ID1;
	            other.FVENCIMIENTO_SALUDSIS = this.FVENCIMIENTO_SALUDSIS;
	            other.FMOVIMIENTO_SALUDSIS = this.FMOVIMIENTO_SALUDSIS;
	            other.CANTIDAD_SALUDSIS = this.CANTIDAD_SALUDSIS;
	            other.VINTERMEDIACION = this.VINTERMEDIACION;
	            other.VCALCULADO_TOTAL = this.VCALCULADO_TOTAL;
	            other.BANDERA_TOTAL = this.BANDERA_TOTAL;
	            other.BANDERA_PORCENTAJE = this.BANDERA_PORCENTAJE;
	            other.CANTENTREGADA_ANTERIOR = this.CANTENTREGADA_ANTERIOR;
	            
	}

	public void copyKeysDataTo(row61Struct other) {

		other.ID = this.ID;
	            	other.FACTURA_ID = this.FACTURA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VALOR_FACTURA = (BigDecimal) ois.readObject();
					
       			    	this.VCALCULADO_FACTURA = (BigDecimal) ois.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) ois.readObject();
					
						this.PREFIJO = readString(dis,ois);
					
						this.NUMERO_FACTURA = readString(dis,ois);
					
						this.LUGAR = readString(dis,ois);
					
						this.PERIODO = readDate(dis,ois);
					
						this.SIGLAESM = readString(dis,ois);
					
						this.SIGLAFUERZA = readString(dis,ois);
					
						this.FORMULA = readString(dis,ois);
					
						this.TIRILLA = readString(dis,ois);
					
						this.FFORMUALCION = readDate(dis,ois);
					
						this.FDISPENSACION = readDate(dis,ois);
					
						this.DOCUMENTO = readString(dis,ois);
					
       			    	this.TDOCUMENTOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.TFORMULAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.TORIGEN_ID = (BigDecimal) ois.readObject();
					
						this.CODIGOCUM = readString(dis,ois);
					
						this.INVIMA = readString(dis,ois);
					
						this.CODIGOSSMP = readString(dis,ois);
					
						this.NOMBREMEDICAMENTO = readString(dis,ois);
					
						this.LABORATORIO = readString(dis,ois);
					
						this.BODEGA = readString(dis,ois);
					
						this.LOTE = readString(dis,ois);
					
						this.FVENCIMIENTO = readDate(dis,ois);
					
       			    	this.CANTFORMULADA = (BigDecimal) ois.readObject();
					
       			    	this.CANTENTREGADA = (BigDecimal) ois.readObject();
					
       			    	this.VUNITARIO = (BigDecimal) ois.readObject();
					
       			    	this.SUBTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.INTERMEDIACION = (BigDecimal) ois.readObject();
					
       			    	this.VTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.VGRAVADO = (BigDecimal) ois.readObject();
					
       			    	this.DCARGUE_ID = (BigDecimal) ois.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID = (BigDecimal) ois.readObject();
					
						this.FECHA = readDate(dis,ois);
					
       			    	this.USUARIOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
						this.ESTADO = readString(dis,ois);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
						this.TIPIFICACION = readString(dis,ois);
					
						this.TDOCUMENTO = readString(dis,ois);
					
						this.TFORMULA = readString(dis,ois);
					
						this.TORIGEN = readString(dis,ois);
					
       			    	this.VGLOSADO = (BigDecimal) ois.readObject();
					
       			    	this.VSOPORTADO = (BigDecimal) ois.readObject();
					
       			    	this.VACEPTADO = (BigDecimal) ois.readObject();
					
       			    	this.VRATIFICADO = (BigDecimal) ois.readObject();
					
       			    	this.VAVALPAGO = (BigDecimal) ois.readObject();
					
       			    	this.PERSONAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.DOSIS = (BigDecimal) ois.readObject();
					
       			    	this.FRECUENCIA = (BigDecimal) ois.readObject();
					
       			    	this.PRODUCTOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.CIE10_ID = (BigDecimal) ois.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID1 = (BigDecimal) ois.readObject();
					
						this.FVENCIMIENTO_SALUDSIS = readDate(dis,ois);
					
						this.FMOVIMIENTO_SALUDSIS = readDate(dis,ois);
					
       			    	this.CANTIDAD_SALUDSIS = (BigDecimal) ois.readObject();
					
						this.VINTERMEDIACION = readInteger(dis,ois);
					
       			    	this.VCALCULADO_TOTAL = (BigDecimal) ois.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis,ois);
					
						this.BANDERA_PORCENTAJE = readInteger(dis,ois);
					
       			    	this.CANTENTREGADA_ANTERIOR = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VALOR_FACTURA = (BigDecimal) objectIn.readObject();
					
       			    	this.VCALCULADO_FACTURA = (BigDecimal) objectIn.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) objectIn.readObject();
					
						this.PREFIJO = readString(dis,objectIn);
					
						this.NUMERO_FACTURA = readString(dis,objectIn);
					
						this.LUGAR = readString(dis,objectIn);
					
						this.PERIODO = readDate(dis,objectIn);
					
						this.SIGLAESM = readString(dis,objectIn);
					
						this.SIGLAFUERZA = readString(dis,objectIn);
					
						this.FORMULA = readString(dis,objectIn);
					
						this.TIRILLA = readString(dis,objectIn);
					
						this.FFORMUALCION = readDate(dis,objectIn);
					
						this.FDISPENSACION = readDate(dis,objectIn);
					
						this.DOCUMENTO = readString(dis,objectIn);
					
       			    	this.TDOCUMENTOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.TFORMULAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.TORIGEN_ID = (BigDecimal) objectIn.readObject();
					
						this.CODIGOCUM = readString(dis,objectIn);
					
						this.INVIMA = readString(dis,objectIn);
					
						this.CODIGOSSMP = readString(dis,objectIn);
					
						this.NOMBREMEDICAMENTO = readString(dis,objectIn);
					
						this.LABORATORIO = readString(dis,objectIn);
					
						this.BODEGA = readString(dis,objectIn);
					
						this.LOTE = readString(dis,objectIn);
					
						this.FVENCIMIENTO = readDate(dis,objectIn);
					
       			    	this.CANTFORMULADA = (BigDecimal) objectIn.readObject();
					
       			    	this.CANTENTREGADA = (BigDecimal) objectIn.readObject();
					
       			    	this.VUNITARIO = (BigDecimal) objectIn.readObject();
					
       			    	this.SUBTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.INTERMEDIACION = (BigDecimal) objectIn.readObject();
					
       			    	this.VTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.VGRAVADO = (BigDecimal) objectIn.readObject();
					
       			    	this.DCARGUE_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID = (BigDecimal) objectIn.readObject();
					
						this.FECHA = readDate(dis,objectIn);
					
       			    	this.USUARIOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
						this.ESTADO = readString(dis,objectIn);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
						this.TIPIFICACION = readString(dis,objectIn);
					
						this.TDOCUMENTO = readString(dis,objectIn);
					
						this.TFORMULA = readString(dis,objectIn);
					
						this.TORIGEN = readString(dis,objectIn);
					
       			    	this.VGLOSADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VSOPORTADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VACEPTADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VRATIFICADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VAVALPAGO = (BigDecimal) objectIn.readObject();
					
       			    	this.PERSONAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DOSIS = (BigDecimal) objectIn.readObject();
					
       			    	this.FRECUENCIA = (BigDecimal) objectIn.readObject();
					
       			    	this.PRODUCTOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.CIE10_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID1 = (BigDecimal) objectIn.readObject();
					
						this.FVENCIMIENTO_SALUDSIS = readDate(dis,objectIn);
					
						this.FMOVIMIENTO_SALUDSIS = readDate(dis,objectIn);
					
       			    	this.CANTIDAD_SALUDSIS = (BigDecimal) objectIn.readObject();
					
						this.VINTERMEDIACION = readInteger(dis,objectIn);
					
       			    	this.VCALCULADO_TOTAL = (BigDecimal) objectIn.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis,objectIn);
					
						this.BANDERA_PORCENTAJE = readInteger(dis,objectIn);
					
       			    	this.CANTENTREGADA_ANTERIOR = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VALOR_FACTURA);
					
       			    	oos.writeObject(this.VCALCULADO_FACTURA);
					
       			    	oos.writeObject(this.RECEPCION_ID);
					
						writeString(this.PREFIJO, dos, oos);
					
						writeString(this.NUMERO_FACTURA, dos, oos);
					
						writeString(this.LUGAR, dos, oos);
					
						writeDate(this.PERIODO, dos, oos);
					
						writeString(this.SIGLAESM, dos, oos);
					
						writeString(this.SIGLAFUERZA, dos, oos);
					
						writeString(this.FORMULA, dos, oos);
					
						writeString(this.TIRILLA, dos, oos);
					
						writeDate(this.FFORMUALCION, dos, oos);
					
						writeDate(this.FDISPENSACION, dos, oos);
					
						writeString(this.DOCUMENTO, dos, oos);
					
       			    	oos.writeObject(this.TDOCUMENTOS_ID);
					
       			    	oos.writeObject(this.TFORMULAS_ID);
					
       			    	oos.writeObject(this.TORIGEN_ID);
					
						writeString(this.CODIGOCUM, dos, oos);
					
						writeString(this.INVIMA, dos, oos);
					
						writeString(this.CODIGOSSMP, dos, oos);
					
						writeString(this.NOMBREMEDICAMENTO, dos, oos);
					
						writeString(this.LABORATORIO, dos, oos);
					
						writeString(this.BODEGA, dos, oos);
					
						writeString(this.LOTE, dos, oos);
					
						writeDate(this.FVENCIMIENTO, dos, oos);
					
       			    	oos.writeObject(this.CANTFORMULADA);
					
       			    	oos.writeObject(this.CANTENTREGADA);
					
       			    	oos.writeObject(this.VUNITARIO);
					
       			    	oos.writeObject(this.SUBTOTAL);
					
       			    	oos.writeObject(this.INTERMEDIACION);
					
       			    	oos.writeObject(this.VTOTAL);
					
       			    	oos.writeObject(this.VGRAVADO);
					
       			    	oos.writeObject(this.DCARGUE_ID);
					
       			    	oos.writeObject(this.DFORMMEDINSUMOS_ID);
					
						writeDate(this.FECHA, dos, oos);
					
       			    	oos.writeObject(this.USUARIOS_ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
						writeString(this.ESTADO, dos, oos);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
						writeString(this.TIPIFICACION, dos, oos);
					
						writeString(this.TDOCUMENTO, dos, oos);
					
						writeString(this.TFORMULA, dos, oos);
					
						writeString(this.TORIGEN, dos, oos);
					
       			    	oos.writeObject(this.VGLOSADO);
					
       			    	oos.writeObject(this.VSOPORTADO);
					
       			    	oos.writeObject(this.VACEPTADO);
					
       			    	oos.writeObject(this.VRATIFICADO);
					
       			    	oos.writeObject(this.VAVALPAGO);
					
       			    	oos.writeObject(this.PERSONAS_ID);
					
       			    	oos.writeObject(this.DOSIS);
					
       			    	oos.writeObject(this.FRECUENCIA);
					
       			    	oos.writeObject(this.PRODUCTOS_ID);
					
       			    	oos.writeObject(this.CIE10_ID);
					
       			    	oos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
						writeDate(this.FVENCIMIENTO_SALUDSIS, dos, oos);
					
						writeDate(this.FMOVIMIENTO_SALUDSIS, dos, oos);
					
       			    	oos.writeObject(this.CANTIDAD_SALUDSIS);
					
					writeInteger(this.VINTERMEDIACION, dos, oos);
					
       			    	oos.writeObject(this.VCALCULADO_TOTAL);
					
					writeInteger(this.BANDERA_TOTAL, dos, oos);
					
					writeInteger(this.BANDERA_PORCENTAJE, dos, oos);
					
       			    	oos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR_FACTURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCALCULADO_FACTURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RECEPCION_ID);
					
						writeString(this.PREFIJO, dos, objectOut);
					
						writeString(this.NUMERO_FACTURA, dos, objectOut);
					
						writeString(this.LUGAR, dos, objectOut);
					
						writeDate(this.PERIODO, dos, objectOut);
					
						writeString(this.SIGLAESM, dos, objectOut);
					
						writeString(this.SIGLAFUERZA, dos, objectOut);
					
						writeString(this.FORMULA, dos, objectOut);
					
						writeString(this.TIRILLA, dos, objectOut);
					
						writeDate(this.FFORMUALCION, dos, objectOut);
					
						writeDate(this.FDISPENSACION, dos, objectOut);
					
						writeString(this.DOCUMENTO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TDOCUMENTOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TFORMULAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TORIGEN_ID);
					
						writeString(this.CODIGOCUM, dos, objectOut);
					
						writeString(this.INVIMA, dos, objectOut);
					
						writeString(this.CODIGOSSMP, dos, objectOut);
					
						writeString(this.NOMBREMEDICAMENTO, dos, objectOut);
					
						writeString(this.LABORATORIO, dos, objectOut);
					
						writeString(this.BODEGA, dos, objectOut);
					
						writeString(this.LOTE, dos, objectOut);
					
						writeDate(this.FVENCIMIENTO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTFORMULADA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTENTREGADA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VUNITARIO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.SUBTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.INTERMEDIACION);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VGRAVADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DCARGUE_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DFORMMEDINSUMOS_ID);
					
						writeDate(this.FECHA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.USUARIOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						writeString(this.ESTADO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
						writeString(this.TIPIFICACION, dos, objectOut);
					
						writeString(this.TDOCUMENTO, dos, objectOut);
					
						writeString(this.TFORMULA, dos, objectOut);
					
						writeString(this.TORIGEN, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VGLOSADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VSOPORTADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VACEPTADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VRATIFICADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VAVALPAGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PERSONAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DOSIS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FRECUENCIA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PRODUCTOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CIE10_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DFORMMEDINSUMOS_ID1);
					
						writeDate(this.FVENCIMIENTO_SALUDSIS, dos, objectOut);
					
						writeDate(this.FMOVIMIENTO_SALUDSIS, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTIDAD_SALUDSIS);
					
					writeInteger(this.VINTERMEDIACION, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCALCULADO_TOTAL);
					
					writeInteger(this.BANDERA_TOTAL, dos, objectOut);
					
					writeInteger(this.BANDERA_PORCENTAJE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR_FACTURA="+String.valueOf(VALOR_FACTURA));
		sb.append(",VCALCULADO_FACTURA="+String.valueOf(VCALCULADO_FACTURA));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",DFORMMEDINSUMOS_ID1="+String.valueOf(DFORMMEDINSUMOS_ID1));
		sb.append(",FVENCIMIENTO_SALUDSIS="+String.valueOf(FVENCIMIENTO_SALUDSIS));
		sb.append(",FMOVIMIENTO_SALUDSIS="+String.valueOf(FMOVIMIENTO_SALUDSIS));
		sb.append(",CANTIDAD_SALUDSIS="+String.valueOf(CANTIDAD_SALUDSIS));
		sb.append(",VINTERMEDIACION="+String.valueOf(VINTERMEDIACION));
		sb.append(",VCALCULADO_TOTAL="+String.valueOf(VCALCULADO_TOTAL));
		sb.append(",BANDERA_TOTAL="+String.valueOf(BANDERA_TOTAL));
		sb.append(",BANDERA_PORCENTAJE="+String.valueOf(BANDERA_PORCENTAJE));
		sb.append(",CANTENTREGADA_ANTERIOR="+String.valueOf(CANTENTREGADA_ANTERIOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row61Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FACTURA_ID, other.FACTURA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_26Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_26_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row61Struct row61 = new row61Struct();




	
	/**
	 * [tAdvancedHash_row61 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row61", false);
		start_Hash.put("tAdvancedHash_row61", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row61";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row61");
					}
				
		int tos_count_tAdvancedHash_row61 = 0;
		

			   		// connection name:row61
			   		// source node:tHashInput_26 - inputs:(after_tHashInput_3) outputs:(row61,row61) | target node:tAdvancedHash_row61 - inputs:(row61) outputs:()
			   		// linked node: tMap_17 - inputs:(row23,row61) outputs:(out17)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row61 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row61Struct> tHash_Lookup_row61 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row61Struct>getLookup(matchingModeEnum_row61);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row61", tHash_Lookup_row61);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row61 begin ] stop
 */



	
	/**
	 * [tHashInput_26 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_26", false);
		start_Hash.put("tHashInput_26", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_26";
	
	
		int tos_count_tHashInput_26 = 0;
		


int nb_line_tHashInput_26 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_26=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_26 = mf_tHashInput_26.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_26==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_26 = tHashFile_tHashInput_26.iterator();
while (iterator_tHashInput_26.hasNext()) {
    row2Struct next_tHashInput_26 = iterator_tHashInput_26.next();

	row61.VALOR_FACTURA = next_tHashInput_26.VALOR_FACTURA;
	row61.VCALCULADO_FACTURA = next_tHashInput_26.VCALCULADO_FACTURA;
	row61.ID = next_tHashInput_26.ID;
	row61.RECEPCION_ID = next_tHashInput_26.RECEPCION_ID;
	row61.FACTURA_ID = next_tHashInput_26.FACTURA_ID;
	row61.PREFIJO = next_tHashInput_26.PREFIJO;
	row61.NUMERO_FACTURA = next_tHashInput_26.NUMERO_FACTURA;
	row61.LUGAR = next_tHashInput_26.LUGAR;
	row61.PERIODO = next_tHashInput_26.PERIODO;
	row61.SIGLAESM = next_tHashInput_26.SIGLAESM;
	row61.SIGLAFUERZA = next_tHashInput_26.SIGLAFUERZA;
	row61.FORMULA = next_tHashInput_26.FORMULA;
	row61.TIRILLA = next_tHashInput_26.TIRILLA;
	row61.FFORMUALCION = next_tHashInput_26.FFORMUALCION;
	row61.FDISPENSACION = next_tHashInput_26.FDISPENSACION;
	row61.DOCUMENTO = next_tHashInput_26.DOCUMENTO;
	row61.TDOCUMENTOS_ID = next_tHashInput_26.TDOCUMENTOS_ID;
	row61.TFORMULAS_ID = next_tHashInput_26.TFORMULAS_ID;
	row61.TORIGEN_ID = next_tHashInput_26.TORIGEN_ID;
	row61.CODIGOCUM = next_tHashInput_26.CODIGOCUM;
	row61.INVIMA = next_tHashInput_26.INVIMA;
	row61.CODIGOSSMP = next_tHashInput_26.CODIGOSSMP;
	row61.NOMBREMEDICAMENTO = next_tHashInput_26.NOMBREMEDICAMENTO;
	row61.LABORATORIO = next_tHashInput_26.LABORATORIO;
	row61.BODEGA = next_tHashInput_26.BODEGA;
	row61.LOTE = next_tHashInput_26.LOTE;
	row61.FVENCIMIENTO = next_tHashInput_26.FVENCIMIENTO;
	row61.CANTFORMULADA = next_tHashInput_26.CANTFORMULADA;
	row61.CANTENTREGADA = next_tHashInput_26.CANTENTREGADA;
	row61.VUNITARIO = next_tHashInput_26.VUNITARIO;
	row61.SUBTOTAL = next_tHashInput_26.SUBTOTAL;
	row61.INTERMEDIACION = next_tHashInput_26.INTERMEDIACION;
	row61.VTOTAL = next_tHashInput_26.VTOTAL;
	row61.VGRAVADO = next_tHashInput_26.VGRAVADO;
	row61.DCARGUE_ID = next_tHashInput_26.DCARGUE_ID;
	row61.DFORMMEDINSUMOS_ID = next_tHashInput_26.DFORMMEDINSUMOS_ID;
	row61.FECHA = next_tHashInput_26.FECHA;
	row61.USUARIOS_ID = next_tHashInput_26.USUARIOS_ID;
	row61.UORG_ID = next_tHashInput_26.UORG_ID;
	row61.ESTADO = next_tHashInput_26.ESTADO;
	row61.ESTREGISTRO_ID = next_tHashInput_26.ESTREGISTRO_ID;
	row61.TIPIFICACION = next_tHashInput_26.TIPIFICACION;
	row61.TDOCUMENTO = next_tHashInput_26.TDOCUMENTO;
	row61.TFORMULA = next_tHashInput_26.TFORMULA;
	row61.TORIGEN = next_tHashInput_26.TORIGEN;
	row61.VGLOSADO = next_tHashInput_26.VGLOSADO;
	row61.VSOPORTADO = next_tHashInput_26.VSOPORTADO;
	row61.VACEPTADO = next_tHashInput_26.VACEPTADO;
	row61.VRATIFICADO = next_tHashInput_26.VRATIFICADO;
	row61.VAVALPAGO = next_tHashInput_26.VAVALPAGO;
	row61.PERSONAS_ID = next_tHashInput_26.PERSONAS_ID;
	row61.DOSIS = next_tHashInput_26.DOSIS;
	row61.FRECUENCIA = next_tHashInput_26.FRECUENCIA;
	row61.PRODUCTOS_ID = next_tHashInput_26.PRODUCTOS_ID;
	row61.CIE10_ID = next_tHashInput_26.CIE10_ID;
	row61.DFORMMEDINSUMOS_ID1 = next_tHashInput_26.DFORMMEDINSUMOS_ID1;
	row61.FVENCIMIENTO_SALUDSIS = next_tHashInput_26.FVENCIMIENTO_SALUDSIS;
	row61.FMOVIMIENTO_SALUDSIS = next_tHashInput_26.FMOVIMIENTO_SALUDSIS;
	row61.CANTIDAD_SALUDSIS = next_tHashInput_26.CANTIDAD_SALUDSIS;
	row61.VINTERMEDIACION = next_tHashInput_26.VINTERMEDIACION;
	row61.VCALCULADO_TOTAL = next_tHashInput_26.VCALCULADO_TOTAL;
	row61.BANDERA_TOTAL = next_tHashInput_26.BANDERA_TOTAL;
	row61.BANDERA_PORCENTAJE = next_tHashInput_26.BANDERA_PORCENTAJE;
	row61.CANTENTREGADA_ANTERIOR = next_tHashInput_26.CANTENTREGADA_ANTERIOR;

 



/**
 * [tHashInput_26 begin ] stop
 */
	
	/**
	 * [tHashInput_26 main ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 


	tos_count_tHashInput_26++;

/**
 * [tHashInput_26 main ] stop
 */
	
	/**
	 * [tHashInput_26 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 



/**
 * [tHashInput_26 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row61 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row61"
						
						);
					}
					


			   
			   

					row61Struct row61_HashRow = new row61Struct();
		   	   	   
				
				row61_HashRow.VALOR_FACTURA = row61.VALOR_FACTURA;
				
				row61_HashRow.VCALCULADO_FACTURA = row61.VCALCULADO_FACTURA;
				
				row61_HashRow.ID = row61.ID;
				
				row61_HashRow.RECEPCION_ID = row61.RECEPCION_ID;
				
				row61_HashRow.FACTURA_ID = row61.FACTURA_ID;
				
				row61_HashRow.PREFIJO = row61.PREFIJO;
				
				row61_HashRow.NUMERO_FACTURA = row61.NUMERO_FACTURA;
				
				row61_HashRow.LUGAR = row61.LUGAR;
				
				row61_HashRow.PERIODO = row61.PERIODO;
				
				row61_HashRow.SIGLAESM = row61.SIGLAESM;
				
				row61_HashRow.SIGLAFUERZA = row61.SIGLAFUERZA;
				
				row61_HashRow.FORMULA = row61.FORMULA;
				
				row61_HashRow.TIRILLA = row61.TIRILLA;
				
				row61_HashRow.FFORMUALCION = row61.FFORMUALCION;
				
				row61_HashRow.FDISPENSACION = row61.FDISPENSACION;
				
				row61_HashRow.DOCUMENTO = row61.DOCUMENTO;
				
				row61_HashRow.TDOCUMENTOS_ID = row61.TDOCUMENTOS_ID;
				
				row61_HashRow.TFORMULAS_ID = row61.TFORMULAS_ID;
				
				row61_HashRow.TORIGEN_ID = row61.TORIGEN_ID;
				
				row61_HashRow.CODIGOCUM = row61.CODIGOCUM;
				
				row61_HashRow.INVIMA = row61.INVIMA;
				
				row61_HashRow.CODIGOSSMP = row61.CODIGOSSMP;
				
				row61_HashRow.NOMBREMEDICAMENTO = row61.NOMBREMEDICAMENTO;
				
				row61_HashRow.LABORATORIO = row61.LABORATORIO;
				
				row61_HashRow.BODEGA = row61.BODEGA;
				
				row61_HashRow.LOTE = row61.LOTE;
				
				row61_HashRow.FVENCIMIENTO = row61.FVENCIMIENTO;
				
				row61_HashRow.CANTFORMULADA = row61.CANTFORMULADA;
				
				row61_HashRow.CANTENTREGADA = row61.CANTENTREGADA;
				
				row61_HashRow.VUNITARIO = row61.VUNITARIO;
				
				row61_HashRow.SUBTOTAL = row61.SUBTOTAL;
				
				row61_HashRow.INTERMEDIACION = row61.INTERMEDIACION;
				
				row61_HashRow.VTOTAL = row61.VTOTAL;
				
				row61_HashRow.VGRAVADO = row61.VGRAVADO;
				
				row61_HashRow.DCARGUE_ID = row61.DCARGUE_ID;
				
				row61_HashRow.DFORMMEDINSUMOS_ID = row61.DFORMMEDINSUMOS_ID;
				
				row61_HashRow.FECHA = row61.FECHA;
				
				row61_HashRow.USUARIOS_ID = row61.USUARIOS_ID;
				
				row61_HashRow.UORG_ID = row61.UORG_ID;
				
				row61_HashRow.ESTADO = row61.ESTADO;
				
				row61_HashRow.ESTREGISTRO_ID = row61.ESTREGISTRO_ID;
				
				row61_HashRow.TIPIFICACION = row61.TIPIFICACION;
				
				row61_HashRow.TDOCUMENTO = row61.TDOCUMENTO;
				
				row61_HashRow.TFORMULA = row61.TFORMULA;
				
				row61_HashRow.TORIGEN = row61.TORIGEN;
				
				row61_HashRow.VGLOSADO = row61.VGLOSADO;
				
				row61_HashRow.VSOPORTADO = row61.VSOPORTADO;
				
				row61_HashRow.VACEPTADO = row61.VACEPTADO;
				
				row61_HashRow.VRATIFICADO = row61.VRATIFICADO;
				
				row61_HashRow.VAVALPAGO = row61.VAVALPAGO;
				
				row61_HashRow.PERSONAS_ID = row61.PERSONAS_ID;
				
				row61_HashRow.DOSIS = row61.DOSIS;
				
				row61_HashRow.FRECUENCIA = row61.FRECUENCIA;
				
				row61_HashRow.PRODUCTOS_ID = row61.PRODUCTOS_ID;
				
				row61_HashRow.CIE10_ID = row61.CIE10_ID;
				
				row61_HashRow.DFORMMEDINSUMOS_ID1 = row61.DFORMMEDINSUMOS_ID1;
				
				row61_HashRow.FVENCIMIENTO_SALUDSIS = row61.FVENCIMIENTO_SALUDSIS;
				
				row61_HashRow.FMOVIMIENTO_SALUDSIS = row61.FMOVIMIENTO_SALUDSIS;
				
				row61_HashRow.CANTIDAD_SALUDSIS = row61.CANTIDAD_SALUDSIS;
				
				row61_HashRow.VINTERMEDIACION = row61.VINTERMEDIACION;
				
				row61_HashRow.VCALCULADO_TOTAL = row61.VCALCULADO_TOTAL;
				
				row61_HashRow.BANDERA_TOTAL = row61.BANDERA_TOTAL;
				
				row61_HashRow.BANDERA_PORCENTAJE = row61.BANDERA_PORCENTAJE;
				
				row61_HashRow.CANTENTREGADA_ANTERIOR = row61.CANTENTREGADA_ANTERIOR;
				
			tHash_Lookup_row61.put(row61_HashRow);
			
            




 


	tos_count_tAdvancedHash_row61++;

/**
 * [tAdvancedHash_row61 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row61 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

 



/**
 * [tAdvancedHash_row61 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row61 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

 



/**
 * [tAdvancedHash_row61 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_26 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 



/**
 * [tHashInput_26 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_26 end ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	
    

		
			nb_line_tHashInput_26++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_26_NB_LINE", nb_line_tHashInput_26);       

 

ok_Hash.put("tHashInput_26", true);
end_Hash.put("tHashInput_26", System.currentTimeMillis());




/**
 * [tHashInput_26 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row61 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

tHash_Lookup_row61.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row61");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row61", true);
end_Hash.put("tAdvancedHash_row61", System.currentTimeMillis());




/**
 * [tAdvancedHash_row61 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_26 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_26";
	
	

 



/**
 * [tHashInput_26 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row61 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row61";
	
	

 



/**
 * [tAdvancedHash_row61 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_26_SUBPROCESS_STATE", 1);
	}
	


public static class row44Struct implements routines.system.IPersistableComparableLookupRow<row44Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CAUSALGLOSAS_ID == null) ? 0 : this.CAUSALGLOSAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row44Struct other = (row44Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CAUSALGLOSAS_ID == null) {
							if (other.CAUSALGLOSAS_ID != null)
								return false;
						
						} else if (!this.CAUSALGLOSAS_ID.equals(other.CAUSALGLOSAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row44Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            
	}

	public void copyKeysDataTo(row44Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CAUSALGLOSAS_ID, other.CAUSALGLOSAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();




	
	/**
	 * [tAdvancedHash_row44 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row44", false);
		start_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row44";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tAdvancedHash_row44 = 0;
		

			   		// connection name:row44
			   		// source node:tHashInput_17 - inputs:(after_tHashInput_9) outputs:(row44,row44) | target node:tAdvancedHash_row44 - inputs:(row44) outputs:()
			   		// linked node: tMap_4 - inputs:(row19,row44) outputs:(copyOfout10)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row44 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row44Struct> tHash_Lookup_row44 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row44Struct>getLookup(matchingModeEnum_row44);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row44", tHash_Lookup_row44);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row44 begin ] stop
 */



	
	/**
	 * [tHashInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_17", false);
		start_Hash.put("tHashInput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_17";
	
	
		int tos_count_tHashInput_17 = 0;
		


int nb_line_tHashInput_17 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row41Struct> tHashFile_tHashInput_17 = mf_tHashInput_17.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
if(tHashFile_tHashInput_17==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row41Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
while (iterator_tHashInput_17.hasNext()) {
    row41Struct next_tHashInput_17 = iterator_tHashInput_17.next();

	row44.ID = next_tHashInput_17.ID;
	row44.NOMBRE = next_tHashInput_17.NOMBRE;
	row44.SIGLA = next_tHashInput_17.SIGLA;
	row44.CAUSALGLOSAS_ID = next_tHashInput_17.CAUSALGLOSAS_ID;

 



/**
 * [tHashInput_17 begin ] stop
 */
	
	/**
	 * [tHashInput_17 main ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 


	tos_count_tHashInput_17++;

/**
 * [tHashInput_17 main ] stop
 */
	
	/**
	 * [tHashInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					


			   
			   

					row44Struct row44_HashRow = new row44Struct();
		   	   	   
				
				row44_HashRow.ID = row44.ID;
				
				row44_HashRow.NOMBRE = row44.NOMBRE;
				
				row44_HashRow.SIGLA = row44.SIGLA;
				
				row44_HashRow.CAUSALGLOSAS_ID = row44.CAUSALGLOSAS_ID;
				
			tHash_Lookup_row44.put(row44_HashRow);
			
            




 


	tos_count_tAdvancedHash_row44++;

/**
 * [tAdvancedHash_row44 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row44 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_17 end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	
    

		
			nb_line_tHashInput_17++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
	


	globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);       

 

ok_Hash.put("tHashInput_17", true);
end_Hash.put("tHashInput_17", System.currentTimeMillis());




/**
 * [tHashInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

tHash_Lookup_row44.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row44", true);
end_Hash.put("tAdvancedHash_row44", System.currentTimeMillis());




/**
 * [tAdvancedHash_row44 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row44 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row44";
	
	

 



/**
 * [tAdvancedHash_row44 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return "";
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.FACTURA_ID == null) {
							if (other.FACTURA_ID != null)
								return false;
						
						} else if (!this.FACTURA_ID.equals(other.FACTURA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.FACTURA_ID = this.FACTURA_ID;
	            other.VTOTAL = this.VTOTAL;
	            other.SUMA = this.SUMA;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.FACTURA_ID = this.FACTURA_ID;
	            	
	}




    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VTOTAL = (BigDecimal) ois.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VTOTAL = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = objectIn.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VTOTAL);
					
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOTAL);
					
						if(this.SUMA == null) {
							objectOut.writeByte(-1);
						} else {
							objectOut.writeByte(0);
							objectOut.writeDouble(this.SUMA);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",SUMA="+String.valueOf(SUMA));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FACTURA_ID, other.FACTURA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tHashInput_8 - inputs:(after_tHashInput_12) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_9 - inputs:(row36,row14) outputs:(copyOfout11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row51Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_15");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row51Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row51Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row14.FACTURA_ID = next_tHashInput_8.FACTURA_ID;
	row14.VTOTAL = next_tHashInput_8.VTOTAL;
	row14.SUMA = next_tHashInput_8.SUMA;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.FACTURA_ID = row14.FACTURA_ID;
				
				row14_HashRow.VTOTAL = row14.VTOTAL;
				
				row14_HashRow.SUMA = row14.SUMA;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_15");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableComparableLookupRow<row35Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public double VTOTAL;

				public double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row35Struct other = (row35Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row35Struct other) {

		other.ID = this.ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.FACTURA_ID = this.FACTURA_ID;
	            other.NUMERO_FACTURA = this.NUMERO_FACTURA;
	            other.VTOTAL = this.VTOTAL;
	            other.VINFORMATIVO = this.VINFORMATIVO;
	            other.GLOSACAUSADA = this.GLOSACAUSADA;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row35Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.RECEPCION_ID = (BigDecimal) ois.readObject();
					
       			    	this.FACTURA_ID = (BigDecimal) ois.readObject();
					
						this.NUMERO_FACTURA = readString(dis,ois);
					
			            this.VTOTAL = dis.readDouble();
					
       			    	this.VINFORMATIVO = (BigDecimal) ois.readObject();
					
       			    	this.GLOSACAUSADA = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.RECEPCION_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.FACTURA_ID = (BigDecimal) objectIn.readObject();
					
						this.NUMERO_FACTURA = readString(dis,objectIn);
					
			            this.VTOTAL = objectIn.readDouble();
					
       			    	this.VINFORMATIVO = (BigDecimal) objectIn.readObject();
					
       			    	this.GLOSACAUSADA = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.RECEPCION_ID);
					
       			    	oos.writeObject(this.FACTURA_ID);
					
						writeString(this.NUMERO_FACTURA, dos, oos);
					
		            	dos.writeDouble(this.VTOTAL);
					
       			    	oos.writeObject(this.VINFORMATIVO);
					
       			    	oos.writeObject(this.GLOSACAUSADA);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RECEPCION_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FACTURA_ID);
					
						writeString(this.NUMERO_FACTURA, dos, objectOut);
					
					objectOut.writeDouble(this.VTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VINFORMATIVO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.GLOSACAUSADA);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tAdvancedHash_row35 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row35", false);
		start_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row35";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tAdvancedHash_row35 = 0;
		

			   		// connection name:row35
			   		// source node:tHashInput_14 - inputs:(after_tOracleInput_14) outputs:(row35,row35) | target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
			   		// linked node: tMap_20 - inputs:(row28,row35) outputs:(InsHdfac)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row35Struct>getLookup(matchingModeEnum_row35);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row35 begin ] stop
 */



	
	/**
	 * [tHashInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_14", false);
		start_Hash.put("tHashInput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_14";
	
	
		int tos_count_tHashInput_14 = 0;
		


int nb_line_tHashInput_14 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out20Struct> tHashFile_tHashInput_14 = mf_tHashInput_14.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_14==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out20Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
while (iterator_tHashInput_14.hasNext()) {
    out20Struct next_tHashInput_14 = iterator_tHashInput_14.next();

	row35.ID = next_tHashInput_14.ID;
	row35.RECEPCION_ID = next_tHashInput_14.RECEPCION_ID;
	row35.FACTURA_ID = next_tHashInput_14.FACTURA_ID;
	row35.NUMERO_FACTURA = next_tHashInput_14.NUMERO_FACTURA;
	row35.VTOTAL = next_tHashInput_14.VTOTAL;
	row35.VINFORMATIVO = next_tHashInput_14.VINFORMATIVO;
	row35.GLOSACAUSADA = next_tHashInput_14.GLOSACAUSADA;
	row35.SIGLA = next_tHashInput_14.SIGLA;

 



/**
 * [tHashInput_14 begin ] stop
 */
	
	/**
	 * [tHashInput_14 main ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 


	tos_count_tHashInput_14++;

/**
 * [tHashInput_14 main ] stop
 */
	
	/**
	 * [tHashInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					


			   
			   

					row35Struct row35_HashRow = new row35Struct();
		   	   	   
				
				row35_HashRow.ID = row35.ID;
				
				row35_HashRow.RECEPCION_ID = row35.RECEPCION_ID;
				
				row35_HashRow.FACTURA_ID = row35.FACTURA_ID;
				
				row35_HashRow.NUMERO_FACTURA = row35.NUMERO_FACTURA;
				
				row35_HashRow.VTOTAL = row35.VTOTAL;
				
				row35_HashRow.VINFORMATIVO = row35.VINFORMATIVO;
				
				row35_HashRow.GLOSACAUSADA = row35.GLOSACAUSADA;
				
				row35_HashRow.SIGLA = row35.SIGLA;
				
			tHash_Lookup_row35.put(row35_HashRow);
			
            




 


	tos_count_tAdvancedHash_row35++;

/**
 * [tAdvancedHash_row35 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_14 end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	
    

		
			nb_line_tHashInput_14++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);       

 

ok_Hash.put("tHashInput_14", true);
end_Hash.put("tHashInput_14", System.currentTimeMillis());




/**
 * [tHashInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

tHash_Lookup_row35.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row35", true);
end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());




/**
 * [tAdvancedHash_row35 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal VALOR_FACTURA;

				public BigDecimal getVALOR_FACTURA () {
					return this.VALOR_FACTURA;
				}

				public Boolean VALOR_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VALOR_FACTURAIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURALength(){
				    return null;
				}
				public Integer VALOR_FACTURAPrecision(){
				    return null;
				}
				public String VALOR_FACTURADefault(){
				
					return "";
				
				}
				public String VALOR_FACTURAComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURAPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURAOriginalDbColumnName(){
				
					return "VALOR_FACTURA";
				
				}

				
			    public BigDecimal VCALCULADO_FACTURA;

				public BigDecimal getVCALCULADO_FACTURA () {
					return this.VCALCULADO_FACTURA;
				}

				public Boolean VCALCULADO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VCALCULADO_FACTURAIsKey(){
				    return false;
				}
				public Integer VCALCULADO_FACTURALength(){
				    return null;
				}
				public Integer VCALCULADO_FACTURAPrecision(){
				    return null;
				}
				public String VCALCULADO_FACTURADefault(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAComment(){
				
				    return "";
				
				}
				public String VCALCULADO_FACTURAPattern(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAOriginalDbColumnName(){
				
					return "VCALCULADO_FACTURA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return false;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return null;
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return null;
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID1;

				public BigDecimal getDFORMMEDINSUMOS_ID1 () {
					return this.DFORMMEDINSUMOS_ID1;
				}

				public Boolean DFORMMEDINSUMOS_ID1IsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_ID1IsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_ID1Length(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_ID1Precision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_ID1Default(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Comment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Pattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1OriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FVENCIMIENTO_SALUDSIS;

				public java.util.Date getFVENCIMIENTO_SALUDSIS () {
					return this.FVENCIMIENTO_SALUDSIS;
				}

				public Boolean FVENCIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FVENCIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FVENCIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FVENCIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FVENCIMIENTO_SALUDSIS";
				
				}

				
			    public java.util.Date FMOVIMIENTO_SALUDSIS;

				public java.util.Date getFMOVIMIENTO_SALUDSIS () {
					return this.FMOVIMIENTO_SALUDSIS;
				}

				public Boolean FMOVIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FMOVIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FMOVIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FMOVIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FMOVIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FMOVIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FMOVIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FMOVIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FMOVIMIENTO_SALUDSIS";
				
				}

				
			    public BigDecimal CANTIDAD_SALUDSIS;

				public BigDecimal getCANTIDAD_SALUDSIS () {
					return this.CANTIDAD_SALUDSIS;
				}

				public Boolean CANTIDAD_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_SALUDSISIsKey(){
				    return false;
				}
				public Integer CANTIDAD_SALUDSISLength(){
				    return null;
				}
				public Integer CANTIDAD_SALUDSISPrecision(){
				    return null;
				}
				public String CANTIDAD_SALUDSISDefault(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISComment(){
				
				    return "";
				
				}
				public String CANTIDAD_SALUDSISPattern(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISOriginalDbColumnName(){
				
					return "CANTIDAD_SALUDSIS";
				
				}

				
			    public Integer VINTERMEDIACION;

				public Integer getVINTERMEDIACION () {
					return this.VINTERMEDIACION;
				}

				public Boolean VINTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VINTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VINTERMEDIACIONLength(){
				    return null;
				}
				public Integer VINTERMEDIACIONPrecision(){
				    return null;
				}
				public String VINTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VINTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String VINTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VINTERMEDIACIONOriginalDbColumnName(){
				
					return "VINTERMEDIACION";
				
				}

				
			    public BigDecimal VCALCULADO_TOTAL;

				public BigDecimal getVCALCULADO_TOTAL () {
					return this.VCALCULADO_TOTAL;
				}

				public Boolean VCALCULADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean VCALCULADO_TOTALIsKey(){
				    return false;
				}
				public Integer VCALCULADO_TOTALLength(){
				    return null;
				}
				public Integer VCALCULADO_TOTALPrecision(){
				    return null;
				}
				public String VCALCULADO_TOTALDefault(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALComment(){
				
				    return "";
				
				}
				public String VCALCULADO_TOTALPattern(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALOriginalDbColumnName(){
				
					return "VCALCULADO_TOTAL";
				
				}

				
			    public Integer BANDERA_TOTAL;

				public Integer getBANDERA_TOTAL () {
					return this.BANDERA_TOTAL;
				}

				public Boolean BANDERA_TOTALIsNullable(){
				    return true;
				}
				public Boolean BANDERA_TOTALIsKey(){
				    return false;
				}
				public Integer BANDERA_TOTALLength(){
				    return null;
				}
				public Integer BANDERA_TOTALPrecision(){
				    return null;
				}
				public String BANDERA_TOTALDefault(){
				
					return "";
				
				}
				public String BANDERA_TOTALComment(){
				
				    return "";
				
				}
				public String BANDERA_TOTALPattern(){
				
					return "";
				
				}
				public String BANDERA_TOTALOriginalDbColumnName(){
				
					return "BANDERA_TOTAL";
				
				}

				
			    public Integer BANDERA_PORCENTAJE;

				public Integer getBANDERA_PORCENTAJE () {
					return this.BANDERA_PORCENTAJE;
				}

				public Boolean BANDERA_PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean BANDERA_PORCENTAJEIsKey(){
				    return false;
				}
				public Integer BANDERA_PORCENTAJELength(){
				    return null;
				}
				public Integer BANDERA_PORCENTAJEPrecision(){
				    return null;
				}
				public String BANDERA_PORCENTAJEDefault(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEComment(){
				
				    return "";
				
				}
				public String BANDERA_PORCENTAJEPattern(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEOriginalDbColumnName(){
				
					return "BANDERA_PORCENTAJE";
				
				}

				
			    public BigDecimal CANTENTREGADA_ANTERIOR;

				public BigDecimal getCANTENTREGADA_ANTERIOR () {
					return this.CANTENTREGADA_ANTERIOR;
				}

				public Boolean CANTENTREGADA_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean CANTENTREGADA_ANTERIORIsKey(){
				    return false;
				}
				public Integer CANTENTREGADA_ANTERIORLength(){
				    return null;
				}
				public Integer CANTENTREGADA_ANTERIORPrecision(){
				    return null;
				}
				public String CANTENTREGADA_ANTERIORDefault(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIORComment(){
				
				    return "";
				
				}
				public String CANTENTREGADA_ANTERIORPattern(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIOROriginalDbColumnName(){
				
					return "CANTENTREGADA_ANTERIOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row33Struct other = (row33Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row33Struct other) {

		other.VALOR_FACTURA = this.VALOR_FACTURA;
	            other.VCALCULADO_FACTURA = this.VCALCULADO_FACTURA;
	            other.ID = this.ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.FACTURA_ID = this.FACTURA_ID;
	            other.PREFIJO = this.PREFIJO;
	            other.NUMERO_FACTURA = this.NUMERO_FACTURA;
	            other.LUGAR = this.LUGAR;
	            other.PERIODO = this.PERIODO;
	            other.SIGLAESM = this.SIGLAESM;
	            other.SIGLAFUERZA = this.SIGLAFUERZA;
	            other.FORMULA = this.FORMULA;
	            other.TIRILLA = this.TIRILLA;
	            other.FFORMUALCION = this.FFORMUALCION;
	            other.FDISPENSACION = this.FDISPENSACION;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.TDOCUMENTOS_ID = this.TDOCUMENTOS_ID;
	            other.TFORMULAS_ID = this.TFORMULAS_ID;
	            other.TORIGEN_ID = this.TORIGEN_ID;
	            other.CODIGOCUM = this.CODIGOCUM;
	            other.INVIMA = this.INVIMA;
	            other.CODIGOSSMP = this.CODIGOSSMP;
	            other.NOMBREMEDICAMENTO = this.NOMBREMEDICAMENTO;
	            other.LABORATORIO = this.LABORATORIO;
	            other.BODEGA = this.BODEGA;
	            other.LOTE = this.LOTE;
	            other.FVENCIMIENTO = this.FVENCIMIENTO;
	            other.CANTFORMULADA = this.CANTFORMULADA;
	            other.CANTENTREGADA = this.CANTENTREGADA;
	            other.VUNITARIO = this.VUNITARIO;
	            other.SUBTOTAL = this.SUBTOTAL;
	            other.INTERMEDIACION = this.INTERMEDIACION;
	            other.VTOTAL = this.VTOTAL;
	            other.VGRAVADO = this.VGRAVADO;
	            other.DCARGUE_ID = this.DCARGUE_ID;
	            other.DFORMMEDINSUMOS_ID = this.DFORMMEDINSUMOS_ID;
	            other.FECHA = this.FECHA;
	            other.USUARIOS_ID = this.USUARIOS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.TIPIFICACION = this.TIPIFICACION;
	            other.TDOCUMENTO = this.TDOCUMENTO;
	            other.TFORMULA = this.TFORMULA;
	            other.TORIGEN = this.TORIGEN;
	            other.VGLOSADO = this.VGLOSADO;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VRATIFICADO = this.VRATIFICADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.DOSIS = this.DOSIS;
	            other.FRECUENCIA = this.FRECUENCIA;
	            other.PRODUCTOS_ID = this.PRODUCTOS_ID;
	            other.CIE10_ID = this.CIE10_ID;
	            other.DFORMMEDINSUMOS_ID1 = this.DFORMMEDINSUMOS_ID1;
	            other.FVENCIMIENTO_SALUDSIS = this.FVENCIMIENTO_SALUDSIS;
	            other.FMOVIMIENTO_SALUDSIS = this.FMOVIMIENTO_SALUDSIS;
	            other.CANTIDAD_SALUDSIS = this.CANTIDAD_SALUDSIS;
	            other.VINTERMEDIACION = this.VINTERMEDIACION;
	            other.VCALCULADO_TOTAL = this.VCALCULADO_TOTAL;
	            other.BANDERA_TOTAL = this.BANDERA_TOTAL;
	            other.BANDERA_PORCENTAJE = this.BANDERA_PORCENTAJE;
	            other.CANTENTREGADA_ANTERIOR = this.CANTENTREGADA_ANTERIOR;
	            
	}

	public void copyKeysDataTo(row33Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VALOR_FACTURA = (BigDecimal) ois.readObject();
					
       			    	this.VCALCULADO_FACTURA = (BigDecimal) ois.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) ois.readObject();
					
       			    	this.FACTURA_ID = (BigDecimal) ois.readObject();
					
						this.PREFIJO = readString(dis,ois);
					
						this.NUMERO_FACTURA = readString(dis,ois);
					
						this.LUGAR = readString(dis,ois);
					
						this.PERIODO = readDate(dis,ois);
					
						this.SIGLAESM = readString(dis,ois);
					
						this.SIGLAFUERZA = readString(dis,ois);
					
						this.FORMULA = readString(dis,ois);
					
						this.TIRILLA = readString(dis,ois);
					
						this.FFORMUALCION = readDate(dis,ois);
					
						this.FDISPENSACION = readDate(dis,ois);
					
						this.DOCUMENTO = readString(dis,ois);
					
       			    	this.TDOCUMENTOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.TFORMULAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.TORIGEN_ID = (BigDecimal) ois.readObject();
					
						this.CODIGOCUM = readString(dis,ois);
					
						this.INVIMA = readString(dis,ois);
					
						this.CODIGOSSMP = readString(dis,ois);
					
						this.NOMBREMEDICAMENTO = readString(dis,ois);
					
						this.LABORATORIO = readString(dis,ois);
					
						this.BODEGA = readString(dis,ois);
					
						this.LOTE = readString(dis,ois);
					
						this.FVENCIMIENTO = readDate(dis,ois);
					
       			    	this.CANTFORMULADA = (BigDecimal) ois.readObject();
					
       			    	this.CANTENTREGADA = (BigDecimal) ois.readObject();
					
       			    	this.VUNITARIO = (BigDecimal) ois.readObject();
					
       			    	this.SUBTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.INTERMEDIACION = (BigDecimal) ois.readObject();
					
       			    	this.VTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.VGRAVADO = (BigDecimal) ois.readObject();
					
       			    	this.DCARGUE_ID = (BigDecimal) ois.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID = (BigDecimal) ois.readObject();
					
						this.FECHA = readDate(dis,ois);
					
       			    	this.USUARIOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
						this.ESTADO = readString(dis,ois);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
						this.TIPIFICACION = readString(dis,ois);
					
						this.TDOCUMENTO = readString(dis,ois);
					
						this.TFORMULA = readString(dis,ois);
					
						this.TORIGEN = readString(dis,ois);
					
       			    	this.VGLOSADO = (BigDecimal) ois.readObject();
					
       			    	this.VSOPORTADO = (BigDecimal) ois.readObject();
					
       			    	this.VACEPTADO = (BigDecimal) ois.readObject();
					
       			    	this.VRATIFICADO = (BigDecimal) ois.readObject();
					
       			    	this.VAVALPAGO = (BigDecimal) ois.readObject();
					
       			    	this.PERSONAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.DOSIS = (BigDecimal) ois.readObject();
					
       			    	this.FRECUENCIA = (BigDecimal) ois.readObject();
					
       			    	this.PRODUCTOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.CIE10_ID = (BigDecimal) ois.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID1 = (BigDecimal) ois.readObject();
					
						this.FVENCIMIENTO_SALUDSIS = readDate(dis,ois);
					
						this.FMOVIMIENTO_SALUDSIS = readDate(dis,ois);
					
       			    	this.CANTIDAD_SALUDSIS = (BigDecimal) ois.readObject();
					
						this.VINTERMEDIACION = readInteger(dis,ois);
					
       			    	this.VCALCULADO_TOTAL = (BigDecimal) ois.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis,ois);
					
						this.BANDERA_PORCENTAJE = readInteger(dis,ois);
					
       			    	this.CANTENTREGADA_ANTERIOR = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VALOR_FACTURA = (BigDecimal) objectIn.readObject();
					
       			    	this.VCALCULADO_FACTURA = (BigDecimal) objectIn.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.FACTURA_ID = (BigDecimal) objectIn.readObject();
					
						this.PREFIJO = readString(dis,objectIn);
					
						this.NUMERO_FACTURA = readString(dis,objectIn);
					
						this.LUGAR = readString(dis,objectIn);
					
						this.PERIODO = readDate(dis,objectIn);
					
						this.SIGLAESM = readString(dis,objectIn);
					
						this.SIGLAFUERZA = readString(dis,objectIn);
					
						this.FORMULA = readString(dis,objectIn);
					
						this.TIRILLA = readString(dis,objectIn);
					
						this.FFORMUALCION = readDate(dis,objectIn);
					
						this.FDISPENSACION = readDate(dis,objectIn);
					
						this.DOCUMENTO = readString(dis,objectIn);
					
       			    	this.TDOCUMENTOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.TFORMULAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.TORIGEN_ID = (BigDecimal) objectIn.readObject();
					
						this.CODIGOCUM = readString(dis,objectIn);
					
						this.INVIMA = readString(dis,objectIn);
					
						this.CODIGOSSMP = readString(dis,objectIn);
					
						this.NOMBREMEDICAMENTO = readString(dis,objectIn);
					
						this.LABORATORIO = readString(dis,objectIn);
					
						this.BODEGA = readString(dis,objectIn);
					
						this.LOTE = readString(dis,objectIn);
					
						this.FVENCIMIENTO = readDate(dis,objectIn);
					
       			    	this.CANTFORMULADA = (BigDecimal) objectIn.readObject();
					
       			    	this.CANTENTREGADA = (BigDecimal) objectIn.readObject();
					
       			    	this.VUNITARIO = (BigDecimal) objectIn.readObject();
					
       			    	this.SUBTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.INTERMEDIACION = (BigDecimal) objectIn.readObject();
					
       			    	this.VTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.VGRAVADO = (BigDecimal) objectIn.readObject();
					
       			    	this.DCARGUE_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID = (BigDecimal) objectIn.readObject();
					
						this.FECHA = readDate(dis,objectIn);
					
       			    	this.USUARIOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
						this.ESTADO = readString(dis,objectIn);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
						this.TIPIFICACION = readString(dis,objectIn);
					
						this.TDOCUMENTO = readString(dis,objectIn);
					
						this.TFORMULA = readString(dis,objectIn);
					
						this.TORIGEN = readString(dis,objectIn);
					
       			    	this.VGLOSADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VSOPORTADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VACEPTADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VRATIFICADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VAVALPAGO = (BigDecimal) objectIn.readObject();
					
       			    	this.PERSONAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DOSIS = (BigDecimal) objectIn.readObject();
					
       			    	this.FRECUENCIA = (BigDecimal) objectIn.readObject();
					
       			    	this.PRODUCTOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.CIE10_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID1 = (BigDecimal) objectIn.readObject();
					
						this.FVENCIMIENTO_SALUDSIS = readDate(dis,objectIn);
					
						this.FMOVIMIENTO_SALUDSIS = readDate(dis,objectIn);
					
       			    	this.CANTIDAD_SALUDSIS = (BigDecimal) objectIn.readObject();
					
						this.VINTERMEDIACION = readInteger(dis,objectIn);
					
       			    	this.VCALCULADO_TOTAL = (BigDecimal) objectIn.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis,objectIn);
					
						this.BANDERA_PORCENTAJE = readInteger(dis,objectIn);
					
       			    	this.CANTENTREGADA_ANTERIOR = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VALOR_FACTURA);
					
       			    	oos.writeObject(this.VCALCULADO_FACTURA);
					
       			    	oos.writeObject(this.RECEPCION_ID);
					
       			    	oos.writeObject(this.FACTURA_ID);
					
						writeString(this.PREFIJO, dos, oos);
					
						writeString(this.NUMERO_FACTURA, dos, oos);
					
						writeString(this.LUGAR, dos, oos);
					
						writeDate(this.PERIODO, dos, oos);
					
						writeString(this.SIGLAESM, dos, oos);
					
						writeString(this.SIGLAFUERZA, dos, oos);
					
						writeString(this.FORMULA, dos, oos);
					
						writeString(this.TIRILLA, dos, oos);
					
						writeDate(this.FFORMUALCION, dos, oos);
					
						writeDate(this.FDISPENSACION, dos, oos);
					
						writeString(this.DOCUMENTO, dos, oos);
					
       			    	oos.writeObject(this.TDOCUMENTOS_ID);
					
       			    	oos.writeObject(this.TFORMULAS_ID);
					
       			    	oos.writeObject(this.TORIGEN_ID);
					
						writeString(this.CODIGOCUM, dos, oos);
					
						writeString(this.INVIMA, dos, oos);
					
						writeString(this.CODIGOSSMP, dos, oos);
					
						writeString(this.NOMBREMEDICAMENTO, dos, oos);
					
						writeString(this.LABORATORIO, dos, oos);
					
						writeString(this.BODEGA, dos, oos);
					
						writeString(this.LOTE, dos, oos);
					
						writeDate(this.FVENCIMIENTO, dos, oos);
					
       			    	oos.writeObject(this.CANTFORMULADA);
					
       			    	oos.writeObject(this.CANTENTREGADA);
					
       			    	oos.writeObject(this.VUNITARIO);
					
       			    	oos.writeObject(this.SUBTOTAL);
					
       			    	oos.writeObject(this.INTERMEDIACION);
					
       			    	oos.writeObject(this.VTOTAL);
					
       			    	oos.writeObject(this.VGRAVADO);
					
       			    	oos.writeObject(this.DCARGUE_ID);
					
       			    	oos.writeObject(this.DFORMMEDINSUMOS_ID);
					
						writeDate(this.FECHA, dos, oos);
					
       			    	oos.writeObject(this.USUARIOS_ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
						writeString(this.ESTADO, dos, oos);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
						writeString(this.TIPIFICACION, dos, oos);
					
						writeString(this.TDOCUMENTO, dos, oos);
					
						writeString(this.TFORMULA, dos, oos);
					
						writeString(this.TORIGEN, dos, oos);
					
       			    	oos.writeObject(this.VGLOSADO);
					
       			    	oos.writeObject(this.VSOPORTADO);
					
       			    	oos.writeObject(this.VACEPTADO);
					
       			    	oos.writeObject(this.VRATIFICADO);
					
       			    	oos.writeObject(this.VAVALPAGO);
					
       			    	oos.writeObject(this.PERSONAS_ID);
					
       			    	oos.writeObject(this.DOSIS);
					
       			    	oos.writeObject(this.FRECUENCIA);
					
       			    	oos.writeObject(this.PRODUCTOS_ID);
					
       			    	oos.writeObject(this.CIE10_ID);
					
       			    	oos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
						writeDate(this.FVENCIMIENTO_SALUDSIS, dos, oos);
					
						writeDate(this.FMOVIMIENTO_SALUDSIS, dos, oos);
					
       			    	oos.writeObject(this.CANTIDAD_SALUDSIS);
					
					writeInteger(this.VINTERMEDIACION, dos, oos);
					
       			    	oos.writeObject(this.VCALCULADO_TOTAL);
					
					writeInteger(this.BANDERA_TOTAL, dos, oos);
					
					writeInteger(this.BANDERA_PORCENTAJE, dos, oos);
					
       			    	oos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR_FACTURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCALCULADO_FACTURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RECEPCION_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FACTURA_ID);
					
						writeString(this.PREFIJO, dos, objectOut);
					
						writeString(this.NUMERO_FACTURA, dos, objectOut);
					
						writeString(this.LUGAR, dos, objectOut);
					
						writeDate(this.PERIODO, dos, objectOut);
					
						writeString(this.SIGLAESM, dos, objectOut);
					
						writeString(this.SIGLAFUERZA, dos, objectOut);
					
						writeString(this.FORMULA, dos, objectOut);
					
						writeString(this.TIRILLA, dos, objectOut);
					
						writeDate(this.FFORMUALCION, dos, objectOut);
					
						writeDate(this.FDISPENSACION, dos, objectOut);
					
						writeString(this.DOCUMENTO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TDOCUMENTOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TFORMULAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TORIGEN_ID);
					
						writeString(this.CODIGOCUM, dos, objectOut);
					
						writeString(this.INVIMA, dos, objectOut);
					
						writeString(this.CODIGOSSMP, dos, objectOut);
					
						writeString(this.NOMBREMEDICAMENTO, dos, objectOut);
					
						writeString(this.LABORATORIO, dos, objectOut);
					
						writeString(this.BODEGA, dos, objectOut);
					
						writeString(this.LOTE, dos, objectOut);
					
						writeDate(this.FVENCIMIENTO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTFORMULADA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTENTREGADA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VUNITARIO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.SUBTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.INTERMEDIACION);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VGRAVADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DCARGUE_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DFORMMEDINSUMOS_ID);
					
						writeDate(this.FECHA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.USUARIOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						writeString(this.ESTADO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
						writeString(this.TIPIFICACION, dos, objectOut);
					
						writeString(this.TDOCUMENTO, dos, objectOut);
					
						writeString(this.TFORMULA, dos, objectOut);
					
						writeString(this.TORIGEN, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VGLOSADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VSOPORTADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VACEPTADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VRATIFICADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VAVALPAGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PERSONAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DOSIS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FRECUENCIA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PRODUCTOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CIE10_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DFORMMEDINSUMOS_ID1);
					
						writeDate(this.FVENCIMIENTO_SALUDSIS, dos, objectOut);
					
						writeDate(this.FMOVIMIENTO_SALUDSIS, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTIDAD_SALUDSIS);
					
					writeInteger(this.VINTERMEDIACION, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCALCULADO_TOTAL);
					
					writeInteger(this.BANDERA_TOTAL, dos, objectOut);
					
					writeInteger(this.BANDERA_PORCENTAJE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR_FACTURA="+String.valueOf(VALOR_FACTURA));
		sb.append(",VCALCULADO_FACTURA="+String.valueOf(VCALCULADO_FACTURA));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",DFORMMEDINSUMOS_ID1="+String.valueOf(DFORMMEDINSUMOS_ID1));
		sb.append(",FVENCIMIENTO_SALUDSIS="+String.valueOf(FVENCIMIENTO_SALUDSIS));
		sb.append(",FMOVIMIENTO_SALUDSIS="+String.valueOf(FMOVIMIENTO_SALUDSIS));
		sb.append(",CANTIDAD_SALUDSIS="+String.valueOf(CANTIDAD_SALUDSIS));
		sb.append(",VINTERMEDIACION="+String.valueOf(VINTERMEDIACION));
		sb.append(",VCALCULADO_TOTAL="+String.valueOf(VCALCULADO_TOTAL));
		sb.append(",BANDERA_TOTAL="+String.valueOf(BANDERA_TOTAL));
		sb.append(",BANDERA_PORCENTAJE="+String.valueOf(BANDERA_PORCENTAJE));
		sb.append(",CANTENTREGADA_ANTERIOR="+String.valueOf(CANTENTREGADA_ANTERIOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tAdvancedHash_row33 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row33", false);
		start_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tAdvancedHash_row33 = 0;
		

			   		// connection name:row33
			   		// source node:tHashInput_11 - inputs:(after_tHashInput_13) outputs:(row33,row33) | target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
			   		// linked node: tMap_10 - inputs:(row53,row33) outputs:(UpdDfacm)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row33Struct>getLookup(matchingModeEnum_row33);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row33 begin ] stop
 */



	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";
	
	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row2Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row33.VALOR_FACTURA = next_tHashInput_11.VALOR_FACTURA;
	row33.VCALCULADO_FACTURA = next_tHashInput_11.VCALCULADO_FACTURA;
	row33.ID = next_tHashInput_11.ID;
	row33.RECEPCION_ID = next_tHashInput_11.RECEPCION_ID;
	row33.FACTURA_ID = next_tHashInput_11.FACTURA_ID;
	row33.PREFIJO = next_tHashInput_11.PREFIJO;
	row33.NUMERO_FACTURA = next_tHashInput_11.NUMERO_FACTURA;
	row33.LUGAR = next_tHashInput_11.LUGAR;
	row33.PERIODO = next_tHashInput_11.PERIODO;
	row33.SIGLAESM = next_tHashInput_11.SIGLAESM;
	row33.SIGLAFUERZA = next_tHashInput_11.SIGLAFUERZA;
	row33.FORMULA = next_tHashInput_11.FORMULA;
	row33.TIRILLA = next_tHashInput_11.TIRILLA;
	row33.FFORMUALCION = next_tHashInput_11.FFORMUALCION;
	row33.FDISPENSACION = next_tHashInput_11.FDISPENSACION;
	row33.DOCUMENTO = next_tHashInput_11.DOCUMENTO;
	row33.TDOCUMENTOS_ID = next_tHashInput_11.TDOCUMENTOS_ID;
	row33.TFORMULAS_ID = next_tHashInput_11.TFORMULAS_ID;
	row33.TORIGEN_ID = next_tHashInput_11.TORIGEN_ID;
	row33.CODIGOCUM = next_tHashInput_11.CODIGOCUM;
	row33.INVIMA = next_tHashInput_11.INVIMA;
	row33.CODIGOSSMP = next_tHashInput_11.CODIGOSSMP;
	row33.NOMBREMEDICAMENTO = next_tHashInput_11.NOMBREMEDICAMENTO;
	row33.LABORATORIO = next_tHashInput_11.LABORATORIO;
	row33.BODEGA = next_tHashInput_11.BODEGA;
	row33.LOTE = next_tHashInput_11.LOTE;
	row33.FVENCIMIENTO = next_tHashInput_11.FVENCIMIENTO;
	row33.CANTFORMULADA = next_tHashInput_11.CANTFORMULADA;
	row33.CANTENTREGADA = next_tHashInput_11.CANTENTREGADA;
	row33.VUNITARIO = next_tHashInput_11.VUNITARIO;
	row33.SUBTOTAL = next_tHashInput_11.SUBTOTAL;
	row33.INTERMEDIACION = next_tHashInput_11.INTERMEDIACION;
	row33.VTOTAL = next_tHashInput_11.VTOTAL;
	row33.VGRAVADO = next_tHashInput_11.VGRAVADO;
	row33.DCARGUE_ID = next_tHashInput_11.DCARGUE_ID;
	row33.DFORMMEDINSUMOS_ID = next_tHashInput_11.DFORMMEDINSUMOS_ID;
	row33.FECHA = next_tHashInput_11.FECHA;
	row33.USUARIOS_ID = next_tHashInput_11.USUARIOS_ID;
	row33.UORG_ID = next_tHashInput_11.UORG_ID;
	row33.ESTADO = next_tHashInput_11.ESTADO;
	row33.ESTREGISTRO_ID = next_tHashInput_11.ESTREGISTRO_ID;
	row33.TIPIFICACION = next_tHashInput_11.TIPIFICACION;
	row33.TDOCUMENTO = next_tHashInput_11.TDOCUMENTO;
	row33.TFORMULA = next_tHashInput_11.TFORMULA;
	row33.TORIGEN = next_tHashInput_11.TORIGEN;
	row33.VGLOSADO = next_tHashInput_11.VGLOSADO;
	row33.VSOPORTADO = next_tHashInput_11.VSOPORTADO;
	row33.VACEPTADO = next_tHashInput_11.VACEPTADO;
	row33.VRATIFICADO = next_tHashInput_11.VRATIFICADO;
	row33.VAVALPAGO = next_tHashInput_11.VAVALPAGO;
	row33.PERSONAS_ID = next_tHashInput_11.PERSONAS_ID;
	row33.DOSIS = next_tHashInput_11.DOSIS;
	row33.FRECUENCIA = next_tHashInput_11.FRECUENCIA;
	row33.PRODUCTOS_ID = next_tHashInput_11.PRODUCTOS_ID;
	row33.CIE10_ID = next_tHashInput_11.CIE10_ID;
	row33.DFORMMEDINSUMOS_ID1 = next_tHashInput_11.DFORMMEDINSUMOS_ID1;
	row33.FVENCIMIENTO_SALUDSIS = next_tHashInput_11.FVENCIMIENTO_SALUDSIS;
	row33.FMOVIMIENTO_SALUDSIS = next_tHashInput_11.FMOVIMIENTO_SALUDSIS;
	row33.CANTIDAD_SALUDSIS = next_tHashInput_11.CANTIDAD_SALUDSIS;
	row33.VINTERMEDIACION = next_tHashInput_11.VINTERMEDIACION;
	row33.VCALCULADO_TOTAL = next_tHashInput_11.VCALCULADO_TOTAL;
	row33.BANDERA_TOTAL = next_tHashInput_11.BANDERA_TOTAL;
	row33.BANDERA_PORCENTAJE = next_tHashInput_11.BANDERA_PORCENTAJE;
	row33.CANTENTREGADA_ANTERIOR = next_tHashInput_11.CANTENTREGADA_ANTERIOR;

 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					


			   
			   

					row33Struct row33_HashRow = new row33Struct();
		   	   	   
				
				row33_HashRow.VALOR_FACTURA = row33.VALOR_FACTURA;
				
				row33_HashRow.VCALCULADO_FACTURA = row33.VCALCULADO_FACTURA;
				
				row33_HashRow.ID = row33.ID;
				
				row33_HashRow.RECEPCION_ID = row33.RECEPCION_ID;
				
				row33_HashRow.FACTURA_ID = row33.FACTURA_ID;
				
				row33_HashRow.PREFIJO = row33.PREFIJO;
				
				row33_HashRow.NUMERO_FACTURA = row33.NUMERO_FACTURA;
				
				row33_HashRow.LUGAR = row33.LUGAR;
				
				row33_HashRow.PERIODO = row33.PERIODO;
				
				row33_HashRow.SIGLAESM = row33.SIGLAESM;
				
				row33_HashRow.SIGLAFUERZA = row33.SIGLAFUERZA;
				
				row33_HashRow.FORMULA = row33.FORMULA;
				
				row33_HashRow.TIRILLA = row33.TIRILLA;
				
				row33_HashRow.FFORMUALCION = row33.FFORMUALCION;
				
				row33_HashRow.FDISPENSACION = row33.FDISPENSACION;
				
				row33_HashRow.DOCUMENTO = row33.DOCUMENTO;
				
				row33_HashRow.TDOCUMENTOS_ID = row33.TDOCUMENTOS_ID;
				
				row33_HashRow.TFORMULAS_ID = row33.TFORMULAS_ID;
				
				row33_HashRow.TORIGEN_ID = row33.TORIGEN_ID;
				
				row33_HashRow.CODIGOCUM = row33.CODIGOCUM;
				
				row33_HashRow.INVIMA = row33.INVIMA;
				
				row33_HashRow.CODIGOSSMP = row33.CODIGOSSMP;
				
				row33_HashRow.NOMBREMEDICAMENTO = row33.NOMBREMEDICAMENTO;
				
				row33_HashRow.LABORATORIO = row33.LABORATORIO;
				
				row33_HashRow.BODEGA = row33.BODEGA;
				
				row33_HashRow.LOTE = row33.LOTE;
				
				row33_HashRow.FVENCIMIENTO = row33.FVENCIMIENTO;
				
				row33_HashRow.CANTFORMULADA = row33.CANTFORMULADA;
				
				row33_HashRow.CANTENTREGADA = row33.CANTENTREGADA;
				
				row33_HashRow.VUNITARIO = row33.VUNITARIO;
				
				row33_HashRow.SUBTOTAL = row33.SUBTOTAL;
				
				row33_HashRow.INTERMEDIACION = row33.INTERMEDIACION;
				
				row33_HashRow.VTOTAL = row33.VTOTAL;
				
				row33_HashRow.VGRAVADO = row33.VGRAVADO;
				
				row33_HashRow.DCARGUE_ID = row33.DCARGUE_ID;
				
				row33_HashRow.DFORMMEDINSUMOS_ID = row33.DFORMMEDINSUMOS_ID;
				
				row33_HashRow.FECHA = row33.FECHA;
				
				row33_HashRow.USUARIOS_ID = row33.USUARIOS_ID;
				
				row33_HashRow.UORG_ID = row33.UORG_ID;
				
				row33_HashRow.ESTADO = row33.ESTADO;
				
				row33_HashRow.ESTREGISTRO_ID = row33.ESTREGISTRO_ID;
				
				row33_HashRow.TIPIFICACION = row33.TIPIFICACION;
				
				row33_HashRow.TDOCUMENTO = row33.TDOCUMENTO;
				
				row33_HashRow.TFORMULA = row33.TFORMULA;
				
				row33_HashRow.TORIGEN = row33.TORIGEN;
				
				row33_HashRow.VGLOSADO = row33.VGLOSADO;
				
				row33_HashRow.VSOPORTADO = row33.VSOPORTADO;
				
				row33_HashRow.VACEPTADO = row33.VACEPTADO;
				
				row33_HashRow.VRATIFICADO = row33.VRATIFICADO;
				
				row33_HashRow.VAVALPAGO = row33.VAVALPAGO;
				
				row33_HashRow.PERSONAS_ID = row33.PERSONAS_ID;
				
				row33_HashRow.DOSIS = row33.DOSIS;
				
				row33_HashRow.FRECUENCIA = row33.FRECUENCIA;
				
				row33_HashRow.PRODUCTOS_ID = row33.PRODUCTOS_ID;
				
				row33_HashRow.CIE10_ID = row33.CIE10_ID;
				
				row33_HashRow.DFORMMEDINSUMOS_ID1 = row33.DFORMMEDINSUMOS_ID1;
				
				row33_HashRow.FVENCIMIENTO_SALUDSIS = row33.FVENCIMIENTO_SALUDSIS;
				
				row33_HashRow.FMOVIMIENTO_SALUDSIS = row33.FMOVIMIENTO_SALUDSIS;
				
				row33_HashRow.CANTIDAD_SALUDSIS = row33.CANTIDAD_SALUDSIS;
				
				row33_HashRow.VINTERMEDIACION = row33.VINTERMEDIACION;
				
				row33_HashRow.VCALCULADO_TOTAL = row33.VCALCULADO_TOTAL;
				
				row33_HashRow.BANDERA_TOTAL = row33.BANDERA_TOTAL;
				
				row33_HashRow.BANDERA_PORCENTAJE = row33.BANDERA_PORCENTAJE;
				
				row33_HashRow.CANTENTREGADA_ANTERIOR = row33.CANTENTREGADA_ANTERIOR;
				
			tHash_Lookup_row33.put(row33_HashRow);
			
            




 


	tos_count_tAdvancedHash_row33++;

/**
 * [tAdvancedHash_row33 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

tHash_Lookup_row33.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row33", true);
end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());




/**
 * [tAdvancedHash_row33 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableComparableLookupRow<row42Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CAUSALGLOSAS_ID;

				public BigDecimal getCAUSALGLOSAS_ID () {
					return this.CAUSALGLOSAS_ID;
				}

				public Boolean CAUSALGLOSAS_IDIsNullable(){
				    return false;
				}
				public Boolean CAUSALGLOSAS_IDIsKey(){
				    return false;
				}
				public Integer CAUSALGLOSAS_IDLength(){
				    return 0;
				}
				public Integer CAUSALGLOSAS_IDPrecision(){
				    return null;
				}
				public String CAUSALGLOSAS_IDDefault(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDComment(){
				
				    return "";
				
				}
				public String CAUSALGLOSAS_IDPattern(){
				
					return "";
				
				}
				public String CAUSALGLOSAS_IDOriginalDbColumnName(){
				
					return "CAUSALGLOSAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CAUSALGLOSAS_ID == null) ? 0 : this.CAUSALGLOSAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row42Struct other = (row42Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CAUSALGLOSAS_ID == null) {
							if (other.CAUSALGLOSAS_ID != null)
								return false;
						
						} else if (!this.CAUSALGLOSAS_ID.equals(other.CAUSALGLOSAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row42Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            
	}

	public void copyKeysDataTo(row42Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CAUSALGLOSAS_ID = this.CAUSALGLOSAS_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CAUSALGLOSAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CAUSALGLOSAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",CAUSALGLOSAS_ID="+String.valueOf(CAUSALGLOSAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CAUSALGLOSAS_ID, other.CAUSALGLOSAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tAdvancedHash_row42 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row42", false);
		start_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row42";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tAdvancedHash_row42 = 0;
		

			   		// connection name:row42
			   		// source node:tHashInput_16 - inputs:(after_tHashInput_15) outputs:(row42,row42) | target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
			   		// linked node: tMap_11 - inputs:(row37,row42,row52) outputs:(copyOfout12)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row42Struct>getLookup(matchingModeEnum_row42);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row42 begin ] stop
 */



	
	/**
	 * [tHashInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_16", false);
		start_Hash.put("tHashInput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_16";
	
	
		int tos_count_tHashInput_16 = 0;
		


int nb_line_tHashInput_16 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row41Struct> tHashFile_tHashInput_16 = mf_tHashInput_16.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
if(tHashFile_tHashInput_16==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row41Struct> iterator_tHashInput_16 = tHashFile_tHashInput_16.iterator();
while (iterator_tHashInput_16.hasNext()) {
    row41Struct next_tHashInput_16 = iterator_tHashInput_16.next();

	row42.ID = next_tHashInput_16.ID;
	row42.NOMBRE = next_tHashInput_16.NOMBRE;
	row42.SIGLA = next_tHashInput_16.SIGLA;
	row42.CAUSALGLOSAS_ID = next_tHashInput_16.CAUSALGLOSAS_ID;

 



/**
 * [tHashInput_16 begin ] stop
 */
	
	/**
	 * [tHashInput_16 main ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 


	tos_count_tHashInput_16++;

/**
 * [tHashInput_16 main ] stop
 */
	
	/**
	 * [tHashInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					


			   
			   

					row42Struct row42_HashRow = new row42Struct();
		   	   	   
				
				row42_HashRow.ID = row42.ID;
				
				row42_HashRow.NOMBRE = row42.NOMBRE;
				
				row42_HashRow.SIGLA = row42.SIGLA;
				
				row42_HashRow.CAUSALGLOSAS_ID = row42.CAUSALGLOSAS_ID;
				
			tHash_Lookup_row42.put(row42_HashRow);
			
            




 


	tos_count_tAdvancedHash_row42++;

/**
 * [tAdvancedHash_row42 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_16 end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	
    

		
			nb_line_tHashInput_16++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_18");
	


	globalMap.put("tHashInput_16_NB_LINE", nb_line_tHashInput_16);       

 

ok_Hash.put("tHashInput_16", true);
end_Hash.put("tHashInput_16", System.currentTimeMillis());




/**
 * [tHashInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

tHash_Lookup_row42.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row42", true);
end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());




/**
 * [tAdvancedHash_row42 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row52Struct implements routines.system.IPersistableComparableLookupRow<row52Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal VALOR_FACTURA;

				public BigDecimal getVALOR_FACTURA () {
					return this.VALOR_FACTURA;
				}

				public Boolean VALOR_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VALOR_FACTURAIsKey(){
				    return false;
				}
				public Integer VALOR_FACTURALength(){
				    return null;
				}
				public Integer VALOR_FACTURAPrecision(){
				    return null;
				}
				public String VALOR_FACTURADefault(){
				
					return "";
				
				}
				public String VALOR_FACTURAComment(){
				
				    return "";
				
				}
				public String VALOR_FACTURAPattern(){
				
					return "";
				
				}
				public String VALOR_FACTURAOriginalDbColumnName(){
				
					return "VALOR_FACTURA";
				
				}

				
			    public BigDecimal VCALCULADO_FACTURA;

				public BigDecimal getVCALCULADO_FACTURA () {
					return this.VCALCULADO_FACTURA;
				}

				public Boolean VCALCULADO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean VCALCULADO_FACTURAIsKey(){
				    return false;
				}
				public Integer VCALCULADO_FACTURALength(){
				    return null;
				}
				public Integer VCALCULADO_FACTURAPrecision(){
				    return null;
				}
				public String VCALCULADO_FACTURADefault(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAComment(){
				
				    return "";
				
				}
				public String VCALCULADO_FACTURAPattern(){
				
					return "";
				
				}
				public String VCALCULADO_FACTURAOriginalDbColumnName(){
				
					return "VCALCULADO_FACTURA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String LUGAR;

				public String getLUGAR () {
					return this.LUGAR;
				}

				public Boolean LUGARIsNullable(){
				    return false;
				}
				public Boolean LUGARIsKey(){
				    return false;
				}
				public Integer LUGARLength(){
				    return null;
				}
				public Integer LUGARPrecision(){
				    return null;
				}
				public String LUGARDefault(){
				
					return null;
				
				}
				public String LUGARComment(){
				
				    return "";
				
				}
				public String LUGARPattern(){
				
					return "";
				
				}
				public String LUGAROriginalDbColumnName(){
				
					return "LUGAR";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return null;
				}
				public Integer PERIODOPrecision(){
				    return null;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public String SIGLAESM;

				public String getSIGLAESM () {
					return this.SIGLAESM;
				}

				public Boolean SIGLAESMIsNullable(){
				    return true;
				}
				public Boolean SIGLAESMIsKey(){
				    return false;
				}
				public Integer SIGLAESMLength(){
				    return null;
				}
				public Integer SIGLAESMPrecision(){
				    return null;
				}
				public String SIGLAESMDefault(){
				
					return null;
				
				}
				public String SIGLAESMComment(){
				
				    return "";
				
				}
				public String SIGLAESMPattern(){
				
					return "";
				
				}
				public String SIGLAESMOriginalDbColumnName(){
				
					return "SIGLAESM";
				
				}

				
			    public String SIGLAFUERZA;

				public String getSIGLAFUERZA () {
					return this.SIGLAFUERZA;
				}

				public Boolean SIGLAFUERZAIsNullable(){
				    return true;
				}
				public Boolean SIGLAFUERZAIsKey(){
				    return false;
				}
				public Integer SIGLAFUERZALength(){
				    return null;
				}
				public Integer SIGLAFUERZAPrecision(){
				    return null;
				}
				public String SIGLAFUERZADefault(){
				
					return null;
				
				}
				public String SIGLAFUERZAComment(){
				
				    return "";
				
				}
				public String SIGLAFUERZAPattern(){
				
					return "";
				
				}
				public String SIGLAFUERZAOriginalDbColumnName(){
				
					return "SIGLAFUERZA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return null;
				}
				public Integer FORMULAPrecision(){
				    return null;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return null;
				}
				public Integer TIRILLAPrecision(){
				    return null;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return null;
				}
				public Integer FFORMUALCIONPrecision(){
				    return null;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return null;
				}
				public Integer FDISPENSACIONPrecision(){
				    return null;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return null;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return "";
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return null;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return "";
				
				}
				public String TORIGEN_IDComment(){
				
				    return "";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return null;
				}
				public Integer CODIGOCUMPrecision(){
				    return null;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return null;
				}
				public Integer INVIMAPrecision(){
				    return null;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String CODIGOSSMP;

				public String getCODIGOSSMP () {
					return this.CODIGOSSMP;
				}

				public Boolean CODIGOSSMPIsNullable(){
				    return true;
				}
				public Boolean CODIGOSSMPIsKey(){
				    return false;
				}
				public Integer CODIGOSSMPLength(){
				    return null;
				}
				public Integer CODIGOSSMPPrecision(){
				    return null;
				}
				public String CODIGOSSMPDefault(){
				
					return null;
				
				}
				public String CODIGOSSMPComment(){
				
				    return "";
				
				}
				public String CODIGOSSMPPattern(){
				
					return "";
				
				}
				public String CODIGOSSMPOriginalDbColumnName(){
				
					return "CODIGOSSMP";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return null;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return null;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public String LABORATORIO;

				public String getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return null;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return null;
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				
			    public String BODEGA;

				public String getBODEGA () {
					return this.BODEGA;
				}

				public Boolean BODEGAIsNullable(){
				    return true;
				}
				public Boolean BODEGAIsKey(){
				    return false;
				}
				public Integer BODEGALength(){
				    return null;
				}
				public Integer BODEGAPrecision(){
				    return null;
				}
				public String BODEGADefault(){
				
					return null;
				
				}
				public String BODEGAComment(){
				
				    return "";
				
				}
				public String BODEGAPattern(){
				
					return "";
				
				}
				public String BODEGAOriginalDbColumnName(){
				
					return "BODEGA";
				
				}

				
			    public String LOTE;

				public String getLOTE () {
					return this.LOTE;
				}

				public Boolean LOTEIsNullable(){
				    return true;
				}
				public Boolean LOTEIsKey(){
				    return false;
				}
				public Integer LOTELength(){
				    return null;
				}
				public Integer LOTEPrecision(){
				    return null;
				}
				public String LOTEDefault(){
				
					return null;
				
				}
				public String LOTEComment(){
				
				    return "";
				
				}
				public String LOTEPattern(){
				
					return "";
				
				}
				public String LOTEOriginalDbColumnName(){
				
					return "LOTE";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return null;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return null;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return null;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return null;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return null;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "";
				
				}
				public String SUBTOTALComment(){
				
				    return "";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return null;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return null;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "";
				
				}
				public String VGRAVADOComment(){
				
				    return "";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return null;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return false;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return null;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return null;
				}
				public Integer TIPIFICACIONPrecision(){
				    return null;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return null;
				}
				public Integer TDOCUMENTOPrecision(){
				    return null;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return null;
				}
				public Integer TFORMULAPrecision(){
				    return null;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return null;
				}
				public Integer TORIGENPrecision(){
				    return null;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal VGLOSADO;

				public BigDecimal getVGLOSADO () {
					return this.VGLOSADO;
				}

				public Boolean VGLOSADOIsNullable(){
				    return true;
				}
				public Boolean VGLOSADOIsKey(){
				    return false;
				}
				public Integer VGLOSADOLength(){
				    return null;
				}
				public Integer VGLOSADOPrecision(){
				    return null;
				}
				public String VGLOSADODefault(){
				
					return "";
				
				}
				public String VGLOSADOComment(){
				
				    return "";
				
				}
				public String VGLOSADOPattern(){
				
					return "";
				
				}
				public String VGLOSADOOriginalDbColumnName(){
				
					return "VGLOSADO";
				
				}

				
			    public BigDecimal VSOPORTADO;

				public BigDecimal getVSOPORTADO () {
					return this.VSOPORTADO;
				}

				public Boolean VSOPORTADOIsNullable(){
				    return true;
				}
				public Boolean VSOPORTADOIsKey(){
				    return false;
				}
				public Integer VSOPORTADOLength(){
				    return null;
				}
				public Integer VSOPORTADOPrecision(){
				    return null;
				}
				public String VSOPORTADODefault(){
				
					return "";
				
				}
				public String VSOPORTADOComment(){
				
				    return "";
				
				}
				public String VSOPORTADOPattern(){
				
					return "";
				
				}
				public String VSOPORTADOOriginalDbColumnName(){
				
					return "VSOPORTADO";
				
				}

				
			    public BigDecimal VACEPTADO;

				public BigDecimal getVACEPTADO () {
					return this.VACEPTADO;
				}

				public Boolean VACEPTADOIsNullable(){
				    return true;
				}
				public Boolean VACEPTADOIsKey(){
				    return false;
				}
				public Integer VACEPTADOLength(){
				    return null;
				}
				public Integer VACEPTADOPrecision(){
				    return null;
				}
				public String VACEPTADODefault(){
				
					return "";
				
				}
				public String VACEPTADOComment(){
				
				    return "";
				
				}
				public String VACEPTADOPattern(){
				
					return "";
				
				}
				public String VACEPTADOOriginalDbColumnName(){
				
					return "VACEPTADO";
				
				}

				
			    public BigDecimal VRATIFICADO;

				public BigDecimal getVRATIFICADO () {
					return this.VRATIFICADO;
				}

				public Boolean VRATIFICADOIsNullable(){
				    return true;
				}
				public Boolean VRATIFICADOIsKey(){
				    return false;
				}
				public Integer VRATIFICADOLength(){
				    return null;
				}
				public Integer VRATIFICADOPrecision(){
				    return null;
				}
				public String VRATIFICADODefault(){
				
					return "";
				
				}
				public String VRATIFICADOComment(){
				
				    return "";
				
				}
				public String VRATIFICADOPattern(){
				
					return "";
				
				}
				public String VRATIFICADOOriginalDbColumnName(){
				
					return "VRATIFICADO";
				
				}

				
			    public BigDecimal VAVALPAGO;

				public BigDecimal getVAVALPAGO () {
					return this.VAVALPAGO;
				}

				public Boolean VAVALPAGOIsNullable(){
				    return true;
				}
				public Boolean VAVALPAGOIsKey(){
				    return false;
				}
				public Integer VAVALPAGOLength(){
				    return null;
				}
				public Integer VAVALPAGOPrecision(){
				    return null;
				}
				public String VAVALPAGODefault(){
				
					return "";
				
				}
				public String VAVALPAGOComment(){
				
				    return "";
				
				}
				public String VAVALPAGOPattern(){
				
					return "";
				
				}
				public String VAVALPAGOOriginalDbColumnName(){
				
					return "VAVALPAGO";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return null;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return "";
				
				}
				public String DOSISComment(){
				
				    return "";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return null;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return "";
				
				}
				public String FRECUENCIAComment(){
				
				    return "";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID1;

				public BigDecimal getDFORMMEDINSUMOS_ID1 () {
					return this.DFORMMEDINSUMOS_ID1;
				}

				public Boolean DFORMMEDINSUMOS_ID1IsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_ID1IsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_ID1Length(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_ID1Precision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_ID1Default(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Comment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_ID1Pattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_ID1OriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				
			    public java.util.Date FVENCIMIENTO_SALUDSIS;

				public java.util.Date getFVENCIMIENTO_SALUDSIS () {
					return this.FVENCIMIENTO_SALUDSIS;
				}

				public Boolean FVENCIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FVENCIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FVENCIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FVENCIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FVENCIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FVENCIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FVENCIMIENTO_SALUDSIS";
				
				}

				
			    public java.util.Date FMOVIMIENTO_SALUDSIS;

				public java.util.Date getFMOVIMIENTO_SALUDSIS () {
					return this.FMOVIMIENTO_SALUDSIS;
				}

				public Boolean FMOVIMIENTO_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean FMOVIMIENTO_SALUDSISIsKey(){
				    return false;
				}
				public Integer FMOVIMIENTO_SALUDSISLength(){
				    return null;
				}
				public Integer FMOVIMIENTO_SALUDSISPrecision(){
				    return null;
				}
				public String FMOVIMIENTO_SALUDSISDefault(){
				
					return null;
				
				}
				public String FMOVIMIENTO_SALUDSISComment(){
				
				    return "";
				
				}
				public String FMOVIMIENTO_SALUDSISPattern(){
				
					return "";
				
				}
				public String FMOVIMIENTO_SALUDSISOriginalDbColumnName(){
				
					return "FMOVIMIENTO_SALUDSIS";
				
				}

				
			    public BigDecimal CANTIDAD_SALUDSIS;

				public BigDecimal getCANTIDAD_SALUDSIS () {
					return this.CANTIDAD_SALUDSIS;
				}

				public Boolean CANTIDAD_SALUDSISIsNullable(){
				    return true;
				}
				public Boolean CANTIDAD_SALUDSISIsKey(){
				    return false;
				}
				public Integer CANTIDAD_SALUDSISLength(){
				    return null;
				}
				public Integer CANTIDAD_SALUDSISPrecision(){
				    return null;
				}
				public String CANTIDAD_SALUDSISDefault(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISComment(){
				
				    return "";
				
				}
				public String CANTIDAD_SALUDSISPattern(){
				
					return "";
				
				}
				public String CANTIDAD_SALUDSISOriginalDbColumnName(){
				
					return "CANTIDAD_SALUDSIS";
				
				}

				
			    public Integer VINTERMEDIACION;

				public Integer getVINTERMEDIACION () {
					return this.VINTERMEDIACION;
				}

				public Boolean VINTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VINTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VINTERMEDIACIONLength(){
				    return null;
				}
				public Integer VINTERMEDIACIONPrecision(){
				    return null;
				}
				public String VINTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VINTERMEDIACIONComment(){
				
				    return "";
				
				}
				public String VINTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VINTERMEDIACIONOriginalDbColumnName(){
				
					return "VINTERMEDIACION";
				
				}

				
			    public BigDecimal VCALCULADO_TOTAL;

				public BigDecimal getVCALCULADO_TOTAL () {
					return this.VCALCULADO_TOTAL;
				}

				public Boolean VCALCULADO_TOTALIsNullable(){
				    return true;
				}
				public Boolean VCALCULADO_TOTALIsKey(){
				    return false;
				}
				public Integer VCALCULADO_TOTALLength(){
				    return null;
				}
				public Integer VCALCULADO_TOTALPrecision(){
				    return null;
				}
				public String VCALCULADO_TOTALDefault(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALComment(){
				
				    return "";
				
				}
				public String VCALCULADO_TOTALPattern(){
				
					return "";
				
				}
				public String VCALCULADO_TOTALOriginalDbColumnName(){
				
					return "VCALCULADO_TOTAL";
				
				}

				
			    public Integer BANDERA_TOTAL;

				public Integer getBANDERA_TOTAL () {
					return this.BANDERA_TOTAL;
				}

				public Boolean BANDERA_TOTALIsNullable(){
				    return true;
				}
				public Boolean BANDERA_TOTALIsKey(){
				    return false;
				}
				public Integer BANDERA_TOTALLength(){
				    return null;
				}
				public Integer BANDERA_TOTALPrecision(){
				    return null;
				}
				public String BANDERA_TOTALDefault(){
				
					return "";
				
				}
				public String BANDERA_TOTALComment(){
				
				    return "";
				
				}
				public String BANDERA_TOTALPattern(){
				
					return "";
				
				}
				public String BANDERA_TOTALOriginalDbColumnName(){
				
					return "BANDERA_TOTAL";
				
				}

				
			    public Integer BANDERA_PORCENTAJE;

				public Integer getBANDERA_PORCENTAJE () {
					return this.BANDERA_PORCENTAJE;
				}

				public Boolean BANDERA_PORCENTAJEIsNullable(){
				    return true;
				}
				public Boolean BANDERA_PORCENTAJEIsKey(){
				    return false;
				}
				public Integer BANDERA_PORCENTAJELength(){
				    return null;
				}
				public Integer BANDERA_PORCENTAJEPrecision(){
				    return null;
				}
				public String BANDERA_PORCENTAJEDefault(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEComment(){
				
				    return "";
				
				}
				public String BANDERA_PORCENTAJEPattern(){
				
					return "";
				
				}
				public String BANDERA_PORCENTAJEOriginalDbColumnName(){
				
					return "BANDERA_PORCENTAJE";
				
				}

				
			    public BigDecimal CANTENTREGADA_ANTERIOR;

				public BigDecimal getCANTENTREGADA_ANTERIOR () {
					return this.CANTENTREGADA_ANTERIOR;
				}

				public Boolean CANTENTREGADA_ANTERIORIsNullable(){
				    return true;
				}
				public Boolean CANTENTREGADA_ANTERIORIsKey(){
				    return false;
				}
				public Integer CANTENTREGADA_ANTERIORLength(){
				    return null;
				}
				public Integer CANTENTREGADA_ANTERIORPrecision(){
				    return null;
				}
				public String CANTENTREGADA_ANTERIORDefault(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIORComment(){
				
				    return "";
				
				}
				public String CANTENTREGADA_ANTERIORPattern(){
				
					return "";
				
				}
				public String CANTENTREGADA_ANTERIOROriginalDbColumnName(){
				
					return "CANTENTREGADA_ANTERIOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row52Struct other = (row52Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row52Struct other) {

		other.VALOR_FACTURA = this.VALOR_FACTURA;
	            other.VCALCULADO_FACTURA = this.VCALCULADO_FACTURA;
	            other.ID = this.ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.FACTURA_ID = this.FACTURA_ID;
	            other.PREFIJO = this.PREFIJO;
	            other.NUMERO_FACTURA = this.NUMERO_FACTURA;
	            other.LUGAR = this.LUGAR;
	            other.PERIODO = this.PERIODO;
	            other.SIGLAESM = this.SIGLAESM;
	            other.SIGLAFUERZA = this.SIGLAFUERZA;
	            other.FORMULA = this.FORMULA;
	            other.TIRILLA = this.TIRILLA;
	            other.FFORMUALCION = this.FFORMUALCION;
	            other.FDISPENSACION = this.FDISPENSACION;
	            other.DOCUMENTO = this.DOCUMENTO;
	            other.TDOCUMENTOS_ID = this.TDOCUMENTOS_ID;
	            other.TFORMULAS_ID = this.TFORMULAS_ID;
	            other.TORIGEN_ID = this.TORIGEN_ID;
	            other.CODIGOCUM = this.CODIGOCUM;
	            other.INVIMA = this.INVIMA;
	            other.CODIGOSSMP = this.CODIGOSSMP;
	            other.NOMBREMEDICAMENTO = this.NOMBREMEDICAMENTO;
	            other.LABORATORIO = this.LABORATORIO;
	            other.BODEGA = this.BODEGA;
	            other.LOTE = this.LOTE;
	            other.FVENCIMIENTO = this.FVENCIMIENTO;
	            other.CANTFORMULADA = this.CANTFORMULADA;
	            other.CANTENTREGADA = this.CANTENTREGADA;
	            other.VUNITARIO = this.VUNITARIO;
	            other.SUBTOTAL = this.SUBTOTAL;
	            other.INTERMEDIACION = this.INTERMEDIACION;
	            other.VTOTAL = this.VTOTAL;
	            other.VGRAVADO = this.VGRAVADO;
	            other.DCARGUE_ID = this.DCARGUE_ID;
	            other.DFORMMEDINSUMOS_ID = this.DFORMMEDINSUMOS_ID;
	            other.FECHA = this.FECHA;
	            other.USUARIOS_ID = this.USUARIOS_ID;
	            other.UORG_ID = this.UORG_ID;
	            other.ESTADO = this.ESTADO;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.TIPIFICACION = this.TIPIFICACION;
	            other.TDOCUMENTO = this.TDOCUMENTO;
	            other.TFORMULA = this.TFORMULA;
	            other.TORIGEN = this.TORIGEN;
	            other.VGLOSADO = this.VGLOSADO;
	            other.VSOPORTADO = this.VSOPORTADO;
	            other.VACEPTADO = this.VACEPTADO;
	            other.VRATIFICADO = this.VRATIFICADO;
	            other.VAVALPAGO = this.VAVALPAGO;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.DOSIS = this.DOSIS;
	            other.FRECUENCIA = this.FRECUENCIA;
	            other.PRODUCTOS_ID = this.PRODUCTOS_ID;
	            other.CIE10_ID = this.CIE10_ID;
	            other.DFORMMEDINSUMOS_ID1 = this.DFORMMEDINSUMOS_ID1;
	            other.FVENCIMIENTO_SALUDSIS = this.FVENCIMIENTO_SALUDSIS;
	            other.FMOVIMIENTO_SALUDSIS = this.FMOVIMIENTO_SALUDSIS;
	            other.CANTIDAD_SALUDSIS = this.CANTIDAD_SALUDSIS;
	            other.VINTERMEDIACION = this.VINTERMEDIACION;
	            other.VCALCULADO_TOTAL = this.VCALCULADO_TOTAL;
	            other.BANDERA_TOTAL = this.BANDERA_TOTAL;
	            other.BANDERA_PORCENTAJE = this.BANDERA_PORCENTAJE;
	            other.CANTENTREGADA_ANTERIOR = this.CANTENTREGADA_ANTERIOR;
	            
	}

	public void copyKeysDataTo(row52Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.VALOR_FACTURA = (BigDecimal) ois.readObject();
					
       			    	this.VCALCULADO_FACTURA = (BigDecimal) ois.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) ois.readObject();
					
       			    	this.FACTURA_ID = (BigDecimal) ois.readObject();
					
						this.PREFIJO = readString(dis,ois);
					
						this.NUMERO_FACTURA = readString(dis,ois);
					
						this.LUGAR = readString(dis,ois);
					
						this.PERIODO = readDate(dis,ois);
					
						this.SIGLAESM = readString(dis,ois);
					
						this.SIGLAFUERZA = readString(dis,ois);
					
						this.FORMULA = readString(dis,ois);
					
						this.TIRILLA = readString(dis,ois);
					
						this.FFORMUALCION = readDate(dis,ois);
					
						this.FDISPENSACION = readDate(dis,ois);
					
						this.DOCUMENTO = readString(dis,ois);
					
       			    	this.TDOCUMENTOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.TFORMULAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.TORIGEN_ID = (BigDecimal) ois.readObject();
					
						this.CODIGOCUM = readString(dis,ois);
					
						this.INVIMA = readString(dis,ois);
					
						this.CODIGOSSMP = readString(dis,ois);
					
						this.NOMBREMEDICAMENTO = readString(dis,ois);
					
						this.LABORATORIO = readString(dis,ois);
					
						this.BODEGA = readString(dis,ois);
					
						this.LOTE = readString(dis,ois);
					
						this.FVENCIMIENTO = readDate(dis,ois);
					
       			    	this.CANTFORMULADA = (BigDecimal) ois.readObject();
					
       			    	this.CANTENTREGADA = (BigDecimal) ois.readObject();
					
       			    	this.VUNITARIO = (BigDecimal) ois.readObject();
					
       			    	this.SUBTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.INTERMEDIACION = (BigDecimal) ois.readObject();
					
       			    	this.VTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.VGRAVADO = (BigDecimal) ois.readObject();
					
       			    	this.DCARGUE_ID = (BigDecimal) ois.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID = (BigDecimal) ois.readObject();
					
						this.FECHA = readDate(dis,ois);
					
       			    	this.USUARIOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.UORG_ID = (BigDecimal) ois.readObject();
					
						this.ESTADO = readString(dis,ois);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
						this.TIPIFICACION = readString(dis,ois);
					
						this.TDOCUMENTO = readString(dis,ois);
					
						this.TFORMULA = readString(dis,ois);
					
						this.TORIGEN = readString(dis,ois);
					
       			    	this.VGLOSADO = (BigDecimal) ois.readObject();
					
       			    	this.VSOPORTADO = (BigDecimal) ois.readObject();
					
       			    	this.VACEPTADO = (BigDecimal) ois.readObject();
					
       			    	this.VRATIFICADO = (BigDecimal) ois.readObject();
					
       			    	this.VAVALPAGO = (BigDecimal) ois.readObject();
					
       			    	this.PERSONAS_ID = (BigDecimal) ois.readObject();
					
       			    	this.DOSIS = (BigDecimal) ois.readObject();
					
       			    	this.FRECUENCIA = (BigDecimal) ois.readObject();
					
       			    	this.PRODUCTOS_ID = (BigDecimal) ois.readObject();
					
       			    	this.CIE10_ID = (BigDecimal) ois.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID1 = (BigDecimal) ois.readObject();
					
						this.FVENCIMIENTO_SALUDSIS = readDate(dis,ois);
					
						this.FMOVIMIENTO_SALUDSIS = readDate(dis,ois);
					
       			    	this.CANTIDAD_SALUDSIS = (BigDecimal) ois.readObject();
					
						this.VINTERMEDIACION = readInteger(dis,ois);
					
       			    	this.VCALCULADO_TOTAL = (BigDecimal) ois.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis,ois);
					
						this.BANDERA_PORCENTAJE = readInteger(dis,ois);
					
       			    	this.CANTENTREGADA_ANTERIOR = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.VALOR_FACTURA = (BigDecimal) objectIn.readObject();
					
       			    	this.VCALCULADO_FACTURA = (BigDecimal) objectIn.readObject();
					
       			    	this.RECEPCION_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.FACTURA_ID = (BigDecimal) objectIn.readObject();
					
						this.PREFIJO = readString(dis,objectIn);
					
						this.NUMERO_FACTURA = readString(dis,objectIn);
					
						this.LUGAR = readString(dis,objectIn);
					
						this.PERIODO = readDate(dis,objectIn);
					
						this.SIGLAESM = readString(dis,objectIn);
					
						this.SIGLAFUERZA = readString(dis,objectIn);
					
						this.FORMULA = readString(dis,objectIn);
					
						this.TIRILLA = readString(dis,objectIn);
					
						this.FFORMUALCION = readDate(dis,objectIn);
					
						this.FDISPENSACION = readDate(dis,objectIn);
					
						this.DOCUMENTO = readString(dis,objectIn);
					
       			    	this.TDOCUMENTOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.TFORMULAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.TORIGEN_ID = (BigDecimal) objectIn.readObject();
					
						this.CODIGOCUM = readString(dis,objectIn);
					
						this.INVIMA = readString(dis,objectIn);
					
						this.CODIGOSSMP = readString(dis,objectIn);
					
						this.NOMBREMEDICAMENTO = readString(dis,objectIn);
					
						this.LABORATORIO = readString(dis,objectIn);
					
						this.BODEGA = readString(dis,objectIn);
					
						this.LOTE = readString(dis,objectIn);
					
						this.FVENCIMIENTO = readDate(dis,objectIn);
					
       			    	this.CANTFORMULADA = (BigDecimal) objectIn.readObject();
					
       			    	this.CANTENTREGADA = (BigDecimal) objectIn.readObject();
					
       			    	this.VUNITARIO = (BigDecimal) objectIn.readObject();
					
       			    	this.SUBTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.INTERMEDIACION = (BigDecimal) objectIn.readObject();
					
       			    	this.VTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.VGRAVADO = (BigDecimal) objectIn.readObject();
					
       			    	this.DCARGUE_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID = (BigDecimal) objectIn.readObject();
					
						this.FECHA = readDate(dis,objectIn);
					
       			    	this.USUARIOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.UORG_ID = (BigDecimal) objectIn.readObject();
					
						this.ESTADO = readString(dis,objectIn);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
						this.TIPIFICACION = readString(dis,objectIn);
					
						this.TDOCUMENTO = readString(dis,objectIn);
					
						this.TFORMULA = readString(dis,objectIn);
					
						this.TORIGEN = readString(dis,objectIn);
					
       			    	this.VGLOSADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VSOPORTADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VACEPTADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VRATIFICADO = (BigDecimal) objectIn.readObject();
					
       			    	this.VAVALPAGO = (BigDecimal) objectIn.readObject();
					
       			    	this.PERSONAS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DOSIS = (BigDecimal) objectIn.readObject();
					
       			    	this.FRECUENCIA = (BigDecimal) objectIn.readObject();
					
       			    	this.PRODUCTOS_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.CIE10_ID = (BigDecimal) objectIn.readObject();
					
       			    	this.DFORMMEDINSUMOS_ID1 = (BigDecimal) objectIn.readObject();
					
						this.FVENCIMIENTO_SALUDSIS = readDate(dis,objectIn);
					
						this.FMOVIMIENTO_SALUDSIS = readDate(dis,objectIn);
					
       			    	this.CANTIDAD_SALUDSIS = (BigDecimal) objectIn.readObject();
					
						this.VINTERMEDIACION = readInteger(dis,objectIn);
					
       			    	this.VCALCULADO_TOTAL = (BigDecimal) objectIn.readObject();
					
						this.BANDERA_TOTAL = readInteger(dis,objectIn);
					
						this.BANDERA_PORCENTAJE = readInteger(dis,objectIn);
					
       			    	this.CANTENTREGADA_ANTERIOR = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.VALOR_FACTURA);
					
       			    	oos.writeObject(this.VCALCULADO_FACTURA);
					
       			    	oos.writeObject(this.RECEPCION_ID);
					
       			    	oos.writeObject(this.FACTURA_ID);
					
						writeString(this.PREFIJO, dos, oos);
					
						writeString(this.NUMERO_FACTURA, dos, oos);
					
						writeString(this.LUGAR, dos, oos);
					
						writeDate(this.PERIODO, dos, oos);
					
						writeString(this.SIGLAESM, dos, oos);
					
						writeString(this.SIGLAFUERZA, dos, oos);
					
						writeString(this.FORMULA, dos, oos);
					
						writeString(this.TIRILLA, dos, oos);
					
						writeDate(this.FFORMUALCION, dos, oos);
					
						writeDate(this.FDISPENSACION, dos, oos);
					
						writeString(this.DOCUMENTO, dos, oos);
					
       			    	oos.writeObject(this.TDOCUMENTOS_ID);
					
       			    	oos.writeObject(this.TFORMULAS_ID);
					
       			    	oos.writeObject(this.TORIGEN_ID);
					
						writeString(this.CODIGOCUM, dos, oos);
					
						writeString(this.INVIMA, dos, oos);
					
						writeString(this.CODIGOSSMP, dos, oos);
					
						writeString(this.NOMBREMEDICAMENTO, dos, oos);
					
						writeString(this.LABORATORIO, dos, oos);
					
						writeString(this.BODEGA, dos, oos);
					
						writeString(this.LOTE, dos, oos);
					
						writeDate(this.FVENCIMIENTO, dos, oos);
					
       			    	oos.writeObject(this.CANTFORMULADA);
					
       			    	oos.writeObject(this.CANTENTREGADA);
					
       			    	oos.writeObject(this.VUNITARIO);
					
       			    	oos.writeObject(this.SUBTOTAL);
					
       			    	oos.writeObject(this.INTERMEDIACION);
					
       			    	oos.writeObject(this.VTOTAL);
					
       			    	oos.writeObject(this.VGRAVADO);
					
       			    	oos.writeObject(this.DCARGUE_ID);
					
       			    	oos.writeObject(this.DFORMMEDINSUMOS_ID);
					
						writeDate(this.FECHA, dos, oos);
					
       			    	oos.writeObject(this.USUARIOS_ID);
					
       			    	oos.writeObject(this.UORG_ID);
					
						writeString(this.ESTADO, dos, oos);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
						writeString(this.TIPIFICACION, dos, oos);
					
						writeString(this.TDOCUMENTO, dos, oos);
					
						writeString(this.TFORMULA, dos, oos);
					
						writeString(this.TORIGEN, dos, oos);
					
       			    	oos.writeObject(this.VGLOSADO);
					
       			    	oos.writeObject(this.VSOPORTADO);
					
       			    	oos.writeObject(this.VACEPTADO);
					
       			    	oos.writeObject(this.VRATIFICADO);
					
       			    	oos.writeObject(this.VAVALPAGO);
					
       			    	oos.writeObject(this.PERSONAS_ID);
					
       			    	oos.writeObject(this.DOSIS);
					
       			    	oos.writeObject(this.FRECUENCIA);
					
       			    	oos.writeObject(this.PRODUCTOS_ID);
					
       			    	oos.writeObject(this.CIE10_ID);
					
       			    	oos.writeObject(this.DFORMMEDINSUMOS_ID1);
					
						writeDate(this.FVENCIMIENTO_SALUDSIS, dos, oos);
					
						writeDate(this.FMOVIMIENTO_SALUDSIS, dos, oos);
					
       			    	oos.writeObject(this.CANTIDAD_SALUDSIS);
					
					writeInteger(this.VINTERMEDIACION, dos, oos);
					
       			    	oos.writeObject(this.VCALCULADO_TOTAL);
					
					writeInteger(this.BANDERA_TOTAL, dos, oos);
					
					writeInteger(this.BANDERA_PORCENTAJE, dos, oos);
					
       			    	oos.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR_FACTURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCALCULADO_FACTURA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RECEPCION_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FACTURA_ID);
					
						writeString(this.PREFIJO, dos, objectOut);
					
						writeString(this.NUMERO_FACTURA, dos, objectOut);
					
						writeString(this.LUGAR, dos, objectOut);
					
						writeDate(this.PERIODO, dos, objectOut);
					
						writeString(this.SIGLAESM, dos, objectOut);
					
						writeString(this.SIGLAFUERZA, dos, objectOut);
					
						writeString(this.FORMULA, dos, objectOut);
					
						writeString(this.TIRILLA, dos, objectOut);
					
						writeDate(this.FFORMUALCION, dos, objectOut);
					
						writeDate(this.FDISPENSACION, dos, objectOut);
					
						writeString(this.DOCUMENTO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TDOCUMENTOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TFORMULAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TORIGEN_ID);
					
						writeString(this.CODIGOCUM, dos, objectOut);
					
						writeString(this.INVIMA, dos, objectOut);
					
						writeString(this.CODIGOSSMP, dos, objectOut);
					
						writeString(this.NOMBREMEDICAMENTO, dos, objectOut);
					
						writeString(this.LABORATORIO, dos, objectOut);
					
						writeString(this.BODEGA, dos, objectOut);
					
						writeString(this.LOTE, dos, objectOut);
					
						writeDate(this.FVENCIMIENTO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTFORMULADA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTENTREGADA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VUNITARIO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.SUBTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.INTERMEDIACION);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VGRAVADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DCARGUE_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DFORMMEDINSUMOS_ID);
					
						writeDate(this.FECHA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.USUARIOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_ID);
					
						writeString(this.ESTADO, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
						writeString(this.TIPIFICACION, dos, objectOut);
					
						writeString(this.TDOCUMENTO, dos, objectOut);
					
						writeString(this.TFORMULA, dos, objectOut);
					
						writeString(this.TORIGEN, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VGLOSADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VSOPORTADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VACEPTADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VRATIFICADO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VAVALPAGO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PERSONAS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DOSIS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FRECUENCIA);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PRODUCTOS_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CIE10_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DFORMMEDINSUMOS_ID1);
					
						writeDate(this.FVENCIMIENTO_SALUDSIS, dos, objectOut);
					
						writeDate(this.FMOVIMIENTO_SALUDSIS, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTIDAD_SALUDSIS);
					
					writeInteger(this.VINTERMEDIACION, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VCALCULADO_TOTAL);
					
					writeInteger(this.BANDERA_TOTAL, dos, objectOut);
					
					writeInteger(this.BANDERA_PORCENTAJE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CANTENTREGADA_ANTERIOR);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VALOR_FACTURA="+String.valueOf(VALOR_FACTURA));
		sb.append(",VCALCULADO_FACTURA="+String.valueOf(VCALCULADO_FACTURA));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",LUGAR="+LUGAR);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",SIGLAESM="+SIGLAESM);
		sb.append(",SIGLAFUERZA="+SIGLAFUERZA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",CODIGOSSMP="+CODIGOSSMP);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",LABORATORIO="+LABORATORIO);
		sb.append(",BODEGA="+BODEGA);
		sb.append(",LOTE="+LOTE);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",VGLOSADO="+String.valueOf(VGLOSADO));
		sb.append(",VSOPORTADO="+String.valueOf(VSOPORTADO));
		sb.append(",VACEPTADO="+String.valueOf(VACEPTADO));
		sb.append(",VRATIFICADO="+String.valueOf(VRATIFICADO));
		sb.append(",VAVALPAGO="+String.valueOf(VAVALPAGO));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",DFORMMEDINSUMOS_ID1="+String.valueOf(DFORMMEDINSUMOS_ID1));
		sb.append(",FVENCIMIENTO_SALUDSIS="+String.valueOf(FVENCIMIENTO_SALUDSIS));
		sb.append(",FMOVIMIENTO_SALUDSIS="+String.valueOf(FMOVIMIENTO_SALUDSIS));
		sb.append(",CANTIDAD_SALUDSIS="+String.valueOf(CANTIDAD_SALUDSIS));
		sb.append(",VINTERMEDIACION="+String.valueOf(VINTERMEDIACION));
		sb.append(",VCALCULADO_TOTAL="+String.valueOf(VCALCULADO_TOTAL));
		sb.append(",BANDERA_TOTAL="+String.valueOf(BANDERA_TOTAL));
		sb.append(",BANDERA_PORCENTAJE="+String.valueOf(BANDERA_PORCENTAJE));
		sb.append(",CANTENTREGADA_ANTERIOR="+String.valueOf(CANTENTREGADA_ANTERIOR));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row52Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row52Struct row52 = new row52Struct();




	
	/**
	 * [tAdvancedHash_row52 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row52", false);
		start_Hash.put("tAdvancedHash_row52", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row52";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row52");
					}
				
		int tos_count_tAdvancedHash_row52 = 0;
		

			   		// connection name:row52
			   		// source node:tHashInput_22 - inputs:(after_tHashInput_15) outputs:(row52,row52) | target node:tAdvancedHash_row52 - inputs:(row52) outputs:()
			   		// linked node: tMap_11 - inputs:(row37,row42,row52) outputs:(copyOfout12)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row52 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row52Struct> tHash_Lookup_row52 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row52Struct>getLookup(matchingModeEnum_row52);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row52", tHash_Lookup_row52);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row52 begin ] stop
 */



	
	/**
	 * [tHashInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_22", false);
		start_Hash.put("tHashInput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_22";
	
	
		int tos_count_tHashInput_22 = 0;
		


int nb_line_tHashInput_22 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row2Struct> tHashFile_tHashInput_22 = mf_tHashInput_22.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_22==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row2Struct> iterator_tHashInput_22 = tHashFile_tHashInput_22.iterator();
while (iterator_tHashInput_22.hasNext()) {
    row2Struct next_tHashInput_22 = iterator_tHashInput_22.next();

	row52.VALOR_FACTURA = next_tHashInput_22.VALOR_FACTURA;
	row52.VCALCULADO_FACTURA = next_tHashInput_22.VCALCULADO_FACTURA;
	row52.ID = next_tHashInput_22.ID;
	row52.RECEPCION_ID = next_tHashInput_22.RECEPCION_ID;
	row52.FACTURA_ID = next_tHashInput_22.FACTURA_ID;
	row52.PREFIJO = next_tHashInput_22.PREFIJO;
	row52.NUMERO_FACTURA = next_tHashInput_22.NUMERO_FACTURA;
	row52.LUGAR = next_tHashInput_22.LUGAR;
	row52.PERIODO = next_tHashInput_22.PERIODO;
	row52.SIGLAESM = next_tHashInput_22.SIGLAESM;
	row52.SIGLAFUERZA = next_tHashInput_22.SIGLAFUERZA;
	row52.FORMULA = next_tHashInput_22.FORMULA;
	row52.TIRILLA = next_tHashInput_22.TIRILLA;
	row52.FFORMUALCION = next_tHashInput_22.FFORMUALCION;
	row52.FDISPENSACION = next_tHashInput_22.FDISPENSACION;
	row52.DOCUMENTO = next_tHashInput_22.DOCUMENTO;
	row52.TDOCUMENTOS_ID = next_tHashInput_22.TDOCUMENTOS_ID;
	row52.TFORMULAS_ID = next_tHashInput_22.TFORMULAS_ID;
	row52.TORIGEN_ID = next_tHashInput_22.TORIGEN_ID;
	row52.CODIGOCUM = next_tHashInput_22.CODIGOCUM;
	row52.INVIMA = next_tHashInput_22.INVIMA;
	row52.CODIGOSSMP = next_tHashInput_22.CODIGOSSMP;
	row52.NOMBREMEDICAMENTO = next_tHashInput_22.NOMBREMEDICAMENTO;
	row52.LABORATORIO = next_tHashInput_22.LABORATORIO;
	row52.BODEGA = next_tHashInput_22.BODEGA;
	row52.LOTE = next_tHashInput_22.LOTE;
	row52.FVENCIMIENTO = next_tHashInput_22.FVENCIMIENTO;
	row52.CANTFORMULADA = next_tHashInput_22.CANTFORMULADA;
	row52.CANTENTREGADA = next_tHashInput_22.CANTENTREGADA;
	row52.VUNITARIO = next_tHashInput_22.VUNITARIO;
	row52.SUBTOTAL = next_tHashInput_22.SUBTOTAL;
	row52.INTERMEDIACION = next_tHashInput_22.INTERMEDIACION;
	row52.VTOTAL = next_tHashInput_22.VTOTAL;
	row52.VGRAVADO = next_tHashInput_22.VGRAVADO;
	row52.DCARGUE_ID = next_tHashInput_22.DCARGUE_ID;
	row52.DFORMMEDINSUMOS_ID = next_tHashInput_22.DFORMMEDINSUMOS_ID;
	row52.FECHA = next_tHashInput_22.FECHA;
	row52.USUARIOS_ID = next_tHashInput_22.USUARIOS_ID;
	row52.UORG_ID = next_tHashInput_22.UORG_ID;
	row52.ESTADO = next_tHashInput_22.ESTADO;
	row52.ESTREGISTRO_ID = next_tHashInput_22.ESTREGISTRO_ID;
	row52.TIPIFICACION = next_tHashInput_22.TIPIFICACION;
	row52.TDOCUMENTO = next_tHashInput_22.TDOCUMENTO;
	row52.TFORMULA = next_tHashInput_22.TFORMULA;
	row52.TORIGEN = next_tHashInput_22.TORIGEN;
	row52.VGLOSADO = next_tHashInput_22.VGLOSADO;
	row52.VSOPORTADO = next_tHashInput_22.VSOPORTADO;
	row52.VACEPTADO = next_tHashInput_22.VACEPTADO;
	row52.VRATIFICADO = next_tHashInput_22.VRATIFICADO;
	row52.VAVALPAGO = next_tHashInput_22.VAVALPAGO;
	row52.PERSONAS_ID = next_tHashInput_22.PERSONAS_ID;
	row52.DOSIS = next_tHashInput_22.DOSIS;
	row52.FRECUENCIA = next_tHashInput_22.FRECUENCIA;
	row52.PRODUCTOS_ID = next_tHashInput_22.PRODUCTOS_ID;
	row52.CIE10_ID = next_tHashInput_22.CIE10_ID;
	row52.DFORMMEDINSUMOS_ID1 = next_tHashInput_22.DFORMMEDINSUMOS_ID1;
	row52.FVENCIMIENTO_SALUDSIS = next_tHashInput_22.FVENCIMIENTO_SALUDSIS;
	row52.FMOVIMIENTO_SALUDSIS = next_tHashInput_22.FMOVIMIENTO_SALUDSIS;
	row52.CANTIDAD_SALUDSIS = next_tHashInput_22.CANTIDAD_SALUDSIS;
	row52.VINTERMEDIACION = next_tHashInput_22.VINTERMEDIACION;
	row52.VCALCULADO_TOTAL = next_tHashInput_22.VCALCULADO_TOTAL;
	row52.BANDERA_TOTAL = next_tHashInput_22.BANDERA_TOTAL;
	row52.BANDERA_PORCENTAJE = next_tHashInput_22.BANDERA_PORCENTAJE;
	row52.CANTENTREGADA_ANTERIOR = next_tHashInput_22.CANTENTREGADA_ANTERIOR;

 



/**
 * [tHashInput_22 begin ] stop
 */
	
	/**
	 * [tHashInput_22 main ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 


	tos_count_tHashInput_22++;

/**
 * [tHashInput_22 main ] stop
 */
	
	/**
	 * [tHashInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row52 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row52";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row52"
						
						);
					}
					


			   
			   

					row52Struct row52_HashRow = new row52Struct();
		   	   	   
				
				row52_HashRow.VALOR_FACTURA = row52.VALOR_FACTURA;
				
				row52_HashRow.VCALCULADO_FACTURA = row52.VCALCULADO_FACTURA;
				
				row52_HashRow.ID = row52.ID;
				
				row52_HashRow.RECEPCION_ID = row52.RECEPCION_ID;
				
				row52_HashRow.FACTURA_ID = row52.FACTURA_ID;
				
				row52_HashRow.PREFIJO = row52.PREFIJO;
				
				row52_HashRow.NUMERO_FACTURA = row52.NUMERO_FACTURA;
				
				row52_HashRow.LUGAR = row52.LUGAR;
				
				row52_HashRow.PERIODO = row52.PERIODO;
				
				row52_HashRow.SIGLAESM = row52.SIGLAESM;
				
				row52_HashRow.SIGLAFUERZA = row52.SIGLAFUERZA;
				
				row52_HashRow.FORMULA = row52.FORMULA;
				
				row52_HashRow.TIRILLA = row52.TIRILLA;
				
				row52_HashRow.FFORMUALCION = row52.FFORMUALCION;
				
				row52_HashRow.FDISPENSACION = row52.FDISPENSACION;
				
				row52_HashRow.DOCUMENTO = row52.DOCUMENTO;
				
				row52_HashRow.TDOCUMENTOS_ID = row52.TDOCUMENTOS_ID;
				
				row52_HashRow.TFORMULAS_ID = row52.TFORMULAS_ID;
				
				row52_HashRow.TORIGEN_ID = row52.TORIGEN_ID;
				
				row52_HashRow.CODIGOCUM = row52.CODIGOCUM;
				
				row52_HashRow.INVIMA = row52.INVIMA;
				
				row52_HashRow.CODIGOSSMP = row52.CODIGOSSMP;
				
				row52_HashRow.NOMBREMEDICAMENTO = row52.NOMBREMEDICAMENTO;
				
				row52_HashRow.LABORATORIO = row52.LABORATORIO;
				
				row52_HashRow.BODEGA = row52.BODEGA;
				
				row52_HashRow.LOTE = row52.LOTE;
				
				row52_HashRow.FVENCIMIENTO = row52.FVENCIMIENTO;
				
				row52_HashRow.CANTFORMULADA = row52.CANTFORMULADA;
				
				row52_HashRow.CANTENTREGADA = row52.CANTENTREGADA;
				
				row52_HashRow.VUNITARIO = row52.VUNITARIO;
				
				row52_HashRow.SUBTOTAL = row52.SUBTOTAL;
				
				row52_HashRow.INTERMEDIACION = row52.INTERMEDIACION;
				
				row52_HashRow.VTOTAL = row52.VTOTAL;
				
				row52_HashRow.VGRAVADO = row52.VGRAVADO;
				
				row52_HashRow.DCARGUE_ID = row52.DCARGUE_ID;
				
				row52_HashRow.DFORMMEDINSUMOS_ID = row52.DFORMMEDINSUMOS_ID;
				
				row52_HashRow.FECHA = row52.FECHA;
				
				row52_HashRow.USUARIOS_ID = row52.USUARIOS_ID;
				
				row52_HashRow.UORG_ID = row52.UORG_ID;
				
				row52_HashRow.ESTADO = row52.ESTADO;
				
				row52_HashRow.ESTREGISTRO_ID = row52.ESTREGISTRO_ID;
				
				row52_HashRow.TIPIFICACION = row52.TIPIFICACION;
				
				row52_HashRow.TDOCUMENTO = row52.TDOCUMENTO;
				
				row52_HashRow.TFORMULA = row52.TFORMULA;
				
				row52_HashRow.TORIGEN = row52.TORIGEN;
				
				row52_HashRow.VGLOSADO = row52.VGLOSADO;
				
				row52_HashRow.VSOPORTADO = row52.VSOPORTADO;
				
				row52_HashRow.VACEPTADO = row52.VACEPTADO;
				
				row52_HashRow.VRATIFICADO = row52.VRATIFICADO;
				
				row52_HashRow.VAVALPAGO = row52.VAVALPAGO;
				
				row52_HashRow.PERSONAS_ID = row52.PERSONAS_ID;
				
				row52_HashRow.DOSIS = row52.DOSIS;
				
				row52_HashRow.FRECUENCIA = row52.FRECUENCIA;
				
				row52_HashRow.PRODUCTOS_ID = row52.PRODUCTOS_ID;
				
				row52_HashRow.CIE10_ID = row52.CIE10_ID;
				
				row52_HashRow.DFORMMEDINSUMOS_ID1 = row52.DFORMMEDINSUMOS_ID1;
				
				row52_HashRow.FVENCIMIENTO_SALUDSIS = row52.FVENCIMIENTO_SALUDSIS;
				
				row52_HashRow.FMOVIMIENTO_SALUDSIS = row52.FMOVIMIENTO_SALUDSIS;
				
				row52_HashRow.CANTIDAD_SALUDSIS = row52.CANTIDAD_SALUDSIS;
				
				row52_HashRow.VINTERMEDIACION = row52.VINTERMEDIACION;
				
				row52_HashRow.VCALCULADO_TOTAL = row52.VCALCULADO_TOTAL;
				
				row52_HashRow.BANDERA_TOTAL = row52.BANDERA_TOTAL;
				
				row52_HashRow.BANDERA_PORCENTAJE = row52.BANDERA_PORCENTAJE;
				
				row52_HashRow.CANTENTREGADA_ANTERIOR = row52.CANTENTREGADA_ANTERIOR;
				
			tHash_Lookup_row52.put(row52_HashRow);
			
            




 


	tos_count_tAdvancedHash_row52++;

/**
 * [tAdvancedHash_row52 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row52 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row52";
	
	

 



/**
 * [tAdvancedHash_row52 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row52 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row52";
	
	

 



/**
 * [tAdvancedHash_row52 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_22 end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	
    

		
			nb_line_tHashInput_22++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_22_NB_LINE", nb_line_tHashInput_22);       

 

ok_Hash.put("tHashInput_22", true);
end_Hash.put("tHashInput_22", System.currentTimeMillis());




/**
 * [tHashInput_22 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row52 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row52";
	
	

tHash_Lookup_row52.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row52");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row52", true);
end_Hash.put("tAdvancedHash_row52", System.currentTimeMillis());




/**
 * [tAdvancedHash_row52 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row52 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row52";
	
	

 



/**
 * [tAdvancedHash_row52 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class row65Struct implements routines.system.IPersistableComparableLookupRow<row65Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row65Struct other = (row65Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.FACTURA_ID == null) {
							if (other.FACTURA_ID != null)
								return false;
						
						} else if (!this.FACTURA_ID.equals(other.FACTURA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row65Struct other) {

		other.ID = this.ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.FACTURA_ID = this.FACTURA_ID;
	            other.NUMERO_FACTURA = this.NUMERO_FACTURA;
	            other.VTOTAL = this.VTOTAL;
	            other.VINFORMATIVO = this.VINFORMATIVO;
	            other.GLOSACAUSADA = this.GLOSACAUSADA;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row65Struct other) {

		other.ID = this.ID;
	            	other.FACTURA_ID = this.FACTURA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.RECEPCION_ID = (BigDecimal) ois.readObject();
					
						this.NUMERO_FACTURA = readString(dis,ois);
					
       			    	this.VTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.VINFORMATIVO = (BigDecimal) ois.readObject();
					
       			    	this.GLOSACAUSADA = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.RECEPCION_ID = (BigDecimal) objectIn.readObject();
					
						this.NUMERO_FACTURA = readString(dis,objectIn);
					
       			    	this.VTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.VINFORMATIVO = (BigDecimal) objectIn.readObject();
					
       			    	this.GLOSACAUSADA = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.RECEPCION_ID);
					
						writeString(this.NUMERO_FACTURA, dos, oos);
					
       			    	oos.writeObject(this.VTOTAL);
					
       			    	oos.writeObject(this.VINFORMATIVO);
					
       			    	oos.writeObject(this.GLOSACAUSADA);
					
						writeString(this.SIGLA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RECEPCION_ID);
					
						writeString(this.NUMERO_FACTURA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VINFORMATIVO);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.GLOSACAUSADA);
					
						writeString(this.SIGLA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row65Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FACTURA_ID, other.FACTURA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_28Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_28_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row65Struct row65 = new row65Struct();




	
	/**
	 * [tAdvancedHash_row65 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row65", false);
		start_Hash.put("tAdvancedHash_row65", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row65";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row65");
					}
				
		int tos_count_tAdvancedHash_row65 = 0;
		

			   		// connection name:row65
			   		// source node:tHashInput_28 - inputs:(after_tHashInput_27) outputs:(row65,row65) | target node:tAdvancedHash_row65 - inputs:(row65) outputs:()
			   		// linked node: tMap_18 - inputs:(row64,row65) outputs:(out19)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row65 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row65Struct> tHash_Lookup_row65 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row65Struct>getLookup(matchingModeEnum_row65);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row65", tHash_Lookup_row65);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row65 begin ] stop
 */



	
	/**
	 * [tHashInput_28 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_28", false);
		start_Hash.put("tHashInput_28", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_28";
	
	
		int tos_count_tHashInput_28 = 0;
		


int nb_line_tHashInput_28 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_28=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<FStruct> tHashFile_tHashInput_28 = mf_tHashInput_28.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_23");
if(tHashFile_tHashInput_28==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<FStruct> iterator_tHashInput_28 = tHashFile_tHashInput_28.iterator();
while (iterator_tHashInput_28.hasNext()) {
    FStruct next_tHashInput_28 = iterator_tHashInput_28.next();

	row65.ID = next_tHashInput_28.ID;
	row65.RECEPCION_ID = next_tHashInput_28.RECEPCION_ID;
	row65.FACTURA_ID = next_tHashInput_28.FACTURA_ID;
	row65.NUMERO_FACTURA = next_tHashInput_28.NUMERO_FACTURA;
	row65.VTOTAL = next_tHashInput_28.VTOTAL;
	row65.VINFORMATIVO = next_tHashInput_28.VINFORMATIVO;
	row65.GLOSACAUSADA = next_tHashInput_28.GLOSACAUSADA;
	row65.SIGLA = next_tHashInput_28.SIGLA;

 



/**
 * [tHashInput_28 begin ] stop
 */
	
	/**
	 * [tHashInput_28 main ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 


	tos_count_tHashInput_28++;

/**
 * [tHashInput_28 main ] stop
 */
	
	/**
	 * [tHashInput_28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 



/**
 * [tHashInput_28 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row65 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row65"
						
						);
					}
					


			   
			   

					row65Struct row65_HashRow = new row65Struct();
		   	   	   
				
				row65_HashRow.ID = row65.ID;
				
				row65_HashRow.RECEPCION_ID = row65.RECEPCION_ID;
				
				row65_HashRow.FACTURA_ID = row65.FACTURA_ID;
				
				row65_HashRow.NUMERO_FACTURA = row65.NUMERO_FACTURA;
				
				row65_HashRow.VTOTAL = row65.VTOTAL;
				
				row65_HashRow.VINFORMATIVO = row65.VINFORMATIVO;
				
				row65_HashRow.GLOSACAUSADA = row65.GLOSACAUSADA;
				
				row65_HashRow.SIGLA = row65.SIGLA;
				
			tHash_Lookup_row65.put(row65_HashRow);
			
            




 


	tos_count_tAdvancedHash_row65++;

/**
 * [tAdvancedHash_row65 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row65 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

 



/**
 * [tAdvancedHash_row65 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row65 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

 



/**
 * [tAdvancedHash_row65 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_28 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 



/**
 * [tHashInput_28 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_28 end ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	
    

		
			nb_line_tHashInput_28++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_23");
	


	globalMap.put("tHashInput_28_NB_LINE", nb_line_tHashInput_28);       

 

ok_Hash.put("tHashInput_28", true);
end_Hash.put("tHashInput_28", System.currentTimeMillis());




/**
 * [tHashInput_28 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row65 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

tHash_Lookup_row65.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row65");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row65", true);
end_Hash.put("tAdvancedHash_row65", System.currentTimeMillis());




/**
 * [tAdvancedHash_row65 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_28 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_28";
	
	

 



/**
 * [tHashInput_28 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row65 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row65";
	
	

 



/**
 * [tAdvancedHash_row65 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_28_SUBPROCESS_STATE", 1);
	}
	


public static class row67Struct implements routines.system.IPersistableComparableLookupRow<row67Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VINFORMATIVO;

				public BigDecimal getVINFORMATIVO () {
					return this.VINFORMATIVO;
				}

				public Boolean VINFORMATIVOIsNullable(){
				    return true;
				}
				public Boolean VINFORMATIVOIsKey(){
				    return false;
				}
				public Integer VINFORMATIVOLength(){
				    return null;
				}
				public Integer VINFORMATIVOPrecision(){
				    return null;
				}
				public String VINFORMATIVODefault(){
				
					return null;
				
				}
				public String VINFORMATIVOComment(){
				
				    return "";
				
				}
				public String VINFORMATIVOPattern(){
				
					return "";
				
				}
				public String VINFORMATIVOOriginalDbColumnName(){
				
					return "VINFORMATIVO";
				
				}

				
			    public BigDecimal GLOSACAUSADA;

				public BigDecimal getGLOSACAUSADA () {
					return this.GLOSACAUSADA;
				}

				public Boolean GLOSACAUSADAIsNullable(){
				    return true;
				}
				public Boolean GLOSACAUSADAIsKey(){
				    return false;
				}
				public Integer GLOSACAUSADALength(){
				    return null;
				}
				public Integer GLOSACAUSADAPrecision(){
				    return null;
				}
				public String GLOSACAUSADADefault(){
				
					return "";
				
				}
				public String GLOSACAUSADAComment(){
				
				    return "";
				
				}
				public String GLOSACAUSADAPattern(){
				
					return "";
				
				}
				public String GLOSACAUSADAOriginalDbColumnName(){
				
					return "GLOSACAUSADA";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
						result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
					
						result = prime * result + ((this.GLOSACAUSADA == null) ? 0 : this.GLOSACAUSADA.hashCode());
					
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row67Struct other = (row67Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					
						if (this.FACTURA_ID == null) {
							if (other.FACTURA_ID != null)
								return false;
						
						} else if (!this.FACTURA_ID.equals(other.FACTURA_ID))
						
							return false;
					
						if (this.GLOSACAUSADA == null) {
							if (other.GLOSACAUSADA != null)
								return false;
						
						} else if (!this.GLOSACAUSADA.equals(other.GLOSACAUSADA))
						
							return false;
					
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row67Struct other) {

		other.ID = this.ID;
	            other.RECEPCION_ID = this.RECEPCION_ID;
	            other.FACTURA_ID = this.FACTURA_ID;
	            other.NUMERO_FACTURA = this.NUMERO_FACTURA;
	            other.VTOTAL = this.VTOTAL;
	            other.VINFORMATIVO = this.VINFORMATIVO;
	            other.GLOSACAUSADA = this.GLOSACAUSADA;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row67Struct other) {

		other.ID = this.ID;
	            	other.FACTURA_ID = this.FACTURA_ID;
	            	other.GLOSACAUSADA = this.GLOSACAUSADA;
	            	other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.GLOSACAUSADA = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GLOSACAUSADA);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.RECEPCION_ID = (BigDecimal) ois.readObject();
					
						this.NUMERO_FACTURA = readString(dis,ois);
					
       			    	this.VTOTAL = (BigDecimal) ois.readObject();
					
       			    	this.VINFORMATIVO = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.RECEPCION_ID = (BigDecimal) objectIn.readObject();
					
						this.NUMERO_FACTURA = readString(dis,objectIn);
					
       			    	this.VTOTAL = (BigDecimal) objectIn.readObject();
					
       			    	this.VINFORMATIVO = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.RECEPCION_ID);
					
						writeString(this.NUMERO_FACTURA, dos, oos);
					
       			    	oos.writeObject(this.VTOTAL);
					
       			    	oos.writeObject(this.VINFORMATIVO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RECEPCION_ID);
					
						writeString(this.NUMERO_FACTURA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VTOTAL);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VINFORMATIVO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VINFORMATIVO="+String.valueOf(VINFORMATIVO));
		sb.append(",GLOSACAUSADA="+String.valueOf(GLOSACAUSADA));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row67Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FACTURA_ID, other.FACTURA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.GLOSACAUSADA, other.GLOSACAUSADA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_30Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_30_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row67Struct row67 = new row67Struct();




	
	/**
	 * [tAdvancedHash_row67 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row67", false);
		start_Hash.put("tAdvancedHash_row67", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row67";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row67");
					}
				
		int tos_count_tAdvancedHash_row67 = 0;
		

			   		// connection name:row67
			   		// source node:tHashInput_30 - inputs:(after_tHashInput_29) outputs:(row67,row67) | target node:tAdvancedHash_row67 - inputs:(row67) outputs:()
			   		// linked node: tMap_21 - inputs:(row66,row67) outputs:(out20)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row67 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row67Struct> tHash_Lookup_row67 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row67Struct>getLookup(matchingModeEnum_row67);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row67", tHash_Lookup_row67);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row67 begin ] stop
 */



	
	/**
	 * [tHashInput_30 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_30", false);
		start_Hash.put("tHashInput_30", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_30";
	
	
		int tos_count_tHashInput_30 = 0;
		


int nb_line_tHashInput_30 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_30=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<out19Struct> tHashFile_tHashInput_30 = mf_tHashInput_30.getAdvancedMemoryHashFile("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_24");
if(tHashFile_tHashInput_30==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<out19Struct> iterator_tHashInput_30 = tHashFile_tHashInput_30.iterator();
while (iterator_tHashInput_30.hasNext()) {
    out19Struct next_tHashInput_30 = iterator_tHashInput_30.next();

	row67.ID = next_tHashInput_30.ID;
	row67.RECEPCION_ID = next_tHashInput_30.RECEPCION_ID;
	row67.FACTURA_ID = next_tHashInput_30.FACTURA_ID;
	row67.NUMERO_FACTURA = next_tHashInput_30.NUMERO_FACTURA;
	row67.VTOTAL = next_tHashInput_30.VTOTAL;
	row67.VINFORMATIVO = next_tHashInput_30.VINFORMATIVO;
	row67.GLOSACAUSADA = next_tHashInput_30.GLOSACAUSADA;
	row67.SIGLA = next_tHashInput_30.SIGLA;

 



/**
 * [tHashInput_30 begin ] stop
 */
	
	/**
	 * [tHashInput_30 main ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 


	tos_count_tHashInput_30++;

/**
 * [tHashInput_30 main ] stop
 */
	
	/**
	 * [tHashInput_30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 



/**
 * [tHashInput_30 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row67 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row67"
						
						);
					}
					


			   
			   

					row67Struct row67_HashRow = new row67Struct();
		   	   	   
				
				row67_HashRow.ID = row67.ID;
				
				row67_HashRow.RECEPCION_ID = row67.RECEPCION_ID;
				
				row67_HashRow.FACTURA_ID = row67.FACTURA_ID;
				
				row67_HashRow.NUMERO_FACTURA = row67.NUMERO_FACTURA;
				
				row67_HashRow.VTOTAL = row67.VTOTAL;
				
				row67_HashRow.VINFORMATIVO = row67.VINFORMATIVO;
				
				row67_HashRow.GLOSACAUSADA = row67.GLOSACAUSADA;
				
				row67_HashRow.SIGLA = row67.SIGLA;
				
			tHash_Lookup_row67.put(row67_HashRow);
			
            




 


	tos_count_tAdvancedHash_row67++;

/**
 * [tAdvancedHash_row67 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row67 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

 



/**
 * [tAdvancedHash_row67 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row67 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

 



/**
 * [tAdvancedHash_row67 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_30 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 



/**
 * [tHashInput_30 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_30 end ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	
    

		
			nb_line_tHashInput_30++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_GlosasMedicamentos_" + pid +"_tHashOutput_24");
	


	globalMap.put("tHashInput_30_NB_LINE", nb_line_tHashInput_30);       

 

ok_Hash.put("tHashInput_30", true);
end_Hash.put("tHashInput_30", System.currentTimeMillis());




/**
 * [tHashInput_30 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row67 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

tHash_Lookup_row67.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row67");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row67", true);
end_Hash.put("tAdvancedHash_row67", System.currentTimeMillis());




/**
 * [tAdvancedHash_row67 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_30 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_30";
	
	

 



/**
 * [tHashInput_30 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row67 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row67";
	
	

 



/**
 * [tAdvancedHash_row67 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_30_SUBPROCESS_STATE", 1);
	}
	


public static class row56Struct implements routines.system.IPersistableRow<row56Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row56Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row55Struct implements routines.system.IPersistableRow<row55Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row55Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row55Struct row55 = new row55Struct();
row55Struct row56 = row55;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row56");
					}
				
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row55");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
                        if(fileToDelete_tFileOutputDelimited_1.exists()) {
                            fileToDelete_tFileOutputDelimited_1.delete();
                        }
                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row55.type = lcm.getType();
		row55.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row55.priority = lcm.getPriority();
		row55.message = lcm.getMessage();
		row55.code = lcm.getCode();
		
		row55.moment = java.util.Calendar.getInstance().getTime();
	
    	row55.pid = pid;
		row55.root_pid = rootPid;
		row55.father_pid = fatherPid;
	
    	row55.project = projectName;
    	row55.job = jobName;
    	row55.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row55"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row55.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row55.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row55.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row55.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 
     row56 = row55;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row56"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	
		
		context.synchronizeContext();
            class ContextProcessor_tRunJob_1 {
                    private void transmitContext_0() {
                    parentContextMap_tRunJob_1.put("BANDERA", context.BANDERA);
                    paraList_tRunJob_1.add("--context_type " + "BANDERA" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("bodega", context.bodega);
                    paraList_tRunJob_1.add("--context_type " + "bodega" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("cantidad", context.cantidad);
                    paraList_tRunJob_1.add("--context_type " + "cantidad" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("cantidad_despachada", context.cantidad_despachada);
                    paraList_tRunJob_1.add("--context_type " + "cantidad_despachada" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("cantidad_solicitada", context.cantidad_solicitada);
                    paraList_tRunJob_1.add("--context_type " + "cantidad_solicitada" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("codigo_autorizacion", context.codigo_autorizacion);
                    paraList_tRunJob_1.add("--context_type " + "codigo_autorizacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("codigo_cie10", context.codigo_cie10);
                    paraList_tRunJob_1.add("--context_type " + "codigo_cie10" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("codigo_cum", context.codigo_cum);
                    paraList_tRunJob_1.add("--context_type " + "codigo_cum" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("codigo_cups", context.codigo_cups);
                    paraList_tRunJob_1.add("--context_type " + "codigo_cups" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("concentracion", context.concentracion);
                    paraList_tRunJob_1.add("--context_type " + "concentracion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("confidencialidad", context.confidencialidad);
                    paraList_tRunJob_1.add("--context_type " + "confidencialidad" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CONTRATOS_ID", context.CONTRATOS_ID);
                    paraList_tRunJob_1.add("--context_type " + "CONTRATOS_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("ctc_aprobado", context.ctc_aprobado);
                    paraList_tRunJob_1.add("--context_type " + "ctc_aprobado" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("descripcion_cie10", context.descripcion_cie10);
                    paraList_tRunJob_1.add("--context_type " + "descripcion_cie10" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("descripcion_cups", context.descripcion_cups);
                    paraList_tRunJob_1.add("--context_type " + "descripcion_cups" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("documento", context.documento);
                    paraList_tRunJob_1.add("--context_type " + "documento" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("esm", context.esm);
                    paraList_tRunJob_1.add("--context_type " + "esm" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO", context.ESTADO);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("EstAfiliacionActivo", context.EstAfiliacionActivo);
                    paraList_tRunJob_1.add("--context_type " + "EstAfiliacionActivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("EstAfiliacionProvisional", context.EstAfiliacionProvisional);
                    paraList_tRunJob_1.add("--context_type " + "EstAfiliacionProvisional" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("EstAfiliaicionInactivo", context.EstAfiliaicionInactivo);
                    paraList_tRunJob_1.add("--context_type " + "EstAfiliaicionInactivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("EstArchivoPCE", context.EstArchivoPCE);
                    paraList_tRunJob_1.add("--context_type " + "EstArchivoPCE" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("fecha_autorizacion", context.fecha_autorizacion);
                    paraList_tRunJob_1.add("--context_type " + "fecha_autorizacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fecha_dispensacion", context.fecha_dispensacion);
                    paraList_tRunJob_1.add("--context_type " + "fecha_dispensacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fecha_egreso", context.fecha_egreso);
                    paraList_tRunJob_1.add("--context_type " + "fecha_egreso" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fecha_factura", context.fecha_factura);
                    paraList_tRunJob_1.add("--context_type " + "fecha_factura" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fecha_formulacion", context.fecha_formulacion);
                    paraList_tRunJob_1.add("--context_type " + "fecha_formulacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fecha_ingreso", context.fecha_ingreso);
                    paraList_tRunJob_1.add("--context_type " + "fecha_ingreso" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_NULL", context.FECHA_NULL);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_NULL" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("fecha_registro", context.fecha_registro);
                    paraList_tRunJob_1.add("--context_type " + "fecha_registro" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fecha_servicio", context.fecha_servicio);
                    paraList_tRunJob_1.add("--context_type " + "fecha_servicio" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fecha_vencimiento", context.fecha_vencimiento);
                    paraList_tRunJob_1.add("--context_type " + "fecha_vencimiento" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("fuerza_militar", context.fuerza_militar);
                    paraList_tRunJob_1.add("--context_type " + "fuerza_militar" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA", context.HORA);
                    paraList_tRunJob_1.add("--context_type " + "HORA" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("invima", context.invima);
                    paraList_tRunJob_1.add("--context_type " + "invima" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("laboratorio", context.laboratorio);
                    paraList_tRunJob_1.add("--context_type " + "laboratorio" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("lote", context.lote);
                    paraList_tRunJob_1.add("--context_type " + "lote" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("lugar_dispensacion", context.lugar_dispensacion);
                    paraList_tRunJob_1.add("--context_type " + "lugar_dispensacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MEDCONTRATOS_ID", context.MEDCONTRATOS_ID);
                    paraList_tRunJob_1.add("--context_type " + "MEDCONTRATOS_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("Narchivo", context.Narchivo);
                    paraList_tRunJob_1.add("--context_type " + "Narchivo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("nombre_medicamento", context.nombre_medicamento);
                    paraList_tRunJob_1.add("--context_type " + "nombre_medicamento" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("numero", context.numero);
                    paraList_tRunJob_1.add("--context_type " + "numero" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("numero_factura", context.numero_factura);
                    paraList_tRunJob_1.add("--context_type " + "numero_factura" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("numero_formula", context.numero_formula);
                    paraList_tRunJob_1.add("--context_type " + "numero_formula" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("observaciones", context.observaciones);
                    paraList_tRunJob_1.add("--context_type " + "observaciones" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("origen_formulacion", context.origen_formulacion);
                    paraList_tRunJob_1.add("--context_type " + "origen_formulacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("periodo", context.periodo);
                    paraList_tRunJob_1.add("--context_type " + "periodo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("prefijo", context.prefijo);
                    paraList_tRunJob_1.add("--context_type " + "prefijo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("presentacion", context.presentacion);
                    paraList_tRunJob_1.add("--context_type " + "presentacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PRESTADOR", context.PRESTADOR);
                    paraList_tRunJob_1.add("--context_type " + "PRESTADOR" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("producto_comercial", context.producto_comercial);
                    paraList_tRunJob_1.add("--context_type " + "producto_comercial" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("servicio", context.servicio);
                    paraList_tRunJob_1.add("--context_type " + "servicio" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ssmp", context.ssmp);
                    paraList_tRunJob_1.add("--context_type " + "ssmp" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("subtotal", context.subtotal);
                    paraList_tRunJob_1.add("--context_type " + "subtotal" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("tipificacion", context.tipificacion);
                    paraList_tRunJob_1.add("--context_type " + "tipificacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("tipo", context.tipo);
                    paraList_tRunJob_1.add("--context_type " + "tipo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("tipo_documento", context.tipo_documento);
                    paraList_tRunJob_1.add("--context_type " + "tipo_documento" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("tipo_formula", context.tipo_formula);
                    paraList_tRunJob_1.add("--context_type " + "tipo_formula" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("tipo_servicio", context.tipo_servicio);
                    paraList_tRunJob_1.add("--context_type " + "tipo_servicio" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TipoRespuesta", context.TipoRespuesta);
                    paraList_tRunJob_1.add("--context_type " + "TipoRespuesta" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("tirilla", context.tirilla);
                    paraList_tRunJob_1.add("--context_type " + "tirilla" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("unidad_medida", context.unidad_medida);
                    paraList_tRunJob_1.add("--context_type " + "unidad_medida" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("valor_gravado", context.valor_gravado);
                    paraList_tRunJob_1.add("--context_type " + "valor_gravado" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("valor_intermediacion", context.valor_intermediacion);
                    paraList_tRunJob_1.add("--context_type " + "valor_intermediacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("valor_total", context.valor_total);
                    paraList_tRunJob_1.add("--context_type " + "valor_total" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("valor_unitario", context.valor_unitario);
                    paraList_tRunJob_1.add("--context_type " + "valor_unitario" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("via_administracion", context.via_administracion);
                    paraList_tRunJob_1.add("--context_type " + "via_administracion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_AdditionalParams", context.db_origen_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Login", context.db_origen_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Password", context.db_origen_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_origen_Port", context.db_origen_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Schema", context.db_origen_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_Server", context.db_origen_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_origen_ServiceName", context.db_origen_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_origen_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PathStorage", context.PathStorage);
                    paraList_tRunJob_1.add("--context_type " + "PathStorage" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_AdditionalParams", context.db_destino_AdditionalParams);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_AdditionalParams" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Login", context.db_destino_Login);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Login" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Password", context.db_destino_Password);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Password" + "=" + "id_Password");
                    parentContextMap_tRunJob_1.put("db_destino_Port", context.db_destino_Port);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Schema", context.db_destino_Schema);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Schema" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_Server", context.db_destino_Server);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_Server" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("db_destino_ServiceName", context.db_destino_ServiceName);
                    paraList_tRunJob_1.add("--context_type " + "db_destino_ServiceName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CargueArchivoId", context.CargueArchivoId);
                    paraList_tRunJob_1.add("--context_type " + "CargueArchivoId" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("fechaArchivoErrores", context.fechaArchivoErrores);
                    paraList_tRunJob_1.add("--context_type " + "fechaArchivoErrores" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("nErroresArchivo", context.nErroresArchivo);
                    paraList_tRunJob_1.add("--context_type " + "nErroresArchivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("nRegArchivo", context.nRegArchivo);
                    paraList_tRunJob_1.add("--context_type " + "nRegArchivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vArchivo_Id", context.vArchivo_Id);
                    paraList_tRunJob_1.add("--context_type " + "vArchivo_Id" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("vCantRegistros", context.vCantRegistros);
                    paraList_tRunJob_1.add("--context_type " + "vCantRegistros" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vEstadoCarga", context.vEstadoCarga);
                    paraList_tRunJob_1.add("--context_type " + "vEstadoCarga" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("vIdTipoArchivo", context.vIdTipoArchivo);
                    paraList_tRunJob_1.add("--context_type " + "vIdTipoArchivo" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("vNombreArchivo", context.vNombreArchivo);
                    paraList_tRunJob_1.add("--context_type " + "vNombreArchivo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("vNombreTipoArchivo", context.vNombreTipoArchivo);
                    paraList_tRunJob_1.add("--context_type " + "vNombreTipoArchivo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("vPeriodo", context.vPeriodo);
                    paraList_tRunJob_1.add("--context_type " + "vPeriodo" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("vRecepcionId", context.vRecepcionId);
                    paraList_tRunJob_1.add("--context_type " + "vRecepcionId" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("vTipoArchivo", context.vTipoArchivo);
                    paraList_tRunJob_1.add("--context_type " + "vTipoArchivo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("contador", context.contador);
                    paraList_tRunJob_1.add("--context_type " + "contador" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("eCIE10", context.eCIE10);
                    paraList_tRunJob_1.add("--context_type " + "eCIE10" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eComercial", context.eComercial);
                    paraList_tRunJob_1.add("--context_type " + "eComercial" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eConcentracion", context.eConcentracion);
                    paraList_tRunJob_1.add("--context_type " + "eConcentracion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eCTC", context.eCTC);
                    paraList_tRunJob_1.add("--context_type " + "eCTC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eCum", context.eCum);
                    paraList_tRunJob_1.add("--context_type " + "eCum" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eCUPS", context.eCUPS);
                    paraList_tRunJob_1.add("--context_type " + "eCUPS" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eESM", context.eESM);
                    paraList_tRunJob_1.add("--context_type " + "eESM" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eGeneral", context.eGeneral);
                    paraList_tRunJob_1.add("--context_type " + "eGeneral" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eGenerico", context.eGenerico);
                    paraList_tRunJob_1.add("--context_type " + "eGenerico" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eInvima", context.eInvima);
                    paraList_tRunJob_1.add("--context_type " + "eInvima" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eLaboratorio", context.eLaboratorio);
                    paraList_tRunJob_1.add("--context_type " + "eLaboratorio" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ePersona", context.ePersona);
                    paraList_tRunJob_1.add("--context_type " + "ePersona" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ePresentacion", context.ePresentacion);
                    paraList_tRunJob_1.add("--context_type " + "ePresentacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eSSMP", context.eSSMP);
                    paraList_tRunJob_1.add("--context_type " + "eSSMP" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eTipoFormula", context.eTipoFormula);
                    paraList_tRunJob_1.add("--context_type " + "eTipoFormula" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eUmedida", context.eUmedida);
                    paraList_tRunJob_1.add("--context_type " + "eUmedida" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("eViaAdministracion", context.eViaAdministracion);
                    paraList_tRunJob_1.add("--context_type " + "eViaAdministracion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("code", context.code);
                    paraList_tRunJob_1.add("--context_type " + "code" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("context", context.context);
                    paraList_tRunJob_1.add("--context_type " + "context" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("job", context.job);
                    paraList_tRunJob_1.add("--context_type " + "job" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("message", context.message);
                    paraList_tRunJob_1.add("--context_type " + "message" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("moment", context.moment);
                    paraList_tRunJob_1.add("--context_type " + "moment" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("origen", context.origen);
                    paraList_tRunJob_1.add("--context_type " + "origen" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("priority", context.priority);
                    paraList_tRunJob_1.add("--context_type " + "priority" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("project", context.project);
                    paraList_tRunJob_1.add("--context_type " + "project" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("server_destino", context.server_destino);
                    paraList_tRunJob_1.add("--context_type " + "server_destino" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("server_origen", context.server_origen);
                    paraList_tRunJob_1.add("--context_type " + "server_origen" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("service_name_destino", context.service_name_destino);
                    paraList_tRunJob_1.add("--context_type " + "service_name_destino" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("service_name_origen", context.service_name_origen);
                    paraList_tRunJob_1.add("--context_type " + "service_name_origen" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("user_destino", context.user_destino);
                    paraList_tRunJob_1.add("--context_type " + "user_destino" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("user_origen", context.user_origen);
                    paraList_tRunJob_1.add("--context_type " + "user_origen" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("Cerrada", context.Cerrada);
                    paraList_tRunJob_1.add("--context_type " + "Cerrada" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("Editada", context.Editada);
                    paraList_tRunJob_1.add("--context_type " + "Editada" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("Editando", context.Editando);
                    paraList_tRunJob_1.add("--context_type " + "Editando" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("Finalizada", context.Finalizada);
                    paraList_tRunJob_1.add("--context_type " + "Finalizada" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("Iniciada", context.Iniciada);
                    paraList_tRunJob_1.add("--context_type " + "Iniciada" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("Manual", context.Manual);
                    paraList_tRunJob_1.add("--context_type " + "Manual" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("SinInniciar", context.SinInniciar);
                    paraList_tRunJob_1.add("--context_type " + "SinInniciar" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estActivo", context.estActivo);
                    paraList_tRunJob_1.add("--context_type " + "estActivo" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estCancelado", context.estCancelado);
                    paraList_tRunJob_1.add("--context_type " + "estCancelado" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estEnProceso", context.estEnProceso);
                    paraList_tRunJob_1.add("--context_type " + "estEnProceso" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estErrorArchivo", context.estErrorArchivo);
                    paraList_tRunJob_1.add("--context_type " + "estErrorArchivo" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estErrorProcesamiento", context.estErrorProcesamiento);
                    paraList_tRunJob_1.add("--context_type " + "estErrorProcesamiento" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estInactivo", context.estInactivo);
                    paraList_tRunJob_1.add("--context_type " + "estInactivo" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estPausado", context.estPausado);
                    paraList_tRunJob_1.add("--context_type " + "estPausado" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("estProcesado", context.estProcesado);
                    paraList_tRunJob_1.add("--context_type " + "estProcesado" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("EstValidado", context.EstValidado);
                    paraList_tRunJob_1.add("--context_type " + "EstValidado" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("archivoSalida", context.archivoSalida);
                    paraList_tRunJob_1.add("--context_type " + "archivoSalida" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("BANDERA_EJECUCION", context.BANDERA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "BANDERA_EJECUCION" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("DCARGUE_ID", context.DCARGUE_ID);
                    paraList_tRunJob_1.add("--context_type " + "DCARGUE_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("DESTINO", context.DESTINO);
                    paraList_tRunJob_1.add("--context_type " + "DESTINO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ESTADO_EXEC", context.ESTADO_EXEC);
                    paraList_tRunJob_1.add("--context_type " + "ESTADO_EXEC" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FECHA_EJECUCION", context.FECHA_EJECUCION);
                    paraList_tRunJob_1.add("--context_type " + "FECHA_EJECUCION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_FINAL", context.HORA_FINAL);
                    paraList_tRunJob_1.add("--context_type " + "HORA_FINAL" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("HORA_INICIO", context.HORA_INICIO);
                    paraList_tRunJob_1.add("--context_type " + "HORA_INICIO" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB", context.JOB);
                    paraList_tRunJob_1.add("--context_type " + "JOB" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("JOB_ID", context.JOB_ID);
                    paraList_tRunJob_1.add("--context_type " + "JOB_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("LOGS_ERROR", context.LOGS_ERROR);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_ERROR" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("LOGS_EXECUTION", context.LOGS_EXECUTION);
                    paraList_tRunJob_1.add("--context_type " + "LOGS_EXECUTION" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ORIGEN", context.ORIGEN);
                    paraList_tRunJob_1.add("--context_type " + "ORIGEN" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("RECEPCION_ID", context.RECEPCION_ID);
                    paraList_tRunJob_1.add("--context_type " + "RECEPCION_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("TJOB", context.TJOB);
                    paraList_tRunJob_1.add("--context_type " + "TJOB" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("EstadoArchivo", context.EstadoArchivo);
                    paraList_tRunJob_1.add("--context_type " + "EstadoArchivo" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("Fauditoria", context.Fauditoria);
                    paraList_tRunJob_1.add("--context_type " + "Fauditoria" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("HAUDITORIA_ID", context.HAUDITORIA_ID);
                    paraList_tRunJob_1.add("--context_type " + "HAUDITORIA_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("Nfactura", context.Nfactura);
                    paraList_tRunJob_1.add("--context_type " + "Nfactura" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("Sprefijo", context.Sprefijo);
                    paraList_tRunJob_1.add("--context_type " + "Sprefijo" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("SumaFactura", context.SumaFactura);
                    paraList_tRunJob_1.add("--context_type " + "SumaFactura" + "=" + "id_Double");
                    parentContextMap_tRunJob_1.put("SumaGlosas", context.SumaGlosas);
                    paraList_tRunJob_1.add("--context_type " + "SumaGlosas" + "=" + "id_Double");
                    parentContextMap_tRunJob_1.put("mail_Message", context.mail_Message);
                    paraList_tRunJob_1.add("--context_type " + "mail_Message" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Password", context.mail_Password);
                    paraList_tRunJob_1.add("--context_type " + "mail_Password" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SenderName", context.mail_SenderName);
                    paraList_tRunJob_1.add("--context_type " + "mail_SenderName" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Host", context.mail_SMTP_Host);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Host" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_SMTP_Port", context.mail_SMTP_Port);
                    paraList_tRunJob_1.add("--context_type " + "mail_SMTP_Port" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_Subject", context.mail_Subject);
                    paraList_tRunJob_1.add("--context_type " + "mail_Subject" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_To", context.mail_To);
                    paraList_tRunJob_1.add("--context_type " + "mail_To" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("mail_User", context.mail_User);
                    paraList_tRunJob_1.add("--context_type " + "mail_User" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AfiliacionDerechos", context.AfiliacionDerechos);
                    paraList_tRunJob_1.add("--context_type " + "AfiliacionDerechos" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("AfiliacionDerechosD", context.AfiliacionDerechosD);
                    paraList_tRunJob_1.add("--context_type " + "AfiliacionDerechosD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AfiliacionInactiva", context.AfiliacionInactiva);
                    paraList_tRunJob_1.add("--context_type " + "AfiliacionInactiva" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("AfiliacionInactivaD", context.AfiliacionInactivaD);
                    paraList_tRunJob_1.add("--context_type " + "AfiliacionInactivaD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AutorizacionCobrado", context.AutorizacionCobrado);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionCobrado" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("AutorizacionCobradoD", context.AutorizacionCobradoD);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionCobradoD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AutorizacionCups", context.AutorizacionCups);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionCups" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("AutorizacionCupsD", context.AutorizacionCupsD);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionCupsD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AutorizacionNoExiste", context.AutorizacionNoExiste);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionNoExiste" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("AutorizacionNoExisteD", context.AutorizacionNoExisteD);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionNoExisteD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AutorizacionPersona", context.AutorizacionPersona);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionPersona" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("AutorizacionPersonaD", context.AutorizacionPersonaD);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionPersonaD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AutorizacionPrestador", context.AutorizacionPrestador);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionPrestador" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("AutorizacionPrestadorD", context.AutorizacionPrestadorD);
                    paraList_tRunJob_1.add("--context_type " + "AutorizacionPrestadorD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("CantidadFormulada", context.CantidadFormulada);
                    paraList_tRunJob_1.add("--context_type " + "CantidadFormulada" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("CantidadFormuladaD", context.CantidadFormuladaD);
                    paraList_tRunJob_1.add("--context_type " + "CantidadFormuladaD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("FacturaAuditada", context.FacturaAuditada);
                    paraList_tRunJob_1.add("--context_type " + "FacturaAuditada" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("FacturaAuditadaD", context.FacturaAuditadaD);
                    paraList_tRunJob_1.add("--context_type " + "FacturaAuditadaD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("MedicamentoNoPactado", context.MedicamentoNoPactado);
                    paraList_tRunJob_1.add("--context_type " + "MedicamentoNoPactado" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("MedicamentoNoPactadoD", context.MedicamentoNoPactadoD);
                    paraList_tRunJob_1.add("--context_type " + "MedicamentoNoPactadoD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("PorcetajeConsumo", context.PorcetajeConsumo);
                    paraList_tRunJob_1.add("--context_type " + "PorcetajeConsumo" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("PorcetajeConsumoD", context.PorcetajeConsumoD);
                    paraList_tRunJob_1.add("--context_type " + "PorcetajeConsumoD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("SumaFacturas", context.SumaFacturas);
                    paraList_tRunJob_1.add("--context_type " + "SumaFacturas" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("SumaFacturasD", context.SumaFacturasD);
                    paraList_tRunJob_1.add("--context_type " + "SumaFacturasD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("TiempoEntrega", context.TiempoEntrega);
                    paraList_tRunJob_1.add("--context_type " + "TiempoEntrega" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("TiempoEntregaD", context.TiempoEntregaD);
                    paraList_tRunJob_1.add("--context_type " + "TiempoEntregaD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ValorDiferente", context.ValorDiferente);
                    paraList_tRunJob_1.add("--context_type " + "ValorDiferente" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("ValorDiferenteD", context.ValorDiferenteD);
                    paraList_tRunJob_1.add("--context_type " + "ValorDiferenteD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("ValorNoPactado", context.ValorNoPactado);
                    paraList_tRunJob_1.add("--context_type " + "ValorNoPactado" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("ValorNoPactadoD", context.ValorNoPactadoD);
                    paraList_tRunJob_1.add("--context_type " + "ValorNoPactadoD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("VidaUtil", context.VidaUtil);
                    paraList_tRunJob_1.add("--context_type " + "VidaUtil" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VidaUtilD", context.VidaUtilD);
                    paraList_tRunJob_1.add("--context_type " + "VidaUtilD" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("AUDITORIA_ID", context.AUDITORIA_ID);
                    paraList_tRunJob_1.add("--context_type " + "AUDITORIA_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("ETAPASNORMATIVIDAD_ID", context.ETAPASNORMATIVIDAD_ID);
                    paraList_tRunJob_1.add("--context_type " + "ETAPASNORMATIVIDAD_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("FRADICADO", context.FRADICADO);
                    paraList_tRunJob_1.add("--context_type " + "FRADICADO" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("NORMATIVIDAD_ETAPA_ID", context.NORMATIVIDAD_ETAPA_ID);
                    paraList_tRunJob_1.add("--context_type " + "NORMATIVIDAD_ETAPA_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("NORMATIVIDAD_GLOSA_ID", context.NORMATIVIDAD_GLOSA_ID);
                    paraList_tRunJob_1.add("--context_type " + "NORMATIVIDAD_GLOSA_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("SUMATORIA", context.SUMATORIA);
                    paraList_tRunJob_1.add("--context_type " + "SUMATORIA" + "=" + "id_Double");
                    parentContextMap_tRunJob_1.put("SUMATORIA_FACTURA", context.SUMATORIA_FACTURA);
                    paraList_tRunJob_1.add("--context_type " + "SUMATORIA_FACTURA" + "=" + "id_Double");
                    parentContextMap_tRunJob_1.put("UORG_ID", context.UORG_ID);
                    paraList_tRunJob_1.add("--context_type " + "UORG_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("USUARIOS_ID", context.USUARIOS_ID);
                    paraList_tRunJob_1.add("--context_type " + "USUARIOS_ID" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("VIDA_UTIL", context.VIDA_UTIL);
                    paraList_tRunJob_1.add("--context_type " + "VIDA_UTIL" + "=" + "id_Integer");
                    parentContextMap_tRunJob_1.put("vFechaFinContrato", context.vFechaFinContrato);
                    paraList_tRunJob_1.add("--context_type " + "vFechaFinContrato" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("vFechaIniContrato", context.vFechaIniContrato);
                    paraList_tRunJob_1.add("--context_type " + "vFechaIniContrato" + "=" + "id_Date");
                    parentContextMap_tRunJob_1.put("vIntermediacionDisp", context.vIntermediacionDisp);
                    paraList_tRunJob_1.add("--context_type " + "vIntermediacionDisp" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("vIntermediacionSum", context.vIntermediacionSum);
                    paraList_tRunJob_1.add("--context_type " + "vIntermediacionSum" + "=" + "id_BigDecimal");
                    parentContextMap_tRunJob_1.put("vTipificacion", context.vTipificacion);
                    paraList_tRunJob_1.add("--context_type " + "vTipificacion" + "=" + "id_String");
                    parentContextMap_tRunJob_1.put("vTipoArchivoSigla", context.vTipoArchivoSigla);
                    paraList_tRunJob_1.add("--context_type " + "vTipoArchivoSigla" + "=" + "id_String");
                        }
                    public void transmitAllContext() {
                        transmitContext_0();
                    }
            }
            new ContextProcessor_tRunJob_1().transmitAllContext();
		java.util.Enumeration<?> propertyNames_tRunJob_1 = context.propertyNames();
		while (propertyNames_tRunJob_1.hasMoreElements()) {
			String key_tRunJob_1 = (String) propertyNames_tRunJob_1.nextElement();
			Object value_tRunJob_1 = (Object) context.get(key_tRunJob_1);
			if(value_tRunJob_1!=null) {  
				
					paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + value_tRunJob_1);
					
			} else {
				paraList_tRunJob_1.add("--context_param " + key_tRunJob_1 + "=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
			}
			
		}
		

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row56.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row56.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row56.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row56.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row56.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = row56.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
		acm_control_auditoria.mail_0_1.Mail childJob_tRunJob_1 = new acm_control_auditoria.mail_0_1.Mail();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    ((java.util.Map)threadLocal.get()).put("errorCode", childJob_tRunJob_1.getErrorCode());
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row55");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row56");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	


public static class row57Struct implements routines.system.IPersistableRow<row57Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_GlosasMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public BigDecimal ESTEXTDERECHOS_ID;

				public BigDecimal getESTEXTDERECHOS_ID () {
					return this.ESTEXTDERECHOS_ID;
				}

				public Boolean ESTEXTDERECHOS_IDIsNullable(){
				    return true;
				}
				public Boolean ESTEXTDERECHOS_IDIsKey(){
				    return false;
				}
				public Integer ESTEXTDERECHOS_IDLength(){
				    return null;
				}
				public Integer ESTEXTDERECHOS_IDPrecision(){
				    return null;
				}
				public String ESTEXTDERECHOS_IDDefault(){
				
					return null;
				
				}
				public String ESTEXTDERECHOS_IDComment(){
				
				    return "";
				
				}
				public String ESTEXTDERECHOS_IDPattern(){
				
					return "";
				
				}
				public String ESTEXTDERECHOS_IDOriginalDbColumnName(){
				
					return "ESTEXTDERECHOS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row57Struct other = (row57Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row57Struct other) {

		other.ID = this.ID;
	            other.ESTEXTDERECHOS_ID = this.ESTEXTDERECHOS_ID;
	            
	}

	public void copyKeysDataTo(row57Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_GlosasMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.ESTEXTDERECHOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTEXTDERECHOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTEXTDERECHOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",ESTEXTDERECHOS_ID="+String.valueOf(ESTEXTDERECHOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row57Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row57Struct row57 = new row57Struct();




	
	/**
	 * [tOracleOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_11", false);
		start_Hash.put("tOracleOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row57");
					}
				
		int tos_count_tOracleOutput_11 = 0;
		






        int updateKeyCount_tOracleOutput_11 = 1;
        if(updateKeyCount_tOracleOutput_11 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_11 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_11 = 0;
    int nb_line_update_tOracleOutput_11 = 0;
    int nb_line_inserted_tOracleOutput_11 = 0;
    int nb_line_deleted_tOracleOutput_11 = 0;
    int nb_line_rejected_tOracleOutput_11 = 0;

    int tmp_batchUpdateCount_tOracleOutput_11 = 0;

    int deletedCount_tOracleOutput_11=0;
    int updatedCount_tOracleOutput_11=0;
    int insertedCount_tOracleOutput_11=0;
    int rowsToCommitCount_tOracleOutput_11=0;
    int rejectedCount_tOracleOutput_11=0;

    boolean whetherReject_tOracleOutput_11 = false;

    java.sql.Connection conn_tOracleOutput_11 = null;

    //optional table
    String dbschema_tOracleOutput_11 = null;
    String tableName_tOracleOutput_11 = null;
                    String driverClass_tOracleOutput_11 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_11);
                String url_tOracleOutput_11 = null;
                    url_tOracleOutput_11 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_11 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_11 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_11 = decryptedPassword_tOracleOutput_11;
                dbschema_tOracleOutput_11 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_11 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_11.put("user",dbUser_tOracleOutput_11);
                    atnParamsPrope_tOracleOutput_11.put("password",dbPwd_tOracleOutput_11);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_11.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_11 = java.sql.DriverManager.getConnection(url_tOracleOutput_11, atnParamsPrope_tOracleOutput_11);
        resourceMap.put("conn_tOracleOutput_11", conn_tOracleOutput_11);
            conn_tOracleOutput_11.setAutoCommit(false);
            int commitEvery_tOracleOutput_11 = 10000;
            int commitCounter_tOracleOutput_11 = 0;
        int batchSize_tOracleOutput_11 = 10000;
        int batchSizeCounter_tOracleOutput_11=0;
        int count_tOracleOutput_11=0;

        if(dbschema_tOracleOutput_11 == null || dbschema_tOracleOutput_11.trim().length() == 0) {
            tableName_tOracleOutput_11 = ("ACM_RECEPCION");
        } else {
            tableName_tOracleOutput_11 = dbschema_tOracleOutput_11 + "." + ("ACM_RECEPCION");
        }
                String update_tOracleOutput_11 = "UPDATE " + tableName_tOracleOutput_11 + " SET ESTEXTDERECHOS_ID = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_11 = conn_tOracleOutput_11.prepareStatement(update_tOracleOutput_11);
                resourceMap.put("pstmt_tOracleOutput_11", pstmt_tOracleOutput_11);





 



/**
 * [tOracleOutput_11 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row57.ID = context.RECEPCION_ID;
    	            	        	            	
    	            		row57.ESTEXTDERECHOS_ID = new BigDecimal(1);
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row57"
						
						);
					}
					



        whetherReject_tOracleOutput_11 = false;
                    pstmt_tOracleOutput_11.setBigDecimal(1, row57.ESTEXTDERECHOS_ID);


                    pstmt_tOracleOutput_11.setBigDecimal(2 + count_tOracleOutput_11, row57.ID);

                pstmt_tOracleOutput_11.addBatch();
                nb_line_tOracleOutput_11++;
                batchSizeCounter_tOracleOutput_11++;
            if (batchSize_tOracleOutput_11 > 0 &&  batchSize_tOracleOutput_11 <= batchSizeCounter_tOracleOutput_11) {
                try {
                    pstmt_tOracleOutput_11.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
			        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
			    	String errormessage_tOracleOutput_11;
					if (ne_tOracleOutput_11 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
						errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
					}else{
						errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_11);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                    updatedCount_tOracleOutput_11
                += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                batchSizeCounter_tOracleOutput_11 = 0;
            }
                commitCounter_tOracleOutput_11++;
                if(commitEvery_tOracleOutput_11 <= commitCounter_tOracleOutput_11) {
                    if(batchSizeCounter_tOracleOutput_11 > 0) {
                        try {
                            pstmt_tOracleOutput_11.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
					        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
					    	String errormessage_tOracleOutput_11;
							if (ne_tOracleOutput_11 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
								errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
							}else{
								errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_11);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
                            updatedCount_tOracleOutput_11
                        += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                        rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    }
                    conn_tOracleOutput_11.commit();
                    if(rowsToCommitCount_tOracleOutput_11 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_11 = 0;
                    }
                    commitCounter_tOracleOutput_11=0;
                    	batchSizeCounter_tOracleOutput_11=0;
                }

 


	tos_count_tOracleOutput_11++;

/**
 * [tOracleOutput_11 main ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	

 



/**
 * [tOracleOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_11 > 0) {
            try {
            	if (pstmt_tOracleOutput_11 != null) {
					
					pstmt_tOracleOutput_11.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_11){
globalMap.put("tOracleOutput_11_ERROR_MESSAGE",e_tOracleOutput_11.getMessage());
		        java.sql.SQLException ne_tOracleOutput_11 = e_tOracleOutput_11.getNextException(),sqle_tOracleOutput_11=null;
		    	String errormessage_tOracleOutput_11;
				if (ne_tOracleOutput_11 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_11 = new java.sql.SQLException(e_tOracleOutput_11.getMessage() + "\ncaused by: " + ne_tOracleOutput_11.getMessage(), ne_tOracleOutput_11.getSQLState(), ne_tOracleOutput_11.getErrorCode(), ne_tOracleOutput_11);
					errormessage_tOracleOutput_11 = sqle_tOracleOutput_11.getMessage();
				}else{
					errormessage_tOracleOutput_11 = e_tOracleOutput_11.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_11);
            	
        	}
        	if (pstmt_tOracleOutput_11 != null) {
            	tmp_batchUpdateCount_tOracleOutput_11 = pstmt_tOracleOutput_11.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_11
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
				rowsToCommitCount_tOracleOutput_11 += (tmp_batchUpdateCount_tOracleOutput_11!=-1?tmp_batchUpdateCount_tOracleOutput_11:0);
            }
        }
        if(pstmt_tOracleOutput_11 != null) {
			
				pstmt_tOracleOutput_11.close();
				resourceMap.remove("pstmt_tOracleOutput_11");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_11", true);
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
		}
		conn_tOracleOutput_11.commit();
		if(commitCounter_tOracleOutput_11 > 0 && rowsToCommitCount_tOracleOutput_11 != 0) {
			
			rowsToCommitCount_tOracleOutput_11 = 0;
		}
		commitCounter_tOracleOutput_11 = 0;
		
		
		conn_tOracleOutput_11 .close();
		
		resourceMap.put("finish_tOracleOutput_11", true);
   	

	
	nb_line_deleted_tOracleOutput_11=nb_line_deleted_tOracleOutput_11+ deletedCount_tOracleOutput_11;
	nb_line_update_tOracleOutput_11=nb_line_update_tOracleOutput_11 + updatedCount_tOracleOutput_11;
	nb_line_inserted_tOracleOutput_11=nb_line_inserted_tOracleOutput_11 + insertedCount_tOracleOutput_11;
	nb_line_rejected_tOracleOutput_11=nb_line_rejected_tOracleOutput_11 + rejectedCount_tOracleOutput_11;
	
        globalMap.put("tOracleOutput_11_NB_LINE",nb_line_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_UPDATED",nb_line_update_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_11);
        globalMap.put("tOracleOutput_11_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_11);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row57");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_11", true);
end_Hash.put("tOracleOutput_11", System.currentTimeMillis());




/**
 * [tOracleOutput_11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_11";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_11") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_11 = null;
                if ((pstmtToClose_tOracleOutput_11 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_11")) != null) {
                    pstmtToClose_tOracleOutput_11.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_11") == null){
            java.sql.Connection ctn_tOracleOutput_11 = null;
            if((ctn_tOracleOutput_11 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_11")) != null){
                try {
                    ctn_tOracleOutput_11.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_11) {
                    String errorMessage_tOracleOutput_11 = "failed to close the connection in tOracleOutput_11 :" + sqlEx_tOracleOutput_11.getMessage();
                    System.err.println(errorMessage_tOracleOutput_11);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final GlosasMedicamentos GlosasMedicamentosClass = new GlosasMedicamentos();

        int exitCode = GlosasMedicamentosClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = GlosasMedicamentos.class.getClassLoader().getResourceAsStream("acm_control_auditoria/glosasmedicamentos_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = GlosasMedicamentos.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("BANDERA", "id_Integer");
                        if(context.getStringValue("BANDERA") == null) {
                            context.BANDERA = null;
                        } else {
                            try{
                                context.BANDERA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("BANDERA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BANDERA", e.getMessage()));
                                context.BANDERA=null;
                            }
                        }
                        context.setContextType("bodega", "id_String");
                        if(context.getStringValue("bodega") == null) {
                            context.bodega = null;
                        } else {
                            context.bodega=(String) context.getProperty("bodega");
                        }
                        context.setContextType("cantidad", "id_String");
                        if(context.getStringValue("cantidad") == null) {
                            context.cantidad = null;
                        } else {
                            context.cantidad=(String) context.getProperty("cantidad");
                        }
                        context.setContextType("cantidad_despachada", "id_String");
                        if(context.getStringValue("cantidad_despachada") == null) {
                            context.cantidad_despachada = null;
                        } else {
                            context.cantidad_despachada=(String) context.getProperty("cantidad_despachada");
                        }
                        context.setContextType("cantidad_solicitada", "id_String");
                        if(context.getStringValue("cantidad_solicitada") == null) {
                            context.cantidad_solicitada = null;
                        } else {
                            context.cantidad_solicitada=(String) context.getProperty("cantidad_solicitada");
                        }
                        context.setContextType("codigo_autorizacion", "id_String");
                        if(context.getStringValue("codigo_autorizacion") == null) {
                            context.codigo_autorizacion = null;
                        } else {
                            context.codigo_autorizacion=(String) context.getProperty("codigo_autorizacion");
                        }
                        context.setContextType("codigo_cie10", "id_String");
                        if(context.getStringValue("codigo_cie10") == null) {
                            context.codigo_cie10 = null;
                        } else {
                            context.codigo_cie10=(String) context.getProperty("codigo_cie10");
                        }
                        context.setContextType("codigo_cum", "id_String");
                        if(context.getStringValue("codigo_cum") == null) {
                            context.codigo_cum = null;
                        } else {
                            context.codigo_cum=(String) context.getProperty("codigo_cum");
                        }
                        context.setContextType("codigo_cups", "id_String");
                        if(context.getStringValue("codigo_cups") == null) {
                            context.codigo_cups = null;
                        } else {
                            context.codigo_cups=(String) context.getProperty("codigo_cups");
                        }
                        context.setContextType("concentracion", "id_String");
                        if(context.getStringValue("concentracion") == null) {
                            context.concentracion = null;
                        } else {
                            context.concentracion=(String) context.getProperty("concentracion");
                        }
                        context.setContextType("confidencialidad", "id_String");
                        if(context.getStringValue("confidencialidad") == null) {
                            context.confidencialidad = null;
                        } else {
                            context.confidencialidad=(String) context.getProperty("confidencialidad");
                        }
                        context.setContextType("CONTRATOS_ID", "id_BigDecimal");
                        if(context.getStringValue("CONTRATOS_ID") == null) {
                            context.CONTRATOS_ID = null;
                        } else {
                            try{
                                context.CONTRATOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CONTRATOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CONTRATOS_ID", e.getMessage()));
                                context.CONTRATOS_ID=null;
                            }
                        }
                        context.setContextType("ctc_aprobado", "id_String");
                        if(context.getStringValue("ctc_aprobado") == null) {
                            context.ctc_aprobado = null;
                        } else {
                            context.ctc_aprobado=(String) context.getProperty("ctc_aprobado");
                        }
                        context.setContextType("descripcion_cie10", "id_String");
                        if(context.getStringValue("descripcion_cie10") == null) {
                            context.descripcion_cie10 = null;
                        } else {
                            context.descripcion_cie10=(String) context.getProperty("descripcion_cie10");
                        }
                        context.setContextType("descripcion_cups", "id_String");
                        if(context.getStringValue("descripcion_cups") == null) {
                            context.descripcion_cups = null;
                        } else {
                            context.descripcion_cups=(String) context.getProperty("descripcion_cups");
                        }
                        context.setContextType("documento", "id_String");
                        if(context.getStringValue("documento") == null) {
                            context.documento = null;
                        } else {
                            context.documento=(String) context.getProperty("documento");
                        }
                        context.setContextType("esm", "id_String");
                        if(context.getStringValue("esm") == null) {
                            context.esm = null;
                        } else {
                            context.esm=(String) context.getProperty("esm");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("EstAfiliacionActivo", "id_Integer");
                        if(context.getStringValue("EstAfiliacionActivo") == null) {
                            context.EstAfiliacionActivo = null;
                        } else {
                            try{
                                context.EstAfiliacionActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliacionActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliacionActivo", e.getMessage()));
                                context.EstAfiliacionActivo=null;
                            }
                        }
                        context.setContextType("EstAfiliacionProvisional", "id_Integer");
                        if(context.getStringValue("EstAfiliacionProvisional") == null) {
                            context.EstAfiliacionProvisional = null;
                        } else {
                            try{
                                context.EstAfiliacionProvisional=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliacionProvisional"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliacionProvisional", e.getMessage()));
                                context.EstAfiliacionProvisional=null;
                            }
                        }
                        context.setContextType("EstAfiliaicionInactivo", "id_Integer");
                        if(context.getStringValue("EstAfiliaicionInactivo") == null) {
                            context.EstAfiliaicionInactivo = null;
                        } else {
                            try{
                                context.EstAfiliaicionInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliaicionInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliaicionInactivo", e.getMessage()));
                                context.EstAfiliaicionInactivo=null;
                            }
                        }
                        context.setContextType("EstArchivoPCE", "id_BigDecimal");
                        if(context.getStringValue("EstArchivoPCE") == null) {
                            context.EstArchivoPCE = null;
                        } else {
                            try{
                                context.EstArchivoPCE=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("EstArchivoPCE"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstArchivoPCE", e.getMessage()));
                                context.EstArchivoPCE=null;
                            }
                        }
                        context.setContextType("fecha_autorizacion", "id_String");
                        if(context.getStringValue("fecha_autorizacion") == null) {
                            context.fecha_autorizacion = null;
                        } else {
                            context.fecha_autorizacion=(String) context.getProperty("fecha_autorizacion");
                        }
                        context.setContextType("fecha_dispensacion", "id_String");
                        if(context.getStringValue("fecha_dispensacion") == null) {
                            context.fecha_dispensacion = null;
                        } else {
                            context.fecha_dispensacion=(String) context.getProperty("fecha_dispensacion");
                        }
                        context.setContextType("fecha_egreso", "id_String");
                        if(context.getStringValue("fecha_egreso") == null) {
                            context.fecha_egreso = null;
                        } else {
                            context.fecha_egreso=(String) context.getProperty("fecha_egreso");
                        }
                        context.setContextType("fecha_factura", "id_String");
                        if(context.getStringValue("fecha_factura") == null) {
                            context.fecha_factura = null;
                        } else {
                            context.fecha_factura=(String) context.getProperty("fecha_factura");
                        }
                        context.setContextType("fecha_formulacion", "id_String");
                        if(context.getStringValue("fecha_formulacion") == null) {
                            context.fecha_formulacion = null;
                        } else {
                            context.fecha_formulacion=(String) context.getProperty("fecha_formulacion");
                        }
                        context.setContextType("fecha_ingreso", "id_String");
                        if(context.getStringValue("fecha_ingreso") == null) {
                            context.fecha_ingreso = null;
                        } else {
                            context.fecha_ingreso=(String) context.getProperty("fecha_ingreso");
                        }
                        context.setContextType("FECHA_NULL", "id_Date");
                        if(context.getStringValue("FECHA_NULL") == null) {
                            context.FECHA_NULL = null;
                        } else {
                            String context_FECHA_NULL_value = context.getProperty("FECHA_NULL");
                            try{
                                if (context_FECHA_NULL_value == null){
                                    context_FECHA_NULL_value = "";
                                }
                                int context_FECHA_NULL_pos = context_FECHA_NULL_value.indexOf(";");
                                String context_FECHA_NULL_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_NULL_pos > -1){
                                    context_FECHA_NULL_pattern = context_FECHA_NULL_value.substring(0, context_FECHA_NULL_pos);
                                    context_FECHA_NULL_value = context_FECHA_NULL_value.substring(context_FECHA_NULL_pos + 1);
                                }

                                context.FECHA_NULL=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_NULL_pattern).parse(context_FECHA_NULL_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_NULL_longValue = Long.valueOf(context_FECHA_NULL_value);
                                    context.FECHA_NULL = new java.util.Date(context_FECHA_NULL_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_NULL", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_NULL=null;
                                }
                            }
                        }
                        context.setContextType("fecha_registro", "id_String");
                        if(context.getStringValue("fecha_registro") == null) {
                            context.fecha_registro = null;
                        } else {
                            context.fecha_registro=(String) context.getProperty("fecha_registro");
                        }
                        context.setContextType("fecha_servicio", "id_String");
                        if(context.getStringValue("fecha_servicio") == null) {
                            context.fecha_servicio = null;
                        } else {
                            context.fecha_servicio=(String) context.getProperty("fecha_servicio");
                        }
                        context.setContextType("fecha_vencimiento", "id_String");
                        if(context.getStringValue("fecha_vencimiento") == null) {
                            context.fecha_vencimiento = null;
                        } else {
                            context.fecha_vencimiento=(String) context.getProperty("fecha_vencimiento");
                        }
                        context.setContextType("fuerza_militar", "id_String");
                        if(context.getStringValue("fuerza_militar") == null) {
                            context.fuerza_militar = null;
                        } else {
                            context.fuerza_militar=(String) context.getProperty("fuerza_militar");
                        }
                        context.setContextType("HORA", "id_Integer");
                        if(context.getStringValue("HORA") == null) {
                            context.HORA = null;
                        } else {
                            try{
                                context.HORA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HORA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HORA", e.getMessage()));
                                context.HORA=null;
                            }
                        }
                        context.setContextType("invima", "id_String");
                        if(context.getStringValue("invima") == null) {
                            context.invima = null;
                        } else {
                            context.invima=(String) context.getProperty("invima");
                        }
                        context.setContextType("laboratorio", "id_String");
                        if(context.getStringValue("laboratorio") == null) {
                            context.laboratorio = null;
                        } else {
                            context.laboratorio=(String) context.getProperty("laboratorio");
                        }
                        context.setContextType("lote", "id_String");
                        if(context.getStringValue("lote") == null) {
                            context.lote = null;
                        } else {
                            context.lote=(String) context.getProperty("lote");
                        }
                        context.setContextType("lugar_dispensacion", "id_String");
                        if(context.getStringValue("lugar_dispensacion") == null) {
                            context.lugar_dispensacion = null;
                        } else {
                            context.lugar_dispensacion=(String) context.getProperty("lugar_dispensacion");
                        }
                        context.setContextType("MEDCONTRATOS_ID", "id_BigDecimal");
                        if(context.getStringValue("MEDCONTRATOS_ID") == null) {
                            context.MEDCONTRATOS_ID = null;
                        } else {
                            try{
                                context.MEDCONTRATOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MEDCONTRATOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MEDCONTRATOS_ID", e.getMessage()));
                                context.MEDCONTRATOS_ID=null;
                            }
                        }
                        context.setContextType("Narchivo", "id_String");
                        if(context.getStringValue("Narchivo") == null) {
                            context.Narchivo = null;
                        } else {
                            context.Narchivo=(String) context.getProperty("Narchivo");
                        }
                        context.setContextType("nombre_medicamento", "id_String");
                        if(context.getStringValue("nombre_medicamento") == null) {
                            context.nombre_medicamento = null;
                        } else {
                            context.nombre_medicamento=(String) context.getProperty("nombre_medicamento");
                        }
                        context.setContextType("numero", "id_String");
                        if(context.getStringValue("numero") == null) {
                            context.numero = null;
                        } else {
                            context.numero=(String) context.getProperty("numero");
                        }
                        context.setContextType("numero_factura", "id_String");
                        if(context.getStringValue("numero_factura") == null) {
                            context.numero_factura = null;
                        } else {
                            context.numero_factura=(String) context.getProperty("numero_factura");
                        }
                        context.setContextType("numero_formula", "id_String");
                        if(context.getStringValue("numero_formula") == null) {
                            context.numero_formula = null;
                        } else {
                            context.numero_formula=(String) context.getProperty("numero_formula");
                        }
                        context.setContextType("observaciones", "id_String");
                        if(context.getStringValue("observaciones") == null) {
                            context.observaciones = null;
                        } else {
                            context.observaciones=(String) context.getProperty("observaciones");
                        }
                        context.setContextType("origen_formulacion", "id_String");
                        if(context.getStringValue("origen_formulacion") == null) {
                            context.origen_formulacion = null;
                        } else {
                            context.origen_formulacion=(String) context.getProperty("origen_formulacion");
                        }
                        context.setContextType("periodo", "id_String");
                        if(context.getStringValue("periodo") == null) {
                            context.periodo = null;
                        } else {
                            context.periodo=(String) context.getProperty("periodo");
                        }
                        context.setContextType("prefijo", "id_String");
                        if(context.getStringValue("prefijo") == null) {
                            context.prefijo = null;
                        } else {
                            context.prefijo=(String) context.getProperty("prefijo");
                        }
                        context.setContextType("presentacion", "id_String");
                        if(context.getStringValue("presentacion") == null) {
                            context.presentacion = null;
                        } else {
                            context.presentacion=(String) context.getProperty("presentacion");
                        }
                        context.setContextType("PRESTADOR", "id_BigDecimal");
                        if(context.getStringValue("PRESTADOR") == null) {
                            context.PRESTADOR = null;
                        } else {
                            try{
                                context.PRESTADOR=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PRESTADOR"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PRESTADOR", e.getMessage()));
                                context.PRESTADOR=null;
                            }
                        }
                        context.setContextType("producto_comercial", "id_String");
                        if(context.getStringValue("producto_comercial") == null) {
                            context.producto_comercial = null;
                        } else {
                            context.producto_comercial=(String) context.getProperty("producto_comercial");
                        }
                        context.setContextType("servicio", "id_String");
                        if(context.getStringValue("servicio") == null) {
                            context.servicio = null;
                        } else {
                            context.servicio=(String) context.getProperty("servicio");
                        }
                        context.setContextType("ssmp", "id_String");
                        if(context.getStringValue("ssmp") == null) {
                            context.ssmp = null;
                        } else {
                            context.ssmp=(String) context.getProperty("ssmp");
                        }
                        context.setContextType("subtotal", "id_String");
                        if(context.getStringValue("subtotal") == null) {
                            context.subtotal = null;
                        } else {
                            context.subtotal=(String) context.getProperty("subtotal");
                        }
                        context.setContextType("tipificacion", "id_String");
                        if(context.getStringValue("tipificacion") == null) {
                            context.tipificacion = null;
                        } else {
                            context.tipificacion=(String) context.getProperty("tipificacion");
                        }
                        context.setContextType("tipo", "id_String");
                        if(context.getStringValue("tipo") == null) {
                            context.tipo = null;
                        } else {
                            context.tipo=(String) context.getProperty("tipo");
                        }
                        context.setContextType("tipo_documento", "id_String");
                        if(context.getStringValue("tipo_documento") == null) {
                            context.tipo_documento = null;
                        } else {
                            context.tipo_documento=(String) context.getProperty("tipo_documento");
                        }
                        context.setContextType("tipo_formula", "id_String");
                        if(context.getStringValue("tipo_formula") == null) {
                            context.tipo_formula = null;
                        } else {
                            context.tipo_formula=(String) context.getProperty("tipo_formula");
                        }
                        context.setContextType("tipo_servicio", "id_String");
                        if(context.getStringValue("tipo_servicio") == null) {
                            context.tipo_servicio = null;
                        } else {
                            context.tipo_servicio=(String) context.getProperty("tipo_servicio");
                        }
                        context.setContextType("TipoRespuesta", "id_BigDecimal");
                        if(context.getStringValue("TipoRespuesta") == null) {
                            context.TipoRespuesta = null;
                        } else {
                            try{
                                context.TipoRespuesta=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TipoRespuesta"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TipoRespuesta", e.getMessage()));
                                context.TipoRespuesta=null;
                            }
                        }
                        context.setContextType("tirilla", "id_String");
                        if(context.getStringValue("tirilla") == null) {
                            context.tirilla = null;
                        } else {
                            context.tirilla=(String) context.getProperty("tirilla");
                        }
                        context.setContextType("unidad_medida", "id_String");
                        if(context.getStringValue("unidad_medida") == null) {
                            context.unidad_medida = null;
                        } else {
                            context.unidad_medida=(String) context.getProperty("unidad_medida");
                        }
                        context.setContextType("valor_gravado", "id_String");
                        if(context.getStringValue("valor_gravado") == null) {
                            context.valor_gravado = null;
                        } else {
                            context.valor_gravado=(String) context.getProperty("valor_gravado");
                        }
                        context.setContextType("valor_intermediacion", "id_String");
                        if(context.getStringValue("valor_intermediacion") == null) {
                            context.valor_intermediacion = null;
                        } else {
                            context.valor_intermediacion=(String) context.getProperty("valor_intermediacion");
                        }
                        context.setContextType("valor_total", "id_String");
                        if(context.getStringValue("valor_total") == null) {
                            context.valor_total = null;
                        } else {
                            context.valor_total=(String) context.getProperty("valor_total");
                        }
                        context.setContextType("valor_unitario", "id_String");
                        if(context.getStringValue("valor_unitario") == null) {
                            context.valor_unitario = null;
                        } else {
                            context.valor_unitario=(String) context.getProperty("valor_unitario");
                        }
                        context.setContextType("via_administracion", "id_String");
                        if(context.getStringValue("via_administracion") == null) {
                            context.via_administracion = null;
                        } else {
                            context.via_administracion=(String) context.getProperty("via_administracion");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("PathStorage", "id_String");
                        if(context.getStringValue("PathStorage") == null) {
                            context.PathStorage = null;
                        } else {
                            context.PathStorage=(String) context.getProperty("PathStorage");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("CargueArchivoId", "id_Integer");
                        if(context.getStringValue("CargueArchivoId") == null) {
                            context.CargueArchivoId = null;
                        } else {
                            try{
                                context.CargueArchivoId=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CargueArchivoId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CargueArchivoId", e.getMessage()));
                                context.CargueArchivoId=null;
                            }
                        }
                        context.setContextType("fechaArchivoErrores", "id_String");
                        if(context.getStringValue("fechaArchivoErrores") == null) {
                            context.fechaArchivoErrores = null;
                        } else {
                            context.fechaArchivoErrores=(String) context.getProperty("fechaArchivoErrores");
                        }
                        context.setContextType("nErroresArchivo", "id_Integer");
                        if(context.getStringValue("nErroresArchivo") == null) {
                            context.nErroresArchivo = null;
                        } else {
                            try{
                                context.nErroresArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("nErroresArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "nErroresArchivo", e.getMessage()));
                                context.nErroresArchivo=null;
                            }
                        }
                        context.setContextType("nRegArchivo", "id_Integer");
                        if(context.getStringValue("nRegArchivo") == null) {
                            context.nRegArchivo = null;
                        } else {
                            try{
                                context.nRegArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("nRegArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "nRegArchivo", e.getMessage()));
                                context.nRegArchivo=null;
                            }
                        }
                        context.setContextType("vArchivo_Id", "id_BigDecimal");
                        if(context.getStringValue("vArchivo_Id") == null) {
                            context.vArchivo_Id = null;
                        } else {
                            try{
                                context.vArchivo_Id=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vArchivo_Id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vArchivo_Id", e.getMessage()));
                                context.vArchivo_Id=null;
                            }
                        }
                        context.setContextType("vCantRegistros", "id_Integer");
                        if(context.getStringValue("vCantRegistros") == null) {
                            context.vCantRegistros = null;
                        } else {
                            try{
                                context.vCantRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vCantRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vCantRegistros", e.getMessage()));
                                context.vCantRegistros=null;
                            }
                        }
                        context.setContextType("vEstadoCarga", "id_String");
                        if(context.getStringValue("vEstadoCarga") == null) {
                            context.vEstadoCarga = null;
                        } else {
                            context.vEstadoCarga=(String) context.getProperty("vEstadoCarga");
                        }
                        context.setContextType("vIdTipoArchivo", "id_BigDecimal");
                        if(context.getStringValue("vIdTipoArchivo") == null) {
                            context.vIdTipoArchivo = null;
                        } else {
                            try{
                                context.vIdTipoArchivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIdTipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIdTipoArchivo", e.getMessage()));
                                context.vIdTipoArchivo=null;
                            }
                        }
                        context.setContextType("vNombreArchivo", "id_String");
                        if(context.getStringValue("vNombreArchivo") == null) {
                            context.vNombreArchivo = null;
                        } else {
                            context.vNombreArchivo=(String) context.getProperty("vNombreArchivo");
                        }
                        context.setContextType("vNombreTipoArchivo", "id_String");
                        if(context.getStringValue("vNombreTipoArchivo") == null) {
                            context.vNombreTipoArchivo = null;
                        } else {
                            context.vNombreTipoArchivo=(String) context.getProperty("vNombreTipoArchivo");
                        }
                        context.setContextType("vPeriodo", "id_Date");
                        if(context.getStringValue("vPeriodo") == null) {
                            context.vPeriodo = null;
                        } else {
                            String context_vPeriodo_value = context.getProperty("vPeriodo");
                            try{
                                if (context_vPeriodo_value == null){
                                    context_vPeriodo_value = "";
                                }
                                int context_vPeriodo_pos = context_vPeriodo_value.indexOf(";");
                                String context_vPeriodo_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vPeriodo_pos > -1){
                                    context_vPeriodo_pattern = context_vPeriodo_value.substring(0, context_vPeriodo_pos);
                                    context_vPeriodo_value = context_vPeriodo_value.substring(context_vPeriodo_pos + 1);
                                }

                                context.vPeriodo=(java.util.Date)(new java.text.SimpleDateFormat(context_vPeriodo_pattern).parse(context_vPeriodo_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vPeriodo_longValue = Long.valueOf(context_vPeriodo_value);
                                    context.vPeriodo = new java.util.Date(context_vPeriodo_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vPeriodo", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vPeriodo=null;
                                }
                            }
                        }
                        context.setContextType("vRecepcionId", "id_BigDecimal");
                        if(context.getStringValue("vRecepcionId") == null) {
                            context.vRecepcionId = null;
                        } else {
                            try{
                                context.vRecepcionId=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vRecepcionId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vRecepcionId", e.getMessage()));
                                context.vRecepcionId=null;
                            }
                        }
                        context.setContextType("vTipoArchivo", "id_String");
                        if(context.getStringValue("vTipoArchivo") == null) {
                            context.vTipoArchivo = null;
                        } else {
                            context.vTipoArchivo=(String) context.getProperty("vTipoArchivo");
                        }
                        context.setContextType("contador", "id_Integer");
                        if(context.getStringValue("contador") == null) {
                            context.contador = null;
                        } else {
                            try{
                                context.contador=routines.system.ParserUtils.parseTo_Integer (context.getProperty("contador"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "contador", e.getMessage()));
                                context.contador=null;
                            }
                        }
                        context.setContextType("eCIE10", "id_String");
                        if(context.getStringValue("eCIE10") == null) {
                            context.eCIE10 = null;
                        } else {
                            context.eCIE10=(String) context.getProperty("eCIE10");
                        }
                        context.setContextType("eComercial", "id_String");
                        if(context.getStringValue("eComercial") == null) {
                            context.eComercial = null;
                        } else {
                            context.eComercial=(String) context.getProperty("eComercial");
                        }
                        context.setContextType("eConcentracion", "id_String");
                        if(context.getStringValue("eConcentracion") == null) {
                            context.eConcentracion = null;
                        } else {
                            context.eConcentracion=(String) context.getProperty("eConcentracion");
                        }
                        }

                private void processContext_1() {
                        context.setContextType("eCTC", "id_String");
                        if(context.getStringValue("eCTC") == null) {
                            context.eCTC = null;
                        } else {
                            context.eCTC=(String) context.getProperty("eCTC");
                        }
                        context.setContextType("eCum", "id_String");
                        if(context.getStringValue("eCum") == null) {
                            context.eCum = null;
                        } else {
                            context.eCum=(String) context.getProperty("eCum");
                        }
                        context.setContextType("eCUPS", "id_String");
                        if(context.getStringValue("eCUPS") == null) {
                            context.eCUPS = null;
                        } else {
                            context.eCUPS=(String) context.getProperty("eCUPS");
                        }
                        context.setContextType("eESM", "id_String");
                        if(context.getStringValue("eESM") == null) {
                            context.eESM = null;
                        } else {
                            context.eESM=(String) context.getProperty("eESM");
                        }
                        context.setContextType("eGeneral", "id_String");
                        if(context.getStringValue("eGeneral") == null) {
                            context.eGeneral = null;
                        } else {
                            context.eGeneral=(String) context.getProperty("eGeneral");
                        }
                        context.setContextType("eGenerico", "id_String");
                        if(context.getStringValue("eGenerico") == null) {
                            context.eGenerico = null;
                        } else {
                            context.eGenerico=(String) context.getProperty("eGenerico");
                        }
                        context.setContextType("eInvima", "id_String");
                        if(context.getStringValue("eInvima") == null) {
                            context.eInvima = null;
                        } else {
                            context.eInvima=(String) context.getProperty("eInvima");
                        }
                        context.setContextType("eLaboratorio", "id_String");
                        if(context.getStringValue("eLaboratorio") == null) {
                            context.eLaboratorio = null;
                        } else {
                            context.eLaboratorio=(String) context.getProperty("eLaboratorio");
                        }
                        context.setContextType("ePersona", "id_String");
                        if(context.getStringValue("ePersona") == null) {
                            context.ePersona = null;
                        } else {
                            context.ePersona=(String) context.getProperty("ePersona");
                        }
                        context.setContextType("ePresentacion", "id_String");
                        if(context.getStringValue("ePresentacion") == null) {
                            context.ePresentacion = null;
                        } else {
                            context.ePresentacion=(String) context.getProperty("ePresentacion");
                        }
                        context.setContextType("eSSMP", "id_String");
                        if(context.getStringValue("eSSMP") == null) {
                            context.eSSMP = null;
                        } else {
                            context.eSSMP=(String) context.getProperty("eSSMP");
                        }
                        context.setContextType("eTipoFormula", "id_String");
                        if(context.getStringValue("eTipoFormula") == null) {
                            context.eTipoFormula = null;
                        } else {
                            context.eTipoFormula=(String) context.getProperty("eTipoFormula");
                        }
                        context.setContextType("eUmedida", "id_String");
                        if(context.getStringValue("eUmedida") == null) {
                            context.eUmedida = null;
                        } else {
                            context.eUmedida=(String) context.getProperty("eUmedida");
                        }
                        context.setContextType("eViaAdministracion", "id_String");
                        if(context.getStringValue("eViaAdministracion") == null) {
                            context.eViaAdministracion = null;
                        } else {
                            context.eViaAdministracion=(String) context.getProperty("eViaAdministracion");
                        }
                        context.setContextType("code", "id_Integer");
                        if(context.getStringValue("code") == null) {
                            context.code = null;
                        } else {
                            try{
                                context.code=routines.system.ParserUtils.parseTo_Integer (context.getProperty("code"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "code", e.getMessage()));
                                context.code=null;
                            }
                        }
                        context.setContextType("context", "id_String");
                        if(context.getStringValue("context") == null) {
                            context.context = null;
                        } else {
                            context.context=(String) context.getProperty("context");
                        }
                        context.setContextType("job", "id_String");
                        if(context.getStringValue("job") == null) {
                            context.job = null;
                        } else {
                            context.job=(String) context.getProperty("job");
                        }
                        context.setContextType("message", "id_String");
                        if(context.getStringValue("message") == null) {
                            context.message = null;
                        } else {
                            context.message=(String) context.getProperty("message");
                        }
                        context.setContextType("moment", "id_Date");
                        if(context.getStringValue("moment") == null) {
                            context.moment = null;
                        } else {
                            String context_moment_value = context.getProperty("moment");
                            try{
                                if (context_moment_value == null){
                                    context_moment_value = "";
                                }
                                int context_moment_pos = context_moment_value.indexOf(";");
                                String context_moment_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_moment_pos > -1){
                                    context_moment_pattern = context_moment_value.substring(0, context_moment_pos);
                                    context_moment_value = context_moment_value.substring(context_moment_pos + 1);
                                }

                                context.moment=(java.util.Date)(new java.text.SimpleDateFormat(context_moment_pattern).parse(context_moment_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_moment_longValue = Long.valueOf(context_moment_value);
                                    context.moment = new java.util.Date(context_moment_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "moment", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.moment=null;
                                }
                            }
                        }
                        context.setContextType("origen", "id_String");
                        if(context.getStringValue("origen") == null) {
                            context.origen = null;
                        } else {
                            context.origen=(String) context.getProperty("origen");
                        }
                        context.setContextType("priority", "id_Integer");
                        if(context.getStringValue("priority") == null) {
                            context.priority = null;
                        } else {
                            try{
                                context.priority=routines.system.ParserUtils.parseTo_Integer (context.getProperty("priority"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "priority", e.getMessage()));
                                context.priority=null;
                            }
                        }
                        context.setContextType("project", "id_String");
                        if(context.getStringValue("project") == null) {
                            context.project = null;
                        } else {
                            context.project=(String) context.getProperty("project");
                        }
                        context.setContextType("server_destino", "id_String");
                        if(context.getStringValue("server_destino") == null) {
                            context.server_destino = null;
                        } else {
                            context.server_destino=(String) context.getProperty("server_destino");
                        }
                        context.setContextType("server_origen", "id_String");
                        if(context.getStringValue("server_origen") == null) {
                            context.server_origen = null;
                        } else {
                            context.server_origen=(String) context.getProperty("server_origen");
                        }
                        context.setContextType("service_name_destino", "id_String");
                        if(context.getStringValue("service_name_destino") == null) {
                            context.service_name_destino = null;
                        } else {
                            context.service_name_destino=(String) context.getProperty("service_name_destino");
                        }
                        context.setContextType("service_name_origen", "id_String");
                        if(context.getStringValue("service_name_origen") == null) {
                            context.service_name_origen = null;
                        } else {
                            context.service_name_origen=(String) context.getProperty("service_name_origen");
                        }
                        context.setContextType("user_destino", "id_String");
                        if(context.getStringValue("user_destino") == null) {
                            context.user_destino = null;
                        } else {
                            context.user_destino=(String) context.getProperty("user_destino");
                        }
                        context.setContextType("user_origen", "id_String");
                        if(context.getStringValue("user_origen") == null) {
                            context.user_origen = null;
                        } else {
                            context.user_origen=(String) context.getProperty("user_origen");
                        }
                        context.setContextType("Cerrada", "id_BigDecimal");
                        if(context.getStringValue("Cerrada") == null) {
                            context.Cerrada = null;
                        } else {
                            try{
                                context.Cerrada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Cerrada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Cerrada", e.getMessage()));
                                context.Cerrada=null;
                            }
                        }
                        context.setContextType("Editada", "id_BigDecimal");
                        if(context.getStringValue("Editada") == null) {
                            context.Editada = null;
                        } else {
                            try{
                                context.Editada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Editada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Editada", e.getMessage()));
                                context.Editada=null;
                            }
                        }
                        context.setContextType("Editando", "id_BigDecimal");
                        if(context.getStringValue("Editando") == null) {
                            context.Editando = null;
                        } else {
                            try{
                                context.Editando=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Editando"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Editando", e.getMessage()));
                                context.Editando=null;
                            }
                        }
                        context.setContextType("Finalizada", "id_BigDecimal");
                        if(context.getStringValue("Finalizada") == null) {
                            context.Finalizada = null;
                        } else {
                            try{
                                context.Finalizada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Finalizada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Finalizada", e.getMessage()));
                                context.Finalizada=null;
                            }
                        }
                        context.setContextType("Iniciada", "id_BigDecimal");
                        if(context.getStringValue("Iniciada") == null) {
                            context.Iniciada = null;
                        } else {
                            try{
                                context.Iniciada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Iniciada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Iniciada", e.getMessage()));
                                context.Iniciada=null;
                            }
                        }
                        context.setContextType("Manual", "id_BigDecimal");
                        if(context.getStringValue("Manual") == null) {
                            context.Manual = null;
                        } else {
                            try{
                                context.Manual=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Manual"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Manual", e.getMessage()));
                                context.Manual=null;
                            }
                        }
                        context.setContextType("SinInniciar", "id_BigDecimal");
                        if(context.getStringValue("SinInniciar") == null) {
                            context.SinInniciar = null;
                        } else {
                            try{
                                context.SinInniciar=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SinInniciar"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SinInniciar", e.getMessage()));
                                context.SinInniciar=null;
                            }
                        }
                        context.setContextType("estActivo", "id_BigDecimal");
                        if(context.getStringValue("estActivo") == null) {
                            context.estActivo = null;
                        } else {
                            try{
                                context.estActivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estActivo", e.getMessage()));
                                context.estActivo=null;
                            }
                        }
                        context.setContextType("estCancelado", "id_BigDecimal");
                        if(context.getStringValue("estCancelado") == null) {
                            context.estCancelado = null;
                        } else {
                            try{
                                context.estCancelado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estCancelado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estCancelado", e.getMessage()));
                                context.estCancelado=null;
                            }
                        }
                        context.setContextType("estEnProceso", "id_BigDecimal");
                        if(context.getStringValue("estEnProceso") == null) {
                            context.estEnProceso = null;
                        } else {
                            try{
                                context.estEnProceso=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estEnProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estEnProceso", e.getMessage()));
                                context.estEnProceso=null;
                            }
                        }
                        context.setContextType("estErrorArchivo", "id_BigDecimal");
                        if(context.getStringValue("estErrorArchivo") == null) {
                            context.estErrorArchivo = null;
                        } else {
                            try{
                                context.estErrorArchivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estErrorArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estErrorArchivo", e.getMessage()));
                                context.estErrorArchivo=null;
                            }
                        }
                        context.setContextType("estErrorProcesamiento", "id_BigDecimal");
                        if(context.getStringValue("estErrorProcesamiento") == null) {
                            context.estErrorProcesamiento = null;
                        } else {
                            try{
                                context.estErrorProcesamiento=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estErrorProcesamiento"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estErrorProcesamiento", e.getMessage()));
                                context.estErrorProcesamiento=null;
                            }
                        }
                        context.setContextType("estInactivo", "id_BigDecimal");
                        if(context.getStringValue("estInactivo") == null) {
                            context.estInactivo = null;
                        } else {
                            try{
                                context.estInactivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estInactivo", e.getMessage()));
                                context.estInactivo=null;
                            }
                        }
                        context.setContextType("estPausado", "id_BigDecimal");
                        if(context.getStringValue("estPausado") == null) {
                            context.estPausado = null;
                        } else {
                            try{
                                context.estPausado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estPausado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estPausado", e.getMessage()));
                                context.estPausado=null;
                            }
                        }
                        context.setContextType("estProcesado", "id_BigDecimal");
                        if(context.getStringValue("estProcesado") == null) {
                            context.estProcesado = null;
                        } else {
                            try{
                                context.estProcesado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estProcesado", e.getMessage()));
                                context.estProcesado=null;
                            }
                        }
                        context.setContextType("EstValidado", "id_BigDecimal");
                        if(context.getStringValue("EstValidado") == null) {
                            context.EstValidado = null;
                        } else {
                            try{
                                context.EstValidado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("EstValidado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstValidado", e.getMessage()));
                                context.EstValidado=null;
                            }
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("BANDERA_EJECUCION", "id_Integer");
                        if(context.getStringValue("BANDERA_EJECUCION") == null) {
                            context.BANDERA_EJECUCION = null;
                        } else {
                            try{
                                context.BANDERA_EJECUCION=routines.system.ParserUtils.parseTo_Integer (context.getProperty("BANDERA_EJECUCION"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BANDERA_EJECUCION", e.getMessage()));
                                context.BANDERA_EJECUCION=null;
                            }
                        }
                        context.setContextType("DCARGUE_ID", "id_BigDecimal");
                        if(context.getStringValue("DCARGUE_ID") == null) {
                            context.DCARGUE_ID = null;
                        } else {
                            try{
                                context.DCARGUE_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("DCARGUE_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "DCARGUE_ID", e.getMessage()));
                                context.DCARGUE_ID=null;
                            }
                        }
                        context.setContextType("DESTINO", "id_String");
                        if(context.getStringValue("DESTINO") == null) {
                            context.DESTINO = null;
                        } else {
                            context.DESTINO=(String) context.getProperty("DESTINO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("JOB_ID", "id_BigDecimal");
                        if(context.getStringValue("JOB_ID") == null) {
                            context.JOB_ID = null;
                        } else {
                            try{
                                context.JOB_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("JOB_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "JOB_ID", e.getMessage()));
                                context.JOB_ID=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RECEPCION_ID", "id_BigDecimal");
                        if(context.getStringValue("RECEPCION_ID") == null) {
                            context.RECEPCION_ID = null;
                        } else {
                            try{
                                context.RECEPCION_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("RECEPCION_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "RECEPCION_ID", e.getMessage()));
                                context.RECEPCION_ID=null;
                            }
                        }
                        context.setContextType("TJOB", "id_Integer");
                        if(context.getStringValue("TJOB") == null) {
                            context.TJOB = null;
                        } else {
                            try{
                                context.TJOB=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TJOB"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TJOB", e.getMessage()));
                                context.TJOB=null;
                            }
                        }
                        context.setContextType("EstadoArchivo", "id_Integer");
                        if(context.getStringValue("EstadoArchivo") == null) {
                            context.EstadoArchivo = null;
                        } else {
                            try{
                                context.EstadoArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstadoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstadoArchivo", e.getMessage()));
                                context.EstadoArchivo=null;
                            }
                        }
                        context.setContextType("Fauditoria", "id_Date");
                        if(context.getStringValue("Fauditoria") == null) {
                            context.Fauditoria = null;
                        } else {
                            String context_Fauditoria_value = context.getProperty("Fauditoria");
                            try{
                                if (context_Fauditoria_value == null){
                                    context_Fauditoria_value = "";
                                }
                                int context_Fauditoria_pos = context_Fauditoria_value.indexOf(";");
                                String context_Fauditoria_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_Fauditoria_pos > -1){
                                    context_Fauditoria_pattern = context_Fauditoria_value.substring(0, context_Fauditoria_pos);
                                    context_Fauditoria_value = context_Fauditoria_value.substring(context_Fauditoria_pos + 1);
                                }

                                context.Fauditoria=(java.util.Date)(new java.text.SimpleDateFormat(context_Fauditoria_pattern).parse(context_Fauditoria_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_Fauditoria_longValue = Long.valueOf(context_Fauditoria_value);
                                    context.Fauditoria = new java.util.Date(context_Fauditoria_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "Fauditoria", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.Fauditoria=null;
                                }
                            }
                        }
                        context.setContextType("HAUDITORIA_ID", "id_BigDecimal");
                        if(context.getStringValue("HAUDITORIA_ID") == null) {
                            context.HAUDITORIA_ID = null;
                        } else {
                            try{
                                context.HAUDITORIA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("HAUDITORIA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAUDITORIA_ID", e.getMessage()));
                                context.HAUDITORIA_ID=null;
                            }
                        }
                        context.setContextType("Nfactura", "id_String");
                        if(context.getStringValue("Nfactura") == null) {
                            context.Nfactura = null;
                        } else {
                            context.Nfactura=(String) context.getProperty("Nfactura");
                        }
                        context.setContextType("Sprefijo", "id_String");
                        if(context.getStringValue("Sprefijo") == null) {
                            context.Sprefijo = null;
                        } else {
                            context.Sprefijo=(String) context.getProperty("Sprefijo");
                        }
                        context.setContextType("SumaFactura", "id_Double");
                        if(context.getStringValue("SumaFactura") == null) {
                            context.SumaFactura = null;
                        } else {
                            try{
                                context.SumaFactura=routines.system.ParserUtils.parseTo_Double (context.getProperty("SumaFactura"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaFactura", e.getMessage()));
                                context.SumaFactura=null;
                            }
                        }
                        context.setContextType("SumaGlosas", "id_Double");
                        if(context.getStringValue("SumaGlosas") == null) {
                            context.SumaGlosas = null;
                        } else {
                            try{
                                context.SumaGlosas=routines.system.ParserUtils.parseTo_Double (context.getProperty("SumaGlosas"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaGlosas", e.getMessage()));
                                context.SumaGlosas=null;
                            }
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_String");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            context.mail_Password=(String) context.getProperty("mail_Password");
                        }
                        context.setContextType("mail_SenderName", "id_String");
                        if(context.getStringValue("mail_SenderName") == null) {
                            context.mail_SenderName = null;
                        } else {
                            context.mail_SenderName=(String) context.getProperty("mail_SenderName");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                        context.setContextType("AfiliacionDerechos", "id_BigDecimal");
                        if(context.getStringValue("AfiliacionDerechos") == null) {
                            context.AfiliacionDerechos = null;
                        } else {
                            try{
                                context.AfiliacionDerechos=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AfiliacionDerechos"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AfiliacionDerechos", e.getMessage()));
                                context.AfiliacionDerechos=null;
                            }
                        }
                        context.setContextType("AfiliacionDerechosD", "id_String");
                        if(context.getStringValue("AfiliacionDerechosD") == null) {
                            context.AfiliacionDerechosD = null;
                        } else {
                            context.AfiliacionDerechosD=(String) context.getProperty("AfiliacionDerechosD");
                        }
                        context.setContextType("AfiliacionInactiva", "id_BigDecimal");
                        if(context.getStringValue("AfiliacionInactiva") == null) {
                            context.AfiliacionInactiva = null;
                        } else {
                            try{
                                context.AfiliacionInactiva=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AfiliacionInactiva"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AfiliacionInactiva", e.getMessage()));
                                context.AfiliacionInactiva=null;
                            }
                        }
                        context.setContextType("AfiliacionInactivaD", "id_String");
                        if(context.getStringValue("AfiliacionInactivaD") == null) {
                            context.AfiliacionInactivaD = null;
                        } else {
                            context.AfiliacionInactivaD=(String) context.getProperty("AfiliacionInactivaD");
                        }
                        context.setContextType("AutorizacionCobrado", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionCobrado") == null) {
                            context.AutorizacionCobrado = null;
                        } else {
                            try{
                                context.AutorizacionCobrado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionCobrado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionCobrado", e.getMessage()));
                                context.AutorizacionCobrado=null;
                            }
                        }
                        context.setContextType("AutorizacionCobradoD", "id_String");
                        if(context.getStringValue("AutorizacionCobradoD") == null) {
                            context.AutorizacionCobradoD = null;
                        } else {
                            context.AutorizacionCobradoD=(String) context.getProperty("AutorizacionCobradoD");
                        }
                        context.setContextType("AutorizacionCups", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionCups") == null) {
                            context.AutorizacionCups = null;
                        } else {
                            try{
                                context.AutorizacionCups=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionCups"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionCups", e.getMessage()));
                                context.AutorizacionCups=null;
                            }
                        }
                        context.setContextType("AutorizacionCupsD", "id_String");
                        if(context.getStringValue("AutorizacionCupsD") == null) {
                            context.AutorizacionCupsD = null;
                        } else {
                            context.AutorizacionCupsD=(String) context.getProperty("AutorizacionCupsD");
                        }
                        context.setContextType("AutorizacionNoExiste", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionNoExiste") == null) {
                            context.AutorizacionNoExiste = null;
                        } else {
                            try{
                                context.AutorizacionNoExiste=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionNoExiste"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionNoExiste", e.getMessage()));
                                context.AutorizacionNoExiste=null;
                            }
                        }
                        context.setContextType("AutorizacionNoExisteD", "id_String");
                        if(context.getStringValue("AutorizacionNoExisteD") == null) {
                            context.AutorizacionNoExisteD = null;
                        } else {
                            context.AutorizacionNoExisteD=(String) context.getProperty("AutorizacionNoExisteD");
                        }
                        context.setContextType("AutorizacionPersona", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionPersona") == null) {
                            context.AutorizacionPersona = null;
                        } else {
                            try{
                                context.AutorizacionPersona=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionPersona"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionPersona", e.getMessage()));
                                context.AutorizacionPersona=null;
                            }
                        }
                        context.setContextType("AutorizacionPersonaD", "id_String");
                        if(context.getStringValue("AutorizacionPersonaD") == null) {
                            context.AutorizacionPersonaD = null;
                        } else {
                            context.AutorizacionPersonaD=(String) context.getProperty("AutorizacionPersonaD");
                        }
                        context.setContextType("AutorizacionPrestador", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionPrestador") == null) {
                            context.AutorizacionPrestador = null;
                        } else {
                            try{
                                context.AutorizacionPrestador=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionPrestador"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionPrestador", e.getMessage()));
                                context.AutorizacionPrestador=null;
                            }
                        }
                        context.setContextType("AutorizacionPrestadorD", "id_String");
                        if(context.getStringValue("AutorizacionPrestadorD") == null) {
                            context.AutorizacionPrestadorD = null;
                        } else {
                            context.AutorizacionPrestadorD=(String) context.getProperty("AutorizacionPrestadorD");
                        }
                        context.setContextType("CantidadFormulada", "id_BigDecimal");
                        if(context.getStringValue("CantidadFormulada") == null) {
                            context.CantidadFormulada = null;
                        } else {
                            try{
                                context.CantidadFormulada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CantidadFormulada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CantidadFormulada", e.getMessage()));
                                context.CantidadFormulada=null;
                            }
                        }
                        context.setContextType("CantidadFormuladaD", "id_String");
                        if(context.getStringValue("CantidadFormuladaD") == null) {
                            context.CantidadFormuladaD = null;
                        } else {
                            context.CantidadFormuladaD=(String) context.getProperty("CantidadFormuladaD");
                        }
                        context.setContextType("FacturaAuditada", "id_BigDecimal");
                        if(context.getStringValue("FacturaAuditada") == null) {
                            context.FacturaAuditada = null;
                        } else {
                            try{
                                context.FacturaAuditada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("FacturaAuditada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "FacturaAuditada", e.getMessage()));
                                context.FacturaAuditada=null;
                            }
                        }
                        context.setContextType("FacturaAuditadaD", "id_String");
                        if(context.getStringValue("FacturaAuditadaD") == null) {
                            context.FacturaAuditadaD = null;
                        } else {
                            context.FacturaAuditadaD=(String) context.getProperty("FacturaAuditadaD");
                        }
                        context.setContextType("MedicamentoNoPactado", "id_BigDecimal");
                        if(context.getStringValue("MedicamentoNoPactado") == null) {
                            context.MedicamentoNoPactado = null;
                        } else {
                            try{
                                context.MedicamentoNoPactado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MedicamentoNoPactado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MedicamentoNoPactado", e.getMessage()));
                                context.MedicamentoNoPactado=null;
                            }
                        }
                        context.setContextType("MedicamentoNoPactadoD", "id_String");
                        if(context.getStringValue("MedicamentoNoPactadoD") == null) {
                            context.MedicamentoNoPactadoD = null;
                        } else {
                            context.MedicamentoNoPactadoD=(String) context.getProperty("MedicamentoNoPactadoD");
                        }
                        context.setContextType("PorcetajeConsumo", "id_BigDecimal");
                        if(context.getStringValue("PorcetajeConsumo") == null) {
                            context.PorcetajeConsumo = null;
                        } else {
                            try{
                                context.PorcetajeConsumo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PorcetajeConsumo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PorcetajeConsumo", e.getMessage()));
                                context.PorcetajeConsumo=null;
                            }
                        }
                        context.setContextType("PorcetajeConsumoD", "id_String");
                        if(context.getStringValue("PorcetajeConsumoD") == null) {
                            context.PorcetajeConsumoD = null;
                        } else {
                            context.PorcetajeConsumoD=(String) context.getProperty("PorcetajeConsumoD");
                        }
                        context.setContextType("SumaFacturas", "id_BigDecimal");
                        if(context.getStringValue("SumaFacturas") == null) {
                            context.SumaFacturas = null;
                        } else {
                            try{
                                context.SumaFacturas=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SumaFacturas"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaFacturas", e.getMessage()));
                                context.SumaFacturas=null;
                            }
                        }
                        context.setContextType("SumaFacturasD", "id_String");
                        if(context.getStringValue("SumaFacturasD") == null) {
                            context.SumaFacturasD = null;
                        } else {
                            context.SumaFacturasD=(String) context.getProperty("SumaFacturasD");
                        }
                        context.setContextType("TiempoEntrega", "id_BigDecimal");
                        if(context.getStringValue("TiempoEntrega") == null) {
                            context.TiempoEntrega = null;
                        } else {
                            try{
                                context.TiempoEntrega=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TiempoEntrega"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TiempoEntrega", e.getMessage()));
                                context.TiempoEntrega=null;
                            }
                        }
                        context.setContextType("TiempoEntregaD", "id_String");
                        if(context.getStringValue("TiempoEntregaD") == null) {
                            context.TiempoEntregaD = null;
                        } else {
                            context.TiempoEntregaD=(String) context.getProperty("TiempoEntregaD");
                        }
                        }

                private void processContext_2() {
                        context.setContextType("ValorDiferente", "id_BigDecimal");
                        if(context.getStringValue("ValorDiferente") == null) {
                            context.ValorDiferente = null;
                        } else {
                            try{
                                context.ValorDiferente=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ValorDiferente"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ValorDiferente", e.getMessage()));
                                context.ValorDiferente=null;
                            }
                        }
                        context.setContextType("ValorDiferenteD", "id_String");
                        if(context.getStringValue("ValorDiferenteD") == null) {
                            context.ValorDiferenteD = null;
                        } else {
                            context.ValorDiferenteD=(String) context.getProperty("ValorDiferenteD");
                        }
                        context.setContextType("ValorNoPactado", "id_BigDecimal");
                        if(context.getStringValue("ValorNoPactado") == null) {
                            context.ValorNoPactado = null;
                        } else {
                            try{
                                context.ValorNoPactado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ValorNoPactado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ValorNoPactado", e.getMessage()));
                                context.ValorNoPactado=null;
                            }
                        }
                        context.setContextType("ValorNoPactadoD", "id_String");
                        if(context.getStringValue("ValorNoPactadoD") == null) {
                            context.ValorNoPactadoD = null;
                        } else {
                            context.ValorNoPactadoD=(String) context.getProperty("ValorNoPactadoD");
                        }
                        context.setContextType("VidaUtil", "id_BigDecimal");
                        if(context.getStringValue("VidaUtil") == null) {
                            context.VidaUtil = null;
                        } else {
                            try{
                                context.VidaUtil=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VidaUtil"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VidaUtil", e.getMessage()));
                                context.VidaUtil=null;
                            }
                        }
                        context.setContextType("VidaUtilD", "id_String");
                        if(context.getStringValue("VidaUtilD") == null) {
                            context.VidaUtilD = null;
                        } else {
                            context.VidaUtilD=(String) context.getProperty("VidaUtilD");
                        }
                        context.setContextType("AUDITORIA_ID", "id_BigDecimal");
                        if(context.getStringValue("AUDITORIA_ID") == null) {
                            context.AUDITORIA_ID = null;
                        } else {
                            try{
                                context.AUDITORIA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AUDITORIA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AUDITORIA_ID", e.getMessage()));
                                context.AUDITORIA_ID=null;
                            }
                        }
                        context.setContextType("ETAPASNORMATIVIDAD_ID", "id_BigDecimal");
                        if(context.getStringValue("ETAPASNORMATIVIDAD_ID") == null) {
                            context.ETAPASNORMATIVIDAD_ID = null;
                        } else {
                            try{
                                context.ETAPASNORMATIVIDAD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ETAPASNORMATIVIDAD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ETAPASNORMATIVIDAD_ID", e.getMessage()));
                                context.ETAPASNORMATIVIDAD_ID=null;
                            }
                        }
                        context.setContextType("FRADICADO", "id_Date");
                        if(context.getStringValue("FRADICADO") == null) {
                            context.FRADICADO = null;
                        } else {
                            String context_FRADICADO_value = context.getProperty("FRADICADO");
                            try{
                                if (context_FRADICADO_value == null){
                                    context_FRADICADO_value = "";
                                }
                                int context_FRADICADO_pos = context_FRADICADO_value.indexOf(";");
                                String context_FRADICADO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FRADICADO_pos > -1){
                                    context_FRADICADO_pattern = context_FRADICADO_value.substring(0, context_FRADICADO_pos);
                                    context_FRADICADO_value = context_FRADICADO_value.substring(context_FRADICADO_pos + 1);
                                }

                                context.FRADICADO=(java.util.Date)(new java.text.SimpleDateFormat(context_FRADICADO_pattern).parse(context_FRADICADO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FRADICADO_longValue = Long.valueOf(context_FRADICADO_value);
                                    context.FRADICADO = new java.util.Date(context_FRADICADO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FRADICADO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FRADICADO=null;
                                }
                            }
                        }
                        context.setContextType("NORMATIVIDAD_ETAPA_ID", "id_BigDecimal");
                        if(context.getStringValue("NORMATIVIDAD_ETAPA_ID") == null) {
                            context.NORMATIVIDAD_ETAPA_ID = null;
                        } else {
                            try{
                                context.NORMATIVIDAD_ETAPA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("NORMATIVIDAD_ETAPA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NORMATIVIDAD_ETAPA_ID", e.getMessage()));
                                context.NORMATIVIDAD_ETAPA_ID=null;
                            }
                        }
                        context.setContextType("NORMATIVIDAD_GLOSA_ID", "id_BigDecimal");
                        if(context.getStringValue("NORMATIVIDAD_GLOSA_ID") == null) {
                            context.NORMATIVIDAD_GLOSA_ID = null;
                        } else {
                            try{
                                context.NORMATIVIDAD_GLOSA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("NORMATIVIDAD_GLOSA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NORMATIVIDAD_GLOSA_ID", e.getMessage()));
                                context.NORMATIVIDAD_GLOSA_ID=null;
                            }
                        }
                        context.setContextType("SUMATORIA", "id_Double");
                        if(context.getStringValue("SUMATORIA") == null) {
                            context.SUMATORIA = null;
                        } else {
                            try{
                                context.SUMATORIA=routines.system.ParserUtils.parseTo_Double (context.getProperty("SUMATORIA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SUMATORIA", e.getMessage()));
                                context.SUMATORIA=null;
                            }
                        }
                        context.setContextType("SUMATORIA_FACTURA", "id_Double");
                        if(context.getStringValue("SUMATORIA_FACTURA") == null) {
                            context.SUMATORIA_FACTURA = null;
                        } else {
                            try{
                                context.SUMATORIA_FACTURA=routines.system.ParserUtils.parseTo_Double (context.getProperty("SUMATORIA_FACTURA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SUMATORIA_FACTURA", e.getMessage()));
                                context.SUMATORIA_FACTURA=null;
                            }
                        }
                        context.setContextType("UORG_ID", "id_BigDecimal");
                        if(context.getStringValue("UORG_ID") == null) {
                            context.UORG_ID = null;
                        } else {
                            try{
                                context.UORG_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("UORG_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "UORG_ID", e.getMessage()));
                                context.UORG_ID=null;
                            }
                        }
                        context.setContextType("USUARIOS_ID", "id_BigDecimal");
                        if(context.getStringValue("USUARIOS_ID") == null) {
                            context.USUARIOS_ID = null;
                        } else {
                            try{
                                context.USUARIOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("USUARIOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "USUARIOS_ID", e.getMessage()));
                                context.USUARIOS_ID=null;
                            }
                        }
                        context.setContextType("VIDA_UTIL", "id_Integer");
                        if(context.getStringValue("VIDA_UTIL") == null) {
                            context.VIDA_UTIL = null;
                        } else {
                            try{
                                context.VIDA_UTIL=routines.system.ParserUtils.parseTo_Integer (context.getProperty("VIDA_UTIL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VIDA_UTIL", e.getMessage()));
                                context.VIDA_UTIL=null;
                            }
                        }
                        context.setContextType("vFechaFinContrato", "id_Date");
                        if(context.getStringValue("vFechaFinContrato") == null) {
                            context.vFechaFinContrato = null;
                        } else {
                            String context_vFechaFinContrato_value = context.getProperty("vFechaFinContrato");
                            try{
                                if (context_vFechaFinContrato_value == null){
                                    context_vFechaFinContrato_value = "";
                                }
                                int context_vFechaFinContrato_pos = context_vFechaFinContrato_value.indexOf(";");
                                String context_vFechaFinContrato_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vFechaFinContrato_pos > -1){
                                    context_vFechaFinContrato_pattern = context_vFechaFinContrato_value.substring(0, context_vFechaFinContrato_pos);
                                    context_vFechaFinContrato_value = context_vFechaFinContrato_value.substring(context_vFechaFinContrato_pos + 1);
                                }

                                context.vFechaFinContrato=(java.util.Date)(new java.text.SimpleDateFormat(context_vFechaFinContrato_pattern).parse(context_vFechaFinContrato_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vFechaFinContrato_longValue = Long.valueOf(context_vFechaFinContrato_value);
                                    context.vFechaFinContrato = new java.util.Date(context_vFechaFinContrato_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vFechaFinContrato", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vFechaFinContrato=null;
                                }
                            }
                        }
                        context.setContextType("vFechaIniContrato", "id_Date");
                        if(context.getStringValue("vFechaIniContrato") == null) {
                            context.vFechaIniContrato = null;
                        } else {
                            String context_vFechaIniContrato_value = context.getProperty("vFechaIniContrato");
                            try{
                                if (context_vFechaIniContrato_value == null){
                                    context_vFechaIniContrato_value = "";
                                }
                                int context_vFechaIniContrato_pos = context_vFechaIniContrato_value.indexOf(";");
                                String context_vFechaIniContrato_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vFechaIniContrato_pos > -1){
                                    context_vFechaIniContrato_pattern = context_vFechaIniContrato_value.substring(0, context_vFechaIniContrato_pos);
                                    context_vFechaIniContrato_value = context_vFechaIniContrato_value.substring(context_vFechaIniContrato_pos + 1);
                                }

                                context.vFechaIniContrato=(java.util.Date)(new java.text.SimpleDateFormat(context_vFechaIniContrato_pattern).parse(context_vFechaIniContrato_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vFechaIniContrato_longValue = Long.valueOf(context_vFechaIniContrato_value);
                                    context.vFechaIniContrato = new java.util.Date(context_vFechaIniContrato_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vFechaIniContrato", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vFechaIniContrato=null;
                                }
                            }
                        }
                        context.setContextType("vIntermediacionDisp", "id_BigDecimal");
                        if(context.getStringValue("vIntermediacionDisp") == null) {
                            context.vIntermediacionDisp = null;
                        } else {
                            try{
                                context.vIntermediacionDisp=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIntermediacionDisp"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIntermediacionDisp", e.getMessage()));
                                context.vIntermediacionDisp=null;
                            }
                        }
                        context.setContextType("vIntermediacionSum", "id_BigDecimal");
                        if(context.getStringValue("vIntermediacionSum") == null) {
                            context.vIntermediacionSum = null;
                        } else {
                            try{
                                context.vIntermediacionSum=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIntermediacionSum"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIntermediacionSum", e.getMessage()));
                                context.vIntermediacionSum=null;
                            }
                        }
                        context.setContextType("vTipificacion", "id_String");
                        if(context.getStringValue("vTipificacion") == null) {
                            context.vTipificacion = null;
                        } else {
                            context.vTipificacion=(String) context.getProperty("vTipificacion");
                        }
                        context.setContextType("vTipoArchivoSigla", "id_String");
                        if(context.getStringValue("vTipoArchivoSigla") == null) {
                            context.vTipoArchivoSigla = null;
                        } else {
                            context.vTipoArchivoSigla=(String) context.getProperty("vTipoArchivoSigla");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                        processContext_1();
                        processContext_2();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("BANDERA")) {
                context.BANDERA = (Integer) parentContextMap.get("BANDERA");
            }if (parentContextMap.containsKey("bodega")) {
                context.bodega = (String) parentContextMap.get("bodega");
            }if (parentContextMap.containsKey("cantidad")) {
                context.cantidad = (String) parentContextMap.get("cantidad");
            }if (parentContextMap.containsKey("cantidad_despachada")) {
                context.cantidad_despachada = (String) parentContextMap.get("cantidad_despachada");
            }if (parentContextMap.containsKey("cantidad_solicitada")) {
                context.cantidad_solicitada = (String) parentContextMap.get("cantidad_solicitada");
            }if (parentContextMap.containsKey("codigo_autorizacion")) {
                context.codigo_autorizacion = (String) parentContextMap.get("codigo_autorizacion");
            }if (parentContextMap.containsKey("codigo_cie10")) {
                context.codigo_cie10 = (String) parentContextMap.get("codigo_cie10");
            }if (parentContextMap.containsKey("codigo_cum")) {
                context.codigo_cum = (String) parentContextMap.get("codigo_cum");
            }if (parentContextMap.containsKey("codigo_cups")) {
                context.codigo_cups = (String) parentContextMap.get("codigo_cups");
            }if (parentContextMap.containsKey("concentracion")) {
                context.concentracion = (String) parentContextMap.get("concentracion");
            }if (parentContextMap.containsKey("confidencialidad")) {
                context.confidencialidad = (String) parentContextMap.get("confidencialidad");
            }if (parentContextMap.containsKey("CONTRATOS_ID")) {
                context.CONTRATOS_ID = (BigDecimal) parentContextMap.get("CONTRATOS_ID");
            }if (parentContextMap.containsKey("ctc_aprobado")) {
                context.ctc_aprobado = (String) parentContextMap.get("ctc_aprobado");
            }if (parentContextMap.containsKey("descripcion_cie10")) {
                context.descripcion_cie10 = (String) parentContextMap.get("descripcion_cie10");
            }if (parentContextMap.containsKey("descripcion_cups")) {
                context.descripcion_cups = (String) parentContextMap.get("descripcion_cups");
            }if (parentContextMap.containsKey("documento")) {
                context.documento = (String) parentContextMap.get("documento");
            }if (parentContextMap.containsKey("esm")) {
                context.esm = (String) parentContextMap.get("esm");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("EstAfiliacionActivo")) {
                context.EstAfiliacionActivo = (Integer) parentContextMap.get("EstAfiliacionActivo");
            }if (parentContextMap.containsKey("EstAfiliacionProvisional")) {
                context.EstAfiliacionProvisional = (Integer) parentContextMap.get("EstAfiliacionProvisional");
            }if (parentContextMap.containsKey("EstAfiliaicionInactivo")) {
                context.EstAfiliaicionInactivo = (Integer) parentContextMap.get("EstAfiliaicionInactivo");
            }if (parentContextMap.containsKey("EstArchivoPCE")) {
                context.EstArchivoPCE = (BigDecimal) parentContextMap.get("EstArchivoPCE");
            }if (parentContextMap.containsKey("fecha_autorizacion")) {
                context.fecha_autorizacion = (String) parentContextMap.get("fecha_autorizacion");
            }if (parentContextMap.containsKey("fecha_dispensacion")) {
                context.fecha_dispensacion = (String) parentContextMap.get("fecha_dispensacion");
            }if (parentContextMap.containsKey("fecha_egreso")) {
                context.fecha_egreso = (String) parentContextMap.get("fecha_egreso");
            }if (parentContextMap.containsKey("fecha_factura")) {
                context.fecha_factura = (String) parentContextMap.get("fecha_factura");
            }if (parentContextMap.containsKey("fecha_formulacion")) {
                context.fecha_formulacion = (String) parentContextMap.get("fecha_formulacion");
            }if (parentContextMap.containsKey("fecha_ingreso")) {
                context.fecha_ingreso = (String) parentContextMap.get("fecha_ingreso");
            }if (parentContextMap.containsKey("FECHA_NULL")) {
                context.FECHA_NULL = (java.util.Date) parentContextMap.get("FECHA_NULL");
            }if (parentContextMap.containsKey("fecha_registro")) {
                context.fecha_registro = (String) parentContextMap.get("fecha_registro");
            }if (parentContextMap.containsKey("fecha_servicio")) {
                context.fecha_servicio = (String) parentContextMap.get("fecha_servicio");
            }if (parentContextMap.containsKey("fecha_vencimiento")) {
                context.fecha_vencimiento = (String) parentContextMap.get("fecha_vencimiento");
            }if (parentContextMap.containsKey("fuerza_militar")) {
                context.fuerza_militar = (String) parentContextMap.get("fuerza_militar");
            }if (parentContextMap.containsKey("HORA")) {
                context.HORA = (Integer) parentContextMap.get("HORA");
            }if (parentContextMap.containsKey("invima")) {
                context.invima = (String) parentContextMap.get("invima");
            }if (parentContextMap.containsKey("laboratorio")) {
                context.laboratorio = (String) parentContextMap.get("laboratorio");
            }if (parentContextMap.containsKey("lote")) {
                context.lote = (String) parentContextMap.get("lote");
            }if (parentContextMap.containsKey("lugar_dispensacion")) {
                context.lugar_dispensacion = (String) parentContextMap.get("lugar_dispensacion");
            }if (parentContextMap.containsKey("MEDCONTRATOS_ID")) {
                context.MEDCONTRATOS_ID = (BigDecimal) parentContextMap.get("MEDCONTRATOS_ID");
            }if (parentContextMap.containsKey("Narchivo")) {
                context.Narchivo = (String) parentContextMap.get("Narchivo");
            }if (parentContextMap.containsKey("nombre_medicamento")) {
                context.nombre_medicamento = (String) parentContextMap.get("nombre_medicamento");
            }if (parentContextMap.containsKey("numero")) {
                context.numero = (String) parentContextMap.get("numero");
            }if (parentContextMap.containsKey("numero_factura")) {
                context.numero_factura = (String) parentContextMap.get("numero_factura");
            }if (parentContextMap.containsKey("numero_formula")) {
                context.numero_formula = (String) parentContextMap.get("numero_formula");
            }if (parentContextMap.containsKey("observaciones")) {
                context.observaciones = (String) parentContextMap.get("observaciones");
            }if (parentContextMap.containsKey("origen_formulacion")) {
                context.origen_formulacion = (String) parentContextMap.get("origen_formulacion");
            }if (parentContextMap.containsKey("periodo")) {
                context.periodo = (String) parentContextMap.get("periodo");
            }if (parentContextMap.containsKey("prefijo")) {
                context.prefijo = (String) parentContextMap.get("prefijo");
            }if (parentContextMap.containsKey("presentacion")) {
                context.presentacion = (String) parentContextMap.get("presentacion");
            }if (parentContextMap.containsKey("PRESTADOR")) {
                context.PRESTADOR = (BigDecimal) parentContextMap.get("PRESTADOR");
            }if (parentContextMap.containsKey("producto_comercial")) {
                context.producto_comercial = (String) parentContextMap.get("producto_comercial");
            }if (parentContextMap.containsKey("servicio")) {
                context.servicio = (String) parentContextMap.get("servicio");
            }if (parentContextMap.containsKey("ssmp")) {
                context.ssmp = (String) parentContextMap.get("ssmp");
            }if (parentContextMap.containsKey("subtotal")) {
                context.subtotal = (String) parentContextMap.get("subtotal");
            }if (parentContextMap.containsKey("tipificacion")) {
                context.tipificacion = (String) parentContextMap.get("tipificacion");
            }if (parentContextMap.containsKey("tipo")) {
                context.tipo = (String) parentContextMap.get("tipo");
            }if (parentContextMap.containsKey("tipo_documento")) {
                context.tipo_documento = (String) parentContextMap.get("tipo_documento");
            }if (parentContextMap.containsKey("tipo_formula")) {
                context.tipo_formula = (String) parentContextMap.get("tipo_formula");
            }if (parentContextMap.containsKey("tipo_servicio")) {
                context.tipo_servicio = (String) parentContextMap.get("tipo_servicio");
            }if (parentContextMap.containsKey("TipoRespuesta")) {
                context.TipoRespuesta = (BigDecimal) parentContextMap.get("TipoRespuesta");
            }if (parentContextMap.containsKey("tirilla")) {
                context.tirilla = (String) parentContextMap.get("tirilla");
            }if (parentContextMap.containsKey("unidad_medida")) {
                context.unidad_medida = (String) parentContextMap.get("unidad_medida");
            }if (parentContextMap.containsKey("valor_gravado")) {
                context.valor_gravado = (String) parentContextMap.get("valor_gravado");
            }if (parentContextMap.containsKey("valor_intermediacion")) {
                context.valor_intermediacion = (String) parentContextMap.get("valor_intermediacion");
            }if (parentContextMap.containsKey("valor_total")) {
                context.valor_total = (String) parentContextMap.get("valor_total");
            }if (parentContextMap.containsKey("valor_unitario")) {
                context.valor_unitario = (String) parentContextMap.get("valor_unitario");
            }if (parentContextMap.containsKey("via_administracion")) {
                context.via_administracion = (String) parentContextMap.get("via_administracion");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("PathStorage")) {
                context.PathStorage = (String) parentContextMap.get("PathStorage");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("CargueArchivoId")) {
                context.CargueArchivoId = (Integer) parentContextMap.get("CargueArchivoId");
            }if (parentContextMap.containsKey("fechaArchivoErrores")) {
                context.fechaArchivoErrores = (String) parentContextMap.get("fechaArchivoErrores");
            }if (parentContextMap.containsKey("nErroresArchivo")) {
                context.nErroresArchivo = (Integer) parentContextMap.get("nErroresArchivo");
            }if (parentContextMap.containsKey("nRegArchivo")) {
                context.nRegArchivo = (Integer) parentContextMap.get("nRegArchivo");
            }if (parentContextMap.containsKey("vArchivo_Id")) {
                context.vArchivo_Id = (BigDecimal) parentContextMap.get("vArchivo_Id");
            }if (parentContextMap.containsKey("vCantRegistros")) {
                context.vCantRegistros = (Integer) parentContextMap.get("vCantRegistros");
            }if (parentContextMap.containsKey("vEstadoCarga")) {
                context.vEstadoCarga = (String) parentContextMap.get("vEstadoCarga");
            }if (parentContextMap.containsKey("vIdTipoArchivo")) {
                context.vIdTipoArchivo = (BigDecimal) parentContextMap.get("vIdTipoArchivo");
            }if (parentContextMap.containsKey("vNombreArchivo")) {
                context.vNombreArchivo = (String) parentContextMap.get("vNombreArchivo");
            }if (parentContextMap.containsKey("vNombreTipoArchivo")) {
                context.vNombreTipoArchivo = (String) parentContextMap.get("vNombreTipoArchivo");
            }if (parentContextMap.containsKey("vPeriodo")) {
                context.vPeriodo = (java.util.Date) parentContextMap.get("vPeriodo");
            }if (parentContextMap.containsKey("vRecepcionId")) {
                context.vRecepcionId = (BigDecimal) parentContextMap.get("vRecepcionId");
            }if (parentContextMap.containsKey("vTipoArchivo")) {
                context.vTipoArchivo = (String) parentContextMap.get("vTipoArchivo");
            }if (parentContextMap.containsKey("contador")) {
                context.contador = (Integer) parentContextMap.get("contador");
            }if (parentContextMap.containsKey("eCIE10")) {
                context.eCIE10 = (String) parentContextMap.get("eCIE10");
            }if (parentContextMap.containsKey("eComercial")) {
                context.eComercial = (String) parentContextMap.get("eComercial");
            }if (parentContextMap.containsKey("eConcentracion")) {
                context.eConcentracion = (String) parentContextMap.get("eConcentracion");
            }if (parentContextMap.containsKey("eCTC")) {
                context.eCTC = (String) parentContextMap.get("eCTC");
            }if (parentContextMap.containsKey("eCum")) {
                context.eCum = (String) parentContextMap.get("eCum");
            }if (parentContextMap.containsKey("eCUPS")) {
                context.eCUPS = (String) parentContextMap.get("eCUPS");
            }if (parentContextMap.containsKey("eESM")) {
                context.eESM = (String) parentContextMap.get("eESM");
            }if (parentContextMap.containsKey("eGeneral")) {
                context.eGeneral = (String) parentContextMap.get("eGeneral");
            }if (parentContextMap.containsKey("eGenerico")) {
                context.eGenerico = (String) parentContextMap.get("eGenerico");
            }if (parentContextMap.containsKey("eInvima")) {
                context.eInvima = (String) parentContextMap.get("eInvima");
            }if (parentContextMap.containsKey("eLaboratorio")) {
                context.eLaboratorio = (String) parentContextMap.get("eLaboratorio");
            }if (parentContextMap.containsKey("ePersona")) {
                context.ePersona = (String) parentContextMap.get("ePersona");
            }if (parentContextMap.containsKey("ePresentacion")) {
                context.ePresentacion = (String) parentContextMap.get("ePresentacion");
            }if (parentContextMap.containsKey("eSSMP")) {
                context.eSSMP = (String) parentContextMap.get("eSSMP");
            }if (parentContextMap.containsKey("eTipoFormula")) {
                context.eTipoFormula = (String) parentContextMap.get("eTipoFormula");
            }if (parentContextMap.containsKey("eUmedida")) {
                context.eUmedida = (String) parentContextMap.get("eUmedida");
            }if (parentContextMap.containsKey("eViaAdministracion")) {
                context.eViaAdministracion = (String) parentContextMap.get("eViaAdministracion");
            }if (parentContextMap.containsKey("code")) {
                context.code = (Integer) parentContextMap.get("code");
            }if (parentContextMap.containsKey("context")) {
                context.context = (String) parentContextMap.get("context");
            }if (parentContextMap.containsKey("job")) {
                context.job = (String) parentContextMap.get("job");
            }if (parentContextMap.containsKey("message")) {
                context.message = (String) parentContextMap.get("message");
            }if (parentContextMap.containsKey("moment")) {
                context.moment = (java.util.Date) parentContextMap.get("moment");
            }if (parentContextMap.containsKey("origen")) {
                context.origen = (String) parentContextMap.get("origen");
            }if (parentContextMap.containsKey("priority")) {
                context.priority = (Integer) parentContextMap.get("priority");
            }if (parentContextMap.containsKey("project")) {
                context.project = (String) parentContextMap.get("project");
            }if (parentContextMap.containsKey("server_destino")) {
                context.server_destino = (String) parentContextMap.get("server_destino");
            }if (parentContextMap.containsKey("server_origen")) {
                context.server_origen = (String) parentContextMap.get("server_origen");
            }if (parentContextMap.containsKey("service_name_destino")) {
                context.service_name_destino = (String) parentContextMap.get("service_name_destino");
            }if (parentContextMap.containsKey("service_name_origen")) {
                context.service_name_origen = (String) parentContextMap.get("service_name_origen");
            }if (parentContextMap.containsKey("user_destino")) {
                context.user_destino = (String) parentContextMap.get("user_destino");
            }if (parentContextMap.containsKey("user_origen")) {
                context.user_origen = (String) parentContextMap.get("user_origen");
            }if (parentContextMap.containsKey("Cerrada")) {
                context.Cerrada = (BigDecimal) parentContextMap.get("Cerrada");
            }if (parentContextMap.containsKey("Editada")) {
                context.Editada = (BigDecimal) parentContextMap.get("Editada");
            }if (parentContextMap.containsKey("Editando")) {
                context.Editando = (BigDecimal) parentContextMap.get("Editando");
            }if (parentContextMap.containsKey("Finalizada")) {
                context.Finalizada = (BigDecimal) parentContextMap.get("Finalizada");
            }if (parentContextMap.containsKey("Iniciada")) {
                context.Iniciada = (BigDecimal) parentContextMap.get("Iniciada");
            }if (parentContextMap.containsKey("Manual")) {
                context.Manual = (BigDecimal) parentContextMap.get("Manual");
            }if (parentContextMap.containsKey("SinInniciar")) {
                context.SinInniciar = (BigDecimal) parentContextMap.get("SinInniciar");
            }if (parentContextMap.containsKey("estActivo")) {
                context.estActivo = (BigDecimal) parentContextMap.get("estActivo");
            }if (parentContextMap.containsKey("estCancelado")) {
                context.estCancelado = (BigDecimal) parentContextMap.get("estCancelado");
            }if (parentContextMap.containsKey("estEnProceso")) {
                context.estEnProceso = (BigDecimal) parentContextMap.get("estEnProceso");
            }if (parentContextMap.containsKey("estErrorArchivo")) {
                context.estErrorArchivo = (BigDecimal) parentContextMap.get("estErrorArchivo");
            }if (parentContextMap.containsKey("estErrorProcesamiento")) {
                context.estErrorProcesamiento = (BigDecimal) parentContextMap.get("estErrorProcesamiento");
            }if (parentContextMap.containsKey("estInactivo")) {
                context.estInactivo = (BigDecimal) parentContextMap.get("estInactivo");
            }if (parentContextMap.containsKey("estPausado")) {
                context.estPausado = (BigDecimal) parentContextMap.get("estPausado");
            }if (parentContextMap.containsKey("estProcesado")) {
                context.estProcesado = (BigDecimal) parentContextMap.get("estProcesado");
            }if (parentContextMap.containsKey("EstValidado")) {
                context.EstValidado = (BigDecimal) parentContextMap.get("EstValidado");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("BANDERA_EJECUCION")) {
                context.BANDERA_EJECUCION = (Integer) parentContextMap.get("BANDERA_EJECUCION");
            }if (parentContextMap.containsKey("DCARGUE_ID")) {
                context.DCARGUE_ID = (BigDecimal) parentContextMap.get("DCARGUE_ID");
            }if (parentContextMap.containsKey("DESTINO")) {
                context.DESTINO = (String) parentContextMap.get("DESTINO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("JOB_ID")) {
                context.JOB_ID = (BigDecimal) parentContextMap.get("JOB_ID");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RECEPCION_ID")) {
                context.RECEPCION_ID = (BigDecimal) parentContextMap.get("RECEPCION_ID");
            }if (parentContextMap.containsKey("TJOB")) {
                context.TJOB = (Integer) parentContextMap.get("TJOB");
            }if (parentContextMap.containsKey("EstadoArchivo")) {
                context.EstadoArchivo = (Integer) parentContextMap.get("EstadoArchivo");
            }if (parentContextMap.containsKey("Fauditoria")) {
                context.Fauditoria = (java.util.Date) parentContextMap.get("Fauditoria");
            }if (parentContextMap.containsKey("HAUDITORIA_ID")) {
                context.HAUDITORIA_ID = (BigDecimal) parentContextMap.get("HAUDITORIA_ID");
            }if (parentContextMap.containsKey("Nfactura")) {
                context.Nfactura = (String) parentContextMap.get("Nfactura");
            }if (parentContextMap.containsKey("Sprefijo")) {
                context.Sprefijo = (String) parentContextMap.get("Sprefijo");
            }if (parentContextMap.containsKey("SumaFactura")) {
                context.SumaFactura = (Double) parentContextMap.get("SumaFactura");
            }if (parentContextMap.containsKey("SumaGlosas")) {
                context.SumaGlosas = (Double) parentContextMap.get("SumaGlosas");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_SenderName")) {
                context.mail_SenderName = (String) parentContextMap.get("mail_SenderName");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }if (parentContextMap.containsKey("AfiliacionDerechos")) {
                context.AfiliacionDerechos = (BigDecimal) parentContextMap.get("AfiliacionDerechos");
            }if (parentContextMap.containsKey("AfiliacionDerechosD")) {
                context.AfiliacionDerechosD = (String) parentContextMap.get("AfiliacionDerechosD");
            }if (parentContextMap.containsKey("AfiliacionInactiva")) {
                context.AfiliacionInactiva = (BigDecimal) parentContextMap.get("AfiliacionInactiva");
            }if (parentContextMap.containsKey("AfiliacionInactivaD")) {
                context.AfiliacionInactivaD = (String) parentContextMap.get("AfiliacionInactivaD");
            }if (parentContextMap.containsKey("AutorizacionCobrado")) {
                context.AutorizacionCobrado = (BigDecimal) parentContextMap.get("AutorizacionCobrado");
            }if (parentContextMap.containsKey("AutorizacionCobradoD")) {
                context.AutorizacionCobradoD = (String) parentContextMap.get("AutorizacionCobradoD");
            }if (parentContextMap.containsKey("AutorizacionCups")) {
                context.AutorizacionCups = (BigDecimal) parentContextMap.get("AutorizacionCups");
            }if (parentContextMap.containsKey("AutorizacionCupsD")) {
                context.AutorizacionCupsD = (String) parentContextMap.get("AutorizacionCupsD");
            }if (parentContextMap.containsKey("AutorizacionNoExiste")) {
                context.AutorizacionNoExiste = (BigDecimal) parentContextMap.get("AutorizacionNoExiste");
            }if (parentContextMap.containsKey("AutorizacionNoExisteD")) {
                context.AutorizacionNoExisteD = (String) parentContextMap.get("AutorizacionNoExisteD");
            }if (parentContextMap.containsKey("AutorizacionPersona")) {
                context.AutorizacionPersona = (BigDecimal) parentContextMap.get("AutorizacionPersona");
            }if (parentContextMap.containsKey("AutorizacionPersonaD")) {
                context.AutorizacionPersonaD = (String) parentContextMap.get("AutorizacionPersonaD");
            }if (parentContextMap.containsKey("AutorizacionPrestador")) {
                context.AutorizacionPrestador = (BigDecimal) parentContextMap.get("AutorizacionPrestador");
            }if (parentContextMap.containsKey("AutorizacionPrestadorD")) {
                context.AutorizacionPrestadorD = (String) parentContextMap.get("AutorizacionPrestadorD");
            }if (parentContextMap.containsKey("CantidadFormulada")) {
                context.CantidadFormulada = (BigDecimal) parentContextMap.get("CantidadFormulada");
            }if (parentContextMap.containsKey("CantidadFormuladaD")) {
                context.CantidadFormuladaD = (String) parentContextMap.get("CantidadFormuladaD");
            }if (parentContextMap.containsKey("FacturaAuditada")) {
                context.FacturaAuditada = (BigDecimal) parentContextMap.get("FacturaAuditada");
            }if (parentContextMap.containsKey("FacturaAuditadaD")) {
                context.FacturaAuditadaD = (String) parentContextMap.get("FacturaAuditadaD");
            }if (parentContextMap.containsKey("MedicamentoNoPactado")) {
                context.MedicamentoNoPactado = (BigDecimal) parentContextMap.get("MedicamentoNoPactado");
            }if (parentContextMap.containsKey("MedicamentoNoPactadoD")) {
                context.MedicamentoNoPactadoD = (String) parentContextMap.get("MedicamentoNoPactadoD");
            }if (parentContextMap.containsKey("PorcetajeConsumo")) {
                context.PorcetajeConsumo = (BigDecimal) parentContextMap.get("PorcetajeConsumo");
            }if (parentContextMap.containsKey("PorcetajeConsumoD")) {
                context.PorcetajeConsumoD = (String) parentContextMap.get("PorcetajeConsumoD");
            }if (parentContextMap.containsKey("SumaFacturas")) {
                context.SumaFacturas = (BigDecimal) parentContextMap.get("SumaFacturas");
            }if (parentContextMap.containsKey("SumaFacturasD")) {
                context.SumaFacturasD = (String) parentContextMap.get("SumaFacturasD");
            }if (parentContextMap.containsKey("TiempoEntrega")) {
                context.TiempoEntrega = (BigDecimal) parentContextMap.get("TiempoEntrega");
            }if (parentContextMap.containsKey("TiempoEntregaD")) {
                context.TiempoEntregaD = (String) parentContextMap.get("TiempoEntregaD");
            }if (parentContextMap.containsKey("ValorDiferente")) {
                context.ValorDiferente = (BigDecimal) parentContextMap.get("ValorDiferente");
            }if (parentContextMap.containsKey("ValorDiferenteD")) {
                context.ValorDiferenteD = (String) parentContextMap.get("ValorDiferenteD");
            }if (parentContextMap.containsKey("ValorNoPactado")) {
                context.ValorNoPactado = (BigDecimal) parentContextMap.get("ValorNoPactado");
            }if (parentContextMap.containsKey("ValorNoPactadoD")) {
                context.ValorNoPactadoD = (String) parentContextMap.get("ValorNoPactadoD");
            }if (parentContextMap.containsKey("VidaUtil")) {
                context.VidaUtil = (BigDecimal) parentContextMap.get("VidaUtil");
            }if (parentContextMap.containsKey("VidaUtilD")) {
                context.VidaUtilD = (String) parentContextMap.get("VidaUtilD");
            }if (parentContextMap.containsKey("AUDITORIA_ID")) {
                context.AUDITORIA_ID = (BigDecimal) parentContextMap.get("AUDITORIA_ID");
            }if (parentContextMap.containsKey("ETAPASNORMATIVIDAD_ID")) {
                context.ETAPASNORMATIVIDAD_ID = (BigDecimal) parentContextMap.get("ETAPASNORMATIVIDAD_ID");
            }if (parentContextMap.containsKey("FRADICADO")) {
                context.FRADICADO = (java.util.Date) parentContextMap.get("FRADICADO");
            }if (parentContextMap.containsKey("NORMATIVIDAD_ETAPA_ID")) {
                context.NORMATIVIDAD_ETAPA_ID = (BigDecimal) parentContextMap.get("NORMATIVIDAD_ETAPA_ID");
            }if (parentContextMap.containsKey("NORMATIVIDAD_GLOSA_ID")) {
                context.NORMATIVIDAD_GLOSA_ID = (BigDecimal) parentContextMap.get("NORMATIVIDAD_GLOSA_ID");
            }if (parentContextMap.containsKey("SUMATORIA")) {
                context.SUMATORIA = (Double) parentContextMap.get("SUMATORIA");
            }if (parentContextMap.containsKey("SUMATORIA_FACTURA")) {
                context.SUMATORIA_FACTURA = (Double) parentContextMap.get("SUMATORIA_FACTURA");
            }if (parentContextMap.containsKey("UORG_ID")) {
                context.UORG_ID = (BigDecimal) parentContextMap.get("UORG_ID");
            }if (parentContextMap.containsKey("USUARIOS_ID")) {
                context.USUARIOS_ID = (BigDecimal) parentContextMap.get("USUARIOS_ID");
            }if (parentContextMap.containsKey("VIDA_UTIL")) {
                context.VIDA_UTIL = (Integer) parentContextMap.get("VIDA_UTIL");
            }if (parentContextMap.containsKey("vFechaFinContrato")) {
                context.vFechaFinContrato = (java.util.Date) parentContextMap.get("vFechaFinContrato");
            }if (parentContextMap.containsKey("vFechaIniContrato")) {
                context.vFechaIniContrato = (java.util.Date) parentContextMap.get("vFechaIniContrato");
            }if (parentContextMap.containsKey("vIntermediacionDisp")) {
                context.vIntermediacionDisp = (BigDecimal) parentContextMap.get("vIntermediacionDisp");
            }if (parentContextMap.containsKey("vIntermediacionSum")) {
                context.vIntermediacionSum = (BigDecimal) parentContextMap.get("vIntermediacionSum");
            }if (parentContextMap.containsKey("vTipificacion")) {
                context.vTipificacion = (String) parentContextMap.get("vTipificacion");
            }if (parentContextMap.containsKey("vTipoArchivoSigla")) {
                context.vTipoArchivoSigla = (String) parentContextMap.get("vTipoArchivoSigla");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tOracleInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

e_tOracleInput_1.printStackTrace();

}catch (java.lang.Error e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tOracleInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : GlosasMedicamentos");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     3471088 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 1:30:32 AM COT
 ************************************************************************************************/