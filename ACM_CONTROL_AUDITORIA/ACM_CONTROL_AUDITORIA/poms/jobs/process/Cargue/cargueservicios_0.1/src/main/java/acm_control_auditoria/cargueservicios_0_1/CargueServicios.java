// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package acm_control_auditoria.cargueservicios_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.PartirPrefijo;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: CargueServicios Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class CargueServicios implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(BANDERA != null){
				
					this.setProperty("BANDERA", BANDERA.toString());
				
			}
			
			if(bodega != null){
				
					this.setProperty("bodega", bodega.toString());
				
			}
			
			if(cantidad != null){
				
					this.setProperty("cantidad", cantidad.toString());
				
			}
			
			if(cantidad_despachada != null){
				
					this.setProperty("cantidad_despachada", cantidad_despachada.toString());
				
			}
			
			if(cantidad_solicitada != null){
				
					this.setProperty("cantidad_solicitada", cantidad_solicitada.toString());
				
			}
			
			if(codigo_autorizacion != null){
				
					this.setProperty("codigo_autorizacion", codigo_autorizacion.toString());
				
			}
			
			if(codigo_cie10 != null){
				
					this.setProperty("codigo_cie10", codigo_cie10.toString());
				
			}
			
			if(codigo_cum != null){
				
					this.setProperty("codigo_cum", codigo_cum.toString());
				
			}
			
			if(codigo_cups != null){
				
					this.setProperty("codigo_cups", codigo_cups.toString());
				
			}
			
			if(concentracion != null){
				
					this.setProperty("concentracion", concentracion.toString());
				
			}
			
			if(confidencialidad != null){
				
					this.setProperty("confidencialidad", confidencialidad.toString());
				
			}
			
			if(CONTRATOS_ID != null){
				
					this.setProperty("CONTRATOS_ID", CONTRATOS_ID.toString());
				
			}
			
			if(ctc_aprobado != null){
				
					this.setProperty("ctc_aprobado", ctc_aprobado.toString());
				
			}
			
			if(descripcion_cie10 != null){
				
					this.setProperty("descripcion_cie10", descripcion_cie10.toString());
				
			}
			
			if(descripcion_cups != null){
				
					this.setProperty("descripcion_cups", descripcion_cups.toString());
				
			}
			
			if(documento != null){
				
					this.setProperty("documento", documento.toString());
				
			}
			
			if(esm != null){
				
					this.setProperty("esm", esm.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(EstAfiliacionActivo != null){
				
					this.setProperty("EstAfiliacionActivo", EstAfiliacionActivo.toString());
				
			}
			
			if(EstAfiliacionProvisional != null){
				
					this.setProperty("EstAfiliacionProvisional", EstAfiliacionProvisional.toString());
				
			}
			
			if(EstAfiliaicionInactivo != null){
				
					this.setProperty("EstAfiliaicionInactivo", EstAfiliaicionInactivo.toString());
				
			}
			
			if(EstArchivoPCE != null){
				
					this.setProperty("EstArchivoPCE", EstArchivoPCE.toString());
				
			}
			
			if(fecha_autorizacion != null){
				
					this.setProperty("fecha_autorizacion", fecha_autorizacion.toString());
				
			}
			
			if(fecha_dispensacion != null){
				
					this.setProperty("fecha_dispensacion", fecha_dispensacion.toString());
				
			}
			
			if(fecha_egreso != null){
				
					this.setProperty("fecha_egreso", fecha_egreso.toString());
				
			}
			
			if(fecha_factura != null){
				
					this.setProperty("fecha_factura", fecha_factura.toString());
				
			}
			
			if(fecha_formulacion != null){
				
					this.setProperty("fecha_formulacion", fecha_formulacion.toString());
				
			}
			
			if(fecha_ingreso != null){
				
					this.setProperty("fecha_ingreso", fecha_ingreso.toString());
				
			}
			
			if(FECHA_NULL != null){
				
					String pattern_FECHA_NULL = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_NULL = "";
					String[] parts_FECHA_NULL = value_FECHA_NULL.split(";");
					if(parts_FECHA_NULL.length > 1){
						pattern_FECHA_NULL = parts_FECHA_NULL[0];
						this.setProperty("FECHA_NULL", pattern_FECHA_NULL + ";" + FormatterUtils.format_Date(FECHA_NULL, pattern_FECHA_NULL));
					}else{
						this.setProperty("FECHA_NULL", FormatterUtils.format_Date(FECHA_NULL, pattern_FECHA_NULL));
					}
				
			}
			
			if(fecha_registro != null){
				
					this.setProperty("fecha_registro", fecha_registro.toString());
				
			}
			
			if(fecha_servicio != null){
				
					this.setProperty("fecha_servicio", fecha_servicio.toString());
				
			}
			
			if(fecha_vencimiento != null){
				
					this.setProperty("fecha_vencimiento", fecha_vencimiento.toString());
				
			}
			
			if(fuerza_militar != null){
				
					this.setProperty("fuerza_militar", fuerza_militar.toString());
				
			}
			
			if(HORA != null){
				
					this.setProperty("HORA", HORA.toString());
				
			}
			
			if(invima != null){
				
					this.setProperty("invima", invima.toString());
				
			}
			
			if(laboratorio != null){
				
					this.setProperty("laboratorio", laboratorio.toString());
				
			}
			
			if(lote != null){
				
					this.setProperty("lote", lote.toString());
				
			}
			
			if(lugar_dispensacion != null){
				
					this.setProperty("lugar_dispensacion", lugar_dispensacion.toString());
				
			}
			
			if(MEDCONTRATOS_ID != null){
				
					this.setProperty("MEDCONTRATOS_ID", MEDCONTRATOS_ID.toString());
				
			}
			
			if(Narchivo != null){
				
					this.setProperty("Narchivo", Narchivo.toString());
				
			}
			
			if(nombre_medicamento != null){
				
					this.setProperty("nombre_medicamento", nombre_medicamento.toString());
				
			}
			
			if(numero != null){
				
					this.setProperty("numero", numero.toString());
				
			}
			
			if(numero_factura != null){
				
					this.setProperty("numero_factura", numero_factura.toString());
				
			}
			
			if(numero_formula != null){
				
					this.setProperty("numero_formula", numero_formula.toString());
				
			}
			
			if(observaciones != null){
				
					this.setProperty("observaciones", observaciones.toString());
				
			}
			
			if(origen_formulacion != null){
				
					this.setProperty("origen_formulacion", origen_formulacion.toString());
				
			}
			
			if(periodo != null){
				
					this.setProperty("periodo", periodo.toString());
				
			}
			
			if(prefijo != null){
				
					this.setProperty("prefijo", prefijo.toString());
				
			}
			
			if(presentacion != null){
				
					this.setProperty("presentacion", presentacion.toString());
				
			}
			
			if(PRESTADOR != null){
				
					this.setProperty("PRESTADOR", PRESTADOR.toString());
				
			}
			
			if(producto_comercial != null){
				
					this.setProperty("producto_comercial", producto_comercial.toString());
				
			}
			
			if(servicio != null){
				
					this.setProperty("servicio", servicio.toString());
				
			}
			
			if(ssmp != null){
				
					this.setProperty("ssmp", ssmp.toString());
				
			}
			
			if(subtotal != null){
				
					this.setProperty("subtotal", subtotal.toString());
				
			}
			
			if(tipificacion != null){
				
					this.setProperty("tipificacion", tipificacion.toString());
				
			}
			
			if(tipo != null){
				
					this.setProperty("tipo", tipo.toString());
				
			}
			
			if(tipo_documento != null){
				
					this.setProperty("tipo_documento", tipo_documento.toString());
				
			}
			
			if(tipo_formula != null){
				
					this.setProperty("tipo_formula", tipo_formula.toString());
				
			}
			
			if(tipo_servicio != null){
				
					this.setProperty("tipo_servicio", tipo_servicio.toString());
				
			}
			
			if(TipoRespuesta != null){
				
					this.setProperty("TipoRespuesta", TipoRespuesta.toString());
				
			}
			
			if(tirilla != null){
				
					this.setProperty("tirilla", tirilla.toString());
				
			}
			
			if(unidad_medida != null){
				
					this.setProperty("unidad_medida", unidad_medida.toString());
				
			}
			
			if(valor_gravado != null){
				
					this.setProperty("valor_gravado", valor_gravado.toString());
				
			}
			
			if(valor_intermediacion != null){
				
					this.setProperty("valor_intermediacion", valor_intermediacion.toString());
				
			}
			
			if(valor_total != null){
				
					this.setProperty("valor_total", valor_total.toString());
				
			}
			
			if(valor_unitario != null){
				
					this.setProperty("valor_unitario", valor_unitario.toString());
				
			}
			
			if(via_administracion != null){
				
					this.setProperty("via_administracion", via_administracion.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(PathStorage != null){
				
					this.setProperty("PathStorage", PathStorage.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(CargueArchivoId != null){
				
					this.setProperty("CargueArchivoId", CargueArchivoId.toString());
				
			}
			
			if(fechaArchivoErrores != null){
				
					this.setProperty("fechaArchivoErrores", fechaArchivoErrores.toString());
				
			}
			
			if(nErroresArchivo != null){
				
					this.setProperty("nErroresArchivo", nErroresArchivo.toString());
				
			}
			
			if(nRegArchivo != null){
				
					this.setProperty("nRegArchivo", nRegArchivo.toString());
				
			}
			
			if(vArchivo_Id != null){
				
					this.setProperty("vArchivo_Id", vArchivo_Id.toString());
				
			}
			
			if(vCantRegistros != null){
				
					this.setProperty("vCantRegistros", vCantRegistros.toString());
				
			}
			
			if(vEstadoCarga != null){
				
					this.setProperty("vEstadoCarga", vEstadoCarga.toString());
				
			}
			
			if(vIdTipoArchivo != null){
				
					this.setProperty("vIdTipoArchivo", vIdTipoArchivo.toString());
				
			}
			
			if(vNombreArchivo != null){
				
					this.setProperty("vNombreArchivo", vNombreArchivo.toString());
				
			}
			
			if(vNombreTipoArchivo != null){
				
					this.setProperty("vNombreTipoArchivo", vNombreTipoArchivo.toString());
				
			}
			
			if(vPeriodo != null){
				
					String pattern_vPeriodo = "yyyy-MM-dd HH:mm:ss";
					String value_vPeriodo = "";
					String[] parts_vPeriodo = value_vPeriodo.split(";");
					if(parts_vPeriodo.length > 1){
						pattern_vPeriodo = parts_vPeriodo[0];
						this.setProperty("vPeriodo", pattern_vPeriodo + ";" + FormatterUtils.format_Date(vPeriodo, pattern_vPeriodo));
					}else{
						this.setProperty("vPeriodo", FormatterUtils.format_Date(vPeriodo, pattern_vPeriodo));
					}
				
			}
			
			if(vRecepcionId != null){
				
					this.setProperty("vRecepcionId", vRecepcionId.toString());
				
			}
			
			if(vTipoArchivo != null){
				
					this.setProperty("vTipoArchivo", vTipoArchivo.toString());
				
			}
			
			if(contador != null){
				
					this.setProperty("contador", contador.toString());
				
			}
			
			if(eCIE10 != null){
				
					this.setProperty("eCIE10", eCIE10.toString());
				
			}
			
			if(eComercial != null){
				
					this.setProperty("eComercial", eComercial.toString());
				
			}
			
			if(eConcentracion != null){
				
					this.setProperty("eConcentracion", eConcentracion.toString());
				
			}
			
			if(eCTC != null){
				
					this.setProperty("eCTC", eCTC.toString());
				
			}
			
			if(eCum != null){
				
					this.setProperty("eCum", eCum.toString());
				
			}
			
			if(eCUPS != null){
				
					this.setProperty("eCUPS", eCUPS.toString());
				
			}
			
			if(eESM != null){
				
					this.setProperty("eESM", eESM.toString());
				
			}
			
			if(eGeneral != null){
				
					this.setProperty("eGeneral", eGeneral.toString());
				
			}
			
			if(eGenerico != null){
				
					this.setProperty("eGenerico", eGenerico.toString());
				
			}
			
			if(eInvima != null){
				
					this.setProperty("eInvima", eInvima.toString());
				
			}
			
			if(eLaboratorio != null){
				
					this.setProperty("eLaboratorio", eLaboratorio.toString());
				
			}
			
			if(ePersona != null){
				
					this.setProperty("ePersona", ePersona.toString());
				
			}
			
			if(ePresentacion != null){
				
					this.setProperty("ePresentacion", ePresentacion.toString());
				
			}
			
			if(eSSMP != null){
				
					this.setProperty("eSSMP", eSSMP.toString());
				
			}
			
			if(eTipoFormula != null){
				
					this.setProperty("eTipoFormula", eTipoFormula.toString());
				
			}
			
			if(eUmedida != null){
				
					this.setProperty("eUmedida", eUmedida.toString());
				
			}
			
			if(eViaAdministracion != null){
				
					this.setProperty("eViaAdministracion", eViaAdministracion.toString());
				
			}
			
			if(code != null){
				
					this.setProperty("code", code.toString());
				
			}
			
			if(context != null){
				
					this.setProperty("context", context.toString());
				
			}
			
			if(job != null){
				
					this.setProperty("job", job.toString());
				
			}
			
			if(message != null){
				
					this.setProperty("message", message.toString());
				
			}
			
			if(moment != null){
				
					String pattern_moment = "yyyy-MM-dd HH:mm:ss";
					String value_moment = "";
					String[] parts_moment = value_moment.split(";");
					if(parts_moment.length > 1){
						pattern_moment = parts_moment[0];
						this.setProperty("moment", pattern_moment + ";" + FormatterUtils.format_Date(moment, pattern_moment));
					}else{
						this.setProperty("moment", FormatterUtils.format_Date(moment, pattern_moment));
					}
				
			}
			
			if(origen != null){
				
					this.setProperty("origen", origen.toString());
				
			}
			
			if(priority != null){
				
					this.setProperty("priority", priority.toString());
				
			}
			
			if(project != null){
				
					this.setProperty("project", project.toString());
				
			}
			
			if(server_destino != null){
				
					this.setProperty("server_destino", server_destino.toString());
				
			}
			
			if(server_origen != null){
				
					this.setProperty("server_origen", server_origen.toString());
				
			}
			
			if(service_name_destino != null){
				
					this.setProperty("service_name_destino", service_name_destino.toString());
				
			}
			
			if(service_name_origen != null){
				
					this.setProperty("service_name_origen", service_name_origen.toString());
				
			}
			
			if(user_destino != null){
				
					this.setProperty("user_destino", user_destino.toString());
				
			}
			
			if(user_origen != null){
				
					this.setProperty("user_origen", user_origen.toString());
				
			}
			
			if(Cerrada != null){
				
					this.setProperty("Cerrada", Cerrada.toString());
				
			}
			
			if(Editada != null){
				
					this.setProperty("Editada", Editada.toString());
				
			}
			
			if(Editando != null){
				
					this.setProperty("Editando", Editando.toString());
				
			}
			
			if(Finalizada != null){
				
					this.setProperty("Finalizada", Finalizada.toString());
				
			}
			
			if(Iniciada != null){
				
					this.setProperty("Iniciada", Iniciada.toString());
				
			}
			
			if(Manual != null){
				
					this.setProperty("Manual", Manual.toString());
				
			}
			
			if(SinInniciar != null){
				
					this.setProperty("SinInniciar", SinInniciar.toString());
				
			}
			
			if(estActivo != null){
				
					this.setProperty("estActivo", estActivo.toString());
				
			}
			
			if(estCancelado != null){
				
					this.setProperty("estCancelado", estCancelado.toString());
				
			}
			
			if(estEnProceso != null){
				
					this.setProperty("estEnProceso", estEnProceso.toString());
				
			}
			
			if(estErrorArchivo != null){
				
					this.setProperty("estErrorArchivo", estErrorArchivo.toString());
				
			}
			
			if(estErrorProcesamiento != null){
				
					this.setProperty("estErrorProcesamiento", estErrorProcesamiento.toString());
				
			}
			
			if(estInactivo != null){
				
					this.setProperty("estInactivo", estInactivo.toString());
				
			}
			
			if(estPausado != null){
				
					this.setProperty("estPausado", estPausado.toString());
				
			}
			
			if(estProcesado != null){
				
					this.setProperty("estProcesado", estProcesado.toString());
				
			}
			
			if(EstValidado != null){
				
					this.setProperty("EstValidado", EstValidado.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(BANDERA_EJECUCION != null){
				
					this.setProperty("BANDERA_EJECUCION", BANDERA_EJECUCION.toString());
				
			}
			
			if(DCARGUE_ID != null){
				
					this.setProperty("DCARGUE_ID", DCARGUE_ID.toString());
				
			}
			
			if(DESTINO != null){
				
					this.setProperty("DESTINO", DESTINO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(JOB_ID != null){
				
					this.setProperty("JOB_ID", JOB_ID.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RECEPCION_ID != null){
				
					this.setProperty("RECEPCION_ID", RECEPCION_ID.toString());
				
			}
			
			if(TJOB != null){
				
					this.setProperty("TJOB", TJOB.toString());
				
			}
			
			if(EstadoArchivo != null){
				
					this.setProperty("EstadoArchivo", EstadoArchivo.toString());
				
			}
			
			if(Fauditoria != null){
				
					String pattern_Fauditoria = "yyyy-MM-dd HH:mm:ss";
					String value_Fauditoria = "";
					String[] parts_Fauditoria = value_Fauditoria.split(";");
					if(parts_Fauditoria.length > 1){
						pattern_Fauditoria = parts_Fauditoria[0];
						this.setProperty("Fauditoria", pattern_Fauditoria + ";" + FormatterUtils.format_Date(Fauditoria, pattern_Fauditoria));
					}else{
						this.setProperty("Fauditoria", FormatterUtils.format_Date(Fauditoria, pattern_Fauditoria));
					}
				
			}
			
			if(HAUDITORIA_ID != null){
				
					this.setProperty("HAUDITORIA_ID", HAUDITORIA_ID.toString());
				
			}
			
			if(Nfactura != null){
				
					this.setProperty("Nfactura", Nfactura.toString());
				
			}
			
			if(Sprefijo != null){
				
					this.setProperty("Sprefijo", Sprefijo.toString());
				
			}
			
			if(SumaFactura != null){
				
					this.setProperty("SumaFactura", SumaFactura.toString());
				
			}
			
			if(SumaGlosas != null){
				
					this.setProperty("SumaGlosas", SumaGlosas.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_SenderName != null){
				
					this.setProperty("mail_SenderName", mail_SenderName.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
			if(AfiliacionDerechos != null){
				
					this.setProperty("AfiliacionDerechos", AfiliacionDerechos.toString());
				
			}
			
			if(AfiliacionDerechosD != null){
				
					this.setProperty("AfiliacionDerechosD", AfiliacionDerechosD.toString());
				
			}
			
			if(AfiliacionInactiva != null){
				
					this.setProperty("AfiliacionInactiva", AfiliacionInactiva.toString());
				
			}
			
			if(AfiliacionInactivaD != null){
				
					this.setProperty("AfiliacionInactivaD", AfiliacionInactivaD.toString());
				
			}
			
			if(AutorizacionCobrado != null){
				
					this.setProperty("AutorizacionCobrado", AutorizacionCobrado.toString());
				
			}
			
			if(AutorizacionCobradoD != null){
				
					this.setProperty("AutorizacionCobradoD", AutorizacionCobradoD.toString());
				
			}
			
			if(AutorizacionCups != null){
				
					this.setProperty("AutorizacionCups", AutorizacionCups.toString());
				
			}
			
			if(AutorizacionCupsD != null){
				
					this.setProperty("AutorizacionCupsD", AutorizacionCupsD.toString());
				
			}
			
			if(AutorizacionNoExiste != null){
				
					this.setProperty("AutorizacionNoExiste", AutorizacionNoExiste.toString());
				
			}
			
			if(AutorizacionNoExisteD != null){
				
					this.setProperty("AutorizacionNoExisteD", AutorizacionNoExisteD.toString());
				
			}
			
			if(AutorizacionPersona != null){
				
					this.setProperty("AutorizacionPersona", AutorizacionPersona.toString());
				
			}
			
			if(AutorizacionPersonaD != null){
				
					this.setProperty("AutorizacionPersonaD", AutorizacionPersonaD.toString());
				
			}
			
			if(AutorizacionPrestador != null){
				
					this.setProperty("AutorizacionPrestador", AutorizacionPrestador.toString());
				
			}
			
			if(AutorizacionPrestadorD != null){
				
					this.setProperty("AutorizacionPrestadorD", AutorizacionPrestadorD.toString());
				
			}
			
			if(CantidadFormulada != null){
				
					this.setProperty("CantidadFormulada", CantidadFormulada.toString());
				
			}
			
			if(CantidadFormuladaD != null){
				
					this.setProperty("CantidadFormuladaD", CantidadFormuladaD.toString());
				
			}
			
			if(FacturaAuditada != null){
				
					this.setProperty("FacturaAuditada", FacturaAuditada.toString());
				
			}
			
			if(FacturaAuditadaD != null){
				
					this.setProperty("FacturaAuditadaD", FacturaAuditadaD.toString());
				
			}
			
			if(MedicamentoNoPactado != null){
				
					this.setProperty("MedicamentoNoPactado", MedicamentoNoPactado.toString());
				
			}
			
			if(MedicamentoNoPactadoD != null){
				
					this.setProperty("MedicamentoNoPactadoD", MedicamentoNoPactadoD.toString());
				
			}
			
			if(PorcetajeConsumo != null){
				
					this.setProperty("PorcetajeConsumo", PorcetajeConsumo.toString());
				
			}
			
			if(PorcetajeConsumoD != null){
				
					this.setProperty("PorcetajeConsumoD", PorcetajeConsumoD.toString());
				
			}
			
			if(SumaFacturas != null){
				
					this.setProperty("SumaFacturas", SumaFacturas.toString());
				
			}
			
			if(SumaFacturasD != null){
				
					this.setProperty("SumaFacturasD", SumaFacturasD.toString());
				
			}
			
			if(TiempoEntrega != null){
				
					this.setProperty("TiempoEntrega", TiempoEntrega.toString());
				
			}
			
			if(TiempoEntregaD != null){
				
					this.setProperty("TiempoEntregaD", TiempoEntregaD.toString());
				
			}
			
			if(ValorDiferente != null){
				
					this.setProperty("ValorDiferente", ValorDiferente.toString());
				
			}
			
			if(ValorDiferenteD != null){
				
					this.setProperty("ValorDiferenteD", ValorDiferenteD.toString());
				
			}
			
			if(ValorNoPactado != null){
				
					this.setProperty("ValorNoPactado", ValorNoPactado.toString());
				
			}
			
			if(ValorNoPactadoD != null){
				
					this.setProperty("ValorNoPactadoD", ValorNoPactadoD.toString());
				
			}
			
			if(VidaUtil != null){
				
					this.setProperty("VidaUtil", VidaUtil.toString());
				
			}
			
			if(VidaUtilD != null){
				
					this.setProperty("VidaUtilD", VidaUtilD.toString());
				
			}
			
			if(AUDITORIA_ID != null){
				
					this.setProperty("AUDITORIA_ID", AUDITORIA_ID.toString());
				
			}
			
			if(ETAPASNORMATIVIDAD_ID != null){
				
					this.setProperty("ETAPASNORMATIVIDAD_ID", ETAPASNORMATIVIDAD_ID.toString());
				
			}
			
			if(FRADICADO != null){
				
					String pattern_FRADICADO = "yyyy-MM-dd HH:mm:ss";
					String value_FRADICADO = "";
					String[] parts_FRADICADO = value_FRADICADO.split(";");
					if(parts_FRADICADO.length > 1){
						pattern_FRADICADO = parts_FRADICADO[0];
						this.setProperty("FRADICADO", pattern_FRADICADO + ";" + FormatterUtils.format_Date(FRADICADO, pattern_FRADICADO));
					}else{
						this.setProperty("FRADICADO", FormatterUtils.format_Date(FRADICADO, pattern_FRADICADO));
					}
				
			}
			
			if(NORMATIVIDAD_ETAPA_ID != null){
				
					this.setProperty("NORMATIVIDAD_ETAPA_ID", NORMATIVIDAD_ETAPA_ID.toString());
				
			}
			
			if(NORMATIVIDAD_GLOSA_ID != null){
				
					this.setProperty("NORMATIVIDAD_GLOSA_ID", NORMATIVIDAD_GLOSA_ID.toString());
				
			}
			
			if(SUMATORIA != null){
				
					this.setProperty("SUMATORIA", SUMATORIA.toString());
				
			}
			
			if(SUMATORIA_FACTURA != null){
				
					this.setProperty("SUMATORIA_FACTURA", SUMATORIA_FACTURA.toString());
				
			}
			
			if(UORG_ID != null){
				
					this.setProperty("UORG_ID", UORG_ID.toString());
				
			}
			
			if(USUARIOS_ID != null){
				
					this.setProperty("USUARIOS_ID", USUARIOS_ID.toString());
				
			}
			
			if(VIDA_UTIL != null){
				
					this.setProperty("VIDA_UTIL", VIDA_UTIL.toString());
				
			}
			
			if(vFechaFinContrato != null){
				
					String pattern_vFechaFinContrato = "yyyy-MM-dd HH:mm:ss";
					String value_vFechaFinContrato = "";
					String[] parts_vFechaFinContrato = value_vFechaFinContrato.split(";");
					if(parts_vFechaFinContrato.length > 1){
						pattern_vFechaFinContrato = parts_vFechaFinContrato[0];
						this.setProperty("vFechaFinContrato", pattern_vFechaFinContrato + ";" + FormatterUtils.format_Date(vFechaFinContrato, pattern_vFechaFinContrato));
					}else{
						this.setProperty("vFechaFinContrato", FormatterUtils.format_Date(vFechaFinContrato, pattern_vFechaFinContrato));
					}
				
			}
			
			if(vFechaIniContrato != null){
				
					String pattern_vFechaIniContrato = "yyyy-MM-dd HH:mm:ss";
					String value_vFechaIniContrato = "";
					String[] parts_vFechaIniContrato = value_vFechaIniContrato.split(";");
					if(parts_vFechaIniContrato.length > 1){
						pattern_vFechaIniContrato = parts_vFechaIniContrato[0];
						this.setProperty("vFechaIniContrato", pattern_vFechaIniContrato + ";" + FormatterUtils.format_Date(vFechaIniContrato, pattern_vFechaIniContrato));
					}else{
						this.setProperty("vFechaIniContrato", FormatterUtils.format_Date(vFechaIniContrato, pattern_vFechaIniContrato));
					}
				
			}
			
			if(vIntermediacionDisp != null){
				
					this.setProperty("vIntermediacionDisp", vIntermediacionDisp.toString());
				
			}
			
			if(vIntermediacionSum != null){
				
					this.setProperty("vIntermediacionSum", vIntermediacionSum.toString());
				
			}
			
			if(vTipificacion != null){
				
					this.setProperty("vTipificacion", vTipificacion.toString());
				
			}
			
			if(vTipoArchivoSigla != null){
				
					this.setProperty("vTipoArchivoSigla", vTipoArchivoSigla.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer BANDERA;
public Integer getBANDERA(){
	return this.BANDERA;
}
public String bodega;
public String getBodega(){
	return this.bodega;
}
public String cantidad;
public String getCantidad(){
	return this.cantidad;
}
public String cantidad_despachada;
public String getCantidad_despachada(){
	return this.cantidad_despachada;
}
public String cantidad_solicitada;
public String getCantidad_solicitada(){
	return this.cantidad_solicitada;
}
public String codigo_autorizacion;
public String getCodigo_autorizacion(){
	return this.codigo_autorizacion;
}
public String codigo_cie10;
public String getCodigo_cie10(){
	return this.codigo_cie10;
}
public String codigo_cum;
public String getCodigo_cum(){
	return this.codigo_cum;
}
public String codigo_cups;
public String getCodigo_cups(){
	return this.codigo_cups;
}
public String concentracion;
public String getConcentracion(){
	return this.concentracion;
}
public String confidencialidad;
public String getConfidencialidad(){
	return this.confidencialidad;
}
public BigDecimal CONTRATOS_ID;
public BigDecimal getCONTRATOS_ID(){
	return this.CONTRATOS_ID;
}
public String ctc_aprobado;
public String getCtc_aprobado(){
	return this.ctc_aprobado;
}
public String descripcion_cie10;
public String getDescripcion_cie10(){
	return this.descripcion_cie10;
}
public String descripcion_cups;
public String getDescripcion_cups(){
	return this.descripcion_cups;
}
public String documento;
public String getDocumento(){
	return this.documento;
}
public String esm;
public String getEsm(){
	return this.esm;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public Integer EstAfiliacionActivo;
public Integer getEstAfiliacionActivo(){
	return this.EstAfiliacionActivo;
}
public Integer EstAfiliacionProvisional;
public Integer getEstAfiliacionProvisional(){
	return this.EstAfiliacionProvisional;
}
public Integer EstAfiliaicionInactivo;
public Integer getEstAfiliaicionInactivo(){
	return this.EstAfiliaicionInactivo;
}
public BigDecimal EstArchivoPCE;
public BigDecimal getEstArchivoPCE(){
	return this.EstArchivoPCE;
}
public String fecha_autorizacion;
public String getFecha_autorizacion(){
	return this.fecha_autorizacion;
}
public String fecha_dispensacion;
public String getFecha_dispensacion(){
	return this.fecha_dispensacion;
}
public String fecha_egreso;
public String getFecha_egreso(){
	return this.fecha_egreso;
}
public String fecha_factura;
public String getFecha_factura(){
	return this.fecha_factura;
}
public String fecha_formulacion;
public String getFecha_formulacion(){
	return this.fecha_formulacion;
}
public String fecha_ingreso;
public String getFecha_ingreso(){
	return this.fecha_ingreso;
}
public java.util.Date FECHA_NULL;
public java.util.Date getFECHA_NULL(){
	return this.FECHA_NULL;
}
public String fecha_registro;
public String getFecha_registro(){
	return this.fecha_registro;
}
public String fecha_servicio;
public String getFecha_servicio(){
	return this.fecha_servicio;
}
public String fecha_vencimiento;
public String getFecha_vencimiento(){
	return this.fecha_vencimiento;
}
public String fuerza_militar;
public String getFuerza_militar(){
	return this.fuerza_militar;
}
public Integer HORA;
public Integer getHORA(){
	return this.HORA;
}
public String invima;
public String getInvima(){
	return this.invima;
}
public String laboratorio;
public String getLaboratorio(){
	return this.laboratorio;
}
public String lote;
public String getLote(){
	return this.lote;
}
public String lugar_dispensacion;
public String getLugar_dispensacion(){
	return this.lugar_dispensacion;
}
public BigDecimal MEDCONTRATOS_ID;
public BigDecimal getMEDCONTRATOS_ID(){
	return this.MEDCONTRATOS_ID;
}
public String Narchivo;
public String getNarchivo(){
	return this.Narchivo;
}
public String nombre_medicamento;
public String getNombre_medicamento(){
	return this.nombre_medicamento;
}
public String numero;
public String getNumero(){
	return this.numero;
}
public String numero_factura;
public String getNumero_factura(){
	return this.numero_factura;
}
public String numero_formula;
public String getNumero_formula(){
	return this.numero_formula;
}
public String observaciones;
public String getObservaciones(){
	return this.observaciones;
}
public String origen_formulacion;
public String getOrigen_formulacion(){
	return this.origen_formulacion;
}
public String periodo;
public String getPeriodo(){
	return this.periodo;
}
public String prefijo;
public String getPrefijo(){
	return this.prefijo;
}
public String presentacion;
public String getPresentacion(){
	return this.presentacion;
}
public BigDecimal PRESTADOR;
public BigDecimal getPRESTADOR(){
	return this.PRESTADOR;
}
public String producto_comercial;
public String getProducto_comercial(){
	return this.producto_comercial;
}
public String servicio;
public String getServicio(){
	return this.servicio;
}
public String ssmp;
public String getSsmp(){
	return this.ssmp;
}
public String subtotal;
public String getSubtotal(){
	return this.subtotal;
}
public String tipificacion;
public String getTipificacion(){
	return this.tipificacion;
}
public String tipo;
public String getTipo(){
	return this.tipo;
}
public String tipo_documento;
public String getTipo_documento(){
	return this.tipo_documento;
}
public String tipo_formula;
public String getTipo_formula(){
	return this.tipo_formula;
}
public String tipo_servicio;
public String getTipo_servicio(){
	return this.tipo_servicio;
}
public BigDecimal TipoRespuesta;
public BigDecimal getTipoRespuesta(){
	return this.TipoRespuesta;
}
public String tirilla;
public String getTirilla(){
	return this.tirilla;
}
public String unidad_medida;
public String getUnidad_medida(){
	return this.unidad_medida;
}
public String valor_gravado;
public String getValor_gravado(){
	return this.valor_gravado;
}
public String valor_intermediacion;
public String getValor_intermediacion(){
	return this.valor_intermediacion;
}
public String valor_total;
public String getValor_total(){
	return this.valor_total;
}
public String valor_unitario;
public String getValor_unitario(){
	return this.valor_unitario;
}
public String via_administracion;
public String getVia_administracion(){
	return this.via_administracion;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String PathStorage;
public String getPathStorage(){
	return this.PathStorage;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Integer CargueArchivoId;
public Integer getCargueArchivoId(){
	return this.CargueArchivoId;
}
public String fechaArchivoErrores;
public String getFechaArchivoErrores(){
	return this.fechaArchivoErrores;
}
public Integer nErroresArchivo;
public Integer getNErroresArchivo(){
	return this.nErroresArchivo;
}
public Integer nRegArchivo;
public Integer getNRegArchivo(){
	return this.nRegArchivo;
}
public BigDecimal vArchivo_Id;
public BigDecimal getVArchivo_Id(){
	return this.vArchivo_Id;
}
public Integer vCantRegistros;
public Integer getVCantRegistros(){
	return this.vCantRegistros;
}
public String vEstadoCarga;
public String getVEstadoCarga(){
	return this.vEstadoCarga;
}
public BigDecimal vIdTipoArchivo;
public BigDecimal getVIdTipoArchivo(){
	return this.vIdTipoArchivo;
}
public String vNombreArchivo;
public String getVNombreArchivo(){
	return this.vNombreArchivo;
}
public String vNombreTipoArchivo;
public String getVNombreTipoArchivo(){
	return this.vNombreTipoArchivo;
}
public java.util.Date vPeriodo;
public java.util.Date getVPeriodo(){
	return this.vPeriodo;
}
public BigDecimal vRecepcionId;
public BigDecimal getVRecepcionId(){
	return this.vRecepcionId;
}
public String vTipoArchivo;
public String getVTipoArchivo(){
	return this.vTipoArchivo;
}
public Integer contador;
public Integer getContador(){
	return this.contador;
}
public String eCIE10;
public String getECIE10(){
	return this.eCIE10;
}
public String eComercial;
public String getEComercial(){
	return this.eComercial;
}
public String eConcentracion;
public String getEConcentracion(){
	return this.eConcentracion;
}
public String eCTC;
public String getECTC(){
	return this.eCTC;
}
public String eCum;
public String getECum(){
	return this.eCum;
}
public String eCUPS;
public String getECUPS(){
	return this.eCUPS;
}
public String eESM;
public String getEESM(){
	return this.eESM;
}
public String eGeneral;
public String getEGeneral(){
	return this.eGeneral;
}
public String eGenerico;
public String getEGenerico(){
	return this.eGenerico;
}
public String eInvima;
public String getEInvima(){
	return this.eInvima;
}
public String eLaboratorio;
public String getELaboratorio(){
	return this.eLaboratorio;
}
public String ePersona;
public String getEPersona(){
	return this.ePersona;
}
public String ePresentacion;
public String getEPresentacion(){
	return this.ePresentacion;
}
public String eSSMP;
public String getESSMP(){
	return this.eSSMP;
}
public String eTipoFormula;
public String getETipoFormula(){
	return this.eTipoFormula;
}
public String eUmedida;
public String getEUmedida(){
	return this.eUmedida;
}
public String eViaAdministracion;
public String getEViaAdministracion(){
	return this.eViaAdministracion;
}
public Integer code;
public Integer getCode(){
	return this.code;
}
public String context;
public String getContext(){
	return this.context;
}
public String job;
public String getJob(){
	return this.job;
}
public String message;
public String getMessage(){
	return this.message;
}
public java.util.Date moment;
public java.util.Date getMoment(){
	return this.moment;
}
public String origen;
public String getOrigen(){
	return this.origen;
}
public Integer priority;
public Integer getPriority(){
	return this.priority;
}
public String project;
public String getProject(){
	return this.project;
}
public String server_destino;
public String getServer_destino(){
	return this.server_destino;
}
public String server_origen;
public String getServer_origen(){
	return this.server_origen;
}
public String service_name_destino;
public String getService_name_destino(){
	return this.service_name_destino;
}
public String service_name_origen;
public String getService_name_origen(){
	return this.service_name_origen;
}
public String user_destino;
public String getUser_destino(){
	return this.user_destino;
}
public String user_origen;
public String getUser_origen(){
	return this.user_origen;
}
public BigDecimal Cerrada;
public BigDecimal getCerrada(){
	return this.Cerrada;
}
public BigDecimal Editada;
public BigDecimal getEditada(){
	return this.Editada;
}
public BigDecimal Editando;
public BigDecimal getEditando(){
	return this.Editando;
}
public BigDecimal Finalizada;
public BigDecimal getFinalizada(){
	return this.Finalizada;
}
public BigDecimal Iniciada;
public BigDecimal getIniciada(){
	return this.Iniciada;
}
public BigDecimal Manual;
public BigDecimal getManual(){
	return this.Manual;
}
public BigDecimal SinInniciar;
public BigDecimal getSinInniciar(){
	return this.SinInniciar;
}
public BigDecimal estActivo;
public BigDecimal getEstActivo(){
	return this.estActivo;
}
public BigDecimal estCancelado;
public BigDecimal getEstCancelado(){
	return this.estCancelado;
}
public BigDecimal estEnProceso;
public BigDecimal getEstEnProceso(){
	return this.estEnProceso;
}
public BigDecimal estErrorArchivo;
public BigDecimal getEstErrorArchivo(){
	return this.estErrorArchivo;
}
public BigDecimal estErrorProcesamiento;
public BigDecimal getEstErrorProcesamiento(){
	return this.estErrorProcesamiento;
}
public BigDecimal estInactivo;
public BigDecimal getEstInactivo(){
	return this.estInactivo;
}
public BigDecimal estPausado;
public BigDecimal getEstPausado(){
	return this.estPausado;
}
public BigDecimal estProcesado;
public BigDecimal getEstProcesado(){
	return this.estProcesado;
}
public BigDecimal EstValidado;
public BigDecimal getEstValidado(){
	return this.EstValidado;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public Integer BANDERA_EJECUCION;
public Integer getBANDERA_EJECUCION(){
	return this.BANDERA_EJECUCION;
}
public BigDecimal DCARGUE_ID;
public BigDecimal getDCARGUE_ID(){
	return this.DCARGUE_ID;
}
public String DESTINO;
public String getDESTINO(){
	return this.DESTINO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public BigDecimal JOB_ID;
public BigDecimal getJOB_ID(){
	return this.JOB_ID;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public BigDecimal RECEPCION_ID;
public BigDecimal getRECEPCION_ID(){
	return this.RECEPCION_ID;
}
public Integer TJOB;
public Integer getTJOB(){
	return this.TJOB;
}
public Integer EstadoArchivo;
public Integer getEstadoArchivo(){
	return this.EstadoArchivo;
}
public java.util.Date Fauditoria;
public java.util.Date getFauditoria(){
	return this.Fauditoria;
}
public BigDecimal HAUDITORIA_ID;
public BigDecimal getHAUDITORIA_ID(){
	return this.HAUDITORIA_ID;
}
public String Nfactura;
public String getNfactura(){
	return this.Nfactura;
}
public String Sprefijo;
public String getSprefijo(){
	return this.Sprefijo;
}
public Double SumaFactura;
public Double getSumaFactura(){
	return this.SumaFactura;
}
public Double SumaGlosas;
public Double getSumaGlosas(){
	return this.SumaGlosas;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public String mail_Password;
public String getMail_Password(){
	return this.mail_Password;
}
public String mail_SenderName;
public String getMail_SenderName(){
	return this.mail_SenderName;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
public BigDecimal AfiliacionDerechos;
public BigDecimal getAfiliacionDerechos(){
	return this.AfiliacionDerechos;
}
public String AfiliacionDerechosD;
public String getAfiliacionDerechosD(){
	return this.AfiliacionDerechosD;
}
public BigDecimal AfiliacionInactiva;
public BigDecimal getAfiliacionInactiva(){
	return this.AfiliacionInactiva;
}
public String AfiliacionInactivaD;
public String getAfiliacionInactivaD(){
	return this.AfiliacionInactivaD;
}
public BigDecimal AutorizacionCobrado;
public BigDecimal getAutorizacionCobrado(){
	return this.AutorizacionCobrado;
}
public String AutorizacionCobradoD;
public String getAutorizacionCobradoD(){
	return this.AutorizacionCobradoD;
}
public BigDecimal AutorizacionCups;
public BigDecimal getAutorizacionCups(){
	return this.AutorizacionCups;
}
public String AutorizacionCupsD;
public String getAutorizacionCupsD(){
	return this.AutorizacionCupsD;
}
public BigDecimal AutorizacionNoExiste;
public BigDecimal getAutorizacionNoExiste(){
	return this.AutorizacionNoExiste;
}
public String AutorizacionNoExisteD;
public String getAutorizacionNoExisteD(){
	return this.AutorizacionNoExisteD;
}
public BigDecimal AutorizacionPersona;
public BigDecimal getAutorizacionPersona(){
	return this.AutorizacionPersona;
}
public String AutorizacionPersonaD;
public String getAutorizacionPersonaD(){
	return this.AutorizacionPersonaD;
}
public BigDecimal AutorizacionPrestador;
public BigDecimal getAutorizacionPrestador(){
	return this.AutorizacionPrestador;
}
public String AutorizacionPrestadorD;
public String getAutorizacionPrestadorD(){
	return this.AutorizacionPrestadorD;
}
public BigDecimal CantidadFormulada;
public BigDecimal getCantidadFormulada(){
	return this.CantidadFormulada;
}
public String CantidadFormuladaD;
public String getCantidadFormuladaD(){
	return this.CantidadFormuladaD;
}
public BigDecimal FacturaAuditada;
public BigDecimal getFacturaAuditada(){
	return this.FacturaAuditada;
}
public String FacturaAuditadaD;
public String getFacturaAuditadaD(){
	return this.FacturaAuditadaD;
}
public BigDecimal MedicamentoNoPactado;
public BigDecimal getMedicamentoNoPactado(){
	return this.MedicamentoNoPactado;
}
public String MedicamentoNoPactadoD;
public String getMedicamentoNoPactadoD(){
	return this.MedicamentoNoPactadoD;
}
public BigDecimal PorcetajeConsumo;
public BigDecimal getPorcetajeConsumo(){
	return this.PorcetajeConsumo;
}
public String PorcetajeConsumoD;
public String getPorcetajeConsumoD(){
	return this.PorcetajeConsumoD;
}
public BigDecimal SumaFacturas;
public BigDecimal getSumaFacturas(){
	return this.SumaFacturas;
}
public String SumaFacturasD;
public String getSumaFacturasD(){
	return this.SumaFacturasD;
}
public BigDecimal TiempoEntrega;
public BigDecimal getTiempoEntrega(){
	return this.TiempoEntrega;
}
public String TiempoEntregaD;
public String getTiempoEntregaD(){
	return this.TiempoEntregaD;
}
public BigDecimal ValorDiferente;
public BigDecimal getValorDiferente(){
	return this.ValorDiferente;
}
public String ValorDiferenteD;
public String getValorDiferenteD(){
	return this.ValorDiferenteD;
}
public BigDecimal ValorNoPactado;
public BigDecimal getValorNoPactado(){
	return this.ValorNoPactado;
}
public String ValorNoPactadoD;
public String getValorNoPactadoD(){
	return this.ValorNoPactadoD;
}
public BigDecimal VidaUtil;
public BigDecimal getVidaUtil(){
	return this.VidaUtil;
}
public String VidaUtilD;
public String getVidaUtilD(){
	return this.VidaUtilD;
}
public BigDecimal AUDITORIA_ID;
public BigDecimal getAUDITORIA_ID(){
	return this.AUDITORIA_ID;
}
public BigDecimal ETAPASNORMATIVIDAD_ID;
public BigDecimal getETAPASNORMATIVIDAD_ID(){
	return this.ETAPASNORMATIVIDAD_ID;
}
public java.util.Date FRADICADO;
public java.util.Date getFRADICADO(){
	return this.FRADICADO;
}
public BigDecimal NORMATIVIDAD_ETAPA_ID;
public BigDecimal getNORMATIVIDAD_ETAPA_ID(){
	return this.NORMATIVIDAD_ETAPA_ID;
}
public BigDecimal NORMATIVIDAD_GLOSA_ID;
public BigDecimal getNORMATIVIDAD_GLOSA_ID(){
	return this.NORMATIVIDAD_GLOSA_ID;
}
public Double SUMATORIA;
public Double getSUMATORIA(){
	return this.SUMATORIA;
}
public Double SUMATORIA_FACTURA;
public Double getSUMATORIA_FACTURA(){
	return this.SUMATORIA_FACTURA;
}
public BigDecimal UORG_ID;
public BigDecimal getUORG_ID(){
	return this.UORG_ID;
}
public BigDecimal USUARIOS_ID;
public BigDecimal getUSUARIOS_ID(){
	return this.USUARIOS_ID;
}
public Integer VIDA_UTIL;
public Integer getVIDA_UTIL(){
	return this.VIDA_UTIL;
}
public java.util.Date vFechaFinContrato;
public java.util.Date getVFechaFinContrato(){
	return this.vFechaFinContrato;
}
public java.util.Date vFechaIniContrato;
public java.util.Date getVFechaIniContrato(){
	return this.vFechaIniContrato;
}
public BigDecimal vIntermediacionDisp;
public BigDecimal getVIntermediacionDisp(){
	return this.vIntermediacionDisp;
}
public BigDecimal vIntermediacionSum;
public BigDecimal getVIntermediacionSum(){
	return this.vIntermediacionSum;
}
public String vTipificacion;
public String getVTipificacion(){
	return this.vTipificacion;
}
public String vTipoArchivoSigla;
public String getVTipoArchivoSigla(){
	return this.vTipoArchivoSigla;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CargueServicios";
	private final String projectName = "ACM_CONTROL_AUDITORIA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CargueServicios.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CargueServicios.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								errorCode = null;
								tDie_1Process(globalMap);
								if (!"failure".equals(status)) {
									status = "end";
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tHashInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					errorCode = null;
					tDie_1Process(globalMap);
					if (!"failure".equals(status)) {
						status = "end";
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public static class DSERVICIOStruct implements routines.system.IPersistableRow<DSERVICIOStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 500;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return "'0'";
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "NUMERO DE LA FACTURA ";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 50;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "NUMERO DE DOCUMENTO DEL PACIENTE";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "TIPO DE DOCUMENTO DEL PACIENTE";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String CODIGO_CUPS;

				public String getCODIGO_CUPS () {
					return this.CODIGO_CUPS;
				}

				public Boolean CODIGO_CUPSIsNullable(){
				    return false;
				}
				public Boolean CODIGO_CUPSIsKey(){
				    return false;
				}
				public Integer CODIGO_CUPSLength(){
				    return 50;
				}
				public Integer CODIGO_CUPSPrecision(){
				    return 0;
				}
				public String CODIGO_CUPSDefault(){
				
					return null;
				
				}
				public String CODIGO_CUPSComment(){
				
				    return "CODIGO CUPS DEL SERVICIO";
				
				}
				public String CODIGO_CUPSPattern(){
				
					return "";
				
				}
				public String CODIGO_CUPSOriginalDbColumnName(){
				
					return "CODIGO_CUPS";
				
				}

				
			    public String DESCRIPCION_CUPS;

				public String getDESCRIPCION_CUPS () {
					return this.DESCRIPCION_CUPS;
				}

				public Boolean DESCRIPCION_CUPSIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_CUPSIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_CUPSLength(){
				    return 500;
				}
				public Integer DESCRIPCION_CUPSPrecision(){
				    return 0;
				}
				public String DESCRIPCION_CUPSDefault(){
				
					return null;
				
				}
				public String DESCRIPCION_CUPSComment(){
				
				    return "DESCRIPCION DEL CODIGO CUPS DEL SERVICIO";
				
				}
				public String DESCRIPCION_CUPSPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_CUPSOriginalDbColumnName(){
				
					return "DESCRIPCION_CUPS";
				
				}

				
			    public String TSERVICIO;

				public String getTSERVICIO () {
					return this.TSERVICIO;
				}

				public Boolean TSERVICIOIsNullable(){
				    return true;
				}
				public Boolean TSERVICIOIsKey(){
				    return false;
				}
				public Integer TSERVICIOLength(){
				    return 50;
				}
				public Integer TSERVICIOPrecision(){
				    return 0;
				}
				public String TSERVICIODefault(){
				
					return null;
				
				}
				public String TSERVICIOComment(){
				
				    return "TIPO DE SERVICIO";
				
				}
				public String TSERVICIOPattern(){
				
					return "";
				
				}
				public String TSERVICIOOriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return 100;
				}
				public Integer SERVICIOPrecision(){
				    return 0;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "SERVICIO";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				
			    public String DESCRIPCION_SERVICIO;

				public String getDESCRIPCION_SERVICIO () {
					return this.DESCRIPCION_SERVICIO;
				}

				public Boolean DESCRIPCION_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_SERVICIOIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_SERVICIOLength(){
				    return 500;
				}
				public Integer DESCRIPCION_SERVICIOPrecision(){
				    return 0;
				}
				public String DESCRIPCION_SERVICIODefault(){
				
					return null;
				
				}
				public String DESCRIPCION_SERVICIOComment(){
				
				    return "DESCRIPCION DEL SERVICIO";
				
				}
				public String DESCRIPCION_SERVICIOPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_SERVICIOOriginalDbColumnName(){
				
					return "DESCRIPCION_SERVICIO";
				
				}

				
			    public java.util.Date FSERVICIO;

				public java.util.Date getFSERVICIO () {
					return this.FSERVICIO;
				}

				public Boolean FSERVICIOIsNullable(){
				    return false;
				}
				public Boolean FSERVICIOIsKey(){
				    return false;
				}
				public Integer FSERVICIOLength(){
				    return 7;
				}
				public Integer FSERVICIOPrecision(){
				    return 0;
				}
				public String FSERVICIODefault(){
				
					return null;
				
				}
				public String FSERVICIOComment(){
				
				    return "FECHA DEL SERVICIO";
				
				}
				public String FSERVICIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FSERVICIOOriginalDbColumnName(){
				
					return "FSERVICIO";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return 0;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "0";
				
				}
				public String VUNITARIOComment(){
				
				    return "CALOR UNITARIO";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return false;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return 0;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "0";
				
				}
				public String CANTIDADComment(){
				
				    return "CANTIDAD DE SERVICIOS";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return 0;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "0";
				
				}
				public String VTOTALComment(){
				
				    return "VALOR TOTAL";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public String COD_AUTORIZACION;

				public String getCOD_AUTORIZACION () {
					return this.COD_AUTORIZACION;
				}

				public Boolean COD_AUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean COD_AUTORIZACIONIsKey(){
				    return false;
				}
				public Integer COD_AUTORIZACIONLength(){
				    return 50;
				}
				public Integer COD_AUTORIZACIONPrecision(){
				    return 0;
				}
				public String COD_AUTORIZACIONDefault(){
				
					return null;
				
				}
				public String COD_AUTORIZACIONComment(){
				
				    return "CODIGO DE AUTORIZACION";
				
				}
				public String COD_AUTORIZACIONPattern(){
				
					return "";
				
				}
				public String COD_AUTORIZACIONOriginalDbColumnName(){
				
					return "COD_AUTORIZACION";
				
				}

				
			    public String CODIGO_CIE10;

				public String getCODIGO_CIE10 () {
					return this.CODIGO_CIE10;
				}

				public Boolean CODIGO_CIE10IsNullable(){
				    return true;
				}
				public Boolean CODIGO_CIE10IsKey(){
				    return false;
				}
				public Integer CODIGO_CIE10Length(){
				    return 50;
				}
				public Integer CODIGO_CIE10Precision(){
				    return 0;
				}
				public String CODIGO_CIE10Default(){
				
					return null;
				
				}
				public String CODIGO_CIE10Comment(){
				
				    return "CODIGO DEL CIE10";
				
				}
				public String CODIGO_CIE10Pattern(){
				
					return "";
				
				}
				public String CODIGO_CIE10OriginalDbColumnName(){
				
					return "CODIGO_CIE10";
				
				}

				
			    public String DESCRIPCION_CIE10;

				public String getDESCRIPCION_CIE10 () {
					return this.DESCRIPCION_CIE10;
				}

				public Boolean DESCRIPCION_CIE10IsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_CIE10IsKey(){
				    return false;
				}
				public Integer DESCRIPCION_CIE10Length(){
				    return 500;
				}
				public Integer DESCRIPCION_CIE10Precision(){
				    return 0;
				}
				public String DESCRIPCION_CIE10Default(){
				
					return null;
				
				}
				public String DESCRIPCION_CIE10Comment(){
				
				    return "DESCRIPCION DEL CODIGO CIE10";
				
				}
				public String DESCRIPCION_CIE10Pattern(){
				
					return "";
				
				}
				public String DESCRIPCION_CIE10OriginalDbColumnName(){
				
					return "DESCRIPCION_CIE10";
				
				}

				
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return 0;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return null;
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "FK - RCA_AUTORIZACION - APLICA CUANDO EN EL SISTEMA EXISTE UNA AUTORIZACION PARA EL CODIGO DE LA FACTURA";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "'SYSDATE'";
				
				}
				public String FECHAComment(){
				
				    return "Fecha de registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 500;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "Prefijo de la factura";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return 0;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return null;
				
				}
				public String CIE10_IDComment(){
				
				    return "FK - GEN_CIE10";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return null;
				
				}
				public String CUPS_IDComment(){
				
				    return "FK - GEN_CUPS";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return 0;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return null;
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "FK - MED_PRODUCTOS";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return true;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return null;
				
				}
				public String PERSONAS_IDComment(){
				
				    return "FK - GEN_PERSONAS";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public BigDecimal SERVICIOS_ID;

				public BigDecimal getSERVICIOS_ID () {
					return this.SERVICIOS_ID;
				}

				public Boolean SERVICIOS_IDIsNullable(){
				    return true;
				}
				public Boolean SERVICIOS_IDIsKey(){
				    return false;
				}
				public Integer SERVICIOS_IDLength(){
				    return 0;
				}
				public Integer SERVICIOS_IDPrecision(){
				    return null;
				}
				public String SERVICIOS_IDDefault(){
				
					return null;
				
				}
				public String SERVICIOS_IDComment(){
				
				    return "FK - GEN_SERVICIOS";
				
				}
				public String SERVICIOS_IDPattern(){
				
					return "";
				
				}
				public String SERVICIOS_IDOriginalDbColumnName(){
				
					return "SERVICIOS_ID";
				
				}

				
			    public BigDecimal INTFUNCIONAL;

				public BigDecimal getINTFUNCIONAL () {
					return this.INTFUNCIONAL;
				}

				public Boolean INTFUNCIONALIsNullable(){
				    return true;
				}
				public Boolean INTFUNCIONALIsKey(){
				    return false;
				}
				public Integer INTFUNCIONALLength(){
				    return 0;
				}
				public Integer INTFUNCIONALPrecision(){
				    return null;
				}
				public String INTFUNCIONALDefault(){
				
					return null;
				
				}
				public String INTFUNCIONALComment(){
				
				    return "Determina si es por integraci\u00F3n funcional 1:SI, 0:NO";
				
				}
				public String INTFUNCIONALPattern(){
				
					return "";
				
				}
				public String INTFUNCIONALOriginalDbColumnName(){
				
					return "INTFUNCIONAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
					this.TSERVICIO = readString(dis);
					
					this.SERVICIO = readString(dis);
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
					this.FSERVICIO = readDate(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.COD_AUTORIZACION = readString(dis);
					
					this.CODIGO_CIE10 = readString(dis);
					
					this.DESCRIPCION_CIE10 = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
					this.TSERVICIO = readString(dis);
					
					this.SERVICIO = readString(dis);
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
					this.FSERVICIO = readDate(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.COD_AUTORIZACION = readString(dis);
					
					this.CODIGO_CIE10 = readString(dis);
					
					this.DESCRIPCION_CIE10 = readString(dis);
					
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
						this.SERVICIOS_ID = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// String
				
						writeString(this.TSERVICIO,dos);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FSERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.COD_AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODIGO_CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CIE10,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTFUNCIONAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// String
				
						writeString(this.TSERVICIO,dos);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// java.util.Date
				
						writeDate(this.FSERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.COD_AUTORIZACION,dos);
					
					// String
				
						writeString(this.CODIGO_CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CIE10,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SERVICIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTFUNCIONAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",CODIGO_CUPS="+CODIGO_CUPS);
		sb.append(",DESCRIPCION_CUPS="+DESCRIPCION_CUPS);
		sb.append(",TSERVICIO="+TSERVICIO);
		sb.append(",SERVICIO="+SERVICIO);
		sb.append(",DESCRIPCION_SERVICIO="+DESCRIPCION_SERVICIO);
		sb.append(",FSERVICIO="+String.valueOf(FSERVICIO));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",COD_AUTORIZACION="+COD_AUTORIZACION);
		sb.append(",CODIGO_CIE10="+CODIGO_CIE10);
		sb.append(",DESCRIPCION_CIE10="+DESCRIPCION_CIE10);
		sb.append(",AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",SERVICIOS_ID="+String.valueOf(SERVICIOS_ID));
		sb.append(",INTFUNCIONAL="+String.valueOf(INTFUNCIONAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(DSERVICIOStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return null;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return "";
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				
			    public BigDecimal CODPRESTADOR;

				public BigDecimal getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return null;
				}
				public Integer CODPRESTADORPrecision(){
				    return null;
				}
				public String CODPRESTADORDefault(){
				
					return "";
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal INTFUNCIONAL;

				public BigDecimal getINTFUNCIONAL () {
					return this.INTFUNCIONAL;
				}

				public Boolean INTFUNCIONALIsNullable(){
				    return true;
				}
				public Boolean INTFUNCIONALIsKey(){
				    return false;
				}
				public Integer INTFUNCIONALLength(){
				    return null;
				}
				public Integer INTFUNCIONALPrecision(){
				    return null;
				}
				public String INTFUNCIONALDefault(){
				
					return "";
				
				}
				public String INTFUNCIONALComment(){
				
				    return "";
				
				}
				public String INTFUNCIONALPattern(){
				
					return "";
				
				}
				public String INTFUNCIONALOriginalDbColumnName(){
				
					return "INTFUNCIONAL";
				
				}

				
			    public String RECEPCION_ID;

				public String getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String CODIGO_CUPS;

				public String getCODIGO_CUPS () {
					return this.CODIGO_CUPS;
				}

				public Boolean CODIGO_CUPSIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CUPSIsKey(){
				    return false;
				}
				public Integer CODIGO_CUPSLength(){
				    return null;
				}
				public Integer CODIGO_CUPSPrecision(){
				    return null;
				}
				public String CODIGO_CUPSDefault(){
				
					return null;
				
				}
				public String CODIGO_CUPSComment(){
				
				    return "";
				
				}
				public String CODIGO_CUPSPattern(){
				
					return "";
				
				}
				public String CODIGO_CUPSOriginalDbColumnName(){
				
					return "CODIGO_CUPS";
				
				}

				
			    public String DESCRIPCION_CUPS;

				public String getDESCRIPCION_CUPS () {
					return this.DESCRIPCION_CUPS;
				}

				public Boolean DESCRIPCION_CUPSIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_CUPSIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_CUPSLength(){
				    return null;
				}
				public Integer DESCRIPCION_CUPSPrecision(){
				    return null;
				}
				public String DESCRIPCION_CUPSDefault(){
				
					return null;
				
				}
				public String DESCRIPCION_CUPSComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_CUPSPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_CUPSOriginalDbColumnName(){
				
					return "DESCRIPCION_CUPS";
				
				}

				
			    public BigDecimal TSERVICIO;

				public BigDecimal getTSERVICIO () {
					return this.TSERVICIO;
				}

				public Boolean TSERVICIOIsNullable(){
				    return true;
				}
				public Boolean TSERVICIOIsKey(){
				    return false;
				}
				public Integer TSERVICIOLength(){
				    return null;
				}
				public Integer TSERVICIOPrecision(){
				    return null;
				}
				public String TSERVICIODefault(){
				
					return "";
				
				}
				public String TSERVICIOComment(){
				
				    return "";
				
				}
				public String TSERVICIOPattern(){
				
					return "";
				
				}
				public String TSERVICIOOriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String DESCRIPCION_SERVICIO;

				public String getDESCRIPCION_SERVICIO () {
					return this.DESCRIPCION_SERVICIO;
				}

				public Boolean DESCRIPCION_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_SERVICIOIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_SERVICIOLength(){
				    return null;
				}
				public Integer DESCRIPCION_SERVICIOPrecision(){
				    return null;
				}
				public String DESCRIPCION_SERVICIODefault(){
				
					return null;
				
				}
				public String DESCRIPCION_SERVICIOComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_SERVICIOPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_SERVICIOOriginalDbColumnName(){
				
					return "DESCRIPCION_SERVICIO";
				
				}

				
			    public BigDecimal TSERVICIO1;

				public BigDecimal getTSERVICIO1 () {
					return this.TSERVICIO1;
				}

				public Boolean TSERVICIO1IsNullable(){
				    return true;
				}
				public Boolean TSERVICIO1IsKey(){
				    return false;
				}
				public Integer TSERVICIO1Length(){
				    return null;
				}
				public Integer TSERVICIO1Precision(){
				    return null;
				}
				public String TSERVICIO1Default(){
				
					return "";
				
				}
				public String TSERVICIO1Comment(){
				
				    return "";
				
				}
				public String TSERVICIO1Pattern(){
				
					return "";
				
				}
				public String TSERVICIO1OriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String FSERVICIO;

				public String getFSERVICIO () {
					return this.FSERVICIO;
				}

				public Boolean FSERVICIOIsNullable(){
				    return true;
				}
				public Boolean FSERVICIOIsKey(){
				    return false;
				}
				public Integer FSERVICIOLength(){
				    return null;
				}
				public Integer FSERVICIOPrecision(){
				    return null;
				}
				public String FSERVICIODefault(){
				
					return null;
				
				}
				public String FSERVICIOComment(){
				
				    return "";
				
				}
				public String FSERVICIOPattern(){
				
					return "";
				
				}
				public String FSERVICIOOriginalDbColumnName(){
				
					return "FSERVICIO";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return true;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return null;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return null;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return null;
				}
				public Integer CIE10Precision(){
				    return null;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return null;
				}
				public Integer DESCRIPCIONPrecision(){
				    return null;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return null;
				}
				public Integer SERVICIOPrecision(){
				    return null;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
		sb.append(",CODPRESTADOR="+String.valueOf(CODPRESTADOR));
		sb.append(",INTFUNCIONAL="+String.valueOf(INTFUNCIONAL));
		sb.append(",RECEPCION_ID="+RECEPCION_ID);
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",CODIGO_CUPS="+CODIGO_CUPS);
		sb.append(",DESCRIPCION_CUPS="+DESCRIPCION_CUPS);
		sb.append(",TSERVICIO="+String.valueOf(TSERVICIO));
		sb.append(",DESCRIPCION_SERVICIO="+DESCRIPCION_SERVICIO);
		sb.append(",TSERVICIO1="+String.valueOf(TSERVICIO1));
		sb.append(",FSERVICIO="+FSERVICIO);
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CIE10="+CIE10);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",SERVICIO="+SERVICIO);
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return null;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return "";
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				
			    public BigDecimal CODPRESTADOR;

				public BigDecimal getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return null;
				}
				public Integer CODPRESTADORPrecision(){
				    return null;
				}
				public String CODPRESTADORDefault(){
				
					return "";
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal INTFUNCIONAL;

				public BigDecimal getINTFUNCIONAL () {
					return this.INTFUNCIONAL;
				}

				public Boolean INTFUNCIONALIsNullable(){
				    return true;
				}
				public Boolean INTFUNCIONALIsKey(){
				    return false;
				}
				public Integer INTFUNCIONALLength(){
				    return null;
				}
				public Integer INTFUNCIONALPrecision(){
				    return null;
				}
				public String INTFUNCIONALDefault(){
				
					return "";
				
				}
				public String INTFUNCIONALComment(){
				
				    return "";
				
				}
				public String INTFUNCIONALPattern(){
				
					return "";
				
				}
				public String INTFUNCIONALOriginalDbColumnName(){
				
					return "INTFUNCIONAL";
				
				}

				
			    public String RECEPCION_ID;

				public String getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String CODIGO_CUPS;

				public String getCODIGO_CUPS () {
					return this.CODIGO_CUPS;
				}

				public Boolean CODIGO_CUPSIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CUPSIsKey(){
				    return false;
				}
				public Integer CODIGO_CUPSLength(){
				    return null;
				}
				public Integer CODIGO_CUPSPrecision(){
				    return null;
				}
				public String CODIGO_CUPSDefault(){
				
					return null;
				
				}
				public String CODIGO_CUPSComment(){
				
				    return "";
				
				}
				public String CODIGO_CUPSPattern(){
				
					return "";
				
				}
				public String CODIGO_CUPSOriginalDbColumnName(){
				
					return "CODIGO_CUPS";
				
				}

				
			    public String DESCRIPCION_CUPS;

				public String getDESCRIPCION_CUPS () {
					return this.DESCRIPCION_CUPS;
				}

				public Boolean DESCRIPCION_CUPSIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_CUPSIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_CUPSLength(){
				    return null;
				}
				public Integer DESCRIPCION_CUPSPrecision(){
				    return null;
				}
				public String DESCRIPCION_CUPSDefault(){
				
					return null;
				
				}
				public String DESCRIPCION_CUPSComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_CUPSPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_CUPSOriginalDbColumnName(){
				
					return "DESCRIPCION_CUPS";
				
				}

				
			    public BigDecimal TSERVICIO;

				public BigDecimal getTSERVICIO () {
					return this.TSERVICIO;
				}

				public Boolean TSERVICIOIsNullable(){
				    return true;
				}
				public Boolean TSERVICIOIsKey(){
				    return false;
				}
				public Integer TSERVICIOLength(){
				    return null;
				}
				public Integer TSERVICIOPrecision(){
				    return null;
				}
				public String TSERVICIODefault(){
				
					return "";
				
				}
				public String TSERVICIOComment(){
				
				    return "";
				
				}
				public String TSERVICIOPattern(){
				
					return "";
				
				}
				public String TSERVICIOOriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String DESCRIPCION_SERVICIO;

				public String getDESCRIPCION_SERVICIO () {
					return this.DESCRIPCION_SERVICIO;
				}

				public Boolean DESCRIPCION_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_SERVICIOIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_SERVICIOLength(){
				    return null;
				}
				public Integer DESCRIPCION_SERVICIOPrecision(){
				    return null;
				}
				public String DESCRIPCION_SERVICIODefault(){
				
					return null;
				
				}
				public String DESCRIPCION_SERVICIOComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_SERVICIOPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_SERVICIOOriginalDbColumnName(){
				
					return "DESCRIPCION_SERVICIO";
				
				}

				
			    public BigDecimal TSERVICIO1;

				public BigDecimal getTSERVICIO1 () {
					return this.TSERVICIO1;
				}

				public Boolean TSERVICIO1IsNullable(){
				    return true;
				}
				public Boolean TSERVICIO1IsKey(){
				    return false;
				}
				public Integer TSERVICIO1Length(){
				    return null;
				}
				public Integer TSERVICIO1Precision(){
				    return null;
				}
				public String TSERVICIO1Default(){
				
					return "";
				
				}
				public String TSERVICIO1Comment(){
				
				    return "";
				
				}
				public String TSERVICIO1Pattern(){
				
					return "";
				
				}
				public String TSERVICIO1OriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String FSERVICIO;

				public String getFSERVICIO () {
					return this.FSERVICIO;
				}

				public Boolean FSERVICIOIsNullable(){
				    return true;
				}
				public Boolean FSERVICIOIsKey(){
				    return false;
				}
				public Integer FSERVICIOLength(){
				    return null;
				}
				public Integer FSERVICIOPrecision(){
				    return null;
				}
				public String FSERVICIODefault(){
				
					return null;
				
				}
				public String FSERVICIOComment(){
				
				    return "";
				
				}
				public String FSERVICIOPattern(){
				
					return "";
				
				}
				public String FSERVICIOOriginalDbColumnName(){
				
					return "FSERVICIO";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return true;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return null;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return null;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return null;
				}
				public Integer CIE10Precision(){
				    return null;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return null;
				}
				public Integer DESCRIPCIONPrecision(){
				    return null;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return null;
				}
				public Integer SERVICIOPrecision(){
				    return null;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
		sb.append(",CODPRESTADOR="+String.valueOf(CODPRESTADOR));
		sb.append(",INTFUNCIONAL="+String.valueOf(INTFUNCIONAL));
		sb.append(",RECEPCION_ID="+RECEPCION_ID);
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",CODIGO_CUPS="+CODIGO_CUPS);
		sb.append(",DESCRIPCION_CUPS="+DESCRIPCION_CUPS);
		sb.append(",TSERVICIO="+String.valueOf(TSERVICIO));
		sb.append(",DESCRIPCION_SERVICIO="+DESCRIPCION_SERVICIO);
		sb.append(",TSERVICIO1="+String.valueOf(TSERVICIO1));
		sb.append(",FSERVICIO="+FSERVICIO);
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CIE10="+CIE10);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",SERVICIO="+SERVICIO);
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return null;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return "";
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				
			    public BigDecimal CODPRESTADOR;

				public BigDecimal getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return null;
				}
				public Integer CODPRESTADORPrecision(){
				    return null;
				}
				public String CODPRESTADORDefault(){
				
					return "";
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal INTFUNCIONAL;

				public BigDecimal getINTFUNCIONAL () {
					return this.INTFUNCIONAL;
				}

				public Boolean INTFUNCIONALIsNullable(){
				    return true;
				}
				public Boolean INTFUNCIONALIsKey(){
				    return false;
				}
				public Integer INTFUNCIONALLength(){
				    return null;
				}
				public Integer INTFUNCIONALPrecision(){
				    return null;
				}
				public String INTFUNCIONALDefault(){
				
					return "";
				
				}
				public String INTFUNCIONALComment(){
				
				    return "";
				
				}
				public String INTFUNCIONALPattern(){
				
					return "";
				
				}
				public String INTFUNCIONALOriginalDbColumnName(){
				
					return "INTFUNCIONAL";
				
				}

				
			    public String RECEPCION_ID;

				public String getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String CODIGO_CUPS;

				public String getCODIGO_CUPS () {
					return this.CODIGO_CUPS;
				}

				public Boolean CODIGO_CUPSIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CUPSIsKey(){
				    return false;
				}
				public Integer CODIGO_CUPSLength(){
				    return null;
				}
				public Integer CODIGO_CUPSPrecision(){
				    return null;
				}
				public String CODIGO_CUPSDefault(){
				
					return null;
				
				}
				public String CODIGO_CUPSComment(){
				
				    return "";
				
				}
				public String CODIGO_CUPSPattern(){
				
					return "";
				
				}
				public String CODIGO_CUPSOriginalDbColumnName(){
				
					return "CODIGO_CUPS";
				
				}

				
			    public String DESCRIPCION_CUPS;

				public String getDESCRIPCION_CUPS () {
					return this.DESCRIPCION_CUPS;
				}

				public Boolean DESCRIPCION_CUPSIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_CUPSIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_CUPSLength(){
				    return null;
				}
				public Integer DESCRIPCION_CUPSPrecision(){
				    return null;
				}
				public String DESCRIPCION_CUPSDefault(){
				
					return null;
				
				}
				public String DESCRIPCION_CUPSComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_CUPSPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_CUPSOriginalDbColumnName(){
				
					return "DESCRIPCION_CUPS";
				
				}

				
			    public BigDecimal TSERVICIO;

				public BigDecimal getTSERVICIO () {
					return this.TSERVICIO;
				}

				public Boolean TSERVICIOIsNullable(){
				    return true;
				}
				public Boolean TSERVICIOIsKey(){
				    return false;
				}
				public Integer TSERVICIOLength(){
				    return null;
				}
				public Integer TSERVICIOPrecision(){
				    return null;
				}
				public String TSERVICIODefault(){
				
					return "";
				
				}
				public String TSERVICIOComment(){
				
				    return "";
				
				}
				public String TSERVICIOPattern(){
				
					return "";
				
				}
				public String TSERVICIOOriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String DESCRIPCION_SERVICIO;

				public String getDESCRIPCION_SERVICIO () {
					return this.DESCRIPCION_SERVICIO;
				}

				public Boolean DESCRIPCION_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_SERVICIOIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_SERVICIOLength(){
				    return null;
				}
				public Integer DESCRIPCION_SERVICIOPrecision(){
				    return null;
				}
				public String DESCRIPCION_SERVICIODefault(){
				
					return null;
				
				}
				public String DESCRIPCION_SERVICIOComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_SERVICIOPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_SERVICIOOriginalDbColumnName(){
				
					return "DESCRIPCION_SERVICIO";
				
				}

				
			    public BigDecimal TSERVICIO1;

				public BigDecimal getTSERVICIO1 () {
					return this.TSERVICIO1;
				}

				public Boolean TSERVICIO1IsNullable(){
				    return true;
				}
				public Boolean TSERVICIO1IsKey(){
				    return false;
				}
				public Integer TSERVICIO1Length(){
				    return null;
				}
				public Integer TSERVICIO1Precision(){
				    return null;
				}
				public String TSERVICIO1Default(){
				
					return "";
				
				}
				public String TSERVICIO1Comment(){
				
				    return "";
				
				}
				public String TSERVICIO1Pattern(){
				
					return "";
				
				}
				public String TSERVICIO1OriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String FSERVICIO;

				public String getFSERVICIO () {
					return this.FSERVICIO;
				}

				public Boolean FSERVICIOIsNullable(){
				    return true;
				}
				public Boolean FSERVICIOIsKey(){
				    return false;
				}
				public Integer FSERVICIOLength(){
				    return null;
				}
				public Integer FSERVICIOPrecision(){
				    return null;
				}
				public String FSERVICIODefault(){
				
					return null;
				
				}
				public String FSERVICIOComment(){
				
				    return "";
				
				}
				public String FSERVICIOPattern(){
				
					return "";
				
				}
				public String FSERVICIOOriginalDbColumnName(){
				
					return "FSERVICIO";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return true;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return null;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return null;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return null;
				}
				public Integer CIE10Precision(){
				    return null;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return null;
				}
				public Integer DESCRIPCIONPrecision(){
				    return null;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return null;
				}
				public Integer SERVICIOPrecision(){
				    return null;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
		sb.append(",CODPRESTADOR="+String.valueOf(CODPRESTADOR));
		sb.append(",INTFUNCIONAL="+String.valueOf(INTFUNCIONAL));
		sb.append(",RECEPCION_ID="+RECEPCION_ID);
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",CODIGO_CUPS="+CODIGO_CUPS);
		sb.append(",DESCRIPCION_CUPS="+DESCRIPCION_CUPS);
		sb.append(",TSERVICIO="+String.valueOf(TSERVICIO));
		sb.append(",DESCRIPCION_SERVICIO="+DESCRIPCION_SERVICIO);
		sb.append(",TSERVICIO1="+String.valueOf(TSERVICIO1));
		sb.append(",FSERVICIO="+FSERVICIO);
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CIE10="+CIE10);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",SERVICIO="+SERVICIO);
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);
		tOracleInput_3Process(globalMap);

		row5Struct row5 = new row5Struct();
row5Struct row8 = row5;
DSERVICIOStruct DSERVICIO = new DSERVICIOStruct();






	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"DSERVICIO");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 10000;
            int commitCounter_tOracleOutput_1 = 0;
        int batchSize_tOracleOutput_1 = 10000;
        int batchSizeCounter_tOracleOutput_1=0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("ACM_DFACTURASERVICIO");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("ACM_DFACTURASERVICIO");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (RECEPCION_ID,FACTURA_ID,NUMERO_FACTURA,DOCUMENTO,TDOCUMENTOS_ID,CODIGO_CUPS,DESCRIPCION_CUPS,TSERVICIO,SERVICIO,DESCRIPCION_SERVICIO,FSERVICIO,VUNITARIO,CANTIDAD,VTOTAL,COD_AUTORIZACION,CODIGO_CIE10,DESCRIPCION_CIE10,AUTORIZACION_ID,FECHA,USUARIOS_ID,UORG_ID,PREFIJO,CIE10_ID,CUPS_ID,PRODUCTOS_ID,PERSONAS_ID,SERVICIOS_ID,INTFUNCIONAL) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
DSERVICIOStruct DSERVICIO_tmp = new DSERVICIOStruct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_CargueServicios_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT \nAU.ID AS AUTORIZACION_ID,\nDSER.CODPRESTADOR,\nCASE \nWHEN \nFU.SIGLA <> FUP.SIGLA THEN 1\nELSE 0 END AS INTFU"
+"NCIONAL,\n"+context.RECEPCION_ID+" AS RECEPCION_ID,\nFAC.ID AS FACTURA_ID,\nFAC.NUMERO AS NUMERO_FACTURA,\nFAC.PREFIJO,\nDSER.SIGLA,\nDSER.DOCUMENTO,\nDS"
+"ER.TDOCUMENTOS_ID,\nDSER.CODIGO  AS CODIGO_CUPS,\nNVL(DECODE ('AM', DSER.SIGLA,DP2.DESCPRESENTACION,CU.NOMBRE),DSER.DESC"
+"RIPCION) AS DESCRIPCION_CUPS,\nDSER.TSERVICIO,\nNVL(DECODE ('AM', DSER.SIGLA,DP2.DESCPRESENTACION,CU.NOMBRE),DSER.DESCRI"
+"PCION) AS DESCRIPCION_SERVICIO,\nDECODE ('AM', DSER.SIGLA,2,1) AS TSERVICIO,\nDSER.FECHA AS FSERVICIO,\nDSER.VUNITARIO,"
+"\nDSER.CANTIDAD,\nDSER.VTOTAL,\nDSER.CODAUTORIZACION,\nDSER.CIE10,\nCIE.DESCRIPCION,\nSYSDATE AS FECHA,\nRE.USUARIOS_ID,"
+"\nRE.UORG_ID,\nCIE.ID AS CIE10_ID,\nCU.ID AS CUPS_ID,\nPER.ID AS PERSONAS_ID,\nCASE \nWHEN DSER.SERVICIO = 1 THEN 'A'\nWH"
+"EN DSER.SERVICIO = 2 THEN 'HG'\nWHEN DSER.SERVICIO = 3 THEN 'U'\nEND AS SERVICIO, PRO.ID AS PRODUCTOS_ID\nFROM (SELECT "
+"\n      CO.CODFACTURA, \n      CO.CODPRESTADOR,\n      CO.VCONSULTA AS VALOR, \n      CO.TDOCUMENTOS_ID,\n      CO.DOCUME"
+"NTO, \n      CO.CODCONSULTA AS CODIGO, \n      'AC' AS SIGLA, \n      TO_CHAR(CO.FECHA,'DD/MM/YYYY') AS FECHA, \n      C"
+"O.VCONSULTA AS VUNITARIO, \n      1 AS CANTIDAD,\n      CO.VNETOPAGAR AS VTOTAL,\n      CO.CODAUTORIZACION, \n      CO.C"
+"ODDIAGNOSTICOPPAL AS CIE10,\n      TO_NUMBER('') AS SERVICIO,\n      '' AS DESCRIPCION,\n	  1 AS TSERVICIO\n      FROM R"
+"IPS_CONSULTAS CO WHERE CO.JOBS_ID =   "+context.JOB_ID+"  \n       UNION ALL\n     SELECT \n      ME.CODFACTURA,\n      ME.CODPRESTADOR,\n      ME.VTOTAL AS VALOR, \n      ME."
+"TDOCUMENTOS_ID,\n      ME.DOCUMENTO, \n      ME.CODMEDICAMENTO AS CODIGO, \n      'AM' AS SIGLA, \n      TO_CHAR(ME.FSER"
+"VICIO,'DD/MM/YYYY') AS FECHA, \n      ME.VUNITARIO, \n      ME.CANTUNIDADES AS CANTIDAD,\n      ME.VTOTAL, \n      TO_CH"
+"AR(ME.CODAUTORIZACION) AS CODAUTORIZACION,\n      CIE.CODIGO AS CIE10,\n      TO_NUMBER('') AS SERVICIO,\n      '' AS DE"
+"SCRIPCION,\n	  2 AS TSERVICIO\n      FROM RIPS_MEDICAMENTOS ME \n      LEFT JOIN GEN_CIE10 CIE ON CIE.ID = ME.CIE10_ID\n"
+"      WHERE ME.JOBS_ID =    "+context.JOB_ID+"  \n       UNION ALL\n      SELECT \n      CODFACTURA, \n      CODPRESTADOR,\n      VPROCEDIMIENTO AS VALOR,\n      TDO"
+"CUMENTOS_ID,\n      DOCUMENTO, \n      CODPROCEDIMIENTO AS CODIGO, \n      'AP' AS SIGLA, \n      TO_CHAR(FECHA,'DD/MM/Y"
+"YYY') AS FECHA,\n      VPROCEDIMIENTO AS VUNITARIO,\n      1 AS CANTIDAD,\n      VPROCEDIMIENTO AS VTOTAL,\n      CODAUT"
+"ORIZACION, \n      CODDIAGPPAL AS CIE10,\n      AMBITO AS SERVICIO,\n      '' AS DESCRIPCION,\n	  1 AS TSERVICIO\n      "
+"FROM RIPS_PROCEDIMIENTOS WHERE JOBS_ID =   "+context.JOB_ID+"  \n       UNION ALL \n      SELECT \n      AT.CODFACTURA, \n      AT.CODPRESTADOR,\n      AT.VTOTAL AS VALOR,\n      A"
+"T.TDOCUMENTOS_ID,\n      AT.DOCUMENTO, \n      AT.CODSERVICIO AS CODIGO, \n      'AT' AS SIGLA, \n      TO_CHAR(AT.FSERV"
+"ICIO,'DD/MM/YYYY')AS FECHA,  \n      AT.VUNITARIO, \n      AT.CANTIDAD,\n      AT.VTOTAL,\n      AT.CODAUTORIZACION,\n  "
+"    CIE.CODIGO AS CIE10,\n      TO_NUMBER('') AS SERVICIO,\n      SERVICIO AS DESCIPCION,\n	  DECODE(AT.TSERVICIO, 1, 3,"
+" 1) AS TSERVICIO\n      FROM RIPS_ATENCIONES AT\n      LEFT JOIN GEN_CIE10 CIE ON CIE.ID = AT.CIE10_ID\n      WHERE JOBS"
+"_ID =    "+context.JOB_ID+"   ) DSER\nINNER JOIN ACM_RECEPCION RE ON RE.ID = "+context.RECEPCION_ID+"\nINNER JOIN RIPS_JOBS RIPS ON RIPS.ID = RE.JOBS_ID \nLEFT JOIN GEN_CONTRATOS CON ON CON.ID = RIPS.CONTRATOS_ID\nLEFT J"
+"OIN GEN_UORG UOP ON UOP.ID = CON.UORG_ID\nLEFT JOIN GEN_UORG UOPR ON UOPR.ID = RIPS.ESM\nLEFT JOIN GEN_FUERZAS FUP ON FU"
+"P.ID = NVL(UOP.FUERZA_ID,UOPR.FUERZA_ID)\nINNER JOIN ACM_FACTURA FAC ON FAC.PREFIJO||FAC.NUMERO = DSER.CODFACTURA AND FA"
+"C.PRESTADOR_ID =  RE.PRESTADOR_ID\nINNER JOIN GEN_PERSONAS PER ON PER.DOCUMENTO = DSER.DOCUMENTO AND PER.TDOCUMENTOS_ID "
+"= DSER.TDOCUMENTOS_ID\nINNER JOIN GEN_UORG OU ON OU.ID = PER.ESMADSCRITO\nINNER JOIN GEN_FUERZAS FU ON FU.ID  = OU.FUERZ"
+"A_ID\nLEFT JOIN RCA_AUTORIZACION AU ON AU.CONSECUTIVO = DSER.CODAUTORIZACION\nLEFT JOIN GEN_CUPS CU ON CU.CODIGO = DSER."
+"CODIGO\nLEFT JOIN (SELECT \n                        DP.EXPEDIENTECUM AS CODIGO_CUMS_UNO,\n                        DP.EXP"
+"EDIENTECUM || CASE WHEN DP.CONSECUTIVOCUM IS NULL THEN NULL \n                                             										   "
+"WHEN DP.CONSECUTIVOCUM < 10 THEN '-0' || TO_CHAR(DP.CONSECUTIVOCUM)\n                                             						"
+"				   ELSE '-' || DP.CONSECUTIVOCUM\n                                             										   END AS CODIGO_CUMS_DOS,"
+"\n                        DP.EXPEDIENTECUM || CASE WHEN DP.CONSECUTIVOCUM IS NULL THEN NULL \n                           "
+"                  										   ELSE '-' || DP.CONSECUTIVOCUM\n                                             										   "
+"END AS CODIGO_CUMS_TRES,\n                    DP.DESCPRESENTACION,\n                    DP.PRODUCTOS_ID\n               "
+"     FROM MED_DPRODUCTOS DP\n                    WHERE DP.ESTREGISTRO_ID = 1)  DP2 ON (DP2.CODIGO_CUMS_UNO = DSER.CODIGO"
+" OR DP2.CODIGO_CUMS_DOS = DSER.CODIGO OR DP2.CODIGO_CUMS_TRES = DSER.CODIGO)  AND 'AM' = DSER.SIGLA\nLEFT JOIN MED_PRODU"
+"CTOS PRO ON PRO.ID = DP2.PRODUCTOS_ID\nLEFT JOIN GEN_CUPS CU ON CU.CODIGO = DECODE (DSER.SIGLA,'AM','',DSER.CODIGO) AND "
+"CU.ESTREGISTRO_ID = 1\nLEFT JOIN GEN_CIE10 CIE  ON CIE.CODIGO = DSER.CIE10 AND CIE.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row5.AUTORIZACION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row5.AUTORIZACION_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
						row5.AUTORIZACION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row5.CODPRESTADOR = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row5.CODPRESTADOR = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
						row5.CODPRESTADOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row5.INTFUNCIONAL = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(3) != null) {
						row5.INTFUNCIONAL = rs_tOracleInput_1.getBigDecimal(3);
					} else {
				
						row5.INTFUNCIONAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row5.RECEPCION_ID = null;
							} else {
	                         		
        	row5.RECEPCION_ID = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row5.FACTURA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row5.FACTURA_ID = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row5.NUMERO_FACTURA = null;
							} else {
	                         		
        	row5.NUMERO_FACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row5.PREFIJO = null;
							} else {
	                         		
        	row5.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row5.SIGLA = null;
							} else {
	                         		
        	row5.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row5.DOCUMENTO = null;
							} else {
	                         		
        	row5.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row5.TDOCUMENTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(10) != null) {
						row5.TDOCUMENTOS_ID = rs_tOracleInput_1.getBigDecimal(10);
					} else {
				
						row5.TDOCUMENTOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row5.CODIGO_CUPS = null;
							} else {
	                         		
        	row5.CODIGO_CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row5.DESCRIPCION_CUPS = null;
							} else {
	                         		
        	row5.DESCRIPCION_CUPS = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row5.TSERVICIO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(13) != null) {
						row5.TSERVICIO = rs_tOracleInput_1.getBigDecimal(13);
					} else {
				
						row5.TSERVICIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row5.DESCRIPCION_SERVICIO = null;
							} else {
	                         		
        	row5.DESCRIPCION_SERVICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 14, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row5.TSERVICIO1 = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(15) != null) {
						row5.TSERVICIO1 = rs_tOracleInput_1.getBigDecimal(15);
					} else {
				
						row5.TSERVICIO1 = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 16) {
								row5.FSERVICIO = null;
							} else {
	                         		
        	row5.FSERVICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 16, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 17) {
								row5.VUNITARIO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(17) != null) {
						row5.VUNITARIO = rs_tOracleInput_1.getBigDecimal(17);
					} else {
				
						row5.VUNITARIO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 18) {
								row5.CANTIDAD = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(18) != null) {
						row5.CANTIDAD = rs_tOracleInput_1.getBigDecimal(18);
					} else {
				
						row5.CANTIDAD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 19) {
								row5.VTOTAL = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(19) != null) {
						row5.VTOTAL = rs_tOracleInput_1.getBigDecimal(19);
					} else {
				
						row5.VTOTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 20) {
								row5.CODAUTORIZACION = null;
							} else {
	                         		
        	row5.CODAUTORIZACION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 20, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 21) {
								row5.CIE10 = null;
							} else {
	                         		
        	row5.CIE10 = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 21, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 22) {
								row5.DESCRIPCION = null;
							} else {
	                         		
        	row5.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 22, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 23) {
								row5.FECHA = null;
							} else {
										
			row5.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 23);
		                    }
							if(colQtyInRs_tOracleInput_1 < 24) {
								row5.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(24) != null) {
						row5.USUARIOS_ID = rs_tOracleInput_1.getBigDecimal(24);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 25) {
								row5.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(25) != null) {
						row5.UORG_ID = rs_tOracleInput_1.getBigDecimal(25);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 26) {
								row5.CIE10_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(26) != null) {
						row5.CIE10_ID = rs_tOracleInput_1.getBigDecimal(26);
					} else {
				
						row5.CIE10_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 27) {
								row5.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(27) != null) {
						row5.CUPS_ID = rs_tOracleInput_1.getBigDecimal(27);
					} else {
				
						row5.CUPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 28) {
								row5.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(28) != null) {
						row5.PERSONAS_ID = rs_tOracleInput_1.getBigDecimal(28);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 29) {
								row5.SERVICIO = null;
							} else {
	                         		
        	row5.SERVICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 29, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 30) {
								row5.PRODUCTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(30) != null) {
						row5.PRODUCTOS_ID = rs_tOracleInput_1.getBigDecimal(30);
					} else {
				
						row5.PRODUCTOS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_1 = new row5Struct();
				
					oneRow_tHashOutput_1.AUTORIZACION_ID = row5.AUTORIZACION_ID;
					oneRow_tHashOutput_1.CODPRESTADOR = row5.CODPRESTADOR;
					oneRow_tHashOutput_1.INTFUNCIONAL = row5.INTFUNCIONAL;
					oneRow_tHashOutput_1.RECEPCION_ID = row5.RECEPCION_ID;
					oneRow_tHashOutput_1.FACTURA_ID = row5.FACTURA_ID;
					oneRow_tHashOutput_1.NUMERO_FACTURA = row5.NUMERO_FACTURA;
					oneRow_tHashOutput_1.PREFIJO = row5.PREFIJO;
					oneRow_tHashOutput_1.SIGLA = row5.SIGLA;
					oneRow_tHashOutput_1.DOCUMENTO = row5.DOCUMENTO;
					oneRow_tHashOutput_1.TDOCUMENTOS_ID = row5.TDOCUMENTOS_ID;
					oneRow_tHashOutput_1.CODIGO_CUPS = row5.CODIGO_CUPS;
					oneRow_tHashOutput_1.DESCRIPCION_CUPS = row5.DESCRIPCION_CUPS;
					oneRow_tHashOutput_1.TSERVICIO = row5.TSERVICIO;
					oneRow_tHashOutput_1.DESCRIPCION_SERVICIO = row5.DESCRIPCION_SERVICIO;
					oneRow_tHashOutput_1.TSERVICIO1 = row5.TSERVICIO1;
					oneRow_tHashOutput_1.FSERVICIO = row5.FSERVICIO;
					oneRow_tHashOutput_1.VUNITARIO = row5.VUNITARIO;
					oneRow_tHashOutput_1.CANTIDAD = row5.CANTIDAD;
					oneRow_tHashOutput_1.VTOTAL = row5.VTOTAL;
					oneRow_tHashOutput_1.CODAUTORIZACION = row5.CODAUTORIZACION;
					oneRow_tHashOutput_1.CIE10 = row5.CIE10;
					oneRow_tHashOutput_1.DESCRIPCION = row5.DESCRIPCION;
					oneRow_tHashOutput_1.FECHA = row5.FECHA;
					oneRow_tHashOutput_1.USUARIOS_ID = row5.USUARIOS_ID;
					oneRow_tHashOutput_1.UORG_ID = row5.UORG_ID;
					oneRow_tHashOutput_1.CIE10_ID = row5.CIE10_ID;
					oneRow_tHashOutput_1.CUPS_ID = row5.CUPS_ID;
					oneRow_tHashOutput_1.PERSONAS_ID = row5.PERSONAS_ID;
					oneRow_tHashOutput_1.SERVICIO = row5.SERVICIO;
					oneRow_tHashOutput_1.PRODUCTOS_ID = row5.PRODUCTOS_ID;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 
     row8 = row5;


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row18Struct row18 = null;
					
						row22Struct row22 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row18HashKey.SIGLA = row8.SIGLA ;
                        		    		
                        		    		    row18HashKey.CUPS_ID = row8.CUPS_ID ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.SIGLA = '" + row18HashKey.SIGLA + "', row18.CUPS_ID = '" + row18HashKey.CUPS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row22HashKey.SIGLA = row8.SERVICIO ;
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row22 != null && tHash_Lookup_row22.getCount(row22HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row22' and it contains more one result from keys :  row22.SIGLA = '" + row22HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								 
							
							
								if (tHash_Lookup_row22 !=null && tHash_Lookup_row22.hasNext()) { // G 099
								
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							
							
								} // G 099
							
							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

DSERVICIO = null;


// # Output table : 'DSERVICIO'
DSERVICIO_tmp.RECEPCION_ID = new BigDecimal(row8.RECEPCION_ID) ;
DSERVICIO_tmp.FACTURA_ID = row8.FACTURA_ID ;
DSERVICIO_tmp.NUMERO_FACTURA = (row8.PREFIJO != null)? row8.PREFIJO.concat(row8.NUMERO_FACTURA) : row8.NUMERO_FACTURA ;
DSERVICIO_tmp.DOCUMENTO = row8.DOCUMENTO ;
DSERVICIO_tmp.TDOCUMENTOS_ID = row8.TDOCUMENTOS_ID ;
DSERVICIO_tmp.CODIGO_CUPS = row8.CODIGO_CUPS ;
DSERVICIO_tmp.DESCRIPCION_CUPS = row8.DESCRIPCION_CUPS ;
DSERVICIO_tmp.TSERVICIO = row8.TSERVICIO.toString() ;
DSERVICIO_tmp.SERVICIO = row18.SERVICIO == null ? row22.NOMBRE : row18.SERVICIO ;
DSERVICIO_tmp.DESCRIPCION_SERVICIO = row8.DESCRIPCION_SERVICIO ;
DSERVICIO_tmp.FSERVICIO = row8.FSERVICIO == null ? null: TalendDate.parseDate("dd/MM/yyyy", row8.FSERVICIO) ;
DSERVICIO_tmp.VUNITARIO = row8.VUNITARIO ;
DSERVICIO_tmp.CANTIDAD = row8.CANTIDAD ;
DSERVICIO_tmp.VTOTAL = row8.VTOTAL ;
DSERVICIO_tmp.COD_AUTORIZACION = row8.CODAUTORIZACION ;
DSERVICIO_tmp.CODIGO_CIE10 = row8.CIE10 ;
DSERVICIO_tmp.DESCRIPCION_CIE10 = row8.DESCRIPCION ;
DSERVICIO_tmp.AUTORIZACION_ID = row8.AUTORIZACION_ID ;
DSERVICIO_tmp.FECHA = row8.FECHA ;
DSERVICIO_tmp.USUARIOS_ID = row8.USUARIOS_ID ;
DSERVICIO_tmp.UORG_ID = row8.UORG_ID ;
DSERVICIO_tmp.PREFIJO = row8.PREFIJO ;
DSERVICIO_tmp.CIE10_ID = row8.CIE10_ID ;
DSERVICIO_tmp.CUPS_ID = row8.CUPS_ID ;
DSERVICIO_tmp.PRODUCTOS_ID = row8.PRODUCTOS_ID ;
DSERVICIO_tmp.PERSONAS_ID = row8.PERSONAS_ID ;
DSERVICIO_tmp.SERVICIOS_ID = row18.ID == null ? row22.ID : row18.ID ;
DSERVICIO_tmp.INTFUNCIONAL = row8.INTFUNCIONAL ;
DSERVICIO = DSERVICIO_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "DSERVICIO"
if(DSERVICIO != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"DSERVICIO"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setBigDecimal(1, DSERVICIO.RECEPCION_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(2, DSERVICIO.FACTURA_ID);

                        if(DSERVICIO.NUMERO_FACTURA == null) {
pstmt_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(3, DSERVICIO.NUMERO_FACTURA);
}

                        if(DSERVICIO.DOCUMENTO == null) {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(4, DSERVICIO.DOCUMENTO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(5, DSERVICIO.TDOCUMENTOS_ID);

                        if(DSERVICIO.CODIGO_CUPS == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, DSERVICIO.CODIGO_CUPS);
}

                        if(DSERVICIO.DESCRIPCION_CUPS == null) {
pstmt_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(7, DSERVICIO.DESCRIPCION_CUPS);
}

                        if(DSERVICIO.TSERVICIO == null) {
pstmt_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(8, DSERVICIO.TSERVICIO);
}

                        if(DSERVICIO.SERVICIO == null) {
pstmt_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(9, DSERVICIO.SERVICIO);
}

                        if(DSERVICIO.DESCRIPCION_SERVICIO == null) {
pstmt_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(10, DSERVICIO.DESCRIPCION_SERVICIO);
}

                        if(DSERVICIO.FSERVICIO != null) {
pstmt_tOracleOutput_1.setObject(11, new java.sql.Timestamp(DSERVICIO.FSERVICIO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(11, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_1.setBigDecimal(12, DSERVICIO.VUNITARIO);

                        pstmt_tOracleOutput_1.setBigDecimal(13, DSERVICIO.CANTIDAD);

                        pstmt_tOracleOutput_1.setBigDecimal(14, DSERVICIO.VTOTAL);

                        if(DSERVICIO.COD_AUTORIZACION == null) {
pstmt_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(15, DSERVICIO.COD_AUTORIZACION);
}

                        if(DSERVICIO.CODIGO_CIE10 == null) {
pstmt_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(16, DSERVICIO.CODIGO_CIE10);
}

                        if(DSERVICIO.DESCRIPCION_CIE10 == null) {
pstmt_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(17, DSERVICIO.DESCRIPCION_CIE10);
}

                        pstmt_tOracleOutput_1.setBigDecimal(18, DSERVICIO.AUTORIZACION_ID);

                        if(DSERVICIO.FECHA != null) {
pstmt_tOracleOutput_1.setObject(19, new java.sql.Timestamp(DSERVICIO.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(19, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_1.setBigDecimal(20, DSERVICIO.USUARIOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(21, DSERVICIO.UORG_ID);

                        if(DSERVICIO.PREFIJO == null) {
pstmt_tOracleOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(22, DSERVICIO.PREFIJO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(23, DSERVICIO.CIE10_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(24, DSERVICIO.CUPS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(25, DSERVICIO.PRODUCTOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(26, DSERVICIO.PERSONAS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(27, DSERVICIO.SERVICIOS_ID);

                        pstmt_tOracleOutput_1.setBigDecimal(28, DSERVICIO.INTFUNCIONAL);

                pstmt_tOracleOutput_1.addBatch();
                nb_line_tOracleOutput_1++;
                batchSizeCounter_tOracleOutput_1++;
            if (batchSize_tOracleOutput_1 > 0 &&  batchSize_tOracleOutput_1 <= batchSizeCounter_tOracleOutput_1) {
                try {
                    pstmt_tOracleOutput_1.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
			        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
			    	String errormessage_tOracleOutput_1;
					if (ne_tOracleOutput_1 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
						errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
					}else{
						errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_1);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                    insertedCount_tOracleOutput_1
                += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                batchSizeCounter_tOracleOutput_1 = 0;
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(batchSizeCounter_tOracleOutput_1 > 0) {
                        try {
                            pstmt_tOracleOutput_1.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
					        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
					    	String errormessage_tOracleOutput_1;
							if (ne_tOracleOutput_1 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
								errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
							}else{
								errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_1);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
                            insertedCount_tOracleOutput_1
                        += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                        rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                    	batchSizeCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "DSERVICIO"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_1 > 0) {
            try {
            	if (pstmt_tOracleOutput_1 != null) {
					
					pstmt_tOracleOutput_1.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_1){
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
		        java.sql.SQLException ne_tOracleOutput_1 = e_tOracleOutput_1.getNextException(),sqle_tOracleOutput_1=null;
		    	String errormessage_tOracleOutput_1;
				if (ne_tOracleOutput_1 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_1 = new java.sql.SQLException(e_tOracleOutput_1.getMessage() + "\ncaused by: " + ne_tOracleOutput_1.getMessage(), ne_tOracleOutput_1.getSQLState(), ne_tOracleOutput_1.getErrorCode(), ne_tOracleOutput_1);
					errormessage_tOracleOutput_1 = sqle_tOracleOutput_1.getMessage();
				}else{
					errormessage_tOracleOutput_1 = e_tOracleOutput_1.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_1);
            	
        	}
        	if (pstmt_tOracleOutput_1 != null) {
            	tmp_batchUpdateCount_tOracleOutput_1 = pstmt_tOracleOutput_1.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_1
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
				rowsToCommitCount_tOracleOutput_1 += (tmp_batchUpdateCount_tOracleOutput_1!=-1?tmp_batchUpdateCount_tOracleOutput_1:0);
            }
        }
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"DSERVICIO");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "UPDATE ACM_DCARGUE\nSET  ESTADOCARGUE_ID = "+context.estProcesado+ "\nWHERE ID = " +context.DCARGUE_ID;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tHashInput_1Process(globalMap);



/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class UPDReStruct implements routines.system.IPersistableRow<UPDReStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102001\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CANTFACTURASDETALLE;

				public Integer getCANTFACTURASDETALLE () {
					return this.CANTFACTURASDETALLE;
				}

				public Boolean CANTFACTURASDETALLEIsNullable(){
				    return true;
				}
				public Boolean CANTFACTURASDETALLEIsKey(){
				    return false;
				}
				public Integer CANTFACTURASDETALLELength(){
				    return 0;
				}
				public Integer CANTFACTURASDETALLEPrecision(){
				    return null;
				}
				public String CANTFACTURASDETALLEDefault(){
				
					return "0";
				
				}
				public String CANTFACTURASDETALLEComment(){
				
				    return "Cantidad de Facturas cargadas en el Archivo de detalle (ACM_DFACTURASERVICIO \u00F3 ACM_DFACTURAFORMULACION)";
				
				}
				public String CANTFACTURASDETALLEPattern(){
				
					return "";
				
				}
				public String CANTFACTURASDETALLEOriginalDbColumnName(){
				
					return "CANTFACTURASDETALLE";
				
				}

				
			    public Double VTOTALCALCULADO;

				public Double getVTOTALCALCULADO () {
					return this.VTOTALCALCULADO;
				}

				public Boolean VTOTALCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VTOTALCALCULADOIsKey(){
				    return false;
				}
				public Integer VTOTALCALCULADOLength(){
				    return 0;
				}
				public Integer VTOTALCALCULADOPrecision(){
				    return null;
				}
				public String VTOTALCALCULADODefault(){
				
					return null;
				
				}
				public String VTOTALCALCULADOComment(){
				
				    return "Valor total calculado de la sumatoria de los servicios o medicamentos en la cuenta";
				
				}
				public String VTOTALCALCULADOPattern(){
				
					return "";
				
				}
				public String VTOTALCALCULADOOriginalDbColumnName(){
				
					return "VTOTALCALCULADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final UPDReStruct other = (UPDReStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(UPDReStruct other) {

		other.ID = this.ID;
	            other.CANTFACTURASDETALLE = this.CANTFACTURASDETALLE;
	            other.VTOTALCALCULADO = this.VTOTALCALCULADO;
	            
	}

	public void copyKeysDataTo(UPDReStruct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTFACTURASDETALLE = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VTOTALCALCULADO = null;
           				} else {
           			    	this.VTOTALCALCULADO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTFACTURASDETALLE = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VTOTALCALCULADO = null;
           				} else {
           			    	this.VTOTALCALCULADO = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTFACTURASDETALLE,dos);
					
					// Double
				
						if(this.VTOTALCALCULADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VTOTALCALCULADO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTFACTURASDETALLE,dos);
					
					// Double
				
						if(this.VTOTALCALCULADO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VTOTALCALCULADO);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CANTFACTURASDETALLE="+String.valueOf(CANTFACTURASDETALLE));
		sb.append(",VTOTALCALCULADO="+String.valueOf(VTOTALCALCULADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(UPDReStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public String RECEPCION_ID;

				public String getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public Integer CONTEO;

				public Integer getCONTEO () {
					return this.CONTEO;
				}

				public Boolean CONTEOIsNullable(){
				    return true;
				}
				public Boolean CONTEOIsKey(){
				    return false;
				}
				public Integer CONTEOLength(){
				    return null;
				}
				public Integer CONTEOPrecision(){
				    return null;
				}
				public String CONTEODefault(){
				
					return null;
				
				}
				public String CONTEOComment(){
				
				    return "";
				
				}
				public String CONTEOPattern(){
				
					return "";
				
				}
				public String CONTEOOriginalDbColumnName(){
				
					return "CONTEO";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// Integer
				
						writeInteger(this.CONTEO,dos);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// Integer
				
						writeInteger(this.CONTEO,dos);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+RECEPCION_ID);
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",CONTEO="+String.valueOf(CONTEO));
		sb.append(",SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public String RECEPCION_ID;

				public String getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public Integer CONTEO;

				public Integer getCONTEO () {
					return this.CONTEO;
				}

				public Boolean CONTEOIsNullable(){
				    return true;
				}
				public Boolean CONTEOIsKey(){
				    return false;
				}
				public Integer CONTEOLength(){
				    return null;
				}
				public Integer CONTEOPrecision(){
				    return null;
				}
				public String CONTEODefault(){
				
					return null;
				
				}
				public String CONTEOComment(){
				
				    return "";
				
				}
				public String CONTEOPattern(){
				
					return "";
				
				}
				public String CONTEOOriginalDbColumnName(){
				
					return "CONTEO";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// Integer
				
						writeInteger(this.CONTEO,dos);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// Integer
				
						writeInteger(this.CONTEO,dos);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+RECEPCION_ID);
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",CONTEO="+String.valueOf(CONTEO));
		sb.append(",SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public String RECEPCION_ID;

				public String getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public Integer CONTEO;

				public Integer getCONTEO () {
					return this.CONTEO;
				}

				public Boolean CONTEOIsNullable(){
				    return true;
				}
				public Boolean CONTEOIsKey(){
				    return false;
				}
				public Integer CONTEOLength(){
				    return null;
				}
				public Integer CONTEOPrecision(){
				    return null;
				}
				public String CONTEODefault(){
				
					return null;
				
				}
				public String CONTEOComment(){
				
				    return "";
				
				}
				public String CONTEOPattern(){
				
					return "";
				
				}
				public String CONTEOOriginalDbColumnName(){
				
					return "CONTEO";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
						this.CONTEO = readInteger(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// Integer
				
						writeInteger(this.CONTEO,dos);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// Integer
				
						writeInteger(this.CONTEO,dos);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+RECEPCION_ID);
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",CONTEO="+String.valueOf(CONTEO));
		sb.append(",SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal AUTORIZACION_ID;

				public BigDecimal getAUTORIZACION_ID () {
					return this.AUTORIZACION_ID;
				}

				public Boolean AUTORIZACION_IDIsNullable(){
				    return true;
				}
				public Boolean AUTORIZACION_IDIsKey(){
				    return false;
				}
				public Integer AUTORIZACION_IDLength(){
				    return null;
				}
				public Integer AUTORIZACION_IDPrecision(){
				    return null;
				}
				public String AUTORIZACION_IDDefault(){
				
					return "";
				
				}
				public String AUTORIZACION_IDComment(){
				
				    return "";
				
				}
				public String AUTORIZACION_IDPattern(){
				
					return "";
				
				}
				public String AUTORIZACION_IDOriginalDbColumnName(){
				
					return "AUTORIZACION_ID";
				
				}

				
			    public BigDecimal CODPRESTADOR;

				public BigDecimal getCODPRESTADOR () {
					return this.CODPRESTADOR;
				}

				public Boolean CODPRESTADORIsNullable(){
				    return true;
				}
				public Boolean CODPRESTADORIsKey(){
				    return false;
				}
				public Integer CODPRESTADORLength(){
				    return null;
				}
				public Integer CODPRESTADORPrecision(){
				    return null;
				}
				public String CODPRESTADORDefault(){
				
					return "";
				
				}
				public String CODPRESTADORComment(){
				
				    return "";
				
				}
				public String CODPRESTADORPattern(){
				
					return "";
				
				}
				public String CODPRESTADOROriginalDbColumnName(){
				
					return "CODPRESTADOR";
				
				}

				
			    public BigDecimal INTFUNCIONAL;

				public BigDecimal getINTFUNCIONAL () {
					return this.INTFUNCIONAL;
				}

				public Boolean INTFUNCIONALIsNullable(){
				    return true;
				}
				public Boolean INTFUNCIONALIsKey(){
				    return false;
				}
				public Integer INTFUNCIONALLength(){
				    return null;
				}
				public Integer INTFUNCIONALPrecision(){
				    return null;
				}
				public String INTFUNCIONALDefault(){
				
					return "";
				
				}
				public String INTFUNCIONALComment(){
				
				    return "";
				
				}
				public String INTFUNCIONALPattern(){
				
					return "";
				
				}
				public String INTFUNCIONALOriginalDbColumnName(){
				
					return "INTFUNCIONAL";
				
				}

				
			    public String RECEPCION_ID;

				public String getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return false;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return null;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return "";
				
				}
				public String FACTURA_IDComment(){
				
				    return "";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return true;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return null;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return null;
				}
				public String NUMERO_FACTURADefault(){
				
					return null;
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return null;
				}
				public Integer SIGLAPrecision(){
				    return null;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return null;
				}
				public Integer DOCUMENTOPrecision(){
				    return null;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return null;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public String CODIGO_CUPS;

				public String getCODIGO_CUPS () {
					return this.CODIGO_CUPS;
				}

				public Boolean CODIGO_CUPSIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CUPSIsKey(){
				    return false;
				}
				public Integer CODIGO_CUPSLength(){
				    return null;
				}
				public Integer CODIGO_CUPSPrecision(){
				    return null;
				}
				public String CODIGO_CUPSDefault(){
				
					return null;
				
				}
				public String CODIGO_CUPSComment(){
				
				    return "";
				
				}
				public String CODIGO_CUPSPattern(){
				
					return "";
				
				}
				public String CODIGO_CUPSOriginalDbColumnName(){
				
					return "CODIGO_CUPS";
				
				}

				
			    public String DESCRIPCION_CUPS;

				public String getDESCRIPCION_CUPS () {
					return this.DESCRIPCION_CUPS;
				}

				public Boolean DESCRIPCION_CUPSIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_CUPSIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_CUPSLength(){
				    return null;
				}
				public Integer DESCRIPCION_CUPSPrecision(){
				    return null;
				}
				public String DESCRIPCION_CUPSDefault(){
				
					return null;
				
				}
				public String DESCRIPCION_CUPSComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_CUPSPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_CUPSOriginalDbColumnName(){
				
					return "DESCRIPCION_CUPS";
				
				}

				
			    public BigDecimal TSERVICIO;

				public BigDecimal getTSERVICIO () {
					return this.TSERVICIO;
				}

				public Boolean TSERVICIOIsNullable(){
				    return true;
				}
				public Boolean TSERVICIOIsKey(){
				    return false;
				}
				public Integer TSERVICIOLength(){
				    return null;
				}
				public Integer TSERVICIOPrecision(){
				    return null;
				}
				public String TSERVICIODefault(){
				
					return "";
				
				}
				public String TSERVICIOComment(){
				
				    return "";
				
				}
				public String TSERVICIOPattern(){
				
					return "";
				
				}
				public String TSERVICIOOriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String DESCRIPCION_SERVICIO;

				public String getDESCRIPCION_SERVICIO () {
					return this.DESCRIPCION_SERVICIO;
				}

				public Boolean DESCRIPCION_SERVICIOIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCION_SERVICIOIsKey(){
				    return false;
				}
				public Integer DESCRIPCION_SERVICIOLength(){
				    return null;
				}
				public Integer DESCRIPCION_SERVICIOPrecision(){
				    return null;
				}
				public String DESCRIPCION_SERVICIODefault(){
				
					return null;
				
				}
				public String DESCRIPCION_SERVICIOComment(){
				
				    return "";
				
				}
				public String DESCRIPCION_SERVICIOPattern(){
				
					return "";
				
				}
				public String DESCRIPCION_SERVICIOOriginalDbColumnName(){
				
					return "DESCRIPCION_SERVICIO";
				
				}

				
			    public BigDecimal TSERVICIO1;

				public BigDecimal getTSERVICIO1 () {
					return this.TSERVICIO1;
				}

				public Boolean TSERVICIO1IsNullable(){
				    return true;
				}
				public Boolean TSERVICIO1IsKey(){
				    return false;
				}
				public Integer TSERVICIO1Length(){
				    return null;
				}
				public Integer TSERVICIO1Precision(){
				    return null;
				}
				public String TSERVICIO1Default(){
				
					return "";
				
				}
				public String TSERVICIO1Comment(){
				
				    return "";
				
				}
				public String TSERVICIO1Pattern(){
				
					return "";
				
				}
				public String TSERVICIO1OriginalDbColumnName(){
				
					return "TSERVICIO";
				
				}

				
			    public String FSERVICIO;

				public String getFSERVICIO () {
					return this.FSERVICIO;
				}

				public Boolean FSERVICIOIsNullable(){
				    return true;
				}
				public Boolean FSERVICIOIsKey(){
				    return false;
				}
				public Integer FSERVICIOLength(){
				    return null;
				}
				public Integer FSERVICIOPrecision(){
				    return null;
				}
				public String FSERVICIODefault(){
				
					return null;
				
				}
				public String FSERVICIOComment(){
				
				    return "";
				
				}
				public String FSERVICIOPattern(){
				
					return "";
				
				}
				public String FSERVICIOOriginalDbColumnName(){
				
					return "FSERVICIO";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return true;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return null;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "";
				
				}
				public String VUNITARIOComment(){
				
				    return "";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return "";
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public String CODAUTORIZACION;

				public String getCODAUTORIZACION () {
					return this.CODAUTORIZACION;
				}

				public Boolean CODAUTORIZACIONIsNullable(){
				    return true;
				}
				public Boolean CODAUTORIZACIONIsKey(){
				    return false;
				}
				public Integer CODAUTORIZACIONLength(){
				    return null;
				}
				public Integer CODAUTORIZACIONPrecision(){
				    return null;
				}
				public String CODAUTORIZACIONDefault(){
				
					return null;
				
				}
				public String CODAUTORIZACIONComment(){
				
				    return "";
				
				}
				public String CODAUTORIZACIONPattern(){
				
					return "";
				
				}
				public String CODAUTORIZACIONOriginalDbColumnName(){
				
					return "CODAUTORIZACION";
				
				}

				
			    public String CIE10;

				public String getCIE10 () {
					return this.CIE10;
				}

				public Boolean CIE10IsNullable(){
				    return true;
				}
				public Boolean CIE10IsKey(){
				    return false;
				}
				public Integer CIE10Length(){
				    return null;
				}
				public Integer CIE10Precision(){
				    return null;
				}
				public String CIE10Default(){
				
					return null;
				
				}
				public String CIE10Comment(){
				
				    return "";
				
				}
				public String CIE10Pattern(){
				
					return "";
				
				}
				public String CIE10OriginalDbColumnName(){
				
					return "CIE10";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return null;
				}
				public Integer DESCRIPCIONPrecision(){
				    return null;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return null;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return "";
				
				}
				public String CIE10_IDComment(){
				
				    return "";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return true;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return null;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return true;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return null;
				}
				public Integer SERVICIOPrecision(){
				    return null;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return null;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.AUTORIZACION_ID = (BigDecimal) dis.readObject();
					
						this.CODPRESTADOR = (BigDecimal) dis.readObject();
					
						this.INTFUNCIONAL = (BigDecimal) dis.readObject();
					
					this.RECEPCION_ID = readString(dis);
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.PREFIJO = readString(dis);
					
					this.SIGLA = readString(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
					this.CODIGO_CUPS = readString(dis);
					
					this.DESCRIPCION_CUPS = readString(dis);
					
						this.TSERVICIO = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION_SERVICIO = readString(dis);
					
						this.TSERVICIO1 = (BigDecimal) dis.readObject();
					
					this.FSERVICIO = readString(dis);
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
					this.CODAUTORIZACION = readString(dis);
					
					this.CIE10 = readString(dis);
					
					this.DESCRIPCION = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.SERVICIO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.AUTORIZACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODPRESTADOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTFUNCIONAL);
					
					// String
				
						writeString(this.RECEPCION_ID,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// String
				
						writeString(this.CODIGO_CUPS,dos);
					
					// String
				
						writeString(this.DESCRIPCION_CUPS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO);
					
					// String
				
						writeString(this.DESCRIPCION_SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TSERVICIO1);
					
					// String
				
						writeString(this.FSERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// String
				
						writeString(this.CODAUTORIZACION,dos);
					
					// String
				
						writeString(this.CIE10,dos);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// String
				
						writeString(this.SERVICIO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("AUTORIZACION_ID="+String.valueOf(AUTORIZACION_ID));
		sb.append(",CODPRESTADOR="+String.valueOf(CODPRESTADOR));
		sb.append(",INTFUNCIONAL="+String.valueOf(INTFUNCIONAL));
		sb.append(",RECEPCION_ID="+RECEPCION_ID);
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SIGLA="+SIGLA);
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",CODIGO_CUPS="+CODIGO_CUPS);
		sb.append(",DESCRIPCION_CUPS="+DESCRIPCION_CUPS);
		sb.append(",TSERVICIO="+String.valueOf(TSERVICIO));
		sb.append(",DESCRIPCION_SERVICIO="+DESCRIPCION_SERVICIO);
		sb.append(",TSERVICIO1="+String.valueOf(TSERVICIO1));
		sb.append(",FSERVICIO="+FSERVICIO);
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",CODAUTORIZACION="+CODAUTORIZACION);
		sb.append(",CIE10="+CIE10);
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",SERVICIO="+SERVICIO);
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();
out1Struct out1 = new out1Struct();
row10Struct row10 = new row10Struct();
UPDReStruct UPDRe = new UPDReStruct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	
	
		class AggCountDistinctValuesStruct_FACTURA_ID_tAggregateRow_1 { // G_OutBegin_AggR_1100
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
    					String RECEPCION_ID;
    					BigDecimal FACTURA_ID;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.RECEPCION_ID == null) ? 0 : this.RECEPCION_ID.hashCode());
								
								result = prime * result + ((this.FACTURA_ID == null) ? 0 : this.FACTURA_ID.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final AggCountDistinctValuesStruct_FACTURA_ID_tAggregateRow_1 other = (AggCountDistinctValuesStruct_FACTURA_ID_tAggregateRow_1) obj;
				
									if (this.RECEPCION_ID == null) {
										if (other.RECEPCION_ID != null) 
											return false;
									} else if (!this.RECEPCION_ID.equals(other.RECEPCION_ID)) 
										return false;
								
									if (this.FACTURA_ID == null) {
										if (other.FACTURA_ID != null) 
											return false;
									} else if (!this.FACTURA_ID.equals(other.FACTURA_ID)) 
										return false;
								
				
				return true;
			}
	  
	        
		} // G_OutBegin_AggR_1100

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String RECEPCION_ID;java.util.Set<AggCountDistinctValuesStruct_FACTURA_ID_tAggregateRow_1> distinctValues_CONTEO = new java.util.HashSet<AggCountDistinctValuesStruct_FACTURA_ID_tAggregateRow_1>();
           			BigDecimal SUMA_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.RECEPCION_ID == null) ? 0 : this.RECEPCION_ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.RECEPCION_ID == null) {
								if (other.RECEPCION_ID != null) 
									return false;
							} else if (!this.RECEPCION_ID.equals(other.RECEPCION_ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_CargueServicios_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row5Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row9.AUTORIZACION_ID = next_tHashInput_1.AUTORIZACION_ID;
	row9.CODPRESTADOR = next_tHashInput_1.CODPRESTADOR;
	row9.INTFUNCIONAL = next_tHashInput_1.INTFUNCIONAL;
	row9.RECEPCION_ID = next_tHashInput_1.RECEPCION_ID;
	row9.FACTURA_ID = next_tHashInput_1.FACTURA_ID;
	row9.NUMERO_FACTURA = next_tHashInput_1.NUMERO_FACTURA;
	row9.PREFIJO = next_tHashInput_1.PREFIJO;
	row9.SIGLA = next_tHashInput_1.SIGLA;
	row9.DOCUMENTO = next_tHashInput_1.DOCUMENTO;
	row9.TDOCUMENTOS_ID = next_tHashInput_1.TDOCUMENTOS_ID;
	row9.CODIGO_CUPS = next_tHashInput_1.CODIGO_CUPS;
	row9.DESCRIPCION_CUPS = next_tHashInput_1.DESCRIPCION_CUPS;
	row9.TSERVICIO = next_tHashInput_1.TSERVICIO;
	row9.DESCRIPCION_SERVICIO = next_tHashInput_1.DESCRIPCION_SERVICIO;
	row9.TSERVICIO1 = next_tHashInput_1.TSERVICIO1;
	row9.FSERVICIO = next_tHashInput_1.FSERVICIO;
	row9.VUNITARIO = next_tHashInput_1.VUNITARIO;
	row9.CANTIDAD = next_tHashInput_1.CANTIDAD;
	row9.VTOTAL = next_tHashInput_1.VTOTAL;
	row9.CODAUTORIZACION = next_tHashInput_1.CODAUTORIZACION;
	row9.CIE10 = next_tHashInput_1.CIE10;
	row9.DESCRIPCION = next_tHashInput_1.DESCRIPCION;
	row9.FECHA = next_tHashInput_1.FECHA;
	row9.USUARIOS_ID = next_tHashInput_1.USUARIOS_ID;
	row9.UORG_ID = next_tHashInput_1.UORG_ID;
	row9.CIE10_ID = next_tHashInput_1.CIE10_ID;
	row9.CUPS_ID = next_tHashInput_1.CUPS_ID;
	row9.PERSONAS_ID = next_tHashInput_1.PERSONAS_ID;
	row9.SERVICIO = next_tHashInput_1.SERVICIO;
	row9.PRODUCTOS_ID = next_tHashInput_1.PRODUCTOS_ID;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.RECEPCION_ID = row9.RECEPCION_ID ;
out1_tmp.FACTURA_ID = row9.FACTURA_ID ;
out1_tmp.CONTEO = null;
out1_tmp.SUMA = null;
out1_tmp.VTOTAL = row9.VTOTAL ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.RECEPCION_ID = out1.RECEPCION_ID;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.RECEPCION_ID = operation_finder_tAggregateRow_1.RECEPCION_ID;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				
				AggCountDistinctValuesStruct_FACTURA_ID_tAggregateRow_1 countDistinctValues_CONTEO_tAggregateRow_1 = new AggCountDistinctValuesStruct_FACTURA_ID_tAggregateRow_1();
			
				countDistinctValues_CONTEO_tAggregateRow_1.RECEPCION_ID = out1.RECEPCION_ID;
						
				countDistinctValues_CONTEO_tAggregateRow_1.FACTURA_ID = out1.FACTURA_ID;
				operation_result_tAggregateRow_1.distinctValues_CONTEO.add(countDistinctValues_CONTEO_tAggregateRow_1);
				
					if(operation_result_tAggregateRow_1.SUMA_sum == null) {
						operation_result_tAggregateRow_1.SUMA_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_1.SUMA_sum = operation_result_tAggregateRow_1.SUMA_sum.add(
						new BigDecimal(
							String.valueOf(
								out1.VTOTAL
							)
						)
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueServicios_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"UPDRe");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






        int updateKeyCount_tOracleOutput_2 = 1;
        if(updateKeyCount_tOracleOutput_2 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_2 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 10000;
            int commitCounter_tOracleOutput_2 = 0;
        int batchSize_tOracleOutput_2 = 10000;
        int batchSizeCounter_tOracleOutput_2=0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("ACM_RECEPCION");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("ACM_RECEPCION");
        }
                String update_tOracleOutput_2 = "UPDATE " + tableName_tOracleOutput_2 + " SET CANTFACTURASDETALLE = ?,VTOTALCALCULADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(update_tOracleOutput_2);
                resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
UPDReStruct UPDRe_tmp = new UPDReStruct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

            				    row10.RECEPCION_ID = aggregated_row_tAggregateRow_1.RECEPCION_ID;
            				    row10.CONTEO = (int) aggregated_row_tAggregateRow_1.distinctValues_CONTEO.size();
	                                	
    								if(aggregated_row_tAggregateRow_1.SUMA_sum != null) {
    								row10.SUMA = aggregated_row_tAggregateRow_1.SUMA_sum.doubleValue();
										
    								}else{
    								
    									row10.SUMA = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

UPDRe = null;


// # Output table : 'UPDRe'
UPDRe_tmp.ID = new BigDecimal(row10.RECEPCION_ID );
UPDRe_tmp.CANTFACTURASDETALLE = row10.CONTEO ;
UPDRe_tmp.VTOTALCALCULADO = row10.SUMA ;
UPDRe = UPDRe_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "UPDRe"
if(UPDRe != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"UPDRe"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                    if(UPDRe.CANTFACTURASDETALLE == null) {
pstmt_tOracleOutput_2.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_2.setInt(1, UPDRe.CANTFACTURASDETALLE);
}

                    if(UPDRe.VTOTALCALCULADO == null) {
pstmt_tOracleOutput_2.setNull(2, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_2.setDouble(2, UPDRe.VTOTALCALCULADO);
}


                    pstmt_tOracleOutput_2.setBigDecimal(3 + count_tOracleOutput_2, UPDRe.ID);

                pstmt_tOracleOutput_2.addBatch();
                nb_line_tOracleOutput_2++;
                batchSizeCounter_tOracleOutput_2++;
            if (batchSize_tOracleOutput_2 > 0 &&  batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
                try {
                    pstmt_tOracleOutput_2.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
			        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
			    	String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
					}else{
						errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_2);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                    updatedCount_tOracleOutput_2
                += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                batchSizeCounter_tOracleOutput_2 = 0;
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(batchSizeCounter_tOracleOutput_2 > 0) {
                        try {
                            pstmt_tOracleOutput_2.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
					        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
					    	String errormessage_tOracleOutput_2;
							if (ne_tOracleOutput_2 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
								errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
							}else{
								errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_2);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                            updatedCount_tOracleOutput_2
                        += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                        rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                    	batchSizeCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "UPDRe"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_2 > 0) {
            try {
            	if (pstmt_tOracleOutput_2 != null) {
					
					pstmt_tOracleOutput_2.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
		        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
		    	String errormessage_tOracleOutput_2;
				if (ne_tOracleOutput_2 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
					errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
				}else{
					errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_2);
            	
        	}
        	if (pstmt_tOracleOutput_2 != null) {
            	tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_2
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
				rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
            }
        }
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"UPDRe");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */















				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tHashInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Double VTOTAL;

				public Double getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return null;
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out4Struct other = (out4Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out4Struct other) {

		other.ID = this.ID;
	            other.VTOTAL = this.VTOTAL;
	            
	}

	public void copyKeysDataTo(out4Struct other) {

		other.ID = this.ID;
	            	
	}




    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VTOTAL = null;
           				} else {
           			    	this.VTOTAL = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.VTOTAL = null;
           				} else {
           			    	this.VTOTAL = dis.readDouble();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Double
				
						if(this.VTOTAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VTOTAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Double
				
						if(this.VTOTAL == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.VTOTAL);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public Double SUMA;

				public Double getSUMA () {
					return this.SUMA;
				}

				public Boolean SUMAIsNullable(){
				    return true;
				}
				public Boolean SUMAIsKey(){
				    return false;
				}
				public Integer SUMALength(){
				    return null;
				}
				public Integer SUMAPrecision(){
				    return null;
				}
				public String SUMADefault(){
				
					return null;
				
				}
				public String SUMAComment(){
				
				    return "";
				
				}
				public String SUMAPattern(){
				
					return "";
				
				}
				public String SUMAOriginalDbColumnName(){
				
					return "SUMA";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return true;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return null;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "";
				
				}
				public String VTOTALComment(){
				
				    return "";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.SUMA = null;
           				} else {
           			    	this.SUMA = dis.readDouble();
           				}
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// Double
				
						if(this.SUMA == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeDouble(this.SUMA);
		            	}
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",SUMA="+String.valueOf(SUMA));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return true;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return null;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "";
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return true;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return null;
				}
				public Integer TFACTURAPrecision(){
				    return null;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return false;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return false;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal SECUENCIA;

				public BigDecimal getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "";
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return null;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return "";
				
				}
				public String TCARGUEComment(){
				
				    return "";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();
out3Struct out3 = new out3Struct();
row14Struct row14 = new row14Struct();
out4Struct out4 = new out4Struct();





	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				BigDecimal RECEPCION_ID;BigDecimal SUMA_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.RECEPCION_ID == null) ? 0 : this.RECEPCION_ID.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
							if (this.RECEPCION_ID == null) {
								if (other.RECEPCION_ID != null) 
									return false;
							} else if (!this.RECEPCION_ID.equals(other.RECEPCION_ID)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_CargueServicios_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row7Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row7Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row13.RECEPCION_ID = next_tHashInput_2.RECEPCION_ID;
	row13.CONTRATOS_ID = next_tHashInput_2.CONTRATOS_ID;
	row13.PRESTADOR_ID = next_tHashInput_2.PRESTADOR_ID;
	row13.CANTPACIENTES = next_tHashInput_2.CANTPACIENTES;
	row13.VALOR = next_tHashInput_2.VALOR;
	row13.VCALCULADO = next_tHashInput_2.VCALCULADO;
	row13.TFACTURA = next_tHashInput_2.TFACTURA;
	row13.FECHA = next_tHashInput_2.FECHA;
	row13.USUARIOS_ID = next_tHashInput_2.USUARIOS_ID;
	row13.UORG_ID = next_tHashInput_2.UORG_ID;
	row13.NUMERO = next_tHashInput_2.NUMERO;
	row13.PREFIJO = next_tHashInput_2.PREFIJO;
	row13.SECUENCIA = next_tHashInput_2.SECUENCIA;
	row13.TCARGUE = next_tHashInput_2.TCARGUE;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.RECEPCION_ID = row13.RECEPCION_ID ;
out3_tmp.SUMA = null;
out3_tmp.VTOTAL = row13.VALOR ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					
	
operation_finder_tAggregateRow_2.RECEPCION_ID = out3.RECEPCION_ID;
			

	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		operation_result_tAggregateRow_2.RECEPCION_ID = operation_finder_tAggregateRow_2.RECEPCION_ID;
				
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_2.SUMA_sum == null) {
						operation_result_tAggregateRow_2.SUMA_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_2.SUMA_sum = operation_result_tAggregateRow_2.SUMA_sum.add(
						new BigDecimal(
							String.valueOf(
								out3.VTOTAL
							)
						)
					);
					


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueServicios_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */



	
	/**
	 * [tOracleOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_4", false);
		start_Hash.put("tOracleOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tOracleOutput_4 = 0;
		






        int updateKeyCount_tOracleOutput_4 = 1;
        if(updateKeyCount_tOracleOutput_4 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_4 == 2 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_4 = 0;
    int nb_line_update_tOracleOutput_4 = 0;
    int nb_line_inserted_tOracleOutput_4 = 0;
    int nb_line_deleted_tOracleOutput_4 = 0;
    int nb_line_rejected_tOracleOutput_4 = 0;

    int tmp_batchUpdateCount_tOracleOutput_4 = 0;

    int deletedCount_tOracleOutput_4=0;
    int updatedCount_tOracleOutput_4=0;
    int insertedCount_tOracleOutput_4=0;
    int rowsToCommitCount_tOracleOutput_4=0;
    int rejectedCount_tOracleOutput_4=0;

    boolean whetherReject_tOracleOutput_4 = false;

    java.sql.Connection conn_tOracleOutput_4 = null;

    //optional table
    String dbschema_tOracleOutput_4 = null;
    String tableName_tOracleOutput_4 = null;
                    String driverClass_tOracleOutput_4 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_4);
                String url_tOracleOutput_4 = null;
                    url_tOracleOutput_4 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_4 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_4 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_4 = decryptedPassword_tOracleOutput_4;
                dbschema_tOracleOutput_4 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_4 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_4.put("user",dbUser_tOracleOutput_4);
                    atnParamsPrope_tOracleOutput_4.put("password",dbPwd_tOracleOutput_4);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_4.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_4 = java.sql.DriverManager.getConnection(url_tOracleOutput_4, atnParamsPrope_tOracleOutput_4);
        resourceMap.put("conn_tOracleOutput_4", conn_tOracleOutput_4);
            conn_tOracleOutput_4.setAutoCommit(false);
            int commitEvery_tOracleOutput_4 = 10000;
            int commitCounter_tOracleOutput_4 = 0;
        int batchSize_tOracleOutput_4 = 10000;
        int batchSizeCounter_tOracleOutput_4=0;
        int count_tOracleOutput_4=0;

        if(dbschema_tOracleOutput_4 == null || dbschema_tOracleOutput_4.trim().length() == 0) {
            tableName_tOracleOutput_4 = ("ACM_RECEPCION");
        } else {
            tableName_tOracleOutput_4 = dbschema_tOracleOutput_4 + "." + ("ACM_RECEPCION");
        }
                String update_tOracleOutput_4 = "UPDATE " + tableName_tOracleOutput_4 + " SET VTOTAL = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_4 = conn_tOracleOutput_4.prepareStatement(update_tOracleOutput_4);
                resourceMap.put("pstmt_tOracleOutput_4", pstmt_tOracleOutput_4);





 



/**
 * [tOracleOutput_4 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

            				    row14.RECEPCION_ID = aggregated_row_tAggregateRow_2.RECEPCION_ID;
            				    
    								if(aggregated_row_tAggregateRow_2.SUMA_sum != null) {
    								row14.SUMA = aggregated_row_tAggregateRow_2.SUMA_sum.doubleValue();
										
    								}else{
    								
    									row14.SUMA = null;
    									
    								}
    								

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.ID = row14.RECEPCION_ID  ;
out4_tmp.VTOTAL = row14.SUMA ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tOracleOutput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					



        whetherReject_tOracleOutput_4 = false;
                    if(out4.VTOTAL == null) {
pstmt_tOracleOutput_4.setNull(1, java.sql.Types.DOUBLE);
} else {pstmt_tOracleOutput_4.setDouble(1, out4.VTOTAL);
}


                    pstmt_tOracleOutput_4.setBigDecimal(2 + count_tOracleOutput_4, out4.ID);

                pstmt_tOracleOutput_4.addBatch();
                nb_line_tOracleOutput_4++;
                batchSizeCounter_tOracleOutput_4++;
            if (batchSize_tOracleOutput_4 > 0 &&  batchSize_tOracleOutput_4 <= batchSizeCounter_tOracleOutput_4) {
                try {
                    pstmt_tOracleOutput_4.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
			        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
			    	String errormessage_tOracleOutput_4;
					if (ne_tOracleOutput_4 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
						errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
					}else{
						errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_4);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                    updatedCount_tOracleOutput_4
                += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                batchSizeCounter_tOracleOutput_4 = 0;
            }
                commitCounter_tOracleOutput_4++;
                if(commitEvery_tOracleOutput_4 <= commitCounter_tOracleOutput_4) {
                    if(batchSizeCounter_tOracleOutput_4 > 0) {
                        try {
                            pstmt_tOracleOutput_4.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
					        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
					    	String errormessage_tOracleOutput_4;
							if (ne_tOracleOutput_4 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
								errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
							}else{
								errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_4);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
                            updatedCount_tOracleOutput_4
                        += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                        rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    }
                    conn_tOracleOutput_4.commit();
                    if(rowsToCommitCount_tOracleOutput_4 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_4 = 0;
                    }
                    commitCounter_tOracleOutput_4=0;
                    	batchSizeCounter_tOracleOutput_4=0;
                }

 


	tos_count_tOracleOutput_4++;

/**
 * [tOracleOutput_4 main ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	

 



/**
 * [tOracleOutput_4 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_4 > 0) {
            try {
            	if (pstmt_tOracleOutput_4 != null) {
					
					pstmt_tOracleOutput_4.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_4){
globalMap.put("tOracleOutput_4_ERROR_MESSAGE",e_tOracleOutput_4.getMessage());
		        java.sql.SQLException ne_tOracleOutput_4 = e_tOracleOutput_4.getNextException(),sqle_tOracleOutput_4=null;
		    	String errormessage_tOracleOutput_4;
				if (ne_tOracleOutput_4 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_4 = new java.sql.SQLException(e_tOracleOutput_4.getMessage() + "\ncaused by: " + ne_tOracleOutput_4.getMessage(), ne_tOracleOutput_4.getSQLState(), ne_tOracleOutput_4.getErrorCode(), ne_tOracleOutput_4);
					errormessage_tOracleOutput_4 = sqle_tOracleOutput_4.getMessage();
				}else{
					errormessage_tOracleOutput_4 = e_tOracleOutput_4.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_4);
            	
        	}
        	if (pstmt_tOracleOutput_4 != null) {
            	tmp_batchUpdateCount_tOracleOutput_4 = pstmt_tOracleOutput_4.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_4
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
				rowsToCommitCount_tOracleOutput_4 += (tmp_batchUpdateCount_tOracleOutput_4!=-1?tmp_batchUpdateCount_tOracleOutput_4:0);
            }
        }
        if(pstmt_tOracleOutput_4 != null) {
			
				pstmt_tOracleOutput_4.close();
				resourceMap.remove("pstmt_tOracleOutput_4");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_4", true);
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
		}
		conn_tOracleOutput_4.commit();
		if(commitCounter_tOracleOutput_4 > 0 && rowsToCommitCount_tOracleOutput_4 != 0) {
			
			rowsToCommitCount_tOracleOutput_4 = 0;
		}
		commitCounter_tOracleOutput_4 = 0;
		
		
		conn_tOracleOutput_4 .close();
		
		resourceMap.put("finish_tOracleOutput_4", true);
   	

	
	nb_line_deleted_tOracleOutput_4=nb_line_deleted_tOracleOutput_4+ deletedCount_tOracleOutput_4;
	nb_line_update_tOracleOutput_4=nb_line_update_tOracleOutput_4 + updatedCount_tOracleOutput_4;
	nb_line_inserted_tOracleOutput_4=nb_line_inserted_tOracleOutput_4 + insertedCount_tOracleOutput_4;
	nb_line_rejected_tOracleOutput_4=nb_line_rejected_tOracleOutput_4 + rejectedCount_tOracleOutput_4;
	
        globalMap.put("tOracleOutput_4_NB_LINE",nb_line_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_UPDATED",nb_line_update_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_4);
        globalMap.put("tOracleOutput_4_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_4);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_4", true);
end_Hash.put("tOracleOutput_4", System.currentTimeMillis());




/**
 * [tOracleOutput_4 end ] stop
 */















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_4";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_4") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_4 = null;
                if ((pstmtToClose_tOracleOutput_4 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_4")) != null) {
                    pstmtToClose_tOracleOutput_4.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_4") == null){
            java.sql.Connection ctn_tOracleOutput_4 = null;
            if((ctn_tOracleOutput_4 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_4")) != null){
                try {
                    ctn_tOracleOutput_4.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_4) {
                    String errorMessage_tOracleOutput_4 = "failed to close the connection in tOracleOutput_4 :" + sqlEx_tOracleOutput_4.getMessage();
                    System.err.println(errorMessage_tOracleOutput_4);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_4 finally ] stop
 */















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 2;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal CUPS_ID;

				public BigDecimal getCUPS_ID () {
					return this.CUPS_ID;
				}

				public Boolean CUPS_IDIsNullable(){
				    return false;
				}
				public Boolean CUPS_IDIsKey(){
				    return false;
				}
				public Integer CUPS_IDLength(){
				    return 0;
				}
				public Integer CUPS_IDPrecision(){
				    return null;
				}
				public String CUPS_IDDefault(){
				
					return "";
				
				}
				public String CUPS_IDComment(){
				
				    return "";
				
				}
				public String CUPS_IDPattern(){
				
					return "";
				
				}
				public String CUPS_IDOriginalDbColumnName(){
				
					return "CUPS_ID";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SERVICIO;

				public String getSERVICIO () {
					return this.SERVICIO;
				}

				public Boolean SERVICIOIsNullable(){
				    return false;
				}
				public Boolean SERVICIOIsKey(){
				    return false;
				}
				public Integer SERVICIOLength(){
				    return 50;
				}
				public Integer SERVICIOPrecision(){
				    return 0;
				}
				public String SERVICIODefault(){
				
					return null;
				
				}
				public String SERVICIOComment(){
				
				    return "";
				
				}
				public String SERVICIOPattern(){
				
					return "";
				
				}
				public String SERVICIOOriginalDbColumnName(){
				
					return "SERVICIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
						result = prime * result + ((this.CUPS_ID == null) ? 0 : this.CUPS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					
						if (this.CUPS_ID == null) {
							if (other.CUPS_ID != null)
								return false;
						
						} else if (!this.CUPS_ID.equals(other.CUPS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.SIGLA = this.SIGLA;
	            other.CUPS_ID = this.CUPS_ID;
	            other.ID = this.ID;
	            other.SERVICIO = this.SERVICIO;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.SIGLA = this.SIGLA;
	            	other.CUPS_ID = this.CUPS_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
						this.CUPS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CUPS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.SERVICIO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.SERVICIO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.SERVICIO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.SERVICIO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SIGLA="+SIGLA);
		sb.append(",CUPS_ID="+String.valueOf(CUPS_ID));
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",SERVICIO="+SERVICIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.CUPS_ID, other.CUPS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_1) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_1 - inputs:(row8,row18,row22) outputs:(DSERVICIO)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = "SELECT \n'AC' AS SIGLA,\nCUCE.CUPS_ID,\nSE.ID,\nSE.NOMBRE AS SERVICIO\nFROM CEC_UORG_CECO_CUPS CUCE \nINNER JOIN CEC_UO"
+"RG_CECO UOCE ON UOCE.ID = CUCE.UORG_CECO_ID AND UOCE.ESTREGISTRO_ID = 1 AND UOCE.ESTADO = 'Activo'\nINNER JOIN CEC_CECO "
+"CECO ON CECO.ID = UOCE.CECO_ID AND CECO.ESTREGISTRO_ID = 1 AND CECO.ESTADO = 'Activo'\nINNER JOIN CEC_CEBE CEBE ON CEBE."
+"ID = CECO.CEBE_ID AND CEBE.ESTREGISTRO_ID = 1 AND CEBE.ESTADO ='Activo'\nINNER JOIN GEN_SERVICIOS SE ON SE.ID = CEBE.SER"
+"VICIOS_ID\nWHERE CUCE.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row18.SIGLA = null;
							} else {
	                         		
        	row18.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row18.CUPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row18.CUPS_ID = rs_tOracleInput_2.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row18.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(3) != null) {
						row18.ID = rs_tOracleInput_2.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 4) {
								row18.SERVICIO = null;
							} else {
	                         		
        	row18.SERVICIO = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 4, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.SIGLA = row18.SIGLA;
				
				row18_HashRow.CUPS_ID = row18.CUPS_ID;
				
				row18_HashRow.ID = row18.ID;
				
				row18_HashRow.SERVICIO = row18.SERVICIO;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.SIGLA = this.SIGLA;
	            other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("SIGLA="+SIGLA);
		sb.append(",ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tOracleInput_3 - inputs:(after_tOracleInput_1) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_1 - inputs:(row8,row18,row22) outputs:(DSERVICIO)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT SIGLA, ID, NOMBRE FROM GEN_SERVICIOS WHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row22.SIGLA = null;
							} else {
	                         		
        	row22.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row22.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row22.ID = rs_tOracleInput_3.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row22.NOMBRE = null;
							} else {
	                         		
        	row22.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 3, false);
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.SIGLA = row22.SIGLA;
				
				row22_HashRow.ID = row22.ID;
				
				row22_HashRow.NOMBRE = row22.NOMBRE;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

tHash_Lookup_row22.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;
context.PathStorage = row1.PathStorage;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class XML_API_tFileInputXML_2{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();

String[] queryPaths_tFileInputXML_2 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_2 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_2 = "";
String[] node_tFileInputXML_2 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_2 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_2,asXMLs_tFileInputXML_2);
looper_tFileInputXML_2.setEncoding("UTF-8");
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.DESTINO;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_2 instanceof java.io.InputStream){
	looper_tFileInputXML_2.parse((java.io.InputStream)filename_tFileInputXML_2);
}else{
	looper_tFileInputXML_2.parse(String.valueOf(filename_tFileInputXML_2));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_2  = looper_tFileInputXML_2.iterator();
while (it_tFileInputXML_2.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_2 = it_tFileInputXML_2.next();
	if (nb_line_tFileInputXML_2>=50) {
	
			looper_tFileInputXML_2.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row23 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row23 = new row23Struct();
	try{
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Host");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Host =null;
									}else{
		row23.Host = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Port");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Port =null;
									}else{
		row23.Port = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Sid");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Sid =null;
									}else{
		row23.Sid = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("ServiceName");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.ServiceName =null;
									}else{
		row23.ServiceName = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Schema");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Schema =null;
									}else{
		row23.Schema = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("User");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.User =null;
									}else{
		row23.User = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Password");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Password =null;
									}else{
		row23.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row23 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_destino_Server = row23.Host;
context.db_destino_Port = row23.Port;
context.db_destino_ServiceName = row23.ServiceName;
context.db_destino_Schema = row23.Schema;
context.db_destino_Login = row23.User;
context.db_destino_Password = row23.Password;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");


System.out.println("- Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);
System.out.println("- Port: "+context.db_origen_Port);
System.out.println("- PDB: "+context.db_origen_Server);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


	}
	try {
		looper_tFileInputXML_2.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleConnection_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
				tLogCatcher_1.addMessage("tDie", "tDie_1", 5, "Fail connection", 4);
				tLogCatcher_1Process(globalMap);
				
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Fail connection");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Fail connection");
	globalMap.put("tDie_1_DIE_MESSAGES", "Fail connection");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
        errorCode = new Integer(4);
        globalMap.put("tDie_1_DIE_CODE", errorCode);        

    
	if(true){	
		TDieException e_tDie_1 = new TDieException();

		

		throw e_tDie_1;
	}

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CODIGO;

				public Integer getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT \n	AE.ID AS ID, \n	AE.CODIGO AS CODIGO \nFROM AFI_ESTEXTDERECHOS AE \nWHERE AE.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row16.ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row16.ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
						row16.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row16.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row16.CODIGO = rs_tOracleInput_6.getInt(2);
					} else {
				
						row16.CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

    //Code generate according to input schema and output schema
switch(row16.CODIGO){
	case 1:
		context.estActivo = row16.ID;
		//System.out.println(context.estActivo);
		break;
	case 2:
		context.estInactivo = row16.ID;
		//System.out.println(context.estInactivo);
		break;
	case 5:
		context.estEnProceso = row16.ID;
		//System.out.println(context.estEnProceso);
		break;
	case 6:
		context.estProcesado = row16.ID;
		//System.out.println(context.estProcesado);
		break;
	case 8:
		context.estErrorProcesamiento = row16.ID;
		//System.out.println(context.estErrorProcesamiento);
		break;
	case 7:
		context.estErrorArchivo = row16.ID;
		//System.out.println(context.estErrorArchivo);
		break;
    case 9:
		context.EstArchivoPCE = row16.ID;
		//System.out.println(context.estErrorArchivo);
		break;
    case 10:
		context.EstValidado = row16.ID;
		//System.out.println(context.estErrorArchivo);
		break;
}
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tOracleInput_5Process(globalMap);



/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				String driverClass_tOracleInput_5 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_5);
				
			String url_tOracleInput_5 = null;
				url_tOracleInput_5 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_5 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_5 = context.db_origen_Password; 

				String dbPwd_tOracleInput_5 = decryptedPassword_tOracleInput_5;

				
					java.util.Properties atnParamsPrope_tOracleInput_5 = new java.util.Properties();
					atnParamsPrope_tOracleInput_5.put("user",dbUser_tOracleInput_5);
					atnParamsPrope_tOracleInput_5.put("password",dbPwd_tOracleInput_5);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_5.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_5 = java.sql.DriverManager.getConnection(url_tOracleInput_5, atnParamsPrope_tOracleInput_5);
				java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_5.next()) {
					sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
				}
                                if (!(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                                }
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT ID FROM ACM_DCARGUE WHERE RECEPCION_ID ="+context.RECEPCION_ID;
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row6.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row6.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

    //Code generate according to input schema and output schema
context.DCARGUE_ID= row6.ID;

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
	if(conn_tOracleInput_5 != null && !conn_tOracleInput_5.isClosed()) {
	
			conn_tOracleInput_5.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class InsFacturasStruct implements routines.system.IPersistableRow<InsFacturasStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return 0;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return null;
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "FK - GEN_CONTRATOS";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return null;
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return false;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return 0;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "0";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "CANTIDAD DE PACIENTES RELACIONADOS EN LA FACTURA";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "0";
				
				}
				public String VALORComment(){
				
				    return "VALOR DE LA FACTURA";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return false;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return 0;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "0";
				
				}
				public String VCALCULADOComment(){
				
				    return "VALOR CALCULADO PARA LA FACTURA";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return false;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return 50;
				}
				public Integer TFACTURAPrecision(){
				    return 0;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "TIPO DE FACTURA  Servicios, Medicamentos";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "'SYSDATE'";
				
				}
				public String FECHAComment(){
				
				    return "Fecha de registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return 50;
				}
				public Integer NUMEROPrecision(){
				    return 0;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "Numero de la factura";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 50;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "Prefijo de la factura";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal SECUENCIA;

				public BigDecimal getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return 0;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "0";
				
				}
				public String SECUENCIAComment(){
				
				    return "Valor secuenciual para la asignacion por rangos";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return 0;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return null;
				
				}
				public String TCARGUEComment(){
				
				    return "Tipo de cargue (1:cargue relacion, 2:cargue detalle, 3:cargue manual)";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(InsFacturasStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return true;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return null;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "";
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return true;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return null;
				}
				public Integer TFACTURAPrecision(){
				    return null;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return false;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return false;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal SECUENCIA;

				public BigDecimal getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "";
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return null;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return "";
				
				}
				public String TCARGUEComment(){
				
				    return "";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return true;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return null;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "";
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return true;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return null;
				}
				public Integer TFACTURAPrecision(){
				    return null;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return false;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return false;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal SECUENCIA;

				public BigDecimal getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "";
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return null;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return "";
				
				}
				public String TCARGUEComment(){
				
				    return "";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return false;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return null;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return "";
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return "";
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return true;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return null;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return null;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "";
				
				}
				public String VALORComment(){
				
				    return "";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "";
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return true;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return null;
				}
				public Integer TFACTURAPrecision(){
				    return null;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return false;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return "";
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return false;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return false;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal SECUENCIA;

				public BigDecimal getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "";
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return null;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return "";
				
				}
				public String TCARGUEComment(){
				
				    return "";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = (BigDecimal) dis.readObject();
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();
row7Struct row12 = row7;
row11Struct row11 = new row11Struct();
InsFacturasStruct InsFacturas = new InsFacturasStruct();







	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"InsFacturas");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 10000;
            int commitCounter_tOracleOutput_3 = 0;
        int batchSize_tOracleOutput_3 = 10000;
        int batchSizeCounter_tOracleOutput_3=0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("ACM_FACTURA");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("ACM_FACTURA");
        }
                String insert_tOracleOutput_3 = "INSERT INTO " + tableName_tOracleOutput_3 + " (RECEPCION_ID,CONTRATOS_ID,PRESTADOR_ID,CANTPACIENTES,VALOR,VCALCULADO,TFACTURA,FECHA,USUARIOS_ID,UORG_ID,NUMERO,PREFIJO,SECUENCIA,TCARGUE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(insert_tOracleOutput_3);
                        resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
InsFacturasStruct InsFacturas_tmp = new InsFacturasStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_CargueServicios_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row7Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement();

		    String dbquery_tOracleInput_4 = "SELECT\n       RE.ID AS RECEPCION_ID,\n        JO.CONTRATOS_ID,\n        RE.PRESTADOR_ID AS PRESTADOR_ID,\n        US.U"
+"SUARIOS AS CANTPACIENTES,\n        FA.VENTIDADCONTRATANTE AS VALOR,\n        VCAL.VALOR_FACTURA as  VCALCULADO,\n       "
+" 'Servicios' AS TFACTURA,\n        FA.FECHA_EXPEDICION AS FECHA,\n        RE.USUARIOS_ID,\n        RE.UORG_ID,\n        "
+"FA.CODFACTURA AS NUMERO,\n        FA.CODFACTURA AS PREFIJO,\n        ROWNUM AS SECUENCIA,\n        2 AS TCARGUE\n       "
+" FROM RIPS_FACTURACION FA\n        INNER JOIN RIPS_JOBS JO ON JO.ID = FA.JOBS_ID\n        INNER JOIN ACM_RECEPCION RE ON"
+" RE.ID = "+context.RECEPCION_ID+"\n        INNER JOIN (SELECT \n    COUNT(DATOS.USUARIO) AS USUARIOS\n    ,DATOS.CODFACTURA\nFROM\n(\n    SELECT CO.DOCU"
+"MENTO AS USUARIO, CO.TDOCUMENTOS_ID, CO.CODFACTURA\n    FROM RIPS_CONSULTAS CO WHERE CO.JOBS_ID = "+context.JOB_ID+" \n    UNION \n    SELECT PR.DOCUMENTO AS USUARIO, PR.TDOCUMENTOS_ID, PR.CODFACTURA\n    FROM RIPS_PROCEDIMIENTOS PR WH"
+"ERE PR.JOBS_ID = "+context.JOB_ID+"\n    UNION \n    SELECT RU.DOCUMENTO AS USUARIO, RU.TDOCUMENTOS_ID, RU.CODFACTURA\n    FROM RIPS_URGENCIAS RU WHERE RU"
+".JOBS_ID = "+context.JOB_ID+"\n    UNION \n    SELECT RH.DOCUMENTO AS USUARIO, RH.TDOCUMENTOS_ID, RH.CODFACTURA\n    FROM RIPS_HOSPITALIZACION RH WH"
+"ERE RH.JOBS_ID = "+context.JOB_ID+"\n    UNION \n    SELECT RN.DOCUMENTO AS USUARIO, RN.TDOCUMENTOS_ID, RN.CODFACTURA\n    FROM RIPS_NACIMIENTOS RN WHERE "
+"RN.JOBS_ID = "+context.JOB_ID+"\n    UNION \n    SELECT RM.DOCUMENTO AS USUARIO, RM.TDOCUMENTOS_ID, RM.CODFACTURA\n    FROM RIPS_MEDICAMENTOS RM WHERE"
+" RM.JOBS_ID = "+context.JOB_ID+"\n    UNION \n    SELECT RA.DOCUMENTO AS USUARIO, RA.TDOCUMENTOS_ID, RA.CODFACTURA\n    FROM RIPS_ATENCIONES RA WHERE R"
+"A.JOBS_ID = "+context.JOB_ID+"\n)DATOS \nGROUP BY DATOS.CODFACTURA) US ON US.CODFACTURA = FA.CODFACTURA\n        INNER JOIN (SELECT\n                "
+"    SUM(VALOR) AS VALOR_FACTURA,\n                    CODFACTURA\n                    FROM (SELECT CODFACTURA, VNETOPAGA"
+"R AS VALOR FROM RIPS_CONSULTAS WHERE JOBS_ID = "+context.JOB_ID+"\n                            UNION ALL\n                            SELECT CODFACTURA, VTOTAL AS VALOR FROM RIPS_MEDIC"
+"AMENTOS WHERE JOBS_ID = "+context.JOB_ID+"\n                            UNION ALL\n                            SELECT CODFACTURA, VPROCEDIMIENTO AS VALOR FROM RI"
+"PS_PROCEDIMIENTOS WHERE JOBS_ID = "+context.JOB_ID+"\n                            UNION ALL\n                            SELECT CODFACTURA, VTOTAL AS VALOR FROM RIPS_ATENC"
+"IONES WHERE JOBS_ID = "+context.JOB_ID+")\n                            GROUP BY CODFACTURA ) VCAL ON VCAL.CODFACTURA = FA.CODFACTURA\n        WHERE\n        JO"
+".ID = "+context.JOB_ID;
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row7.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row7.RECEPCION_ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row7.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(2) != null) {
						row7.CONTRATOS_ID = rs_tOracleInput_4.getBigDecimal(2);
					} else {
				
						row7.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row7.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row7.PRESTADOR_ID = rs_tOracleInput_4.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 4) {
								row7.CANTPACIENTES = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(4) != null) {
						row7.CANTPACIENTES = rs_tOracleInput_4.getBigDecimal(4);
					} else {
				
						row7.CANTPACIENTES = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 5) {
								row7.VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(5) != null) {
						row7.VALOR = rs_tOracleInput_4.getBigDecimal(5);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 6) {
								row7.VCALCULADO = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(6) != null) {
						row7.VCALCULADO = rs_tOracleInput_4.getBigDecimal(6);
					} else {
				
						row7.VCALCULADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 7) {
								row7.TFACTURA = null;
							} else {
	                         		
        	row7.TFACTURA = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 8) {
								row7.FECHA = null;
							} else {
										
			row7.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_4, 8);
		                    }
							if(colQtyInRs_tOracleInput_4 < 9) {
								row7.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(9) != null) {
						row7.USUARIOS_ID = rs_tOracleInput_4.getBigDecimal(9);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 10) {
								row7.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(10) != null) {
						row7.UORG_ID = rs_tOracleInput_4.getBigDecimal(10);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 11) {
								row7.NUMERO = null;
							} else {
	                         		
        	row7.NUMERO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 12) {
								row7.PREFIJO = null;
							} else {
	                         		
        	row7.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 12, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 13) {
								row7.SECUENCIA = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(13) != null) {
						row7.SECUENCIA = rs_tOracleInput_4.getBigDecimal(13);
					} else {
				
						row7.SECUENCIA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 14) {
								row7.TCARGUE = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(14) != null) {
						row7.TCARGUE = rs_tOracleInput_4.getBigDecimal(14);
					} else {
				
						row7.TCARGUE = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					



    
		row7Struct oneRow_tHashOutput_2 = new row7Struct();
				
					oneRow_tHashOutput_2.RECEPCION_ID = row7.RECEPCION_ID;
					oneRow_tHashOutput_2.CONTRATOS_ID = row7.CONTRATOS_ID;
					oneRow_tHashOutput_2.PRESTADOR_ID = row7.PRESTADOR_ID;
					oneRow_tHashOutput_2.CANTPACIENTES = row7.CANTPACIENTES;
					oneRow_tHashOutput_2.VALOR = row7.VALOR;
					oneRow_tHashOutput_2.VCALCULADO = row7.VCALCULADO;
					oneRow_tHashOutput_2.TFACTURA = row7.TFACTURA;
					oneRow_tHashOutput_2.FECHA = row7.FECHA;
					oneRow_tHashOutput_2.USUARIOS_ID = row7.USUARIOS_ID;
					oneRow_tHashOutput_2.UORG_ID = row7.UORG_ID;
					oneRow_tHashOutput_2.NUMERO = row7.NUMERO;
					oneRow_tHashOutput_2.PREFIJO = row7.PREFIJO;
					oneRow_tHashOutput_2.SECUENCIA = row7.SECUENCIA;
					oneRow_tHashOutput_2.TCARGUE = row7.TCARGUE;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 
     row12 = row7;


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					

    //Code generate according to input schema and output schema
row11.RECEPCION_ID = row12.RECEPCION_ID;
row11.CONTRATOS_ID = row12.CONTRATOS_ID;
row11.PRESTADOR_ID = row12.PRESTADOR_ID;
row11.CANTPACIENTES = row12.CANTPACIENTES;
row11.VALOR = row12.VALOR;
row11.VCALCULADO = row12.VCALCULADO;
row11.TFACTURA = row12.TFACTURA;
row11.FECHA = row12.FECHA;
row11.USUARIOS_ID = row12.USUARIOS_ID;
row11.UORG_ID = row12.UORG_ID;
row11.SECUENCIA = row12.SECUENCIA;
row11.TCARGUE = row12.TCARGUE;


String[] vector = PartirPrefijo.PartirFactura(row12.NUMERO);

context.Nfactura = vector[0];
context.Sprefijo = vector[1];

row11.NUMERO = context.Nfactura;
row11.PREFIJO = context.Sprefijo;
System.out.println(context.Nfactura);
System.out.println(context.Sprefijo);
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

InsFacturas = null;


// # Output table : 'InsFacturas'
InsFacturas_tmp.RECEPCION_ID = row11.RECEPCION_ID ;
InsFacturas_tmp.CONTRATOS_ID = row11.CONTRATOS_ID ;
InsFacturas_tmp.PRESTADOR_ID = row11.PRESTADOR_ID ;
InsFacturas_tmp.CANTPACIENTES = row11.CANTPACIENTES ;
InsFacturas_tmp.VALOR = row11.VALOR ;
InsFacturas_tmp.VCALCULADO = row11.VCALCULADO ;
InsFacturas_tmp.TFACTURA = row11.TFACTURA ;
InsFacturas_tmp.FECHA = row11.FECHA ;
InsFacturas_tmp.USUARIOS_ID = row11.USUARIOS_ID ;
InsFacturas_tmp.UORG_ID = row11.UORG_ID ;
InsFacturas_tmp.NUMERO = row11.NUMERO ;
InsFacturas_tmp.PREFIJO = row11.PREFIJO ;
InsFacturas_tmp.SECUENCIA = row11.SECUENCIA ;
InsFacturas_tmp.TCARGUE = row11.TCARGUE ;
InsFacturas = InsFacturas_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "InsFacturas"
if(InsFacturas != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"InsFacturas"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                        pstmt_tOracleOutput_3.setBigDecimal(1, InsFacturas.RECEPCION_ID);

                        pstmt_tOracleOutput_3.setBigDecimal(2, InsFacturas.CONTRATOS_ID);

                        pstmt_tOracleOutput_3.setBigDecimal(3, InsFacturas.PRESTADOR_ID);

                        pstmt_tOracleOutput_3.setBigDecimal(4, InsFacturas.CANTPACIENTES);

                        pstmt_tOracleOutput_3.setBigDecimal(5, InsFacturas.VALOR);

                        pstmt_tOracleOutput_3.setBigDecimal(6, InsFacturas.VCALCULADO);

                        if(InsFacturas.TFACTURA == null) {
pstmt_tOracleOutput_3.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(7, InsFacturas.TFACTURA);
}

                        if(InsFacturas.FECHA != null) {
pstmt_tOracleOutput_3.setObject(8, new java.sql.Timestamp(InsFacturas.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_3.setNull(8, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_3.setBigDecimal(9, InsFacturas.USUARIOS_ID);

                        pstmt_tOracleOutput_3.setBigDecimal(10, InsFacturas.UORG_ID);

                        if(InsFacturas.NUMERO == null) {
pstmt_tOracleOutput_3.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(11, InsFacturas.NUMERO);
}

                        if(InsFacturas.PREFIJO == null) {
pstmt_tOracleOutput_3.setNull(12, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_3.setString(12, InsFacturas.PREFIJO);
}

                        pstmt_tOracleOutput_3.setBigDecimal(13, InsFacturas.SECUENCIA);

                        pstmt_tOracleOutput_3.setBigDecimal(14, InsFacturas.TCARGUE);

                pstmt_tOracleOutput_3.addBatch();
                nb_line_tOracleOutput_3++;
                batchSizeCounter_tOracleOutput_3++;
            if (batchSize_tOracleOutput_3 > 0 &&  batchSize_tOracleOutput_3 <= batchSizeCounter_tOracleOutput_3) {
                try {
                    pstmt_tOracleOutput_3.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
			        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
			    	String errormessage_tOracleOutput_3;
					if (ne_tOracleOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
						errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
					}else{
						errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_3);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                    insertedCount_tOracleOutput_3
                += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                batchSizeCounter_tOracleOutput_3 = 0;
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(batchSizeCounter_tOracleOutput_3 > 0) {
                        try {
                            pstmt_tOracleOutput_3.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
					        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
					    	String errormessage_tOracleOutput_3;
							if (ne_tOracleOutput_3 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
								errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
							}else{
								errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_3);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                            insertedCount_tOracleOutput_3
                        += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                        rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                    	batchSizeCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "InsFacturas"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_3 > 0) {
            try {
            	if (pstmt_tOracleOutput_3 != null) {
					
					pstmt_tOracleOutput_3.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
		        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
		    	String errormessage_tOracleOutput_3;
				if (ne_tOracleOutput_3 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
					errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
				}else{
					errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_3);
            	
        	}
        	if (pstmt_tOracleOutput_3 != null) {
            	tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_3
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
				rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
            }
        }
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"InsFacturas");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return "";
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return "";
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return "";
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return "";
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return "";
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return "";
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return "";
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return "";
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return "";
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return "";
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueServicios, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueServicios) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();
row2Struct row4 = row2;





	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tRunJob_1 = 0;
		


 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row2.type = lcm.getType();
		row2.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row2.priority = lcm.getPriority();
		row2.message = lcm.getMessage();
		row2.code = lcm.getCode();
		
		row2.moment = java.util.Calendar.getInstance().getTime();
	
    	row2.pid = pid;
		row2.root_pid = rootPid;
		row2.father_pid = fatherPid;
	
    	row2.project = projectName;
    	row2.job = jobName;
    	row2.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row2.moment != null) {
                        sb_tFileOutputDelimited_1.append(
                            FormatterUtils.format_Date(row2.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.root_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.father_pid != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.project != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.project
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.job != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.job
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.context != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.context
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.priority != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.priority
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.type != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.type
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.origin != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.origin
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.message != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.message
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row2.code != null) {
                        sb_tFileOutputDelimited_1.append(
                            row2.code
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 
     row4 = row2;


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
	        				paraList_tRunJob_1.add("--father_pid="+pid);
	      			
	        				paraList_tRunJob_1.add("--root_pid="+rootPid);
	      			
	        				paraList_tRunJob_1.add("--father_node=tRunJob_1");
	      			
	        				paraList_tRunJob_1.add("--context=Default");
	      			
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + portStats);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row4.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = row4.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_ServiceName;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("service_name_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
	
		acm_control_auditoria.mail_0_1.Mail childJob_tRunJob_1 = new acm_control_auditoria.mail_0_1.Mail();
	    // pass DataSources
	    java.util.Map<String, routines.system.TalendDataSource> talendDataSources_tRunJob_1 = (java.util.Map<String, routines.system.TalendDataSource>) globalMap
	            .get(KEY_DB_DATASOURCES);
	    if (null != talendDataSources_tRunJob_1) {
	        java.util.Map<String, javax.sql.DataSource> dataSources_tRunJob_1 = new java.util.HashMap<String, javax.sql.DataSource>();
	        for (java.util.Map.Entry<String, routines.system.TalendDataSource> talendDataSourceEntry_tRunJob_1 : talendDataSources_tRunJob_1
			        .entrySet()) {
	            dataSources_tRunJob_1.put(talendDataSourceEntry_tRunJob_1.getKey(),
	                    talendDataSourceEntry_tRunJob_1.getValue().getRawDataSource());
	        }
	        childJob_tRunJob_1.setDataSources(dataSources_tRunJob_1);
	    }
		  
			childJob_tRunJob_1.parentContextMap = parentContextMap_tRunJob_1;
		  
		
		String[][] childReturn_tRunJob_1 = childJob_tRunJob_1.runJob((String[]) paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));
		
            if(childJob_tRunJob_1.getErrorCode() == null){
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getStatus() != null && ("failure").equals(childJob_tRunJob_1.getStatus()) ? 1 : 0);
            }else{
                globalMap.put("tRunJob_1_CHILD_RETURN_CODE", childJob_tRunJob_1.getErrorCode());
            }
            if (childJob_tRunJob_1.getExceptionStackTrace() != null) {
                globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE", childJob_tRunJob_1.getExceptionStackTrace());
            }
                    errorCode = childJob_tRunJob_1.getErrorCode();
                if (childJob_tRunJob_1.getErrorCode() != null || ("failure").equals(childJob_tRunJob_1.getStatus())) {
                    java.lang.Exception ce_tRunJob_1 = childJob_tRunJob_1.getException();
                    throw new RuntimeException("Child job running failed.\n" + ((ce_tRunJob_1!=null) ? (ce_tRunJob_1.getClass().getName() + ": " + ce_tRunJob_1.getMessage()) : ""));
                }

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final CargueServicios CargueServiciosClass = new CargueServicios();

        int exitCode = CargueServiciosClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CargueServicios.class.getClassLoader().getResourceAsStream("acm_control_auditoria/cargueservicios_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CargueServicios.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("BANDERA", "id_Integer");
                        if(context.getStringValue("BANDERA") == null) {
                            context.BANDERA = null;
                        } else {
                            try{
                                context.BANDERA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("BANDERA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BANDERA", e.getMessage()));
                                context.BANDERA=null;
                            }
                        }
                        context.setContextType("bodega", "id_String");
                        if(context.getStringValue("bodega") == null) {
                            context.bodega = null;
                        } else {
                            context.bodega=(String) context.getProperty("bodega");
                        }
                        context.setContextType("cantidad", "id_String");
                        if(context.getStringValue("cantidad") == null) {
                            context.cantidad = null;
                        } else {
                            context.cantidad=(String) context.getProperty("cantidad");
                        }
                        context.setContextType("cantidad_despachada", "id_String");
                        if(context.getStringValue("cantidad_despachada") == null) {
                            context.cantidad_despachada = null;
                        } else {
                            context.cantidad_despachada=(String) context.getProperty("cantidad_despachada");
                        }
                        context.setContextType("cantidad_solicitada", "id_String");
                        if(context.getStringValue("cantidad_solicitada") == null) {
                            context.cantidad_solicitada = null;
                        } else {
                            context.cantidad_solicitada=(String) context.getProperty("cantidad_solicitada");
                        }
                        context.setContextType("codigo_autorizacion", "id_String");
                        if(context.getStringValue("codigo_autorizacion") == null) {
                            context.codigo_autorizacion = null;
                        } else {
                            context.codigo_autorizacion=(String) context.getProperty("codigo_autorizacion");
                        }
                        context.setContextType("codigo_cie10", "id_String");
                        if(context.getStringValue("codigo_cie10") == null) {
                            context.codigo_cie10 = null;
                        } else {
                            context.codigo_cie10=(String) context.getProperty("codigo_cie10");
                        }
                        context.setContextType("codigo_cum", "id_String");
                        if(context.getStringValue("codigo_cum") == null) {
                            context.codigo_cum = null;
                        } else {
                            context.codigo_cum=(String) context.getProperty("codigo_cum");
                        }
                        context.setContextType("codigo_cups", "id_String");
                        if(context.getStringValue("codigo_cups") == null) {
                            context.codigo_cups = null;
                        } else {
                            context.codigo_cups=(String) context.getProperty("codigo_cups");
                        }
                        context.setContextType("concentracion", "id_String");
                        if(context.getStringValue("concentracion") == null) {
                            context.concentracion = null;
                        } else {
                            context.concentracion=(String) context.getProperty("concentracion");
                        }
                        context.setContextType("confidencialidad", "id_String");
                        if(context.getStringValue("confidencialidad") == null) {
                            context.confidencialidad = null;
                        } else {
                            context.confidencialidad=(String) context.getProperty("confidencialidad");
                        }
                        context.setContextType("CONTRATOS_ID", "id_BigDecimal");
                        if(context.getStringValue("CONTRATOS_ID") == null) {
                            context.CONTRATOS_ID = null;
                        } else {
                            try{
                                context.CONTRATOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CONTRATOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CONTRATOS_ID", e.getMessage()));
                                context.CONTRATOS_ID=null;
                            }
                        }
                        context.setContextType("ctc_aprobado", "id_String");
                        if(context.getStringValue("ctc_aprobado") == null) {
                            context.ctc_aprobado = null;
                        } else {
                            context.ctc_aprobado=(String) context.getProperty("ctc_aprobado");
                        }
                        context.setContextType("descripcion_cie10", "id_String");
                        if(context.getStringValue("descripcion_cie10") == null) {
                            context.descripcion_cie10 = null;
                        } else {
                            context.descripcion_cie10=(String) context.getProperty("descripcion_cie10");
                        }
                        context.setContextType("descripcion_cups", "id_String");
                        if(context.getStringValue("descripcion_cups") == null) {
                            context.descripcion_cups = null;
                        } else {
                            context.descripcion_cups=(String) context.getProperty("descripcion_cups");
                        }
                        context.setContextType("documento", "id_String");
                        if(context.getStringValue("documento") == null) {
                            context.documento = null;
                        } else {
                            context.documento=(String) context.getProperty("documento");
                        }
                        context.setContextType("esm", "id_String");
                        if(context.getStringValue("esm") == null) {
                            context.esm = null;
                        } else {
                            context.esm=(String) context.getProperty("esm");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("EstAfiliacionActivo", "id_Integer");
                        if(context.getStringValue("EstAfiliacionActivo") == null) {
                            context.EstAfiliacionActivo = null;
                        } else {
                            try{
                                context.EstAfiliacionActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliacionActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliacionActivo", e.getMessage()));
                                context.EstAfiliacionActivo=null;
                            }
                        }
                        context.setContextType("EstAfiliacionProvisional", "id_Integer");
                        if(context.getStringValue("EstAfiliacionProvisional") == null) {
                            context.EstAfiliacionProvisional = null;
                        } else {
                            try{
                                context.EstAfiliacionProvisional=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliacionProvisional"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliacionProvisional", e.getMessage()));
                                context.EstAfiliacionProvisional=null;
                            }
                        }
                        context.setContextType("EstAfiliaicionInactivo", "id_Integer");
                        if(context.getStringValue("EstAfiliaicionInactivo") == null) {
                            context.EstAfiliaicionInactivo = null;
                        } else {
                            try{
                                context.EstAfiliaicionInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliaicionInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliaicionInactivo", e.getMessage()));
                                context.EstAfiliaicionInactivo=null;
                            }
                        }
                        context.setContextType("EstArchivoPCE", "id_BigDecimal");
                        if(context.getStringValue("EstArchivoPCE") == null) {
                            context.EstArchivoPCE = null;
                        } else {
                            try{
                                context.EstArchivoPCE=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("EstArchivoPCE"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstArchivoPCE", e.getMessage()));
                                context.EstArchivoPCE=null;
                            }
                        }
                        context.setContextType("fecha_autorizacion", "id_String");
                        if(context.getStringValue("fecha_autorizacion") == null) {
                            context.fecha_autorizacion = null;
                        } else {
                            context.fecha_autorizacion=(String) context.getProperty("fecha_autorizacion");
                        }
                        context.setContextType("fecha_dispensacion", "id_String");
                        if(context.getStringValue("fecha_dispensacion") == null) {
                            context.fecha_dispensacion = null;
                        } else {
                            context.fecha_dispensacion=(String) context.getProperty("fecha_dispensacion");
                        }
                        context.setContextType("fecha_egreso", "id_String");
                        if(context.getStringValue("fecha_egreso") == null) {
                            context.fecha_egreso = null;
                        } else {
                            context.fecha_egreso=(String) context.getProperty("fecha_egreso");
                        }
                        context.setContextType("fecha_factura", "id_String");
                        if(context.getStringValue("fecha_factura") == null) {
                            context.fecha_factura = null;
                        } else {
                            context.fecha_factura=(String) context.getProperty("fecha_factura");
                        }
                        context.setContextType("fecha_formulacion", "id_String");
                        if(context.getStringValue("fecha_formulacion") == null) {
                            context.fecha_formulacion = null;
                        } else {
                            context.fecha_formulacion=(String) context.getProperty("fecha_formulacion");
                        }
                        context.setContextType("fecha_ingreso", "id_String");
                        if(context.getStringValue("fecha_ingreso") == null) {
                            context.fecha_ingreso = null;
                        } else {
                            context.fecha_ingreso=(String) context.getProperty("fecha_ingreso");
                        }
                        context.setContextType("FECHA_NULL", "id_Date");
                        if(context.getStringValue("FECHA_NULL") == null) {
                            context.FECHA_NULL = null;
                        } else {
                            String context_FECHA_NULL_value = context.getProperty("FECHA_NULL");
                            try{
                                if (context_FECHA_NULL_value == null){
                                    context_FECHA_NULL_value = "";
                                }
                                int context_FECHA_NULL_pos = context_FECHA_NULL_value.indexOf(";");
                                String context_FECHA_NULL_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_NULL_pos > -1){
                                    context_FECHA_NULL_pattern = context_FECHA_NULL_value.substring(0, context_FECHA_NULL_pos);
                                    context_FECHA_NULL_value = context_FECHA_NULL_value.substring(context_FECHA_NULL_pos + 1);
                                }

                                context.FECHA_NULL=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_NULL_pattern).parse(context_FECHA_NULL_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_NULL_longValue = Long.valueOf(context_FECHA_NULL_value);
                                    context.FECHA_NULL = new java.util.Date(context_FECHA_NULL_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_NULL", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_NULL=null;
                                }
                            }
                        }
                        context.setContextType("fecha_registro", "id_String");
                        if(context.getStringValue("fecha_registro") == null) {
                            context.fecha_registro = null;
                        } else {
                            context.fecha_registro=(String) context.getProperty("fecha_registro");
                        }
                        context.setContextType("fecha_servicio", "id_String");
                        if(context.getStringValue("fecha_servicio") == null) {
                            context.fecha_servicio = null;
                        } else {
                            context.fecha_servicio=(String) context.getProperty("fecha_servicio");
                        }
                        context.setContextType("fecha_vencimiento", "id_String");
                        if(context.getStringValue("fecha_vencimiento") == null) {
                            context.fecha_vencimiento = null;
                        } else {
                            context.fecha_vencimiento=(String) context.getProperty("fecha_vencimiento");
                        }
                        context.setContextType("fuerza_militar", "id_String");
                        if(context.getStringValue("fuerza_militar") == null) {
                            context.fuerza_militar = null;
                        } else {
                            context.fuerza_militar=(String) context.getProperty("fuerza_militar");
                        }
                        context.setContextType("HORA", "id_Integer");
                        if(context.getStringValue("HORA") == null) {
                            context.HORA = null;
                        } else {
                            try{
                                context.HORA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HORA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HORA", e.getMessage()));
                                context.HORA=null;
                            }
                        }
                        context.setContextType("invima", "id_String");
                        if(context.getStringValue("invima") == null) {
                            context.invima = null;
                        } else {
                            context.invima=(String) context.getProperty("invima");
                        }
                        context.setContextType("laboratorio", "id_String");
                        if(context.getStringValue("laboratorio") == null) {
                            context.laboratorio = null;
                        } else {
                            context.laboratorio=(String) context.getProperty("laboratorio");
                        }
                        context.setContextType("lote", "id_String");
                        if(context.getStringValue("lote") == null) {
                            context.lote = null;
                        } else {
                            context.lote=(String) context.getProperty("lote");
                        }
                        context.setContextType("lugar_dispensacion", "id_String");
                        if(context.getStringValue("lugar_dispensacion") == null) {
                            context.lugar_dispensacion = null;
                        } else {
                            context.lugar_dispensacion=(String) context.getProperty("lugar_dispensacion");
                        }
                        context.setContextType("MEDCONTRATOS_ID", "id_BigDecimal");
                        if(context.getStringValue("MEDCONTRATOS_ID") == null) {
                            context.MEDCONTRATOS_ID = null;
                        } else {
                            try{
                                context.MEDCONTRATOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MEDCONTRATOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MEDCONTRATOS_ID", e.getMessage()));
                                context.MEDCONTRATOS_ID=null;
                            }
                        }
                        context.setContextType("Narchivo", "id_String");
                        if(context.getStringValue("Narchivo") == null) {
                            context.Narchivo = null;
                        } else {
                            context.Narchivo=(String) context.getProperty("Narchivo");
                        }
                        context.setContextType("nombre_medicamento", "id_String");
                        if(context.getStringValue("nombre_medicamento") == null) {
                            context.nombre_medicamento = null;
                        } else {
                            context.nombre_medicamento=(String) context.getProperty("nombre_medicamento");
                        }
                        context.setContextType("numero", "id_String");
                        if(context.getStringValue("numero") == null) {
                            context.numero = null;
                        } else {
                            context.numero=(String) context.getProperty("numero");
                        }
                        context.setContextType("numero_factura", "id_String");
                        if(context.getStringValue("numero_factura") == null) {
                            context.numero_factura = null;
                        } else {
                            context.numero_factura=(String) context.getProperty("numero_factura");
                        }
                        context.setContextType("numero_formula", "id_String");
                        if(context.getStringValue("numero_formula") == null) {
                            context.numero_formula = null;
                        } else {
                            context.numero_formula=(String) context.getProperty("numero_formula");
                        }
                        context.setContextType("observaciones", "id_String");
                        if(context.getStringValue("observaciones") == null) {
                            context.observaciones = null;
                        } else {
                            context.observaciones=(String) context.getProperty("observaciones");
                        }
                        context.setContextType("origen_formulacion", "id_String");
                        if(context.getStringValue("origen_formulacion") == null) {
                            context.origen_formulacion = null;
                        } else {
                            context.origen_formulacion=(String) context.getProperty("origen_formulacion");
                        }
                        context.setContextType("periodo", "id_String");
                        if(context.getStringValue("periodo") == null) {
                            context.periodo = null;
                        } else {
                            context.periodo=(String) context.getProperty("periodo");
                        }
                        context.setContextType("prefijo", "id_String");
                        if(context.getStringValue("prefijo") == null) {
                            context.prefijo = null;
                        } else {
                            context.prefijo=(String) context.getProperty("prefijo");
                        }
                        context.setContextType("presentacion", "id_String");
                        if(context.getStringValue("presentacion") == null) {
                            context.presentacion = null;
                        } else {
                            context.presentacion=(String) context.getProperty("presentacion");
                        }
                        context.setContextType("PRESTADOR", "id_BigDecimal");
                        if(context.getStringValue("PRESTADOR") == null) {
                            context.PRESTADOR = null;
                        } else {
                            try{
                                context.PRESTADOR=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PRESTADOR"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PRESTADOR", e.getMessage()));
                                context.PRESTADOR=null;
                            }
                        }
                        context.setContextType("producto_comercial", "id_String");
                        if(context.getStringValue("producto_comercial") == null) {
                            context.producto_comercial = null;
                        } else {
                            context.producto_comercial=(String) context.getProperty("producto_comercial");
                        }
                        context.setContextType("servicio", "id_String");
                        if(context.getStringValue("servicio") == null) {
                            context.servicio = null;
                        } else {
                            context.servicio=(String) context.getProperty("servicio");
                        }
                        context.setContextType("ssmp", "id_String");
                        if(context.getStringValue("ssmp") == null) {
                            context.ssmp = null;
                        } else {
                            context.ssmp=(String) context.getProperty("ssmp");
                        }
                        context.setContextType("subtotal", "id_String");
                        if(context.getStringValue("subtotal") == null) {
                            context.subtotal = null;
                        } else {
                            context.subtotal=(String) context.getProperty("subtotal");
                        }
                        context.setContextType("tipificacion", "id_String");
                        if(context.getStringValue("tipificacion") == null) {
                            context.tipificacion = null;
                        } else {
                            context.tipificacion=(String) context.getProperty("tipificacion");
                        }
                        context.setContextType("tipo", "id_String");
                        if(context.getStringValue("tipo") == null) {
                            context.tipo = null;
                        } else {
                            context.tipo=(String) context.getProperty("tipo");
                        }
                        context.setContextType("tipo_documento", "id_String");
                        if(context.getStringValue("tipo_documento") == null) {
                            context.tipo_documento = null;
                        } else {
                            context.tipo_documento=(String) context.getProperty("tipo_documento");
                        }
                        context.setContextType("tipo_formula", "id_String");
                        if(context.getStringValue("tipo_formula") == null) {
                            context.tipo_formula = null;
                        } else {
                            context.tipo_formula=(String) context.getProperty("tipo_formula");
                        }
                        context.setContextType("tipo_servicio", "id_String");
                        if(context.getStringValue("tipo_servicio") == null) {
                            context.tipo_servicio = null;
                        } else {
                            context.tipo_servicio=(String) context.getProperty("tipo_servicio");
                        }
                        context.setContextType("TipoRespuesta", "id_BigDecimal");
                        if(context.getStringValue("TipoRespuesta") == null) {
                            context.TipoRespuesta = null;
                        } else {
                            try{
                                context.TipoRespuesta=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TipoRespuesta"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TipoRespuesta", e.getMessage()));
                                context.TipoRespuesta=null;
                            }
                        }
                        context.setContextType("tirilla", "id_String");
                        if(context.getStringValue("tirilla") == null) {
                            context.tirilla = null;
                        } else {
                            context.tirilla=(String) context.getProperty("tirilla");
                        }
                        context.setContextType("unidad_medida", "id_String");
                        if(context.getStringValue("unidad_medida") == null) {
                            context.unidad_medida = null;
                        } else {
                            context.unidad_medida=(String) context.getProperty("unidad_medida");
                        }
                        context.setContextType("valor_gravado", "id_String");
                        if(context.getStringValue("valor_gravado") == null) {
                            context.valor_gravado = null;
                        } else {
                            context.valor_gravado=(String) context.getProperty("valor_gravado");
                        }
                        context.setContextType("valor_intermediacion", "id_String");
                        if(context.getStringValue("valor_intermediacion") == null) {
                            context.valor_intermediacion = null;
                        } else {
                            context.valor_intermediacion=(String) context.getProperty("valor_intermediacion");
                        }
                        context.setContextType("valor_total", "id_String");
                        if(context.getStringValue("valor_total") == null) {
                            context.valor_total = null;
                        } else {
                            context.valor_total=(String) context.getProperty("valor_total");
                        }
                        context.setContextType("valor_unitario", "id_String");
                        if(context.getStringValue("valor_unitario") == null) {
                            context.valor_unitario = null;
                        } else {
                            context.valor_unitario=(String) context.getProperty("valor_unitario");
                        }
                        context.setContextType("via_administracion", "id_String");
                        if(context.getStringValue("via_administracion") == null) {
                            context.via_administracion = null;
                        } else {
                            context.via_administracion=(String) context.getProperty("via_administracion");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("PathStorage", "id_String");
                        if(context.getStringValue("PathStorage") == null) {
                            context.PathStorage = null;
                        } else {
                            context.PathStorage=(String) context.getProperty("PathStorage");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("CargueArchivoId", "id_Integer");
                        if(context.getStringValue("CargueArchivoId") == null) {
                            context.CargueArchivoId = null;
                        } else {
                            try{
                                context.CargueArchivoId=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CargueArchivoId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CargueArchivoId", e.getMessage()));
                                context.CargueArchivoId=null;
                            }
                        }
                        context.setContextType("fechaArchivoErrores", "id_String");
                        if(context.getStringValue("fechaArchivoErrores") == null) {
                            context.fechaArchivoErrores = null;
                        } else {
                            context.fechaArchivoErrores=(String) context.getProperty("fechaArchivoErrores");
                        }
                        context.setContextType("nErroresArchivo", "id_Integer");
                        if(context.getStringValue("nErroresArchivo") == null) {
                            context.nErroresArchivo = null;
                        } else {
                            try{
                                context.nErroresArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("nErroresArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "nErroresArchivo", e.getMessage()));
                                context.nErroresArchivo=null;
                            }
                        }
                        context.setContextType("nRegArchivo", "id_Integer");
                        if(context.getStringValue("nRegArchivo") == null) {
                            context.nRegArchivo = null;
                        } else {
                            try{
                                context.nRegArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("nRegArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "nRegArchivo", e.getMessage()));
                                context.nRegArchivo=null;
                            }
                        }
                        context.setContextType("vArchivo_Id", "id_BigDecimal");
                        if(context.getStringValue("vArchivo_Id") == null) {
                            context.vArchivo_Id = null;
                        } else {
                            try{
                                context.vArchivo_Id=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vArchivo_Id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vArchivo_Id", e.getMessage()));
                                context.vArchivo_Id=null;
                            }
                        }
                        context.setContextType("vCantRegistros", "id_Integer");
                        if(context.getStringValue("vCantRegistros") == null) {
                            context.vCantRegistros = null;
                        } else {
                            try{
                                context.vCantRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vCantRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vCantRegistros", e.getMessage()));
                                context.vCantRegistros=null;
                            }
                        }
                        context.setContextType("vEstadoCarga", "id_String");
                        if(context.getStringValue("vEstadoCarga") == null) {
                            context.vEstadoCarga = null;
                        } else {
                            context.vEstadoCarga=(String) context.getProperty("vEstadoCarga");
                        }
                        context.setContextType("vIdTipoArchivo", "id_BigDecimal");
                        if(context.getStringValue("vIdTipoArchivo") == null) {
                            context.vIdTipoArchivo = null;
                        } else {
                            try{
                                context.vIdTipoArchivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIdTipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIdTipoArchivo", e.getMessage()));
                                context.vIdTipoArchivo=null;
                            }
                        }
                        context.setContextType("vNombreArchivo", "id_String");
                        if(context.getStringValue("vNombreArchivo") == null) {
                            context.vNombreArchivo = null;
                        } else {
                            context.vNombreArchivo=(String) context.getProperty("vNombreArchivo");
                        }
                        context.setContextType("vNombreTipoArchivo", "id_String");
                        if(context.getStringValue("vNombreTipoArchivo") == null) {
                            context.vNombreTipoArchivo = null;
                        } else {
                            context.vNombreTipoArchivo=(String) context.getProperty("vNombreTipoArchivo");
                        }
                        context.setContextType("vPeriodo", "id_Date");
                        if(context.getStringValue("vPeriodo") == null) {
                            context.vPeriodo = null;
                        } else {
                            String context_vPeriodo_value = context.getProperty("vPeriodo");
                            try{
                                if (context_vPeriodo_value == null){
                                    context_vPeriodo_value = "";
                                }
                                int context_vPeriodo_pos = context_vPeriodo_value.indexOf(";");
                                String context_vPeriodo_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vPeriodo_pos > -1){
                                    context_vPeriodo_pattern = context_vPeriodo_value.substring(0, context_vPeriodo_pos);
                                    context_vPeriodo_value = context_vPeriodo_value.substring(context_vPeriodo_pos + 1);
                                }

                                context.vPeriodo=(java.util.Date)(new java.text.SimpleDateFormat(context_vPeriodo_pattern).parse(context_vPeriodo_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vPeriodo_longValue = Long.valueOf(context_vPeriodo_value);
                                    context.vPeriodo = new java.util.Date(context_vPeriodo_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vPeriodo", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vPeriodo=null;
                                }
                            }
                        }
                        context.setContextType("vRecepcionId", "id_BigDecimal");
                        if(context.getStringValue("vRecepcionId") == null) {
                            context.vRecepcionId = null;
                        } else {
                            try{
                                context.vRecepcionId=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vRecepcionId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vRecepcionId", e.getMessage()));
                                context.vRecepcionId=null;
                            }
                        }
                        context.setContextType("vTipoArchivo", "id_String");
                        if(context.getStringValue("vTipoArchivo") == null) {
                            context.vTipoArchivo = null;
                        } else {
                            context.vTipoArchivo=(String) context.getProperty("vTipoArchivo");
                        }
                        context.setContextType("contador", "id_Integer");
                        if(context.getStringValue("contador") == null) {
                            context.contador = null;
                        } else {
                            try{
                                context.contador=routines.system.ParserUtils.parseTo_Integer (context.getProperty("contador"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "contador", e.getMessage()));
                                context.contador=null;
                            }
                        }
                        context.setContextType("eCIE10", "id_String");
                        if(context.getStringValue("eCIE10") == null) {
                            context.eCIE10 = null;
                        } else {
                            context.eCIE10=(String) context.getProperty("eCIE10");
                        }
                        context.setContextType("eComercial", "id_String");
                        if(context.getStringValue("eComercial") == null) {
                            context.eComercial = null;
                        } else {
                            context.eComercial=(String) context.getProperty("eComercial");
                        }
                        context.setContextType("eConcentracion", "id_String");
                        if(context.getStringValue("eConcentracion") == null) {
                            context.eConcentracion = null;
                        } else {
                            context.eConcentracion=(String) context.getProperty("eConcentracion");
                        }
                        }

                private void processContext_1() {
                        context.setContextType("eCTC", "id_String");
                        if(context.getStringValue("eCTC") == null) {
                            context.eCTC = null;
                        } else {
                            context.eCTC=(String) context.getProperty("eCTC");
                        }
                        context.setContextType("eCum", "id_String");
                        if(context.getStringValue("eCum") == null) {
                            context.eCum = null;
                        } else {
                            context.eCum=(String) context.getProperty("eCum");
                        }
                        context.setContextType("eCUPS", "id_String");
                        if(context.getStringValue("eCUPS") == null) {
                            context.eCUPS = null;
                        } else {
                            context.eCUPS=(String) context.getProperty("eCUPS");
                        }
                        context.setContextType("eESM", "id_String");
                        if(context.getStringValue("eESM") == null) {
                            context.eESM = null;
                        } else {
                            context.eESM=(String) context.getProperty("eESM");
                        }
                        context.setContextType("eGeneral", "id_String");
                        if(context.getStringValue("eGeneral") == null) {
                            context.eGeneral = null;
                        } else {
                            context.eGeneral=(String) context.getProperty("eGeneral");
                        }
                        context.setContextType("eGenerico", "id_String");
                        if(context.getStringValue("eGenerico") == null) {
                            context.eGenerico = null;
                        } else {
                            context.eGenerico=(String) context.getProperty("eGenerico");
                        }
                        context.setContextType("eInvima", "id_String");
                        if(context.getStringValue("eInvima") == null) {
                            context.eInvima = null;
                        } else {
                            context.eInvima=(String) context.getProperty("eInvima");
                        }
                        context.setContextType("eLaboratorio", "id_String");
                        if(context.getStringValue("eLaboratorio") == null) {
                            context.eLaboratorio = null;
                        } else {
                            context.eLaboratorio=(String) context.getProperty("eLaboratorio");
                        }
                        context.setContextType("ePersona", "id_String");
                        if(context.getStringValue("ePersona") == null) {
                            context.ePersona = null;
                        } else {
                            context.ePersona=(String) context.getProperty("ePersona");
                        }
                        context.setContextType("ePresentacion", "id_String");
                        if(context.getStringValue("ePresentacion") == null) {
                            context.ePresentacion = null;
                        } else {
                            context.ePresentacion=(String) context.getProperty("ePresentacion");
                        }
                        context.setContextType("eSSMP", "id_String");
                        if(context.getStringValue("eSSMP") == null) {
                            context.eSSMP = null;
                        } else {
                            context.eSSMP=(String) context.getProperty("eSSMP");
                        }
                        context.setContextType("eTipoFormula", "id_String");
                        if(context.getStringValue("eTipoFormula") == null) {
                            context.eTipoFormula = null;
                        } else {
                            context.eTipoFormula=(String) context.getProperty("eTipoFormula");
                        }
                        context.setContextType("eUmedida", "id_String");
                        if(context.getStringValue("eUmedida") == null) {
                            context.eUmedida = null;
                        } else {
                            context.eUmedida=(String) context.getProperty("eUmedida");
                        }
                        context.setContextType("eViaAdministracion", "id_String");
                        if(context.getStringValue("eViaAdministracion") == null) {
                            context.eViaAdministracion = null;
                        } else {
                            context.eViaAdministracion=(String) context.getProperty("eViaAdministracion");
                        }
                        context.setContextType("code", "id_Integer");
                        if(context.getStringValue("code") == null) {
                            context.code = null;
                        } else {
                            try{
                                context.code=routines.system.ParserUtils.parseTo_Integer (context.getProperty("code"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "code", e.getMessage()));
                                context.code=null;
                            }
                        }
                        context.setContextType("context", "id_String");
                        if(context.getStringValue("context") == null) {
                            context.context = null;
                        } else {
                            context.context=(String) context.getProperty("context");
                        }
                        context.setContextType("job", "id_String");
                        if(context.getStringValue("job") == null) {
                            context.job = null;
                        } else {
                            context.job=(String) context.getProperty("job");
                        }
                        context.setContextType("message", "id_String");
                        if(context.getStringValue("message") == null) {
                            context.message = null;
                        } else {
                            context.message=(String) context.getProperty("message");
                        }
                        context.setContextType("moment", "id_Date");
                        if(context.getStringValue("moment") == null) {
                            context.moment = null;
                        } else {
                            String context_moment_value = context.getProperty("moment");
                            try{
                                if (context_moment_value == null){
                                    context_moment_value = "";
                                }
                                int context_moment_pos = context_moment_value.indexOf(";");
                                String context_moment_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_moment_pos > -1){
                                    context_moment_pattern = context_moment_value.substring(0, context_moment_pos);
                                    context_moment_value = context_moment_value.substring(context_moment_pos + 1);
                                }

                                context.moment=(java.util.Date)(new java.text.SimpleDateFormat(context_moment_pattern).parse(context_moment_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_moment_longValue = Long.valueOf(context_moment_value);
                                    context.moment = new java.util.Date(context_moment_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "moment", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.moment=null;
                                }
                            }
                        }
                        context.setContextType("origen", "id_String");
                        if(context.getStringValue("origen") == null) {
                            context.origen = null;
                        } else {
                            context.origen=(String) context.getProperty("origen");
                        }
                        context.setContextType("priority", "id_Integer");
                        if(context.getStringValue("priority") == null) {
                            context.priority = null;
                        } else {
                            try{
                                context.priority=routines.system.ParserUtils.parseTo_Integer (context.getProperty("priority"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "priority", e.getMessage()));
                                context.priority=null;
                            }
                        }
                        context.setContextType("project", "id_String");
                        if(context.getStringValue("project") == null) {
                            context.project = null;
                        } else {
                            context.project=(String) context.getProperty("project");
                        }
                        context.setContextType("server_destino", "id_String");
                        if(context.getStringValue("server_destino") == null) {
                            context.server_destino = null;
                        } else {
                            context.server_destino=(String) context.getProperty("server_destino");
                        }
                        context.setContextType("server_origen", "id_String");
                        if(context.getStringValue("server_origen") == null) {
                            context.server_origen = null;
                        } else {
                            context.server_origen=(String) context.getProperty("server_origen");
                        }
                        context.setContextType("service_name_destino", "id_String");
                        if(context.getStringValue("service_name_destino") == null) {
                            context.service_name_destino = null;
                        } else {
                            context.service_name_destino=(String) context.getProperty("service_name_destino");
                        }
                        context.setContextType("service_name_origen", "id_String");
                        if(context.getStringValue("service_name_origen") == null) {
                            context.service_name_origen = null;
                        } else {
                            context.service_name_origen=(String) context.getProperty("service_name_origen");
                        }
                        context.setContextType("user_destino", "id_String");
                        if(context.getStringValue("user_destino") == null) {
                            context.user_destino = null;
                        } else {
                            context.user_destino=(String) context.getProperty("user_destino");
                        }
                        context.setContextType("user_origen", "id_String");
                        if(context.getStringValue("user_origen") == null) {
                            context.user_origen = null;
                        } else {
                            context.user_origen=(String) context.getProperty("user_origen");
                        }
                        context.setContextType("Cerrada", "id_BigDecimal");
                        if(context.getStringValue("Cerrada") == null) {
                            context.Cerrada = null;
                        } else {
                            try{
                                context.Cerrada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Cerrada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Cerrada", e.getMessage()));
                                context.Cerrada=null;
                            }
                        }
                        context.setContextType("Editada", "id_BigDecimal");
                        if(context.getStringValue("Editada") == null) {
                            context.Editada = null;
                        } else {
                            try{
                                context.Editada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Editada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Editada", e.getMessage()));
                                context.Editada=null;
                            }
                        }
                        context.setContextType("Editando", "id_BigDecimal");
                        if(context.getStringValue("Editando") == null) {
                            context.Editando = null;
                        } else {
                            try{
                                context.Editando=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Editando"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Editando", e.getMessage()));
                                context.Editando=null;
                            }
                        }
                        context.setContextType("Finalizada", "id_BigDecimal");
                        if(context.getStringValue("Finalizada") == null) {
                            context.Finalizada = null;
                        } else {
                            try{
                                context.Finalizada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Finalizada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Finalizada", e.getMessage()));
                                context.Finalizada=null;
                            }
                        }
                        context.setContextType("Iniciada", "id_BigDecimal");
                        if(context.getStringValue("Iniciada") == null) {
                            context.Iniciada = null;
                        } else {
                            try{
                                context.Iniciada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Iniciada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Iniciada", e.getMessage()));
                                context.Iniciada=null;
                            }
                        }
                        context.setContextType("Manual", "id_BigDecimal");
                        if(context.getStringValue("Manual") == null) {
                            context.Manual = null;
                        } else {
                            try{
                                context.Manual=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Manual"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Manual", e.getMessage()));
                                context.Manual=null;
                            }
                        }
                        context.setContextType("SinInniciar", "id_BigDecimal");
                        if(context.getStringValue("SinInniciar") == null) {
                            context.SinInniciar = null;
                        } else {
                            try{
                                context.SinInniciar=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SinInniciar"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SinInniciar", e.getMessage()));
                                context.SinInniciar=null;
                            }
                        }
                        context.setContextType("estActivo", "id_BigDecimal");
                        if(context.getStringValue("estActivo") == null) {
                            context.estActivo = null;
                        } else {
                            try{
                                context.estActivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estActivo", e.getMessage()));
                                context.estActivo=null;
                            }
                        }
                        context.setContextType("estCancelado", "id_BigDecimal");
                        if(context.getStringValue("estCancelado") == null) {
                            context.estCancelado = null;
                        } else {
                            try{
                                context.estCancelado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estCancelado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estCancelado", e.getMessage()));
                                context.estCancelado=null;
                            }
                        }
                        context.setContextType("estEnProceso", "id_BigDecimal");
                        if(context.getStringValue("estEnProceso") == null) {
                            context.estEnProceso = null;
                        } else {
                            try{
                                context.estEnProceso=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estEnProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estEnProceso", e.getMessage()));
                                context.estEnProceso=null;
                            }
                        }
                        context.setContextType("estErrorArchivo", "id_BigDecimal");
                        if(context.getStringValue("estErrorArchivo") == null) {
                            context.estErrorArchivo = null;
                        } else {
                            try{
                                context.estErrorArchivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estErrorArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estErrorArchivo", e.getMessage()));
                                context.estErrorArchivo=null;
                            }
                        }
                        context.setContextType("estErrorProcesamiento", "id_BigDecimal");
                        if(context.getStringValue("estErrorProcesamiento") == null) {
                            context.estErrorProcesamiento = null;
                        } else {
                            try{
                                context.estErrorProcesamiento=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estErrorProcesamiento"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estErrorProcesamiento", e.getMessage()));
                                context.estErrorProcesamiento=null;
                            }
                        }
                        context.setContextType("estInactivo", "id_BigDecimal");
                        if(context.getStringValue("estInactivo") == null) {
                            context.estInactivo = null;
                        } else {
                            try{
                                context.estInactivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estInactivo", e.getMessage()));
                                context.estInactivo=null;
                            }
                        }
                        context.setContextType("estPausado", "id_BigDecimal");
                        if(context.getStringValue("estPausado") == null) {
                            context.estPausado = null;
                        } else {
                            try{
                                context.estPausado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estPausado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estPausado", e.getMessage()));
                                context.estPausado=null;
                            }
                        }
                        context.setContextType("estProcesado", "id_BigDecimal");
                        if(context.getStringValue("estProcesado") == null) {
                            context.estProcesado = null;
                        } else {
                            try{
                                context.estProcesado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estProcesado", e.getMessage()));
                                context.estProcesado=null;
                            }
                        }
                        context.setContextType("EstValidado", "id_BigDecimal");
                        if(context.getStringValue("EstValidado") == null) {
                            context.EstValidado = null;
                        } else {
                            try{
                                context.EstValidado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("EstValidado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstValidado", e.getMessage()));
                                context.EstValidado=null;
                            }
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("BANDERA_EJECUCION", "id_Integer");
                        if(context.getStringValue("BANDERA_EJECUCION") == null) {
                            context.BANDERA_EJECUCION = null;
                        } else {
                            try{
                                context.BANDERA_EJECUCION=routines.system.ParserUtils.parseTo_Integer (context.getProperty("BANDERA_EJECUCION"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BANDERA_EJECUCION", e.getMessage()));
                                context.BANDERA_EJECUCION=null;
                            }
                        }
                        context.setContextType("DCARGUE_ID", "id_BigDecimal");
                        if(context.getStringValue("DCARGUE_ID") == null) {
                            context.DCARGUE_ID = null;
                        } else {
                            try{
                                context.DCARGUE_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("DCARGUE_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "DCARGUE_ID", e.getMessage()));
                                context.DCARGUE_ID=null;
                            }
                        }
                        context.setContextType("DESTINO", "id_String");
                        if(context.getStringValue("DESTINO") == null) {
                            context.DESTINO = null;
                        } else {
                            context.DESTINO=(String) context.getProperty("DESTINO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("JOB_ID", "id_BigDecimal");
                        if(context.getStringValue("JOB_ID") == null) {
                            context.JOB_ID = null;
                        } else {
                            try{
                                context.JOB_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("JOB_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "JOB_ID", e.getMessage()));
                                context.JOB_ID=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RECEPCION_ID", "id_BigDecimal");
                        if(context.getStringValue("RECEPCION_ID") == null) {
                            context.RECEPCION_ID = null;
                        } else {
                            try{
                                context.RECEPCION_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("RECEPCION_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "RECEPCION_ID", e.getMessage()));
                                context.RECEPCION_ID=null;
                            }
                        }
                        context.setContextType("TJOB", "id_Integer");
                        if(context.getStringValue("TJOB") == null) {
                            context.TJOB = null;
                        } else {
                            try{
                                context.TJOB=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TJOB"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TJOB", e.getMessage()));
                                context.TJOB=null;
                            }
                        }
                        context.setContextType("EstadoArchivo", "id_Integer");
                        if(context.getStringValue("EstadoArchivo") == null) {
                            context.EstadoArchivo = null;
                        } else {
                            try{
                                context.EstadoArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstadoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstadoArchivo", e.getMessage()));
                                context.EstadoArchivo=null;
                            }
                        }
                        context.setContextType("Fauditoria", "id_Date");
                        if(context.getStringValue("Fauditoria") == null) {
                            context.Fauditoria = null;
                        } else {
                            String context_Fauditoria_value = context.getProperty("Fauditoria");
                            try{
                                if (context_Fauditoria_value == null){
                                    context_Fauditoria_value = "";
                                }
                                int context_Fauditoria_pos = context_Fauditoria_value.indexOf(";");
                                String context_Fauditoria_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_Fauditoria_pos > -1){
                                    context_Fauditoria_pattern = context_Fauditoria_value.substring(0, context_Fauditoria_pos);
                                    context_Fauditoria_value = context_Fauditoria_value.substring(context_Fauditoria_pos + 1);
                                }

                                context.Fauditoria=(java.util.Date)(new java.text.SimpleDateFormat(context_Fauditoria_pattern).parse(context_Fauditoria_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_Fauditoria_longValue = Long.valueOf(context_Fauditoria_value);
                                    context.Fauditoria = new java.util.Date(context_Fauditoria_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "Fauditoria", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.Fauditoria=null;
                                }
                            }
                        }
                        context.setContextType("HAUDITORIA_ID", "id_BigDecimal");
                        if(context.getStringValue("HAUDITORIA_ID") == null) {
                            context.HAUDITORIA_ID = null;
                        } else {
                            try{
                                context.HAUDITORIA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("HAUDITORIA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAUDITORIA_ID", e.getMessage()));
                                context.HAUDITORIA_ID=null;
                            }
                        }
                        context.setContextType("Nfactura", "id_String");
                        if(context.getStringValue("Nfactura") == null) {
                            context.Nfactura = null;
                        } else {
                            context.Nfactura=(String) context.getProperty("Nfactura");
                        }
                        context.setContextType("Sprefijo", "id_String");
                        if(context.getStringValue("Sprefijo") == null) {
                            context.Sprefijo = null;
                        } else {
                            context.Sprefijo=(String) context.getProperty("Sprefijo");
                        }
                        context.setContextType("SumaFactura", "id_Double");
                        if(context.getStringValue("SumaFactura") == null) {
                            context.SumaFactura = null;
                        } else {
                            try{
                                context.SumaFactura=routines.system.ParserUtils.parseTo_Double (context.getProperty("SumaFactura"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaFactura", e.getMessage()));
                                context.SumaFactura=null;
                            }
                        }
                        context.setContextType("SumaGlosas", "id_Double");
                        if(context.getStringValue("SumaGlosas") == null) {
                            context.SumaGlosas = null;
                        } else {
                            try{
                                context.SumaGlosas=routines.system.ParserUtils.parseTo_Double (context.getProperty("SumaGlosas"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaGlosas", e.getMessage()));
                                context.SumaGlosas=null;
                            }
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_String");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            context.mail_Password=(String) context.getProperty("mail_Password");
                        }
                        context.setContextType("mail_SenderName", "id_String");
                        if(context.getStringValue("mail_SenderName") == null) {
                            context.mail_SenderName = null;
                        } else {
                            context.mail_SenderName=(String) context.getProperty("mail_SenderName");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                        context.setContextType("AfiliacionDerechos", "id_BigDecimal");
                        if(context.getStringValue("AfiliacionDerechos") == null) {
                            context.AfiliacionDerechos = null;
                        } else {
                            try{
                                context.AfiliacionDerechos=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AfiliacionDerechos"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AfiliacionDerechos", e.getMessage()));
                                context.AfiliacionDerechos=null;
                            }
                        }
                        context.setContextType("AfiliacionDerechosD", "id_String");
                        if(context.getStringValue("AfiliacionDerechosD") == null) {
                            context.AfiliacionDerechosD = null;
                        } else {
                            context.AfiliacionDerechosD=(String) context.getProperty("AfiliacionDerechosD");
                        }
                        context.setContextType("AfiliacionInactiva", "id_BigDecimal");
                        if(context.getStringValue("AfiliacionInactiva") == null) {
                            context.AfiliacionInactiva = null;
                        } else {
                            try{
                                context.AfiliacionInactiva=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AfiliacionInactiva"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AfiliacionInactiva", e.getMessage()));
                                context.AfiliacionInactiva=null;
                            }
                        }
                        context.setContextType("AfiliacionInactivaD", "id_String");
                        if(context.getStringValue("AfiliacionInactivaD") == null) {
                            context.AfiliacionInactivaD = null;
                        } else {
                            context.AfiliacionInactivaD=(String) context.getProperty("AfiliacionInactivaD");
                        }
                        context.setContextType("AutorizacionCobrado", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionCobrado") == null) {
                            context.AutorizacionCobrado = null;
                        } else {
                            try{
                                context.AutorizacionCobrado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionCobrado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionCobrado", e.getMessage()));
                                context.AutorizacionCobrado=null;
                            }
                        }
                        context.setContextType("AutorizacionCobradoD", "id_String");
                        if(context.getStringValue("AutorizacionCobradoD") == null) {
                            context.AutorizacionCobradoD = null;
                        } else {
                            context.AutorizacionCobradoD=(String) context.getProperty("AutorizacionCobradoD");
                        }
                        context.setContextType("AutorizacionCups", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionCups") == null) {
                            context.AutorizacionCups = null;
                        } else {
                            try{
                                context.AutorizacionCups=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionCups"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionCups", e.getMessage()));
                                context.AutorizacionCups=null;
                            }
                        }
                        context.setContextType("AutorizacionCupsD", "id_String");
                        if(context.getStringValue("AutorizacionCupsD") == null) {
                            context.AutorizacionCupsD = null;
                        } else {
                            context.AutorizacionCupsD=(String) context.getProperty("AutorizacionCupsD");
                        }
                        context.setContextType("AutorizacionNoExiste", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionNoExiste") == null) {
                            context.AutorizacionNoExiste = null;
                        } else {
                            try{
                                context.AutorizacionNoExiste=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionNoExiste"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionNoExiste", e.getMessage()));
                                context.AutorizacionNoExiste=null;
                            }
                        }
                        context.setContextType("AutorizacionNoExisteD", "id_String");
                        if(context.getStringValue("AutorizacionNoExisteD") == null) {
                            context.AutorizacionNoExisteD = null;
                        } else {
                            context.AutorizacionNoExisteD=(String) context.getProperty("AutorizacionNoExisteD");
                        }
                        context.setContextType("AutorizacionPersona", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionPersona") == null) {
                            context.AutorizacionPersona = null;
                        } else {
                            try{
                                context.AutorizacionPersona=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionPersona"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionPersona", e.getMessage()));
                                context.AutorizacionPersona=null;
                            }
                        }
                        context.setContextType("AutorizacionPersonaD", "id_String");
                        if(context.getStringValue("AutorizacionPersonaD") == null) {
                            context.AutorizacionPersonaD = null;
                        } else {
                            context.AutorizacionPersonaD=(String) context.getProperty("AutorizacionPersonaD");
                        }
                        context.setContextType("AutorizacionPrestador", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionPrestador") == null) {
                            context.AutorizacionPrestador = null;
                        } else {
                            try{
                                context.AutorizacionPrestador=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionPrestador"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionPrestador", e.getMessage()));
                                context.AutorizacionPrestador=null;
                            }
                        }
                        context.setContextType("AutorizacionPrestadorD", "id_String");
                        if(context.getStringValue("AutorizacionPrestadorD") == null) {
                            context.AutorizacionPrestadorD = null;
                        } else {
                            context.AutorizacionPrestadorD=(String) context.getProperty("AutorizacionPrestadorD");
                        }
                        context.setContextType("CantidadFormulada", "id_BigDecimal");
                        if(context.getStringValue("CantidadFormulada") == null) {
                            context.CantidadFormulada = null;
                        } else {
                            try{
                                context.CantidadFormulada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CantidadFormulada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CantidadFormulada", e.getMessage()));
                                context.CantidadFormulada=null;
                            }
                        }
                        context.setContextType("CantidadFormuladaD", "id_String");
                        if(context.getStringValue("CantidadFormuladaD") == null) {
                            context.CantidadFormuladaD = null;
                        } else {
                            context.CantidadFormuladaD=(String) context.getProperty("CantidadFormuladaD");
                        }
                        context.setContextType("FacturaAuditada", "id_BigDecimal");
                        if(context.getStringValue("FacturaAuditada") == null) {
                            context.FacturaAuditada = null;
                        } else {
                            try{
                                context.FacturaAuditada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("FacturaAuditada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "FacturaAuditada", e.getMessage()));
                                context.FacturaAuditada=null;
                            }
                        }
                        context.setContextType("FacturaAuditadaD", "id_String");
                        if(context.getStringValue("FacturaAuditadaD") == null) {
                            context.FacturaAuditadaD = null;
                        } else {
                            context.FacturaAuditadaD=(String) context.getProperty("FacturaAuditadaD");
                        }
                        context.setContextType("MedicamentoNoPactado", "id_BigDecimal");
                        if(context.getStringValue("MedicamentoNoPactado") == null) {
                            context.MedicamentoNoPactado = null;
                        } else {
                            try{
                                context.MedicamentoNoPactado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MedicamentoNoPactado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MedicamentoNoPactado", e.getMessage()));
                                context.MedicamentoNoPactado=null;
                            }
                        }
                        context.setContextType("MedicamentoNoPactadoD", "id_String");
                        if(context.getStringValue("MedicamentoNoPactadoD") == null) {
                            context.MedicamentoNoPactadoD = null;
                        } else {
                            context.MedicamentoNoPactadoD=(String) context.getProperty("MedicamentoNoPactadoD");
                        }
                        context.setContextType("PorcetajeConsumo", "id_BigDecimal");
                        if(context.getStringValue("PorcetajeConsumo") == null) {
                            context.PorcetajeConsumo = null;
                        } else {
                            try{
                                context.PorcetajeConsumo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PorcetajeConsumo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PorcetajeConsumo", e.getMessage()));
                                context.PorcetajeConsumo=null;
                            }
                        }
                        context.setContextType("PorcetajeConsumoD", "id_String");
                        if(context.getStringValue("PorcetajeConsumoD") == null) {
                            context.PorcetajeConsumoD = null;
                        } else {
                            context.PorcetajeConsumoD=(String) context.getProperty("PorcetajeConsumoD");
                        }
                        context.setContextType("SumaFacturas", "id_BigDecimal");
                        if(context.getStringValue("SumaFacturas") == null) {
                            context.SumaFacturas = null;
                        } else {
                            try{
                                context.SumaFacturas=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SumaFacturas"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaFacturas", e.getMessage()));
                                context.SumaFacturas=null;
                            }
                        }
                        context.setContextType("SumaFacturasD", "id_String");
                        if(context.getStringValue("SumaFacturasD") == null) {
                            context.SumaFacturasD = null;
                        } else {
                            context.SumaFacturasD=(String) context.getProperty("SumaFacturasD");
                        }
                        context.setContextType("TiempoEntrega", "id_BigDecimal");
                        if(context.getStringValue("TiempoEntrega") == null) {
                            context.TiempoEntrega = null;
                        } else {
                            try{
                                context.TiempoEntrega=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TiempoEntrega"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TiempoEntrega", e.getMessage()));
                                context.TiempoEntrega=null;
                            }
                        }
                        context.setContextType("TiempoEntregaD", "id_String");
                        if(context.getStringValue("TiempoEntregaD") == null) {
                            context.TiempoEntregaD = null;
                        } else {
                            context.TiempoEntregaD=(String) context.getProperty("TiempoEntregaD");
                        }
                        }

                private void processContext_2() {
                        context.setContextType("ValorDiferente", "id_BigDecimal");
                        if(context.getStringValue("ValorDiferente") == null) {
                            context.ValorDiferente = null;
                        } else {
                            try{
                                context.ValorDiferente=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ValorDiferente"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ValorDiferente", e.getMessage()));
                                context.ValorDiferente=null;
                            }
                        }
                        context.setContextType("ValorDiferenteD", "id_String");
                        if(context.getStringValue("ValorDiferenteD") == null) {
                            context.ValorDiferenteD = null;
                        } else {
                            context.ValorDiferenteD=(String) context.getProperty("ValorDiferenteD");
                        }
                        context.setContextType("ValorNoPactado", "id_BigDecimal");
                        if(context.getStringValue("ValorNoPactado") == null) {
                            context.ValorNoPactado = null;
                        } else {
                            try{
                                context.ValorNoPactado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ValorNoPactado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ValorNoPactado", e.getMessage()));
                                context.ValorNoPactado=null;
                            }
                        }
                        context.setContextType("ValorNoPactadoD", "id_String");
                        if(context.getStringValue("ValorNoPactadoD") == null) {
                            context.ValorNoPactadoD = null;
                        } else {
                            context.ValorNoPactadoD=(String) context.getProperty("ValorNoPactadoD");
                        }
                        context.setContextType("VidaUtil", "id_BigDecimal");
                        if(context.getStringValue("VidaUtil") == null) {
                            context.VidaUtil = null;
                        } else {
                            try{
                                context.VidaUtil=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VidaUtil"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VidaUtil", e.getMessage()));
                                context.VidaUtil=null;
                            }
                        }
                        context.setContextType("VidaUtilD", "id_String");
                        if(context.getStringValue("VidaUtilD") == null) {
                            context.VidaUtilD = null;
                        } else {
                            context.VidaUtilD=(String) context.getProperty("VidaUtilD");
                        }
                        context.setContextType("AUDITORIA_ID", "id_BigDecimal");
                        if(context.getStringValue("AUDITORIA_ID") == null) {
                            context.AUDITORIA_ID = null;
                        } else {
                            try{
                                context.AUDITORIA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AUDITORIA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AUDITORIA_ID", e.getMessage()));
                                context.AUDITORIA_ID=null;
                            }
                        }
                        context.setContextType("ETAPASNORMATIVIDAD_ID", "id_BigDecimal");
                        if(context.getStringValue("ETAPASNORMATIVIDAD_ID") == null) {
                            context.ETAPASNORMATIVIDAD_ID = null;
                        } else {
                            try{
                                context.ETAPASNORMATIVIDAD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ETAPASNORMATIVIDAD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ETAPASNORMATIVIDAD_ID", e.getMessage()));
                                context.ETAPASNORMATIVIDAD_ID=null;
                            }
                        }
                        context.setContextType("FRADICADO", "id_Date");
                        if(context.getStringValue("FRADICADO") == null) {
                            context.FRADICADO = null;
                        } else {
                            String context_FRADICADO_value = context.getProperty("FRADICADO");
                            try{
                                if (context_FRADICADO_value == null){
                                    context_FRADICADO_value = "";
                                }
                                int context_FRADICADO_pos = context_FRADICADO_value.indexOf(";");
                                String context_FRADICADO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FRADICADO_pos > -1){
                                    context_FRADICADO_pattern = context_FRADICADO_value.substring(0, context_FRADICADO_pos);
                                    context_FRADICADO_value = context_FRADICADO_value.substring(context_FRADICADO_pos + 1);
                                }

                                context.FRADICADO=(java.util.Date)(new java.text.SimpleDateFormat(context_FRADICADO_pattern).parse(context_FRADICADO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FRADICADO_longValue = Long.valueOf(context_FRADICADO_value);
                                    context.FRADICADO = new java.util.Date(context_FRADICADO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FRADICADO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FRADICADO=null;
                                }
                            }
                        }
                        context.setContextType("NORMATIVIDAD_ETAPA_ID", "id_BigDecimal");
                        if(context.getStringValue("NORMATIVIDAD_ETAPA_ID") == null) {
                            context.NORMATIVIDAD_ETAPA_ID = null;
                        } else {
                            try{
                                context.NORMATIVIDAD_ETAPA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("NORMATIVIDAD_ETAPA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NORMATIVIDAD_ETAPA_ID", e.getMessage()));
                                context.NORMATIVIDAD_ETAPA_ID=null;
                            }
                        }
                        context.setContextType("NORMATIVIDAD_GLOSA_ID", "id_BigDecimal");
                        if(context.getStringValue("NORMATIVIDAD_GLOSA_ID") == null) {
                            context.NORMATIVIDAD_GLOSA_ID = null;
                        } else {
                            try{
                                context.NORMATIVIDAD_GLOSA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("NORMATIVIDAD_GLOSA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NORMATIVIDAD_GLOSA_ID", e.getMessage()));
                                context.NORMATIVIDAD_GLOSA_ID=null;
                            }
                        }
                        context.setContextType("SUMATORIA", "id_Double");
                        if(context.getStringValue("SUMATORIA") == null) {
                            context.SUMATORIA = null;
                        } else {
                            try{
                                context.SUMATORIA=routines.system.ParserUtils.parseTo_Double (context.getProperty("SUMATORIA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SUMATORIA", e.getMessage()));
                                context.SUMATORIA=null;
                            }
                        }
                        context.setContextType("SUMATORIA_FACTURA", "id_Double");
                        if(context.getStringValue("SUMATORIA_FACTURA") == null) {
                            context.SUMATORIA_FACTURA = null;
                        } else {
                            try{
                                context.SUMATORIA_FACTURA=routines.system.ParserUtils.parseTo_Double (context.getProperty("SUMATORIA_FACTURA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SUMATORIA_FACTURA", e.getMessage()));
                                context.SUMATORIA_FACTURA=null;
                            }
                        }
                        context.setContextType("UORG_ID", "id_BigDecimal");
                        if(context.getStringValue("UORG_ID") == null) {
                            context.UORG_ID = null;
                        } else {
                            try{
                                context.UORG_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("UORG_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "UORG_ID", e.getMessage()));
                                context.UORG_ID=null;
                            }
                        }
                        context.setContextType("USUARIOS_ID", "id_BigDecimal");
                        if(context.getStringValue("USUARIOS_ID") == null) {
                            context.USUARIOS_ID = null;
                        } else {
                            try{
                                context.USUARIOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("USUARIOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "USUARIOS_ID", e.getMessage()));
                                context.USUARIOS_ID=null;
                            }
                        }
                        context.setContextType("VIDA_UTIL", "id_Integer");
                        if(context.getStringValue("VIDA_UTIL") == null) {
                            context.VIDA_UTIL = null;
                        } else {
                            try{
                                context.VIDA_UTIL=routines.system.ParserUtils.parseTo_Integer (context.getProperty("VIDA_UTIL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VIDA_UTIL", e.getMessage()));
                                context.VIDA_UTIL=null;
                            }
                        }
                        context.setContextType("vFechaFinContrato", "id_Date");
                        if(context.getStringValue("vFechaFinContrato") == null) {
                            context.vFechaFinContrato = null;
                        } else {
                            String context_vFechaFinContrato_value = context.getProperty("vFechaFinContrato");
                            try{
                                if (context_vFechaFinContrato_value == null){
                                    context_vFechaFinContrato_value = "";
                                }
                                int context_vFechaFinContrato_pos = context_vFechaFinContrato_value.indexOf(";");
                                String context_vFechaFinContrato_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vFechaFinContrato_pos > -1){
                                    context_vFechaFinContrato_pattern = context_vFechaFinContrato_value.substring(0, context_vFechaFinContrato_pos);
                                    context_vFechaFinContrato_value = context_vFechaFinContrato_value.substring(context_vFechaFinContrato_pos + 1);
                                }

                                context.vFechaFinContrato=(java.util.Date)(new java.text.SimpleDateFormat(context_vFechaFinContrato_pattern).parse(context_vFechaFinContrato_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vFechaFinContrato_longValue = Long.valueOf(context_vFechaFinContrato_value);
                                    context.vFechaFinContrato = new java.util.Date(context_vFechaFinContrato_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vFechaFinContrato", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vFechaFinContrato=null;
                                }
                            }
                        }
                        context.setContextType("vFechaIniContrato", "id_Date");
                        if(context.getStringValue("vFechaIniContrato") == null) {
                            context.vFechaIniContrato = null;
                        } else {
                            String context_vFechaIniContrato_value = context.getProperty("vFechaIniContrato");
                            try{
                                if (context_vFechaIniContrato_value == null){
                                    context_vFechaIniContrato_value = "";
                                }
                                int context_vFechaIniContrato_pos = context_vFechaIniContrato_value.indexOf(";");
                                String context_vFechaIniContrato_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vFechaIniContrato_pos > -1){
                                    context_vFechaIniContrato_pattern = context_vFechaIniContrato_value.substring(0, context_vFechaIniContrato_pos);
                                    context_vFechaIniContrato_value = context_vFechaIniContrato_value.substring(context_vFechaIniContrato_pos + 1);
                                }

                                context.vFechaIniContrato=(java.util.Date)(new java.text.SimpleDateFormat(context_vFechaIniContrato_pattern).parse(context_vFechaIniContrato_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vFechaIniContrato_longValue = Long.valueOf(context_vFechaIniContrato_value);
                                    context.vFechaIniContrato = new java.util.Date(context_vFechaIniContrato_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vFechaIniContrato", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vFechaIniContrato=null;
                                }
                            }
                        }
                        context.setContextType("vIntermediacionDisp", "id_BigDecimal");
                        if(context.getStringValue("vIntermediacionDisp") == null) {
                            context.vIntermediacionDisp = null;
                        } else {
                            try{
                                context.vIntermediacionDisp=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIntermediacionDisp"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIntermediacionDisp", e.getMessage()));
                                context.vIntermediacionDisp=null;
                            }
                        }
                        context.setContextType("vIntermediacionSum", "id_BigDecimal");
                        if(context.getStringValue("vIntermediacionSum") == null) {
                            context.vIntermediacionSum = null;
                        } else {
                            try{
                                context.vIntermediacionSum=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIntermediacionSum"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIntermediacionSum", e.getMessage()));
                                context.vIntermediacionSum=null;
                            }
                        }
                        context.setContextType("vTipificacion", "id_String");
                        if(context.getStringValue("vTipificacion") == null) {
                            context.vTipificacion = null;
                        } else {
                            context.vTipificacion=(String) context.getProperty("vTipificacion");
                        }
                        context.setContextType("vTipoArchivoSigla", "id_String");
                        if(context.getStringValue("vTipoArchivoSigla") == null) {
                            context.vTipoArchivoSigla = null;
                        } else {
                            context.vTipoArchivoSigla=(String) context.getProperty("vTipoArchivoSigla");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                        processContext_1();
                        processContext_2();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("BANDERA")) {
                context.BANDERA = (Integer) parentContextMap.get("BANDERA");
            }if (parentContextMap.containsKey("bodega")) {
                context.bodega = (String) parentContextMap.get("bodega");
            }if (parentContextMap.containsKey("cantidad")) {
                context.cantidad = (String) parentContextMap.get("cantidad");
            }if (parentContextMap.containsKey("cantidad_despachada")) {
                context.cantidad_despachada = (String) parentContextMap.get("cantidad_despachada");
            }if (parentContextMap.containsKey("cantidad_solicitada")) {
                context.cantidad_solicitada = (String) parentContextMap.get("cantidad_solicitada");
            }if (parentContextMap.containsKey("codigo_autorizacion")) {
                context.codigo_autorizacion = (String) parentContextMap.get("codigo_autorizacion");
            }if (parentContextMap.containsKey("codigo_cie10")) {
                context.codigo_cie10 = (String) parentContextMap.get("codigo_cie10");
            }if (parentContextMap.containsKey("codigo_cum")) {
                context.codigo_cum = (String) parentContextMap.get("codigo_cum");
            }if (parentContextMap.containsKey("codigo_cups")) {
                context.codigo_cups = (String) parentContextMap.get("codigo_cups");
            }if (parentContextMap.containsKey("concentracion")) {
                context.concentracion = (String) parentContextMap.get("concentracion");
            }if (parentContextMap.containsKey("confidencialidad")) {
                context.confidencialidad = (String) parentContextMap.get("confidencialidad");
            }if (parentContextMap.containsKey("CONTRATOS_ID")) {
                context.CONTRATOS_ID = (BigDecimal) parentContextMap.get("CONTRATOS_ID");
            }if (parentContextMap.containsKey("ctc_aprobado")) {
                context.ctc_aprobado = (String) parentContextMap.get("ctc_aprobado");
            }if (parentContextMap.containsKey("descripcion_cie10")) {
                context.descripcion_cie10 = (String) parentContextMap.get("descripcion_cie10");
            }if (parentContextMap.containsKey("descripcion_cups")) {
                context.descripcion_cups = (String) parentContextMap.get("descripcion_cups");
            }if (parentContextMap.containsKey("documento")) {
                context.documento = (String) parentContextMap.get("documento");
            }if (parentContextMap.containsKey("esm")) {
                context.esm = (String) parentContextMap.get("esm");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("EstAfiliacionActivo")) {
                context.EstAfiliacionActivo = (Integer) parentContextMap.get("EstAfiliacionActivo");
            }if (parentContextMap.containsKey("EstAfiliacionProvisional")) {
                context.EstAfiliacionProvisional = (Integer) parentContextMap.get("EstAfiliacionProvisional");
            }if (parentContextMap.containsKey("EstAfiliaicionInactivo")) {
                context.EstAfiliaicionInactivo = (Integer) parentContextMap.get("EstAfiliaicionInactivo");
            }if (parentContextMap.containsKey("EstArchivoPCE")) {
                context.EstArchivoPCE = (BigDecimal) parentContextMap.get("EstArchivoPCE");
            }if (parentContextMap.containsKey("fecha_autorizacion")) {
                context.fecha_autorizacion = (String) parentContextMap.get("fecha_autorizacion");
            }if (parentContextMap.containsKey("fecha_dispensacion")) {
                context.fecha_dispensacion = (String) parentContextMap.get("fecha_dispensacion");
            }if (parentContextMap.containsKey("fecha_egreso")) {
                context.fecha_egreso = (String) parentContextMap.get("fecha_egreso");
            }if (parentContextMap.containsKey("fecha_factura")) {
                context.fecha_factura = (String) parentContextMap.get("fecha_factura");
            }if (parentContextMap.containsKey("fecha_formulacion")) {
                context.fecha_formulacion = (String) parentContextMap.get("fecha_formulacion");
            }if (parentContextMap.containsKey("fecha_ingreso")) {
                context.fecha_ingreso = (String) parentContextMap.get("fecha_ingreso");
            }if (parentContextMap.containsKey("FECHA_NULL")) {
                context.FECHA_NULL = (java.util.Date) parentContextMap.get("FECHA_NULL");
            }if (parentContextMap.containsKey("fecha_registro")) {
                context.fecha_registro = (String) parentContextMap.get("fecha_registro");
            }if (parentContextMap.containsKey("fecha_servicio")) {
                context.fecha_servicio = (String) parentContextMap.get("fecha_servicio");
            }if (parentContextMap.containsKey("fecha_vencimiento")) {
                context.fecha_vencimiento = (String) parentContextMap.get("fecha_vencimiento");
            }if (parentContextMap.containsKey("fuerza_militar")) {
                context.fuerza_militar = (String) parentContextMap.get("fuerza_militar");
            }if (parentContextMap.containsKey("HORA")) {
                context.HORA = (Integer) parentContextMap.get("HORA");
            }if (parentContextMap.containsKey("invima")) {
                context.invima = (String) parentContextMap.get("invima");
            }if (parentContextMap.containsKey("laboratorio")) {
                context.laboratorio = (String) parentContextMap.get("laboratorio");
            }if (parentContextMap.containsKey("lote")) {
                context.lote = (String) parentContextMap.get("lote");
            }if (parentContextMap.containsKey("lugar_dispensacion")) {
                context.lugar_dispensacion = (String) parentContextMap.get("lugar_dispensacion");
            }if (parentContextMap.containsKey("MEDCONTRATOS_ID")) {
                context.MEDCONTRATOS_ID = (BigDecimal) parentContextMap.get("MEDCONTRATOS_ID");
            }if (parentContextMap.containsKey("Narchivo")) {
                context.Narchivo = (String) parentContextMap.get("Narchivo");
            }if (parentContextMap.containsKey("nombre_medicamento")) {
                context.nombre_medicamento = (String) parentContextMap.get("nombre_medicamento");
            }if (parentContextMap.containsKey("numero")) {
                context.numero = (String) parentContextMap.get("numero");
            }if (parentContextMap.containsKey("numero_factura")) {
                context.numero_factura = (String) parentContextMap.get("numero_factura");
            }if (parentContextMap.containsKey("numero_formula")) {
                context.numero_formula = (String) parentContextMap.get("numero_formula");
            }if (parentContextMap.containsKey("observaciones")) {
                context.observaciones = (String) parentContextMap.get("observaciones");
            }if (parentContextMap.containsKey("origen_formulacion")) {
                context.origen_formulacion = (String) parentContextMap.get("origen_formulacion");
            }if (parentContextMap.containsKey("periodo")) {
                context.periodo = (String) parentContextMap.get("periodo");
            }if (parentContextMap.containsKey("prefijo")) {
                context.prefijo = (String) parentContextMap.get("prefijo");
            }if (parentContextMap.containsKey("presentacion")) {
                context.presentacion = (String) parentContextMap.get("presentacion");
            }if (parentContextMap.containsKey("PRESTADOR")) {
                context.PRESTADOR = (BigDecimal) parentContextMap.get("PRESTADOR");
            }if (parentContextMap.containsKey("producto_comercial")) {
                context.producto_comercial = (String) parentContextMap.get("producto_comercial");
            }if (parentContextMap.containsKey("servicio")) {
                context.servicio = (String) parentContextMap.get("servicio");
            }if (parentContextMap.containsKey("ssmp")) {
                context.ssmp = (String) parentContextMap.get("ssmp");
            }if (parentContextMap.containsKey("subtotal")) {
                context.subtotal = (String) parentContextMap.get("subtotal");
            }if (parentContextMap.containsKey("tipificacion")) {
                context.tipificacion = (String) parentContextMap.get("tipificacion");
            }if (parentContextMap.containsKey("tipo")) {
                context.tipo = (String) parentContextMap.get("tipo");
            }if (parentContextMap.containsKey("tipo_documento")) {
                context.tipo_documento = (String) parentContextMap.get("tipo_documento");
            }if (parentContextMap.containsKey("tipo_formula")) {
                context.tipo_formula = (String) parentContextMap.get("tipo_formula");
            }if (parentContextMap.containsKey("tipo_servicio")) {
                context.tipo_servicio = (String) parentContextMap.get("tipo_servicio");
            }if (parentContextMap.containsKey("TipoRespuesta")) {
                context.TipoRespuesta = (BigDecimal) parentContextMap.get("TipoRespuesta");
            }if (parentContextMap.containsKey("tirilla")) {
                context.tirilla = (String) parentContextMap.get("tirilla");
            }if (parentContextMap.containsKey("unidad_medida")) {
                context.unidad_medida = (String) parentContextMap.get("unidad_medida");
            }if (parentContextMap.containsKey("valor_gravado")) {
                context.valor_gravado = (String) parentContextMap.get("valor_gravado");
            }if (parentContextMap.containsKey("valor_intermediacion")) {
                context.valor_intermediacion = (String) parentContextMap.get("valor_intermediacion");
            }if (parentContextMap.containsKey("valor_total")) {
                context.valor_total = (String) parentContextMap.get("valor_total");
            }if (parentContextMap.containsKey("valor_unitario")) {
                context.valor_unitario = (String) parentContextMap.get("valor_unitario");
            }if (parentContextMap.containsKey("via_administracion")) {
                context.via_administracion = (String) parentContextMap.get("via_administracion");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("PathStorage")) {
                context.PathStorage = (String) parentContextMap.get("PathStorage");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("CargueArchivoId")) {
                context.CargueArchivoId = (Integer) parentContextMap.get("CargueArchivoId");
            }if (parentContextMap.containsKey("fechaArchivoErrores")) {
                context.fechaArchivoErrores = (String) parentContextMap.get("fechaArchivoErrores");
            }if (parentContextMap.containsKey("nErroresArchivo")) {
                context.nErroresArchivo = (Integer) parentContextMap.get("nErroresArchivo");
            }if (parentContextMap.containsKey("nRegArchivo")) {
                context.nRegArchivo = (Integer) parentContextMap.get("nRegArchivo");
            }if (parentContextMap.containsKey("vArchivo_Id")) {
                context.vArchivo_Id = (BigDecimal) parentContextMap.get("vArchivo_Id");
            }if (parentContextMap.containsKey("vCantRegistros")) {
                context.vCantRegistros = (Integer) parentContextMap.get("vCantRegistros");
            }if (parentContextMap.containsKey("vEstadoCarga")) {
                context.vEstadoCarga = (String) parentContextMap.get("vEstadoCarga");
            }if (parentContextMap.containsKey("vIdTipoArchivo")) {
                context.vIdTipoArchivo = (BigDecimal) parentContextMap.get("vIdTipoArchivo");
            }if (parentContextMap.containsKey("vNombreArchivo")) {
                context.vNombreArchivo = (String) parentContextMap.get("vNombreArchivo");
            }if (parentContextMap.containsKey("vNombreTipoArchivo")) {
                context.vNombreTipoArchivo = (String) parentContextMap.get("vNombreTipoArchivo");
            }if (parentContextMap.containsKey("vPeriodo")) {
                context.vPeriodo = (java.util.Date) parentContextMap.get("vPeriodo");
            }if (parentContextMap.containsKey("vRecepcionId")) {
                context.vRecepcionId = (BigDecimal) parentContextMap.get("vRecepcionId");
            }if (parentContextMap.containsKey("vTipoArchivo")) {
                context.vTipoArchivo = (String) parentContextMap.get("vTipoArchivo");
            }if (parentContextMap.containsKey("contador")) {
                context.contador = (Integer) parentContextMap.get("contador");
            }if (parentContextMap.containsKey("eCIE10")) {
                context.eCIE10 = (String) parentContextMap.get("eCIE10");
            }if (parentContextMap.containsKey("eComercial")) {
                context.eComercial = (String) parentContextMap.get("eComercial");
            }if (parentContextMap.containsKey("eConcentracion")) {
                context.eConcentracion = (String) parentContextMap.get("eConcentracion");
            }if (parentContextMap.containsKey("eCTC")) {
                context.eCTC = (String) parentContextMap.get("eCTC");
            }if (parentContextMap.containsKey("eCum")) {
                context.eCum = (String) parentContextMap.get("eCum");
            }if (parentContextMap.containsKey("eCUPS")) {
                context.eCUPS = (String) parentContextMap.get("eCUPS");
            }if (parentContextMap.containsKey("eESM")) {
                context.eESM = (String) parentContextMap.get("eESM");
            }if (parentContextMap.containsKey("eGeneral")) {
                context.eGeneral = (String) parentContextMap.get("eGeneral");
            }if (parentContextMap.containsKey("eGenerico")) {
                context.eGenerico = (String) parentContextMap.get("eGenerico");
            }if (parentContextMap.containsKey("eInvima")) {
                context.eInvima = (String) parentContextMap.get("eInvima");
            }if (parentContextMap.containsKey("eLaboratorio")) {
                context.eLaboratorio = (String) parentContextMap.get("eLaboratorio");
            }if (parentContextMap.containsKey("ePersona")) {
                context.ePersona = (String) parentContextMap.get("ePersona");
            }if (parentContextMap.containsKey("ePresentacion")) {
                context.ePresentacion = (String) parentContextMap.get("ePresentacion");
            }if (parentContextMap.containsKey("eSSMP")) {
                context.eSSMP = (String) parentContextMap.get("eSSMP");
            }if (parentContextMap.containsKey("eTipoFormula")) {
                context.eTipoFormula = (String) parentContextMap.get("eTipoFormula");
            }if (parentContextMap.containsKey("eUmedida")) {
                context.eUmedida = (String) parentContextMap.get("eUmedida");
            }if (parentContextMap.containsKey("eViaAdministracion")) {
                context.eViaAdministracion = (String) parentContextMap.get("eViaAdministracion");
            }if (parentContextMap.containsKey("code")) {
                context.code = (Integer) parentContextMap.get("code");
            }if (parentContextMap.containsKey("context")) {
                context.context = (String) parentContextMap.get("context");
            }if (parentContextMap.containsKey("job")) {
                context.job = (String) parentContextMap.get("job");
            }if (parentContextMap.containsKey("message")) {
                context.message = (String) parentContextMap.get("message");
            }if (parentContextMap.containsKey("moment")) {
                context.moment = (java.util.Date) parentContextMap.get("moment");
            }if (parentContextMap.containsKey("origen")) {
                context.origen = (String) parentContextMap.get("origen");
            }if (parentContextMap.containsKey("priority")) {
                context.priority = (Integer) parentContextMap.get("priority");
            }if (parentContextMap.containsKey("project")) {
                context.project = (String) parentContextMap.get("project");
            }if (parentContextMap.containsKey("server_destino")) {
                context.server_destino = (String) parentContextMap.get("server_destino");
            }if (parentContextMap.containsKey("server_origen")) {
                context.server_origen = (String) parentContextMap.get("server_origen");
            }if (parentContextMap.containsKey("service_name_destino")) {
                context.service_name_destino = (String) parentContextMap.get("service_name_destino");
            }if (parentContextMap.containsKey("service_name_origen")) {
                context.service_name_origen = (String) parentContextMap.get("service_name_origen");
            }if (parentContextMap.containsKey("user_destino")) {
                context.user_destino = (String) parentContextMap.get("user_destino");
            }if (parentContextMap.containsKey("user_origen")) {
                context.user_origen = (String) parentContextMap.get("user_origen");
            }if (parentContextMap.containsKey("Cerrada")) {
                context.Cerrada = (BigDecimal) parentContextMap.get("Cerrada");
            }if (parentContextMap.containsKey("Editada")) {
                context.Editada = (BigDecimal) parentContextMap.get("Editada");
            }if (parentContextMap.containsKey("Editando")) {
                context.Editando = (BigDecimal) parentContextMap.get("Editando");
            }if (parentContextMap.containsKey("Finalizada")) {
                context.Finalizada = (BigDecimal) parentContextMap.get("Finalizada");
            }if (parentContextMap.containsKey("Iniciada")) {
                context.Iniciada = (BigDecimal) parentContextMap.get("Iniciada");
            }if (parentContextMap.containsKey("Manual")) {
                context.Manual = (BigDecimal) parentContextMap.get("Manual");
            }if (parentContextMap.containsKey("SinInniciar")) {
                context.SinInniciar = (BigDecimal) parentContextMap.get("SinInniciar");
            }if (parentContextMap.containsKey("estActivo")) {
                context.estActivo = (BigDecimal) parentContextMap.get("estActivo");
            }if (parentContextMap.containsKey("estCancelado")) {
                context.estCancelado = (BigDecimal) parentContextMap.get("estCancelado");
            }if (parentContextMap.containsKey("estEnProceso")) {
                context.estEnProceso = (BigDecimal) parentContextMap.get("estEnProceso");
            }if (parentContextMap.containsKey("estErrorArchivo")) {
                context.estErrorArchivo = (BigDecimal) parentContextMap.get("estErrorArchivo");
            }if (parentContextMap.containsKey("estErrorProcesamiento")) {
                context.estErrorProcesamiento = (BigDecimal) parentContextMap.get("estErrorProcesamiento");
            }if (parentContextMap.containsKey("estInactivo")) {
                context.estInactivo = (BigDecimal) parentContextMap.get("estInactivo");
            }if (parentContextMap.containsKey("estPausado")) {
                context.estPausado = (BigDecimal) parentContextMap.get("estPausado");
            }if (parentContextMap.containsKey("estProcesado")) {
                context.estProcesado = (BigDecimal) parentContextMap.get("estProcesado");
            }if (parentContextMap.containsKey("EstValidado")) {
                context.EstValidado = (BigDecimal) parentContextMap.get("EstValidado");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("BANDERA_EJECUCION")) {
                context.BANDERA_EJECUCION = (Integer) parentContextMap.get("BANDERA_EJECUCION");
            }if (parentContextMap.containsKey("DCARGUE_ID")) {
                context.DCARGUE_ID = (BigDecimal) parentContextMap.get("DCARGUE_ID");
            }if (parentContextMap.containsKey("DESTINO")) {
                context.DESTINO = (String) parentContextMap.get("DESTINO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("JOB_ID")) {
                context.JOB_ID = (BigDecimal) parentContextMap.get("JOB_ID");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RECEPCION_ID")) {
                context.RECEPCION_ID = (BigDecimal) parentContextMap.get("RECEPCION_ID");
            }if (parentContextMap.containsKey("TJOB")) {
                context.TJOB = (Integer) parentContextMap.get("TJOB");
            }if (parentContextMap.containsKey("EstadoArchivo")) {
                context.EstadoArchivo = (Integer) parentContextMap.get("EstadoArchivo");
            }if (parentContextMap.containsKey("Fauditoria")) {
                context.Fauditoria = (java.util.Date) parentContextMap.get("Fauditoria");
            }if (parentContextMap.containsKey("HAUDITORIA_ID")) {
                context.HAUDITORIA_ID = (BigDecimal) parentContextMap.get("HAUDITORIA_ID");
            }if (parentContextMap.containsKey("Nfactura")) {
                context.Nfactura = (String) parentContextMap.get("Nfactura");
            }if (parentContextMap.containsKey("Sprefijo")) {
                context.Sprefijo = (String) parentContextMap.get("Sprefijo");
            }if (parentContextMap.containsKey("SumaFactura")) {
                context.SumaFactura = (Double) parentContextMap.get("SumaFactura");
            }if (parentContextMap.containsKey("SumaGlosas")) {
                context.SumaGlosas = (Double) parentContextMap.get("SumaGlosas");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_SenderName")) {
                context.mail_SenderName = (String) parentContextMap.get("mail_SenderName");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }if (parentContextMap.containsKey("AfiliacionDerechos")) {
                context.AfiliacionDerechos = (BigDecimal) parentContextMap.get("AfiliacionDerechos");
            }if (parentContextMap.containsKey("AfiliacionDerechosD")) {
                context.AfiliacionDerechosD = (String) parentContextMap.get("AfiliacionDerechosD");
            }if (parentContextMap.containsKey("AfiliacionInactiva")) {
                context.AfiliacionInactiva = (BigDecimal) parentContextMap.get("AfiliacionInactiva");
            }if (parentContextMap.containsKey("AfiliacionInactivaD")) {
                context.AfiliacionInactivaD = (String) parentContextMap.get("AfiliacionInactivaD");
            }if (parentContextMap.containsKey("AutorizacionCobrado")) {
                context.AutorizacionCobrado = (BigDecimal) parentContextMap.get("AutorizacionCobrado");
            }if (parentContextMap.containsKey("AutorizacionCobradoD")) {
                context.AutorizacionCobradoD = (String) parentContextMap.get("AutorizacionCobradoD");
            }if (parentContextMap.containsKey("AutorizacionCups")) {
                context.AutorizacionCups = (BigDecimal) parentContextMap.get("AutorizacionCups");
            }if (parentContextMap.containsKey("AutorizacionCupsD")) {
                context.AutorizacionCupsD = (String) parentContextMap.get("AutorizacionCupsD");
            }if (parentContextMap.containsKey("AutorizacionNoExiste")) {
                context.AutorizacionNoExiste = (BigDecimal) parentContextMap.get("AutorizacionNoExiste");
            }if (parentContextMap.containsKey("AutorizacionNoExisteD")) {
                context.AutorizacionNoExisteD = (String) parentContextMap.get("AutorizacionNoExisteD");
            }if (parentContextMap.containsKey("AutorizacionPersona")) {
                context.AutorizacionPersona = (BigDecimal) parentContextMap.get("AutorizacionPersona");
            }if (parentContextMap.containsKey("AutorizacionPersonaD")) {
                context.AutorizacionPersonaD = (String) parentContextMap.get("AutorizacionPersonaD");
            }if (parentContextMap.containsKey("AutorizacionPrestador")) {
                context.AutorizacionPrestador = (BigDecimal) parentContextMap.get("AutorizacionPrestador");
            }if (parentContextMap.containsKey("AutorizacionPrestadorD")) {
                context.AutorizacionPrestadorD = (String) parentContextMap.get("AutorizacionPrestadorD");
            }if (parentContextMap.containsKey("CantidadFormulada")) {
                context.CantidadFormulada = (BigDecimal) parentContextMap.get("CantidadFormulada");
            }if (parentContextMap.containsKey("CantidadFormuladaD")) {
                context.CantidadFormuladaD = (String) parentContextMap.get("CantidadFormuladaD");
            }if (parentContextMap.containsKey("FacturaAuditada")) {
                context.FacturaAuditada = (BigDecimal) parentContextMap.get("FacturaAuditada");
            }if (parentContextMap.containsKey("FacturaAuditadaD")) {
                context.FacturaAuditadaD = (String) parentContextMap.get("FacturaAuditadaD");
            }if (parentContextMap.containsKey("MedicamentoNoPactado")) {
                context.MedicamentoNoPactado = (BigDecimal) parentContextMap.get("MedicamentoNoPactado");
            }if (parentContextMap.containsKey("MedicamentoNoPactadoD")) {
                context.MedicamentoNoPactadoD = (String) parentContextMap.get("MedicamentoNoPactadoD");
            }if (parentContextMap.containsKey("PorcetajeConsumo")) {
                context.PorcetajeConsumo = (BigDecimal) parentContextMap.get("PorcetajeConsumo");
            }if (parentContextMap.containsKey("PorcetajeConsumoD")) {
                context.PorcetajeConsumoD = (String) parentContextMap.get("PorcetajeConsumoD");
            }if (parentContextMap.containsKey("SumaFacturas")) {
                context.SumaFacturas = (BigDecimal) parentContextMap.get("SumaFacturas");
            }if (parentContextMap.containsKey("SumaFacturasD")) {
                context.SumaFacturasD = (String) parentContextMap.get("SumaFacturasD");
            }if (parentContextMap.containsKey("TiempoEntrega")) {
                context.TiempoEntrega = (BigDecimal) parentContextMap.get("TiempoEntrega");
            }if (parentContextMap.containsKey("TiempoEntregaD")) {
                context.TiempoEntregaD = (String) parentContextMap.get("TiempoEntregaD");
            }if (parentContextMap.containsKey("ValorDiferente")) {
                context.ValorDiferente = (BigDecimal) parentContextMap.get("ValorDiferente");
            }if (parentContextMap.containsKey("ValorDiferenteD")) {
                context.ValorDiferenteD = (String) parentContextMap.get("ValorDiferenteD");
            }if (parentContextMap.containsKey("ValorNoPactado")) {
                context.ValorNoPactado = (BigDecimal) parentContextMap.get("ValorNoPactado");
            }if (parentContextMap.containsKey("ValorNoPactadoD")) {
                context.ValorNoPactadoD = (String) parentContextMap.get("ValorNoPactadoD");
            }if (parentContextMap.containsKey("VidaUtil")) {
                context.VidaUtil = (BigDecimal) parentContextMap.get("VidaUtil");
            }if (parentContextMap.containsKey("VidaUtilD")) {
                context.VidaUtilD = (String) parentContextMap.get("VidaUtilD");
            }if (parentContextMap.containsKey("AUDITORIA_ID")) {
                context.AUDITORIA_ID = (BigDecimal) parentContextMap.get("AUDITORIA_ID");
            }if (parentContextMap.containsKey("ETAPASNORMATIVIDAD_ID")) {
                context.ETAPASNORMATIVIDAD_ID = (BigDecimal) parentContextMap.get("ETAPASNORMATIVIDAD_ID");
            }if (parentContextMap.containsKey("FRADICADO")) {
                context.FRADICADO = (java.util.Date) parentContextMap.get("FRADICADO");
            }if (parentContextMap.containsKey("NORMATIVIDAD_ETAPA_ID")) {
                context.NORMATIVIDAD_ETAPA_ID = (BigDecimal) parentContextMap.get("NORMATIVIDAD_ETAPA_ID");
            }if (parentContextMap.containsKey("NORMATIVIDAD_GLOSA_ID")) {
                context.NORMATIVIDAD_GLOSA_ID = (BigDecimal) parentContextMap.get("NORMATIVIDAD_GLOSA_ID");
            }if (parentContextMap.containsKey("SUMATORIA")) {
                context.SUMATORIA = (Double) parentContextMap.get("SUMATORIA");
            }if (parentContextMap.containsKey("SUMATORIA_FACTURA")) {
                context.SUMATORIA_FACTURA = (Double) parentContextMap.get("SUMATORIA_FACTURA");
            }if (parentContextMap.containsKey("UORG_ID")) {
                context.UORG_ID = (BigDecimal) parentContextMap.get("UORG_ID");
            }if (parentContextMap.containsKey("USUARIOS_ID")) {
                context.USUARIOS_ID = (BigDecimal) parentContextMap.get("USUARIOS_ID");
            }if (parentContextMap.containsKey("VIDA_UTIL")) {
                context.VIDA_UTIL = (Integer) parentContextMap.get("VIDA_UTIL");
            }if (parentContextMap.containsKey("vFechaFinContrato")) {
                context.vFechaFinContrato = (java.util.Date) parentContextMap.get("vFechaFinContrato");
            }if (parentContextMap.containsKey("vFechaIniContrato")) {
                context.vFechaIniContrato = (java.util.Date) parentContextMap.get("vFechaIniContrato");
            }if (parentContextMap.containsKey("vIntermediacionDisp")) {
                context.vIntermediacionDisp = (BigDecimal) parentContextMap.get("vIntermediacionDisp");
            }if (parentContextMap.containsKey("vIntermediacionSum")) {
                context.vIntermediacionSum = (BigDecimal) parentContextMap.get("vIntermediacionSum");
            }if (parentContextMap.containsKey("vTipificacion")) {
                context.vTipificacion = (String) parentContextMap.get("vTipificacion");
            }if (parentContextMap.containsKey("vTipoArchivoSigla")) {
                context.vTipoArchivoSigla = (String) parentContextMap.get("vTipoArchivoSigla");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs


this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CargueServicios");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1006419 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 1:30:30 AM COT
 ************************************************************************************************/