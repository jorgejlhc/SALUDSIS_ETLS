// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package acm_control_auditoria.carguemedicamentos_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.GenerarUuid;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJavaRow_6
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_8
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: CargueMedicamentos Purpose: <br>
 * Description:  <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class CargueMedicamentos implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(BANDERA != null){
				
					this.setProperty("BANDERA", BANDERA.toString());
				
			}
			
			if(bodega != null){
				
					this.setProperty("bodega", bodega.toString());
				
			}
			
			if(cantidad != null){
				
					this.setProperty("cantidad", cantidad.toString());
				
			}
			
			if(cantidad_despachada != null){
				
					this.setProperty("cantidad_despachada", cantidad_despachada.toString());
				
			}
			
			if(cantidad_solicitada != null){
				
					this.setProperty("cantidad_solicitada", cantidad_solicitada.toString());
				
			}
			
			if(codigo_autorizacion != null){
				
					this.setProperty("codigo_autorizacion", codigo_autorizacion.toString());
				
			}
			
			if(codigo_cie10 != null){
				
					this.setProperty("codigo_cie10", codigo_cie10.toString());
				
			}
			
			if(codigo_cum != null){
				
					this.setProperty("codigo_cum", codigo_cum.toString());
				
			}
			
			if(codigo_cups != null){
				
					this.setProperty("codigo_cups", codigo_cups.toString());
				
			}
			
			if(concentracion != null){
				
					this.setProperty("concentracion", concentracion.toString());
				
			}
			
			if(confidencialidad != null){
				
					this.setProperty("confidencialidad", confidencialidad.toString());
				
			}
			
			if(CONTRATOS_ID != null){
				
					this.setProperty("CONTRATOS_ID", CONTRATOS_ID.toString());
				
			}
			
			if(ctc_aprobado != null){
				
					this.setProperty("ctc_aprobado", ctc_aprobado.toString());
				
			}
			
			if(descripcion_cie10 != null){
				
					this.setProperty("descripcion_cie10", descripcion_cie10.toString());
				
			}
			
			if(descripcion_cups != null){
				
					this.setProperty("descripcion_cups", descripcion_cups.toString());
				
			}
			
			if(documento != null){
				
					this.setProperty("documento", documento.toString());
				
			}
			
			if(esm != null){
				
					this.setProperty("esm", esm.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(EstAfiliacionActivo != null){
				
					this.setProperty("EstAfiliacionActivo", EstAfiliacionActivo.toString());
				
			}
			
			if(EstAfiliacionProvisional != null){
				
					this.setProperty("EstAfiliacionProvisional", EstAfiliacionProvisional.toString());
				
			}
			
			if(EstAfiliaicionInactivo != null){
				
					this.setProperty("EstAfiliaicionInactivo", EstAfiliaicionInactivo.toString());
				
			}
			
			if(EstArchivoPCE != null){
				
					this.setProperty("EstArchivoPCE", EstArchivoPCE.toString());
				
			}
			
			if(fecha_autorizacion != null){
				
					this.setProperty("fecha_autorizacion", fecha_autorizacion.toString());
				
			}
			
			if(fecha_dispensacion != null){
				
					this.setProperty("fecha_dispensacion", fecha_dispensacion.toString());
				
			}
			
			if(fecha_egreso != null){
				
					this.setProperty("fecha_egreso", fecha_egreso.toString());
				
			}
			
			if(fecha_factura != null){
				
					this.setProperty("fecha_factura", fecha_factura.toString());
				
			}
			
			if(fecha_formulacion != null){
				
					this.setProperty("fecha_formulacion", fecha_formulacion.toString());
				
			}
			
			if(fecha_ingreso != null){
				
					this.setProperty("fecha_ingreso", fecha_ingreso.toString());
				
			}
			
			if(FECHA_NULL != null){
				
					String pattern_FECHA_NULL = "yyyy-MM-dd HH:mm:ss";
					String value_FECHA_NULL = "";
					String[] parts_FECHA_NULL = value_FECHA_NULL.split(";");
					if(parts_FECHA_NULL.length > 1){
						pattern_FECHA_NULL = parts_FECHA_NULL[0];
						this.setProperty("FECHA_NULL", pattern_FECHA_NULL + ";" + FormatterUtils.format_Date(FECHA_NULL, pattern_FECHA_NULL));
					}else{
						this.setProperty("FECHA_NULL", FormatterUtils.format_Date(FECHA_NULL, pattern_FECHA_NULL));
					}
				
			}
			
			if(fecha_registro != null){
				
					this.setProperty("fecha_registro", fecha_registro.toString());
				
			}
			
			if(fecha_servicio != null){
				
					this.setProperty("fecha_servicio", fecha_servicio.toString());
				
			}
			
			if(fecha_vencimiento != null){
				
					this.setProperty("fecha_vencimiento", fecha_vencimiento.toString());
				
			}
			
			if(fuerza_militar != null){
				
					this.setProperty("fuerza_militar", fuerza_militar.toString());
				
			}
			
			if(HORA != null){
				
					this.setProperty("HORA", HORA.toString());
				
			}
			
			if(invima != null){
				
					this.setProperty("invima", invima.toString());
				
			}
			
			if(laboratorio != null){
				
					this.setProperty("laboratorio", laboratorio.toString());
				
			}
			
			if(lote != null){
				
					this.setProperty("lote", lote.toString());
				
			}
			
			if(lugar_dispensacion != null){
				
					this.setProperty("lugar_dispensacion", lugar_dispensacion.toString());
				
			}
			
			if(MEDCONTRATOS_ID != null){
				
					this.setProperty("MEDCONTRATOS_ID", MEDCONTRATOS_ID.toString());
				
			}
			
			if(Narchivo != null){
				
					this.setProperty("Narchivo", Narchivo.toString());
				
			}
			
			if(nombre_medicamento != null){
				
					this.setProperty("nombre_medicamento", nombre_medicamento.toString());
				
			}
			
			if(numero != null){
				
					this.setProperty("numero", numero.toString());
				
			}
			
			if(numero_factura != null){
				
					this.setProperty("numero_factura", numero_factura.toString());
				
			}
			
			if(numero_formula != null){
				
					this.setProperty("numero_formula", numero_formula.toString());
				
			}
			
			if(observaciones != null){
				
					this.setProperty("observaciones", observaciones.toString());
				
			}
			
			if(origen_formulacion != null){
				
					this.setProperty("origen_formulacion", origen_formulacion.toString());
				
			}
			
			if(periodo != null){
				
					this.setProperty("periodo", periodo.toString());
				
			}
			
			if(prefijo != null){
				
					this.setProperty("prefijo", prefijo.toString());
				
			}
			
			if(presentacion != null){
				
					this.setProperty("presentacion", presentacion.toString());
				
			}
			
			if(PRESTADOR != null){
				
					this.setProperty("PRESTADOR", PRESTADOR.toString());
				
			}
			
			if(producto_comercial != null){
				
					this.setProperty("producto_comercial", producto_comercial.toString());
				
			}
			
			if(servicio != null){
				
					this.setProperty("servicio", servicio.toString());
				
			}
			
			if(ssmp != null){
				
					this.setProperty("ssmp", ssmp.toString());
				
			}
			
			if(subtotal != null){
				
					this.setProperty("subtotal", subtotal.toString());
				
			}
			
			if(tipificacion != null){
				
					this.setProperty("tipificacion", tipificacion.toString());
				
			}
			
			if(tipo != null){
				
					this.setProperty("tipo", tipo.toString());
				
			}
			
			if(tipo_documento != null){
				
					this.setProperty("tipo_documento", tipo_documento.toString());
				
			}
			
			if(tipo_formula != null){
				
					this.setProperty("tipo_formula", tipo_formula.toString());
				
			}
			
			if(tipo_servicio != null){
				
					this.setProperty("tipo_servicio", tipo_servicio.toString());
				
			}
			
			if(TipoRespuesta != null){
				
					this.setProperty("TipoRespuesta", TipoRespuesta.toString());
				
			}
			
			if(tirilla != null){
				
					this.setProperty("tirilla", tirilla.toString());
				
			}
			
			if(unidad_medida != null){
				
					this.setProperty("unidad_medida", unidad_medida.toString());
				
			}
			
			if(valor_gravado != null){
				
					this.setProperty("valor_gravado", valor_gravado.toString());
				
			}
			
			if(valor_intermediacion != null){
				
					this.setProperty("valor_intermediacion", valor_intermediacion.toString());
				
			}
			
			if(valor_total != null){
				
					this.setProperty("valor_total", valor_total.toString());
				
			}
			
			if(valor_unitario != null){
				
					this.setProperty("valor_unitario", valor_unitario.toString());
				
			}
			
			if(via_administracion != null){
				
					this.setProperty("via_administracion", via_administracion.toString());
				
			}
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(PathStorage != null){
				
					this.setProperty("PathStorage", PathStorage.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(CargueArchivoId != null){
				
					this.setProperty("CargueArchivoId", CargueArchivoId.toString());
				
			}
			
			if(fechaArchivoErrores != null){
				
					this.setProperty("fechaArchivoErrores", fechaArchivoErrores.toString());
				
			}
			
			if(nErroresArchivo != null){
				
					this.setProperty("nErroresArchivo", nErroresArchivo.toString());
				
			}
			
			if(nRegArchivo != null){
				
					this.setProperty("nRegArchivo", nRegArchivo.toString());
				
			}
			
			if(vArchivo_Id != null){
				
					this.setProperty("vArchivo_Id", vArchivo_Id.toString());
				
			}
			
			if(vCantRegistros != null){
				
					this.setProperty("vCantRegistros", vCantRegistros.toString());
				
			}
			
			if(vEstadoCarga != null){
				
					this.setProperty("vEstadoCarga", vEstadoCarga.toString());
				
			}
			
			if(vIdTipoArchivo != null){
				
					this.setProperty("vIdTipoArchivo", vIdTipoArchivo.toString());
				
			}
			
			if(vNombreArchivo != null){
				
					this.setProperty("vNombreArchivo", vNombreArchivo.toString());
				
			}
			
			if(vNombreTipoArchivo != null){
				
					this.setProperty("vNombreTipoArchivo", vNombreTipoArchivo.toString());
				
			}
			
			if(vPeriodo != null){
				
					String pattern_vPeriodo = "yyyy-MM-dd HH:mm:ss";
					String value_vPeriodo = "";
					String[] parts_vPeriodo = value_vPeriodo.split(";");
					if(parts_vPeriodo.length > 1){
						pattern_vPeriodo = parts_vPeriodo[0];
						this.setProperty("vPeriodo", pattern_vPeriodo + ";" + FormatterUtils.format_Date(vPeriodo, pattern_vPeriodo));
					}else{
						this.setProperty("vPeriodo", FormatterUtils.format_Date(vPeriodo, pattern_vPeriodo));
					}
				
			}
			
			if(vRecepcionId != null){
				
					this.setProperty("vRecepcionId", vRecepcionId.toString());
				
			}
			
			if(vTipoArchivo != null){
				
					this.setProperty("vTipoArchivo", vTipoArchivo.toString());
				
			}
			
			if(contador != null){
				
					this.setProperty("contador", contador.toString());
				
			}
			
			if(eCIE10 != null){
				
					this.setProperty("eCIE10", eCIE10.toString());
				
			}
			
			if(eComercial != null){
				
					this.setProperty("eComercial", eComercial.toString());
				
			}
			
			if(eConcentracion != null){
				
					this.setProperty("eConcentracion", eConcentracion.toString());
				
			}
			
			if(eCTC != null){
				
					this.setProperty("eCTC", eCTC.toString());
				
			}
			
			if(eCum != null){
				
					this.setProperty("eCum", eCum.toString());
				
			}
			
			if(eCUPS != null){
				
					this.setProperty("eCUPS", eCUPS.toString());
				
			}
			
			if(eESM != null){
				
					this.setProperty("eESM", eESM.toString());
				
			}
			
			if(eGeneral != null){
				
					this.setProperty("eGeneral", eGeneral.toString());
				
			}
			
			if(eGenerico != null){
				
					this.setProperty("eGenerico", eGenerico.toString());
				
			}
			
			if(eInvima != null){
				
					this.setProperty("eInvima", eInvima.toString());
				
			}
			
			if(eLaboratorio != null){
				
					this.setProperty("eLaboratorio", eLaboratorio.toString());
				
			}
			
			if(ePersona != null){
				
					this.setProperty("ePersona", ePersona.toString());
				
			}
			
			if(ePresentacion != null){
				
					this.setProperty("ePresentacion", ePresentacion.toString());
				
			}
			
			if(eSSMP != null){
				
					this.setProperty("eSSMP", eSSMP.toString());
				
			}
			
			if(eTipoFormula != null){
				
					this.setProperty("eTipoFormula", eTipoFormula.toString());
				
			}
			
			if(eUmedida != null){
				
					this.setProperty("eUmedida", eUmedida.toString());
				
			}
			
			if(eViaAdministracion != null){
				
					this.setProperty("eViaAdministracion", eViaAdministracion.toString());
				
			}
			
			if(code != null){
				
					this.setProperty("code", code.toString());
				
			}
			
			if(context != null){
				
					this.setProperty("context", context.toString());
				
			}
			
			if(job != null){
				
					this.setProperty("job", job.toString());
				
			}
			
			if(message != null){
				
					this.setProperty("message", message.toString());
				
			}
			
			if(moment != null){
				
					String pattern_moment = "yyyy-MM-dd HH:mm:ss";
					String value_moment = "";
					String[] parts_moment = value_moment.split(";");
					if(parts_moment.length > 1){
						pattern_moment = parts_moment[0];
						this.setProperty("moment", pattern_moment + ";" + FormatterUtils.format_Date(moment, pattern_moment));
					}else{
						this.setProperty("moment", FormatterUtils.format_Date(moment, pattern_moment));
					}
				
			}
			
			if(origen != null){
				
					this.setProperty("origen", origen.toString());
				
			}
			
			if(priority != null){
				
					this.setProperty("priority", priority.toString());
				
			}
			
			if(project != null){
				
					this.setProperty("project", project.toString());
				
			}
			
			if(server_destino != null){
				
					this.setProperty("server_destino", server_destino.toString());
				
			}
			
			if(server_origen != null){
				
					this.setProperty("server_origen", server_origen.toString());
				
			}
			
			if(service_name_destino != null){
				
					this.setProperty("service_name_destino", service_name_destino.toString());
				
			}
			
			if(service_name_origen != null){
				
					this.setProperty("service_name_origen", service_name_origen.toString());
				
			}
			
			if(user_destino != null){
				
					this.setProperty("user_destino", user_destino.toString());
				
			}
			
			if(user_origen != null){
				
					this.setProperty("user_origen", user_origen.toString());
				
			}
			
			if(Cerrada != null){
				
					this.setProperty("Cerrada", Cerrada.toString());
				
			}
			
			if(Editada != null){
				
					this.setProperty("Editada", Editada.toString());
				
			}
			
			if(Editando != null){
				
					this.setProperty("Editando", Editando.toString());
				
			}
			
			if(Finalizada != null){
				
					this.setProperty("Finalizada", Finalizada.toString());
				
			}
			
			if(Iniciada != null){
				
					this.setProperty("Iniciada", Iniciada.toString());
				
			}
			
			if(Manual != null){
				
					this.setProperty("Manual", Manual.toString());
				
			}
			
			if(SinInniciar != null){
				
					this.setProperty("SinInniciar", SinInniciar.toString());
				
			}
			
			if(estActivo != null){
				
					this.setProperty("estActivo", estActivo.toString());
				
			}
			
			if(estCancelado != null){
				
					this.setProperty("estCancelado", estCancelado.toString());
				
			}
			
			if(estEnProceso != null){
				
					this.setProperty("estEnProceso", estEnProceso.toString());
				
			}
			
			if(estErrorArchivo != null){
				
					this.setProperty("estErrorArchivo", estErrorArchivo.toString());
				
			}
			
			if(estErrorProcesamiento != null){
				
					this.setProperty("estErrorProcesamiento", estErrorProcesamiento.toString());
				
			}
			
			if(estInactivo != null){
				
					this.setProperty("estInactivo", estInactivo.toString());
				
			}
			
			if(estPausado != null){
				
					this.setProperty("estPausado", estPausado.toString());
				
			}
			
			if(estProcesado != null){
				
					this.setProperty("estProcesado", estProcesado.toString());
				
			}
			
			if(EstValidado != null){
				
					this.setProperty("EstValidado", EstValidado.toString());
				
			}
			
			if(archivoSalida != null){
				
					this.setProperty("archivoSalida", archivoSalida.toString());
				
			}
			
			if(BANDERA_EJECUCION != null){
				
					this.setProperty("BANDERA_EJECUCION", BANDERA_EJECUCION.toString());
				
			}
			
			if(DCARGUE_ID != null){
				
					this.setProperty("DCARGUE_ID", DCARGUE_ID.toString());
				
			}
			
			if(DESTINO != null){
				
					this.setProperty("DESTINO", DESTINO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(JOB_ID != null){
				
					this.setProperty("JOB_ID", JOB_ID.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RECEPCION_ID != null){
				
					this.setProperty("RECEPCION_ID", RECEPCION_ID.toString());
				
			}
			
			if(TJOB != null){
				
					this.setProperty("TJOB", TJOB.toString());
				
			}
			
			if(EstadoArchivo != null){
				
					this.setProperty("EstadoArchivo", EstadoArchivo.toString());
				
			}
			
			if(Fauditoria != null){
				
					String pattern_Fauditoria = "yyyy-MM-dd HH:mm:ss";
					String value_Fauditoria = "";
					String[] parts_Fauditoria = value_Fauditoria.split(";");
					if(parts_Fauditoria.length > 1){
						pattern_Fauditoria = parts_Fauditoria[0];
						this.setProperty("Fauditoria", pattern_Fauditoria + ";" + FormatterUtils.format_Date(Fauditoria, pattern_Fauditoria));
					}else{
						this.setProperty("Fauditoria", FormatterUtils.format_Date(Fauditoria, pattern_Fauditoria));
					}
				
			}
			
			if(HAUDITORIA_ID != null){
				
					this.setProperty("HAUDITORIA_ID", HAUDITORIA_ID.toString());
				
			}
			
			if(Nfactura != null){
				
					this.setProperty("Nfactura", Nfactura.toString());
				
			}
			
			if(Sprefijo != null){
				
					this.setProperty("Sprefijo", Sprefijo.toString());
				
			}
			
			if(SumaFactura != null){
				
					this.setProperty("SumaFactura", SumaFactura.toString());
				
			}
			
			if(SumaGlosas != null){
				
					this.setProperty("SumaGlosas", SumaGlosas.toString());
				
			}
			
			if(mail_Message != null){
				
					this.setProperty("mail_Message", mail_Message.toString());
				
			}
			
			if(mail_Password != null){
				
					this.setProperty("mail_Password", mail_Password.toString());
				
			}
			
			if(mail_SenderName != null){
				
					this.setProperty("mail_SenderName", mail_SenderName.toString());
				
			}
			
			if(mail_SMTP_Host != null){
				
					this.setProperty("mail_SMTP_Host", mail_SMTP_Host.toString());
				
			}
			
			if(mail_SMTP_Port != null){
				
					this.setProperty("mail_SMTP_Port", mail_SMTP_Port.toString());
				
			}
			
			if(mail_Subject != null){
				
					this.setProperty("mail_Subject", mail_Subject.toString());
				
			}
			
			if(mail_To != null){
				
					this.setProperty("mail_To", mail_To.toString());
				
			}
			
			if(mail_User != null){
				
					this.setProperty("mail_User", mail_User.toString());
				
			}
			
			if(AfiliacionDerechos != null){
				
					this.setProperty("AfiliacionDerechos", AfiliacionDerechos.toString());
				
			}
			
			if(AfiliacionDerechosD != null){
				
					this.setProperty("AfiliacionDerechosD", AfiliacionDerechosD.toString());
				
			}
			
			if(AfiliacionInactiva != null){
				
					this.setProperty("AfiliacionInactiva", AfiliacionInactiva.toString());
				
			}
			
			if(AfiliacionInactivaD != null){
				
					this.setProperty("AfiliacionInactivaD", AfiliacionInactivaD.toString());
				
			}
			
			if(AutorizacionCobrado != null){
				
					this.setProperty("AutorizacionCobrado", AutorizacionCobrado.toString());
				
			}
			
			if(AutorizacionCobradoD != null){
				
					this.setProperty("AutorizacionCobradoD", AutorizacionCobradoD.toString());
				
			}
			
			if(AutorizacionCups != null){
				
					this.setProperty("AutorizacionCups", AutorizacionCups.toString());
				
			}
			
			if(AutorizacionCupsD != null){
				
					this.setProperty("AutorizacionCupsD", AutorizacionCupsD.toString());
				
			}
			
			if(AutorizacionNoExiste != null){
				
					this.setProperty("AutorizacionNoExiste", AutorizacionNoExiste.toString());
				
			}
			
			if(AutorizacionNoExisteD != null){
				
					this.setProperty("AutorizacionNoExisteD", AutorizacionNoExisteD.toString());
				
			}
			
			if(AutorizacionPersona != null){
				
					this.setProperty("AutorizacionPersona", AutorizacionPersona.toString());
				
			}
			
			if(AutorizacionPersonaD != null){
				
					this.setProperty("AutorizacionPersonaD", AutorizacionPersonaD.toString());
				
			}
			
			if(AutorizacionPrestador != null){
				
					this.setProperty("AutorizacionPrestador", AutorizacionPrestador.toString());
				
			}
			
			if(AutorizacionPrestadorD != null){
				
					this.setProperty("AutorizacionPrestadorD", AutorizacionPrestadorD.toString());
				
			}
			
			if(CantidadFormulada != null){
				
					this.setProperty("CantidadFormulada", CantidadFormulada.toString());
				
			}
			
			if(CantidadFormuladaD != null){
				
					this.setProperty("CantidadFormuladaD", CantidadFormuladaD.toString());
				
			}
			
			if(FacturaAuditada != null){
				
					this.setProperty("FacturaAuditada", FacturaAuditada.toString());
				
			}
			
			if(FacturaAuditadaD != null){
				
					this.setProperty("FacturaAuditadaD", FacturaAuditadaD.toString());
				
			}
			
			if(MedicamentoNoPactado != null){
				
					this.setProperty("MedicamentoNoPactado", MedicamentoNoPactado.toString());
				
			}
			
			if(MedicamentoNoPactadoD != null){
				
					this.setProperty("MedicamentoNoPactadoD", MedicamentoNoPactadoD.toString());
				
			}
			
			if(PorcetajeConsumo != null){
				
					this.setProperty("PorcetajeConsumo", PorcetajeConsumo.toString());
				
			}
			
			if(PorcetajeConsumoD != null){
				
					this.setProperty("PorcetajeConsumoD", PorcetajeConsumoD.toString());
				
			}
			
			if(SumaFacturas != null){
				
					this.setProperty("SumaFacturas", SumaFacturas.toString());
				
			}
			
			if(SumaFacturasD != null){
				
					this.setProperty("SumaFacturasD", SumaFacturasD.toString());
				
			}
			
			if(TiempoEntrega != null){
				
					this.setProperty("TiempoEntrega", TiempoEntrega.toString());
				
			}
			
			if(TiempoEntregaD != null){
				
					this.setProperty("TiempoEntregaD", TiempoEntregaD.toString());
				
			}
			
			if(ValorDiferente != null){
				
					this.setProperty("ValorDiferente", ValorDiferente.toString());
				
			}
			
			if(ValorDiferenteD != null){
				
					this.setProperty("ValorDiferenteD", ValorDiferenteD.toString());
				
			}
			
			if(ValorNoPactado != null){
				
					this.setProperty("ValorNoPactado", ValorNoPactado.toString());
				
			}
			
			if(ValorNoPactadoD != null){
				
					this.setProperty("ValorNoPactadoD", ValorNoPactadoD.toString());
				
			}
			
			if(VidaUtil != null){
				
					this.setProperty("VidaUtil", VidaUtil.toString());
				
			}
			
			if(VidaUtilD != null){
				
					this.setProperty("VidaUtilD", VidaUtilD.toString());
				
			}
			
			if(AUDITORIA_ID != null){
				
					this.setProperty("AUDITORIA_ID", AUDITORIA_ID.toString());
				
			}
			
			if(ETAPASNORMATIVIDAD_ID != null){
				
					this.setProperty("ETAPASNORMATIVIDAD_ID", ETAPASNORMATIVIDAD_ID.toString());
				
			}
			
			if(FRADICADO != null){
				
					String pattern_FRADICADO = "yyyy-MM-dd HH:mm:ss";
					String value_FRADICADO = "";
					String[] parts_FRADICADO = value_FRADICADO.split(";");
					if(parts_FRADICADO.length > 1){
						pattern_FRADICADO = parts_FRADICADO[0];
						this.setProperty("FRADICADO", pattern_FRADICADO + ";" + FormatterUtils.format_Date(FRADICADO, pattern_FRADICADO));
					}else{
						this.setProperty("FRADICADO", FormatterUtils.format_Date(FRADICADO, pattern_FRADICADO));
					}
				
			}
			
			if(NORMATIVIDAD_ETAPA_ID != null){
				
					this.setProperty("NORMATIVIDAD_ETAPA_ID", NORMATIVIDAD_ETAPA_ID.toString());
				
			}
			
			if(NORMATIVIDAD_GLOSA_ID != null){
				
					this.setProperty("NORMATIVIDAD_GLOSA_ID", NORMATIVIDAD_GLOSA_ID.toString());
				
			}
			
			if(SUMATORIA != null){
				
					this.setProperty("SUMATORIA", SUMATORIA.toString());
				
			}
			
			if(SUMATORIA_FACTURA != null){
				
					this.setProperty("SUMATORIA_FACTURA", SUMATORIA_FACTURA.toString());
				
			}
			
			if(UORG_ID != null){
				
					this.setProperty("UORG_ID", UORG_ID.toString());
				
			}
			
			if(USUARIOS_ID != null){
				
					this.setProperty("USUARIOS_ID", USUARIOS_ID.toString());
				
			}
			
			if(VIDA_UTIL != null){
				
					this.setProperty("VIDA_UTIL", VIDA_UTIL.toString());
				
			}
			
			if(vFechaFinContrato != null){
				
					String pattern_vFechaFinContrato = "yyyy-MM-dd HH:mm:ss";
					String value_vFechaFinContrato = "";
					String[] parts_vFechaFinContrato = value_vFechaFinContrato.split(";");
					if(parts_vFechaFinContrato.length > 1){
						pattern_vFechaFinContrato = parts_vFechaFinContrato[0];
						this.setProperty("vFechaFinContrato", pattern_vFechaFinContrato + ";" + FormatterUtils.format_Date(vFechaFinContrato, pattern_vFechaFinContrato));
					}else{
						this.setProperty("vFechaFinContrato", FormatterUtils.format_Date(vFechaFinContrato, pattern_vFechaFinContrato));
					}
				
			}
			
			if(vFechaIniContrato != null){
				
					String pattern_vFechaIniContrato = "yyyy-MM-dd HH:mm:ss";
					String value_vFechaIniContrato = "";
					String[] parts_vFechaIniContrato = value_vFechaIniContrato.split(";");
					if(parts_vFechaIniContrato.length > 1){
						pattern_vFechaIniContrato = parts_vFechaIniContrato[0];
						this.setProperty("vFechaIniContrato", pattern_vFechaIniContrato + ";" + FormatterUtils.format_Date(vFechaIniContrato, pattern_vFechaIniContrato));
					}else{
						this.setProperty("vFechaIniContrato", FormatterUtils.format_Date(vFechaIniContrato, pattern_vFechaIniContrato));
					}
				
			}
			
			if(vIntermediacionDisp != null){
				
					this.setProperty("vIntermediacionDisp", vIntermediacionDisp.toString());
				
			}
			
			if(vIntermediacionSum != null){
				
					this.setProperty("vIntermediacionSum", vIntermediacionSum.toString());
				
			}
			
			if(vTipificacion != null){
				
					this.setProperty("vTipificacion", vTipificacion.toString());
				
			}
			
			if(vTipoArchivoSigla != null){
				
					this.setProperty("vTipoArchivoSigla", vTipoArchivoSigla.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public Integer BANDERA;
public Integer getBANDERA(){
	return this.BANDERA;
}
public String bodega;
public String getBodega(){
	return this.bodega;
}
public String cantidad;
public String getCantidad(){
	return this.cantidad;
}
public String cantidad_despachada;
public String getCantidad_despachada(){
	return this.cantidad_despachada;
}
public String cantidad_solicitada;
public String getCantidad_solicitada(){
	return this.cantidad_solicitada;
}
public String codigo_autorizacion;
public String getCodigo_autorizacion(){
	return this.codigo_autorizacion;
}
public String codigo_cie10;
public String getCodigo_cie10(){
	return this.codigo_cie10;
}
public String codigo_cum;
public String getCodigo_cum(){
	return this.codigo_cum;
}
public String codigo_cups;
public String getCodigo_cups(){
	return this.codigo_cups;
}
public String concentracion;
public String getConcentracion(){
	return this.concentracion;
}
public String confidencialidad;
public String getConfidencialidad(){
	return this.confidencialidad;
}
public BigDecimal CONTRATOS_ID;
public BigDecimal getCONTRATOS_ID(){
	return this.CONTRATOS_ID;
}
public String ctc_aprobado;
public String getCtc_aprobado(){
	return this.ctc_aprobado;
}
public String descripcion_cie10;
public String getDescripcion_cie10(){
	return this.descripcion_cie10;
}
public String descripcion_cups;
public String getDescripcion_cups(){
	return this.descripcion_cups;
}
public String documento;
public String getDocumento(){
	return this.documento;
}
public String esm;
public String getEsm(){
	return this.esm;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public Integer EstAfiliacionActivo;
public Integer getEstAfiliacionActivo(){
	return this.EstAfiliacionActivo;
}
public Integer EstAfiliacionProvisional;
public Integer getEstAfiliacionProvisional(){
	return this.EstAfiliacionProvisional;
}
public Integer EstAfiliaicionInactivo;
public Integer getEstAfiliaicionInactivo(){
	return this.EstAfiliaicionInactivo;
}
public BigDecimal EstArchivoPCE;
public BigDecimal getEstArchivoPCE(){
	return this.EstArchivoPCE;
}
public String fecha_autorizacion;
public String getFecha_autorizacion(){
	return this.fecha_autorizacion;
}
public String fecha_dispensacion;
public String getFecha_dispensacion(){
	return this.fecha_dispensacion;
}
public String fecha_egreso;
public String getFecha_egreso(){
	return this.fecha_egreso;
}
public String fecha_factura;
public String getFecha_factura(){
	return this.fecha_factura;
}
public String fecha_formulacion;
public String getFecha_formulacion(){
	return this.fecha_formulacion;
}
public String fecha_ingreso;
public String getFecha_ingreso(){
	return this.fecha_ingreso;
}
public java.util.Date FECHA_NULL;
public java.util.Date getFECHA_NULL(){
	return this.FECHA_NULL;
}
public String fecha_registro;
public String getFecha_registro(){
	return this.fecha_registro;
}
public String fecha_servicio;
public String getFecha_servicio(){
	return this.fecha_servicio;
}
public String fecha_vencimiento;
public String getFecha_vencimiento(){
	return this.fecha_vencimiento;
}
public String fuerza_militar;
public String getFuerza_militar(){
	return this.fuerza_militar;
}
public Integer HORA;
public Integer getHORA(){
	return this.HORA;
}
public String invima;
public String getInvima(){
	return this.invima;
}
public String laboratorio;
public String getLaboratorio(){
	return this.laboratorio;
}
public String lote;
public String getLote(){
	return this.lote;
}
public String lugar_dispensacion;
public String getLugar_dispensacion(){
	return this.lugar_dispensacion;
}
public BigDecimal MEDCONTRATOS_ID;
public BigDecimal getMEDCONTRATOS_ID(){
	return this.MEDCONTRATOS_ID;
}
public String Narchivo;
public String getNarchivo(){
	return this.Narchivo;
}
public String nombre_medicamento;
public String getNombre_medicamento(){
	return this.nombre_medicamento;
}
public String numero;
public String getNumero(){
	return this.numero;
}
public String numero_factura;
public String getNumero_factura(){
	return this.numero_factura;
}
public String numero_formula;
public String getNumero_formula(){
	return this.numero_formula;
}
public String observaciones;
public String getObservaciones(){
	return this.observaciones;
}
public String origen_formulacion;
public String getOrigen_formulacion(){
	return this.origen_formulacion;
}
public String periodo;
public String getPeriodo(){
	return this.periodo;
}
public String prefijo;
public String getPrefijo(){
	return this.prefijo;
}
public String presentacion;
public String getPresentacion(){
	return this.presentacion;
}
public BigDecimal PRESTADOR;
public BigDecimal getPRESTADOR(){
	return this.PRESTADOR;
}
public String producto_comercial;
public String getProducto_comercial(){
	return this.producto_comercial;
}
public String servicio;
public String getServicio(){
	return this.servicio;
}
public String ssmp;
public String getSsmp(){
	return this.ssmp;
}
public String subtotal;
public String getSubtotal(){
	return this.subtotal;
}
public String tipificacion;
public String getTipificacion(){
	return this.tipificacion;
}
public String tipo;
public String getTipo(){
	return this.tipo;
}
public String tipo_documento;
public String getTipo_documento(){
	return this.tipo_documento;
}
public String tipo_formula;
public String getTipo_formula(){
	return this.tipo_formula;
}
public String tipo_servicio;
public String getTipo_servicio(){
	return this.tipo_servicio;
}
public BigDecimal TipoRespuesta;
public BigDecimal getTipoRespuesta(){
	return this.TipoRespuesta;
}
public String tirilla;
public String getTirilla(){
	return this.tirilla;
}
public String unidad_medida;
public String getUnidad_medida(){
	return this.unidad_medida;
}
public String valor_gravado;
public String getValor_gravado(){
	return this.valor_gravado;
}
public String valor_intermediacion;
public String getValor_intermediacion(){
	return this.valor_intermediacion;
}
public String valor_total;
public String getValor_total(){
	return this.valor_total;
}
public String valor_unitario;
public String getValor_unitario(){
	return this.valor_unitario;
}
public String via_administracion;
public String getVia_administracion(){
	return this.via_administracion;
}
public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String PathStorage;
public String getPathStorage(){
	return this.PathStorage;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Integer CargueArchivoId;
public Integer getCargueArchivoId(){
	return this.CargueArchivoId;
}
public String fechaArchivoErrores;
public String getFechaArchivoErrores(){
	return this.fechaArchivoErrores;
}
public Integer nErroresArchivo;
public Integer getNErroresArchivo(){
	return this.nErroresArchivo;
}
public Integer nRegArchivo;
public Integer getNRegArchivo(){
	return this.nRegArchivo;
}
public BigDecimal vArchivo_Id;
public BigDecimal getVArchivo_Id(){
	return this.vArchivo_Id;
}
public Integer vCantRegistros;
public Integer getVCantRegistros(){
	return this.vCantRegistros;
}
public String vEstadoCarga;
public String getVEstadoCarga(){
	return this.vEstadoCarga;
}
public BigDecimal vIdTipoArchivo;
public BigDecimal getVIdTipoArchivo(){
	return this.vIdTipoArchivo;
}
public String vNombreArchivo;
public String getVNombreArchivo(){
	return this.vNombreArchivo;
}
public String vNombreTipoArchivo;
public String getVNombreTipoArchivo(){
	return this.vNombreTipoArchivo;
}
public java.util.Date vPeriodo;
public java.util.Date getVPeriodo(){
	return this.vPeriodo;
}
public BigDecimal vRecepcionId;
public BigDecimal getVRecepcionId(){
	return this.vRecepcionId;
}
public String vTipoArchivo;
public String getVTipoArchivo(){
	return this.vTipoArchivo;
}
public Integer contador;
public Integer getContador(){
	return this.contador;
}
public String eCIE10;
public String getECIE10(){
	return this.eCIE10;
}
public String eComercial;
public String getEComercial(){
	return this.eComercial;
}
public String eConcentracion;
public String getEConcentracion(){
	return this.eConcentracion;
}
public String eCTC;
public String getECTC(){
	return this.eCTC;
}
public String eCum;
public String getECum(){
	return this.eCum;
}
public String eCUPS;
public String getECUPS(){
	return this.eCUPS;
}
public String eESM;
public String getEESM(){
	return this.eESM;
}
public String eGeneral;
public String getEGeneral(){
	return this.eGeneral;
}
public String eGenerico;
public String getEGenerico(){
	return this.eGenerico;
}
public String eInvima;
public String getEInvima(){
	return this.eInvima;
}
public String eLaboratorio;
public String getELaboratorio(){
	return this.eLaboratorio;
}
public String ePersona;
public String getEPersona(){
	return this.ePersona;
}
public String ePresentacion;
public String getEPresentacion(){
	return this.ePresentacion;
}
public String eSSMP;
public String getESSMP(){
	return this.eSSMP;
}
public String eTipoFormula;
public String getETipoFormula(){
	return this.eTipoFormula;
}
public String eUmedida;
public String getEUmedida(){
	return this.eUmedida;
}
public String eViaAdministracion;
public String getEViaAdministracion(){
	return this.eViaAdministracion;
}
public Integer code;
public Integer getCode(){
	return this.code;
}
public String context;
public String getContext(){
	return this.context;
}
public String job;
public String getJob(){
	return this.job;
}
public String message;
public String getMessage(){
	return this.message;
}
public java.util.Date moment;
public java.util.Date getMoment(){
	return this.moment;
}
public String origen;
public String getOrigen(){
	return this.origen;
}
public Integer priority;
public Integer getPriority(){
	return this.priority;
}
public String project;
public String getProject(){
	return this.project;
}
public String server_destino;
public String getServer_destino(){
	return this.server_destino;
}
public String server_origen;
public String getServer_origen(){
	return this.server_origen;
}
public String service_name_destino;
public String getService_name_destino(){
	return this.service_name_destino;
}
public String service_name_origen;
public String getService_name_origen(){
	return this.service_name_origen;
}
public String user_destino;
public String getUser_destino(){
	return this.user_destino;
}
public String user_origen;
public String getUser_origen(){
	return this.user_origen;
}
public BigDecimal Cerrada;
public BigDecimal getCerrada(){
	return this.Cerrada;
}
public BigDecimal Editada;
public BigDecimal getEditada(){
	return this.Editada;
}
public BigDecimal Editando;
public BigDecimal getEditando(){
	return this.Editando;
}
public BigDecimal Finalizada;
public BigDecimal getFinalizada(){
	return this.Finalizada;
}
public BigDecimal Iniciada;
public BigDecimal getIniciada(){
	return this.Iniciada;
}
public BigDecimal Manual;
public BigDecimal getManual(){
	return this.Manual;
}
public BigDecimal SinInniciar;
public BigDecimal getSinInniciar(){
	return this.SinInniciar;
}
public BigDecimal estActivo;
public BigDecimal getEstActivo(){
	return this.estActivo;
}
public BigDecimal estCancelado;
public BigDecimal getEstCancelado(){
	return this.estCancelado;
}
public BigDecimal estEnProceso;
public BigDecimal getEstEnProceso(){
	return this.estEnProceso;
}
public BigDecimal estErrorArchivo;
public BigDecimal getEstErrorArchivo(){
	return this.estErrorArchivo;
}
public BigDecimal estErrorProcesamiento;
public BigDecimal getEstErrorProcesamiento(){
	return this.estErrorProcesamiento;
}
public BigDecimal estInactivo;
public BigDecimal getEstInactivo(){
	return this.estInactivo;
}
public BigDecimal estPausado;
public BigDecimal getEstPausado(){
	return this.estPausado;
}
public BigDecimal estProcesado;
public BigDecimal getEstProcesado(){
	return this.estProcesado;
}
public BigDecimal EstValidado;
public BigDecimal getEstValidado(){
	return this.EstValidado;
}
public String archivoSalida;
public String getArchivoSalida(){
	return this.archivoSalida;
}
public Integer BANDERA_EJECUCION;
public Integer getBANDERA_EJECUCION(){
	return this.BANDERA_EJECUCION;
}
public BigDecimal DCARGUE_ID;
public BigDecimal getDCARGUE_ID(){
	return this.DCARGUE_ID;
}
public String DESTINO;
public String getDESTINO(){
	return this.DESTINO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public BigDecimal JOB_ID;
public BigDecimal getJOB_ID(){
	return this.JOB_ID;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public BigDecimal RECEPCION_ID;
public BigDecimal getRECEPCION_ID(){
	return this.RECEPCION_ID;
}
public Integer TJOB;
public Integer getTJOB(){
	return this.TJOB;
}
public Integer EstadoArchivo;
public Integer getEstadoArchivo(){
	return this.EstadoArchivo;
}
public java.util.Date Fauditoria;
public java.util.Date getFauditoria(){
	return this.Fauditoria;
}
public BigDecimal HAUDITORIA_ID;
public BigDecimal getHAUDITORIA_ID(){
	return this.HAUDITORIA_ID;
}
public String Nfactura;
public String getNfactura(){
	return this.Nfactura;
}
public String Sprefijo;
public String getSprefijo(){
	return this.Sprefijo;
}
public Double SumaFactura;
public Double getSumaFactura(){
	return this.SumaFactura;
}
public Double SumaGlosas;
public Double getSumaGlosas(){
	return this.SumaGlosas;
}
public String mail_Message;
public String getMail_Message(){
	return this.mail_Message;
}
public String mail_Password;
public String getMail_Password(){
	return this.mail_Password;
}
public String mail_SenderName;
public String getMail_SenderName(){
	return this.mail_SenderName;
}
public String mail_SMTP_Host;
public String getMail_SMTP_Host(){
	return this.mail_SMTP_Host;
}
public String mail_SMTP_Port;
public String getMail_SMTP_Port(){
	return this.mail_SMTP_Port;
}
public String mail_Subject;
public String getMail_Subject(){
	return this.mail_Subject;
}
public String mail_To;
public String getMail_To(){
	return this.mail_To;
}
public String mail_User;
public String getMail_User(){
	return this.mail_User;
}
public BigDecimal AfiliacionDerechos;
public BigDecimal getAfiliacionDerechos(){
	return this.AfiliacionDerechos;
}
public String AfiliacionDerechosD;
public String getAfiliacionDerechosD(){
	return this.AfiliacionDerechosD;
}
public BigDecimal AfiliacionInactiva;
public BigDecimal getAfiliacionInactiva(){
	return this.AfiliacionInactiva;
}
public String AfiliacionInactivaD;
public String getAfiliacionInactivaD(){
	return this.AfiliacionInactivaD;
}
public BigDecimal AutorizacionCobrado;
public BigDecimal getAutorizacionCobrado(){
	return this.AutorizacionCobrado;
}
public String AutorizacionCobradoD;
public String getAutorizacionCobradoD(){
	return this.AutorizacionCobradoD;
}
public BigDecimal AutorizacionCups;
public BigDecimal getAutorizacionCups(){
	return this.AutorizacionCups;
}
public String AutorizacionCupsD;
public String getAutorizacionCupsD(){
	return this.AutorizacionCupsD;
}
public BigDecimal AutorizacionNoExiste;
public BigDecimal getAutorizacionNoExiste(){
	return this.AutorizacionNoExiste;
}
public String AutorizacionNoExisteD;
public String getAutorizacionNoExisteD(){
	return this.AutorizacionNoExisteD;
}
public BigDecimal AutorizacionPersona;
public BigDecimal getAutorizacionPersona(){
	return this.AutorizacionPersona;
}
public String AutorizacionPersonaD;
public String getAutorizacionPersonaD(){
	return this.AutorizacionPersonaD;
}
public BigDecimal AutorizacionPrestador;
public BigDecimal getAutorizacionPrestador(){
	return this.AutorizacionPrestador;
}
public String AutorizacionPrestadorD;
public String getAutorizacionPrestadorD(){
	return this.AutorizacionPrestadorD;
}
public BigDecimal CantidadFormulada;
public BigDecimal getCantidadFormulada(){
	return this.CantidadFormulada;
}
public String CantidadFormuladaD;
public String getCantidadFormuladaD(){
	return this.CantidadFormuladaD;
}
public BigDecimal FacturaAuditada;
public BigDecimal getFacturaAuditada(){
	return this.FacturaAuditada;
}
public String FacturaAuditadaD;
public String getFacturaAuditadaD(){
	return this.FacturaAuditadaD;
}
public BigDecimal MedicamentoNoPactado;
public BigDecimal getMedicamentoNoPactado(){
	return this.MedicamentoNoPactado;
}
public String MedicamentoNoPactadoD;
public String getMedicamentoNoPactadoD(){
	return this.MedicamentoNoPactadoD;
}
public BigDecimal PorcetajeConsumo;
public BigDecimal getPorcetajeConsumo(){
	return this.PorcetajeConsumo;
}
public String PorcetajeConsumoD;
public String getPorcetajeConsumoD(){
	return this.PorcetajeConsumoD;
}
public BigDecimal SumaFacturas;
public BigDecimal getSumaFacturas(){
	return this.SumaFacturas;
}
public String SumaFacturasD;
public String getSumaFacturasD(){
	return this.SumaFacturasD;
}
public BigDecimal TiempoEntrega;
public BigDecimal getTiempoEntrega(){
	return this.TiempoEntrega;
}
public String TiempoEntregaD;
public String getTiempoEntregaD(){
	return this.TiempoEntregaD;
}
public BigDecimal ValorDiferente;
public BigDecimal getValorDiferente(){
	return this.ValorDiferente;
}
public String ValorDiferenteD;
public String getValorDiferenteD(){
	return this.ValorDiferenteD;
}
public BigDecimal ValorNoPactado;
public BigDecimal getValorNoPactado(){
	return this.ValorNoPactado;
}
public String ValorNoPactadoD;
public String getValorNoPactadoD(){
	return this.ValorNoPactadoD;
}
public BigDecimal VidaUtil;
public BigDecimal getVidaUtil(){
	return this.VidaUtil;
}
public String VidaUtilD;
public String getVidaUtilD(){
	return this.VidaUtilD;
}
public BigDecimal AUDITORIA_ID;
public BigDecimal getAUDITORIA_ID(){
	return this.AUDITORIA_ID;
}
public BigDecimal ETAPASNORMATIVIDAD_ID;
public BigDecimal getETAPASNORMATIVIDAD_ID(){
	return this.ETAPASNORMATIVIDAD_ID;
}
public java.util.Date FRADICADO;
public java.util.Date getFRADICADO(){
	return this.FRADICADO;
}
public BigDecimal NORMATIVIDAD_ETAPA_ID;
public BigDecimal getNORMATIVIDAD_ETAPA_ID(){
	return this.NORMATIVIDAD_ETAPA_ID;
}
public BigDecimal NORMATIVIDAD_GLOSA_ID;
public BigDecimal getNORMATIVIDAD_GLOSA_ID(){
	return this.NORMATIVIDAD_GLOSA_ID;
}
public Double SUMATORIA;
public Double getSUMATORIA(){
	return this.SUMATORIA;
}
public Double SUMATORIA_FACTURA;
public Double getSUMATORIA_FACTURA(){
	return this.SUMATORIA_FACTURA;
}
public BigDecimal UORG_ID;
public BigDecimal getUORG_ID(){
	return this.UORG_ID;
}
public BigDecimal USUARIOS_ID;
public BigDecimal getUSUARIOS_ID(){
	return this.USUARIOS_ID;
}
public Integer VIDA_UTIL;
public Integer getVIDA_UTIL(){
	return this.VIDA_UTIL;
}
public java.util.Date vFechaFinContrato;
public java.util.Date getVFechaFinContrato(){
	return this.vFechaFinContrato;
}
public java.util.Date vFechaIniContrato;
public java.util.Date getVFechaIniContrato(){
	return this.vFechaIniContrato;
}
public BigDecimal vIntermediacionDisp;
public BigDecimal getVIntermediacionDisp(){
	return this.vIntermediacionDisp;
}
public BigDecimal vIntermediacionSum;
public BigDecimal getVIntermediacionSum(){
	return this.vIntermediacionSum;
}
public String vTipificacion;
public String getVTipificacion(){
	return this.vTipificacion;
}
public String vTipoArchivoSigla;
public String getVTipoArchivoSigla(){
	return this.vTipoArchivoSigla;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "CargueMedicamentos";
	private final String projectName = "ACM_CONTROL_AUDITORIA";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				CargueMedicamentos.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(CargueMedicamentos.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tDie_3Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleRow_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_24_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleSP_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDie_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tDie_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_25_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row46_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row87_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row86_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row30_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row38_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row39_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row40_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row41_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row42_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row47_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row34_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row35_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row36_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row37_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_1_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_1_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_1_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAggregateRow_2_AGGOUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tAggregateRow_2_AGGIN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tAggregateRow_2_AGGIN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_24_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "ERROR", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

				try {
					
						if(this.execStat){
							runStat.updateStatOnConnection("OnSubjobError1", 0, "error");
						}
					
					((java.util.Map)threadLocal.get()).put("errorCode", null);
					tDie_1Process(globalMap);
					if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
						((java.util.Map)threadLocal.get()).put("status", "end");
					}
				} catch (Exception e) {
					e.printStackTrace();
				}
			}
			public void tDie_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleRow_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_24_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tDie_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class XML_API_tFileInputXML_1{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();

String[] queryPaths_tFileInputXML_1 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"	
	,"PathStorage"		
	,"PathStorage"+"/@xsi:nil"	
	,"SMTPHost"		
	,"SMTPHost"+"/@xsi:nil"	
	,"SMTPPort"		
	,"SMTPPort"+"/@xsi:nil"	
	,"UsernameMail"		
	,"UsernameMail"+"/@xsi:nil"	
	,"PasswordMail"		
	,"PasswordMail"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_1 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_1 = "";
String[] node_tFileInputXML_1 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_1 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_1,asXMLs_tFileInputXML_1);
looper_tFileInputXML_1.setEncoding("UTF-8");
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_1 instanceof java.io.InputStream){
	looper_tFileInputXML_1.parse((java.io.InputStream)filename_tFileInputXML_1);
}else{
	looper_tFileInputXML_1.parse(String.valueOf(filename_tFileInputXML_1));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_1  = looper_tFileInputXML_1.iterator();
while (it_tFileInputXML_1.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_1 = it_tFileInputXML_1.next();
	if (nb_line_tFileInputXML_1>=50) {
	
			looper_tFileInputXML_1.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row1 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row1 = new row1Struct();
	try{
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Host");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Host =null;
									}else{
		row1.Host = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Port");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Port =null;
									}else{
		row1.Port = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Sid");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Sid =null;
									}else{
		row1.Sid = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("ServiceName");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.ServiceName =null;
									}else{
		row1.ServiceName = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Schema");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Schema =null;
									}else{
		row1.Schema = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("User");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.User =null;
									}else{
		row1.User = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("Password");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.Password =null;
									}else{
		row1.Password = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PathStorage");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PathStorage"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PathStorage =null;
									}else{
		row1.PathStorage = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPHost");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPHost"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPHost =null;
									}else{
		row1.SMTPHost = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("SMTPPort");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("SMTPPort"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.SMTPPort =null;
									}else{
		row1.SMTPPort = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("UsernameMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("UsernameMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.UsernameMail =null;
									}else{
		row1.UsernameMail = str_tFileInputXML_1;
	}
	str_tFileInputXML_1 = row_tFileInputXML_1.get("PasswordMail");
	node_tFileInputXML_1 = new String[]{str_tFileInputXML_1,row_tFileInputXML_1.get("PasswordMail"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row1.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row1.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row1.PasswordMail =null;
									}else{
		row1.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row1 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row1"
if(row1 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row1.Host;
context.db_origen_Port = row1.Port;
context.db_origen_ServiceName = row1.ServiceName;
context.db_origen_Schema = row1.Schema;
context.db_origen_Login = row1.User;
context.db_origen_Password = row1.Password;
context.PathStorage = row1.PathStorage;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");


System.out.println("- Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);
System.out.println("- Port: "+context.db_origen_Port);
System.out.println("- PDB: "+context.db_origen_Server);
    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row1"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


	}
	try {
		looper_tFileInputXML_1.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class XML_API_tFileInputXML_2{
	public boolean isDefNull(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0] != null && node[1]!=null && ("true").equals(node[1])){
        	return true;
        }
        return false;
    }

    public boolean isMissing(String[] node) throws javax.xml.transform.TransformerException {
        return node[0] == null ? true : false;
    }

    public boolean isEmpty(String[] node) throws javax.xml.transform.TransformerException {
        if(node[0]!=null ){
        	return node[0].length() == 0;
        }
        return false;
    }
}
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();

String[] queryPaths_tFileInputXML_2 = new String[]{	
	"Host"		
	,"Host"+"/@xsi:nil"	
	,"Port"		
	,"Port"+"/@xsi:nil"	
	,"Sid"		
	,"Sid"+"/@xsi:nil"	
	,"ServiceName"		
	,"ServiceName"+"/@xsi:nil"	
	,"Schema"		
	,"Schema"+"/@xsi:nil"	
	,"User"		
	,"User"+"/@xsi:nil"	
	,"Password"		
	,"Password"+"/@xsi:nil"
};

boolean[] asXMLs_tFileInputXML_2 = new boolean[]{	
	false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false	
	,false		
	,false
};

String str_tFileInputXML_2 = "";
String[] node_tFileInputXML_2 = null;
org.talend.xml.sax.SAXLooper looper_tFileInputXML_2 = new org.talend.xml.sax.SAXLooper("/connectionStrings",queryPaths_tFileInputXML_2,asXMLs_tFileInputXML_2);
looper_tFileInputXML_2.setEncoding("UTF-8");
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.DESTINO;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}
if(filename_tFileInputXML_2 instanceof java.io.InputStream){
	looper_tFileInputXML_2.parse((java.io.InputStream)filename_tFileInputXML_2);
}else{
	looper_tFileInputXML_2.parse(String.valueOf(filename_tFileInputXML_2));
}
java.util.Iterator<java.util.Map<String, String>> it_tFileInputXML_2  = looper_tFileInputXML_2.iterator();
while (it_tFileInputXML_2.hasNext()) {
	java.util.Map<String, String> row_tFileInputXML_2 = it_tFileInputXML_2.next();
	if (nb_line_tFileInputXML_2>=50) {
	
			looper_tFileInputXML_2.stopRead();
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row23 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row23 = new row23Struct();
	try{
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Host");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Host"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Host =null;
									}else{
		row23.Host = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Port");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Port"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Port =null;
									}else{
		row23.Port = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Sid");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Sid"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Sid =null;
									}else{
		row23.Sid = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("ServiceName");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("ServiceName"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.ServiceName =null;
									}else{
		row23.ServiceName = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Schema");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Schema"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Schema =null;
									}else{
		row23.Schema = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("User");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("User"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.User =null;
									}else{
		row23.User = str_tFileInputXML_2;
	}
	str_tFileInputXML_2 = row_tFileInputXML_2.get("Password");
	node_tFileInputXML_2 = new String[]{str_tFileInputXML_2,row_tFileInputXML_2.get("Password"+"/@xsi:nil")};
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row23.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row23.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row23.Password =null;
									}else{
		row23.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row23 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row23"
if(row23 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_destino_Server = row23.Host;
context.db_destino_Port = row23.Port;
context.db_destino_ServiceName = row23.ServiceName;
context.db_destino_Schema = row23.Schema;
context.db_destino_Login = row23.User;
context.db_destino_Password = row23.Password;

//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");


System.out.println("- Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);
System.out.println("- Port: "+context.db_origen_Port);
System.out.println("- PDB: "+context.db_origen_Server);
    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row23"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


	}
	try {
		looper_tFileInputXML_2.handleTaskResponse();
	} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
		if(!(e.getCause() instanceof org.talend.xml.sax.exception.EnoughDataException))
	
		
		System.err.println(e.getMessage());	
	
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tOracleInput_1Process(globalMap);



/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public void tDie_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_1", false);
		start_Hash.put("tDie_1", System.currentTimeMillis());
		
	
	currentComponent="tDie_1";
	
	
		int tos_count_tDie_1 = 0;
		

 



/**
 * [tDie_1 begin ] stop
 */
	
	/**
	 * [tDie_1 main ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

	try {
	globalMap.put("tDie_1_DIE_PRIORITY", 5);
	System.err.println("Fail connection");
	
	globalMap.put("tDie_1_DIE_MESSAGE", "Fail connection");
	globalMap.put("tDie_1_DIE_MESSAGES", "Fail connection");
	
	} catch (Exception | Error e_tDie_1) {
	    globalMap.put("tDie_1_ERROR_MESSAGE",e_tDie_1.getMessage());
		logIgnoredError(String.format("tDie_1 - tDie failed to log message due to internal error: %s", e_tDie_1), e_tDie_1);
	}
	
	currentComponent = "tDie_1";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_1_DIE_CODE", errorCode);

    
	

	
	
	System.exit(4);

 


	tos_count_tDie_1++;

/**
 * [tDie_1 main ] stop
 */
	
	/**
	 * [tDie_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_begin ] stop
 */
	
	/**
	 * [tDie_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 process_data_end ] stop
 */
	
	/**
	 * [tDie_1 end ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 

ok_Hash.put("tDie_1", true);
end_Hash.put("tDie_1", System.currentTimeMillis());




/**
 * [tDie_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_1 finally ] start
	 */

	

	
	
	currentComponent="tDie_1";
	
	

 



/**
 * [tDie_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_1_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableRow<row9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ESTABLECIMIENTOID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CODIGO = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ESTABLECIMIENTOID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
					this.NOMBRE = readString(dis);
					
					this.CODIGO = readString(dis);
					
						this.FUERZA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ESTABLECIMIENTOID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTABLECIMIENTOID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.CODIGO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT \n	U.ID AS EstablecimientoId, \n	U. SIGLA, \n	U.NOMBRE,\n	U.CODIGO,\n	U.FUERZA_ID\nFROM GEN_UORG U\nINNER JOIN G"
+"EN_TUORG T ON T.ID = U.TUORG_ID AND T.ESTREGISTRO_ID = 1\nWHERE (T.NOMBRE = 'ESM' OR T.NOMBRE = 'SATELITE' )\nAND U.ESTR"
+"EGISTRO_ID = 1\nAND U.ESTADO = 'Activo'";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row9.ESTABLECIMIENTOID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row9.ESTABLECIMIENTOID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row9.SIGLA = null;
							} else {
	                         		
        	row9.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row9.NOMBRE = null;
							} else {
	                         		
        	row9.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row9.CODIGO = null;
							} else {
	                         		
        	row9.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row9.FUERZA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(5) != null) {
						row9.FUERZA_ID = rs_tOracleInput_1.getBigDecimal(5);
					} else {
				
						row9.FUERZA_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					



    
		row9Struct oneRow_tHashOutput_1 = new row9Struct();
				
					oneRow_tHashOutput_1.ESTABLECIMIENTOID = row9.ESTABLECIMIENTOID;
					oneRow_tHashOutput_1.SIGLA = row9.SIGLA;
					oneRow_tHashOutput_1.NOMBRE = row9.NOMBRE;
					oneRow_tHashOutput_1.CODIGO = row9.CODIGO;
					oneRow_tHashOutput_1.FUERZA_ID = row9.FUERZA_ID;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleInput_2Process(globalMap);



/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row11Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "select 	\n	tf.id, \n	tf.nombre, \n	tf.sigla\nfrom gen_tformulas tf\nwhere tf.estregistro_id = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row11.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row11.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row11.NOMBRE = null;
							} else {
	                         		
        	row11.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_2 < 3) {
								row11.SIGLA = null;
							} else {
	                         		
        	row11.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 3, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					



    
		row11Struct oneRow_tHashOutput_2 = new row11Struct();
				
					oneRow_tHashOutput_2.ID = row11.ID;
					oneRow_tHashOutput_2.NOMBRE = row11.NOMBRE;
					oneRow_tHashOutput_2.SIGLA = row11.SIGLA;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tOracleInput_4Process(globalMap);



/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String CODIGO_CUM;

				public String getCODIGO_CUM () {
					return this.CODIGO_CUM;
				}

				public Boolean CODIGO_CUMIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CUMIsKey(){
				    return false;
				}
				public Integer CODIGO_CUMLength(){
				    return 50;
				}
				public Integer CODIGO_CUMPrecision(){
				    return 0;
				}
				public String CODIGO_CUMDefault(){
				
					return null;
				
				}
				public String CODIGO_CUMComment(){
				
				    return "";
				
				}
				public String CODIGO_CUMPattern(){
				
					return "";
				
				}
				public String CODIGO_CUMOriginalDbColumnName(){
				
					return "CODIGO_CUM";
				
				}

				
			    public String COMERCIAL;

				public String getCOMERCIAL () {
					return this.COMERCIAL;
				}

				public Boolean COMERCIALIsNullable(){
				    return true;
				}
				public Boolean COMERCIALIsKey(){
				    return false;
				}
				public Integer COMERCIALLength(){
				    return 150;
				}
				public Integer COMERCIALPrecision(){
				    return 0;
				}
				public String COMERCIALDefault(){
				
					return null;
				
				}
				public String COMERCIALComment(){
				
				    return "";
				
				}
				public String COMERCIALPattern(){
				
					return "";
				
				}
				public String COMERCIALOriginalDbColumnName(){
				
					return "COMERCIAL";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO_CUM = readString(dis);
					
					this.COMERCIAL = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO_CUM = readString(dis);
					
					this.COMERCIAL = readString(dis);
					
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_CUM,dos);
					
					// String
				
						writeString(this.COMERCIAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_CUM,dos);
					
					// String
				
						writeString(this.COMERCIAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO_CUM="+CODIGO_CUM);
		sb.append(",COMERCIAL="+COMERCIAL);
		sb.append(",ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT  \nDP.EXPEDIENTECUM  AS CODIGO_CUM,\nP.COMERCIAL,\nP.ID\nFROM MED_PRODUCTOS P\nLEFT JOIN MED_DPRODUCTOS DP     O"
+"N DP.PRODUCTOS_ID = P.ID     AND DP.ESTREGISTRO_ID = 1\nINNER JOIN MED_FORMASFARMACEUTICAS F    ON F.ID = P.FORMASFARMAC"
+"EUTICAS_ID     AND F.ESTREGISTRO_ID = 1\nINNER JOIN MED_TFORMASFARMACEUTICAS MTF      ON MTF.ID = F.TFORMASFARMACEUTICAS"
+"_ID\nINNER JOIN MED_GENERICOS G     ON G.ID = F.GENERICOS_ID     AND G.ESTREGISTRO_ID = 1\nLEFT JOIN MED_DACUERDOSFORMAS"
+" DAF     ON DAF.FORMASFARMACEUTICAS_ID = P.FORMASFARMACEUTICAS_ID     AND DAF.ESTADO = 'Activo'     AND DAF.ESTREGISTRO_"
+"ID = 1\nLEFT JOIN MED_DACUERDOS DA     ON DA.ID = DAF.DACUERDOS_ID     AND DA.ESTADO = 'Activo'     AND DA.ESTREGISTRO_I"
+"D = 1\nINNER JOIN MED_DPRODUCTOS MP     ON P.ID = MP.PRODUCTOS_ID     AND MP.ESTREGISTRO_ID = 1\nLEFT JOIN MED_DCONTRATO"
+"S MDC     ON MDC.PRODUCTOS_ID = P.ID     AND MDC.ESTREGISTRO_ID = 1\nLEFT JOIN MED_HDCONTRATOS MHD     ON MHD.DCONTRATOS"
+"_ID = MDC.ID     AND MHD.ESTREGISTRO_ID = 1\nWHERE P.ESTREGISTRO_ID = 1\n\nUNION ALL\n\nSELECT  \nDP.EXPEDIENTECUM || CA"
+"SE WHEN DP.CONSECUTIVOCUM IS NULL THEN NULL \n                         WHEN DP.CONSECUTIVOCUM < 10 THEN '-' || TO_CHAR(D"
+"P.CONSECUTIVOCUM)\n                         ELSE '-' || DP.CONSECUTIVOCUM\n                          END AS CODIGO_CUM,"
+"\nP.COMERCIAL,\nP.ID\nFROM MED_PRODUCTOS P\nINNER JOIN MED_DPRODUCTOS DP     ON DP.PRODUCTOS_ID = P.ID     AND DP.ESTREGI"
+"STRO_ID = 1\nINNER JOIN MED_FORMASFARMACEUTICAS F    ON F.ID = P.FORMASFARMACEUTICAS_ID     AND F.ESTREGISTRO_ID = 1\nIN"
+"NER JOIN MED_TFORMASFARMACEUTICAS MTF      ON MTF.ID = F.TFORMASFARMACEUTICAS_ID\nINNER JOIN MED_GENERICOS G     ON G.ID"
+" = F.GENERICOS_ID     AND G.ESTREGISTRO_ID = 1\nLEFT JOIN MED_DACUERDOSFORMAS DAF     ON DAF.FORMASFARMACEUTICAS_ID = P."
+"FORMASFARMACEUTICAS_ID     AND DAF.ESTADO = 'Activo'     AND DAF.ESTREGISTRO_ID = 1\nLEFT JOIN MED_DACUERDOS DA     ON D"
+"A.ID = DAF.DACUERDOS_ID     AND DA.ESTADO = 'Activo'     AND DA.ESTREGISTRO_ID = 1\nINNER JOIN MED_DPRODUCTOS MP     ON "
+"P.ID = MP.PRODUCTOS_ID     AND MP.ESTREGISTRO_ID = 1\nLEFT JOIN MED_DCONTRATOS MDC     ON MDC.PRODUCTOS_ID = P.ID     AN"
+"D MDC.ESTREGISTRO_ID = 1\nLEFT JOIN MED_HDCONTRATOS MHD     ON MHD.DCONTRATOS_ID = MDC.ID     AND MHD.ESTREGISTRO_ID = 1"
+"\nWHERE P.ESTREGISTRO_ID = 1\nAND DP.CONSECUTIVOCUM IS NOT NULL";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row12.CODIGO_CUM = null;
							} else {
	                         		
        	row12.CODIGO_CUM = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row12.COMERCIAL = null;
							} else {
	                         		
        	row12.COMERCIAL = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_4 < 3) {
								row12.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(3) != null) {
						row12.ID = rs_tOracleInput_4.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					



    
		row12Struct oneRow_tHashOutput_3 = new row12Struct();
				
					oneRow_tHashOutput_3.CODIGO_CUM = row12.CODIGO_CUM;
					oneRow_tHashOutput_3.COMERCIAL = row12.COMERCIAL;
					oneRow_tHashOutput_3.ID = row12.ID;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tOracleInput_5Process(globalMap);



/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String CONSECUTIVO;

				public String getCONSECUTIVO () {
					return this.CONSECUTIVO;
				}

				public Boolean CONSECUTIVOIsNullable(){
				    return true;
				}
				public Boolean CONSECUTIVOIsKey(){
				    return false;
				}
				public Integer CONSECUTIVOLength(){
				    return 500;
				}
				public Integer CONSECUTIVOPrecision(){
				    return 0;
				}
				public String CONSECUTIVODefault(){
				
					return null;
				
				}
				public String CONSECUTIVOComment(){
				
				    return "";
				
				}
				public String CONSECUTIVOPattern(){
				
					return "";
				
				}
				public String CONSECUTIVOOriginalDbColumnName(){
				
					return "CONSECUTIVO";
				
				}

				
			    public BigDecimal PRODUCTO_ID;

				public BigDecimal getPRODUCTO_ID () {
					return this.PRODUCTO_ID;
				}

				public Boolean PRODUCTO_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTO_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTO_IDLength(){
				    return 0;
				}
				public Integer PRODUCTO_IDPrecision(){
				    return null;
				}
				public String PRODUCTO_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTO_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTO_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTO_IDOriginalDbColumnName(){
				
					return "PRODUCTO_ID";
				
				}

				
			    public String PRODUCTO_COMERCIAL;

				public String getPRODUCTO_COMERCIAL () {
					return this.PRODUCTO_COMERCIAL;
				}

				public Boolean PRODUCTO_COMERCIALIsNullable(){
				    return true;
				}
				public Boolean PRODUCTO_COMERCIALIsKey(){
				    return false;
				}
				public Integer PRODUCTO_COMERCIALLength(){
				    return 500;
				}
				public Integer PRODUCTO_COMERCIALPrecision(){
				    return 0;
				}
				public String PRODUCTO_COMERCIALDefault(){
				
					return null;
				
				}
				public String PRODUCTO_COMERCIALComment(){
				
				    return "";
				
				}
				public String PRODUCTO_COMERCIALPattern(){
				
					return "";
				
				}
				public String PRODUCTO_COMERCIALOriginalDbColumnName(){
				
					return "PRODUCTO_COMERCIAL";
				
				}

				
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 40;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTO_ID;

				public BigDecimal getTDOCUMENTO_ID () {
					return this.TDOCUMENTO_ID;
				}

				public Boolean TDOCUMENTO_IDIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTO_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTO_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTO_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTO_IDDefault(){
				
					return "";
				
				}
				public String TDOCUMENTO_IDComment(){
				
				    return "";
				
				}
				public String TDOCUMENTO_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTO_IDOriginalDbColumnName(){
				
					return "TDOCUMENTO_ID";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CONSECUTIVO = readString(dis);
					
						this.PRODUCTO_ID = (BigDecimal) dis.readObject();
					
					this.PRODUCTO_COMERCIAL = readString(dis);
					
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTO_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CONSECUTIVO = readString(dis);
					
						this.PRODUCTO_ID = (BigDecimal) dis.readObject();
					
					this.PRODUCTO_COMERCIAL = readString(dis);
					
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTO_ID = (BigDecimal) dis.readObject();
					
					this.TDOCUMENTO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTO_ID);
					
					// String
				
						writeString(this.PRODUCTO_COMERCIAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTO_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTO_ID);
					
					// String
				
						writeString(this.PRODUCTO_COMERCIAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTO_ID);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONSECUTIVO="+CONSECUTIVO);
		sb.append(",PRODUCTO_ID="+String.valueOf(PRODUCTO_ID));
		sb.append(",PRODUCTO_COMERCIAL="+PRODUCTO_COMERCIAL);
		sb.append(",PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTO_ID="+String.valueOf(TDOCUMENTO_ID));
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row13Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "select mc.consecutivo,  \n       mc.productos_id as producto_id, \n       mc.comercial as producto_comercial,\n       p"
+"e.id as persona_id, \n       pe.documento, \n       td.id as tdocumento_id, \n       td.nombre as tdocumento\nfrom hcl_m"
+"edicamentosctc mc\ninner join hcl_formmedicas fm\n    on fm.id = mc.formmedicasid\n    and fm.estregistro_id = 1\ninner "
+"join hcl_procesosasistenciales pa\n    on pa.id = fm.procesosasistenciales_id\n    and pa.estregistro_id = 1\ninner join"
+" gen_personas pe\n    on pe.id = pa.personas_id\n    and pe.estregistro_id = 1\ninner join gen_tdocumentos td\n    on td"
+".id = pe.tdocumentos_id\n    and td.estregistro_id = 1\nwhere mc.estregistro_id = 1\nand mc.estado = 'Aprobada'\nand mc."
+"consecutivo is not null";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row13.CONSECUTIVO = null;
							} else {
	                         		
        	row13.CONSECUTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row13.PRODUCTO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(2) != null) {
						row13.PRODUCTO_ID = rs_tOracleInput_5.getBigDecimal(2);
					} else {
				
						row13.PRODUCTO_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 3) {
								row13.PRODUCTO_COMERCIAL = null;
							} else {
	                         		
        	row13.PRODUCTO_COMERCIAL = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 4) {
								row13.PERSONA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(4) != null) {
						row13.PERSONA_ID = rs_tOracleInput_5.getBigDecimal(4);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 5) {
								row13.DOCUMENTO = null;
							} else {
	                         		
        	row13.DOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_5 < 6) {
								row13.TDOCUMENTO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(6) != null) {
						row13.TDOCUMENTO_ID = rs_tOracleInput_5.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 7) {
								row13.TDOCUMENTO = null;
							} else {
	                         		
        	row13.TDOCUMENTO = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 7, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					



    
		row13Struct oneRow_tHashOutput_4 = new row13Struct();
				
					oneRow_tHashOutput_4.CONSECUTIVO = row13.CONSECUTIVO;
					oneRow_tHashOutput_4.PRODUCTO_ID = row13.PRODUCTO_ID;
					oneRow_tHashOutput_4.PRODUCTO_COMERCIAL = row13.PRODUCTO_COMERCIAL;
					oneRow_tHashOutput_4.PERSONA_ID = row13.PERSONA_ID;
					oneRow_tHashOutput_4.DOCUMENTO = row13.DOCUMENTO;
					oneRow_tHashOutput_4.TDOCUMENTO_ID = row13.TDOCUMENTO_ID;
					oneRow_tHashOutput_4.TDOCUMENTO = row13.TDOCUMENTO;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tOracleInput_6Process(globalMap);



/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableRow<row14Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String COMERCIAL;

				public String getCOMERCIAL () {
					return this.COMERCIAL;
				}

				public Boolean COMERCIALIsNullable(){
				    return true;
				}
				public Boolean COMERCIALIsKey(){
				    return false;
				}
				public Integer COMERCIALLength(){
				    return 150;
				}
				public Integer COMERCIALPrecision(){
				    return 0;
				}
				public String COMERCIALDefault(){
				
					return null;
				
				}
				public String COMERCIALComment(){
				
				    return "";
				
				}
				public String COMERCIALPattern(){
				
					return "";
				
				}
				public String COMERCIALOriginalDbColumnName(){
				
					return "COMERCIAL";
				
				}

				
			    public String CODBARRAS;

				public String getCODBARRAS () {
					return this.CODBARRAS;
				}

				public Boolean CODBARRASIsNullable(){
				    return true;
				}
				public Boolean CODBARRASIsKey(){
				    return false;
				}
				public Integer CODBARRASLength(){
				    return 20;
				}
				public Integer CODBARRASPrecision(){
				    return 0;
				}
				public String CODBARRASDefault(){
				
					return null;
				
				}
				public String CODBARRASComment(){
				
				    return "";
				
				}
				public String CODBARRASPattern(){
				
					return "";
				
				}
				public String CODBARRASOriginalDbColumnName(){
				
					return "CODBARRAS";
				
				}

				
			    public BigDecimal LABORATORIO;

				public BigDecimal getLABORATORIO () {
					return this.LABORATORIO;
				}

				public Boolean LABORATORIOIsNullable(){
				    return true;
				}
				public Boolean LABORATORIOIsKey(){
				    return false;
				}
				public Integer LABORATORIOLength(){
				    return 0;
				}
				public Integer LABORATORIOPrecision(){
				    return null;
				}
				public String LABORATORIODefault(){
				
					return "";
				
				}
				public String LABORATORIOComment(){
				
				    return "";
				
				}
				public String LABORATORIOPattern(){
				
					return "";
				
				}
				public String LABORATORIOOriginalDbColumnName(){
				
					return "LABORATORIO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.COMERCIAL = readString(dis);
					
					this.CODBARRAS = readString(dis);
					
						this.LABORATORIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.COMERCIAL = readString(dis);
					
					this.CODBARRAS = readString(dis);
					
						this.LABORATORIO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.COMERCIAL,dos);
					
					// String
				
						writeString(this.CODBARRAS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.LABORATORIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.COMERCIAL,dos);
					
					// String
				
						writeString(this.CODBARRAS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.LABORATORIO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",COMERCIAL="+COMERCIAL);
		sb.append(",CODBARRAS="+CODBARRAS);
		sb.append(",LABORATORIO="+String.valueOf(LABORATORIO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row14Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "select pr.id, pr.comercial, pr.codbarras, pr.importador as laboratorio from med_productos pr where pr.estregistro_id = "
+"1";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row14.ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row14.ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row14.COMERCIAL = null;
							} else {
	                         		
        	row14.COMERCIAL = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row14.CODBARRAS = null;
							} else {
	                         		
        	row14.CODBARRAS = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row14.LABORATORIO = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(4) != null) {
						row14.LABORATORIO = rs_tOracleInput_6.getBigDecimal(4);
					} else {
				
						row14.LABORATORIO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					



    
		row14Struct oneRow_tHashOutput_7 = new row14Struct();
				
					oneRow_tHashOutput_7.ID = row14.ID;
					oneRow_tHashOutput_7.COMERCIAL = row14.COMERCIAL;
					oneRow_tHashOutput_7.CODBARRAS = row14.CODBARRAS;
					oneRow_tHashOutput_7.LABORATORIO = row14.LABORATORIO;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tOracleInput_7Process(globalMap);



/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableRow<row15Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return false;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 350;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				
			    public String CONCENTRACION;

				public String getCONCENTRACION () {
					return this.CONCENTRACION;
				}

				public Boolean CONCENTRACIONIsNullable(){
				    return true;
				}
				public Boolean CONCENTRACIONIsKey(){
				    return false;
				}
				public Integer CONCENTRACIONLength(){
				    return 50;
				}
				public Integer CONCENTRACIONPrecision(){
				    return 0;
				}
				public String CONCENTRACIONDefault(){
				
					return null;
				
				}
				public String CONCENTRACIONComment(){
				
				    return "";
				
				}
				public String CONCENTRACIONPattern(){
				
					return "";
				
				}
				public String CONCENTRACIONOriginalDbColumnName(){
				
					return "CONCENTRACION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
					this.CONCENTRACION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
					// String
				
						writeString(this.CONCENTRACION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
		sb.append(",CONCENTRACION="+CONCENTRACION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tHashOutput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_9", false);
		start_Hash.put("tHashOutput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tHashOutput_9 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row15Struct> tHashFile_tHashOutput_9 = null;
		String hashKey_tHashOutput_9 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_9";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_9)){
			    if(mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9) == null){
	      		    mf_tHashOutput_9.getResourceMap().put(hashKey_tHashOutput_9, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row15Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }else{
			    	tHashFile_tHashOutput_9 = mf_tHashOutput_9.getResourceMap().get(hashKey_tHashOutput_9);
			    }
			}
        int nb_line_tHashOutput_9 = 0;

 



/**
 * [tHashOutput_9 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "select ge.id, ge.descripcion, ge.concentracion from med_genericos ge where ge.estregistro_id = 1";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row15.ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row15.ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row15.DESCRIPCION = null;
							} else {
	                         		
        	row15.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row15.CONCENTRACION = null;
							} else {
	                         		
        	row15.CONCENTRACION = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_9 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					



    
		row15Struct oneRow_tHashOutput_9 = new row15Struct();
				
					oneRow_tHashOutput_9.ID = row15.ID;
					oneRow_tHashOutput_9.DESCRIPCION = row15.DESCRIPCION;
					oneRow_tHashOutput_9.CONCENTRACION = row15.CONCENTRACION;
		
        tHashFile_tHashOutput_9.put(oneRow_tHashOutput_9);
        nb_line_tHashOutput_9 ++;

 


	tos_count_tHashOutput_9++;

/**
 * [tHashOutput_9 main ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tOracleInput_8Process(globalMap);



/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tHashOutput_9 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	
globalMap.put("tHashOutput_9_NB_LINE", nb_line_tHashOutput_9);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tHashOutput_9", true);
end_Hash.put("tHashOutput_9", System.currentTimeMillis());




/**
 * [tHashOutput_9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tHashOutput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_9";
	
	

 



/**
 * [tHashOutput_9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tHashOutput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_10", false);
		start_Hash.put("tHashOutput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tHashOutput_10 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct> tHashFile_tHashOutput_10 = null;
		String hashKey_tHashOutput_10 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_10";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_10)){
			    if(mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10) == null){
	      		    mf_tHashOutput_10.getResourceMap().put(hashKey_tHashOutput_10, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }else{
			    	tHashFile_tHashOutput_10 = mf_tHashOutput_10.getResourceMap().get(hashKey_tHashOutput_10);
			    }
			}
        int nb_line_tHashOutput_10 = 0;

 



/**
 * [tHashOutput_10 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_8.setFetchSize(1000);


		    String dbquery_tOracleInput_8 = "select \n	td.id, \n	td.nombre, \n	upper(td.sigla) as sigla \nfrom gen_tdocumentos td \nwhere td.estregistro_id = 1";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row25.ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row25.ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row25.NOMBRE = null;
							} else {
	                         		
        	row25.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row25.SIGLA = null;
							} else {
	                         		
        	row25.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 3, false);
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_10 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					



    
		row25Struct oneRow_tHashOutput_10 = new row25Struct();
				
					oneRow_tHashOutput_10.ID = row25.ID;
					oneRow_tHashOutput_10.NOMBRE = row25.NOMBRE;
					oneRow_tHashOutput_10.SIGLA = row25.SIGLA;
		
        tHashFile_tHashOutput_10.put(oneRow_tHashOutput_10);
        nb_line_tHashOutput_10 ++;

 


	tos_count_tHashOutput_10++;

/**
 * [tHashOutput_10 main ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tOracleInput_11Process(globalMap);



/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tHashOutput_10 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	
globalMap.put("tHashOutput_10_NB_LINE", nb_line_tHashOutput_10);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tHashOutput_10", true);
end_Hash.put("tHashOutput_10", System.currentTimeMillis());




/**
 * [tHashOutput_10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_10";
	
	

 



/**
 * [tHashOutput_10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row50Struct implements routines.system.IPersistableRow<row50Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int ID;

				public int getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.ID = dis.readInt();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row50Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row50Struct row50 = new row50Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row50");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_11.setFetchSize(1000);


		    String dbquery_tOracleInput_11 = "SELECT \nID, SIGLA\n FROM AFI_ESTADOS";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row50.ID = 0;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row50.ID = rs_tOracleInput_11.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row50.SIGLA = null;
							} else {
	                         		
        	row50.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 2, false);
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row50"
						
						);
					}
					

    switch(row50.SIGLA){
	case "AC":
		context.EstAfiliacionActivo = row50.ID;
		//System.out.println(context.estActivo);
		break;
	case "IN":
		context.EstAfiliaicionInactivo = row50.ID;
		//System.out.println(context.estInactivo);
		break;
	case "PR":
		context.EstAfiliacionProvisional = row50.ID;
		//System.out.println(context.estEnProceso);
		break;
	
}
    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk16", 0, "ok");
				}
				tOracleInput_12Process(globalMap);



/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row50");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());




/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row51Struct implements routines.system.IPersistableRow<row51Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row51Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row51Struct row51 = new row51Struct();




	
	/**
	 * [tJavaRow_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_6", false);
		start_Hash.put("tJavaRow_6", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row51");
					}
				
		int tos_count_tJavaRow_6 = 0;
		

int nb_line_tJavaRow_6 = 0;

 



/**
 * [tJavaRow_6 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_12.setFetchSize(1000);


		    String dbquery_tOracleInput_12 = "SELECT ID, SIGLA FROM ACM_TARCHIVOS WHERE SIGLA IN ('RACF')";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row51.ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row51.ID = rs_tOracleInput_12.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row51.SIGLA = null;
							} else {
	                         		
        	row51.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 2, false);
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_6 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row51"
						
						);
					}
					

    switch(row51.SIGLA){
	case "RACF":
		context.TipoRespuesta = row51.ID;
		//System.out.println(context.estActivo);
		break;
	
	
}
    nb_line_tJavaRow_6++;   

 


	tos_count_tJavaRow_6++;

/**
 * [tJavaRow_6 main ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tOracleInput_9Process(globalMap);



/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tJavaRow_6 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

globalMap.put("tJavaRow_6_NB_LINE",nb_line_tJavaRow_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row51");
			  	}
			  	
 

ok_Hash.put("tJavaRow_6", true);
end_Hash.put("tJavaRow_6", System.currentTimeMillis());




/**
 * [tJavaRow_6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tJavaRow_6 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_6";
	
	

 



/**
 * [tJavaRow_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return true;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return null;
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CODIGO;

				public Integer getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return null;
				}
				public Integer CODIGOPrecision(){
				    return null;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CODIGO = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+String.valueOf(CODIGO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_9.setFetchSize(1000);


		    String dbquery_tOracleInput_9 = "SELECT \n	AE.ID AS ID, \n	AE.CODIGO AS CODIGO \nFROM AFI_ESTEXTDERECHOS AE \nWHERE AE.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row16.ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row16.ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
						row16.ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row16.CODIGO = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(2) != null) {
						row16.CODIGO = rs_tOracleInput_9.getInt(2);
					} else {
				
						row16.CODIGO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

    //Code generate according to input schema and output schema
switch(row16.CODIGO){
	case 1:
		context.estActivo = row16.ID;
		//System.out.println(context.estActivo);
		break;
	case 2:
		context.estInactivo = row16.ID;
		//System.out.println(context.estInactivo);
		break;
	case 5:
		context.estEnProceso = row16.ID;
		//System.out.println(context.estEnProceso);
		break;
	case 6:
		context.estProcesado = row16.ID;
		//System.out.println(context.estProcesado);
		break;
	case 8:
		context.estErrorProcesamiento = row16.ID;
		//System.out.println(context.estErrorProcesamiento);
		break;
	case 7:
		context.estErrorArchivo = row16.ID;
		//System.out.println(context.estErrorArchivo);
		break;
    case 9:
		context.EstArchivoPCE = row16.ID;
		//System.out.println(context.estErrorArchivo);
		break;
    case 10:
		context.EstValidado = row16.ID;
		//System.out.println(context.estErrorArchivo);
		break;
}
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk18", 0, "ok");
				}
				tOracleInput_15Process(globalMap);



/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHashOutput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_11", false);
		start_Hash.put("tHashOutput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_11 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_11 = null;
		String hashKey_tHashOutput_11 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_11";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_11)){
			    if(mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11) == null){
	      		    mf_tHashOutput_11.getResourceMap().put(hashKey_tHashOutput_11, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }else{
			    	tHashFile_tHashOutput_11 = mf_tHashOutput_11.getResourceMap().get(hashKey_tHashOutput_11);
			    }
			}
        int nb_line_tHashOutput_11 = 0;

 



/**
 * [tHashOutput_11 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_15.setFetchSize(1000);


		    String dbquery_tOracleInput_15 = "SELECT CIE.ID, CIE.CODIGO\nFROM GEN_CIE10 CIE\nWHERE CIE.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row4.ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row4.ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row4.CODIGO = null;
							} else {
	                         		
        	row4.CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 2, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_11 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_11 = new row4Struct();
				
					oneRow_tHashOutput_11.ID = row4.ID;
					oneRow_tHashOutput_11.CODIGO = row4.CODIGO;
		
        tHashFile_tHashOutput_11.put(oneRow_tHashOutput_11);
        nb_line_tHashOutput_11 ++;

 


	tos_count_tHashOutput_11++;

/**
 * [tHashOutput_11 main ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tOracleInput_14Process(globalMap);



/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tHashOutput_11 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	
globalMap.put("tHashOutput_11_NB_LINE", nb_line_tHashOutput_11);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_11", true);
end_Hash.put("tHashOutput_11", System.currentTimeMillis());




/**
 * [tHashOutput_11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tHashOutput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_11";
	
	

 



/**
 * [tHashOutput_11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_101061\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo de origen";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "1";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "FK - GEN_ESTREGISTRO (Estado del Registro)";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla para el registro del tipo de Origen";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tHashOutput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_13", false);
		start_Hash.put("tHashOutput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tHashOutput_13 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashOutput_13 = null;
		String hashKey_tHashOutput_13 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_13";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_13)){
			    if(mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13) == null){
	      		    mf_tHashOutput_13.getResourceMap().put(hashKey_tHashOutput_13, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }else{
			    	tHashFile_tHashOutput_13 = mf_tHashOutput_13.getResourceMap().get(hashKey_tHashOutput_13);
			    }
			}
        int nb_line_tHashOutput_13 = 0;

 



/**
 * [tHashOutput_13 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				String driverClass_tOracleInput_14 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_14);
				
			String url_tOracleInput_14 = null;
				url_tOracleInput_14 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_14 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_14 = context.db_origen_Password; 

				String dbPwd_tOracleInput_14 = decryptedPassword_tOracleInput_14;

				
					java.util.Properties atnParamsPrope_tOracleInput_14 = new java.util.Properties();
					atnParamsPrope_tOracleInput_14.put("user",dbUser_tOracleInput_14);
					atnParamsPrope_tOracleInput_14.put("password",dbPwd_tOracleInput_14);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_14.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_14 = java.sql.DriverManager.getConnection(url_tOracleInput_14, atnParamsPrope_tOracleInput_14);
				java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_14.next()) {
					sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
				}
                                if (!(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                                }
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement();

		    String dbquery_tOracleInput_14 = "SELECT \n  "+context.db_origen_Schema+".RCA_TORIGEN.\"ID\", \n  "+context.db_origen_Schema+".RCA_TORIGEN.NOMBRE, \n  "+context.db_origen_Schema+".RCA_TORIGEN.ESTREGISTRO_ID, \n  "+context.db_origen_Schema+".RCA_TORIGEN.SIGLA\nFROM "+context.db_origen_Schema+".RCA_TORIGEN";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row22.ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row22.ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row22.NOMBRE = null;
							} else {
	                         		
        	row22.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_14 < 3) {
								row22.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(3) != null) {
						row22.ESTREGISTRO_ID = rs_tOracleInput_14.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 4) {
								row22.SIGLA = null;
							} else {
	                         		
        	row22.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 4, false);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_13 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					



    
		row22Struct oneRow_tHashOutput_13 = new row22Struct();
				
					oneRow_tHashOutput_13.ID = row22.ID;
					oneRow_tHashOutput_13.NOMBRE = row22.NOMBRE;
					oneRow_tHashOutput_13.ESTREGISTRO_ID = row22.ESTREGISTRO_ID;
					oneRow_tHashOutput_13.SIGLA = row22.SIGLA;
		
        tHashFile_tHashOutput_13.put(oneRow_tHashOutput_13);
        nb_line_tHashOutput_13 ++;

 


	tos_count_tHashOutput_13++;

/**
 * [tHashOutput_13 main ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
	if(conn_tOracleInput_14 != null && !conn_tOracleInput_14.isClosed()) {
	
			conn_tOracleInput_14.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tOracleInput_16Process(globalMap);



/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tHashOutput_13 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	
globalMap.put("tHashOutput_13_NB_LINE", nb_line_tHashOutput_13);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tHashOutput_13", true);
end_Hash.put("tHashOutput_13", System.currentTimeMillis());




/**
 * [tHashOutput_13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tHashOutput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_13";
	
	

 



/**
 * [tHashOutput_13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableRow<row28Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100510\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave Primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo de formula";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "1";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "FK - GEN_ESTREGISTRO";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla del tipo de formula";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.ID = this.ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
						this.ESTREGISTRO_ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTREGISTRO_ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tHashOutput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_14", false);
		start_Hash.put("tHashOutput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tHashOutput_14 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashOutput_14 = null;
		String hashKey_tHashOutput_14 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_14";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_14)){
			    if(mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14) == null){
	      		    mf_tHashOutput_14.getResourceMap().put(hashKey_tHashOutput_14, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }else{
			    	tHashFile_tHashOutput_14 = mf_tHashOutput_14.getResourceMap().get(hashKey_tHashOutput_14);
			    }
			}
        int nb_line_tHashOutput_14 = 0;

 



/**
 * [tHashOutput_14 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				String driverClass_tOracleInput_16 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_16);
				
			String url_tOracleInput_16 = null;
				url_tOracleInput_16 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_16 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_16 = context.db_origen_Password; 

				String dbPwd_tOracleInput_16 = decryptedPassword_tOracleInput_16;

				
					java.util.Properties atnParamsPrope_tOracleInput_16 = new java.util.Properties();
					atnParamsPrope_tOracleInput_16.put("user",dbUser_tOracleInput_16);
					atnParamsPrope_tOracleInput_16.put("password",dbPwd_tOracleInput_16);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_16.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_16 = java.sql.DriverManager.getConnection(url_tOracleInput_16, atnParamsPrope_tOracleInput_16);
				java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_16.next()) {
					sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
				}
                                if (!(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                                }
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement();

		    String dbquery_tOracleInput_16 = "SELECT \n  "+context.db_origen_Schema+".GEN_TFORMULAS.\"ID\", \n  "+context.db_origen_Schema+".GEN_TFORMULAS.NOMBRE, \n  "+context.db_origen_Schema+".GEN_TFORMULAS.ESTREGISTRO_ID, \n  "+context.db_origen_Schema+".GEN_TFORMULAS.SIGLA\nFROM "+context.db_origen_Schema+".GEN_TFORMULAS";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row28.ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row28.ID = rs_tOracleInput_16.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row28.NOMBRE = null;
							} else {
	                         		
        	row28.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_16 < 3) {
								row28.ESTREGISTRO_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(3) != null) {
						row28.ESTREGISTRO_ID = rs_tOracleInput_16.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 4) {
								row28.SIGLA = null;
							} else {
	                         		
        	row28.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 4, false);
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_14 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					



    
		row28Struct oneRow_tHashOutput_14 = new row28Struct();
				
					oneRow_tHashOutput_14.ID = row28.ID;
					oneRow_tHashOutput_14.NOMBRE = row28.NOMBRE;
					oneRow_tHashOutput_14.ESTREGISTRO_ID = row28.ESTREGISTRO_ID;
					oneRow_tHashOutput_14.SIGLA = row28.SIGLA;
		
        tHashFile_tHashOutput_14.put(oneRow_tHashOutput_14);
        nb_line_tHashOutput_14 ++;

 


	tos_count_tHashOutput_14++;

/**
 * [tHashOutput_14 main ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
	if(conn_tOracleInput_16 != null && !conn_tOracleInput_16.isClosed()) {
	
			conn_tOracleInput_16.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tOracleInput_17Process(globalMap);



/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tHashOutput_14 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	
globalMap.put("tHashOutput_14_NB_LINE", nb_line_tHashOutput_14);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tHashOutput_14", true);
end_Hash.put("tHashOutput_14", System.currentTimeMillis());




/**
 * [tHashOutput_14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tHashOutput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_14";
	
	

 



/**
 * [tHashOutput_14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row31Struct row31 = new row31Struct();




	
	/**
	 * [tJavaRow_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_8", false);
		start_Hash.put("tJavaRow_8", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tJavaRow_8 = 0;
		

int nb_line_tJavaRow_8 = 0;

 



/**
 * [tJavaRow_8 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				String driverClass_tOracleInput_17 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_17);
				
			String url_tOracleInput_17 = null;
				url_tOracleInput_17 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_17 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_17 = context.db_origen_Password; 

				String dbPwd_tOracleInput_17 = decryptedPassword_tOracleInput_17;

				
					java.util.Properties atnParamsPrope_tOracleInput_17 = new java.util.Properties();
					atnParamsPrope_tOracleInput_17.put("user",dbUser_tOracleInput_17);
					atnParamsPrope_tOracleInput_17.put("password",dbPwd_tOracleInput_17);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_17.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_17 = java.sql.DriverManager.getConnection(url_tOracleInput_17, atnParamsPrope_tOracleInput_17);
				java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_17.next()) {
					sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
				}
                                if (!(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                                }
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement();

		    String dbquery_tOracleInput_17 = "SELECT ID,NOMBRE FROM ACM_ESTAUDITORIAS";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row31.ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(1) != null) {
						row31.ID = rs_tOracleInput_17.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row31.NOMBRE = null;
							} else {
	                         		
        	row31.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 2, false);
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_8 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

    //Code generate according to input schema and output schema

switch(row31.NOMBRE){
	case "Sin iniciar":
		context.SinInniciar = row31.ID;
		//System.out.println(context.estActivo);
		break;
	case "Iniciada":
		context.Iniciada = row31.ID;
		//System.out.println(context.estInactivo);
		break;
	case "Cerrada":
		context.Cerrada = row31.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Editando":
		context.Editando = row31.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Editada":
		context.Editada = row31.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Finalizada":
		context.Finalizada = row31.ID;
		//System.out.println(context.estEnProceso);
		break;
	case "Manual":
		context.Manual = row31.ID;
		//System.out.println(context.estEnProceso);
		break;
}
    nb_line_tJavaRow_8++;   

 


	tos_count_tJavaRow_8++;

/**
 * [tJavaRow_8 main ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
	if(conn_tOracleInput_17 != null && !conn_tOracleInput_17.isClosed()) {
	
			conn_tOracleInput_17.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tJavaRow_8 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

globalMap.put("tJavaRow_8_NB_LINE",nb_line_tJavaRow_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tJavaRow_8", true);
end_Hash.put("tJavaRow_8", System.currentTimeMillis());




/**
 * [tJavaRow_8 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_17:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk9", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tJavaRow_8 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_8";
	
	

 



/**
 * [tJavaRow_8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return true;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return null;
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return false;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return 0;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public String GUID;

				public String getGUID () {
					return this.GUID;
				}

				public Boolean GUIDIsNullable(){
				    return true;
				}
				public Boolean GUIDIsKey(){
				    return false;
				}
				public Integer GUIDLength(){
				    return 100;
				}
				public Integer GUIDPrecision(){
				    return 0;
				}
				public String GUIDDefault(){
				
					return null;
				
				}
				public String GUIDComment(){
				
				    return "";
				
				}
				public String GUIDPattern(){
				
					return "";
				
				}
				public String GUIDOriginalDbColumnName(){
				
					return "GUID";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 0;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal TARCHIVOS_ID;

				public BigDecimal getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return null;
				}
				public String TARCHIVOS_IDDefault(){
				
					return "";
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public String TARCHIVOS_NOMBRE;

				public String getTARCHIVOS_NOMBRE () {
					return this.TARCHIVOS_NOMBRE;
				}

				public Boolean TARCHIVOS_NOMBREIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_NOMBREIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_NOMBRELength(){
				    return 2000;
				}
				public Integer TARCHIVOS_NOMBREPrecision(){
				    return 0;
				}
				public String TARCHIVOS_NOMBREDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_NOMBREComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_NOMBREPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_NOMBREOriginalDbColumnName(){
				
					return "TARCHIVOS_NOMBRE";
				
				}

				
			    public String TARCHIVOS_SIGLA;

				public String getTARCHIVOS_SIGLA () {
					return this.TARCHIVOS_SIGLA;
				}

				public Boolean TARCHIVOS_SIGLAIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_SIGLAIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_SIGLALength(){
				    return 20;
				}
				public Integer TARCHIVOS_SIGLAPrecision(){
				    return 0;
				}
				public String TARCHIVOS_SIGLADefault(){
				
					return null;
				
				}
				public String TARCHIVOS_SIGLAComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_SIGLAPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_SIGLAOriginalDbColumnName(){
				
					return "TARCHIVOS_SIGLA";
				
				}

				
			    public Integer BANDERA;

				public Integer getBANDERA () {
					return this.BANDERA;
				}

				public Boolean BANDERAIsNullable(){
				    return true;
				}
				public Boolean BANDERAIsKey(){
				    return false;
				}
				public Integer BANDERALength(){
				    return null;
				}
				public Integer BANDERAPrecision(){
				    return null;
				}
				public String BANDERADefault(){
				
					return null;
				
				}
				public String BANDERAComment(){
				
				    return "";
				
				}
				public String BANDERAPattern(){
				
					return "";
				
				}
				public String BANDERAOriginalDbColumnName(){
				
					return "BANDERA";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return null;
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal MEDCONTRATOS_ID;

				public BigDecimal getMEDCONTRATOS_ID () {
					return this.MEDCONTRATOS_ID;
				}

				public Boolean MEDCONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean MEDCONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer MEDCONTRATOS_IDLength(){
				    return null;
				}
				public Integer MEDCONTRATOS_IDPrecision(){
				    return null;
				}
				public String MEDCONTRATOS_IDDefault(){
				
					return null;
				
				}
				public String MEDCONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String MEDCONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDOriginalDbColumnName(){
				
					return "MEDCONTRATOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.GUID = readString(dis);
					
					this.PERIODO = readDate(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.TARCHIVOS_NOMBRE = readString(dis);
					
					this.TARCHIVOS_SIGLA = readString(dis);
					
						this.BANDERA = readInteger(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.GUID = readString(dis);
					
					this.PERIODO = readDate(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.TARCHIVOS_NOMBRE = readString(dis);
					
					this.TARCHIVOS_SIGLA = readString(dis);
					
						this.BANDERA = readInteger(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.GUID,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TARCHIVOS_ID);
					
					// String
				
						writeString(this.TARCHIVOS_NOMBRE,dos);
					
					// String
				
						writeString(this.TARCHIVOS_SIGLA,dos);
					
					// Integer
				
						writeInteger(this.BANDERA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.GUID,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TARCHIVOS_ID);
					
					// String
				
						writeString(this.TARCHIVOS_NOMBRE,dos);
					
					// String
				
						writeString(this.TARCHIVOS_SIGLA,dos);
					
					// Integer
				
						writeInteger(this.BANDERA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",GUID="+GUID);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",TARCHIVOS_NOMBRE="+TARCHIVOS_NOMBRE);
		sb.append(",TARCHIVOS_SIGLA="+TARCHIVOS_SIGLA);
		sb.append(",BANDERA="+String.valueOf(BANDERA));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",MEDCONTRATOS_ID="+String.valueOf(MEDCONTRATOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public Integer ESTADO;

				public Integer getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return true;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return null;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return null;
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return false;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return 0;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return "";
				
				}
				public String DCARGUE_IDComment(){
				
				    return "";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return "";
				
				}
				public String RECEPCION_IDComment(){
				
				    return "";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public String GUID;

				public String getGUID () {
					return this.GUID;
				}

				public Boolean GUIDIsNullable(){
				    return true;
				}
				public Boolean GUIDIsKey(){
				    return false;
				}
				public Integer GUIDLength(){
				    return 100;
				}
				public Integer GUIDPrecision(){
				    return 0;
				}
				public String GUIDDefault(){
				
					return null;
				
				}
				public String GUIDComment(){
				
				    return "";
				
				}
				public String GUIDPattern(){
				
					return "";
				
				}
				public String GUIDOriginalDbColumnName(){
				
					return "GUID";
				
				}

				
			    public java.util.Date PERIODO;

				public java.util.Date getPERIODO () {
					return this.PERIODO;
				}

				public Boolean PERIODOIsNullable(){
				    return true;
				}
				public Boolean PERIODOIsKey(){
				    return false;
				}
				public Integer PERIODOLength(){
				    return 0;
				}
				public Integer PERIODOPrecision(){
				    return 0;
				}
				public String PERIODODefault(){
				
					return null;
				
				}
				public String PERIODOComment(){
				
				    return "";
				
				}
				public String PERIODOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIODOOriginalDbColumnName(){
				
					return "PERIODO";
				
				}

				
			    public BigDecimal TARCHIVOS_ID;

				public BigDecimal getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return null;
				}
				public String TARCHIVOS_IDDefault(){
				
					return "";
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public String TARCHIVOS_NOMBRE;

				public String getTARCHIVOS_NOMBRE () {
					return this.TARCHIVOS_NOMBRE;
				}

				public Boolean TARCHIVOS_NOMBREIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_NOMBREIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_NOMBRELength(){
				    return 2000;
				}
				public Integer TARCHIVOS_NOMBREPrecision(){
				    return 0;
				}
				public String TARCHIVOS_NOMBREDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_NOMBREComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_NOMBREPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_NOMBREOriginalDbColumnName(){
				
					return "TARCHIVOS_NOMBRE";
				
				}

				
			    public String TARCHIVOS_SIGLA;

				public String getTARCHIVOS_SIGLA () {
					return this.TARCHIVOS_SIGLA;
				}

				public Boolean TARCHIVOS_SIGLAIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_SIGLAIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_SIGLALength(){
				    return 20;
				}
				public Integer TARCHIVOS_SIGLAPrecision(){
				    return 0;
				}
				public String TARCHIVOS_SIGLADefault(){
				
					return null;
				
				}
				public String TARCHIVOS_SIGLAComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_SIGLAPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_SIGLAOriginalDbColumnName(){
				
					return "TARCHIVOS_SIGLA";
				
				}

				
			    public Integer BANDERA;

				public Integer getBANDERA () {
					return this.BANDERA;
				}

				public Boolean BANDERAIsNullable(){
				    return true;
				}
				public Boolean BANDERAIsKey(){
				    return false;
				}
				public Integer BANDERALength(){
				    return null;
				}
				public Integer BANDERAPrecision(){
				    return null;
				}
				public String BANDERADefault(){
				
					return null;
				
				}
				public String BANDERAComment(){
				
				    return "";
				
				}
				public String BANDERAPattern(){
				
					return "";
				
				}
				public String BANDERAOriginalDbColumnName(){
				
					return "BANDERA";
				
				}

				
			    public BigDecimal CONTRATOS_ID;

				public BigDecimal getCONTRATOS_ID () {
					return this.CONTRATOS_ID;
				}

				public Boolean CONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean CONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer CONTRATOS_IDLength(){
				    return null;
				}
				public Integer CONTRATOS_IDPrecision(){
				    return null;
				}
				public String CONTRATOS_IDDefault(){
				
					return null;
				
				}
				public String CONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String CONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String CONTRATOS_IDOriginalDbColumnName(){
				
					return "CONTRATOS_ID";
				
				}

				
			    public BigDecimal MEDCONTRATOS_ID;

				public BigDecimal getMEDCONTRATOS_ID () {
					return this.MEDCONTRATOS_ID;
				}

				public Boolean MEDCONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean MEDCONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer MEDCONTRATOS_IDLength(){
				    return null;
				}
				public Integer MEDCONTRATOS_IDPrecision(){
				    return null;
				}
				public String MEDCONTRATOS_IDDefault(){
				
					return null;
				
				}
				public String MEDCONTRATOS_IDComment(){
				
				    return "";
				
				}
				public String MEDCONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDOriginalDbColumnName(){
				
					return "MEDCONTRATOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return null;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.GUID = readString(dis);
					
					this.PERIODO = readDate(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.TARCHIVOS_NOMBRE = readString(dis);
					
					this.TARCHIVOS_SIGLA = readString(dis);
					
						this.BANDERA = readInteger(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ESTADO = readInteger(dis);
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
					this.GUID = readString(dis);
					
					this.PERIODO = readDate(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.TARCHIVOS_NOMBRE = readString(dis);
					
					this.TARCHIVOS_SIGLA = readString(dis);
					
						this.BANDERA = readInteger(dis);
					
						this.CONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.GUID,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TARCHIVOS_ID);
					
					// String
				
						writeString(this.TARCHIVOS_NOMBRE,dos);
					
					// String
				
						writeString(this.TARCHIVOS_SIGLA,dos);
					
					// Integer
				
						writeInteger(this.BANDERA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// Integer
				
						writeInteger(this.ESTADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// String
				
						writeString(this.GUID,dos);
					
					// java.util.Date
				
						writeDate(this.PERIODO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TARCHIVOS_ID);
					
					// String
				
						writeString(this.TARCHIVOS_NOMBRE,dos);
					
					// String
				
						writeString(this.TARCHIVOS_SIGLA,dos);
					
					// Integer
				
						writeInteger(this.BANDERA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTADO="+String.valueOf(ESTADO));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",GUID="+GUID);
		sb.append(",PERIODO="+String.valueOf(PERIODO));
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",TARCHIVOS_NOMBRE="+TARCHIVOS_NOMBRE);
		sb.append(",TARCHIVOS_SIGLA="+TARCHIVOS_SIGLA);
		sb.append(",BANDERA="+String.valueOf(BANDERA));
		sb.append(",CONTRATOS_ID="+String.valueOf(CONTRATOS_ID));
		sb.append(",MEDCONTRATOS_ID="+String.valueOf(MEDCONTRATOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();
row19Struct row19 = new row19Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tFixedFlowInput_2 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = "SELECT \naes.CODIGO AS ESTADO,\n    dc.PRESTADOR_ID,\n    dc.id as dcargue_id,\n    dc.recepcion_id,\n	dc.guid, \n	dc.p"
+"eriodo, \n	dc.tarchivos_id, \n	ta.nombre as tarchivos_nombre, \n    ta.sigla as tarchivos_sigla,\n    CASE \n    WHEN dc"
+".PRESTADOR_ID = DC.UORG_ID THEN 1\n    ELSE 2 END AS BANDERA,\n    nvl(RE.CONTRATOS_ID,0) as CONTRATOS_ID,\n    NVL(RE.M"
+"EDCONTRATOS_ID,0) AS MEDCONTRATOS_ID,\n    RE.UORG_ID, \n    RE.USUARIOS_ID\nFROM ACM_DCARGUE dc\nINNER JOIN ACM_RECEPCI"
+"ON RE ON RE.ID = DC.RECEPCION_ID\nINNER JOIN ACM_TARCHIVOS ta ON dc.tarchivos_id = ta.id\nINNER JOIN AFI_ESTEXTDERECHOS "
+"aes ON aes.id = dc.estadocargue_id\nWHERE dc.ESTREGISTRO_ID = 1 \nAND ta.sigla = 'ADFM' \nAND aes.CODIGO  IN ( '1')\nAND"
+" DC.ID = "+context.DCARGUE_ID+"\nORDER BY dc.id"
;
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row5.ESTADO = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row5.ESTADO = rs_tOracleInput_3.getInt(1);
					} else {
				
						row5.ESTADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row5.PRESTADOR_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row5.PRESTADOR_ID = rs_tOracleInput_3.getBigDecimal(2);
					} else {
				
						row5.PRESTADOR_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row5.DCARGUE_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(3) != null) {
						row5.DCARGUE_ID = rs_tOracleInput_3.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 4) {
								row5.RECEPCION_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(4) != null) {
						row5.RECEPCION_ID = rs_tOracleInput_3.getBigDecimal(4);
					} else {
				
						row5.RECEPCION_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 5) {
								row5.GUID = null;
							} else {
	                         		
        	row5.GUID = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 6) {
								row5.PERIODO = null;
							} else {
										
			row5.PERIODO = routines.system.JDBCUtil.getDate(rs_tOracleInput_3, 6);
		                    }
							if(colQtyInRs_tOracleInput_3 < 7) {
								row5.TARCHIVOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(7) != null) {
						row5.TARCHIVOS_ID = rs_tOracleInput_3.getBigDecimal(7);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 8) {
								row5.TARCHIVOS_NOMBRE = null;
							} else {
	                         		
        	row5.TARCHIVOS_NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 9) {
								row5.TARCHIVOS_SIGLA = null;
							} else {
	                         		
        	row5.TARCHIVOS_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 9, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 10) {
								row5.BANDERA = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(10) != null) {
						row5.BANDERA = rs_tOracleInput_3.getInt(10);
					} else {
				
						row5.BANDERA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 11) {
								row5.CONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(11) != null) {
						row5.CONTRATOS_ID = rs_tOracleInput_3.getBigDecimal(11);
					} else {
				
						row5.CONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 12) {
								row5.MEDCONTRATOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(12) != null) {
						row5.MEDCONTRATOS_ID = rs_tOracleInput_3.getBigDecimal(12);
					} else {
				
						row5.MEDCONTRATOS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 13) {
								row5.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(13) != null) {
						row5.UORG_ID = rs_tOracleInput_3.getBigDecimal(13);
					} else {
				
						row5.UORG_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 14) {
								row5.USUARIOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(14) != null) {
						row5.USUARIOS_ID = rs_tOracleInput_3.getBigDecimal(14);
					} else {
				
						row5.USUARIOS_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


    	            
            globalMap.put("row5.ESTADO", row5.ESTADO);
    	            
            globalMap.put("row5.PRESTADOR_ID", row5.PRESTADOR_ID);
    	            
            globalMap.put("row5.DCARGUE_ID", row5.DCARGUE_ID);
    	            
            globalMap.put("row5.RECEPCION_ID", row5.RECEPCION_ID);
    	            
            globalMap.put("row5.GUID", row5.GUID);
    	            
            globalMap.put("row5.PERIODO", row5.PERIODO);
    	            
            globalMap.put("row5.TARCHIVOS_ID", row5.TARCHIVOS_ID);
    	            
            globalMap.put("row5.TARCHIVOS_NOMBRE", row5.TARCHIVOS_NOMBRE);
    	            
            globalMap.put("row5.TARCHIVOS_SIGLA", row5.TARCHIVOS_SIGLA);
    	            
            globalMap.put("row5.BANDERA", row5.BANDERA);
    	            
            globalMap.put("row5.CONTRATOS_ID", row5.CONTRATOS_ID);
    	            
            globalMap.put("row5.MEDCONTRATOS_ID", row5.MEDCONTRATOS_ID);
    	            
            globalMap.put("row5.UORG_ID", row5.UORG_ID);
    	            
            globalMap.put("row5.USUARIOS_ID", row5.USUARIOS_ID);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tFixedFlowInput_2++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row36", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row80", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row81", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row88", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row87", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("INS", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row84", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row26", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row46", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row35", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row44", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row33", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row85", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row46", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row35", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("Recepcion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row41", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row47", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfout9_0", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row40", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row38", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row20", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("error_esm_dispensacion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("error_esm_formulacion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("copyOfSalida_0", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row39", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row42", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row40", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row43", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row38", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row39", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row24", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row41", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("error_esm_adscrito", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row36", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tFixedFlowInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("error_esm_facturacion", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row30", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row82", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row86", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row42", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row47", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row87", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row21", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnRowsEnd", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row32", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row37", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentError1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row45", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("out9", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row86", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row34", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row27", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row29", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("after_tHashInput_4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnSubjobOk8", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tFixedFlowInput_2);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row19.ESTADO = row5.ESTADO;
    	            	        	            	
    	            		row19.PRESTADOR_ID = row5.PRESTADOR_ID;
    	            	        	            	
    	            		row19.DCARGUE_ID = row5.DCARGUE_ID;
    	            	        	            	
    	            		row19.RECEPCION_ID = row5.RECEPCION_ID;
    	            	        	            	
    	            		row19.GUID = row5.GUID;
    	            	        	            	
    	            		row19.PERIODO = row5.PERIODO;
    	            	        	            	
    	            		row19.TARCHIVOS_ID = row5.TARCHIVOS_ID;
    	            	        	            	
    	            		row19.TARCHIVOS_NOMBRE = row5.TARCHIVOS_NOMBRE;
    	            	        	            	
    	            		row19.TARCHIVOS_SIGLA = row5.TARCHIVOS_SIGLA;
    	            	        	            	
    	            		row19.BANDERA = row5.BANDERA;
    	            	        	            	
    	            		row19.CONTRATOS_ID = row5.CONTRATOS_ID;
    	            	        	            	
    	            		row19.MEDCONTRATOS_ID = row5.MEDCONTRATOS_ID;
    	            	        	            	
    	            		row19.UORG_ID = row5.UORG_ID;
    	            	        	            	
    	            		row19.USUARIOS_ID = row5.USUARIOS_ID;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					

    //Code generate according to input schema and output schema

context.EstadoArchivo = row19.ESTADO;
context.PRESTADOR = row19.PRESTADOR_ID;
context.vArchivo_Id = row19.DCARGUE_ID;
context.vRecepcionId = row19.RECEPCION_ID;
context.vNombreArchivo = row19.GUID;
context.vPeriodo = row19.PERIODO;
context.vIdTipoArchivo = row19.TARCHIVOS_ID;
context.vNombreTipoArchivo = row19.TARCHIVOS_NOMBRE;
context.vTipoArchivoSigla = row19.TARCHIVOS_SIGLA;
context.BANDERA = row19.BANDERA;
context.HORA = TalendDate.getCurrentDate().getHours();
context.USUARIOS_ID = row19.USUARIOS_ID;
context.UORG_ID = row19.UORG_ID;
context.contador = 2;

if (row19.CONTRATOS_ID == null) {
	context.CONTRATOS_ID = new BigDecimal(0);
}
else {
	context.CONTRATOS_ID = row19.CONTRATOS_ID;
}

if (row19.MEDCONTRATOS_ID == null) {
	context.CONTRATOS_ID = new BigDecimal(0);
}
else {
	context.MEDCONTRATOS_ID = row19.MEDCONTRATOS_ID;
}

//context.archivoSalida = GenerarUuid.createUUID();
context.archivoSalida = "Archivo_errores";
System.out.println(" - " + context.PRESTADOR);
System.out.println(" - " + context.vNombreArchivo);
System.out.println(" - " + context.vPeriodo);
System.out.println(" - " + context.vRecepcionId);
System.out.println(" - " + context.HORA);
System.out.println(" - " + context.vTipoArchivoSigla);
System.out.println(" - " + context.ESTADO);
System.out.println(" - " + context.PathStorage +"\\"+ context.vNombreArchivo);
System.out.println(" - " + context.DCARGUE_ID);
System.out.println(" Estado " + context.estEnProceso);
    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

   			if (context.vNombreArchivo != null && context.vNombreArchivo.equals("") == false) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tFixedFlowInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (context.vTipoArchivoSigla.equals("ADFM") ) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tFileInputDelimited_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}
   			if (context.vNombreArchivo == null || context.vNombreArchivo.equals("") == true) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tFixedFlowInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}



/**
 * [tJavaRow_3 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tFixedFlowInput_2);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableRow<row10Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal DCARGUE_ID_;

				public BigDecimal getDCARGUE_ID_ () {
					return this.DCARGUE_ID_;
				}

				public Boolean DCARGUE_ID_IsNullable(){
				    return true;
				}
				public Boolean DCARGUE_ID_IsKey(){
				    return false;
				}
				public Integer DCARGUE_ID_Length(){
				    return null;
				}
				public Integer DCARGUE_ID_Precision(){
				    return null;
				}
				public String DCARGUE_ID_Default(){
				
					return null;
				
				}
				public String DCARGUE_ID_Comment(){
				
				    return "";
				
				}
				public String DCARGUE_ID_Pattern(){
				
					return "";
				
				}
				public String DCARGUE_ID_OriginalDbColumnName(){
				
					return "DCARGUE_ID_";
				
				}

				
			    public BigDecimal ESTADO_ID_;

				public BigDecimal getESTADO_ID_ () {
					return this.ESTADO_ID_;
				}

				public Boolean ESTADO_ID_IsNullable(){
				    return true;
				}
				public Boolean ESTADO_ID_IsKey(){
				    return false;
				}
				public Integer ESTADO_ID_Length(){
				    return null;
				}
				public Integer ESTADO_ID_Precision(){
				    return null;
				}
				public String ESTADO_ID_Default(){
				
					return null;
				
				}
				public String ESTADO_ID_Comment(){
				
				    return "";
				
				}
				public String ESTADO_ID_Pattern(){
				
					return "";
				
				}
				public String ESTADO_ID_OriginalDbColumnName(){
				
					return "ESTADO_ID_";
				
				}

				
			    public String SPROC_;

				public String getSPROC_ () {
					return this.SPROC_;
				}

				public Boolean SPROC_IsNullable(){
				    return true;
				}
				public Boolean SPROC_IsKey(){
				    return false;
				}
				public Integer SPROC_Length(){
				    return null;
				}
				public Integer SPROC_Precision(){
				    return null;
				}
				public String SPROC_Default(){
				
					return null;
				
				}
				public String SPROC_Comment(){
				
				    return "";
				
				}
				public String SPROC_Pattern(){
				
					return "";
				
				}
				public String SPROC_OriginalDbColumnName(){
				
					return "SPROC_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DCARGUE_ID_="+String.valueOf(DCARGUE_ID_));
		sb.append(",ESTADO_ID_="+String.valueOf(ESTADO_ID_));
		sb.append(",SPROC_="+SPROC_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tOracleSP_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_2", false);
		start_Hash.put("tOracleSP_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tOracleSP_2 = 0;
		

	java.sql.Connection connection_tOracleSP_2 = null;
	connection_tOracleSP_2 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_2 = connection_tOracleSP_2.prepareCall("{call " + "REP.UpdEstadoCargaArchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_2;
String tmpString_tOracleSP_2;

 



/**
 * [tOracleSP_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row10.DCARGUE_ID_ = context.vArchivo_Id;
    	            	        	            	
    	            		row10.ESTADO_ID_ = context.estEnProceso;
    	            	        	            	
    	            		row10.SPROC_ = "";
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_2 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					

			// code for the argument 1 (DCARGUE_ID_) of type 'IN AUTOMAPPING'
    					if (row10.DCARGUE_ID_ == null) {
    						statement_tOracleSP_2.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_2.setBigDecimal(1, row10.DCARGUE_ID_);
    					}
    					
			// code for the argument 2 (ESTADO_ID_) of type 'IN AUTOMAPPING'
    					if (row10.ESTADO_ID_ == null) {
    						statement_tOracleSP_2.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_2.setBigDecimal(2, row10.ESTADO_ID_);
    					}
    					
			// code for the argument 3 (SPROC_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_2.registerOutParameter(3, java.sql.Types.VARCHAR);
		statement_tOracleSP_2.execute();
		

 


	tos_count_tOracleSP_2++;

/**
 * [tOracleSP_2 main ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tOracleSP_2 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	


	statement_tOracleSP_2.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tOracleSP_2", true);
end_Hash.put("tOracleSP_2", System.currentTimeMillis());




/**
 * [tOracleSP_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tOracleSP_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_2";
	
	

 



/**
 * [tOracleSP_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tDie_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_3", false);
		start_Hash.put("tDie_3", System.currentTimeMillis());
		
	
	currentComponent="tDie_3";
	
	
		int tos_count_tDie_3 = 0;
		

 



/**
 * [tDie_3 begin ] stop
 */
	
	/**
	 * [tDie_3 main ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

	try {
	globalMap.put("tDie_3_DIE_PRIORITY", 5);
	System.err.println("ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	
	globalMap.put("tDie_3_DIE_MESSAGE", "ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	globalMap.put("tDie_3_DIE_MESSAGES", "ERROR: No fue posible actualizar el estado de procesamiento del archivo");
	
	} catch (Exception | Error e_tDie_3) {
	    globalMap.put("tDie_3_ERROR_MESSAGE",e_tDie_3.getMessage());
		logIgnoredError(String.format("tDie_3 - tDie failed to log message due to internal error: %s", e_tDie_3), e_tDie_3);
	}
	
	currentComponent = "tDie_3";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_3_DIE_CODE", errorCode);

    
	

	
	
	System.exit(4);

 


	tos_count_tDie_3++;

/**
 * [tDie_3 main ] stop
 */
	
	/**
	 * [tDie_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 process_data_begin ] stop
 */
	
	/**
	 * [tDie_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 process_data_end ] stop
 */
	
	/**
	 * [tDie_3 end ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 

ok_Hash.put("tDie_3", true);
end_Hash.put("tDie_3", System.currentTimeMillis());




/**
 * [tDie_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_3 finally ] start
	 */

	

	
	
	currentComponent="tDie_3";
	
	

 



/**
 * [tDie_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_3_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return null;
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return null;
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();
row24Struct row24 = new row24Struct();





	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.PathStorage+"/ACM/"+context.vNombreArchivo;
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.PathStorage+"/ACM/"+context.vNombreArchivo, "UTF-8",";","\n",true,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row6 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row6 = new row6Struct();
									try {
										
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
							row6.prefijo = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
							row6.numero_factura = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row6.fecha_factura = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row6.esm_formulacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
							row6.esm_dispensacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row6.esm_facturacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row6.esm_adscrito = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row6.fecha_formulacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row6.fecha_dispensacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row6.fecha_registro_dispensacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row6.tipo_documento = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row6.documento = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row6.tipificacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row6.consecutivo_formula = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row6.tirilla = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row6.tipo_formula = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row6.origen_formulacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row6.codigo_atc = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row6.codigo_cum = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row6.invima = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row6.codigo_cie10 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row6.lote = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row6.medico_codigo = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row6.medico_nombre = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row6.fecha_vencimiento = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row6.cantidad_solicitada = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row6.cantidad_despachada = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row6.cantidad_pendiente = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row6.dosis = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row6.frecuencia_horas = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row6.codigo_interno_servicio = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
							row6.valor_unitario = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							row6.subtotal = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row6.valor_total_adecuacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row6.valor_total_iva = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row6.valor_intermediacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row6.valor_total_iva_intermediacion = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row6.valor_total_medicamento = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row6.valor_total_factura = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1).trim();
						
				
				
				 	int filedsum = fid_tFileInputDelimited_1.getColumnsCountOfCurrentRow();
				 	if(filedsum < (39 )){
					 	throw new RuntimeException("Column(s) missing");
					 } else if(filedsum > (39 )) {
					 	throw new RuntimeException("Too many columns");
					 }     
				
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row6 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row6"
if(row6 != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					

    row24.contador = context.contador++;
row24.prefijo = row6.prefijo;
row24.numero_factura = row6.numero_factura;
row24.fecha_factura = row6.fecha_factura;
row24.esm_formulacion = row6.esm_formulacion;
row24.esm_dispensacion = row6.esm_dispensacion;
row24.esm_facturacion = row6.esm_facturacion;
row24.esm_adscrito = row6.esm_adscrito;
row24.fecha_formulacion = row6.fecha_formulacion;
row24.fecha_dispensacion = row6.fecha_dispensacion;
row24.fecha_registro_dispensacion = row6.fecha_registro_dispensacion;
row24.tipo_documento = row6.tipo_documento;
row24.documento = row6.documento;
row24.tipificacion = row6.tipificacion;
row24.consecutivo_formula = row6.consecutivo_formula;
row24.tirilla = row6.tirilla;
row24.tipo_formula = row6.tipo_formula;
row24.origen_formulacion = row6.origen_formulacion;
row24.codigo_atc = row6.codigo_atc;
row24.codigo_cum = row6.codigo_cum;
row24.invima = row6.invima;
row24.codigo_cie10 = row6.codigo_cie10;
row24.lote = row6.lote;
row24.medico_codigo = row6.medico_codigo;
row24.medico_nombre = row6.medico_nombre;
row24.fecha_vencimiento = row6.fecha_vencimiento;
row24.cantidad_solicitada = row6.cantidad_solicitada;
row24.cantidad_despachada = row6.cantidad_despachada;
row24.cantidad_pendiente = row6.cantidad_pendiente;
row24.dosis = row6.dosis;
row24.frecuencia_horas = row6.frecuencia_horas;
row24.codigo_interno_servicio = row6.codigo_interno_servicio;
row24.valor_unitario = row6.valor_unitario;
row24.subtotal = row6.subtotal;
row24.valor_total_adecuacion = row6.valor_total_adecuacion;
row24.valor_total_iva = row6.valor_total_iva;
row24.valor_intermediacion = row6.valor_intermediacion;
row24.valor_total_iva_intermediacion = row6.valor_total_iva_intermediacion;
row24.valor_total_medicamento = row6.valor_total_medicamento;
row24.valor_total_factura = row6.valor_total_factura;

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					



    
		row24Struct oneRow_tHashOutput_5 = new row24Struct();
				
					oneRow_tHashOutput_5.contador = row24.contador;
					oneRow_tHashOutput_5.prefijo = row24.prefijo;
					oneRow_tHashOutput_5.numero_factura = row24.numero_factura;
					oneRow_tHashOutput_5.fecha_factura = row24.fecha_factura;
					oneRow_tHashOutput_5.esm_formulacion = row24.esm_formulacion;
					oneRow_tHashOutput_5.esm_dispensacion = row24.esm_dispensacion;
					oneRow_tHashOutput_5.esm_facturacion = row24.esm_facturacion;
					oneRow_tHashOutput_5.esm_adscrito = row24.esm_adscrito;
					oneRow_tHashOutput_5.fecha_formulacion = row24.fecha_formulacion;
					oneRow_tHashOutput_5.fecha_dispensacion = row24.fecha_dispensacion;
					oneRow_tHashOutput_5.fecha_registro_dispensacion = row24.fecha_registro_dispensacion;
					oneRow_tHashOutput_5.tipo_documento = row24.tipo_documento;
					oneRow_tHashOutput_5.documento = row24.documento;
					oneRow_tHashOutput_5.tipificacion = row24.tipificacion;
					oneRow_tHashOutput_5.consecutivo_formula = row24.consecutivo_formula;
					oneRow_tHashOutput_5.tirilla = row24.tirilla;
					oneRow_tHashOutput_5.tipo_formula = row24.tipo_formula;
					oneRow_tHashOutput_5.origen_formulacion = row24.origen_formulacion;
					oneRow_tHashOutput_5.codigo_atc = row24.codigo_atc;
					oneRow_tHashOutput_5.codigo_cum = row24.codigo_cum;
					oneRow_tHashOutput_5.invima = row24.invima;
					oneRow_tHashOutput_5.codigo_cie10 = row24.codigo_cie10;
					oneRow_tHashOutput_5.lote = row24.lote;
					oneRow_tHashOutput_5.medico_codigo = row24.medico_codigo;
					oneRow_tHashOutput_5.medico_nombre = row24.medico_nombre;
					oneRow_tHashOutput_5.fecha_vencimiento = row24.fecha_vencimiento;
					oneRow_tHashOutput_5.cantidad_solicitada = row24.cantidad_solicitada;
					oneRow_tHashOutput_5.cantidad_despachada = row24.cantidad_despachada;
					oneRow_tHashOutput_5.cantidad_pendiente = row24.cantidad_pendiente;
					oneRow_tHashOutput_5.dosis = row24.dosis;
					oneRow_tHashOutput_5.frecuencia_horas = row24.frecuencia_horas;
					oneRow_tHashOutput_5.codigo_interno_servicio = row24.codigo_interno_servicio;
					oneRow_tHashOutput_5.valor_unitario = row24.valor_unitario;
					oneRow_tHashOutput_5.subtotal = row24.subtotal;
					oneRow_tHashOutput_5.valor_total_adecuacion = row24.valor_total_adecuacion;
					oneRow_tHashOutput_5.valor_total_iva = row24.valor_total_iva;
					oneRow_tHashOutput_5.valor_intermediacion = row24.valor_intermediacion;
					oneRow_tHashOutput_5.valor_total_iva_intermediacion = row24.valor_total_iva_intermediacion;
					oneRow_tHashOutput_5.valor_total_medicamento = row24.valor_total_medicamento;
					oneRow_tHashOutput_5.valor_total_factura = row24.valor_total_factura;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "row6"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)(context.PathStorage+"/ACM/"+context.vNombreArchivo) instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());




/**
 * [tJavaRow_4 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFileInputDelimited_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tFixedFlowInput_8Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return null;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row32Struct row32 = new row32Struct();




	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_8", false);
		start_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_8";
	
	
		int tos_count_tFixedFlowInput_8 = 0;
		

	    for (int i_tFixedFlowInput_8 = 0 ; i_tFixedFlowInput_8 < 1 ; i_tFixedFlowInput_8++) {
	                	            	
    	            		row32.error = "";
    	            	

 



/**
 * [tFixedFlowInput_8 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 


	tos_count_tFixedFlowInput_8++;

/**
 * [tFixedFlowInput_8 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					



    
		row32Struct oneRow_tHashOutput_6 = new row32Struct();
				
					oneRow_tHashOutput_6.error = row32.error;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_8 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

        }
        globalMap.put("tFixedFlowInput_8_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_8", true);
end_Hash.put("tFixedFlowInput_8", System.currentTimeMillis());




/**
 * [tFixedFlowInput_8 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_8:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk13", 0, "ok");
								} 
							
							tJava_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_8 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_8";
	
	

 



/**
 * [tFixedFlowInput_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_8_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


String foo = "bar";
 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

   			if (context.EstadoArchivo == 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tHashInput_1Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class out9Struct implements routines.system.IPersistableRow<out9Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return 0;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out9Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return "";
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_1Struct implements routines.system.IPersistableRow<after_tHashInput_1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return "";
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);

		row20Struct row20 = new row20Struct();
out9Struct out9 = new out9Struct();





	
	/**
	 * [tHashOutput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_15", false);
		start_Hash.put("tHashOutput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out9");
					}
				
		int tos_count_tHashOutput_15 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_15 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_15.getKeyMap().put("tHashFile_CargueMedicamentos_" +pid + "_tHashOutput_15", "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_6");
        int nb_line_tHashOutput_15 = 0;

 



/**
 * [tHashOutput_15 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out9Struct out9_tmp = new out9Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row24Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row20.contador = next_tHashInput_1.contador;
	row20.prefijo = next_tHashInput_1.prefijo;
	row20.numero_factura = next_tHashInput_1.numero_factura;
	row20.fecha_factura = next_tHashInput_1.fecha_factura;
	row20.esm_formulacion = next_tHashInput_1.esm_formulacion;
	row20.esm_dispensacion = next_tHashInput_1.esm_dispensacion;
	row20.esm_facturacion = next_tHashInput_1.esm_facturacion;
	row20.esm_adscrito = next_tHashInput_1.esm_adscrito;
	row20.fecha_formulacion = next_tHashInput_1.fecha_formulacion;
	row20.fecha_dispensacion = next_tHashInput_1.fecha_dispensacion;
	row20.fecha_registro_dispensacion = next_tHashInput_1.fecha_registro_dispensacion;
	row20.tipo_documento = next_tHashInput_1.tipo_documento;
	row20.documento = next_tHashInput_1.documento;
	row20.tipificacion = next_tHashInput_1.tipificacion;
	row20.consecutivo_formula = next_tHashInput_1.consecutivo_formula;
	row20.tirilla = next_tHashInput_1.tirilla;
	row20.tipo_formula = next_tHashInput_1.tipo_formula;
	row20.origen_formulacion = next_tHashInput_1.origen_formulacion;
	row20.codigo_atc = next_tHashInput_1.codigo_atc;
	row20.codigo_cum = next_tHashInput_1.codigo_cum;
	row20.invima = next_tHashInput_1.invima;
	row20.codigo_cie10 = next_tHashInput_1.codigo_cie10;
	row20.lote = next_tHashInput_1.lote;
	row20.medico_codigo = next_tHashInput_1.medico_codigo;
	row20.medico_nombre = next_tHashInput_1.medico_nombre;
	row20.fecha_vencimiento = next_tHashInput_1.fecha_vencimiento;
	row20.cantidad_solicitada = next_tHashInput_1.cantidad_solicitada;
	row20.cantidad_despachada = next_tHashInput_1.cantidad_despachada;
	row20.cantidad_pendiente = next_tHashInput_1.cantidad_pendiente;
	row20.dosis = next_tHashInput_1.dosis;
	row20.frecuencia_horas = next_tHashInput_1.frecuencia_horas;
	row20.codigo_interno_servicio = next_tHashInput_1.codigo_interno_servicio;
	row20.valor_unitario = next_tHashInput_1.valor_unitario;
	row20.subtotal = next_tHashInput_1.subtotal;
	row20.valor_total_adecuacion = next_tHashInput_1.valor_total_adecuacion;
	row20.valor_total_iva = next_tHashInput_1.valor_total_iva;
	row20.valor_intermediacion = next_tHashInput_1.valor_intermediacion;
	row20.valor_total_iva_intermediacion = next_tHashInput_1.valor_total_iva_intermediacion;
	row20.valor_total_medicamento = next_tHashInput_1.valor_total_medicamento;
	row20.valor_total_factura = next_tHashInput_1.valor_total_factura;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row21Struct row21 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row21HashKey.CODIGO_CUM = row20.codigo_cum ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row21.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out9 = null;

if(!rejectedInnerJoin_tMap_1 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'out9'
// # Filter conditions 
if( rejectedInnerJoin_tMap_1 ) {
out9_tmp.error = "Error en registro "+row20.contador+ " Columna 15 codigo CUMS: " + " Codigo CUMS no esta en el acuerdo. Valor ingresado: " + row20.codigo_cum ;
out9 = out9_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out9"
if(out9 != null) { 



	
	/**
	 * [tHashOutput_15 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out9"
						
						);
					}
					




		if(tHashFile_tHashOutput_15 == null){
			tHashFile_tHashOutput_15 = mf_tHashOutput_15.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
			mf_tHashOutput_15.getResourceMap().put("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_15", tHashFile_tHashOutput_15);
		}
		row32Struct oneRow_tHashOutput_15 = new row32Struct();
			oneRow_tHashOutput_15.error = out9.error;
        tHashFile_tHashOutput_15.put(oneRow_tHashOutput_15);
        nb_line_tHashOutput_15 ++;	

 


	tos_count_tHashOutput_15++;

/**
 * [tHashOutput_15 main ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 process_data_end ] stop
 */

} // End of branch "out9"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tHashOutput_15 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	
globalMap.put("tHashOutput_15_NB_LINE", nb_line_tHashOutput_15);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out9");
			  	}
			  	
 

ok_Hash.put("tHashOutput_15", true);
end_Hash.put("tHashOutput_15", System.currentTimeMillis());




/**
 * [tHashOutput_15 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tHashInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_15";
	
	

 



/**
 * [tHashOutput_15 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfout9_0Struct implements routines.system.IPersistableRow<copyOfout9_0Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return 0;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfout9_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return "";
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_11Struct implements routines.system.IPersistableRow<after_tHashInput_11Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return "";
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_9Process(globalMap);

		row17Struct row17 = new row17Struct();
copyOfout9_0Struct copyOfout9_0 = new copyOfout9_0Struct();





	
	/**
	 * [tHashOutput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_12", false);
		start_Hash.put("tHashOutput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfout9_0");
					}
				
		int tos_count_tHashOutput_12 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_12 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_12.getKeyMap().put("tHashFile_CargueMedicamentos_" +pid + "_tHashOutput_12", "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_6");
        int nb_line_tHashOutput_12 = 0;

 



/**
 * [tHashOutput_12 begin ] stop
 */



	
	/**
	 * [tMap_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_9", false);
		start_Hash.put("tMap_9", System.currentTimeMillis());
		
	
	currentComponent="tMap_9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tMap_9 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_9__Struct  {
}
Var__tMap_9__Struct Var__tMap_9 = new Var__tMap_9__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfout9_0Struct copyOfout9_0_tmp = new copyOfout9_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_9 begin ] stop
 */



	
	/**
	 * [tHashInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_11", false);
		start_Hash.put("tHashInput_11", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_11";
	
	
		int tos_count_tHashInput_11 = 0;
		


int nb_line_tHashInput_11 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_11=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_11 = mf_tHashInput_11.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_11==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_11 = tHashFile_tHashInput_11.iterator();
while (iterator_tHashInput_11.hasNext()) {
    row24Struct next_tHashInput_11 = iterator_tHashInput_11.next();

	row17.contador = next_tHashInput_11.contador;
	row17.prefijo = next_tHashInput_11.prefijo;
	row17.numero_factura = next_tHashInput_11.numero_factura;
	row17.fecha_factura = next_tHashInput_11.fecha_factura;
	row17.esm_formulacion = next_tHashInput_11.esm_formulacion;
	row17.esm_dispensacion = next_tHashInput_11.esm_dispensacion;
	row17.esm_facturacion = next_tHashInput_11.esm_facturacion;
	row17.esm_adscrito = next_tHashInput_11.esm_adscrito;
	row17.fecha_formulacion = next_tHashInput_11.fecha_formulacion;
	row17.fecha_dispensacion = next_tHashInput_11.fecha_dispensacion;
	row17.fecha_registro_dispensacion = next_tHashInput_11.fecha_registro_dispensacion;
	row17.tipo_documento = next_tHashInput_11.tipo_documento;
	row17.documento = next_tHashInput_11.documento;
	row17.tipificacion = next_tHashInput_11.tipificacion;
	row17.consecutivo_formula = next_tHashInput_11.consecutivo_formula;
	row17.tirilla = next_tHashInput_11.tirilla;
	row17.tipo_formula = next_tHashInput_11.tipo_formula;
	row17.origen_formulacion = next_tHashInput_11.origen_formulacion;
	row17.codigo_atc = next_tHashInput_11.codigo_atc;
	row17.codigo_cum = next_tHashInput_11.codigo_cum;
	row17.invima = next_tHashInput_11.invima;
	row17.codigo_cie10 = next_tHashInput_11.codigo_cie10;
	row17.lote = next_tHashInput_11.lote;
	row17.medico_codigo = next_tHashInput_11.medico_codigo;
	row17.medico_nombre = next_tHashInput_11.medico_nombre;
	row17.fecha_vencimiento = next_tHashInput_11.fecha_vencimiento;
	row17.cantidad_solicitada = next_tHashInput_11.cantidad_solicitada;
	row17.cantidad_despachada = next_tHashInput_11.cantidad_despachada;
	row17.cantidad_pendiente = next_tHashInput_11.cantidad_pendiente;
	row17.dosis = next_tHashInput_11.dosis;
	row17.frecuencia_horas = next_tHashInput_11.frecuencia_horas;
	row17.codigo_interno_servicio = next_tHashInput_11.codigo_interno_servicio;
	row17.valor_unitario = next_tHashInput_11.valor_unitario;
	row17.subtotal = next_tHashInput_11.subtotal;
	row17.valor_total_adecuacion = next_tHashInput_11.valor_total_adecuacion;
	row17.valor_total_iva = next_tHashInput_11.valor_total_iva;
	row17.valor_intermediacion = next_tHashInput_11.valor_intermediacion;
	row17.valor_total_iva_intermediacion = next_tHashInput_11.valor_total_iva_intermediacion;
	row17.valor_total_medicamento = next_tHashInput_11.valor_total_medicamento;
	row17.valor_total_factura = next_tHashInput_11.valor_total_factura;

 



/**
 * [tHashInput_11 begin ] stop
 */
	
	/**
	 * [tHashInput_11 main ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 


	tos_count_tHashInput_11++;

/**
 * [tHashInput_11 main ] stop
 */
	
	/**
	 * [tHashInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tMap_9 main ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_9 = false;
		
						row18Struct row18 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_9 = false;
		boolean mainRowRejected_tMap_9 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_9) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_9 = false;
								
                        		    		    row18HashKey.CODIGO = row17.codigo_cie10 ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row18.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_9 = true;
	  								
						
									
	
		  								forceLooprow18 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow18 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row18 != null && tHash_Lookup_row18.hasNext()) || forceLooprow18) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row18'
									
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								
								if(!forceLooprow18) { // G 46
								
							
								 
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow18 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_9__Struct Var = Var__tMap_9;// ###############################
        // ###############################
        // # Output tables

copyOfout9_0 = null;

if(!rejectedInnerJoin_tMap_9 ) {
} // closing inner join bracket (1)
// ###### START REJECTS ##### 

// # Output reject table : 'copyOfout9_0'
// # Filter conditions 
if( rejectedInnerJoin_tMap_9 ) {
copyOfout9_0_tmp.error = "Error en registro "+row17.contador+ " Columna 16 código CIE10: " + " Codigo CIE10 no existe en el sistema. Valor ingresado: " + row17.codigo_cie10 ;
copyOfout9_0 = copyOfout9_0_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_9 = false;










 


	tos_count_tMap_9++;

/**
 * [tMap_9 main ] stop
 */
	
	/**
	 * [tMap_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_begin ] stop
 */
// Start of branch "copyOfout9_0"
if(copyOfout9_0 != null) { 



	
	/**
	 * [tHashOutput_12 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfout9_0"
						
						);
					}
					




		if(tHashFile_tHashOutput_12 == null){
			tHashFile_tHashOutput_12 = mf_tHashOutput_12.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
			mf_tHashOutput_12.getResourceMap().put("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_12", tHashFile_tHashOutput_12);
		}
		row32Struct oneRow_tHashOutput_12 = new row32Struct();
			oneRow_tHashOutput_12.error = copyOfout9_0.error;
        tHashFile_tHashOutput_12.put(oneRow_tHashOutput_12);
        nb_line_tHashOutput_12 ++;	

 


	tos_count_tHashOutput_12++;

/**
 * [tHashOutput_12 main ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 process_data_end ] stop
 */

} // End of branch "copyOfout9_0"



	
		} // close loop of lookup 'row18' // G_TM_M_043
	
	
	/**
	 * [tMap_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_11 end ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	
    

		
			nb_line_tHashInput_11++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_11_NB_LINE", nb_line_tHashInput_11);       

 

ok_Hash.put("tHashInput_11", true);
end_Hash.put("tHashInput_11", System.currentTimeMillis());




/**
 * [tHashInput_11 end ] stop
 */

	
	/**
	 * [tMap_9 end ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tMap_9", true);
end_Hash.put("tMap_9", System.currentTimeMillis());




/**
 * [tMap_9 end ] stop
 */

	
	/**
	 * [tHashOutput_12 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	
globalMap.put("tHashOutput_12_NB_LINE", nb_line_tHashOutput_12);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfout9_0");
			  	}
			  	
 

ok_Hash.put("tHashOutput_12", true);
end_Hash.put("tHashOutput_12", System.currentTimeMillis());




/**
 * [tHashOutput_12 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tHashInput_14Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_9"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_11 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_11";
	
	

 



/**
 * [tHashInput_11 finally ] stop
 */

	
	/**
	 * [tMap_9 finally ] start
	 */

	

	
	
	currentComponent="tMap_9";
	
	

 



/**
 * [tMap_9 finally ] stop
 */

	
	/**
	 * [tHashOutput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_12";
	
	

 



/**
 * [tHashOutput_12 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class error_esm_formulacionStruct implements routines.system.IPersistableRow<error_esm_formulacionStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return null;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(error_esm_formulacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class error_esm_dispensacionStruct implements routines.system.IPersistableRow<error_esm_dispensacionStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return null;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(error_esm_dispensacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class error_esm_facturacionStruct implements routines.system.IPersistableRow<error_esm_facturacionStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return null;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(error_esm_facturacionStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class error_esm_adscritoStruct implements routines.system.IPersistableRow<error_esm_adscritoStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return null;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(error_esm_adscritoStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row33Struct implements routines.system.IPersistableRow<row33Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return null;
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_14Struct implements routines.system.IPersistableRow<after_tHashInput_14Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return null;
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_14Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_15Process(globalMap);
		tHashInput_16Process(globalMap);
		tHashInput_17Process(globalMap);
		tHashInput_18Process(globalMap);

		row33Struct row33 = new row33Struct();
error_esm_formulacionStruct error_esm_formulacion = new error_esm_formulacionStruct();
error_esm_dispensacionStruct error_esm_dispensacion = new error_esm_dispensacionStruct();
error_esm_facturacionStruct error_esm_facturacion = new error_esm_facturacionStruct();
error_esm_adscritoStruct error_esm_adscrito = new error_esm_adscritoStruct();





	
	/**
	 * [tHashOutput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_19", false);
		start_Hash.put("tHashOutput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"error_esm_formulacion");
					}
				
		int tos_count_tHashOutput_19 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_19 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_19.getKeyMap().put("tHashFile_CargueMedicamentos_" +pid + "_tHashOutput_19", "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_6");
        int nb_line_tHashOutput_19 = 0;

 



/**
 * [tHashOutput_19 begin ] stop
 */




	
	/**
	 * [tHashOutput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_16", false);
		start_Hash.put("tHashOutput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"error_esm_dispensacion");
					}
				
		int tos_count_tHashOutput_16 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_16 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_16.getKeyMap().put("tHashFile_CargueMedicamentos_" +pid + "_tHashOutput_16", "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_6");
        int nb_line_tHashOutput_16 = 0;

 



/**
 * [tHashOutput_16 begin ] stop
 */




	
	/**
	 * [tHashOutput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_17", false);
		start_Hash.put("tHashOutput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"error_esm_facturacion");
					}
				
		int tos_count_tHashOutput_17 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_17 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_17.getKeyMap().put("tHashFile_CargueMedicamentos_" +pid + "_tHashOutput_17", "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_6");
        int nb_line_tHashOutput_17 = 0;

 



/**
 * [tHashOutput_17 begin ] stop
 */




	
	/**
	 * [tHashOutput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_18", false);
		start_Hash.put("tHashOutput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"error_esm_adscrito");
					}
				
		int tos_count_tHashOutput_18 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashOutput_18 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_18.getKeyMap().put("tHashFile_CargueMedicamentos_" +pid + "_tHashOutput_18", "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_6");
        int nb_line_tHashOutput_18 = 0;

 



/**
 * [tHashOutput_18 begin ] stop
 */



	
	/**
	 * [tMap_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_8", false);
		start_Hash.put("tMap_8", System.currentTimeMillis());
		
	
	currentComponent="tMap_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tMap_8 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct>) 
					globalMap.get( "tHash_Lookup_row34" ))
					;					
					
	

row34Struct row34HashKey = new row34Struct();
row34Struct row34Default = new row34Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct>) 
					globalMap.get( "tHash_Lookup_row35" ))
					;					
					
	

row35Struct row35HashKey = new row35Struct();
row35Struct row35Default = new row35Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct>) 
					globalMap.get( "tHash_Lookup_row36" ))
					;					
					
	

row36Struct row36HashKey = new row36Struct();
row36Struct row36Default = new row36Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct>) 
					globalMap.get( "tHash_Lookup_row37" ))
					;					
					
	

row37Struct row37HashKey = new row37Struct();
row37Struct row37Default = new row37Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_8__Struct  {
}
Var__tMap_8__Struct Var__tMap_8 = new Var__tMap_8__Struct();
// ###############################

// ###############################
// # Outputs initialization
error_esm_formulacionStruct error_esm_formulacion_tmp = new error_esm_formulacionStruct();
error_esm_dispensacionStruct error_esm_dispensacion_tmp = new error_esm_dispensacionStruct();
error_esm_facturacionStruct error_esm_facturacion_tmp = new error_esm_facturacionStruct();
error_esm_adscritoStruct error_esm_adscrito_tmp = new error_esm_adscritoStruct();
// ###############################

        
        



        









 



/**
 * [tMap_8 begin ] stop
 */



	
	/**
	 * [tHashInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_14", false);
		start_Hash.put("tHashInput_14", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_14";
	
	
		int tos_count_tHashInput_14 = 0;
		


int nb_line_tHashInput_14 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_14=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_14 = mf_tHashInput_14.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_14==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_14 = tHashFile_tHashInput_14.iterator();
while (iterator_tHashInput_14.hasNext()) {
    row24Struct next_tHashInput_14 = iterator_tHashInput_14.next();

	row33.contador = next_tHashInput_14.contador;
	row33.prefijo = next_tHashInput_14.prefijo;
	row33.numero_factura = next_tHashInput_14.numero_factura;
	row33.fecha_factura = next_tHashInput_14.fecha_factura;
	row33.esm_formulacion = next_tHashInput_14.esm_formulacion;
	row33.esm_dispensacion = next_tHashInput_14.esm_dispensacion;
	row33.esm_facturacion = next_tHashInput_14.esm_facturacion;
	row33.esm_adscrito = next_tHashInput_14.esm_adscrito;
	row33.fecha_formulacion = next_tHashInput_14.fecha_formulacion;
	row33.fecha_dispensacion = next_tHashInput_14.fecha_dispensacion;
	row33.fecha_registro_dispensacion = next_tHashInput_14.fecha_registro_dispensacion;
	row33.tipo_documento = next_tHashInput_14.tipo_documento;
	row33.documento = next_tHashInput_14.documento;
	row33.tipificacion = next_tHashInput_14.tipificacion;
	row33.consecutivo_formula = next_tHashInput_14.consecutivo_formula;
	row33.tirilla = next_tHashInput_14.tirilla;
	row33.tipo_formula = next_tHashInput_14.tipo_formula;
	row33.origen_formulacion = next_tHashInput_14.origen_formulacion;
	row33.codigo_atc = next_tHashInput_14.codigo_atc;
	row33.codigo_cum = next_tHashInput_14.codigo_cum;
	row33.invima = next_tHashInput_14.invima;
	row33.codigo_cie10 = next_tHashInput_14.codigo_cie10;
	row33.lote = next_tHashInput_14.lote;
	row33.medico_codigo = next_tHashInput_14.medico_codigo;
	row33.medico_nombre = next_tHashInput_14.medico_nombre;
	row33.fecha_vencimiento = next_tHashInput_14.fecha_vencimiento;
	row33.cantidad_solicitada = next_tHashInput_14.cantidad_solicitada;
	row33.cantidad_despachada = next_tHashInput_14.cantidad_despachada;
	row33.cantidad_pendiente = next_tHashInput_14.cantidad_pendiente;
	row33.dosis = next_tHashInput_14.dosis;
	row33.frecuencia_horas = next_tHashInput_14.frecuencia_horas;
	row33.codigo_interno_servicio = next_tHashInput_14.codigo_interno_servicio;
	row33.valor_unitario = next_tHashInput_14.valor_unitario;
	row33.subtotal = next_tHashInput_14.subtotal;
	row33.valor_total_adecuacion = next_tHashInput_14.valor_total_adecuacion;
	row33.valor_total_iva = next_tHashInput_14.valor_total_iva;
	row33.valor_intermediacion = next_tHashInput_14.valor_intermediacion;
	row33.valor_total_iva_intermediacion = next_tHashInput_14.valor_total_iva_intermediacion;
	row33.valor_total_medicamento = next_tHashInput_14.valor_total_medicamento;
	row33.valor_total_factura = next_tHashInput_14.valor_total_factura;

 



/**
 * [tHashInput_14 begin ] stop
 */
	
	/**
	 * [tHashInput_14 main ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 


	tos_count_tHashInput_14++;

/**
 * [tHashInput_14 main ] stop
 */
	
	/**
	 * [tHashInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tMap_8 main ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_8 = false;
		
						row34Struct row34 = null;
					
						row35Struct row35 = null;
					
						row36Struct row36 = null;
					
						row37Struct row37 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_8 = false;
		boolean mainRowRejected_tMap_8 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row34" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow34 = false;
       		  	    	
       		  	    	
 							row34Struct row34ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row34HashKey.CODIGO = row33.esm_formulacion ;
                        		    		

								
		                        	row34HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row34.lookup( row34HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row34Struct fromLookup_row34 = null;
							row34 = row34Default;
										 
							
								 
							
							
								if (tHash_Lookup_row34 !=null && tHash_Lookup_row34.hasNext()) { // G 099
								
							
								
								fromLookup_row34 = tHash_Lookup_row34.next();

							
							
								} // G 099
							
							

							if(fromLookup_row34 != null) {
								row34 = fromLookup_row34;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row35" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow35 = false;
       		  	    	
       		  	    	
 							row35Struct row35ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row35HashKey.CODIGO = row33.esm_dispensacion ;
                        		    		

								
		                        	row35HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row35.lookup( row35HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row35Struct fromLookup_row35 = null;
							row35 = row35Default;
										 
							
								 
							
							
								if (tHash_Lookup_row35 !=null && tHash_Lookup_row35.hasNext()) { // G 099
								
							
								
								fromLookup_row35 = tHash_Lookup_row35.next();

							
							
								} // G 099
							
							

							if(fromLookup_row35 != null) {
								row35 = fromLookup_row35;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row36" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow36 = false;
       		  	    	
       		  	    	
 							row36Struct row36ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row36HashKey.CODIGO = row33.esm_facturacion ;
                        		    		

								
		                        	row36HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row36.lookup( row36HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row36.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow36 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow36 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row36 != null && tHash_Lookup_row36.hasNext()) || forceLooprow36) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row36'
									
                    		  	 
							   
                    		  	 
	       		  	    	row36Struct fromLookup_row36 = null;
							row36 = row36Default;
										 
							
								
								if(!forceLooprow36) { // G 46
								
							
								 
							
								
								fromLookup_row36 = tHash_Lookup_row36.next();

							

							if(fromLookup_row36 != null) {
								row36 = fromLookup_row36;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow36 = false;
									 	
							
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row37" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow37 = false;
       		  	    	
       		  	    	
 							row37Struct row37ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_8) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_8 = false;
								
                        		    		    row37HashKey.CODIGO = row33.esm_adscrito ;
                        		    		

								
		                        	row37HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row37.lookup( row37HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row37Struct fromLookup_row37 = null;
							row37 = row37Default;
										 
							
								 
							
							
								if (tHash_Lookup_row37 !=null && tHash_Lookup_row37.hasNext()) { // G 099
								
							
								
								fromLookup_row37 = tHash_Lookup_row37.next();

							
							
								} // G 099
							
							

							if(fromLookup_row37 != null) {
								row37 = fromLookup_row37;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_8__Struct Var = Var__tMap_8;// ###############################
        // ###############################
        // # Output tables

error_esm_formulacion = null;
error_esm_dispensacion = null;
error_esm_facturacion = null;
error_esm_adscrito = null;


// # Output table : 'error_esm_formulacion'
// # Filter conditions 
if( 

row34.ESTABLECIMIENTOID ==null

 ) {
error_esm_formulacion_tmp.error = "Error en registro "+row33.contador+ " Columna 04 código CODIGO_ESM_FORMULACION: " + " Codigo del establecimiento no existe en el sistema. Valor ingresado: " + row33.esm_formulacion ;
error_esm_formulacion = error_esm_formulacion_tmp;
} // closing filter/reject

// # Output table : 'error_esm_dispensacion'
// # Filter conditions 
if( 

row35.ESTABLECIMIENTOID == null

 ) {
error_esm_dispensacion_tmp.error = "Error en registro "+row33.contador+ " Columna 05 código CODIGO_ESM_DISPENSACION: " + " Codigo del establecimiento no existe en el sistema. Valor ingresado: " + row33.esm_dispensacion ;
error_esm_dispensacion = error_esm_dispensacion_tmp;
} // closing filter/reject

// # Output table : 'error_esm_facturacion'
// # Filter conditions 
if( 

row36.ESTABLECIMIENTOID ==null

 ) {
error_esm_facturacion_tmp.error = "Error en registro "+row33.contador+ " Columna 06 código CODIGO_ESM_FACTURACION: " + " Codigo del establecimiento no existe en el sistema. Valor ingresado: " + row33.esm_facturacion ;
error_esm_facturacion = error_esm_facturacion_tmp;
} // closing filter/reject

// # Output table : 'error_esm_adscrito'
// # Filter conditions 
if( 

row37.ESTABLECIMIENTOID == null

 ) {
error_esm_adscrito_tmp.error = "Error en registro "+row33.contador+ " Columna 07 código CODIGO_ESM_ADSCRITO: " + " Codigo del establecimiento no existe en el sistema. Valor ingresado: " + row33.esm_adscrito ;
error_esm_adscrito = error_esm_adscrito_tmp;
} // closing filter/reject
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_8 = false;










 


	tos_count_tMap_8++;

/**
 * [tMap_8 main ] stop
 */
	
	/**
	 * [tMap_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_begin ] stop
 */
// Start of branch "error_esm_formulacion"
if(error_esm_formulacion != null) { 



	
	/**
	 * [tHashOutput_19 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"error_esm_formulacion"
						
						);
					}
					




		if(tHashFile_tHashOutput_19 == null){
			tHashFile_tHashOutput_19 = mf_tHashOutput_19.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
			mf_tHashOutput_19.getResourceMap().put("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_19", tHashFile_tHashOutput_19);
		}
		row32Struct oneRow_tHashOutput_19 = new row32Struct();
			oneRow_tHashOutput_19.error = error_esm_formulacion.error;
        tHashFile_tHashOutput_19.put(oneRow_tHashOutput_19);
        nb_line_tHashOutput_19 ++;	

 


	tos_count_tHashOutput_19++;

/**
 * [tHashOutput_19 main ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 process_data_end ] stop
 */

} // End of branch "error_esm_formulacion"




// Start of branch "error_esm_dispensacion"
if(error_esm_dispensacion != null) { 



	
	/**
	 * [tHashOutput_16 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"error_esm_dispensacion"
						
						);
					}
					




		if(tHashFile_tHashOutput_16 == null){
			tHashFile_tHashOutput_16 = mf_tHashOutput_16.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
			mf_tHashOutput_16.getResourceMap().put("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_16", tHashFile_tHashOutput_16);
		}
		row32Struct oneRow_tHashOutput_16 = new row32Struct();
			oneRow_tHashOutput_16.error = error_esm_dispensacion.error;
        tHashFile_tHashOutput_16.put(oneRow_tHashOutput_16);
        nb_line_tHashOutput_16 ++;	

 


	tos_count_tHashOutput_16++;

/**
 * [tHashOutput_16 main ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 process_data_end ] stop
 */

} // End of branch "error_esm_dispensacion"




// Start of branch "error_esm_facturacion"
if(error_esm_facturacion != null) { 



	
	/**
	 * [tHashOutput_17 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"error_esm_facturacion"
						
						);
					}
					




		if(tHashFile_tHashOutput_17 == null){
			tHashFile_tHashOutput_17 = mf_tHashOutput_17.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
			mf_tHashOutput_17.getResourceMap().put("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_17", tHashFile_tHashOutput_17);
		}
		row32Struct oneRow_tHashOutput_17 = new row32Struct();
			oneRow_tHashOutput_17.error = error_esm_facturacion.error;
        tHashFile_tHashOutput_17.put(oneRow_tHashOutput_17);
        nb_line_tHashOutput_17 ++;	

 


	tos_count_tHashOutput_17++;

/**
 * [tHashOutput_17 main ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 process_data_end ] stop
 */

} // End of branch "error_esm_facturacion"




// Start of branch "error_esm_adscrito"
if(error_esm_adscrito != null) { 



	
	/**
	 * [tHashOutput_18 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"error_esm_adscrito"
						
						);
					}
					




		if(tHashFile_tHashOutput_18 == null){
			tHashFile_tHashOutput_18 = mf_tHashOutput_18.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
			mf_tHashOutput_18.getResourceMap().put("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_18", tHashFile_tHashOutput_18);
		}
		row32Struct oneRow_tHashOutput_18 = new row32Struct();
			oneRow_tHashOutput_18.error = error_esm_adscrito.error;
        tHashFile_tHashOutput_18.put(oneRow_tHashOutput_18);
        nb_line_tHashOutput_18 ++;	

 


	tos_count_tHashOutput_18++;

/**
 * [tHashOutput_18 main ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 process_data_end ] stop
 */

} // End of branch "error_esm_adscrito"



	
		} // close loop of lookup 'row36' // G_TM_M_043
	
	
	/**
	 * [tMap_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_14 end ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	
    

		
			nb_line_tHashInput_14++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_14_NB_LINE", nb_line_tHashInput_14);       

 

ok_Hash.put("tHashInput_14", true);
end_Hash.put("tHashInput_14", System.currentTimeMillis());




/**
 * [tHashInput_14 end ] stop
 */

	
	/**
	 * [tMap_8 end ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row34 != null) {
						tHash_Lookup_row34.endGet();
					}
					globalMap.remove( "tHash_Lookup_row34" );

					
					
				
					if(tHash_Lookup_row35 != null) {
						tHash_Lookup_row35.endGet();
					}
					globalMap.remove( "tHash_Lookup_row35" );

					
					
				
					if(tHash_Lookup_row36 != null) {
						tHash_Lookup_row36.endGet();
					}
					globalMap.remove( "tHash_Lookup_row36" );

					
					
				
					if(tHash_Lookup_row37 != null) {
						tHash_Lookup_row37.endGet();
					}
					globalMap.remove( "tHash_Lookup_row37" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tMap_8", true);
end_Hash.put("tMap_8", System.currentTimeMillis());




/**
 * [tMap_8 end ] stop
 */

	
	/**
	 * [tHashOutput_19 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	
globalMap.put("tHashOutput_19_NB_LINE", nb_line_tHashOutput_19);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"error_esm_formulacion");
			  	}
			  	
 

ok_Hash.put("tHashOutput_19", true);
end_Hash.put("tHashOutput_19", System.currentTimeMillis());




/**
 * [tHashOutput_19 end ] stop
 */




	
	/**
	 * [tHashOutput_16 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	
globalMap.put("tHashOutput_16_NB_LINE", nb_line_tHashOutput_16);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"error_esm_dispensacion");
			  	}
			  	
 

ok_Hash.put("tHashOutput_16", true);
end_Hash.put("tHashOutput_16", System.currentTimeMillis());




/**
 * [tHashOutput_16 end ] stop
 */




	
	/**
	 * [tHashOutput_17 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	
globalMap.put("tHashOutput_17_NB_LINE", nb_line_tHashOutput_17);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"error_esm_facturacion");
			  	}
			  	
 

ok_Hash.put("tHashOutput_17", true);
end_Hash.put("tHashOutput_17", System.currentTimeMillis());




/**
 * [tHashOutput_17 end ] stop
 */




	
	/**
	 * [tHashOutput_18 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	
globalMap.put("tHashOutput_18_NB_LINE", nb_line_tHashOutput_18);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"error_esm_adscrito");
			  	}
			  	
 

ok_Hash.put("tHashOutput_18", true);
end_Hash.put("tHashOutput_18", System.currentTimeMillis());




/**
 * [tHashOutput_18 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_14:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk14", 0, "ok");
								} 
							
							tJava_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row34"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row35"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row36"); 
				     			
					     			//free memory for "tMap_8"
					     			globalMap.remove("tHash_Lookup_row37"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_14 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_14";
	
	

 



/**
 * [tHashInput_14 finally ] stop
 */

	
	/**
	 * [tMap_8 finally ] start
	 */

	

	
	
	currentComponent="tMap_8";
	
	

 



/**
 * [tMap_8 finally ] stop
 */

	
	/**
	 * [tHashOutput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_19";
	
	

 



/**
 * [tHashOutput_19 finally ] stop
 */




	
	/**
	 * [tHashOutput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_16";
	
	

 



/**
 * [tHashOutput_16 finally ] stop
 */




	
	/**
	 * [tHashOutput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_17";
	
	

 



/**
 * [tHashOutput_17 finally ] stop
 */




	
	/**
	 * [tHashOutput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_18";
	
	

 



/**
 * [tHashOutput_18 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_14_SUBPROCESS_STATE", 1);
	}
	


public void tJava_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


context.contador = 2;

context.nErroresArchivo = 
((Integer)globalMap.get("tHashOutput_6_NB_LINE"))+
((Integer)globalMap.get("tHashOutput_15_NB_LINE"))+
((Integer)globalMap.get("tHashOutput_12_NB_LINE"))+
((Integer)globalMap.get("tHashOutput_19_NB_LINE"))+
((Integer)globalMap.get("tHashOutput_16_NB_LINE"))+
((Integer)globalMap.get("tHashOutput_17_NB_LINE"))+
((Integer)globalMap.get("tHashOutput_18_NB_LINE"));

System.out.println(" - nErroresArchivo " + context.nErroresArchivo);
context.Narchivo = context.PathStorage+"/ACM/"+GenerarUuid.createUUID()+".csv";

 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());

   			if (context.nErroresArchivo == 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If7", 0, "true");
					}
				tHashInput_5Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "false");
					}   	 
   				}
   			if (context.nErroresArchivo > 1) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				tHashInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}



/**
 * [tJava_3 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_3_SUBPROCESS_STATE", 1);
	}
	


public static class row84Struct implements routines.system.IPersistableRow<row84Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return null;
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public Integer SECUENCIA;

				public Integer getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return null;
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal valor_total;

				public BigDecimal getValor_total () {
					return this.valor_total;
				}

				public Boolean valor_totalIsNullable(){
				    return true;
				}
				public Boolean valor_totalIsKey(){
				    return false;
				}
				public Integer valor_totalLength(){
				    return null;
				}
				public Integer valor_totalPrecision(){
				    return null;
				}
				public String valor_totalDefault(){
				
					return null;
				
				}
				public String valor_totalComment(){
				
				    return "";
				
				}
				public String valor_totalPattern(){
				
					return "";
				
				}
				public String valor_totalOriginalDbColumnName(){
				
					return "valor_total";
				
				}

				
			    public String doc;

				public String getDoc () {
					return this.doc;
				}

				public Boolean docIsNullable(){
				    return true;
				}
				public Boolean docIsKey(){
				    return false;
				}
				public Integer docLength(){
				    return null;
				}
				public Integer docPrecision(){
				    return null;
				}
				public String docDefault(){
				
					return null;
				
				}
				public String docComment(){
				
				    return "";
				
				}
				public String docPattern(){
				
					return "";
				
				}
				public String docOriginalDbColumnName(){
				
					return "doc";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return true;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return 0;
				}
				public Integer valor_total_facturaPrecision(){
				    return 0;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.doc = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.doc = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.doc,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.doc,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",valor_total="+String.valueOf(valor_total));
		sb.append(",doc="+doc);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row84Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_1> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return null;
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public Integer SECUENCIA;

				public Integer getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return null;
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal valor_total;

				public BigDecimal getValor_total () {
					return this.valor_total;
				}

				public Boolean valor_totalIsNullable(){
				    return true;
				}
				public Boolean valor_totalIsKey(){
				    return false;
				}
				public Integer valor_totalLength(){
				    return null;
				}
				public Integer valor_totalPrecision(){
				    return null;
				}
				public String valor_totalDefault(){
				
					return null;
				
				}
				public String valor_totalComment(){
				
				    return "";
				
				}
				public String valor_totalPattern(){
				
					return "";
				
				}
				public String valor_totalOriginalDbColumnName(){
				
					return "valor_total";
				
				}

				
			    public String doc;

				public String getDoc () {
					return this.doc;
				}

				public Boolean docIsNullable(){
				    return true;
				}
				public Boolean docIsKey(){
				    return false;
				}
				public Integer docLength(){
				    return null;
				}
				public Integer docPrecision(){
				    return null;
				}
				public String docDefault(){
				
					return null;
				
				}
				public String docComment(){
				
				    return "";
				
				}
				public String docPattern(){
				
					return "";
				
				}
				public String docOriginalDbColumnName(){
				
					return "doc";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return true;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return 0;
				}
				public Integer valor_total_facturaPrecision(){
				    return 0;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.doc = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.doc = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.doc,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.doc,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",valor_total="+String.valueOf(valor_total));
		sb.append(",doc="+doc);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out10Struct implements routines.system.IPersistableRow<out10Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return null;
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public Integer SECUENCIA;

				public Integer getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return null;
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal valor_total;

				public BigDecimal getValor_total () {
					return this.valor_total;
				}

				public Boolean valor_totalIsNullable(){
				    return true;
				}
				public Boolean valor_totalIsKey(){
				    return false;
				}
				public Integer valor_totalLength(){
				    return null;
				}
				public Integer valor_totalPrecision(){
				    return null;
				}
				public String valor_totalDefault(){
				
					return null;
				
				}
				public String valor_totalComment(){
				
				    return "";
				
				}
				public String valor_totalPattern(){
				
					return "";
				
				}
				public String valor_totalOriginalDbColumnName(){
				
					return "valor_total";
				
				}

				
			    public String doc;

				public String getDoc () {
					return this.doc;
				}

				public Boolean docIsNullable(){
				    return true;
				}
				public Boolean docIsKey(){
				    return false;
				}
				public Integer docLength(){
				    return null;
				}
				public Integer docPrecision(){
				    return null;
				}
				public String docDefault(){
				
					return null;
				
				}
				public String docComment(){
				
				    return "";
				
				}
				public String docPattern(){
				
					return "";
				
				}
				public String docOriginalDbColumnName(){
				
					return "doc";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return true;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return 0;
				}
				public Integer valor_total_facturaPrecision(){
				    return 0;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.doc = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.doc = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.doc,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.doc,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",valor_total="+String.valueOf(valor_total));
		sb.append(",doc="+doc);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out10Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row43Struct implements routines.system.IPersistableRow<row43Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return null;
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row43Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row43Struct row43 = new row43Struct();
out10Struct out10 = new out10Struct();
row84Struct row84 = new row84Struct();





	
	/**
	 * [tAggregateRow_1_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGOUT", false);
		start_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out10");
					}
				
		int tos_count_tAggregateRow_1_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_1 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_1 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_1 utilClass_tAggregateRow_1 = new UtilClass_tAggregateRow_1();

	
	
		class AggCountDistinctValuesStruct_doc_tAggregateRow_1 { // G_OutBegin_AggR_1100
	
			private static final int DEFAULT_HASHCODE = 1;
		    private static final int PRIME = 31;
		    private int hashCode = DEFAULT_HASHCODE;
		    public boolean hashCodeDirty = true;
	
	        
    					String NUMERO;
    					String PREFIJO;
    					String doc;        
	        
		    @Override
			public int hashCode() {
				if (this.hashCodeDirty) {
					final int prime = PRIME;
					int result = DEFAULT_HASHCODE;
			
								result = prime * result + ((this.NUMERO == null) ? 0 : this.NUMERO.hashCode());
								
								result = prime * result + ((this.PREFIJO == null) ? 0 : this.PREFIJO.hashCode());
								
								result = prime * result + ((this.doc == null) ? 0 : this.doc.hashCode());
								
		    		this.hashCode = result;
		    		this.hashCodeDirty = false;		
				}
				return this.hashCode;
			}
			
			@Override
			public boolean equals(Object obj) {
				if (this == obj) return true;
				if (obj == null) return false;
				if (getClass() != obj.getClass()) return false;
				final AggCountDistinctValuesStruct_doc_tAggregateRow_1 other = (AggCountDistinctValuesStruct_doc_tAggregateRow_1) obj;
				
									if (this.NUMERO == null) {
										if (other.NUMERO != null) 
											return false;
									} else if (!this.NUMERO.equals(other.NUMERO)) 
										return false;
								
									if (this.PREFIJO == null) {
										if (other.PREFIJO != null) 
											return false;
									} else if (!this.PREFIJO.equals(other.PREFIJO)) 
										return false;
								
									if (this.doc == null) {
										if (other.doc != null) 
											return false;
									} else if (!this.doc.equals(other.doc)) 
										return false;
								
				
				return true;
			}
	  
	        
		} // G_OutBegin_AggR_1100

	

	class AggOperationStruct_tAggregateRow_1 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;

    				String NUMERO;
    				String PREFIJO;java.util.Set<AggCountDistinctValuesStruct_doc_tAggregateRow_1> distinctValues_CANTIDAD = new java.util.HashSet<AggCountDistinctValuesStruct_doc_tAggregateRow_1>();
           			BigDecimal VCALCULADO_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
							result = prime * result + ((this.NUMERO == null) ? 0 : this.NUMERO.hashCode());
							
							result = prime * result + ((this.PREFIJO == null) ? 0 : this.PREFIJO.hashCode());
							
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_1 other = (AggOperationStruct_tAggregateRow_1) obj;
			
							if (this.NUMERO == null) {
								if (other.NUMERO != null) 
									return false;
							} else if (!this.NUMERO.equals(other.NUMERO)) 
								return false;
						
							if (this.PREFIJO == null) {
								if (other.PREFIJO != null) 
									return false;
							} else if (!this.PREFIJO.equals(other.PREFIJO)) 
								return false;
						
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_1 operation_result_tAggregateRow_1 = null;
	AggOperationStruct_tAggregateRow_1 operation_finder_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();
	java.util.Map<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1> hash_tAggregateRow_1 = new java.util.HashMap<AggOperationStruct_tAggregateRow_1,AggOperationStruct_tAggregateRow_1>();
	

 



/**
 * [tAggregateRow_1_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3", false);
		start_Hash.put("tMap_3", System.currentTimeMillis());
		
	
	currentComponent="tMap_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row43");
					}
				
		int tos_count_tMap_3 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3__Struct  {
}
Var__tMap_3__Struct Var__tMap_3 = new Var__tMap_3__Struct();
// ###############################

// ###############################
// # Outputs initialization
out10Struct out10_tmp = new out10Struct();
// ###############################

        
        



        









 



/**
 * [tMap_3 begin ] stop
 */



	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row24Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row43.contador = next_tHashInput_5.contador;
	row43.prefijo = next_tHashInput_5.prefijo;
	row43.numero_factura = next_tHashInput_5.numero_factura;
	row43.fecha_factura = next_tHashInput_5.fecha_factura;
	row43.esm_formulacion = next_tHashInput_5.esm_formulacion;
	row43.esm_dispensacion = next_tHashInput_5.esm_dispensacion;
	row43.esm_facturacion = next_tHashInput_5.esm_facturacion;
	row43.esm_adscrito = next_tHashInput_5.esm_adscrito;
	row43.fecha_formulacion = next_tHashInput_5.fecha_formulacion;
	row43.fecha_dispensacion = next_tHashInput_5.fecha_dispensacion;
	row43.fecha_registro_dispensacion = next_tHashInput_5.fecha_registro_dispensacion;
	row43.tipo_documento = next_tHashInput_5.tipo_documento;
	row43.documento = next_tHashInput_5.documento;
	row43.tipificacion = next_tHashInput_5.tipificacion;
	row43.consecutivo_formula = next_tHashInput_5.consecutivo_formula;
	row43.tirilla = next_tHashInput_5.tirilla;
	row43.tipo_formula = next_tHashInput_5.tipo_formula;
	row43.origen_formulacion = next_tHashInput_5.origen_formulacion;
	row43.codigo_atc = next_tHashInput_5.codigo_atc;
	row43.codigo_cum = next_tHashInput_5.codigo_cum;
	row43.invima = next_tHashInput_5.invima;
	row43.codigo_cie10 = next_tHashInput_5.codigo_cie10;
	row43.lote = next_tHashInput_5.lote;
	row43.medico_codigo = next_tHashInput_5.medico_codigo;
	row43.medico_nombre = next_tHashInput_5.medico_nombre;
	row43.fecha_vencimiento = next_tHashInput_5.fecha_vencimiento;
	row43.cantidad_solicitada = next_tHashInput_5.cantidad_solicitada;
	row43.cantidad_despachada = next_tHashInput_5.cantidad_despachada;
	row43.cantidad_pendiente = next_tHashInput_5.cantidad_pendiente;
	row43.dosis = next_tHashInput_5.dosis;
	row43.frecuencia_horas = next_tHashInput_5.frecuencia_horas;
	row43.codigo_interno_servicio = next_tHashInput_5.codigo_interno_servicio;
	row43.valor_unitario = next_tHashInput_5.valor_unitario;
	row43.subtotal = next_tHashInput_5.subtotal;
	row43.valor_total_adecuacion = next_tHashInput_5.valor_total_adecuacion;
	row43.valor_total_iva = next_tHashInput_5.valor_total_iva;
	row43.valor_intermediacion = next_tHashInput_5.valor_intermediacion;
	row43.valor_total_iva_intermediacion = next_tHashInput_5.valor_total_iva_intermediacion;
	row43.valor_total_medicamento = next_tHashInput_5.valor_total_medicamento;
	row43.valor_total_factura = next_tHashInput_5.valor_total_factura;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tMap_3 main ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row43"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3 = false;
		boolean mainRowRejected_tMap_3 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3__Struct Var = Var__tMap_3;// ###############################
        // ###############################
        // # Output tables

out10 = null;


// # Output table : 'out10'
out10_tmp.CANTIDAD = new BigDecimal(0);
out10_tmp.VCALCULADO = new BigDecimal(0);
out10_tmp.NUMERO = row43.numero_factura ;
out10_tmp.PREFIJO = row43.prefijo ;
out10_tmp.SECUENCIA = row43.contador ;
out10_tmp.valor_total = new BigDecimal(row43.valor_total_medicamento);
out10_tmp.doc = row43.tipo_documento+""+ row43.documento ;
out10_tmp.valor_total_factura = row43.valor_total_factura ;
out10 = out10_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3 = false;










 


	tos_count_tMap_3++;

/**
 * [tMap_3 main ] stop
 */
	
	/**
	 * [tMap_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_begin ] stop
 */
// Start of branch "out10"
if(out10 != null) { 



	
	/**
	 * [tAggregateRow_1_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out10"
						
						);
					}
					
	
operation_finder_tAggregateRow_1.NUMERO = out10.NUMERO;
			operation_finder_tAggregateRow_1.PREFIJO = out10.PREFIJO;
			

	operation_finder_tAggregateRow_1.hashCodeDirty = true;
	
	operation_result_tAggregateRow_1 = hash_tAggregateRow_1.get(operation_finder_tAggregateRow_1);

	

	if(operation_result_tAggregateRow_1 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_1 = new AggOperationStruct_tAggregateRow_1();

		operation_result_tAggregateRow_1.NUMERO = operation_finder_tAggregateRow_1.NUMERO;
				operation_result_tAggregateRow_1.PREFIJO = operation_finder_tAggregateRow_1.PREFIJO;
				
		
		

		hash_tAggregateRow_1.put(operation_result_tAggregateRow_1, operation_result_tAggregateRow_1);
	
	} // G_OutMain_AggR_001


	
				
				AggCountDistinctValuesStruct_doc_tAggregateRow_1 countDistinctValues_CANTIDAD_tAggregateRow_1 = new AggCountDistinctValuesStruct_doc_tAggregateRow_1();
			
				countDistinctValues_CANTIDAD_tAggregateRow_1.NUMERO = out10.NUMERO;
						countDistinctValues_CANTIDAD_tAggregateRow_1.PREFIJO = out10.PREFIJO;
						
				countDistinctValues_CANTIDAD_tAggregateRow_1.doc = out10.doc;
				operation_result_tAggregateRow_1.distinctValues_CANTIDAD.add(countDistinctValues_CANTIDAD_tAggregateRow_1);
				
					if(operation_result_tAggregateRow_1.VCALCULADO_sum == null) {
						operation_result_tAggregateRow_1.VCALCULADO_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_1.VCALCULADO_sum = operation_result_tAggregateRow_1.VCALCULADO_sum.add(
						new BigDecimal(
							String.valueOf(
								out10.valor_total
							)
						)
					);
					


 


	tos_count_tAggregateRow_1_AGGOUT++;

/**
 * [tAggregateRow_1_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT process_data_end ] stop
 */

} // End of branch "out10"




	
	/**
	 * [tMap_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */

	
	/**
	 * [tMap_3 end ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row43");
			  	}
			  	
 

ok_Hash.put("tMap_3", true);
end_Hash.put("tMap_3", System.currentTimeMillis());




/**
 * [tMap_3 end ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out10");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_1_AGGOUT", true);
end_Hash.put("tAggregateRow_1_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_8", false);
		start_Hash.put("tHashOutput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row84");
					}
				
		int tos_count_tHashOutput_8 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row84Struct> tHashFile_tHashOutput_8 = null;
		String hashKey_tHashOutput_8 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_8";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_8)){
			    if(mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8) == null){
	      		    mf_tHashOutput_8.getResourceMap().put(hashKey_tHashOutput_8, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row84Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }else{
			    	tHashFile_tHashOutput_8 = mf_tHashOutput_8.getResourceMap().get(hashKey_tHashOutput_8);
			    }
			}
        int nb_line_tHashOutput_8 = 0;

 



/**
 * [tHashOutput_8 begin ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_1_AGGIN", false);
		start_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	
		int tos_count_tAggregateRow_1_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_1> values_tAggregateRow_1 = hash_tAggregateRow_1.values();

globalMap.put("tAggregateRow_1_NB_LINE", values_tAggregateRow_1.size());

for(AggOperationStruct_tAggregateRow_1 aggregated_row_tAggregateRow_1 : values_tAggregateRow_1) { // G_AggR_600



 



/**
 * [tAggregateRow_1_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

    								row84.CANTIDAD = new BigDecimal(aggregated_row_tAggregateRow_1.distinctValues_CANTIDAD.size());
								row84.VCALCULADO = aggregated_row_tAggregateRow_1.VCALCULADO_sum;
                                	
            				    row84.NUMERO = aggregated_row_tAggregateRow_1.NUMERO;
            				    
            				    row84.PREFIJO = aggregated_row_tAggregateRow_1.PREFIJO;
            				    

 


	tos_count_tAggregateRow_1_AGGIN++;

/**
 * [tAggregateRow_1_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_8 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row84"
						
						);
					}
					



    
		row84Struct oneRow_tHashOutput_8 = new row84Struct();
				
					oneRow_tHashOutput_8.CANTIDAD = row84.CANTIDAD;
					oneRow_tHashOutput_8.VCALCULADO = row84.VCALCULADO;
					oneRow_tHashOutput_8.NUMERO = row84.NUMERO;
					oneRow_tHashOutput_8.PREFIJO = row84.PREFIJO;
					oneRow_tHashOutput_8.SECUENCIA = row84.SECUENCIA;
					oneRow_tHashOutput_8.valor_total = row84.valor_total;
					oneRow_tHashOutput_8.doc = row84.doc;
					oneRow_tHashOutput_8.valor_total_factura = row84.valor_total_factura;
		
        tHashFile_tHashOutput_8.put(oneRow_tHashOutput_8);
        nb_line_tHashOutput_8 ++;

 


	tos_count_tHashOutput_8++;

/**
 * [tHashOutput_8 main ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_1_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_1_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_1_AGGIN", true);
end_Hash.put("tAggregateRow_1_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_1_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_8 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	
globalMap.put("tHashOutput_8_NB_LINE", nb_line_tHashOutput_8);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row84");
			  	}
			  	
 

ok_Hash.put("tHashOutput_8", true);
end_Hash.put("tHashOutput_8", System.currentTimeMillis());




/**
 * [tHashOutput_8 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tHashInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_1_AGGIN"
							globalMap.remove("tAggregateRow_1");
						
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */

	
	/**
	 * [tMap_3 finally ] start
	 */

	

	
	
	currentComponent="tMap_3";
	
	

 



/**
 * [tMap_3 finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGOUT";
	
	

 



/**
 * [tAggregateRow_1_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_1_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_1";
	
	currentComponent="tAggregateRow_1_AGGIN";
	
	

 



/**
 * [tAggregateRow_1_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_8";
	
	

 



/**
 * [tHashOutput_8 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class INSStruct implements routines.system.IPersistableRow<INSStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return null;
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public BigDecimal CANTPACIENTES;

				public BigDecimal getCANTPACIENTES () {
					return this.CANTPACIENTES;
				}

				public Boolean CANTPACIENTESIsNullable(){
				    return false;
				}
				public Boolean CANTPACIENTESIsKey(){
				    return false;
				}
				public Integer CANTPACIENTESLength(){
				    return 0;
				}
				public Integer CANTPACIENTESPrecision(){
				    return null;
				}
				public String CANTPACIENTESDefault(){
				
					return "0";
				
				}
				public String CANTPACIENTESComment(){
				
				    return "CANTIDAD DE PACIENTES RELACIONADOS EN LA FACTURA";
				
				}
				public String CANTPACIENTESPattern(){
				
					return "";
				
				}
				public String CANTPACIENTESOriginalDbColumnName(){
				
					return "CANTPACIENTES";
				
				}

				
			    public BigDecimal VALOR;

				public BigDecimal getVALOR () {
					return this.VALOR;
				}

				public Boolean VALORIsNullable(){
				    return false;
				}
				public Boolean VALORIsKey(){
				    return false;
				}
				public Integer VALORLength(){
				    return 0;
				}
				public Integer VALORPrecision(){
				    return null;
				}
				public String VALORDefault(){
				
					return "0";
				
				}
				public String VALORComment(){
				
				    return "VALOR DE LA FACTURA";
				
				}
				public String VALORPattern(){
				
					return "";
				
				}
				public String VALOROriginalDbColumnName(){
				
					return "VALOR";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return false;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return 0;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return "0";
				
				}
				public String VCALCULADOComment(){
				
				    return "VALOR CALCULADO PARA LA FACTURA";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String TFACTURA;

				public String getTFACTURA () {
					return this.TFACTURA;
				}

				public Boolean TFACTURAIsNullable(){
				    return false;
				}
				public Boolean TFACTURAIsKey(){
				    return false;
				}
				public Integer TFACTURALength(){
				    return 50;
				}
				public Integer TFACTURAPrecision(){
				    return 0;
				}
				public String TFACTURADefault(){
				
					return null;
				
				}
				public String TFACTURAComment(){
				
				    return "TIPO DE FACTURA  Servicios, Medicamentos";
				
				}
				public String TFACTURAPattern(){
				
					return "";
				
				}
				public String TFACTURAOriginalDbColumnName(){
				
					return "TFACTURA";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "'SYSDATE'";
				
				}
				public String FECHAComment(){
				
				    return "Fecha de registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return 50;
				}
				public Integer NUMEROPrecision(){
				    return 0;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "Numero de la factura";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 50;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "Prefijo de la factura";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public BigDecimal MEDCONTRATOS_ID;

				public BigDecimal getMEDCONTRATOS_ID () {
					return this.MEDCONTRATOS_ID;
				}

				public Boolean MEDCONTRATOS_IDIsNullable(){
				    return true;
				}
				public Boolean MEDCONTRATOS_IDIsKey(){
				    return false;
				}
				public Integer MEDCONTRATOS_IDLength(){
				    return 0;
				}
				public Integer MEDCONTRATOS_IDPrecision(){
				    return null;
				}
				public String MEDCONTRATOS_IDDefault(){
				
					return null;
				
				}
				public String MEDCONTRATOS_IDComment(){
				
				    return "FK - MED_CONTRATOS Apica para contratos de medicamentos";
				
				}
				public String MEDCONTRATOS_IDPattern(){
				
					return "";
				
				}
				public String MEDCONTRATOS_IDOriginalDbColumnName(){
				
					return "MEDCONTRATOS_ID";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return 0;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return null;
				
				}
				public String DCARGUE_IDComment(){
				
				    return "FK - ACM_DCARGUE";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public Integer SECUENCIA;

				public Integer getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return 0;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return "0";
				
				}
				public String SECUENCIAComment(){
				
				    return "Valor secuenciual para la asignacion por rangos";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal TCARGUE;

				public BigDecimal getTCARGUE () {
					return this.TCARGUE;
				}

				public Boolean TCARGUEIsNullable(){
				    return true;
				}
				public Boolean TCARGUEIsKey(){
				    return false;
				}
				public Integer TCARGUELength(){
				    return 0;
				}
				public Integer TCARGUEPrecision(){
				    return null;
				}
				public String TCARGUEDefault(){
				
					return null;
				
				}
				public String TCARGUEComment(){
				
				    return "Tipo de cargue (1:cargue relacion, 2:cargue detalle, 3:cargue manual)";
				
				}
				public String TCARGUEPattern(){
				
					return "";
				
				}
				public String TCARGUEOriginalDbColumnName(){
				
					return "TCARGUE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.SECUENCIA = readInteger(dis);
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
						this.CANTPACIENTES = (BigDecimal) dis.readObject();
					
						this.VALOR = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.TFACTURA = readString(dis);
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.MEDCONTRATOS_ID = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
						this.SECUENCIA = readInteger(dis);
					
						this.TCARGUE = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTPACIENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.TFACTURA,dos);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.MEDCONTRATOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TCARGUE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",CANTPACIENTES="+String.valueOf(CANTPACIENTES));
		sb.append(",VALOR="+String.valueOf(VALOR));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",TFACTURA="+TFACTURA);
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",MEDCONTRATOS_ID="+String.valueOf(MEDCONTRATOS_ID));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",TCARGUE="+String.valueOf(TCARGUE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(INSStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row88Struct implements routines.system.IPersistableRow<row88Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return null;
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return false;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return false;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public Integer SECUENCIA;

				public Integer getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return null;
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal valor_total;

				public BigDecimal getValor_total () {
					return this.valor_total;
				}

				public Boolean valor_totalIsNullable(){
				    return true;
				}
				public Boolean valor_totalIsKey(){
				    return false;
				}
				public Integer valor_totalLength(){
				    return null;
				}
				public Integer valor_totalPrecision(){
				    return null;
				}
				public String valor_totalDefault(){
				
					return null;
				
				}
				public String valor_totalComment(){
				
				    return "";
				
				}
				public String valor_totalPattern(){
				
					return "";
				
				}
				public String valor_totalOriginalDbColumnName(){
				
					return "valor_total";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return true;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return 0;
				}
				public Integer valor_total_facturaPrecision(){
				    return 0;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",valor_total="+String.valueOf(valor_total));
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row88Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_4Struct implements routines.system.IPersistableRow<after_tHashInput_4Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal CANTIDAD;

				public BigDecimal getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				
			    public BigDecimal VCALCULADO;

				public BigDecimal getVCALCULADO () {
					return this.VCALCULADO;
				}

				public Boolean VCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VCALCULADOIsKey(){
				    return false;
				}
				public Integer VCALCULADOLength(){
				    return null;
				}
				public Integer VCALCULADOPrecision(){
				    return null;
				}
				public String VCALCULADODefault(){
				
					return null;
				
				}
				public String VCALCULADOComment(){
				
				    return "";
				
				}
				public String VCALCULADOPattern(){
				
					return "";
				
				}
				public String VCALCULADOOriginalDbColumnName(){
				
					return "VCALCULADO";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return false;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return false;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public Integer SECUENCIA;

				public Integer getSECUENCIA () {
					return this.SECUENCIA;
				}

				public Boolean SECUENCIAIsNullable(){
				    return true;
				}
				public Boolean SECUENCIAIsKey(){
				    return false;
				}
				public Integer SECUENCIALength(){
				    return null;
				}
				public Integer SECUENCIAPrecision(){
				    return null;
				}
				public String SECUENCIADefault(){
				
					return null;
				
				}
				public String SECUENCIAComment(){
				
				    return "";
				
				}
				public String SECUENCIAPattern(){
				
					return "";
				
				}
				public String SECUENCIAOriginalDbColumnName(){
				
					return "SECUENCIA";
				
				}

				
			    public BigDecimal valor_total;

				public BigDecimal getValor_total () {
					return this.valor_total;
				}

				public Boolean valor_totalIsNullable(){
				    return true;
				}
				public Boolean valor_totalIsKey(){
				    return false;
				}
				public Integer valor_totalLength(){
				    return null;
				}
				public Integer valor_totalPrecision(){
				    return null;
				}
				public String valor_totalDefault(){
				
					return null;
				
				}
				public String valor_totalComment(){
				
				    return "";
				
				}
				public String valor_totalPattern(){
				
					return "";
				
				}
				public String valor_totalOriginalDbColumnName(){
				
					return "valor_total";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return true;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return 0;
				}
				public Integer valor_total_facturaPrecision(){
				    return 0;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.CANTIDAD = (BigDecimal) dis.readObject();
					
						this.VCALCULADO = (BigDecimal) dis.readObject();
					
					this.NUMERO = readString(dis);
					
					this.PREFIJO = readString(dis);
					
						this.SECUENCIA = readInteger(dis);
					
						this.valor_total = (BigDecimal) dis.readObject();
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTIDAD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VCALCULADO);
					
					// String
				
						writeString(this.NUMERO,dos);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// Integer
				
						writeInteger(this.SECUENCIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CANTIDAD="+String.valueOf(CANTIDAD));
		sb.append(",VCALCULADO="+String.valueOf(VCALCULADO));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",SECUENCIA="+String.valueOf(SECUENCIA));
		sb.append(",valor_total="+String.valueOf(valor_total));
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_8Process(globalMap);

		row88Struct row88 = new row88Struct();
INSStruct INS = new INSStruct();





	
	/**
	 * [tOracleOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_2", false);
		start_Hash.put("tOracleOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"INS");
					}
				
		int tos_count_tOracleOutput_2 = 0;
		






    
    int nb_line_tOracleOutput_2 = 0;
    int nb_line_update_tOracleOutput_2 = 0;
    int nb_line_inserted_tOracleOutput_2 = 0;
    int nb_line_deleted_tOracleOutput_2 = 0;
    int nb_line_rejected_tOracleOutput_2 = 0;

    int tmp_batchUpdateCount_tOracleOutput_2 = 0;

    int deletedCount_tOracleOutput_2=0;
    int updatedCount_tOracleOutput_2=0;
    int insertedCount_tOracleOutput_2=0;
    int rowsToCommitCount_tOracleOutput_2=0;
    int rejectedCount_tOracleOutput_2=0;

    boolean whetherReject_tOracleOutput_2 = false;

    java.sql.Connection conn_tOracleOutput_2 = null;

    //optional table
    String dbschema_tOracleOutput_2 = null;
    String tableName_tOracleOutput_2 = null;
                    String driverClass_tOracleOutput_2 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_2);
                String url_tOracleOutput_2 = null;
                    url_tOracleOutput_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_2 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_2 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_2 = decryptedPassword_tOracleOutput_2;
                dbschema_tOracleOutput_2 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_2 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_2.put("user",dbUser_tOracleOutput_2);
                    atnParamsPrope_tOracleOutput_2.put("password",dbPwd_tOracleOutput_2);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_2.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_2 = java.sql.DriverManager.getConnection(url_tOracleOutput_2, atnParamsPrope_tOracleOutput_2);
        resourceMap.put("conn_tOracleOutput_2", conn_tOracleOutput_2);
            conn_tOracleOutput_2.setAutoCommit(false);
            int commitEvery_tOracleOutput_2 = 10000;
            int commitCounter_tOracleOutput_2 = 0;
        int batchSize_tOracleOutput_2 = 10000;
        int batchSizeCounter_tOracleOutput_2=0;
        int count_tOracleOutput_2=0;

        if(dbschema_tOracleOutput_2 == null || dbschema_tOracleOutput_2.trim().length() == 0) {
            tableName_tOracleOutput_2 = ("ACM_FACTURA");
        } else {
            tableName_tOracleOutput_2 = dbschema_tOracleOutput_2 + "." + ("ACM_FACTURA");
        }
                String insert_tOracleOutput_2 = "INSERT INTO " + tableName_tOracleOutput_2 + " (RECEPCION_ID,PRESTADOR_ID,CANTPACIENTES,VALOR,VCALCULADO,TFACTURA,FECHA,USUARIOS_ID,UORG_ID,NUMERO,PREFIJO,MEDCONTRATOS_ID,DCARGUE_ID,SECUENCIA,TCARGUE) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_2 = conn_tOracleOutput_2.prepareStatement(insert_tOracleOutput_2);
                        resourceMap.put("pstmt_tOracleOutput_2", pstmt_tOracleOutput_2);





 



/**
 * [tOracleOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row88");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
	int secuencia;
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
INSStruct INS_tmp = new INSStruct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row84Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_8");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row84Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row84Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row88.CANTIDAD = next_tHashInput_4.CANTIDAD;
	row88.VCALCULADO = next_tHashInput_4.VCALCULADO;
	row88.NUMERO = next_tHashInput_4.NUMERO;
	row88.PREFIJO = next_tHashInput_4.PREFIJO;
	row88.SECUENCIA = next_tHashInput_4.SECUENCIA;
	row88.valor_total = next_tHashInput_4.valor_total;
	row88.valor_total_factura = next_tHashInput_4.doc;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row88"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row2Struct row2 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row2HashKey.prefijo = row88.PREFIJO ;
                        		    		
                        		    		    row2HashKey.numero_factura = row88.NUMERO ;
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;
Var.secuencia = Numeric.sequence("s1",1,1) ;// ###############################
        // ###############################
        // # Output tables

INS = null;


// # Output table : 'INS'
INS_tmp.RECEPCION_ID = context.vRecepcionId;
INS_tmp.PRESTADOR_ID = context.PRESTADOR;
INS_tmp.CANTPACIENTES = row88.CANTIDAD ;
INS_tmp.VALOR = new BigDecimal(row2.valor_total_factura) ;
INS_tmp.VCALCULADO = row88.VCALCULADO ;
INS_tmp.TFACTURA = "Medicamentos";
INS_tmp.FECHA = row2.fecha_factura == null ? null: row2.fecha_factura.length()==0 ? null :TalendDate.parseDate("dd/MM/yyyy",row2.fecha_factura) ;
INS_tmp.USUARIOS_ID = context.USUARIOS_ID;
INS_tmp.UORG_ID = context.UORG_ID;
INS_tmp.NUMERO = row88.NUMERO ;
INS_tmp.PREFIJO = row88.PREFIJO ;
INS_tmp.MEDCONTRATOS_ID = context.MEDCONTRATOS_ID;
INS_tmp.DCARGUE_ID = context.vArchivo_Id;
INS_tmp.SECUENCIA = Var.secuencia ;
INS_tmp.TCARGUE = new BigDecimal("2");
INS = INS_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "INS"
if(INS != null) { 



	
	/**
	 * [tOracleOutput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"INS"
						
						);
					}
					



        whetherReject_tOracleOutput_2 = false;
                        pstmt_tOracleOutput_2.setBigDecimal(1, INS.RECEPCION_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(2, INS.PRESTADOR_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(3, INS.CANTPACIENTES);

                        pstmt_tOracleOutput_2.setBigDecimal(4, INS.VALOR);

                        pstmt_tOracleOutput_2.setBigDecimal(5, INS.VCALCULADO);

                        if(INS.TFACTURA == null) {
pstmt_tOracleOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(6, INS.TFACTURA);
}

                        if(INS.FECHA != null) {
pstmt_tOracleOutput_2.setObject(7, new java.sql.Timestamp(INS.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_2.setNull(7, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_2.setBigDecimal(8, INS.USUARIOS_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(9, INS.UORG_ID);

                        if(INS.NUMERO == null) {
pstmt_tOracleOutput_2.setNull(10, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(10, INS.NUMERO);
}

                        if(INS.PREFIJO == null) {
pstmt_tOracleOutput_2.setNull(11, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_2.setString(11, INS.PREFIJO);
}

                        pstmt_tOracleOutput_2.setBigDecimal(12, INS.MEDCONTRATOS_ID);

                        pstmt_tOracleOutput_2.setBigDecimal(13, INS.DCARGUE_ID);

                        if(INS.SECUENCIA == null) {
pstmt_tOracleOutput_2.setNull(14, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_2.setInt(14, INS.SECUENCIA);
}

                        pstmt_tOracleOutput_2.setBigDecimal(15, INS.TCARGUE);

                pstmt_tOracleOutput_2.addBatch();
                nb_line_tOracleOutput_2++;
                batchSizeCounter_tOracleOutput_2++;
            if (batchSize_tOracleOutput_2 > 0 &&  batchSize_tOracleOutput_2 <= batchSizeCounter_tOracleOutput_2) {
                try {
                    pstmt_tOracleOutput_2.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
			        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
			    	String errormessage_tOracleOutput_2;
					if (ne_tOracleOutput_2 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
						errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
					}else{
						errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_2);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                    insertedCount_tOracleOutput_2
                += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                batchSizeCounter_tOracleOutput_2 = 0;
            }
                commitCounter_tOracleOutput_2++;
                if(commitEvery_tOracleOutput_2 <= commitCounter_tOracleOutput_2) {
                    if(batchSizeCounter_tOracleOutput_2 > 0) {
                        try {
                            pstmt_tOracleOutput_2.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
					        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
					    	String errormessage_tOracleOutput_2;
							if (ne_tOracleOutput_2 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
								errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
							}else{
								errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_2);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
                            insertedCount_tOracleOutput_2
                        += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                        rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    }
                    conn_tOracleOutput_2.commit();
                    if(rowsToCommitCount_tOracleOutput_2 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_2 = 0;
                    }
                    commitCounter_tOracleOutput_2=0;
                    	batchSizeCounter_tOracleOutput_2=0;
                }

 


	tos_count_tOracleOutput_2++;

/**
 * [tOracleOutput_2 main ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	

 



/**
 * [tOracleOutput_2 process_data_end ] stop
 */

} // End of branch "INS"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_8");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row88");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tOracleOutput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_2 > 0) {
            try {
            	if (pstmt_tOracleOutput_2 != null) {
					
					pstmt_tOracleOutput_2.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_2){
globalMap.put("tOracleOutput_2_ERROR_MESSAGE",e_tOracleOutput_2.getMessage());
		        java.sql.SQLException ne_tOracleOutput_2 = e_tOracleOutput_2.getNextException(),sqle_tOracleOutput_2=null;
		    	String errormessage_tOracleOutput_2;
				if (ne_tOracleOutput_2 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_2 = new java.sql.SQLException(e_tOracleOutput_2.getMessage() + "\ncaused by: " + ne_tOracleOutput_2.getMessage(), ne_tOracleOutput_2.getSQLState(), ne_tOracleOutput_2.getErrorCode(), ne_tOracleOutput_2);
					errormessage_tOracleOutput_2 = sqle_tOracleOutput_2.getMessage();
				}else{
					errormessage_tOracleOutput_2 = e_tOracleOutput_2.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_2);
            	
        	}
        	if (pstmt_tOracleOutput_2 != null) {
            	tmp_batchUpdateCount_tOracleOutput_2 = pstmt_tOracleOutput_2.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_2
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
				rowsToCommitCount_tOracleOutput_2 += (tmp_batchUpdateCount_tOracleOutput_2!=-1?tmp_batchUpdateCount_tOracleOutput_2:0);
            }
        }
        if(pstmt_tOracleOutput_2 != null) {
			
				pstmt_tOracleOutput_2.close();
				resourceMap.remove("pstmt_tOracleOutput_2");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_2", true);
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
		}
		conn_tOracleOutput_2.commit();
		if(commitCounter_tOracleOutput_2 > 0 && rowsToCommitCount_tOracleOutput_2 != 0) {
			
			rowsToCommitCount_tOracleOutput_2 = 0;
		}
		commitCounter_tOracleOutput_2 = 0;
		
		
		conn_tOracleOutput_2 .close();
		
		resourceMap.put("finish_tOracleOutput_2", true);
   	

	
	nb_line_deleted_tOracleOutput_2=nb_line_deleted_tOracleOutput_2+ deletedCount_tOracleOutput_2;
	nb_line_update_tOracleOutput_2=nb_line_update_tOracleOutput_2 + updatedCount_tOracleOutput_2;
	nb_line_inserted_tOracleOutput_2=nb_line_inserted_tOracleOutput_2 + insertedCount_tOracleOutput_2;
	nb_line_rejected_tOracleOutput_2=nb_line_rejected_tOracleOutput_2 + rejectedCount_tOracleOutput_2;
	
        globalMap.put("tOracleOutput_2_NB_LINE",nb_line_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_UPDATED",nb_line_update_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_2);
        globalMap.put("tOracleOutput_2_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_2);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"INS");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_2", true);
end_Hash.put("tOracleOutput_2", System.currentTimeMillis());




/**
 * [tOracleOutput_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk17", 0, "ok");
								} 
							
							tJava_1Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_4:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tHashInput_24Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_2";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_2") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_2 = null;
                if ((pstmtToClose_tOracleOutput_2 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_2")) != null) {
                    pstmtToClose_tOracleOutput_2.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_2") == null){
            java.sql.Connection ctn_tOracleOutput_2 = null;
            if((ctn_tOracleOutput_2 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_2")) != null){
                try {
                    ctn_tOracleOutput_2.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_2) {
                    String errorMessage_tOracleOutput_2 = "failed to close the connection in tOracleOutput_2 :" + sqlEx_tOracleOutput_2.getMessage();
                    System.err.println(errorMessage_tOracleOutput_2);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


 Numeric.resetSequence("s1",1);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk5", 0, "ok");
								} 
							
							tHashInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 500;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "PREFIJO DE LA FACTURA";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 500;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return "'0'";
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "NUMERO DE LA FACTURA ";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return 500;
				}
				public Integer FORMULAPrecision(){
				    return 0;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "Numero de la formula";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return 500;
				}
				public Integer TIRILLAPrecision(){
				    return 0;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "Numero de la tirilla";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return 7;
				}
				public Integer FFORMUALCIONPrecision(){
				    return 0;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "Fecha de formulacion";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return 7;
				}
				public Integer FDISPENSACIONPrecision(){
				    return 0;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "Fecha de dispensacion";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 50;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "NUMERO DE DOCUMENTO DEL PACIENTE";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "TIPO DE DOCUMENTO DEL PACIENTE";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return 0;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "FK - GEN_TFORMULAS";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return 0;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return null;
				
				}
				public String TORIGEN_IDComment(){
				
				    return "FK - RCA_TORIGEN";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return 500;
				}
				public Integer CODIGOCUMPrecision(){
				    return 0;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "Codigo CUM del producto";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return 500;
				}
				public Integer INVIMAPrecision(){
				    return 0;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "Codigo del registro INVIMA";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return 4000;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return 0;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "Nombre del medicamento";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return 7;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return 0;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "Fecha de vencimiento del medicamento";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return 0;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "0";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "Cantidad solicitada del medicamento";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return 0;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "0";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return 0;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "0";
				
				}
				public String VUNITARIOComment(){
				
				    return "Valor Unitario";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return 0;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "0";
				
				}
				public String SUBTOTALComment(){
				
				    return "Valor resultado de la multiplicaci\u00F3n del valor unitario con la cantidad entregada";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return 0;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "0";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "Valor de la intermediaci\u00F3n";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL_IVA_INTERMEDIACION;

				public BigDecimal getVTOTAL_IVA_INTERMEDIACION () {
					return this.VTOTAL_IVA_INTERMEDIACION;
				}

				public Boolean VTOTAL_IVA_INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VTOTAL_IVA_INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VTOTAL_IVA_INTERMEDIACIONLength(){
				    return 0;
				}
				public Integer VTOTAL_IVA_INTERMEDIACIONPrecision(){
				    return null;
				}
				public String VTOTAL_IVA_INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VTOTAL_IVA_INTERMEDIACIONComment(){
				
				    return "Valor total del iva intermediaci\u00F3n";
				
				}
				public String VTOTAL_IVA_INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VTOTAL_IVA_INTERMEDIACIONOriginalDbColumnName(){
				
					return "VTOTAL_IVA_INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return 0;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "0";
				
				}
				public String VTOTALComment(){
				
				    return "Valor resultado del subtotal + valor de la intermediaci\u00F3n";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VTOTAL_FACTURA;

				public BigDecimal getVTOTAL_FACTURA () {
					return this.VTOTAL_FACTURA;
				}

				public Boolean VTOTAL_FACTURAIsNullable(){
				    return true;
				}
				public Boolean VTOTAL_FACTURAIsKey(){
				    return false;
				}
				public Integer VTOTAL_FACTURALength(){
				    return 0;
				}
				public Integer VTOTAL_FACTURAPrecision(){
				    return null;
				}
				public String VTOTAL_FACTURADefault(){
				
					return null;
				
				}
				public String VTOTAL_FACTURAComment(){
				
				    return "Valor ";
				
				}
				public String VTOTAL_FACTURAPattern(){
				
					return "";
				
				}
				public String VTOTAL_FACTURAOriginalDbColumnName(){
				
					return "VTOTAL_FACTURA";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return 0;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "0";
				
				}
				public String VGRAVADOComment(){
				
				    return "Valor del medicamento gravado";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal VTOTAL_ADECUACION_UNIDOSIS;

				public BigDecimal getVTOTAL_ADECUACION_UNIDOSIS () {
					return this.VTOTAL_ADECUACION_UNIDOSIS;
				}

				public Boolean VTOTAL_ADECUACION_UNIDOSISIsNullable(){
				    return true;
				}
				public Boolean VTOTAL_ADECUACION_UNIDOSISIsKey(){
				    return false;
				}
				public Integer VTOTAL_ADECUACION_UNIDOSISLength(){
				    return 0;
				}
				public Integer VTOTAL_ADECUACION_UNIDOSISPrecision(){
				    return null;
				}
				public String VTOTAL_ADECUACION_UNIDOSISDefault(){
				
					return "0";
				
				}
				public String VTOTAL_ADECUACION_UNIDOSISComment(){
				
				    return "";
				
				}
				public String VTOTAL_ADECUACION_UNIDOSISPattern(){
				
					return "";
				
				}
				public String VTOTAL_ADECUACION_UNIDOSISOriginalDbColumnName(){
				
					return "VTOTAL_ADECUACION_UNIDOSIS";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return 0;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return null;
				
				}
				public String DCARGUE_IDComment(){
				
				    return "FK - ACM_DCARGUE";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "'SYSDATE'";
				
				}
				public String FECHAComment(){
				
				    return "Fecha de registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return 200;
				}
				public Integer TIPIFICACIONPrecision(){
				    return 0;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "Aplica para diferenciar si es por CTC o Acuerdo";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de documento";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return 50;
				}
				public Integer TFORMULAPrecision(){
				    return 0;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "Tipo de formula";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return 50;
				}
				public Integer TORIGENPrecision(){
				    return 0;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "Tipo de origen";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return 0;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return null;
				
				}
				public String DOSISComment(){
				
				    return "Dosis";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return 0;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return null;
				
				}
				public String FRECUENCIAComment(){
				
				    return "Frecuencia";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return 0;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return null;
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "FK - MED_PRODUCTOS";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return 0;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return null;
				
				}
				public String CIE10_IDComment(){
				
				    return "FK - GEN_CIE10";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal ESM_FORMULACION_ID;

				public BigDecimal getESM_FORMULACION_ID () {
					return this.ESM_FORMULACION_ID;
				}

				public Boolean ESM_FORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_FORMULACION_IDIsKey(){
				    return false;
				}
				public Integer ESM_FORMULACION_IDLength(){
				    return null;
				}
				public Integer ESM_FORMULACION_IDPrecision(){
				    return null;
				}
				public String ESM_FORMULACION_IDDefault(){
				
					return null;
				
				}
				public String ESM_FORMULACION_IDComment(){
				
				    return "";
				
				}
				public String ESM_FORMULACION_IDPattern(){
				
					return "";
				
				}
				public String ESM_FORMULACION_IDOriginalDbColumnName(){
				
					return "ESM_FORMULACION_ID";
				
				}

				
			    public BigDecimal ESM_DISPENSACION_ID;

				public BigDecimal getESM_DISPENSACION_ID () {
					return this.ESM_DISPENSACION_ID;
				}

				public Boolean ESM_DISPENSACION_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_DISPENSACION_IDIsKey(){
				    return false;
				}
				public Integer ESM_DISPENSACION_IDLength(){
				    return null;
				}
				public Integer ESM_DISPENSACION_IDPrecision(){
				    return null;
				}
				public String ESM_DISPENSACION_IDDefault(){
				
					return null;
				
				}
				public String ESM_DISPENSACION_IDComment(){
				
				    return "";
				
				}
				public String ESM_DISPENSACION_IDPattern(){
				
					return "";
				
				}
				public String ESM_DISPENSACION_IDOriginalDbColumnName(){
				
					return "ESM_DISPENSACION_ID";
				
				}

				
			    public BigDecimal ESM_FACTURACION_ID;

				public BigDecimal getESM_FACTURACION_ID () {
					return this.ESM_FACTURACION_ID;
				}

				public Boolean ESM_FACTURACION_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_FACTURACION_IDIsKey(){
				    return false;
				}
				public Integer ESM_FACTURACION_IDLength(){
				    return null;
				}
				public Integer ESM_FACTURACION_IDPrecision(){
				    return null;
				}
				public String ESM_FACTURACION_IDDefault(){
				
					return null;
				
				}
				public String ESM_FACTURACION_IDComment(){
				
				    return "";
				
				}
				public String ESM_FACTURACION_IDPattern(){
				
					return "";
				
				}
				public String ESM_FACTURACION_IDOriginalDbColumnName(){
				
					return "ESM_FACTURACION_ID";
				
				}

				
			    public BigDecimal ESM_ADSCRITO_ID;

				public BigDecimal getESM_ADSCRITO_ID () {
					return this.ESM_ADSCRITO_ID;
				}

				public Boolean ESM_ADSCRITO_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRITO_IDIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRITO_IDLength(){
				    return null;
				}
				public Integer ESM_ADSCRITO_IDPrecision(){
				    return null;
				}
				public String ESM_ADSCRITO_IDDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRITO_IDComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRITO_IDPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRITO_IDOriginalDbColumnName(){
				
					return "ESM_ADSCRITO_ID";
				
				}

				
			    public BigDecimal DFORMMEDINSUMOS_ID;

				public BigDecimal getDFORMMEDINSUMOS_ID () {
					return this.DFORMMEDINSUMOS_ID;
				}

				public Boolean DFORMMEDINSUMOS_IDIsNullable(){
				    return true;
				}
				public Boolean DFORMMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMMEDINSUMOS_IDLength(){
				    return null;
				}
				public Integer DFORMMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMMEDINSUMOS_IDDefault(){
				
					return null;
				
				}
				public String DFORMMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMMEDINSUMOS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL_IVA_INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VTOTAL_FACTURA = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.VTOTAL_ADECUACION_UNIDOSIS = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_DISPENSACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FACTURACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ADSCRITO_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL_IVA_INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VTOTAL_FACTURA = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.VTOTAL_ADECUACION_UNIDOSIS = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_DISPENSACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FACTURACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ADSCRITO_ID = (BigDecimal) dis.readObject();
					
						this.DFORMMEDINSUMOS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL_IVA_INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL_ADECUACION_UNIDOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_FORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_DISPENSACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_FACTURACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ADSCRITO_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL_IVA_INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL_ADECUACION_UNIDOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_FORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_DISPENSACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_FACTURACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ADSCRITO_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DFORMMEDINSUMOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL_IVA_INTERMEDIACION="+String.valueOf(VTOTAL_IVA_INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VTOTAL_FACTURA="+String.valueOf(VTOTAL_FACTURA));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",VTOTAL_ADECUACION_UNIDOSIS="+String.valueOf(VTOTAL_ADECUACION_UNIDOSIS));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",ESM_FORMULACION_ID="+String.valueOf(ESM_FORMULACION_ID));
		sb.append(",ESM_DISPENSACION_ID="+String.valueOf(ESM_DISPENSACION_ID));
		sb.append(",ESM_FACTURACION_ID="+String.valueOf(ESM_FACTURACION_ID));
		sb.append(",ESM_ADSCRITO_ID="+String.valueOf(ESM_ADSCRITO_ID));
		sb.append(",DFORMMEDINSUMOS_ID="+String.valueOf(DFORMMEDINSUMOS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out11Struct implements routines.system.IPersistableRow<out11Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION_ID;

				public BigDecimal getRECEPCION_ID () {
					return this.RECEPCION_ID;
				}

				public Boolean RECEPCION_IDIsNullable(){
				    return true;
				}
				public Boolean RECEPCION_IDIsKey(){
				    return false;
				}
				public Integer RECEPCION_IDLength(){
				    return 0;
				}
				public Integer RECEPCION_IDPrecision(){
				    return null;
				}
				public String RECEPCION_IDDefault(){
				
					return null;
				
				}
				public String RECEPCION_IDComment(){
				
				    return "FK - ACM_RECEPCION";
				
				}
				public String RECEPCION_IDPattern(){
				
					return "";
				
				}
				public String RECEPCION_IDOriginalDbColumnName(){
				
					return "RECEPCION_ID";
				
				}

				
			    public BigDecimal FACTURA_ID;

				public BigDecimal getFACTURA_ID () {
					return this.FACTURA_ID;
				}

				public Boolean FACTURA_IDIsNullable(){
				    return true;
				}
				public Boolean FACTURA_IDIsKey(){
				    return false;
				}
				public Integer FACTURA_IDLength(){
				    return 0;
				}
				public Integer FACTURA_IDPrecision(){
				    return null;
				}
				public String FACTURA_IDDefault(){
				
					return null;
				
				}
				public String FACTURA_IDComment(){
				
				    return "FK - ACM_FACTURA";
				
				}
				public String FACTURA_IDPattern(){
				
					return "";
				
				}
				public String FACTURA_IDOriginalDbColumnName(){
				
					return "FACTURA_ID";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return 500;
				}
				public Integer PREFIJOPrecision(){
				    return 0;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "PREFIJO DE LA FACTURA";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				
			    public String NUMERO_FACTURA;

				public String getNUMERO_FACTURA () {
					return this.NUMERO_FACTURA;
				}

				public Boolean NUMERO_FACTURAIsNullable(){
				    return false;
				}
				public Boolean NUMERO_FACTURAIsKey(){
				    return false;
				}
				public Integer NUMERO_FACTURALength(){
				    return 500;
				}
				public Integer NUMERO_FACTURAPrecision(){
				    return 0;
				}
				public String NUMERO_FACTURADefault(){
				
					return "'0'";
				
				}
				public String NUMERO_FACTURAComment(){
				
				    return "NUMERO DE LA FACTURA ";
				
				}
				public String NUMERO_FACTURAPattern(){
				
					return "";
				
				}
				public String NUMERO_FACTURAOriginalDbColumnName(){
				
					return "NUMERO_FACTURA";
				
				}

				
			    public String FORMULA;

				public String getFORMULA () {
					return this.FORMULA;
				}

				public Boolean FORMULAIsNullable(){
				    return true;
				}
				public Boolean FORMULAIsKey(){
				    return false;
				}
				public Integer FORMULALength(){
				    return 500;
				}
				public Integer FORMULAPrecision(){
				    return 0;
				}
				public String FORMULADefault(){
				
					return null;
				
				}
				public String FORMULAComment(){
				
				    return "Numero de la formula";
				
				}
				public String FORMULAPattern(){
				
					return "";
				
				}
				public String FORMULAOriginalDbColumnName(){
				
					return "FORMULA";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return true;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return 500;
				}
				public Integer TIRILLAPrecision(){
				    return 0;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "Numero de la tirilla";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				
			    public java.util.Date FFORMUALCION;

				public java.util.Date getFFORMUALCION () {
					return this.FFORMUALCION;
				}

				public Boolean FFORMUALCIONIsNullable(){
				    return false;
				}
				public Boolean FFORMUALCIONIsKey(){
				    return false;
				}
				public Integer FFORMUALCIONLength(){
				    return 7;
				}
				public Integer FFORMUALCIONPrecision(){
				    return 0;
				}
				public String FFORMUALCIONDefault(){
				
					return null;
				
				}
				public String FFORMUALCIONComment(){
				
				    return "Fecha de formulacion";
				
				}
				public String FFORMUALCIONPattern(){
				
					return "dd-MM-yyyy HH:mm";
				
				}
				public String FFORMUALCIONOriginalDbColumnName(){
				
					return "FFORMUALCION";
				
				}

				
			    public java.util.Date FDISPENSACION;

				public java.util.Date getFDISPENSACION () {
					return this.FDISPENSACION;
				}

				public Boolean FDISPENSACIONIsNullable(){
				    return false;
				}
				public Boolean FDISPENSACIONIsKey(){
				    return false;
				}
				public Integer FDISPENSACIONLength(){
				    return 7;
				}
				public Integer FDISPENSACIONPrecision(){
				    return 0;
				}
				public String FDISPENSACIONDefault(){
				
					return null;
				
				}
				public String FDISPENSACIONComment(){
				
				    return "Fecha de dispensacion";
				
				}
				public String FDISPENSACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FDISPENSACIONOriginalDbColumnName(){
				
					return "FDISPENSACION";
				
				}

				
			    public String DOCUMENTO;

				public String getDOCUMENTO () {
					return this.DOCUMENTO;
				}

				public Boolean DOCUMENTOIsNullable(){
				    return false;
				}
				public Boolean DOCUMENTOIsKey(){
				    return false;
				}
				public Integer DOCUMENTOLength(){
				    return 50;
				}
				public Integer DOCUMENTOPrecision(){
				    return 0;
				}
				public String DOCUMENTODefault(){
				
					return null;
				
				}
				public String DOCUMENTOComment(){
				
				    return "NUMERO DE DOCUMENTO DEL PACIENTE";
				
				}
				public String DOCUMENTOPattern(){
				
					return "";
				
				}
				public String DOCUMENTOOriginalDbColumnName(){
				
					return "DOCUMENTO";
				
				}

				
			    public BigDecimal TDOCUMENTOS_ID;

				public BigDecimal getTDOCUMENTOS_ID () {
					return this.TDOCUMENTOS_ID;
				}

				public Boolean TDOCUMENTOS_IDIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOS_IDIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOS_IDLength(){
				    return 0;
				}
				public Integer TDOCUMENTOS_IDPrecision(){
				    return null;
				}
				public String TDOCUMENTOS_IDDefault(){
				
					return null;
				
				}
				public String TDOCUMENTOS_IDComment(){
				
				    return "TIPO DE DOCUMENTO DEL PACIENTE";
				
				}
				public String TDOCUMENTOS_IDPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOS_IDOriginalDbColumnName(){
				
					return "TDOCUMENTOS_ID";
				
				}

				
			    public BigDecimal TFORMULAS_ID;

				public BigDecimal getTFORMULAS_ID () {
					return this.TFORMULAS_ID;
				}

				public Boolean TFORMULAS_IDIsNullable(){
				    return true;
				}
				public Boolean TFORMULAS_IDIsKey(){
				    return false;
				}
				public Integer TFORMULAS_IDLength(){
				    return 0;
				}
				public Integer TFORMULAS_IDPrecision(){
				    return null;
				}
				public String TFORMULAS_IDDefault(){
				
					return null;
				
				}
				public String TFORMULAS_IDComment(){
				
				    return "FK - GEN_TFORMULAS";
				
				}
				public String TFORMULAS_IDPattern(){
				
					return "";
				
				}
				public String TFORMULAS_IDOriginalDbColumnName(){
				
					return "TFORMULAS_ID";
				
				}

				
			    public BigDecimal TORIGEN_ID;

				public BigDecimal getTORIGEN_ID () {
					return this.TORIGEN_ID;
				}

				public Boolean TORIGEN_IDIsNullable(){
				    return true;
				}
				public Boolean TORIGEN_IDIsKey(){
				    return false;
				}
				public Integer TORIGEN_IDLength(){
				    return 0;
				}
				public Integer TORIGEN_IDPrecision(){
				    return null;
				}
				public String TORIGEN_IDDefault(){
				
					return null;
				
				}
				public String TORIGEN_IDComment(){
				
				    return "FK - RCA_TORIGEN";
				
				}
				public String TORIGEN_IDPattern(){
				
					return "";
				
				}
				public String TORIGEN_IDOriginalDbColumnName(){
				
					return "TORIGEN_ID";
				
				}

				
			    public String CODIGOCUM;

				public String getCODIGOCUM () {
					return this.CODIGOCUM;
				}

				public Boolean CODIGOCUMIsNullable(){
				    return false;
				}
				public Boolean CODIGOCUMIsKey(){
				    return false;
				}
				public Integer CODIGOCUMLength(){
				    return 500;
				}
				public Integer CODIGOCUMPrecision(){
				    return 0;
				}
				public String CODIGOCUMDefault(){
				
					return null;
				
				}
				public String CODIGOCUMComment(){
				
				    return "Codigo CUM del producto";
				
				}
				public String CODIGOCUMPattern(){
				
					return "";
				
				}
				public String CODIGOCUMOriginalDbColumnName(){
				
					return "CODIGOCUM";
				
				}

				
			    public String INVIMA;

				public String getINVIMA () {
					return this.INVIMA;
				}

				public Boolean INVIMAIsNullable(){
				    return false;
				}
				public Boolean INVIMAIsKey(){
				    return false;
				}
				public Integer INVIMALength(){
				    return 500;
				}
				public Integer INVIMAPrecision(){
				    return 0;
				}
				public String INVIMADefault(){
				
					return null;
				
				}
				public String INVIMAComment(){
				
				    return "Codigo del registro INVIMA";
				
				}
				public String INVIMAPattern(){
				
					return "";
				
				}
				public String INVIMAOriginalDbColumnName(){
				
					return "INVIMA";
				
				}

				
			    public String NOMBREMEDICAMENTO;

				public String getNOMBREMEDICAMENTO () {
					return this.NOMBREMEDICAMENTO;
				}

				public Boolean NOMBREMEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean NOMBREMEDICAMENTOIsKey(){
				    return false;
				}
				public Integer NOMBREMEDICAMENTOLength(){
				    return 4000;
				}
				public Integer NOMBREMEDICAMENTOPrecision(){
				    return 0;
				}
				public String NOMBREMEDICAMENTODefault(){
				
					return null;
				
				}
				public String NOMBREMEDICAMENTOComment(){
				
				    return "Nombre del medicamento";
				
				}
				public String NOMBREMEDICAMENTOPattern(){
				
					return "";
				
				}
				public String NOMBREMEDICAMENTOOriginalDbColumnName(){
				
					return "NOMBREMEDICAMENTO";
				
				}

				
			    public java.util.Date FVENCIMIENTO;

				public java.util.Date getFVENCIMIENTO () {
					return this.FVENCIMIENTO;
				}

				public Boolean FVENCIMIENTOIsNullable(){
				    return true;
				}
				public Boolean FVENCIMIENTOIsKey(){
				    return false;
				}
				public Integer FVENCIMIENTOLength(){
				    return 7;
				}
				public Integer FVENCIMIENTOPrecision(){
				    return 0;
				}
				public String FVENCIMIENTODefault(){
				
					return null;
				
				}
				public String FVENCIMIENTOComment(){
				
				    return "Fecha de vencimiento del medicamento";
				
				}
				public String FVENCIMIENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FVENCIMIENTOOriginalDbColumnName(){
				
					return "FVENCIMIENTO";
				
				}

				
			    public BigDecimal CANTFORMULADA;

				public BigDecimal getCANTFORMULADA () {
					return this.CANTFORMULADA;
				}

				public Boolean CANTFORMULADAIsNullable(){
				    return false;
				}
				public Boolean CANTFORMULADAIsKey(){
				    return false;
				}
				public Integer CANTFORMULADALength(){
				    return 0;
				}
				public Integer CANTFORMULADAPrecision(){
				    return null;
				}
				public String CANTFORMULADADefault(){
				
					return "0";
				
				}
				public String CANTFORMULADAComment(){
				
				    return "Cantidad solicitada del medicamento";
				
				}
				public String CANTFORMULADAPattern(){
				
					return "";
				
				}
				public String CANTFORMULADAOriginalDbColumnName(){
				
					return "CANTFORMULADA";
				
				}

				
			    public BigDecimal CANTENTREGADA;

				public BigDecimal getCANTENTREGADA () {
					return this.CANTENTREGADA;
				}

				public Boolean CANTENTREGADAIsNullable(){
				    return false;
				}
				public Boolean CANTENTREGADAIsKey(){
				    return false;
				}
				public Integer CANTENTREGADALength(){
				    return 0;
				}
				public Integer CANTENTREGADAPrecision(){
				    return null;
				}
				public String CANTENTREGADADefault(){
				
					return "0";
				
				}
				public String CANTENTREGADAComment(){
				
				    return "";
				
				}
				public String CANTENTREGADAPattern(){
				
					return "";
				
				}
				public String CANTENTREGADAOriginalDbColumnName(){
				
					return "CANTENTREGADA";
				
				}

				
			    public BigDecimal VUNITARIO;

				public BigDecimal getVUNITARIO () {
					return this.VUNITARIO;
				}

				public Boolean VUNITARIOIsNullable(){
				    return false;
				}
				public Boolean VUNITARIOIsKey(){
				    return false;
				}
				public Integer VUNITARIOLength(){
				    return 0;
				}
				public Integer VUNITARIOPrecision(){
				    return null;
				}
				public String VUNITARIODefault(){
				
					return "0";
				
				}
				public String VUNITARIOComment(){
				
				    return "Valor Unitario";
				
				}
				public String VUNITARIOPattern(){
				
					return "";
				
				}
				public String VUNITARIOOriginalDbColumnName(){
				
					return "VUNITARIO";
				
				}

				
			    public BigDecimal SUBTOTAL;

				public BigDecimal getSUBTOTAL () {
					return this.SUBTOTAL;
				}

				public Boolean SUBTOTALIsNullable(){
				    return false;
				}
				public Boolean SUBTOTALIsKey(){
				    return false;
				}
				public Integer SUBTOTALLength(){
				    return 0;
				}
				public Integer SUBTOTALPrecision(){
				    return null;
				}
				public String SUBTOTALDefault(){
				
					return "0";
				
				}
				public String SUBTOTALComment(){
				
				    return "Valor resultado de la multiplicaci\u00F3n del valor unitario con la cantidad entregada";
				
				}
				public String SUBTOTALPattern(){
				
					return "";
				
				}
				public String SUBTOTALOriginalDbColumnName(){
				
					return "SUBTOTAL";
				
				}

				
			    public BigDecimal INTERMEDIACION;

				public BigDecimal getINTERMEDIACION () {
					return this.INTERMEDIACION;
				}

				public Boolean INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer INTERMEDIACIONLength(){
				    return 0;
				}
				public Integer INTERMEDIACIONPrecision(){
				    return null;
				}
				public String INTERMEDIACIONDefault(){
				
					return "0";
				
				}
				public String INTERMEDIACIONComment(){
				
				    return "Valor de la intermediaci\u00F3n";
				
				}
				public String INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String INTERMEDIACIONOriginalDbColumnName(){
				
					return "INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL_IVA_INTERMEDIACION;

				public BigDecimal getVTOTAL_IVA_INTERMEDIACION () {
					return this.VTOTAL_IVA_INTERMEDIACION;
				}

				public Boolean VTOTAL_IVA_INTERMEDIACIONIsNullable(){
				    return true;
				}
				public Boolean VTOTAL_IVA_INTERMEDIACIONIsKey(){
				    return false;
				}
				public Integer VTOTAL_IVA_INTERMEDIACIONLength(){
				    return 0;
				}
				public Integer VTOTAL_IVA_INTERMEDIACIONPrecision(){
				    return null;
				}
				public String VTOTAL_IVA_INTERMEDIACIONDefault(){
				
					return "";
				
				}
				public String VTOTAL_IVA_INTERMEDIACIONComment(){
				
				    return "Valor total del iva intermediaci\u00F3n";
				
				}
				public String VTOTAL_IVA_INTERMEDIACIONPattern(){
				
					return "";
				
				}
				public String VTOTAL_IVA_INTERMEDIACIONOriginalDbColumnName(){
				
					return "VTOTAL_IVA_INTERMEDIACION";
				
				}

				
			    public BigDecimal VTOTAL;

				public BigDecimal getVTOTAL () {
					return this.VTOTAL;
				}

				public Boolean VTOTALIsNullable(){
				    return false;
				}
				public Boolean VTOTALIsKey(){
				    return false;
				}
				public Integer VTOTALLength(){
				    return 0;
				}
				public Integer VTOTALPrecision(){
				    return null;
				}
				public String VTOTALDefault(){
				
					return "0";
				
				}
				public String VTOTALComment(){
				
				    return "Valor resultado del subtotal + valor de la intermediaci\u00F3n";
				
				}
				public String VTOTALPattern(){
				
					return "";
				
				}
				public String VTOTALOriginalDbColumnName(){
				
					return "VTOTAL";
				
				}

				
			    public BigDecimal VTOTAL_FACTURA;

				public BigDecimal getVTOTAL_FACTURA () {
					return this.VTOTAL_FACTURA;
				}

				public Boolean VTOTAL_FACTURAIsNullable(){
				    return true;
				}
				public Boolean VTOTAL_FACTURAIsKey(){
				    return false;
				}
				public Integer VTOTAL_FACTURALength(){
				    return 0;
				}
				public Integer VTOTAL_FACTURAPrecision(){
				    return null;
				}
				public String VTOTAL_FACTURADefault(){
				
					return null;
				
				}
				public String VTOTAL_FACTURAComment(){
				
				    return "Valor ";
				
				}
				public String VTOTAL_FACTURAPattern(){
				
					return "";
				
				}
				public String VTOTAL_FACTURAOriginalDbColumnName(){
				
					return "VTOTAL_FACTURA";
				
				}

				
			    public BigDecimal VGRAVADO;

				public BigDecimal getVGRAVADO () {
					return this.VGRAVADO;
				}

				public Boolean VGRAVADOIsNullable(){
				    return true;
				}
				public Boolean VGRAVADOIsKey(){
				    return false;
				}
				public Integer VGRAVADOLength(){
				    return 0;
				}
				public Integer VGRAVADOPrecision(){
				    return null;
				}
				public String VGRAVADODefault(){
				
					return "0";
				
				}
				public String VGRAVADOComment(){
				
				    return "Valor del medicamento gravado";
				
				}
				public String VGRAVADOPattern(){
				
					return "";
				
				}
				public String VGRAVADOOriginalDbColumnName(){
				
					return "VGRAVADO";
				
				}

				
			    public BigDecimal VTOTAL_ADECUACION_UNIDOSIS;

				public BigDecimal getVTOTAL_ADECUACION_UNIDOSIS () {
					return this.VTOTAL_ADECUACION_UNIDOSIS;
				}

				public Boolean VTOTAL_ADECUACION_UNIDOSISIsNullable(){
				    return true;
				}
				public Boolean VTOTAL_ADECUACION_UNIDOSISIsKey(){
				    return false;
				}
				public Integer VTOTAL_ADECUACION_UNIDOSISLength(){
				    return 0;
				}
				public Integer VTOTAL_ADECUACION_UNIDOSISPrecision(){
				    return null;
				}
				public String VTOTAL_ADECUACION_UNIDOSISDefault(){
				
					return "0";
				
				}
				public String VTOTAL_ADECUACION_UNIDOSISComment(){
				
				    return "";
				
				}
				public String VTOTAL_ADECUACION_UNIDOSISPattern(){
				
					return "";
				
				}
				public String VTOTAL_ADECUACION_UNIDOSISOriginalDbColumnName(){
				
					return "VTOTAL_ADECUACION_UNIDOSIS";
				
				}

				
			    public BigDecimal DCARGUE_ID;

				public BigDecimal getDCARGUE_ID () {
					return this.DCARGUE_ID;
				}

				public Boolean DCARGUE_IDIsNullable(){
				    return true;
				}
				public Boolean DCARGUE_IDIsKey(){
				    return false;
				}
				public Integer DCARGUE_IDLength(){
				    return 0;
				}
				public Integer DCARGUE_IDPrecision(){
				    return null;
				}
				public String DCARGUE_IDDefault(){
				
					return null;
				
				}
				public String DCARGUE_IDComment(){
				
				    return "FK - ACM_DCARGUE";
				
				}
				public String DCARGUE_IDPattern(){
				
					return "";
				
				}
				public String DCARGUE_IDOriginalDbColumnName(){
				
					return "DCARGUE_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "'SYSDATE'";
				
				}
				public String FECHAComment(){
				
				    return "Fecha de registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal USUARIOS_ID;

				public BigDecimal getUSUARIOS_ID () {
					return this.USUARIOS_ID;
				}

				public Boolean USUARIOS_IDIsNullable(){
				    return true;
				}
				public Boolean USUARIOS_IDIsKey(){
				    return false;
				}
				public Integer USUARIOS_IDLength(){
				    return 0;
				}
				public Integer USUARIOS_IDPrecision(){
				    return null;
				}
				public String USUARIOS_IDDefault(){
				
					return null;
				
				}
				public String USUARIOS_IDComment(){
				
				    return "FK - GEN_USUARIOS";
				
				}
				public String USUARIOS_IDPattern(){
				
					return "";
				
				}
				public String USUARIOS_IDOriginalDbColumnName(){
				
					return "USUARIOS_ID";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return null;
				
				}
				public String UORG_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String TIPIFICACION;

				public String getTIPIFICACION () {
					return this.TIPIFICACION;
				}

				public Boolean TIPIFICACIONIsNullable(){
				    return true;
				}
				public Boolean TIPIFICACIONIsKey(){
				    return false;
				}
				public Integer TIPIFICACIONLength(){
				    return 200;
				}
				public Integer TIPIFICACIONPrecision(){
				    return 0;
				}
				public String TIPIFICACIONDefault(){
				
					return null;
				
				}
				public String TIPIFICACIONComment(){
				
				    return "Aplica para diferenciar si es por CTC o Acuerdo";
				
				}
				public String TIPIFICACIONPattern(){
				
					return "";
				
				}
				public String TIPIFICACIONOriginalDbColumnName(){
				
					return "TIPIFICACION";
				
				}

				
			    public String TDOCUMENTO;

				public String getTDOCUMENTO () {
					return this.TDOCUMENTO;
				}

				public Boolean TDOCUMENTOIsNullable(){
				    return true;
				}
				public Boolean TDOCUMENTOIsKey(){
				    return false;
				}
				public Integer TDOCUMENTOLength(){
				    return 50;
				}
				public Integer TDOCUMENTOPrecision(){
				    return 0;
				}
				public String TDOCUMENTODefault(){
				
					return null;
				
				}
				public String TDOCUMENTOComment(){
				
				    return "Tipo de documento";
				
				}
				public String TDOCUMENTOPattern(){
				
					return "";
				
				}
				public String TDOCUMENTOOriginalDbColumnName(){
				
					return "TDOCUMENTO";
				
				}

				
			    public String TFORMULA;

				public String getTFORMULA () {
					return this.TFORMULA;
				}

				public Boolean TFORMULAIsNullable(){
				    return true;
				}
				public Boolean TFORMULAIsKey(){
				    return false;
				}
				public Integer TFORMULALength(){
				    return 50;
				}
				public Integer TFORMULAPrecision(){
				    return 0;
				}
				public String TFORMULADefault(){
				
					return null;
				
				}
				public String TFORMULAComment(){
				
				    return "Tipo de formula";
				
				}
				public String TFORMULAPattern(){
				
					return "";
				
				}
				public String TFORMULAOriginalDbColumnName(){
				
					return "TFORMULA";
				
				}

				
			    public String TORIGEN;

				public String getTORIGEN () {
					return this.TORIGEN;
				}

				public Boolean TORIGENIsNullable(){
				    return true;
				}
				public Boolean TORIGENIsKey(){
				    return false;
				}
				public Integer TORIGENLength(){
				    return 50;
				}
				public Integer TORIGENPrecision(){
				    return 0;
				}
				public String TORIGENDefault(){
				
					return null;
				
				}
				public String TORIGENComment(){
				
				    return "Tipo de origen";
				
				}
				public String TORIGENPattern(){
				
					return "";
				
				}
				public String TORIGENOriginalDbColumnName(){
				
					return "TORIGEN";
				
				}

				
			    public BigDecimal DOSIS;

				public BigDecimal getDOSIS () {
					return this.DOSIS;
				}

				public Boolean DOSISIsNullable(){
				    return true;
				}
				public Boolean DOSISIsKey(){
				    return false;
				}
				public Integer DOSISLength(){
				    return 0;
				}
				public Integer DOSISPrecision(){
				    return null;
				}
				public String DOSISDefault(){
				
					return null;
				
				}
				public String DOSISComment(){
				
				    return "Dosis";
				
				}
				public String DOSISPattern(){
				
					return "";
				
				}
				public String DOSISOriginalDbColumnName(){
				
					return "DOSIS";
				
				}

				
			    public BigDecimal FRECUENCIA;

				public BigDecimal getFRECUENCIA () {
					return this.FRECUENCIA;
				}

				public Boolean FRECUENCIAIsNullable(){
				    return true;
				}
				public Boolean FRECUENCIAIsKey(){
				    return false;
				}
				public Integer FRECUENCIALength(){
				    return 0;
				}
				public Integer FRECUENCIAPrecision(){
				    return null;
				}
				public String FRECUENCIADefault(){
				
					return null;
				
				}
				public String FRECUENCIAComment(){
				
				    return "Frecuencia";
				
				}
				public String FRECUENCIAPattern(){
				
					return "";
				
				}
				public String FRECUENCIAOriginalDbColumnName(){
				
					return "FRECUENCIA";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return true;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return 0;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return null;
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "FK - MED_PRODUCTOS";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal CIE10_ID;

				public BigDecimal getCIE10_ID () {
					return this.CIE10_ID;
				}

				public Boolean CIE10_IDIsNullable(){
				    return true;
				}
				public Boolean CIE10_IDIsKey(){
				    return false;
				}
				public Integer CIE10_IDLength(){
				    return 0;
				}
				public Integer CIE10_IDPrecision(){
				    return null;
				}
				public String CIE10_IDDefault(){
				
					return null;
				
				}
				public String CIE10_IDComment(){
				
				    return "FK - GEN_CIE10";
				
				}
				public String CIE10_IDPattern(){
				
					return "";
				
				}
				public String CIE10_IDOriginalDbColumnName(){
				
					return "CIE10_ID";
				
				}

				
			    public BigDecimal ESM_FORMULACION_ID;

				public BigDecimal getESM_FORMULACION_ID () {
					return this.ESM_FORMULACION_ID;
				}

				public Boolean ESM_FORMULACION_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_FORMULACION_IDIsKey(){
				    return false;
				}
				public Integer ESM_FORMULACION_IDLength(){
				    return null;
				}
				public Integer ESM_FORMULACION_IDPrecision(){
				    return null;
				}
				public String ESM_FORMULACION_IDDefault(){
				
					return null;
				
				}
				public String ESM_FORMULACION_IDComment(){
				
				    return "";
				
				}
				public String ESM_FORMULACION_IDPattern(){
				
					return "";
				
				}
				public String ESM_FORMULACION_IDOriginalDbColumnName(){
				
					return "ESM_FORMULACION_ID";
				
				}

				
			    public BigDecimal ESM_DISPENSACION_ID;

				public BigDecimal getESM_DISPENSACION_ID () {
					return this.ESM_DISPENSACION_ID;
				}

				public Boolean ESM_DISPENSACION_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_DISPENSACION_IDIsKey(){
				    return false;
				}
				public Integer ESM_DISPENSACION_IDLength(){
				    return null;
				}
				public Integer ESM_DISPENSACION_IDPrecision(){
				    return null;
				}
				public String ESM_DISPENSACION_IDDefault(){
				
					return null;
				
				}
				public String ESM_DISPENSACION_IDComment(){
				
				    return "";
				
				}
				public String ESM_DISPENSACION_IDPattern(){
				
					return "";
				
				}
				public String ESM_DISPENSACION_IDOriginalDbColumnName(){
				
					return "ESM_DISPENSACION_ID";
				
				}

				
			    public BigDecimal ESM_FACTURACION_ID;

				public BigDecimal getESM_FACTURACION_ID () {
					return this.ESM_FACTURACION_ID;
				}

				public Boolean ESM_FACTURACION_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_FACTURACION_IDIsKey(){
				    return false;
				}
				public Integer ESM_FACTURACION_IDLength(){
				    return null;
				}
				public Integer ESM_FACTURACION_IDPrecision(){
				    return null;
				}
				public String ESM_FACTURACION_IDDefault(){
				
					return null;
				
				}
				public String ESM_FACTURACION_IDComment(){
				
				    return "";
				
				}
				public String ESM_FACTURACION_IDPattern(){
				
					return "";
				
				}
				public String ESM_FACTURACION_IDOriginalDbColumnName(){
				
					return "ESM_FACTURACION_ID";
				
				}

				
			    public BigDecimal ESM_ADSCRITO_ID;

				public BigDecimal getESM_ADSCRITO_ID () {
					return this.ESM_ADSCRITO_ID;
				}

				public Boolean ESM_ADSCRITO_IDIsNullable(){
				    return true;
				}
				public Boolean ESM_ADSCRITO_IDIsKey(){
				    return false;
				}
				public Integer ESM_ADSCRITO_IDLength(){
				    return null;
				}
				public Integer ESM_ADSCRITO_IDPrecision(){
				    return null;
				}
				public String ESM_ADSCRITO_IDDefault(){
				
					return null;
				
				}
				public String ESM_ADSCRITO_IDComment(){
				
				    return "";
				
				}
				public String ESM_ADSCRITO_IDPattern(){
				
					return "";
				
				}
				public String ESM_ADSCRITO_IDOriginalDbColumnName(){
				
					return "ESM_ADSCRITO_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL_IVA_INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VTOTAL_FACTURA = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.VTOTAL_ADECUACION_UNIDOSIS = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_DISPENSACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FACTURACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ADSCRITO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION_ID = (BigDecimal) dis.readObject();
					
						this.FACTURA_ID = (BigDecimal) dis.readObject();
					
					this.PREFIJO = readString(dis);
					
					this.NUMERO_FACTURA = readString(dis);
					
					this.FORMULA = readString(dis);
					
					this.TIRILLA = readString(dis);
					
					this.FFORMUALCION = readDate(dis);
					
					this.FDISPENSACION = readDate(dis);
					
					this.DOCUMENTO = readString(dis);
					
						this.TDOCUMENTOS_ID = (BigDecimal) dis.readObject();
					
						this.TFORMULAS_ID = (BigDecimal) dis.readObject();
					
						this.TORIGEN_ID = (BigDecimal) dis.readObject();
					
					this.CODIGOCUM = readString(dis);
					
					this.INVIMA = readString(dis);
					
					this.NOMBREMEDICAMENTO = readString(dis);
					
					this.FVENCIMIENTO = readDate(dis);
					
						this.CANTFORMULADA = (BigDecimal) dis.readObject();
					
						this.CANTENTREGADA = (BigDecimal) dis.readObject();
					
						this.VUNITARIO = (BigDecimal) dis.readObject();
					
						this.SUBTOTAL = (BigDecimal) dis.readObject();
					
						this.INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL_IVA_INTERMEDIACION = (BigDecimal) dis.readObject();
					
						this.VTOTAL = (BigDecimal) dis.readObject();
					
						this.VTOTAL_FACTURA = (BigDecimal) dis.readObject();
					
						this.VGRAVADO = (BigDecimal) dis.readObject();
					
						this.VTOTAL_ADECUACION_UNIDOSIS = (BigDecimal) dis.readObject();
					
						this.DCARGUE_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
						this.USUARIOS_ID = (BigDecimal) dis.readObject();
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.TIPIFICACION = readString(dis);
					
					this.TDOCUMENTO = readString(dis);
					
					this.TFORMULA = readString(dis);
					
					this.TORIGEN = readString(dis);
					
						this.DOSIS = (BigDecimal) dis.readObject();
					
						this.FRECUENCIA = (BigDecimal) dis.readObject();
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
						this.CIE10_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FORMULACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_DISPENSACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_FACTURACION_ID = (BigDecimal) dis.readObject();
					
						this.ESM_ADSCRITO_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL_IVA_INTERMEDIACION);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL_FACTURA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTAL_ADECUACION_UNIDOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_FORMULACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_DISPENSACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_FACTURACION_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESM_ADSCRITO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FACTURA_ID);
					
					// String
				
						writeString(this.PREFIJO,dos);
					
					// String
				
						writeString(this.NUMERO_FACTURA,dos);
					
					// String
				
						writeString(this.FORMULA,dos);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
					// java.util.Date
				
						writeDate(this.FFORMUALCION,dos);
					
					// java.util.Date
				
						writeDate(this.FDISPENSACION,dos);
					
					// String
				
						writeString(this.DOCUMENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TDOCUMENTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TFORMULAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TORIGEN_ID);
					
					// String
				
						writeString(this.CODIGOCUM,dos);
					
					// String
				
						writeString(this.INVIMA,dos);
					
					// String
				
						writeString(this.NOMBREMEDICAMENTO,dos);
					
					// java.util.Date
				
						writeDate(this.FVENCIMIENTO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTFORMULADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CANTENTREGADA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VUNITARIO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SUBTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL_IVA_INTERMEDIACION);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL_FACTURA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VGRAVADO);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTAL_ADECUACION_UNIDOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.USUARIOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.TIPIFICACION,dos);
					
					// String
				
						writeString(this.TDOCUMENTO,dos);
					
					// String
				
						writeString(this.TFORMULA,dos);
					
					// String
				
						writeString(this.TORIGEN,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DOSIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FRECUENCIA);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CIE10_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_FORMULACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_DISPENSACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_FACTURACION_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESM_ADSCRITO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION_ID="+String.valueOf(RECEPCION_ID));
		sb.append(",FACTURA_ID="+String.valueOf(FACTURA_ID));
		sb.append(",PREFIJO="+PREFIJO);
		sb.append(",NUMERO_FACTURA="+NUMERO_FACTURA);
		sb.append(",FORMULA="+FORMULA);
		sb.append(",TIRILLA="+TIRILLA);
		sb.append(",FFORMUALCION="+String.valueOf(FFORMUALCION));
		sb.append(",FDISPENSACION="+String.valueOf(FDISPENSACION));
		sb.append(",DOCUMENTO="+DOCUMENTO);
		sb.append(",TDOCUMENTOS_ID="+String.valueOf(TDOCUMENTOS_ID));
		sb.append(",TFORMULAS_ID="+String.valueOf(TFORMULAS_ID));
		sb.append(",TORIGEN_ID="+String.valueOf(TORIGEN_ID));
		sb.append(",CODIGOCUM="+CODIGOCUM);
		sb.append(",INVIMA="+INVIMA);
		sb.append(",NOMBREMEDICAMENTO="+NOMBREMEDICAMENTO);
		sb.append(",FVENCIMIENTO="+String.valueOf(FVENCIMIENTO));
		sb.append(",CANTFORMULADA="+String.valueOf(CANTFORMULADA));
		sb.append(",CANTENTREGADA="+String.valueOf(CANTENTREGADA));
		sb.append(",VUNITARIO="+String.valueOf(VUNITARIO));
		sb.append(",SUBTOTAL="+String.valueOf(SUBTOTAL));
		sb.append(",INTERMEDIACION="+String.valueOf(INTERMEDIACION));
		sb.append(",VTOTAL_IVA_INTERMEDIACION="+String.valueOf(VTOTAL_IVA_INTERMEDIACION));
		sb.append(",VTOTAL="+String.valueOf(VTOTAL));
		sb.append(",VTOTAL_FACTURA="+String.valueOf(VTOTAL_FACTURA));
		sb.append(",VGRAVADO="+String.valueOf(VGRAVADO));
		sb.append(",VTOTAL_ADECUACION_UNIDOSIS="+String.valueOf(VTOTAL_ADECUACION_UNIDOSIS));
		sb.append(",DCARGUE_ID="+String.valueOf(DCARGUE_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",USUARIOS_ID="+String.valueOf(USUARIOS_ID));
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",TIPIFICACION="+TIPIFICACION);
		sb.append(",TDOCUMENTO="+TDOCUMENTO);
		sb.append(",TFORMULA="+TFORMULA);
		sb.append(",TORIGEN="+TORIGEN);
		sb.append(",DOSIS="+String.valueOf(DOSIS));
		sb.append(",FRECUENCIA="+String.valueOf(FRECUENCIA));
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",CIE10_ID="+String.valueOf(CIE10_ID));
		sb.append(",ESM_FORMULACION_ID="+String.valueOf(ESM_FORMULACION_ID));
		sb.append(",ESM_DISPENSACION_ID="+String.valueOf(ESM_DISPENSACION_ID));
		sb.append(",ESM_FACTURACION_ID="+String.valueOf(ESM_FACTURACION_ID));
		sb.append(",ESM_ADSCRITO_ID="+String.valueOf(ESM_ADSCRITO_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row85Struct implements routines.system.IPersistableRow<row85Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return "";
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row85Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_6Struct implements routines.system.IPersistableRow<after_tHashInput_6Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return "";
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_7Process(globalMap);
		tOracleInput_13Process(globalMap);
		tHashInput_10Process(globalMap);
		tHashInput_13Process(globalMap);
		tHashInput_12Process(globalMap);
		tHashInput_19Process(globalMap);
		tHashInput_20Process(globalMap);
		tHashInput_21Process(globalMap);
		tHashInput_22Process(globalMap);
		tHashInput_23Process(globalMap);
		tOracleInput_18Process(globalMap);

		row85Struct row85 = new row85Struct();
out11Struct out11 = new out11Struct();
out2Struct out2 = new out2Struct();






	
	/**
	 * [tOracleOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_6", false);
		start_Hash.put("tOracleOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tOracleOutput_6 = 0;
		






    
    int nb_line_tOracleOutput_6 = 0;
    int nb_line_update_tOracleOutput_6 = 0;
    int nb_line_inserted_tOracleOutput_6 = 0;
    int nb_line_deleted_tOracleOutput_6 = 0;
    int nb_line_rejected_tOracleOutput_6 = 0;

    int tmp_batchUpdateCount_tOracleOutput_6 = 0;

    int deletedCount_tOracleOutput_6=0;
    int updatedCount_tOracleOutput_6=0;
    int insertedCount_tOracleOutput_6=0;
    int rowsToCommitCount_tOracleOutput_6=0;
    int rejectedCount_tOracleOutput_6=0;

    boolean whetherReject_tOracleOutput_6 = false;

    java.sql.Connection conn_tOracleOutput_6 = null;

    //optional table
    String dbschema_tOracleOutput_6 = null;
    String tableName_tOracleOutput_6 = null;
                    String driverClass_tOracleOutput_6 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_6);
                String url_tOracleOutput_6 = null;
                    url_tOracleOutput_6 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_6 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_6 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_6 = decryptedPassword_tOracleOutput_6;
                dbschema_tOracleOutput_6 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_6 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_6.put("user",dbUser_tOracleOutput_6);
                    atnParamsPrope_tOracleOutput_6.put("password",dbPwd_tOracleOutput_6);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_6.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_6 = java.sql.DriverManager.getConnection(url_tOracleOutput_6, atnParamsPrope_tOracleOutput_6);
        resourceMap.put("conn_tOracleOutput_6", conn_tOracleOutput_6);
            conn_tOracleOutput_6.setAutoCommit(false);
            int commitEvery_tOracleOutput_6 = 10000;
            int commitCounter_tOracleOutput_6 = 0;
        int batchSize_tOracleOutput_6 = 10000;
        int batchSizeCounter_tOracleOutput_6=0;
        int count_tOracleOutput_6=0;

        if(dbschema_tOracleOutput_6 == null || dbschema_tOracleOutput_6.trim().length() == 0) {
            tableName_tOracleOutput_6 = ("ACM_DFACTURAFORMULACION");
        } else {
            tableName_tOracleOutput_6 = dbschema_tOracleOutput_6 + "." + ("ACM_DFACTURAFORMULACION");
        }
                String insert_tOracleOutput_6 = "INSERT INTO " + tableName_tOracleOutput_6 + " (RECEPCION_ID,FACTURA_ID,PREFIJO,NUMERO_FACTURA,FORMULA,TIRILLA,FFORMUALCION,FDISPENSACION,DOCUMENTO,TDOCUMENTOS_ID,TFORMULAS_ID,TORIGEN_ID,CODIGOCUM,INVIMA,NOMBREMEDICAMENTO,FVENCIMIENTO,CANTFORMULADA,CANTENTREGADA,VUNITARIO,SUBTOTAL,INTERMEDIACION,VTOTAL_IVA_INTERMEDIACION,VTOTAL,VTOTAL_FACTURA,VGRAVADO,VTOTAL_ADECUACION_UNIDOSIS,DCARGUE_ID,FECHA,USUARIOS_ID,UORG_ID,TIPIFICACION,TDOCUMENTO,TFORMULA,TORIGEN,DOSIS,FRECUENCIA,PRODUCTOS_ID,CIE10_ID,ESM_FORMULACION_ID,ESM_DISPENSACION_ID,ESM_FACTURACION_ID,ESM_ADSCRITO_ID,DFORMMEDINSUMOS_ID) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_6 = conn_tOracleOutput_6.prepareStatement(insert_tOracleOutput_6);
                        resourceMap.put("pstmt_tOracleOutput_6", pstmt_tOracleOutput_6);





 



/**
 * [tOracleOutput_6 begin ] stop
 */



	
	/**
	 * [tMap_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_11", false);
		start_Hash.put("tMap_11", System.currentTimeMillis());
		
	
	currentComponent="tMap_11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out11");
					}
				
		int tos_count_tMap_11 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct>) 
					globalMap.get( "tHash_Lookup_row47" ))
					;					
					
	

row47Struct row47HashKey = new row47Struct();
row47Struct row47Default = new row47Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_11__Struct  {
}
Var__tMap_11__Struct Var__tMap_11 = new Var__tMap_11__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_11 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row85");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct> tHash_Lookup_row86 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct>) 
					globalMap.get( "tHash_Lookup_row86" ))
					;					
					
	

row86Struct row86HashKey = new row86Struct();
row86Struct row86Default = new row86Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row87Struct> tHash_Lookup_row87 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row87Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row87Struct>) 
					globalMap.get( "tHash_Lookup_row87" ))
					;					
					
	

row87Struct row87HashKey = new row87Struct();
row87Struct row87Default = new row87Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct>) 
					globalMap.get( "tHash_Lookup_row29" ))
					;					
					
	

row29Struct row29HashKey = new row29Struct();
row29Struct row29Default = new row29Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct>) 
					globalMap.get( "tHash_Lookup_row30" ))
					;					
					
	

row30Struct row30HashKey = new row30Struct();
row30Struct row30Default = new row30Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct>) 
					globalMap.get( "tHash_Lookup_row38" ))
					;					
					
	

row38Struct row38HashKey = new row38Struct();
row38Struct row38Default = new row38Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct>) 
					globalMap.get( "tHash_Lookup_row39" ))
					;					
					
	

row39Struct row39HashKey = new row39Struct();
row39Struct row39Default = new row39Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct>) 
					globalMap.get( "tHash_Lookup_row40" ))
					;					
					
	

row40Struct row40HashKey = new row40Struct();
row40Struct row40Default = new row40Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct>) 
					globalMap.get( "tHash_Lookup_row41" ))
					;					
					
	

row41Struct row41HashKey = new row41Struct();
row41Struct row41Default = new row41Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct>) 
					globalMap.get( "tHash_Lookup_row42" ))
					;					
					
	

row42Struct row42HashKey = new row42Struct();
row42Struct row42Default = new row42Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
	BigDecimal FUERZA_DISPENSACION;
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out11Struct out11_tmp = new out11Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row24Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row85.contador = next_tHashInput_6.contador;
	row85.prefijo = next_tHashInput_6.prefijo;
	row85.numero_factura = next_tHashInput_6.numero_factura;
	row85.fecha_factura = next_tHashInput_6.fecha_factura;
	row85.esm_formulacion = next_tHashInput_6.esm_formulacion;
	row85.esm_dispensacion = next_tHashInput_6.esm_dispensacion;
	row85.esm_facturacion = next_tHashInput_6.esm_facturacion;
	row85.esm_adscrito = next_tHashInput_6.esm_adscrito;
	row85.fecha_formulacion = next_tHashInput_6.fecha_formulacion;
	row85.fecha_dispensacion = next_tHashInput_6.fecha_dispensacion;
	row85.fecha_registro_dispensacion = next_tHashInput_6.fecha_registro_dispensacion;
	row85.tipo_documento = next_tHashInput_6.tipo_documento;
	row85.documento = next_tHashInput_6.documento;
	row85.tipificacion = next_tHashInput_6.tipificacion;
	row85.consecutivo_formula = next_tHashInput_6.consecutivo_formula;
	row85.tirilla = next_tHashInput_6.tirilla;
	row85.tipo_formula = next_tHashInput_6.tipo_formula;
	row85.origen_formulacion = next_tHashInput_6.origen_formulacion;
	row85.codigo_atc = next_tHashInput_6.codigo_atc;
	row85.codigo_cum = next_tHashInput_6.codigo_cum;
	row85.invima = next_tHashInput_6.invima;
	row85.codigo_cie10 = next_tHashInput_6.codigo_cie10;
	row85.lote = next_tHashInput_6.lote;
	row85.medico_codigo = next_tHashInput_6.medico_codigo;
	row85.medico_nombre = next_tHashInput_6.medico_nombre;
	row85.fecha_vencimiento = next_tHashInput_6.fecha_vencimiento;
	row85.cantidad_solicitada = next_tHashInput_6.cantidad_solicitada;
	row85.cantidad_despachada = next_tHashInput_6.cantidad_despachada;
	row85.cantidad_pendiente = next_tHashInput_6.cantidad_pendiente;
	row85.dosis = next_tHashInput_6.dosis;
	row85.frecuencia_horas = next_tHashInput_6.frecuencia_horas;
	row85.codigo_interno_servicio = next_tHashInput_6.codigo_interno_servicio;
	row85.valor_unitario = next_tHashInput_6.valor_unitario;
	row85.subtotal = next_tHashInput_6.subtotal;
	row85.valor_total_adecuacion = next_tHashInput_6.valor_total_adecuacion;
	row85.valor_total_iva = next_tHashInput_6.valor_total_iva;
	row85.valor_intermediacion = next_tHashInput_6.valor_intermediacion;
	row85.valor_total_iva_intermediacion = next_tHashInput_6.valor_total_iva_intermediacion;
	row85.valor_total_medicamento = next_tHashInput_6.valor_total_medicamento;
	row85.valor_total_factura = next_tHashInput_6.valor_total_factura;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row85"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row86Struct row86 = null;
					
						row87Struct row87 = null;
					
						row7Struct row7 = null;
					
						row29Struct row29 = null;
					
						row30Struct row30 = null;
					
						row38Struct row38 = null;
					
						row39Struct row39 = null;
					
						row40Struct row40 = null;
					
						row41Struct row41 = null;
					
						row42Struct row42 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row86" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow86 = false;
       		  	    	
       		  	    	
 							row86Struct row86ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row86HashKey.NUMERO = row85.numero_factura;
                        		    		

								
		                        	row86HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row86.lookup( row86HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row86.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_6 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row86Struct fromLookup_row86 = null;
							row86 = row86Default;
										 
							
								 
							
							
								if (tHash_Lookup_row86 !=null && tHash_Lookup_row86.hasNext()) { // G 099
								
							
								
								fromLookup_row86 = tHash_Lookup_row86.next();

							
							
								} // G 099
							
							

							if(fromLookup_row86 != null) {
								row86 = fromLookup_row86;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row87" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow87 = false;
       		  	    	
       		  	    	
 							row87Struct row87ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row87HashKey.SIGLA = row85.tipo_documento;
                        		    		

								
		                        	row87HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row87.lookup( row87HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row87 != null && tHash_Lookup_row87.getCount(row87HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row87' and it contains more one result from keys :  row87.SIGLA = '" + row87HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row87Struct fromLookup_row87 = null;
							row87 = row87Default;
										 
							
								 
							
							
								if (tHash_Lookup_row87 !=null && tHash_Lookup_row87.hasNext()) { // G 099
								
							
								
								fromLookup_row87 = tHash_Lookup_row87.next();

							
							
								} // G 099
							
							

							if(fromLookup_row87 != null) {
								row87 = fromLookup_row87;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row7HashKey.CODIGO = row85.codigo_cie10 ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.CODIGO = '" + row7HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row29" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow29 = false;
       		  	    	
       		  	    	
 							row29Struct row29ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row29HashKey.SIGLA = row85.origen_formulacion ;
                        		    		

								
		                        	row29HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row29.lookup( row29HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row29 != null && tHash_Lookup_row29.getCount(row29HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row29' and it contains more one result from keys :  row29.SIGLA = '" + row29HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row29Struct fromLookup_row29 = null;
							row29 = row29Default;
										 
							
								 
							
							
								if (tHash_Lookup_row29 !=null && tHash_Lookup_row29.hasNext()) { // G 099
								
							
								
								fromLookup_row29 = tHash_Lookup_row29.next();

							
							
								} // G 099
							
							

							if(fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row30" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow30 = false;
       		  	    	
       		  	    	
 							row30Struct row30ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row30HashKey.SIGLA = row85.tipo_formula ;
                        		    		

								
		                        	row30HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row30.lookup( row30HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row30 != null && tHash_Lookup_row30.getCount(row30HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row30' and it contains more one result from keys :  row30.SIGLA = '" + row30HashKey.SIGLA + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row30Struct fromLookup_row30 = null;
							row30 = row30Default;
										 
							
								 
							
							
								if (tHash_Lookup_row30 !=null && tHash_Lookup_row30.hasNext()) { // G 099
								
							
								
								fromLookup_row30 = tHash_Lookup_row30.next();

							
							
								} // G 099
							
							

							if(fromLookup_row30 != null) {
								row30 = fromLookup_row30;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row38" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow38 = false;
       		  	    	
       		  	    	
 							row38Struct row38ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row38HashKey.CODIGO = row85.esm_formulacion ;
                        		    		

								
		                        	row38HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row38.lookup( row38HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row38 != null && tHash_Lookup_row38.getCount(row38HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row38' and it contains more one result from keys :  row38.CODIGO = '" + row38HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row38Struct fromLookup_row38 = null;
							row38 = row38Default;
										 
							
								 
							
							
								if (tHash_Lookup_row38 !=null && tHash_Lookup_row38.hasNext()) { // G 099
								
							
								
								fromLookup_row38 = tHash_Lookup_row38.next();

							
							
								} // G 099
							
							

							if(fromLookup_row38 != null) {
								row38 = fromLookup_row38;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row39" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow39 = false;
       		  	    	
       		  	    	
 							row39Struct row39ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row39HashKey.CODIGO = row85.esm_dispensacion ;
                        		    		

								
		                        	row39HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row39.lookup( row39HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row39 != null && tHash_Lookup_row39.getCount(row39HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row39' and it contains more one result from keys :  row39.CODIGO = '" + row39HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row39Struct fromLookup_row39 = null;
							row39 = row39Default;
										 
							
								 
							
							
								if (tHash_Lookup_row39 !=null && tHash_Lookup_row39.hasNext()) { // G 099
								
							
								
								fromLookup_row39 = tHash_Lookup_row39.next();

							
							
								} // G 099
							
							

							if(fromLookup_row39 != null) {
								row39 = fromLookup_row39;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row40" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow40 = false;
       		  	    	
       		  	    	
 							row40Struct row40ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row40HashKey.CODIGO = row85.esm_facturacion ;
                        		    		

								
		                        	row40HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row40.lookup( row40HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row40 != null && tHash_Lookup_row40.getCount(row40HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row40' and it contains more one result from keys :  row40.CODIGO = '" + row40HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row40Struct fromLookup_row40 = null;
							row40 = row40Default;
										 
							
								 
							
							
								if (tHash_Lookup_row40 !=null && tHash_Lookup_row40.hasNext()) { // G 099
								
							
								
								fromLookup_row40 = tHash_Lookup_row40.next();

							
							
								} // G 099
							
							

							if(fromLookup_row40 != null) {
								row40 = fromLookup_row40;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row41" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow41 = false;
       		  	    	
       		  	    	
 							row41Struct row41ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row41HashKey.CODIGO = row85.esm_adscrito ;
                        		    		

								
		                        	row41HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row41.lookup( row41HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row41 != null && tHash_Lookup_row41.getCount(row41HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row41' and it contains more one result from keys :  row41.CODIGO = '" + row41HashKey.CODIGO + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row41Struct fromLookup_row41 = null;
							row41 = row41Default;
										 
							
								 
							
							
								if (tHash_Lookup_row41 !=null && tHash_Lookup_row41.hasNext()) { // G 099
								
							
								
								fromLookup_row41 = tHash_Lookup_row41.next();

							
							
								} // G 099
							
							

							if(fromLookup_row41 != null) {
								row41 = fromLookup_row41;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row42" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow42 = false;
       		  	    	
       		  	    	
 							row42Struct row42ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row42HashKey.CODIGO_CUM = row85.codigo_cum ;
                        		    		

								
		                        	row42HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row42.lookup( row42HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row42Struct fromLookup_row42 = null;
							row42 = row42Default;
										 
							
								 
							
							
								if (tHash_Lookup_row42 !=null && tHash_Lookup_row42.hasNext()) { // G 099
								
							
								
								fromLookup_row42 = tHash_Lookup_row42.next();

							
							
								} // G 099
							
							

							if(fromLookup_row42 != null) {
								row42 = fromLookup_row42;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;
Var.FUERZA_DISPENSACION = row39.FUERZA_ID == null ? new BigDecimal(0) : row39.FUERZA_ID
;// ###############################
        // ###############################
        // # Output tables

out11 = null;

if(!rejectedInnerJoin_tMap_6 ) {

// # Output table : 'out11'
out11_tmp.RECEPCION_ID = context.vRecepcionId;
out11_tmp.FACTURA_ID = row86.ID ;
out11_tmp.PREFIJO = row86.PREFIJO ;
out11_tmp.NUMERO_FACTURA = row86.NUMERO ;
out11_tmp.FORMULA = row85.consecutivo_formula ;
out11_tmp.TIRILLA = row85.tirilla ;
out11_tmp.FFORMUALCION = row85.fecha_formulacion  == null  ? null : row85.fecha_formulacion.length()==0 ? null: TalendDate.parseDate("dd/MM/yyyy",row85.fecha_formulacion) ;
out11_tmp.FDISPENSACION = row85.fecha_dispensacion  == null  ? null : row85.fecha_dispensacion.length()==0 ? null: TalendDate.parseDate("dd/MM/yyyy HH:mm",row85.fecha_dispensacion) ;
out11_tmp.DOCUMENTO = row85.documento ;
out11_tmp.TDOCUMENTOS_ID = row87.ID ;
out11_tmp.TFORMULAS_ID = row30.ID ;
out11_tmp.TORIGEN_ID = row29.ID ;
out11_tmp.CODIGOCUM = row85.codigo_cum ;
out11_tmp.INVIMA = row85.invima ;
out11_tmp.NOMBREMEDICAMENTO = row42.COMERCIAL ;
out11_tmp.FVENCIMIENTO = row85.fecha_vencimiento  == null  ? null : row85.fecha_vencimiento.length()==0 ? null: TalendDate.parseDate("dd/MM/yyyy",row85.fecha_vencimiento) ;
out11_tmp.CANTFORMULADA = new BigDecimal(row85.cantidad_solicitada) /* new BigDecimal(0) */ ;
out11_tmp.CANTENTREGADA = new BigDecimal(row85.cantidad_despachada)/*new BigDecimal(0) */ ;
out11_tmp.VUNITARIO = new BigDecimal(row85.valor_unitario) ;
out11_tmp.SUBTOTAL = new BigDecimal(row85.subtotal) ;
out11_tmp.INTERMEDIACION = new BigDecimal(row85.valor_intermediacion) ;
out11_tmp.VTOTAL_IVA_INTERMEDIACION = new BigDecimal(row85.valor_total_iva_intermediacion) ;
out11_tmp.VTOTAL = new BigDecimal(row85.valor_total_medicamento  ) ;
out11_tmp.VTOTAL_FACTURA = new BigDecimal(row85.valor_total_factura) ;
out11_tmp.VGRAVADO = new BigDecimal(row85.valor_total_iva ) ;
out11_tmp.VTOTAL_ADECUACION_UNIDOSIS = new BigDecimal(row85.valor_total_adecuacion ) ;
out11_tmp.DCARGUE_ID = context.vArchivo_Id;
out11_tmp.FECHA = row85.fecha_factura  == null  ? null : row85.fecha_factura.length()==0 ? null: TalendDate.parseDate("dd/MM/yyyy",row85.fecha_factura) ;
out11_tmp.USUARIOS_ID = context.USUARIOS_ID;
out11_tmp.UORG_ID = context.UORG_ID;
out11_tmp.TIPIFICACION = StringHandling.UPCASE(row85.tipificacion) ;
out11_tmp.TDOCUMENTO = row85.tipo_documento ;
out11_tmp.TFORMULA = row85.tipo_formula ;
out11_tmp.TORIGEN = row85.origen_formulacion ;
out11_tmp.DOSIS = row85.dosis.equals(" ") ? null: new BigDecimal(row85.dosis) ;
out11_tmp.FRECUENCIA = row85.frecuencia_horas.equals(" ") ? null: new BigDecimal(row85.frecuencia_horas) ;
out11_tmp.PRODUCTOS_ID = row42.ID ;
out11_tmp.CIE10_ID = row7.ID ;
out11_tmp.ESM_FORMULACION_ID = row38.ESTABLECIMIENTOID ;
out11_tmp.ESM_DISPENSACION_ID = row39.ESTABLECIMIENTOID ;
out11_tmp.ESM_FACTURACION_ID = row40.ESTABLECIMIENTOID ;
out11_tmp.ESM_ADSCRITO_ID = row41.ESTABLECIMIENTOID ;
out11 = out11_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out11"
if(out11 != null) { 



	
	/**
	 * [tMap_11 main ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out11"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_11 = false;
		
						row47Struct row47 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_11 = false;
		boolean mainRowRejected_tMap_11 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row47" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow47 = false;
       		  	    	
       		  	    	
 							row47Struct row47ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_11) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_11 = false;
								
                        		    		    row47HashKey.CONSECUTIVO = out11.FORMULA ;
                        		    		
                        		    		    row47HashKey.PRODUCTOS_ID = out11.PRODUCTOS_ID ;
                        		    		
                        		    		    row47HashKey.TIRILLA = out11.TIRILLA ;
                        		    		

								
		                        	row47HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row47.lookup( row47HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row47Struct fromLookup_row47 = null;
							row47 = row47Default;
										 
							
								 
							
							
								if (tHash_Lookup_row47 !=null && tHash_Lookup_row47.hasNext()) { // G 099
								
							
								
								fromLookup_row47 = tHash_Lookup_row47.next();

							
							
								} // G 099
							
							

							if(fromLookup_row47 != null) {
								row47 = fromLookup_row47;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_11__Struct Var = Var__tMap_11;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.RECEPCION_ID = out11.RECEPCION_ID ;
out2_tmp.FACTURA_ID = out11.FACTURA_ID ;
out2_tmp.PREFIJO = out11.PREFIJO ;
out2_tmp.NUMERO_FACTURA = out11.NUMERO_FACTURA ;
out2_tmp.FORMULA = out11.FORMULA ;
out2_tmp.TIRILLA = out11.TIRILLA ;
out2_tmp.FFORMUALCION = out11.FFORMUALCION ;
out2_tmp.FDISPENSACION = out11.FDISPENSACION ;
out2_tmp.DOCUMENTO = out11.DOCUMENTO ;
out2_tmp.TDOCUMENTOS_ID = out11.TDOCUMENTOS_ID ;
out2_tmp.TFORMULAS_ID = out11.TFORMULAS_ID ;
out2_tmp.TORIGEN_ID = out11.TORIGEN_ID ;
out2_tmp.CODIGOCUM = out11.CODIGOCUM ;
out2_tmp.INVIMA = out11.INVIMA ;
out2_tmp.NOMBREMEDICAMENTO = out11.NOMBREMEDICAMENTO ;
out2_tmp.FVENCIMIENTO = out11.FVENCIMIENTO ;
out2_tmp.CANTFORMULADA = out11.CANTFORMULADA ;
out2_tmp.CANTENTREGADA = out11.CANTENTREGADA ;
out2_tmp.VUNITARIO = out11.VUNITARIO ;
out2_tmp.SUBTOTAL = out11.SUBTOTAL ;
out2_tmp.INTERMEDIACION = out11.INTERMEDIACION ;
out2_tmp.VTOTAL_IVA_INTERMEDIACION = out11.VTOTAL_IVA_INTERMEDIACION ;
out2_tmp.VTOTAL = out11.VTOTAL ;
out2_tmp.VTOTAL_FACTURA = out11.VTOTAL_FACTURA ;
out2_tmp.VGRAVADO = out11.VGRAVADO ;
out2_tmp.VTOTAL_ADECUACION_UNIDOSIS = out11.VTOTAL_ADECUACION_UNIDOSIS ;
out2_tmp.DCARGUE_ID = out11.DCARGUE_ID ;
out2_tmp.FECHA = out11.FECHA ;
out2_tmp.USUARIOS_ID = out11.USUARIOS_ID ;
out2_tmp.UORG_ID = out11.UORG_ID ;
out2_tmp.TIPIFICACION = out11.TIPIFICACION ;
out2_tmp.TDOCUMENTO = out11.TDOCUMENTO ;
out2_tmp.TFORMULA = out11.TFORMULA ;
out2_tmp.TORIGEN = out11.TORIGEN ;
out2_tmp.DOSIS = out11.DOSIS ;
out2_tmp.FRECUENCIA = out11.FRECUENCIA ;
out2_tmp.PRODUCTOS_ID = out11.PRODUCTOS_ID ;
out2_tmp.CIE10_ID = out11.CIE10_ID ;
out2_tmp.ESM_FORMULACION_ID = out11.ESM_FORMULACION_ID ;
out2_tmp.ESM_DISPENSACION_ID = out11.ESM_DISPENSACION_ID ;
out2_tmp.ESM_FACTURACION_ID = out11.ESM_FACTURACION_ID ;
out2_tmp.ESM_ADSCRITO_ID = out11.ESM_ADSCRITO_ID ;
out2_tmp.DFORMMEDINSUMOS_ID = row47.DFORMEDINSUMOS_ID ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_11 = false;










 


	tos_count_tMap_11++;

/**
 * [tMap_11 main ] stop
 */
	
	/**
	 * [tMap_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tOracleOutput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					



        whetherReject_tOracleOutput_6 = false;
                        pstmt_tOracleOutput_6.setBigDecimal(1, out2.RECEPCION_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(2, out2.FACTURA_ID);

                        if(out2.PREFIJO == null) {
pstmt_tOracleOutput_6.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(3, out2.PREFIJO);
}

                        if(out2.NUMERO_FACTURA == null) {
pstmt_tOracleOutput_6.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(4, out2.NUMERO_FACTURA);
}

                        if(out2.FORMULA == null) {
pstmt_tOracleOutput_6.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(5, out2.FORMULA);
}

                        if(out2.TIRILLA == null) {
pstmt_tOracleOutput_6.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(6, out2.TIRILLA);
}

                        if(out2.FFORMUALCION != null) {
pstmt_tOracleOutput_6.setObject(7, new java.sql.Timestamp(out2.FFORMUALCION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_6.setNull(7, java.sql.Types.DATE);
}

                        if(out2.FDISPENSACION != null) {
pstmt_tOracleOutput_6.setObject(8, new java.sql.Timestamp(out2.FDISPENSACION.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_6.setNull(8, java.sql.Types.DATE);
}

                        if(out2.DOCUMENTO == null) {
pstmt_tOracleOutput_6.setNull(9, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(9, out2.DOCUMENTO);
}

                        pstmt_tOracleOutput_6.setBigDecimal(10, out2.TDOCUMENTOS_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(11, out2.TFORMULAS_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(12, out2.TORIGEN_ID);

                        if(out2.CODIGOCUM == null) {
pstmt_tOracleOutput_6.setNull(13, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(13, out2.CODIGOCUM);
}

                        if(out2.INVIMA == null) {
pstmt_tOracleOutput_6.setNull(14, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(14, out2.INVIMA);
}

                        if(out2.NOMBREMEDICAMENTO == null) {
pstmt_tOracleOutput_6.setNull(15, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(15, out2.NOMBREMEDICAMENTO);
}

                        if(out2.FVENCIMIENTO != null) {
pstmt_tOracleOutput_6.setObject(16, new java.sql.Timestamp(out2.FVENCIMIENTO.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_6.setNull(16, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_6.setBigDecimal(17, out2.CANTFORMULADA);

                        pstmt_tOracleOutput_6.setBigDecimal(18, out2.CANTENTREGADA);

                        pstmt_tOracleOutput_6.setBigDecimal(19, out2.VUNITARIO);

                        pstmt_tOracleOutput_6.setBigDecimal(20, out2.SUBTOTAL);

                        pstmt_tOracleOutput_6.setBigDecimal(21, out2.INTERMEDIACION);

                        pstmt_tOracleOutput_6.setBigDecimal(22, out2.VTOTAL_IVA_INTERMEDIACION);

                        pstmt_tOracleOutput_6.setBigDecimal(23, out2.VTOTAL);

                        pstmt_tOracleOutput_6.setBigDecimal(24, out2.VTOTAL_FACTURA);

                        pstmt_tOracleOutput_6.setBigDecimal(25, out2.VGRAVADO);

                        pstmt_tOracleOutput_6.setBigDecimal(26, out2.VTOTAL_ADECUACION_UNIDOSIS);

                        pstmt_tOracleOutput_6.setBigDecimal(27, out2.DCARGUE_ID);

                        if(out2.FECHA != null) {
pstmt_tOracleOutput_6.setObject(28, new java.sql.Timestamp(out2.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_6.setNull(28, java.sql.Types.DATE);
}

                        pstmt_tOracleOutput_6.setBigDecimal(29, out2.USUARIOS_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(30, out2.UORG_ID);

                        if(out2.TIPIFICACION == null) {
pstmt_tOracleOutput_6.setNull(31, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(31, out2.TIPIFICACION);
}

                        if(out2.TDOCUMENTO == null) {
pstmt_tOracleOutput_6.setNull(32, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(32, out2.TDOCUMENTO);
}

                        if(out2.TFORMULA == null) {
pstmt_tOracleOutput_6.setNull(33, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(33, out2.TFORMULA);
}

                        if(out2.TORIGEN == null) {
pstmt_tOracleOutput_6.setNull(34, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_6.setString(34, out2.TORIGEN);
}

                        pstmt_tOracleOutput_6.setBigDecimal(35, out2.DOSIS);

                        pstmt_tOracleOutput_6.setBigDecimal(36, out2.FRECUENCIA);

                        pstmt_tOracleOutput_6.setBigDecimal(37, out2.PRODUCTOS_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(38, out2.CIE10_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(39, out2.ESM_FORMULACION_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(40, out2.ESM_DISPENSACION_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(41, out2.ESM_FACTURACION_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(42, out2.ESM_ADSCRITO_ID);

                        pstmt_tOracleOutput_6.setBigDecimal(43, out2.DFORMMEDINSUMOS_ID);

                pstmt_tOracleOutput_6.addBatch();
                nb_line_tOracleOutput_6++;
                batchSizeCounter_tOracleOutput_6++;
            if (batchSize_tOracleOutput_6 > 0 &&  batchSize_tOracleOutput_6 <= batchSizeCounter_tOracleOutput_6) {
                try {
                    pstmt_tOracleOutput_6.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
			        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
			    	String errormessage_tOracleOutput_6;
					if (ne_tOracleOutput_6 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
						errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
					}else{
						errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_6);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                    insertedCount_tOracleOutput_6
                += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                batchSizeCounter_tOracleOutput_6 = 0;
            }
                commitCounter_tOracleOutput_6++;
                if(commitEvery_tOracleOutput_6 <= commitCounter_tOracleOutput_6) {
                    if(batchSizeCounter_tOracleOutput_6 > 0) {
                        try {
                            pstmt_tOracleOutput_6.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
					        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
					    	String errormessage_tOracleOutput_6;
							if (ne_tOracleOutput_6 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
								errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
							}else{
								errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_6);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
                            insertedCount_tOracleOutput_6
                        += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                        rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    }
                    conn_tOracleOutput_6.commit();
                    if(rowsToCommitCount_tOracleOutput_6 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_6 = 0;
                    }
                    commitCounter_tOracleOutput_6=0;
                    	batchSizeCounter_tOracleOutput_6=0;
                }

 


	tos_count_tOracleOutput_6++;

/**
 * [tOracleOutput_6 main ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	

 



/**
 * [tOracleOutput_6 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 process_data_end ] stop
 */

} // End of branch "out11"




	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row86 != null) {
						tHash_Lookup_row86.endGet();
					}
					globalMap.remove( "tHash_Lookup_row86" );

					
					
				
					if(tHash_Lookup_row87 != null) {
						tHash_Lookup_row87.endGet();
					}
					globalMap.remove( "tHash_Lookup_row87" );

					
					
				
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
					if(tHash_Lookup_row29 != null) {
						tHash_Lookup_row29.endGet();
					}
					globalMap.remove( "tHash_Lookup_row29" );

					
					
				
					if(tHash_Lookup_row30 != null) {
						tHash_Lookup_row30.endGet();
					}
					globalMap.remove( "tHash_Lookup_row30" );

					
					
				
					if(tHash_Lookup_row38 != null) {
						tHash_Lookup_row38.endGet();
					}
					globalMap.remove( "tHash_Lookup_row38" );

					
					
				
					if(tHash_Lookup_row39 != null) {
						tHash_Lookup_row39.endGet();
					}
					globalMap.remove( "tHash_Lookup_row39" );

					
					
				
					if(tHash_Lookup_row40 != null) {
						tHash_Lookup_row40.endGet();
					}
					globalMap.remove( "tHash_Lookup_row40" );

					
					
				
					if(tHash_Lookup_row41 != null) {
						tHash_Lookup_row41.endGet();
					}
					globalMap.remove( "tHash_Lookup_row41" );

					
					
				
					if(tHash_Lookup_row42 != null) {
						tHash_Lookup_row42.endGet();
					}
					globalMap.remove( "tHash_Lookup_row42" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row85");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tMap_11 end ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row47 != null) {
						tHash_Lookup_row47.endGet();
					}
					globalMap.remove( "tHash_Lookup_row47" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out11");
			  	}
			  	
 

ok_Hash.put("tMap_11", true);
end_Hash.put("tMap_11", System.currentTimeMillis());




/**
 * [tMap_11 end ] stop
 */

	
	/**
	 * [tOracleOutput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_6 > 0) {
            try {
            	if (pstmt_tOracleOutput_6 != null) {
					
					pstmt_tOracleOutput_6.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_6){
globalMap.put("tOracleOutput_6_ERROR_MESSAGE",e_tOracleOutput_6.getMessage());
		        java.sql.SQLException ne_tOracleOutput_6 = e_tOracleOutput_6.getNextException(),sqle_tOracleOutput_6=null;
		    	String errormessage_tOracleOutput_6;
				if (ne_tOracleOutput_6 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_6 = new java.sql.SQLException(e_tOracleOutput_6.getMessage() + "\ncaused by: " + ne_tOracleOutput_6.getMessage(), ne_tOracleOutput_6.getSQLState(), ne_tOracleOutput_6.getErrorCode(), ne_tOracleOutput_6);
					errormessage_tOracleOutput_6 = sqle_tOracleOutput_6.getMessage();
				}else{
					errormessage_tOracleOutput_6 = e_tOracleOutput_6.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_6);
            	
        	}
        	if (pstmt_tOracleOutput_6 != null) {
            	tmp_batchUpdateCount_tOracleOutput_6 = pstmt_tOracleOutput_6.getUpdateCount();
    	    	
    	    		insertedCount_tOracleOutput_6
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
				rowsToCommitCount_tOracleOutput_6 += (tmp_batchUpdateCount_tOracleOutput_6!=-1?tmp_batchUpdateCount_tOracleOutput_6:0);
            }
        }
        if(pstmt_tOracleOutput_6 != null) {
			
				pstmt_tOracleOutput_6.close();
				resourceMap.remove("pstmt_tOracleOutput_6");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_6", true);
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
		}
		conn_tOracleOutput_6.commit();
		if(commitCounter_tOracleOutput_6 > 0 && rowsToCommitCount_tOracleOutput_6 != 0) {
			
			rowsToCommitCount_tOracleOutput_6 = 0;
		}
		commitCounter_tOracleOutput_6 = 0;
		
		
		conn_tOracleOutput_6 .close();
		
		resourceMap.put("finish_tOracleOutput_6", true);
   	

	
	nb_line_deleted_tOracleOutput_6=nb_line_deleted_tOracleOutput_6+ deletedCount_tOracleOutput_6;
	nb_line_update_tOracleOutput_6=nb_line_update_tOracleOutput_6 + updatedCount_tOracleOutput_6;
	nb_line_inserted_tOracleOutput_6=nb_line_inserted_tOracleOutput_6 + insertedCount_tOracleOutput_6;
	nb_line_rejected_tOracleOutput_6=nb_line_rejected_tOracleOutput_6 + rejectedCount_tOracleOutput_6;
	
        globalMap.put("tOracleOutput_6_NB_LINE",nb_line_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_UPDATED",nb_line_update_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_6);
        globalMap.put("tOracleOutput_6_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_6);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_6", true);
end_Hash.put("tOracleOutput_6", System.currentTimeMillis());




/**
 * [tOracleOutput_6 end ] stop
 */









				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk16", 0, "ok");
								} 
							
							tOracleRow_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_11"
					     			globalMap.remove("tHash_Lookup_row47"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row87"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row86"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row29"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row30"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row38"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row39"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row40"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row41"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row42"); 
				     			
				try{
					
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tMap_11 finally ] start
	 */

	

	
	
	currentComponent="tMap_11";
	
	

 



/**
 * [tMap_11 finally ] stop
 */

	
	/**
	 * [tOracleOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_6";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_6") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_6 = null;
                if ((pstmtToClose_tOracleOutput_6 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_6")) != null) {
                    pstmtToClose_tOracleOutput_6.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_6") == null){
            java.sql.Connection ctn_tOracleOutput_6 = null;
            if((ctn_tOracleOutput_6 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_6")) != null){
                try {
                    ctn_tOracleOutput_6.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_6) {
                    String errorMessage_tOracleOutput_6 = "failed to close the connection in tOracleOutput_6 :" + sqlEx_tOracleOutput_6.getMessage();
                    System.err.println(errorMessage_tOracleOutput_6);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_6 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tOracleRow_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleRow_1", false);
		start_Hash.put("tOracleRow_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleRow_1";
	
	
		int tos_count_tOracleRow_1 = 0;
		

	java.sql.Connection conn_tOracleRow_1 = null;
	String query_tOracleRow_1 = "";
	boolean whetherReject_tOracleRow_1 = false;
	int count_tOracleRow_1 = 0;
				conn_tOracleRow_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
			
        resourceMap.put("conn_tOracleRow_1", conn_tOracleRow_1);
        java.sql.Statement stmt_tOracleRow_1 = conn_tOracleRow_1.createStatement();
        resourceMap.put("stmt_tOracleRow_1", stmt_tOracleRow_1);

 



/**
 * [tOracleRow_1 begin ] stop
 */
	
	/**
	 * [tOracleRow_1 main ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

query_tOracleRow_1 = "update ACM_RECEPCION \nset vtotal = (select sum(valor) from acm_factura where recepcion_id = '" + context.vRecepcionId + "')\nwhere id = " + context.vRecepcionId;
whetherReject_tOracleRow_1 = false;
globalMap.put("tOracleRow_1_QUERY",query_tOracleRow_1);
try {
		stmt_tOracleRow_1.execute(query_tOracleRow_1);
		
	} catch (java.lang.Exception e) {
globalMap.put("tOracleRow_1_ERROR_MESSAGE",e.getMessage());
		whetherReject_tOracleRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tOracleRow_1) {
		
	}
	

 


	tos_count_tOracleRow_1++;

/**
 * [tOracleRow_1 main ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

 



/**
 * [tOracleRow_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleRow_1 end ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

	globalMap.put("tOracleRow_1_NB_LINE", count_tOracleRow_1);
        stmt_tOracleRow_1.close();
        resourceMap.remove("stmt_tOracleRow_1");
    resourceMap.put("statementClosed_tOracleRow_1", true);
    resourceMap.put("finish_tOracleRow_1", true);

 

ok_Hash.put("tOracleRow_1", true);
end_Hash.put("tOracleRow_1", System.currentTimeMillis());




/**
 * [tOracleRow_1 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleRow_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFixedFlowInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleRow_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleRow_1";
	
	

    if (resourceMap.get("statementClosed_tOracleRow_1") == null) {
            java.sql.Statement stmtToClose_tOracleRow_1 = null;
            if ((stmtToClose_tOracleRow_1 = (java.sql.Statement) resourceMap.remove("stmt_tOracleRow_1")) != null) {
                stmtToClose_tOracleRow_1.close();
            }
    }
 



/**
 * [tOracleRow_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleRow_1_SUBPROCESS_STATE", 1);
	}
	


public static class row82Struct implements routines.system.IPersistableRow<row82Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal DCARGUE_ID_;

				public BigDecimal getDCARGUE_ID_ () {
					return this.DCARGUE_ID_;
				}

				public Boolean DCARGUE_ID_IsNullable(){
				    return true;
				}
				public Boolean DCARGUE_ID_IsKey(){
				    return false;
				}
				public Integer DCARGUE_ID_Length(){
				    return null;
				}
				public Integer DCARGUE_ID_Precision(){
				    return null;
				}
				public String DCARGUE_ID_Default(){
				
					return null;
				
				}
				public String DCARGUE_ID_Comment(){
				
				    return "";
				
				}
				public String DCARGUE_ID_Pattern(){
				
					return "";
				
				}
				public String DCARGUE_ID_OriginalDbColumnName(){
				
					return "DCARGUE_ID_";
				
				}

				
			    public BigDecimal ESTADO_ID_;

				public BigDecimal getESTADO_ID_ () {
					return this.ESTADO_ID_;
				}

				public Boolean ESTADO_ID_IsNullable(){
				    return true;
				}
				public Boolean ESTADO_ID_IsKey(){
				    return false;
				}
				public Integer ESTADO_ID_Length(){
				    return null;
				}
				public Integer ESTADO_ID_Precision(){
				    return null;
				}
				public String ESTADO_ID_Default(){
				
					return null;
				
				}
				public String ESTADO_ID_Comment(){
				
				    return "";
				
				}
				public String ESTADO_ID_Pattern(){
				
					return "";
				
				}
				public String ESTADO_ID_OriginalDbColumnName(){
				
					return "ESTADO_ID_";
				
				}

				
			    public String SPROC_;

				public String getSPROC_ () {
					return this.SPROC_;
				}

				public Boolean SPROC_IsNullable(){
				    return true;
				}
				public Boolean SPROC_IsKey(){
				    return false;
				}
				public Integer SPROC_Length(){
				    return null;
				}
				public Integer SPROC_Precision(){
				    return null;
				}
				public String SPROC_Default(){
				
					return null;
				
				}
				public String SPROC_Comment(){
				
				    return "";
				
				}
				public String SPROC_Pattern(){
				
					return "";
				
				}
				public String SPROC_OriginalDbColumnName(){
				
					return "SPROC_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DCARGUE_ID_="+String.valueOf(DCARGUE_ID_));
		sb.append(",ESTADO_ID_="+String.valueOf(ESTADO_ID_));
		sb.append(",SPROC_="+SPROC_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row82Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row82Struct row82 = new row82Struct();




	
	/**
	 * [tOracleSP_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_3", false);
		start_Hash.put("tOracleSP_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row82");
					}
				
		int tos_count_tOracleSP_3 = 0;
		

	java.sql.Connection connection_tOracleSP_3 = null;
	connection_tOracleSP_3 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_3 = connection_tOracleSP_3.prepareCall("{call " + "REP.UpdEstadoCargaArchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_3;
String tmpString_tOracleSP_3;

 



/**
 * [tOracleSP_3 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_7", false);
		start_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_7";
	
	
		int tos_count_tFixedFlowInput_7 = 0;
		

	    for (int i_tFixedFlowInput_7 = 0 ; i_tFixedFlowInput_7 < 1 ; i_tFixedFlowInput_7++) {
	                	            	
    	            		row82.DCARGUE_ID_ = context.vArchivo_Id;
    	            	        	            	
    	            		row82.ESTADO_ID_ = context.estProcesado;
    	            	        	            	
    	            		row82.SPROC_ = " ";
    	            	

 



/**
 * [tFixedFlowInput_7 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 


	tos_count_tFixedFlowInput_7++;

/**
 * [tFixedFlowInput_7 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_3 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row82"
						
						);
					}
					

			// code for the argument 1 (DCARGUE_ID_) of type 'IN AUTOMAPPING'
    					if (row82.DCARGUE_ID_ == null) {
    						statement_tOracleSP_3.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(1, row82.DCARGUE_ID_);
    					}
    					
			// code for the argument 2 (ESTADO_ID_) of type 'IN AUTOMAPPING'
    					if (row82.ESTADO_ID_ == null) {
    						statement_tOracleSP_3.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_3.setBigDecimal(2, row82.ESTADO_ID_);
    					}
    					
			// code for the argument 3 (SPROC_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_3.registerOutParameter(3, java.sql.Types.VARCHAR);
		statement_tOracleSP_3.execute();
		

 


	tos_count_tOracleSP_3++;

/**
 * [tOracleSP_3 main ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_7 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

        }
        globalMap.put("tFixedFlowInput_7_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_7", true);
end_Hash.put("tFixedFlowInput_7", System.currentTimeMillis());




/**
 * [tFixedFlowInput_7 end ] stop
 */

	
	/**
	 * [tOracleSP_3 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	


	statement_tOracleSP_3.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row82");
			  	}
			  	
 

ok_Hash.put("tOracleSP_3", true);
end_Hash.put("tOracleSP_3", System.currentTimeMillis());




/**
 * [tOracleSP_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_7 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_7";
	
	

 



/**
 * [tFixedFlowInput_7 finally ] stop
 */

	
	/**
	 * [tOracleSP_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_3";
	
	

 



/**
 * [tOracleSP_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row45Struct implements routines.system.IPersistableRow<row45Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal valor_total_medicamento;

				public BigDecimal getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public BigDecimal total;

				public BigDecimal getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
       			    	dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("valor_total_medicamento="+String.valueOf(valor_total_medicamento));
		sb.append(",total="+String.valueOf(total));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row45Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtAggregateRow_2 implements routines.system.IPersistableRow<OnRowsEndStructtAggregateRow_2> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal valor_total_medicamento;

				public BigDecimal getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public BigDecimal total;

				public BigDecimal getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
       			    	dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("valor_total_medicamento="+String.valueOf(valor_total_medicamento));
		sb.append(",total="+String.valueOf(total));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtAggregateRow_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal valor_total_medicamento;

				public BigDecimal getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public BigDecimal total;

				public BigDecimal getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
       			    	dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("valor_total_medicamento="+String.valueOf(valor_total_medicamento));
		sb.append(",total="+String.valueOf(total));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row44Struct implements routines.system.IPersistableRow<row44Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return "";
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
			        this.contador = dis.readInt();
					
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
					this.fecha_factura = readString(dis);
					
					this.esm_formulacion = readString(dis);
					
					this.esm_dispensacion = readString(dis);
					
					this.esm_facturacion = readString(dis);
					
					this.esm_adscrito = readString(dis);
					
					this.fecha_formulacion = readString(dis);
					
					this.fecha_dispensacion = readString(dis);
					
					this.fecha_registro_dispensacion = readString(dis);
					
					this.tipo_documento = readString(dis);
					
					this.documento = readString(dis);
					
					this.tipificacion = readString(dis);
					
					this.consecutivo_formula = readString(dis);
					
					this.tirilla = readString(dis);
					
					this.tipo_formula = readString(dis);
					
					this.origen_formulacion = readString(dis);
					
					this.codigo_atc = readString(dis);
					
					this.codigo_cum = readString(dis);
					
					this.invima = readString(dis);
					
					this.codigo_cie10 = readString(dis);
					
					this.lote = readString(dis);
					
					this.medico_codigo = readString(dis);
					
					this.medico_nombre = readString(dis);
					
					this.fecha_vencimiento = readString(dis);
					
					this.cantidad_solicitada = readString(dis);
					
					this.cantidad_despachada = readString(dis);
					
					this.cantidad_pendiente = readString(dis);
					
					this.dosis = readString(dis);
					
					this.frecuencia_horas = readString(dis);
					
					this.codigo_interno_servicio = readString(dis);
					
					this.valor_unitario = readString(dis);
					
					this.subtotal = readString(dis);
					
					this.valor_total_adecuacion = readString(dis);
					
					this.valor_total_iva = readString(dis);
					
					this.valor_intermediacion = readString(dis);
					
					this.valor_total_iva_intermediacion = readString(dis);
					
					this.valor_total_medicamento = readString(dis);
					
					this.valor_total_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.contador);
					
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
					// String
				
						writeString(this.fecha_factura,dos);
					
					// String
				
						writeString(this.esm_formulacion,dos);
					
					// String
				
						writeString(this.esm_dispensacion,dos);
					
					// String
				
						writeString(this.esm_facturacion,dos);
					
					// String
				
						writeString(this.esm_adscrito,dos);
					
					// String
				
						writeString(this.fecha_formulacion,dos);
					
					// String
				
						writeString(this.fecha_dispensacion,dos);
					
					// String
				
						writeString(this.fecha_registro_dispensacion,dos);
					
					// String
				
						writeString(this.tipo_documento,dos);
					
					// String
				
						writeString(this.documento,dos);
					
					// String
				
						writeString(this.tipificacion,dos);
					
					// String
				
						writeString(this.consecutivo_formula,dos);
					
					// String
				
						writeString(this.tirilla,dos);
					
					// String
				
						writeString(this.tipo_formula,dos);
					
					// String
				
						writeString(this.origen_formulacion,dos);
					
					// String
				
						writeString(this.codigo_atc,dos);
					
					// String
				
						writeString(this.codigo_cum,dos);
					
					// String
				
						writeString(this.invima,dos);
					
					// String
				
						writeString(this.codigo_cie10,dos);
					
					// String
				
						writeString(this.lote,dos);
					
					// String
				
						writeString(this.medico_codigo,dos);
					
					// String
				
						writeString(this.medico_nombre,dos);
					
					// String
				
						writeString(this.fecha_vencimiento,dos);
					
					// String
				
						writeString(this.cantidad_solicitada,dos);
					
					// String
				
						writeString(this.cantidad_despachada,dos);
					
					// String
				
						writeString(this.cantidad_pendiente,dos);
					
					// String
				
						writeString(this.dosis,dos);
					
					// String
				
						writeString(this.frecuencia_horas,dos);
					
					// String
				
						writeString(this.codigo_interno_servicio,dos);
					
					// String
				
						writeString(this.valor_unitario,dos);
					
					// String
				
						writeString(this.subtotal,dos);
					
					// String
				
						writeString(this.valor_total_adecuacion,dos);
					
					// String
				
						writeString(this.valor_total_iva,dos);
					
					// String
				
						writeString(this.valor_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_iva_intermediacion,dos);
					
					// String
				
						writeString(this.valor_total_medicamento,dos);
					
					// String
				
						writeString(this.valor_total_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row44Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_24Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_24_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row44Struct row44 = new row44Struct();
out1Struct out1 = new out1Struct();
row45Struct row45 = new row45Struct();





	
	/**
	 * [tAggregateRow_2_AGGOUT begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGOUT", false);
		start_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tAggregateRow_2_AGGOUT = 0;
		

// ------------ Seems it is not used

java.util.Map hashAggreg_tAggregateRow_2 = new java.util.HashMap(); 

// ------------

	class UtilClass_tAggregateRow_2 { // G_OutBegin_AggR_144

		public double sd(Double[] data) {
	        final int n = data.length;
        	if (n < 2) {
	            return Double.NaN;
        	}
        	double d1 = 0d;
        	double d2 =0d;
	        
	        for (int i = 0; i < data.length; i++) {
            	d1 += (data[i]*data[i]);
            	d2 += data[i];
        	}
        
	        return Math.sqrt((n*d1 - d2*d2)/n/(n-1));
	    }
	    
		public void checkedIADD(byte a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		    byte r = (byte) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'short/Short'", "'byte/Byte'"));
		    }
		}
		
		public void checkedIADD(short a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		    short r = (short) (a + b);
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'int/Integer'", "'short/Short'"));
		    }
		}
		
		public void checkedIADD(int a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		    int r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'long/Long'", "'int/Integer'"));
		    }
		}
		
		public void checkedIADD(long a, long b, boolean checkTypeOverFlow, boolean checkUlp) {
		    long r = a + b;
		    if (checkTypeOverFlow && ((a ^ r) & (b ^ r)) < 0) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'long/Long'"));
		    }
		}
		
		public void checkedIADD(float a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    float minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
			    }
			}
			
		    if (checkTypeOverFlow && ((double) a + (double) b > (double) Float.MAX_VALUE) || ((double) a + (double) b < (double) -Float.MAX_VALUE)) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'double' or 'BigDecimal'", "'float/Float'"));
		    }
		}
		
		public void checkedIADD(double a, double b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, byte b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, short b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, int b, boolean checkTypeOverFlow, boolean checkUlp) {
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		public void checkedIADD(double a, float b, boolean checkTypeOverFlow, boolean checkUlp) {
		
			if(checkUlp) {
			    double minAddedValue = Math.ulp(a);
			    if (minAddedValue > Math.abs(b)) {
			        throw new RuntimeException(buildPrecisionMessage(String.valueOf(a), String.valueOf(a), "'BigDecimal'", "'double/Double'"));
			    }
			}
		
		    if (checkTypeOverFlow && (a + b > (double) Double.MAX_VALUE) || (a + b < -Double.MAX_VALUE )) {
		        throw new RuntimeException(buildOverflowMessage(String.valueOf(a), String.valueOf(b), "'BigDecimal'", "'double/Double'"));
		    }
		}
		
		private String buildOverflowMessage(String a, String b, String advicedTypes, String originalType) {
		    return "Type overflow when adding " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}
		
		private String buildPrecisionMessage(String a, String b, String advicedTypes, String originalType) {
		    return "The double precision is unsufficient to add the value " + b + " to " + a
		    + ", to resolve this problem, increase the precision by using "+ advicedTypes +" type in place of "+ originalType +".";
		}

	} // G_OutBegin_AggR_144

	UtilClass_tAggregateRow_2 utilClass_tAggregateRow_2 = new UtilClass_tAggregateRow_2();

	

	class AggOperationStruct_tAggregateRow_2 { // G_OutBegin_AggR_100

		private static final int DEFAULT_HASHCODE = 1;
	    private static final int PRIME = 31;
	    private int hashCode = DEFAULT_HASHCODE;
	    public boolean hashCodeDirty = true;
BigDecimal total_sum;
           			
        
	    @Override
		public int hashCode() {
			if (this.hashCodeDirty) {
				final int prime = PRIME;
				int result = DEFAULT_HASHCODE;
		
	    		this.hashCode = result;
	    		this.hashCodeDirty = false;		
			}
			return this.hashCode;
		}
		
		@Override
		public boolean equals(Object obj) {
			if (this == obj) return true;
			if (obj == null) return false;
			if (getClass() != obj.getClass()) return false;
			final AggOperationStruct_tAggregateRow_2 other = (AggOperationStruct_tAggregateRow_2) obj;
			
			
			return true;
		}
  
        
	} // G_OutBegin_AggR_100

	AggOperationStruct_tAggregateRow_2 operation_result_tAggregateRow_2 = null;
	AggOperationStruct_tAggregateRow_2 operation_finder_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();
	java.util.Map<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2> hash_tAggregateRow_2 = new java.util.HashMap<AggOperationStruct_tAggregateRow_2,AggOperationStruct_tAggregateRow_2>();
	

 



/**
 * [tAggregateRow_2_AGGOUT begin ] stop
 */



	
	/**
	 * [tMap_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_10", false);
		start_Hash.put("tMap_10", System.currentTimeMillis());
		
	
	currentComponent="tMap_10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row44");
					}
				
		int tos_count_tMap_10 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_10__Struct  {
}
Var__tMap_10__Struct Var__tMap_10 = new Var__tMap_10__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_10 begin ] stop
 */



	
	/**
	 * [tHashInput_24 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_24", false);
		start_Hash.put("tHashInput_24", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_24";
	
	
		int tos_count_tHashInput_24 = 0;
		


int nb_line_tHashInput_24 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_24=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_24 = mf_tHashInput_24.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_24==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_24 = tHashFile_tHashInput_24.iterator();
while (iterator_tHashInput_24.hasNext()) {
    row24Struct next_tHashInput_24 = iterator_tHashInput_24.next();

	row44.contador = next_tHashInput_24.contador;
	row44.prefijo = next_tHashInput_24.prefijo;
	row44.numero_factura = next_tHashInput_24.numero_factura;
	row44.fecha_factura = next_tHashInput_24.fecha_factura;
	row44.esm_formulacion = next_tHashInput_24.esm_formulacion;
	row44.esm_dispensacion = next_tHashInput_24.esm_dispensacion;
	row44.esm_facturacion = next_tHashInput_24.esm_facturacion;
	row44.esm_adscrito = next_tHashInput_24.esm_adscrito;
	row44.fecha_formulacion = next_tHashInput_24.fecha_formulacion;
	row44.fecha_dispensacion = next_tHashInput_24.fecha_dispensacion;
	row44.fecha_registro_dispensacion = next_tHashInput_24.fecha_registro_dispensacion;
	row44.tipo_documento = next_tHashInput_24.tipo_documento;
	row44.documento = next_tHashInput_24.documento;
	row44.tipificacion = next_tHashInput_24.tipificacion;
	row44.consecutivo_formula = next_tHashInput_24.consecutivo_formula;
	row44.tirilla = next_tHashInput_24.tirilla;
	row44.tipo_formula = next_tHashInput_24.tipo_formula;
	row44.origen_formulacion = next_tHashInput_24.origen_formulacion;
	row44.codigo_atc = next_tHashInput_24.codigo_atc;
	row44.codigo_cum = next_tHashInput_24.codigo_cum;
	row44.invima = next_tHashInput_24.invima;
	row44.codigo_cie10 = next_tHashInput_24.codigo_cie10;
	row44.lote = next_tHashInput_24.lote;
	row44.medico_codigo = next_tHashInput_24.medico_codigo;
	row44.medico_nombre = next_tHashInput_24.medico_nombre;
	row44.fecha_vencimiento = next_tHashInput_24.fecha_vencimiento;
	row44.cantidad_solicitada = next_tHashInput_24.cantidad_solicitada;
	row44.cantidad_despachada = next_tHashInput_24.cantidad_despachada;
	row44.cantidad_pendiente = next_tHashInput_24.cantidad_pendiente;
	row44.dosis = next_tHashInput_24.dosis;
	row44.frecuencia_horas = next_tHashInput_24.frecuencia_horas;
	row44.codigo_interno_servicio = next_tHashInput_24.codigo_interno_servicio;
	row44.valor_unitario = next_tHashInput_24.valor_unitario;
	row44.subtotal = next_tHashInput_24.subtotal;
	row44.valor_total_adecuacion = next_tHashInput_24.valor_total_adecuacion;
	row44.valor_total_iva = next_tHashInput_24.valor_total_iva;
	row44.valor_intermediacion = next_tHashInput_24.valor_intermediacion;
	row44.valor_total_iva_intermediacion = next_tHashInput_24.valor_total_iva_intermediacion;
	row44.valor_total_medicamento = next_tHashInput_24.valor_total_medicamento;
	row44.valor_total_factura = next_tHashInput_24.valor_total_factura;

 



/**
 * [tHashInput_24 begin ] stop
 */
	
	/**
	 * [tHashInput_24 main ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 


	tos_count_tHashInput_24++;

/**
 * [tHashInput_24 main ] stop
 */
	
	/**
	 * [tHashInput_24 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 process_data_begin ] stop
 */

	
	/**
	 * [tMap_10 main ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row44"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_10 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_10 = false;
		boolean mainRowRejected_tMap_10 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_10__Struct Var = Var__tMap_10;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.valor_total_medicamento = new BigDecimal(row44.valor_total_medicamento) ;
out1_tmp.total = null;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_10 = false;










 


	tos_count_tMap_10++;

/**
 * [tMap_10 main ] stop
 */
	
	/**
	 * [tMap_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tAggregateRow_2_AGGOUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					
	


	operation_finder_tAggregateRow_2.hashCodeDirty = true;
	
	operation_result_tAggregateRow_2 = hash_tAggregateRow_2.get(operation_finder_tAggregateRow_2);

	

	if(operation_result_tAggregateRow_2 == null) { // G_OutMain_AggR_001

		operation_result_tAggregateRow_2 = new AggOperationStruct_tAggregateRow_2();

		
		
		

		hash_tAggregateRow_2.put(operation_result_tAggregateRow_2, operation_result_tAggregateRow_2);
	
	} // G_OutMain_AggR_001


	
					if(operation_result_tAggregateRow_2.total_sum == null) {
						operation_result_tAggregateRow_2.total_sum = new BigDecimal(0);
					}
					operation_result_tAggregateRow_2.total_sum = operation_result_tAggregateRow_2.total_sum.add(
						new BigDecimal(
							String.valueOf(
								out1.valor_total_medicamento
							)
						)
					);
					


 


	tos_count_tAggregateRow_2_AGGOUT++;

/**
 * [tAggregateRow_2_AGGOUT main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGOUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_24 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_24 end ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	
    

		
			nb_line_tHashInput_24++;
		}	
    		
    		mf_tHashInput_24.clearCache("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_24_NB_LINE", nb_line_tHashInput_24);       

 

ok_Hash.put("tHashInput_24", true);
end_Hash.put("tHashInput_24", System.currentTimeMillis());




/**
 * [tHashInput_24 end ] stop
 */

	
	/**
	 * [tMap_10 end ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row44");
			  	}
			  	
 

ok_Hash.put("tMap_10", true);
end_Hash.put("tMap_10", System.currentTimeMillis());




/**
 * [tMap_10 end ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tAggregateRow_2_AGGOUT", true);
end_Hash.put("tAggregateRow_2_AGGOUT", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGOUT end ] stop
 */


	
	/**
	 * [tHashOutput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_20", false);
		start_Hash.put("tHashOutput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row45");
					}
				
		int tos_count_tHashOutput_20 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row45Struct> tHashFile_tHashOutput_20 = null;
		String hashKey_tHashOutput_20 = "tHashFile_CargueMedicamentos_" + pid + "_tHashOutput_20";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_20)){
			    if(mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20) == null){
	      		    mf_tHashOutput_20.getResourceMap().put(hashKey_tHashOutput_20, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row45Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }else{
			    	tHashFile_tHashOutput_20 = mf_tHashOutput_20.getResourceMap().get(hashKey_tHashOutput_20);
			    }
			}
        int nb_line_tHashOutput_20 = 0;

 



/**
 * [tHashOutput_20 begin ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN begin ] start
	 */

	

	
		
		ok_Hash.put("tAggregateRow_2_AGGIN", false);
		start_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	
		int tos_count_tAggregateRow_2_AGGIN = 0;
		

java.util.Collection<AggOperationStruct_tAggregateRow_2> values_tAggregateRow_2 = hash_tAggregateRow_2.values();

globalMap.put("tAggregateRow_2_NB_LINE", values_tAggregateRow_2.size());

for(AggOperationStruct_tAggregateRow_2 aggregated_row_tAggregateRow_2 : values_tAggregateRow_2) { // G_AggR_600



 



/**
 * [tAggregateRow_2_AGGIN begin ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN main ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	
row45.total = aggregated_row_tAggregateRow_2.total_sum;
                                	

 


	tos_count_tAggregateRow_2_AGGIN++;

/**
 * [tAggregateRow_2_AGGIN main ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_20 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row45"
						
						);
					}
					



    
		row45Struct oneRow_tHashOutput_20 = new row45Struct();
				
					oneRow_tHashOutput_20.valor_total_medicamento = row45.valor_total_medicamento;
					oneRow_tHashOutput_20.total = row45.total;
		
        tHashFile_tHashOutput_20.put(oneRow_tHashOutput_20);
        nb_line_tHashOutput_20 ++;

 


	tos_count_tHashOutput_20++;

/**
 * [tHashOutput_20 main ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 process_data_end ] stop
 */



	
	/**
	 * [tAggregateRow_2_AGGIN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN process_data_end ] stop
 */
	
	/**
	 * [tAggregateRow_2_AGGIN end ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

} // G_AggR_600

 

ok_Hash.put("tAggregateRow_2_AGGIN", true);
end_Hash.put("tAggregateRow_2_AGGIN", System.currentTimeMillis());




/**
 * [tAggregateRow_2_AGGIN end ] stop
 */

	
	/**
	 * [tHashOutput_20 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	
globalMap.put("tHashOutput_20_NB_LINE", nb_line_tHashOutput_20);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row45");
			  	}
			  	
 

ok_Hash.put("tHashOutput_20", true);
end_Hash.put("tHashOutput_20", System.currentTimeMillis());




/**
 * [tHashOutput_20 end ] stop
 */












				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_24:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tFixedFlowInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tAggregateRow_2_AGGIN"
							globalMap.remove("tAggregateRow_2");
						
				try{
					
	
	/**
	 * [tHashInput_24 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_24";
	
	

 



/**
 * [tHashInput_24 finally ] stop
 */

	
	/**
	 * [tMap_10 finally ] start
	 */

	

	
	
	currentComponent="tMap_10";
	
	

 



/**
 * [tMap_10 finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGOUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGOUT";
	
	

 



/**
 * [tAggregateRow_2_AGGOUT finally ] stop
 */

	
	/**
	 * [tAggregateRow_2_AGGIN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tAggregateRow_2";
	
	currentComponent="tAggregateRow_2_AGGIN";
	
	

 



/**
 * [tAggregateRow_2_AGGIN finally ] stop
 */

	
	/**
	 * [tHashOutput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_20";
	
	

 



/**
 * [tHashOutput_20 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_24_SUBPROCESS_STATE", 1);
	}
	


public static class RecepcionStruct implements routines.system.IPersistableRow<RecepcionStruct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_102001\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - LLave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public Integer CANTFACTURASDETALLE;

				public Integer getCANTFACTURASDETALLE () {
					return this.CANTFACTURASDETALLE;
				}

				public Boolean CANTFACTURASDETALLEIsNullable(){
				    return true;
				}
				public Boolean CANTFACTURASDETALLEIsKey(){
				    return false;
				}
				public Integer CANTFACTURASDETALLELength(){
				    return 0;
				}
				public Integer CANTFACTURASDETALLEPrecision(){
				    return null;
				}
				public String CANTFACTURASDETALLEDefault(){
				
					return "0";
				
				}
				public String CANTFACTURASDETALLEComment(){
				
				    return "Cantidad de Facturas cargadas en el Archivo de detalle (ACM_DFACTURASERVICIO \u00F3 ACM_DFACTURAFORMULACION)";
				
				}
				public String CANTFACTURASDETALLEPattern(){
				
					return "";
				
				}
				public String CANTFACTURASDETALLEOriginalDbColumnName(){
				
					return "CANTFACTURASDETALLE";
				
				}

				
			    public BigDecimal VTOTALCALCULADO;

				public BigDecimal getVTOTALCALCULADO () {
					return this.VTOTALCALCULADO;
				}

				public Boolean VTOTALCALCULADOIsNullable(){
				    return true;
				}
				public Boolean VTOTALCALCULADOIsKey(){
				    return false;
				}
				public Integer VTOTALCALCULADOLength(){
				    return 0;
				}
				public Integer VTOTALCALCULADOPrecision(){
				    return null;
				}
				public String VTOTALCALCULADODefault(){
				
					return null;
				
				}
				public String VTOTALCALCULADOComment(){
				
				    return "Valor total calculado de la sumatoria de los servicios o medicamentos en la cuenta";
				
				}
				public String VTOTALCALCULADOPattern(){
				
					return "";
				
				}
				public String VTOTALCALCULADOOriginalDbColumnName(){
				
					return "VTOTALCALCULADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final RecepcionStruct other = (RecepcionStruct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(RecepcionStruct other) {

		other.ID = this.ID;
	            other.CANTFACTURASDETALLE = this.CANTFACTURASDETALLE;
	            other.VTOTALCALCULADO = this.VTOTALCALCULADO;
	            
	}

	public void copyKeysDataTo(RecepcionStruct other) {

		other.ID = this.ID;
	            	
	}



	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTFACTURASDETALLE = readInteger(dis);
					
						this.VTOTALCALCULADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
						this.CANTFACTURASDETALLE = readInteger(dis);
					
						this.VTOTALCALCULADO = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTFACTURASDETALLE,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VTOTALCALCULADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// Integer
				
						writeInteger(this.CANTFACTURASDETALLE,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VTOTALCALCULADO);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CANTFACTURASDETALLE="+String.valueOf(CANTFACTURASDETALLE));
		sb.append(",VTOTALCALCULADO="+String.valueOf(VTOTALCALCULADO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(RecepcionStruct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION;

				public BigDecimal getRECEPCION () {
					return this.RECEPCION;
				}

				public Boolean RECEPCIONIsNullable(){
				    return true;
				}
				public Boolean RECEPCIONIsKey(){
				    return false;
				}
				public Integer RECEPCIONLength(){
				    return null;
				}
				public Integer RECEPCIONPrecision(){
				    return null;
				}
				public String RECEPCIONDefault(){
				
					return null;
				
				}
				public String RECEPCIONComment(){
				
				    return "";
				
				}
				public String RECEPCIONPattern(){
				
					return "";
				
				}
				public String RECEPCIONOriginalDbColumnName(){
				
					return "RECEPCION";
				
				}

				
			    public Integer CANTIDAD;

				public Integer getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION="+String.valueOf(RECEPCION));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFixedFlowInput_6Struct implements routines.system.IPersistableRow<after_tFixedFlowInput_6Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal RECEPCION;

				public BigDecimal getRECEPCION () {
					return this.RECEPCION;
				}

				public Boolean RECEPCIONIsNullable(){
				    return true;
				}
				public Boolean RECEPCIONIsKey(){
				    return false;
				}
				public Integer RECEPCIONLength(){
				    return null;
				}
				public Integer RECEPCIONPrecision(){
				    return null;
				}
				public String RECEPCIONDefault(){
				
					return null;
				
				}
				public String RECEPCIONComment(){
				
				    return "";
				
				}
				public String RECEPCIONPattern(){
				
					return "";
				
				}
				public String RECEPCIONOriginalDbColumnName(){
				
					return "RECEPCION";
				
				}

				
			    public Integer CANTIDAD;

				public Integer getCANTIDAD () {
					return this.CANTIDAD;
				}

				public Boolean CANTIDADIsNullable(){
				    return true;
				}
				public Boolean CANTIDADIsKey(){
				    return false;
				}
				public Integer CANTIDADLength(){
				    return null;
				}
				public Integer CANTIDADPrecision(){
				    return null;
				}
				public String CANTIDADDefault(){
				
					return null;
				
				}
				public String CANTIDADComment(){
				
				    return "";
				
				}
				public String CANTIDADPattern(){
				
					return "";
				
				}
				public String CANTIDADOriginalDbColumnName(){
				
					return "CANTIDAD";
				
				}

				


	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.RECEPCION = (BigDecimal) dis.readObject();
					
						this.CANTIDAD = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.RECEPCION);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RECEPCION);
					
					// Integer
				
						writeInteger(this.CANTIDAD,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("RECEPCION="+String.valueOf(RECEPCION));
		sb.append(",CANTIDAD="+String.valueOf(CANTIDAD));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFixedFlowInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_25Process(globalMap);

		row26Struct row26 = new row26Struct();
RecepcionStruct Recepcion = new RecepcionStruct();





	
	/**
	 * [tOracleOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_3", false);
		start_Hash.put("tOracleOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"Recepcion");
					}
				
		int tos_count_tOracleOutput_3 = 0;
		






        int updateKeyCount_tOracleOutput_3 = 1;
        if(updateKeyCount_tOracleOutput_3 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_3 == 3 && true) {        
                throw new RuntimeException("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_3 = 0;
    int nb_line_update_tOracleOutput_3 = 0;
    int nb_line_inserted_tOracleOutput_3 = 0;
    int nb_line_deleted_tOracleOutput_3 = 0;
    int nb_line_rejected_tOracleOutput_3 = 0;

    int tmp_batchUpdateCount_tOracleOutput_3 = 0;

    int deletedCount_tOracleOutput_3=0;
    int updatedCount_tOracleOutput_3=0;
    int insertedCount_tOracleOutput_3=0;
    int rowsToCommitCount_tOracleOutput_3=0;
    int rejectedCount_tOracleOutput_3=0;

    boolean whetherReject_tOracleOutput_3 = false;

    java.sql.Connection conn_tOracleOutput_3 = null;

    //optional table
    String dbschema_tOracleOutput_3 = null;
    String tableName_tOracleOutput_3 = null;
                    String driverClass_tOracleOutput_3 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_3);
                String url_tOracleOutput_3 = null;
                    url_tOracleOutput_3 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
                String dbUser_tOracleOutput_3 = context.db_origen_Login;

	final String decryptedPassword_tOracleOutput_3 = context.db_origen_Password; 

                String dbPwd_tOracleOutput_3 = decryptedPassword_tOracleOutput_3;
                dbschema_tOracleOutput_3 = context.db_origen_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_3 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_3.put("user",dbUser_tOracleOutput_3);
                    atnParamsPrope_tOracleOutput_3.put("password",dbPwd_tOracleOutput_3);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_3.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_3 = java.sql.DriverManager.getConnection(url_tOracleOutput_3, atnParamsPrope_tOracleOutput_3);
        resourceMap.put("conn_tOracleOutput_3", conn_tOracleOutput_3);
            conn_tOracleOutput_3.setAutoCommit(false);
            int commitEvery_tOracleOutput_3 = 10000;
            int commitCounter_tOracleOutput_3 = 0;
        int batchSize_tOracleOutput_3 = 10000;
        int batchSizeCounter_tOracleOutput_3=0;
        int count_tOracleOutput_3=0;

        if(dbschema_tOracleOutput_3 == null || dbschema_tOracleOutput_3.trim().length() == 0) {
            tableName_tOracleOutput_3 = ("ACM_RECEPCION");
        } else {
            tableName_tOracleOutput_3 = dbschema_tOracleOutput_3 + "." + ("ACM_RECEPCION");
        }
                String update_tOracleOutput_3 = "UPDATE " + tableName_tOracleOutput_3 + " SET CANTFACTURASDETALLE = ?,VTOTALCALCULADO = ? WHERE ID = ?";
                java.sql.PreparedStatement pstmt_tOracleOutput_3 = conn_tOracleOutput_3.prepareStatement(update_tOracleOutput_3);
                resourceMap.put("pstmt_tOracleOutput_3", pstmt_tOracleOutput_3);





 



/**
 * [tOracleOutput_3 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row26");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct>) 
					globalMap.get( "tHash_Lookup_row46" ))
					;					
					
	
		tHash_Lookup_row46.initGet();
	

row46Struct row46HashKey = new row46Struct();
row46Struct row46Default = new row46Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
RecepcionStruct Recepcion_tmp = new RecepcionStruct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_6", false);
		start_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_6";
	
	
		int tos_count_tFixedFlowInput_6 = 0;
		

	    for (int i_tFixedFlowInput_6 = 0 ; i_tFixedFlowInput_6 < 1 ; i_tFixedFlowInput_6++) {
	                	            	
    	            		row26.RECEPCION = context.vRecepcionId;
    	            	        	            	
    	            		row26.CANTIDAD = ((Integer)globalMap.get("tHashInput_4_NB_LINE"));
    	            	

 



/**
 * [tFixedFlowInput_6 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 


	tos_count_tFixedFlowInput_6++;

/**
 * [tFixedFlowInput_6 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row26"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row46Struct row46 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row46" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow46 = false;
       		  	    	
       		  	    	
 							row46Struct row46ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row46.lookup( row46HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row46.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow46 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow46 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row46 != null && tHash_Lookup_row46.hasNext()) || forceLooprow46) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row46'
									
                    		  	 
							   
                    		  	 
	       		  	    	row46Struct fromLookup_row46 = null;
							row46 = row46Default;
										 
							
								
								if(!forceLooprow46) { // G 46
								
							
								 
							
								
								fromLookup_row46 = tHash_Lookup_row46.next();

							

							if(fromLookup_row46 != null) {
								row46 = fromLookup_row46;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow46 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

Recepcion = null;


// # Output table : 'Recepcion'
Recepcion_tmp.ID = row26.RECEPCION ;
Recepcion_tmp.CANTFACTURASDETALLE = row26.CANTIDAD ;
Recepcion_tmp.VTOTALCALCULADO = row46.total ;
Recepcion = Recepcion_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "Recepcion"
if(Recepcion != null) { 



	
	/**
	 * [tOracleOutput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"Recepcion"
						
						);
					}
					



        whetherReject_tOracleOutput_3 = false;
                    if(Recepcion.CANTFACTURASDETALLE == null) {
pstmt_tOracleOutput_3.setNull(1, java.sql.Types.INTEGER);
} else {pstmt_tOracleOutput_3.setInt(1, Recepcion.CANTFACTURASDETALLE);
}

                    pstmt_tOracleOutput_3.setBigDecimal(2, Recepcion.VTOTALCALCULADO);


                    pstmt_tOracleOutput_3.setBigDecimal(3 + count_tOracleOutput_3, Recepcion.ID);

                pstmt_tOracleOutput_3.addBatch();
                nb_line_tOracleOutput_3++;
                batchSizeCounter_tOracleOutput_3++;
            if (batchSize_tOracleOutput_3 > 0 &&  batchSize_tOracleOutput_3 <= batchSizeCounter_tOracleOutput_3) {
                try {
                    pstmt_tOracleOutput_3.executeBatch();
                }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
			        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
			    	String errormessage_tOracleOutput_3;
					if (ne_tOracleOutput_3 != null) {
						// build new exception to provide the original cause
						sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
						errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
					}else{
						errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
					}
	            	
	                	System.err.println(errormessage_tOracleOutput_3);
	            	
	        	}
                tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                    updatedCount_tOracleOutput_3
                += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                batchSizeCounter_tOracleOutput_3 = 0;
            }
                commitCounter_tOracleOutput_3++;
                if(commitEvery_tOracleOutput_3 <= commitCounter_tOracleOutput_3) {
                    if(batchSizeCounter_tOracleOutput_3 > 0) {
                        try {
                            pstmt_tOracleOutput_3.executeBatch();
                        }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
					        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
					    	String errormessage_tOracleOutput_3;
							if (ne_tOracleOutput_3 != null) {
								// build new exception to provide the original cause
								sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
								errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
							}else{
								errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
							}
			            	
			                	System.err.println(errormessage_tOracleOutput_3);
			            	
			        	}
                        tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
                            updatedCount_tOracleOutput_3
                        += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                        rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
                    }
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    }
                    conn_tOracleOutput_3.commit();
                    if(rowsToCommitCount_tOracleOutput_3 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_3 = 0;
                    }
                    commitCounter_tOracleOutput_3=0;
                    	batchSizeCounter_tOracleOutput_3=0;
                }

 


	tos_count_tOracleOutput_3++;

/**
 * [tOracleOutput_3 main ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	

 



/**
 * [tOracleOutput_3 process_data_end ] stop
 */

} // End of branch "Recepcion"



	
		} // close loop of lookup 'row46' // G_TM_M_043
	
	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_6 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

        }
        globalMap.put("tFixedFlowInput_6_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_6", true);
end_Hash.put("tFixedFlowInput_6", System.currentTimeMillis());




/**
 * [tFixedFlowInput_6 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row46 != null) {
						tHash_Lookup_row46.endGet();
					}
					globalMap.remove( "tHash_Lookup_row46" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row26");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tOracleOutput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	
	



	
        if(batchSizeCounter_tOracleOutput_3 > 0) {
            try {
            	if (pstmt_tOracleOutput_3 != null) {
					
					pstmt_tOracleOutput_3.executeBatch();
					
        	    }
            }catch (java.sql.BatchUpdateException e_tOracleOutput_3){
globalMap.put("tOracleOutput_3_ERROR_MESSAGE",e_tOracleOutput_3.getMessage());
		        java.sql.SQLException ne_tOracleOutput_3 = e_tOracleOutput_3.getNextException(),sqle_tOracleOutput_3=null;
		    	String errormessage_tOracleOutput_3;
				if (ne_tOracleOutput_3 != null) {
					// build new exception to provide the original cause
					sqle_tOracleOutput_3 = new java.sql.SQLException(e_tOracleOutput_3.getMessage() + "\ncaused by: " + ne_tOracleOutput_3.getMessage(), ne_tOracleOutput_3.getSQLState(), ne_tOracleOutput_3.getErrorCode(), ne_tOracleOutput_3);
					errormessage_tOracleOutput_3 = sqle_tOracleOutput_3.getMessage();
				}else{
					errormessage_tOracleOutput_3 = e_tOracleOutput_3.getMessage();
				}
            	
                	System.err.println(errormessage_tOracleOutput_3);
            	
        	}
        	if (pstmt_tOracleOutput_3 != null) {
            	tmp_batchUpdateCount_tOracleOutput_3 = pstmt_tOracleOutput_3.getUpdateCount();
    	    	
    	    		updatedCount_tOracleOutput_3
    	    	
    	    	+= (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
				rowsToCommitCount_tOracleOutput_3 += (tmp_batchUpdateCount_tOracleOutput_3!=-1?tmp_batchUpdateCount_tOracleOutput_3:0);
            }
        }
        if(pstmt_tOracleOutput_3 != null) {
			
				pstmt_tOracleOutput_3.close();
				resourceMap.remove("pstmt_tOracleOutput_3");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_3", true);
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
		}
		conn_tOracleOutput_3.commit();
		if(commitCounter_tOracleOutput_3 > 0 && rowsToCommitCount_tOracleOutput_3 != 0) {
			
			rowsToCommitCount_tOracleOutput_3 = 0;
		}
		commitCounter_tOracleOutput_3 = 0;
		
		
		conn_tOracleOutput_3 .close();
		
		resourceMap.put("finish_tOracleOutput_3", true);
   	

	
	nb_line_deleted_tOracleOutput_3=nb_line_deleted_tOracleOutput_3+ deletedCount_tOracleOutput_3;
	nb_line_update_tOracleOutput_3=nb_line_update_tOracleOutput_3 + updatedCount_tOracleOutput_3;
	nb_line_inserted_tOracleOutput_3=nb_line_inserted_tOracleOutput_3 + insertedCount_tOracleOutput_3;
	nb_line_rejected_tOracleOutput_3=nb_line_rejected_tOracleOutput_3 + rejectedCount_tOracleOutput_3;
	
        globalMap.put("tOracleOutput_3_NB_LINE",nb_line_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_UPDATED",nb_line_update_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_3);
        globalMap.put("tOracleOutput_3_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_3);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"Recepcion");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_3", true);
end_Hash.put("tOracleOutput_3", System.currentTimeMillis());




/**
 * [tOracleOutput_3 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row46"); 
				     			
				try{
					
	
	/**
	 * [tFixedFlowInput_6 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_6";
	
	

 



/**
 * [tFixedFlowInput_6 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tOracleOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_3";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_3") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_3 = null;
                if ((pstmtToClose_tOracleOutput_3 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_3")) != null) {
                    pstmtToClose_tOracleOutput_3.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_3") == null){
            java.sql.Connection ctn_tOracleOutput_3 = null;
            if((ctn_tOracleOutput_3 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_3")) != null){
                try {
                    ctn_tOracleOutput_3.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_3) {
                    String errorMessage_tOracleOutput_3 = "failed to close the connection in tOracleOutput_3 :" + sqlEx_tOracleOutput_3.getMessage();
                    System.err.println(errorMessage_tOracleOutput_3);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public String error;

				public String getError () {
					return this.error;
				}

				public Boolean errorIsNullable(){
				    return true;
				}
				public Boolean errorIsKey(){
				    return false;
				}
				public Integer errorLength(){
				    return null;
				}
				public Integer errorPrecision(){
				    return 0;
				}
				public String errorDefault(){
				
					return null;
				
				}
				public String errorComment(){
				
				    return "";
				
				}
				public String errorPattern(){
				
					return "";
				
				}
				public String errorOriginalDbColumnName(){
				
					return "error";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.error = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.error,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("error="+error);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row27Struct row27 = new row27Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.Narchivo)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"UTF-8"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row32Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row32Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row32Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row27.error = next_tHashInput_3.error;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row27.error != null) {
                        sb_tFileOutputDelimited_1.append(
                            row27.error
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    		
    		mf_tHashInput_3.clearCache("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tHashInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tFixedFlowInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class copyOfSalida_0Struct implements routines.system.IPersistableRow<copyOfSalida_0Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal PRESTADOR_ID;

				public BigDecimal getPRESTADOR_ID () {
					return this.PRESTADOR_ID;
				}

				public Boolean PRESTADOR_IDIsNullable(){
				    return false;
				}
				public Boolean PRESTADOR_IDIsKey(){
				    return false;
				}
				public Integer PRESTADOR_IDLength(){
				    return 0;
				}
				public Integer PRESTADOR_IDPrecision(){
				    return null;
				}
				public String PRESTADOR_IDDefault(){
				
					return null;
				
				}
				public String PRESTADOR_IDComment(){
				
				    return "FK - GEN_UORG";
				
				}
				public String PRESTADOR_IDPattern(){
				
					return "";
				
				}
				public String PRESTADOR_IDOriginalDbColumnName(){
				
					return "PRESTADOR_ID";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return false;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return 200;
				}
				public Integer ARCHIVOPrecision(){
				    return 0;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "NOMBRE DEL ARCHIVO";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public BigDecimal TARCHIVOS_ID;

				public BigDecimal getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return false;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return 0;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return null;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "FK- ACM_TARCHIVOS";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return false;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 7;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return "'SYSDATE'";
				
				}
				public String FECHAComment(){
				
				    return "Fecha de registro";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String GUID;

				public String getGUID () {
					return this.GUID;
				}

				public Boolean GUIDIsNullable(){
				    return true;
				}
				public Boolean GUIDIsKey(){
				    return false;
				}
				public Integer GUIDLength(){
				    return 100;
				}
				public Integer GUIDPrecision(){
				    return 0;
				}
				public String GUIDDefault(){
				
					return null;
				
				}
				public String GUIDComment(){
				
				    return "GUID para el archivo almacenado en el Storage";
				
				}
				public String GUIDPattern(){
				
					return "";
				
				}
				public String GUIDOriginalDbColumnName(){
				
					return "GUID";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return true;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return 500;
				}
				public Integer TCONTENIDOPrecision(){
				    return 0;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "Campo para la extencion del archivo almacenado en el Storage";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return 0;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "FK - ACM_DCARGUE";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.GUID = readString(dis);
					
					this.TCONTENIDO = readString(dis);
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.PRESTADOR_ID = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.GUID = readString(dis);
					
					this.TCONTENIDO = readString(dis);
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR_ID);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TARCHIVOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.GUID,dos);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR_ID);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TARCHIVOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.GUID,dos);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRESTADOR_ID="+String.valueOf(PRESTADOR_ID));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",GUID="+GUID);
		sb.append(",TCONTENIDO="+TCONTENIDO);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(copyOfSalida_0Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row81Struct implements routines.system.IPersistableRow<row81Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal PRESTADOR;

				public BigDecimal getPRESTADOR () {
					return this.PRESTADOR;
				}

				public Boolean PRESTADORIsNullable(){
				    return true;
				}
				public Boolean PRESTADORIsKey(){
				    return false;
				}
				public Integer PRESTADORLength(){
				    return null;
				}
				public Integer PRESTADORPrecision(){
				    return null;
				}
				public String PRESTADORDefault(){
				
					return null;
				
				}
				public String PRESTADORComment(){
				
				    return "";
				
				}
				public String PRESTADORPattern(){
				
					return "";
				
				}
				public String PRESTADOROriginalDbColumnName(){
				
					return "PRESTADOR";
				
				}

				
			    public String ARCHIVO;

				public String getARCHIVO () {
					return this.ARCHIVO;
				}

				public Boolean ARCHIVOIsNullable(){
				    return true;
				}
				public Boolean ARCHIVOIsKey(){
				    return false;
				}
				public Integer ARCHIVOLength(){
				    return null;
				}
				public Integer ARCHIVOPrecision(){
				    return null;
				}
				public String ARCHIVODefault(){
				
					return null;
				
				}
				public String ARCHIVOComment(){
				
				    return "";
				
				}
				public String ARCHIVOPattern(){
				
					return "";
				
				}
				public String ARCHIVOOriginalDbColumnName(){
				
					return "ARCHIVO";
				
				}

				
			    public BigDecimal TARCHIVOS_ID;

				public BigDecimal getTARCHIVOS_ID () {
					return this.TARCHIVOS_ID;
				}

				public Boolean TARCHIVOS_IDIsNullable(){
				    return true;
				}
				public Boolean TARCHIVOS_IDIsKey(){
				    return false;
				}
				public Integer TARCHIVOS_IDLength(){
				    return null;
				}
				public Integer TARCHIVOS_IDPrecision(){
				    return null;
				}
				public String TARCHIVOS_IDDefault(){
				
					return null;
				
				}
				public String TARCHIVOS_IDComment(){
				
				    return "";
				
				}
				public String TARCHIVOS_IDPattern(){
				
					return "";
				
				}
				public String TARCHIVOS_IDOriginalDbColumnName(){
				
					return "TARCHIVOS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String GUID;

				public String getGUID () {
					return this.GUID;
				}

				public Boolean GUIDIsNullable(){
				    return true;
				}
				public Boolean GUIDIsKey(){
				    return false;
				}
				public Integer GUIDLength(){
				    return null;
				}
				public Integer GUIDPrecision(){
				    return null;
				}
				public String GUIDDefault(){
				
					return null;
				
				}
				public String GUIDComment(){
				
				    return "";
				
				}
				public String GUIDPattern(){
				
					return "";
				
				}
				public String GUIDOriginalDbColumnName(){
				
					return "GUID";
				
				}

				
			    public String TCONTENIDO;

				public String getTCONTENIDO () {
					return this.TCONTENIDO;
				}

				public Boolean TCONTENIDOIsNullable(){
				    return true;
				}
				public Boolean TCONTENIDOIsKey(){
				    return false;
				}
				public Integer TCONTENIDOLength(){
				    return null;
				}
				public Integer TCONTENIDOPrecision(){
				    return null;
				}
				public String TCONTENIDODefault(){
				
					return null;
				
				}
				public String TCONTENIDOComment(){
				
				    return "";
				
				}
				public String TCONTENIDOPattern(){
				
					return "";
				
				}
				public String TCONTENIDOOriginalDbColumnName(){
				
					return "TCONTENIDO";
				
				}

				
			    public BigDecimal PADRE_ID;

				public BigDecimal getPADRE_ID () {
					return this.PADRE_ID;
				}

				public Boolean PADRE_IDIsNullable(){
				    return true;
				}
				public Boolean PADRE_IDIsKey(){
				    return false;
				}
				public Integer PADRE_IDLength(){
				    return null;
				}
				public Integer PADRE_IDPrecision(){
				    return null;
				}
				public String PADRE_IDDefault(){
				
					return null;
				
				}
				public String PADRE_IDComment(){
				
				    return "";
				
				}
				public String PADRE_IDPattern(){
				
					return "";
				
				}
				public String PADRE_IDOriginalDbColumnName(){
				
					return "PADRE_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.GUID = readString(dis);
					
					this.TCONTENIDO = readString(dis);
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.PRESTADOR = (BigDecimal) dis.readObject();
					
					this.ARCHIVO = readString(dis);
					
						this.TARCHIVOS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.GUID = readString(dis);
					
					this.TCONTENIDO = readString(dis);
					
						this.PADRE_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PRESTADOR);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TARCHIVOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.GUID,dos);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRESTADOR);
					
					// String
				
						writeString(this.ARCHIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TARCHIVOS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.GUID,dos);
					
					// String
				
						writeString(this.TCONTENIDO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PADRE_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PRESTADOR="+String.valueOf(PRESTADOR));
		sb.append(",ARCHIVO="+ARCHIVO);
		sb.append(",TARCHIVOS_ID="+String.valueOf(TARCHIVOS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",GUID="+GUID);
		sb.append(",TCONTENIDO="+TCONTENIDO);
		sb.append(",PADRE_ID="+String.valueOf(PADRE_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row81Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row81Struct row81 = new row81Struct();
copyOfSalida_0Struct copyOfSalida_0 = new copyOfSalida_0Struct();





	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"copyOfSalida_0");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("ACM_DCARGUE");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("ACM_DCARGUE");
        }
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (PRESTADOR_ID,ARCHIVO,TARCHIVOS_ID,FECHA,GUID,TCONTENIDO,PADRE_ID) VALUES (?,?,?,?,?,?,?)";    

                        java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                        resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row81");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
copyOfSalida_0Struct copyOfSalida_0_tmp = new copyOfSalida_0Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row81.PRESTADOR = context.PRESTADOR;
    	            	        	            	
    	            		row81.ARCHIVO = "Informe de errores.txt";
    	            	        	            	
    	            		row81.TARCHIVOS_ID = context.TipoRespuesta;
    	            	        	            	
    	            		row81.FECHA = TalendDate.getCurrentDate();
    	            	        	            	
    	            		row81.GUID = context.Narchivo;
    	            	        	            	
    	            		row81.TCONTENIDO = "text/plain";
    	            	        	            	
    	            		row81.PADRE_ID = context.vArchivo_Id;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row81"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		// ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

copyOfSalida_0 = null;


// # Output table : 'copyOfSalida_0'
copyOfSalida_0_tmp.PRESTADOR_ID = row81.PRESTADOR ;
copyOfSalida_0_tmp.ARCHIVO = row81.ARCHIVO ;
copyOfSalida_0_tmp.TARCHIVOS_ID = row81.TARCHIVOS_ID ;
copyOfSalida_0_tmp.FECHA = row81.FECHA ;
copyOfSalida_0_tmp.GUID = row81.GUID ;
copyOfSalida_0_tmp.TCONTENIDO = row81.TCONTENIDO ;
copyOfSalida_0_tmp.PADRE_ID = row81.PADRE_ID ;
copyOfSalida_0 = copyOfSalida_0_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "copyOfSalida_0"
if(copyOfSalida_0 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"copyOfSalida_0"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                        pstmt_tOracleOutput_1.setBigDecimal(1, copyOfSalida_0.PRESTADOR_ID);

                        if(copyOfSalida_0.ARCHIVO == null) {
pstmt_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(2, copyOfSalida_0.ARCHIVO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(3, copyOfSalida_0.TARCHIVOS_ID);

                        if(copyOfSalida_0.FECHA != null) {
pstmt_tOracleOutput_1.setObject(4, new java.sql.Timestamp(copyOfSalida_0.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmt_tOracleOutput_1.setNull(4, java.sql.Types.DATE);
}

                        if(copyOfSalida_0.GUID == null) {
pstmt_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(5, copyOfSalida_0.GUID);
}

                        if(copyOfSalida_0.TCONTENIDO == null) {
pstmt_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tOracleOutput_1.setString(6, copyOfSalida_0.TCONTENIDO);
}

                        pstmt_tOracleOutput_1.setBigDecimal(7, copyOfSalida_0.PADRE_ID);

                try {
                    nb_line_tOracleOutput_1++;
                    int processedCount_tOracleOutput_1 = pstmt_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "copyOfSalida_0"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row81");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmt_tOracleOutput_1 != null) {
			
				pstmt_tOracleOutput_1.close();
				resourceMap.remove("pstmt_tOracleOutput_1");
			
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"copyOfSalida_0");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tFixedFlowInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tFixedFlowInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row80Struct implements routines.system.IPersistableRow<row80Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal DCARGUE_ID_;

				public BigDecimal getDCARGUE_ID_ () {
					return this.DCARGUE_ID_;
				}

				public Boolean DCARGUE_ID_IsNullable(){
				    return true;
				}
				public Boolean DCARGUE_ID_IsKey(){
				    return false;
				}
				public Integer DCARGUE_ID_Length(){
				    return null;
				}
				public Integer DCARGUE_ID_Precision(){
				    return null;
				}
				public String DCARGUE_ID_Default(){
				
					return null;
				
				}
				public String DCARGUE_ID_Comment(){
				
				    return "";
				
				}
				public String DCARGUE_ID_Pattern(){
				
					return "";
				
				}
				public String DCARGUE_ID_OriginalDbColumnName(){
				
					return "DCARGUE_ID_";
				
				}

				
			    public BigDecimal ESTADO_ID_;

				public BigDecimal getESTADO_ID_ () {
					return this.ESTADO_ID_;
				}

				public Boolean ESTADO_ID_IsNullable(){
				    return true;
				}
				public Boolean ESTADO_ID_IsKey(){
				    return false;
				}
				public Integer ESTADO_ID_Length(){
				    return null;
				}
				public Integer ESTADO_ID_Precision(){
				    return null;
				}
				public String ESTADO_ID_Default(){
				
					return null;
				
				}
				public String ESTADO_ID_Comment(){
				
				    return "";
				
				}
				public String ESTADO_ID_Pattern(){
				
					return "";
				
				}
				public String ESTADO_ID_OriginalDbColumnName(){
				
					return "ESTADO_ID_";
				
				}

				
			    public String SPROC_;

				public String getSPROC_ () {
					return this.SPROC_;
				}

				public Boolean SPROC_IsNullable(){
				    return true;
				}
				public Boolean SPROC_IsKey(){
				    return false;
				}
				public Integer SPROC_Length(){
				    return null;
				}
				public Integer SPROC_Precision(){
				    return null;
				}
				public String SPROC_Default(){
				
					return null;
				
				}
				public String SPROC_Comment(){
				
				    return "";
				
				}
				public String SPROC_Pattern(){
				
					return "";
				
				}
				public String SPROC_OriginalDbColumnName(){
				
					return "SPROC_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DCARGUE_ID_="+String.valueOf(DCARGUE_ID_));
		sb.append(",ESTADO_ID_="+String.valueOf(ESTADO_ID_));
		sb.append(",SPROC_="+SPROC_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row80Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row80Struct row80 = new row80Struct();




	
	/**
	 * [tOracleSP_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_4", false);
		start_Hash.put("tOracleSP_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row80");
					}
				
		int tos_count_tOracleSP_4 = 0;
		

	java.sql.Connection connection_tOracleSP_4 = null;
	connection_tOracleSP_4 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_4 = connection_tOracleSP_4.prepareCall("{call " + "REP.UpdEstadoCargaArchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_4;
String tmpString_tOracleSP_4;

 



/**
 * [tOracleSP_4 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_5", false);
		start_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_5";
	
	
		int tos_count_tFixedFlowInput_5 = 0;
		

	    for (int i_tFixedFlowInput_5 = 0 ; i_tFixedFlowInput_5 < 1 ; i_tFixedFlowInput_5++) {
	                	            	
    	            		row80.DCARGUE_ID_ = context.vArchivo_Id;
    	            	        	            	
    	            		row80.ESTADO_ID_ = context.estErrorProcesamiento;
    	            	        	            	
    	            		row80.SPROC_ = " ";
    	            	

 



/**
 * [tFixedFlowInput_5 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 


	tos_count_tFixedFlowInput_5++;

/**
 * [tFixedFlowInput_5 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_4 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row80"
						
						);
					}
					

			// code for the argument 1 (DCARGUE_ID_) of type 'IN AUTOMAPPING'
    					if (row80.DCARGUE_ID_ == null) {
    						statement_tOracleSP_4.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_4.setBigDecimal(1, row80.DCARGUE_ID_);
    					}
    					
			// code for the argument 2 (ESTADO_ID_) of type 'IN AUTOMAPPING'
    					if (row80.ESTADO_ID_ == null) {
    						statement_tOracleSP_4.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_4.setBigDecimal(2, row80.ESTADO_ID_);
    					}
    					
			// code for the argument 3 (SPROC_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_4.registerOutParameter(3, java.sql.Types.VARCHAR);
		statement_tOracleSP_4.execute();
		

 


	tos_count_tOracleSP_4++;

/**
 * [tOracleSP_4 main ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_5 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

        }
        globalMap.put("tFixedFlowInput_5_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_5", true);
end_Hash.put("tFixedFlowInput_5", System.currentTimeMillis());




/**
 * [tFixedFlowInput_5 end ] stop
 */

	
	/**
	 * [tOracleSP_4 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	


	statement_tOracleSP_4.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row80");
			  	}
			  	
 

ok_Hash.put("tOracleSP_4", true);
end_Hash.put("tOracleSP_4", System.currentTimeMillis());




/**
 * [tOracleSP_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_5 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_5";
	
	

 



/**
 * [tFixedFlowInput_5 finally ] stop
 */

	
	/**
	 * [tOracleSP_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_4";
	
	

 



/**
 * [tOracleSP_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal DCARGUE_ID_;

				public BigDecimal getDCARGUE_ID_ () {
					return this.DCARGUE_ID_;
				}

				public Boolean DCARGUE_ID_IsNullable(){
				    return true;
				}
				public Boolean DCARGUE_ID_IsKey(){
				    return false;
				}
				public Integer DCARGUE_ID_Length(){
				    return null;
				}
				public Integer DCARGUE_ID_Precision(){
				    return null;
				}
				public String DCARGUE_ID_Default(){
				
					return null;
				
				}
				public String DCARGUE_ID_Comment(){
				
				    return "";
				
				}
				public String DCARGUE_ID_Pattern(){
				
					return "";
				
				}
				public String DCARGUE_ID_OriginalDbColumnName(){
				
					return "DCARGUE_ID_";
				
				}

				
			    public BigDecimal ESTADO_ID_;

				public BigDecimal getESTADO_ID_ () {
					return this.ESTADO_ID_;
				}

				public Boolean ESTADO_ID_IsNullable(){
				    return true;
				}
				public Boolean ESTADO_ID_IsKey(){
				    return false;
				}
				public Integer ESTADO_ID_Length(){
				    return null;
				}
				public Integer ESTADO_ID_Precision(){
				    return null;
				}
				public String ESTADO_ID_Default(){
				
					return null;
				
				}
				public String ESTADO_ID_Comment(){
				
				    return "";
				
				}
				public String ESTADO_ID_Pattern(){
				
					return "";
				
				}
				public String ESTADO_ID_OriginalDbColumnName(){
				
					return "ESTADO_ID_";
				
				}

				
			    public String SPROC_;

				public String getSPROC_ () {
					return this.SPROC_;
				}

				public Boolean SPROC_IsNullable(){
				    return true;
				}
				public Boolean SPROC_IsKey(){
				    return false;
				}
				public Integer SPROC_Length(){
				    return null;
				}
				public Integer SPROC_Precision(){
				    return null;
				}
				public String SPROC_Default(){
				
					return null;
				
				}
				public String SPROC_Comment(){
				
				    return "";
				
				}
				public String SPROC_Pattern(){
				
					return "";
				
				}
				public String SPROC_OriginalDbColumnName(){
				
					return "SPROC_";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.DCARGUE_ID_ = (BigDecimal) dis.readObject();
					
						this.ESTADO_ID_ = (BigDecimal) dis.readObject();
					
					this.SPROC_ = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
       			    	dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DCARGUE_ID_);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ESTADO_ID_);
					
					// String
				
						writeString(this.SPROC_,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("DCARGUE_ID_="+String.valueOf(DCARGUE_ID_));
		sb.append(",ESTADO_ID_="+String.valueOf(ESTADO_ID_));
		sb.append(",SPROC_="+SPROC_);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tOracleSP_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleSP_1", false);
		start_Hash.put("tOracleSP_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tOracleSP_1 = 0;
		

	java.sql.Connection connection_tOracleSP_1 = null;
	connection_tOracleSP_1 = (java.sql.Connection) globalMap.get("conn_tOracleConnection_2");
	

java.sql.CallableStatement statement_tOracleSP_1 = connection_tOracleSP_1.prepareCall("{call " + "REP.UpdEstadoCargaArchivo" + "(?,?,?)}");

java.sql.Timestamp tmpDate_tOracleSP_1;
String tmpString_tOracleSP_1;

 



/**
 * [tOracleSP_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_1", false);
		start_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_1";
	
	
		int tos_count_tFixedFlowInput_1 = 0;
		

	    for (int i_tFixedFlowInput_1 = 0 ; i_tFixedFlowInput_1 < 1 ; i_tFixedFlowInput_1++) {
	                	            	
    	            		row8.DCARGUE_ID_ = context.vArchivo_Id;
    	            	        	            	
    	            		row8.ESTADO_ID_ = context.estErrorArchivo;
    	            	        	            	
    	            		row8.SPROC_ = " ";
    	            	

 



/**
 * [tFixedFlowInput_1 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 


	tos_count_tFixedFlowInput_1++;

/**
 * [tFixedFlowInput_1 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tOracleSP_1 main ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

			// code for the argument 1 (DCARGUE_ID_) of type 'IN AUTOMAPPING'
    					if (row8.DCARGUE_ID_ == null) {
    						statement_tOracleSP_1.setNull(1, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_1.setBigDecimal(1, row8.DCARGUE_ID_);
    					}
    					
			// code for the argument 2 (ESTADO_ID_) of type 'IN AUTOMAPPING'
    					if (row8.ESTADO_ID_ == null) {
    						statement_tOracleSP_1.setNull(2, java.sql.Types.OTHER);
    					} else {
    					
                        statement_tOracleSP_1.setBigDecimal(2, row8.ESTADO_ID_);
    					}
    					
			// code for the argument 3 (SPROC_) of type 'OUT AUTOMAPPING'
					statement_tOracleSP_1.registerOutParameter(3, java.sql.Types.VARCHAR);
		statement_tOracleSP_1.execute();
		

 


	tos_count_tOracleSP_1++;

/**
 * [tOracleSP_1 main ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleSP_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_1 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

        }
        globalMap.put("tFixedFlowInput_1_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_1", true);
end_Hash.put("tFixedFlowInput_1", System.currentTimeMillis());




/**
 * [tFixedFlowInput_1 end ] stop
 */

	
	/**
	 * [tOracleSP_1 end ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	


	statement_tOracleSP_1.close();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tOracleSP_1", true);
end_Hash.put("tOracleSP_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tDie_2Process(globalMap);



/**
 * [tOracleSP_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_1 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_1";
	
	

 



/**
 * [tFixedFlowInput_1 finally ] stop
 */

	
	/**
	 * [tOracleSP_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleSP_1";
	
	

 



/**
 * [tOracleSP_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tDie_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tDie_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tDie_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tDie_2", false);
		start_Hash.put("tDie_2", System.currentTimeMillis());
		
	
	currentComponent="tDie_2";
	
	
		int tos_count_tDie_2 = 0;
		

 



/**
 * [tDie_2 begin ] stop
 */
	
	/**
	 * [tDie_2 main ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

	try {
	globalMap.put("tDie_2_DIE_PRIORITY", 5);
	System.err.println("ERROR: No se encuentra el archivo en la tabla AFI_ARCHIVOS");
	
	globalMap.put("tDie_2_DIE_MESSAGE", "ERROR: No se encuentra el archivo en la tabla AFI_ARCHIVOS");
	globalMap.put("tDie_2_DIE_MESSAGES", "ERROR: No se encuentra el archivo en la tabla AFI_ARCHIVOS");
	
	} catch (Exception | Error e_tDie_2) {
	    globalMap.put("tDie_2_ERROR_MESSAGE",e_tDie_2.getMessage());
		logIgnoredError(String.format("tDie_2 - tDie failed to log message due to internal error: %s", e_tDie_2), e_tDie_2);
	}
	
	currentComponent = "tDie_2";
	status = "failure";
    	errorCode = new Integer(4);
        ((java.util.Map)threadLocal.get()).put("errorCode", new Integer(4));
        ((java.util.Map)threadLocal.get()).put("status", "failure");
        globalMap.put("tDie_2_DIE_CODE", errorCode);

    
	

	
	
	System.exit(4);

 


	tos_count_tDie_2++;

/**
 * [tDie_2 main ] stop
 */
	
	/**
	 * [tDie_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_begin ] stop
 */
	
	/**
	 * [tDie_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 process_data_end ] stop
 */
	
	/**
	 * [tDie_2 end ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 

ok_Hash.put("tDie_2", true);
end_Hash.put("tDie_2", System.currentTimeMillis());




/**
 * [tDie_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tDie_2 finally ] start
	 */

	

	
	
	currentComponent="tDie_2";
	
	

 



/**
 * [tDie_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tDie_2_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CODIGO_CUM;

				public String getCODIGO_CUM () {
					return this.CODIGO_CUM;
				}

				public Boolean CODIGO_CUMIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CUMIsKey(){
				    return false;
				}
				public Integer CODIGO_CUMLength(){
				    return 50;
				}
				public Integer CODIGO_CUMPrecision(){
				    return 0;
				}
				public String CODIGO_CUMDefault(){
				
					return null;
				
				}
				public String CODIGO_CUMComment(){
				
				    return "";
				
				}
				public String CODIGO_CUMPattern(){
				
					return "";
				
				}
				public String CODIGO_CUMOriginalDbColumnName(){
				
					return "CODIGO_CUM";
				
				}

				
			    public String COMERCIAL;

				public String getCOMERCIAL () {
					return this.COMERCIAL;
				}

				public Boolean COMERCIALIsNullable(){
				    return true;
				}
				public Boolean COMERCIALIsKey(){
				    return false;
				}
				public Integer COMERCIALLength(){
				    return 150;
				}
				public Integer COMERCIALPrecision(){
				    return 0;
				}
				public String COMERCIALDefault(){
				
					return null;
				
				}
				public String COMERCIALComment(){
				
				    return "";
				
				}
				public String COMERCIALPattern(){
				
					return "";
				
				}
				public String COMERCIALOriginalDbColumnName(){
				
					return "COMERCIAL";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO_CUM == null) ? 0 : this.CODIGO_CUM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.CODIGO_CUM == null) {
							if (other.CODIGO_CUM != null)
								return false;
						
						} else if (!this.CODIGO_CUM.equals(other.CODIGO_CUM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.CODIGO_CUM = this.CODIGO_CUM;
	            other.COMERCIAL = this.COMERCIAL;
	            other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.CODIGO_CUM = this.CODIGO_CUM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO_CUM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO_CUM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_CUM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_CUM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.COMERCIAL = readString(dis,ois);
					
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.COMERCIAL = readString(dis,objectIn);
					
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.COMERCIAL, dos, oos);
					
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.COMERCIAL, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO_CUM="+CODIGO_CUM);
		sb.append(",COMERCIAL="+COMERCIAL);
		sb.append(",ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO_CUM, other.CODIGO_CUM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tHashInput_2 - inputs:(after_tHashInput_1) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_1 - inputs:(row20,row21) outputs:(out9)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row12Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row12Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row21.CODIGO_CUM = next_tHashInput_2.CODIGO_CUM;
	row21.COMERCIAL = next_tHashInput_2.COMERCIAL;
	row21.ID = next_tHashInput_2.ID;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.CODIGO_CUM = row21.CODIGO_CUM;
				
				row21_HashRow.COMERCIAL = row21.COMERCIAL;
				
				row21_HashRow.ID = row21.ID;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int contador;

				public int getContador () {
					return this.contador;
				}

				public Boolean contadorIsNullable(){
				    return false;
				}
				public Boolean contadorIsKey(){
				    return false;
				}
				public Integer contadorLength(){
				    return null;
				}
				public Integer contadorPrecision(){
				    return null;
				}
				public String contadorDefault(){
				
					return null;
				
				}
				public String contadorComment(){
				
				    return "";
				
				}
				public String contadorPattern(){
				
					return "";
				
				}
				public String contadorOriginalDbColumnName(){
				
					return "contador";
				
				}

				
			    public String prefijo;

				public String getPrefijo () {
					return this.prefijo;
				}

				public Boolean prefijoIsNullable(){
				    return true;
				}
				public Boolean prefijoIsKey(){
				    return false;
				}
				public Integer prefijoLength(){
				    return null;
				}
				public Integer prefijoPrecision(){
				    return null;
				}
				public String prefijoDefault(){
				
					return null;
				
				}
				public String prefijoComment(){
				
				    return "";
				
				}
				public String prefijoPattern(){
				
					return "";
				
				}
				public String prefijoOriginalDbColumnName(){
				
					return "prefijo";
				
				}

				
			    public String numero_factura;

				public String getNumero_factura () {
					return this.numero_factura;
				}

				public Boolean numero_facturaIsNullable(){
				    return false;
				}
				public Boolean numero_facturaIsKey(){
				    return false;
				}
				public Integer numero_facturaLength(){
				    return null;
				}
				public Integer numero_facturaPrecision(){
				    return null;
				}
				public String numero_facturaDefault(){
				
					return null;
				
				}
				public String numero_facturaComment(){
				
				    return "";
				
				}
				public String numero_facturaPattern(){
				
					return "";
				
				}
				public String numero_facturaOriginalDbColumnName(){
				
					return "numero_factura";
				
				}

				
			    public String fecha_factura;

				public String getFecha_factura () {
					return this.fecha_factura;
				}

				public Boolean fecha_facturaIsNullable(){
				    return false;
				}
				public Boolean fecha_facturaIsKey(){
				    return false;
				}
				public Integer fecha_facturaLength(){
				    return null;
				}
				public Integer fecha_facturaPrecision(){
				    return null;
				}
				public String fecha_facturaDefault(){
				
					return null;
				
				}
				public String fecha_facturaComment(){
				
				    return "";
				
				}
				public String fecha_facturaPattern(){
				
					return "";
				
				}
				public String fecha_facturaOriginalDbColumnName(){
				
					return "fecha_factura";
				
				}

				
			    public String esm_formulacion;

				public String getEsm_formulacion () {
					return this.esm_formulacion;
				}

				public Boolean esm_formulacionIsNullable(){
				    return false;
				}
				public Boolean esm_formulacionIsKey(){
				    return false;
				}
				public Integer esm_formulacionLength(){
				    return null;
				}
				public Integer esm_formulacionPrecision(){
				    return null;
				}
				public String esm_formulacionDefault(){
				
					return null;
				
				}
				public String esm_formulacionComment(){
				
				    return "";
				
				}
				public String esm_formulacionPattern(){
				
					return "";
				
				}
				public String esm_formulacionOriginalDbColumnName(){
				
					return "esm_formulacion";
				
				}

				
			    public String esm_dispensacion;

				public String getEsm_dispensacion () {
					return this.esm_dispensacion;
				}

				public Boolean esm_dispensacionIsNullable(){
				    return false;
				}
				public Boolean esm_dispensacionIsKey(){
				    return false;
				}
				public Integer esm_dispensacionLength(){
				    return null;
				}
				public Integer esm_dispensacionPrecision(){
				    return null;
				}
				public String esm_dispensacionDefault(){
				
					return null;
				
				}
				public String esm_dispensacionComment(){
				
				    return "";
				
				}
				public String esm_dispensacionPattern(){
				
					return "";
				
				}
				public String esm_dispensacionOriginalDbColumnName(){
				
					return "esm_dispensacion";
				
				}

				
			    public String esm_facturacion;

				public String getEsm_facturacion () {
					return this.esm_facturacion;
				}

				public Boolean esm_facturacionIsNullable(){
				    return false;
				}
				public Boolean esm_facturacionIsKey(){
				    return false;
				}
				public Integer esm_facturacionLength(){
				    return null;
				}
				public Integer esm_facturacionPrecision(){
				    return null;
				}
				public String esm_facturacionDefault(){
				
					return null;
				
				}
				public String esm_facturacionComment(){
				
				    return "";
				
				}
				public String esm_facturacionPattern(){
				
					return "";
				
				}
				public String esm_facturacionOriginalDbColumnName(){
				
					return "esm_facturacion";
				
				}

				
			    public String esm_adscrito;

				public String getEsm_adscrito () {
					return this.esm_adscrito;
				}

				public Boolean esm_adscritoIsNullable(){
				    return false;
				}
				public Boolean esm_adscritoIsKey(){
				    return false;
				}
				public Integer esm_adscritoLength(){
				    return null;
				}
				public Integer esm_adscritoPrecision(){
				    return null;
				}
				public String esm_adscritoDefault(){
				
					return null;
				
				}
				public String esm_adscritoComment(){
				
				    return "";
				
				}
				public String esm_adscritoPattern(){
				
					return "";
				
				}
				public String esm_adscritoOriginalDbColumnName(){
				
					return "esm_adscrito";
				
				}

				
			    public String fecha_formulacion;

				public String getFecha_formulacion () {
					return this.fecha_formulacion;
				}

				public Boolean fecha_formulacionIsNullable(){
				    return false;
				}
				public Boolean fecha_formulacionIsKey(){
				    return false;
				}
				public Integer fecha_formulacionLength(){
				    return null;
				}
				public Integer fecha_formulacionPrecision(){
				    return null;
				}
				public String fecha_formulacionDefault(){
				
					return null;
				
				}
				public String fecha_formulacionComment(){
				
				    return "";
				
				}
				public String fecha_formulacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_formulacionOriginalDbColumnName(){
				
					return "fecha_formulacion";
				
				}

				
			    public String fecha_dispensacion;

				public String getFecha_dispensacion () {
					return this.fecha_dispensacion;
				}

				public Boolean fecha_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_dispensacionLength(){
				    return null;
				}
				public Integer fecha_dispensacionPrecision(){
				    return null;
				}
				public String fecha_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_dispensacionOriginalDbColumnName(){
				
					return "fecha_dispensacion";
				
				}

				
			    public String fecha_registro_dispensacion;

				public String getFecha_registro_dispensacion () {
					return this.fecha_registro_dispensacion;
				}

				public Boolean fecha_registro_dispensacionIsNullable(){
				    return false;
				}
				public Boolean fecha_registro_dispensacionIsKey(){
				    return false;
				}
				public Integer fecha_registro_dispensacionLength(){
				    return null;
				}
				public Integer fecha_registro_dispensacionPrecision(){
				    return null;
				}
				public String fecha_registro_dispensacionDefault(){
				
					return null;
				
				}
				public String fecha_registro_dispensacionComment(){
				
				    return "";
				
				}
				public String fecha_registro_dispensacionPattern(){
				
					return "dd/MM/yyyy";
				
				}
				public String fecha_registro_dispensacionOriginalDbColumnName(){
				
					return "fecha_registro_dispensacion";
				
				}

				
			    public String tipo_documento;

				public String getTipo_documento () {
					return this.tipo_documento;
				}

				public Boolean tipo_documentoIsNullable(){
				    return false;
				}
				public Boolean tipo_documentoIsKey(){
				    return false;
				}
				public Integer tipo_documentoLength(){
				    return null;
				}
				public Integer tipo_documentoPrecision(){
				    return null;
				}
				public String tipo_documentoDefault(){
				
					return null;
				
				}
				public String tipo_documentoComment(){
				
				    return "";
				
				}
				public String tipo_documentoPattern(){
				
					return "";
				
				}
				public String tipo_documentoOriginalDbColumnName(){
				
					return "tipo_documento";
				
				}

				
			    public String documento;

				public String getDocumento () {
					return this.documento;
				}

				public Boolean documentoIsNullable(){
				    return false;
				}
				public Boolean documentoIsKey(){
				    return false;
				}
				public Integer documentoLength(){
				    return null;
				}
				public Integer documentoPrecision(){
				    return null;
				}
				public String documentoDefault(){
				
					return null;
				
				}
				public String documentoComment(){
				
				    return "";
				
				}
				public String documentoPattern(){
				
					return "";
				
				}
				public String documentoOriginalDbColumnName(){
				
					return "documento";
				
				}

				
			    public String tipificacion;

				public String getTipificacion () {
					return this.tipificacion;
				}

				public Boolean tipificacionIsNullable(){
				    return false;
				}
				public Boolean tipificacionIsKey(){
				    return false;
				}
				public Integer tipificacionLength(){
				    return null;
				}
				public Integer tipificacionPrecision(){
				    return null;
				}
				public String tipificacionDefault(){
				
					return null;
				
				}
				public String tipificacionComment(){
				
				    return "";
				
				}
				public String tipificacionPattern(){
				
					return "";
				
				}
				public String tipificacionOriginalDbColumnName(){
				
					return "tipificacion";
				
				}

				
			    public String consecutivo_formula;

				public String getConsecutivo_formula () {
					return this.consecutivo_formula;
				}

				public Boolean consecutivo_formulaIsNullable(){
				    return false;
				}
				public Boolean consecutivo_formulaIsKey(){
				    return false;
				}
				public Integer consecutivo_formulaLength(){
				    return null;
				}
				public Integer consecutivo_formulaPrecision(){
				    return null;
				}
				public String consecutivo_formulaDefault(){
				
					return null;
				
				}
				public String consecutivo_formulaComment(){
				
				    return "";
				
				}
				public String consecutivo_formulaPattern(){
				
					return "";
				
				}
				public String consecutivo_formulaOriginalDbColumnName(){
				
					return "consecutivo_formula";
				
				}

				
			    public String tirilla;

				public String getTirilla () {
					return this.tirilla;
				}

				public Boolean tirillaIsNullable(){
				    return false;
				}
				public Boolean tirillaIsKey(){
				    return false;
				}
				public Integer tirillaLength(){
				    return null;
				}
				public Integer tirillaPrecision(){
				    return null;
				}
				public String tirillaDefault(){
				
					return null;
				
				}
				public String tirillaComment(){
				
				    return "";
				
				}
				public String tirillaPattern(){
				
					return "";
				
				}
				public String tirillaOriginalDbColumnName(){
				
					return "tirilla";
				
				}

				
			    public String tipo_formula;

				public String getTipo_formula () {
					return this.tipo_formula;
				}

				public Boolean tipo_formulaIsNullable(){
				    return false;
				}
				public Boolean tipo_formulaIsKey(){
				    return false;
				}
				public Integer tipo_formulaLength(){
				    return null;
				}
				public Integer tipo_formulaPrecision(){
				    return null;
				}
				public String tipo_formulaDefault(){
				
					return null;
				
				}
				public String tipo_formulaComment(){
				
				    return "";
				
				}
				public String tipo_formulaPattern(){
				
					return "";
				
				}
				public String tipo_formulaOriginalDbColumnName(){
				
					return "tipo_formula";
				
				}

				
			    public String origen_formulacion;

				public String getOrigen_formulacion () {
					return this.origen_formulacion;
				}

				public Boolean origen_formulacionIsNullable(){
				    return false;
				}
				public Boolean origen_formulacionIsKey(){
				    return false;
				}
				public Integer origen_formulacionLength(){
				    return null;
				}
				public Integer origen_formulacionPrecision(){
				    return null;
				}
				public String origen_formulacionDefault(){
				
					return null;
				
				}
				public String origen_formulacionComment(){
				
				    return "";
				
				}
				public String origen_formulacionPattern(){
				
					return "";
				
				}
				public String origen_formulacionOriginalDbColumnName(){
				
					return "origen_formulacion";
				
				}

				
			    public String codigo_atc;

				public String getCodigo_atc () {
					return this.codigo_atc;
				}

				public Boolean codigo_atcIsNullable(){
				    return false;
				}
				public Boolean codigo_atcIsKey(){
				    return false;
				}
				public Integer codigo_atcLength(){
				    return null;
				}
				public Integer codigo_atcPrecision(){
				    return null;
				}
				public String codigo_atcDefault(){
				
					return null;
				
				}
				public String codigo_atcComment(){
				
				    return "";
				
				}
				public String codigo_atcPattern(){
				
					return "";
				
				}
				public String codigo_atcOriginalDbColumnName(){
				
					return "codigo_atc";
				
				}

				
			    public String codigo_cum;

				public String getCodigo_cum () {
					return this.codigo_cum;
				}

				public Boolean codigo_cumIsNullable(){
				    return false;
				}
				public Boolean codigo_cumIsKey(){
				    return false;
				}
				public Integer codigo_cumLength(){
				    return null;
				}
				public Integer codigo_cumPrecision(){
				    return null;
				}
				public String codigo_cumDefault(){
				
					return null;
				
				}
				public String codigo_cumComment(){
				
				    return "";
				
				}
				public String codigo_cumPattern(){
				
					return "";
				
				}
				public String codigo_cumOriginalDbColumnName(){
				
					return "codigo_cum";
				
				}

				
			    public String invima;

				public String getInvima () {
					return this.invima;
				}

				public Boolean invimaIsNullable(){
				    return false;
				}
				public Boolean invimaIsKey(){
				    return false;
				}
				public Integer invimaLength(){
				    return null;
				}
				public Integer invimaPrecision(){
				    return null;
				}
				public String invimaDefault(){
				
					return null;
				
				}
				public String invimaComment(){
				
				    return "";
				
				}
				public String invimaPattern(){
				
					return "";
				
				}
				public String invimaOriginalDbColumnName(){
				
					return "invima";
				
				}

				
			    public String codigo_cie10;

				public String getCodigo_cie10 () {
					return this.codigo_cie10;
				}

				public Boolean codigo_cie10IsNullable(){
				    return false;
				}
				public Boolean codigo_cie10IsKey(){
				    return false;
				}
				public Integer codigo_cie10Length(){
				    return null;
				}
				public Integer codigo_cie10Precision(){
				    return null;
				}
				public String codigo_cie10Default(){
				
					return null;
				
				}
				public String codigo_cie10Comment(){
				
				    return "";
				
				}
				public String codigo_cie10Pattern(){
				
					return "";
				
				}
				public String codigo_cie10OriginalDbColumnName(){
				
					return "codigo_cie10";
				
				}

				
			    public String lote;

				public String getLote () {
					return this.lote;
				}

				public Boolean loteIsNullable(){
				    return false;
				}
				public Boolean loteIsKey(){
				    return false;
				}
				public Integer loteLength(){
				    return null;
				}
				public Integer lotePrecision(){
				    return null;
				}
				public String loteDefault(){
				
					return null;
				
				}
				public String loteComment(){
				
				    return "";
				
				}
				public String lotePattern(){
				
					return "";
				
				}
				public String loteOriginalDbColumnName(){
				
					return "lote";
				
				}

				
			    public String medico_codigo;

				public String getMedico_codigo () {
					return this.medico_codigo;
				}

				public Boolean medico_codigoIsNullable(){
				    return false;
				}
				public Boolean medico_codigoIsKey(){
				    return false;
				}
				public Integer medico_codigoLength(){
				    return null;
				}
				public Integer medico_codigoPrecision(){
				    return null;
				}
				public String medico_codigoDefault(){
				
					return null;
				
				}
				public String medico_codigoComment(){
				
				    return "";
				
				}
				public String medico_codigoPattern(){
				
					return "";
				
				}
				public String medico_codigoOriginalDbColumnName(){
				
					return "medico_codigo";
				
				}

				
			    public String medico_nombre;

				public String getMedico_nombre () {
					return this.medico_nombre;
				}

				public Boolean medico_nombreIsNullable(){
				    return false;
				}
				public Boolean medico_nombreIsKey(){
				    return false;
				}
				public Integer medico_nombreLength(){
				    return null;
				}
				public Integer medico_nombrePrecision(){
				    return null;
				}
				public String medico_nombreDefault(){
				
					return null;
				
				}
				public String medico_nombreComment(){
				
				    return "";
				
				}
				public String medico_nombrePattern(){
				
					return "";
				
				}
				public String medico_nombreOriginalDbColumnName(){
				
					return "medico_nombre";
				
				}

				
			    public String fecha_vencimiento;

				public String getFecha_vencimiento () {
					return this.fecha_vencimiento;
				}

				public Boolean fecha_vencimientoIsNullable(){
				    return false;
				}
				public Boolean fecha_vencimientoIsKey(){
				    return false;
				}
				public Integer fecha_vencimientoLength(){
				    return null;
				}
				public Integer fecha_vencimientoPrecision(){
				    return null;
				}
				public String fecha_vencimientoDefault(){
				
					return null;
				
				}
				public String fecha_vencimientoComment(){
				
				    return "";
				
				}
				public String fecha_vencimientoPattern(){
				
					return "";
				
				}
				public String fecha_vencimientoOriginalDbColumnName(){
				
					return "fecha_vencimiento";
				
				}

				
			    public String cantidad_solicitada;

				public String getCantidad_solicitada () {
					return this.cantidad_solicitada;
				}

				public Boolean cantidad_solicitadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_solicitadaIsKey(){
				    return false;
				}
				public Integer cantidad_solicitadaLength(){
				    return null;
				}
				public Integer cantidad_solicitadaPrecision(){
				    return null;
				}
				public String cantidad_solicitadaDefault(){
				
					return null;
				
				}
				public String cantidad_solicitadaComment(){
				
				    return "";
				
				}
				public String cantidad_solicitadaPattern(){
				
					return "";
				
				}
				public String cantidad_solicitadaOriginalDbColumnName(){
				
					return "cantidad_solicitada";
				
				}

				
			    public String cantidad_despachada;

				public String getCantidad_despachada () {
					return this.cantidad_despachada;
				}

				public Boolean cantidad_despachadaIsNullable(){
				    return false;
				}
				public Boolean cantidad_despachadaIsKey(){
				    return false;
				}
				public Integer cantidad_despachadaLength(){
				    return null;
				}
				public Integer cantidad_despachadaPrecision(){
				    return null;
				}
				public String cantidad_despachadaDefault(){
				
					return null;
				
				}
				public String cantidad_despachadaComment(){
				
				    return "";
				
				}
				public String cantidad_despachadaPattern(){
				
					return "";
				
				}
				public String cantidad_despachadaOriginalDbColumnName(){
				
					return "cantidad_despachada";
				
				}

				
			    public String cantidad_pendiente;

				public String getCantidad_pendiente () {
					return this.cantidad_pendiente;
				}

				public Boolean cantidad_pendienteIsNullable(){
				    return false;
				}
				public Boolean cantidad_pendienteIsKey(){
				    return false;
				}
				public Integer cantidad_pendienteLength(){
				    return null;
				}
				public Integer cantidad_pendientePrecision(){
				    return null;
				}
				public String cantidad_pendienteDefault(){
				
					return null;
				
				}
				public String cantidad_pendienteComment(){
				
				    return "";
				
				}
				public String cantidad_pendientePattern(){
				
					return "";
				
				}
				public String cantidad_pendienteOriginalDbColumnName(){
				
					return "cantidad_pendiente";
				
				}

				
			    public String dosis;

				public String getDosis () {
					return this.dosis;
				}

				public Boolean dosisIsNullable(){
				    return false;
				}
				public Boolean dosisIsKey(){
				    return false;
				}
				public Integer dosisLength(){
				    return null;
				}
				public Integer dosisPrecision(){
				    return null;
				}
				public String dosisDefault(){
				
					return null;
				
				}
				public String dosisComment(){
				
				    return "";
				
				}
				public String dosisPattern(){
				
					return "";
				
				}
				public String dosisOriginalDbColumnName(){
				
					return "dosis";
				
				}

				
			    public String frecuencia_horas;

				public String getFrecuencia_horas () {
					return this.frecuencia_horas;
				}

				public Boolean frecuencia_horasIsNullable(){
				    return false;
				}
				public Boolean frecuencia_horasIsKey(){
				    return false;
				}
				public Integer frecuencia_horasLength(){
				    return null;
				}
				public Integer frecuencia_horasPrecision(){
				    return null;
				}
				public String frecuencia_horasDefault(){
				
					return null;
				
				}
				public String frecuencia_horasComment(){
				
				    return "";
				
				}
				public String frecuencia_horasPattern(){
				
					return "";
				
				}
				public String frecuencia_horasOriginalDbColumnName(){
				
					return "frecuencia_horas";
				
				}

				
			    public String codigo_interno_servicio;

				public String getCodigo_interno_servicio () {
					return this.codigo_interno_servicio;
				}

				public Boolean codigo_interno_servicioIsNullable(){
				    return true;
				}
				public Boolean codigo_interno_servicioIsKey(){
				    return false;
				}
				public Integer codigo_interno_servicioLength(){
				    return null;
				}
				public Integer codigo_interno_servicioPrecision(){
				    return null;
				}
				public String codigo_interno_servicioDefault(){
				
					return null;
				
				}
				public String codigo_interno_servicioComment(){
				
				    return "";
				
				}
				public String codigo_interno_servicioPattern(){
				
					return "";
				
				}
				public String codigo_interno_servicioOriginalDbColumnName(){
				
					return "codigo_interno_servicio";
				
				}

				
			    public String valor_unitario;

				public String getValor_unitario () {
					return this.valor_unitario;
				}

				public Boolean valor_unitarioIsNullable(){
				    return false;
				}
				public Boolean valor_unitarioIsKey(){
				    return false;
				}
				public Integer valor_unitarioLength(){
				    return null;
				}
				public Integer valor_unitarioPrecision(){
				    return null;
				}
				public String valor_unitarioDefault(){
				
					return null;
				
				}
				public String valor_unitarioComment(){
				
				    return "";
				
				}
				public String valor_unitarioPattern(){
				
					return "";
				
				}
				public String valor_unitarioOriginalDbColumnName(){
				
					return "valor_unitario";
				
				}

				
			    public String subtotal;

				public String getSubtotal () {
					return this.subtotal;
				}

				public Boolean subtotalIsNullable(){
				    return false;
				}
				public Boolean subtotalIsKey(){
				    return false;
				}
				public Integer subtotalLength(){
				    return null;
				}
				public Integer subtotalPrecision(){
				    return null;
				}
				public String subtotalDefault(){
				
					return null;
				
				}
				public String subtotalComment(){
				
				    return "";
				
				}
				public String subtotalPattern(){
				
					return "";
				
				}
				public String subtotalOriginalDbColumnName(){
				
					return "subtotal";
				
				}

				
			    public String valor_total_adecuacion;

				public String getValor_total_adecuacion () {
					return this.valor_total_adecuacion;
				}

				public Boolean valor_total_adecuacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_adecuacionIsKey(){
				    return false;
				}
				public Integer valor_total_adecuacionLength(){
				    return null;
				}
				public Integer valor_total_adecuacionPrecision(){
				    return null;
				}
				public String valor_total_adecuacionDefault(){
				
					return null;
				
				}
				public String valor_total_adecuacionComment(){
				
				    return "";
				
				}
				public String valor_total_adecuacionPattern(){
				
					return "";
				
				}
				public String valor_total_adecuacionOriginalDbColumnName(){
				
					return "valor_total_adecuacion";
				
				}

				
			    public String valor_total_iva;

				public String getValor_total_iva () {
					return this.valor_total_iva;
				}

				public Boolean valor_total_ivaIsNullable(){
				    return false;
				}
				public Boolean valor_total_ivaIsKey(){
				    return false;
				}
				public Integer valor_total_ivaLength(){
				    return null;
				}
				public Integer valor_total_ivaPrecision(){
				    return null;
				}
				public String valor_total_ivaDefault(){
				
					return null;
				
				}
				public String valor_total_ivaComment(){
				
				    return "";
				
				}
				public String valor_total_ivaPattern(){
				
					return "";
				
				}
				public String valor_total_ivaOriginalDbColumnName(){
				
					return "valor_total_iva";
				
				}

				
			    public String valor_intermediacion;

				public String getValor_intermediacion () {
					return this.valor_intermediacion;
				}

				public Boolean valor_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_intermediacionLength(){
				    return null;
				}
				public Integer valor_intermediacionPrecision(){
				    return null;
				}
				public String valor_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_intermediacionOriginalDbColumnName(){
				
					return "valor_intermediacion";
				
				}

				
			    public String valor_total_iva_intermediacion;

				public String getValor_total_iva_intermediacion () {
					return this.valor_total_iva_intermediacion;
				}

				public Boolean valor_total_iva_intermediacionIsNullable(){
				    return false;
				}
				public Boolean valor_total_iva_intermediacionIsKey(){
				    return false;
				}
				public Integer valor_total_iva_intermediacionLength(){
				    return null;
				}
				public Integer valor_total_iva_intermediacionPrecision(){
				    return null;
				}
				public String valor_total_iva_intermediacionDefault(){
				
					return null;
				
				}
				public String valor_total_iva_intermediacionComment(){
				
				    return "";
				
				}
				public String valor_total_iva_intermediacionPattern(){
				
					return "";
				
				}
				public String valor_total_iva_intermediacionOriginalDbColumnName(){
				
					return "valor_total_iva_intermediacion";
				
				}

				
			    public String valor_total_medicamento;

				public String getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public String valor_total_factura;

				public String getValor_total_factura () {
					return this.valor_total_factura;
				}

				public Boolean valor_total_facturaIsNullable(){
				    return false;
				}
				public Boolean valor_total_facturaIsKey(){
				    return false;
				}
				public Integer valor_total_facturaLength(){
				    return null;
				}
				public Integer valor_total_facturaPrecision(){
				    return null;
				}
				public String valor_total_facturaDefault(){
				
					return null;
				
				}
				public String valor_total_facturaComment(){
				
				    return "";
				
				}
				public String valor_total_facturaPattern(){
				
					return "";
				
				}
				public String valor_total_facturaOriginalDbColumnName(){
				
					return "valor_total_factura";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.prefijo == null) ? 0 : this.prefijo.hashCode());
					
						result = prime * result + ((this.numero_factura == null) ? 0 : this.numero_factura.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.prefijo == null) {
							if (other.prefijo != null)
								return false;
						
						} else if (!this.prefijo.equals(other.prefijo))
						
							return false;
					
						if (this.numero_factura == null) {
							if (other.numero_factura != null)
								return false;
						
						} else if (!this.numero_factura.equals(other.numero_factura))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.contador = this.contador;
	            other.prefijo = this.prefijo;
	            other.numero_factura = this.numero_factura;
	            other.fecha_factura = this.fecha_factura;
	            other.esm_formulacion = this.esm_formulacion;
	            other.esm_dispensacion = this.esm_dispensacion;
	            other.esm_facturacion = this.esm_facturacion;
	            other.esm_adscrito = this.esm_adscrito;
	            other.fecha_formulacion = this.fecha_formulacion;
	            other.fecha_dispensacion = this.fecha_dispensacion;
	            other.fecha_registro_dispensacion = this.fecha_registro_dispensacion;
	            other.tipo_documento = this.tipo_documento;
	            other.documento = this.documento;
	            other.tipificacion = this.tipificacion;
	            other.consecutivo_formula = this.consecutivo_formula;
	            other.tirilla = this.tirilla;
	            other.tipo_formula = this.tipo_formula;
	            other.origen_formulacion = this.origen_formulacion;
	            other.codigo_atc = this.codigo_atc;
	            other.codigo_cum = this.codigo_cum;
	            other.invima = this.invima;
	            other.codigo_cie10 = this.codigo_cie10;
	            other.lote = this.lote;
	            other.medico_codigo = this.medico_codigo;
	            other.medico_nombre = this.medico_nombre;
	            other.fecha_vencimiento = this.fecha_vencimiento;
	            other.cantidad_solicitada = this.cantidad_solicitada;
	            other.cantidad_despachada = this.cantidad_despachada;
	            other.cantidad_pendiente = this.cantidad_pendiente;
	            other.dosis = this.dosis;
	            other.frecuencia_horas = this.frecuencia_horas;
	            other.codigo_interno_servicio = this.codigo_interno_servicio;
	            other.valor_unitario = this.valor_unitario;
	            other.subtotal = this.subtotal;
	            other.valor_total_adecuacion = this.valor_total_adecuacion;
	            other.valor_total_iva = this.valor_total_iva;
	            other.valor_intermediacion = this.valor_intermediacion;
	            other.valor_total_iva_intermediacion = this.valor_total_iva_intermediacion;
	            other.valor_total_medicamento = this.valor_total_medicamento;
	            other.valor_total_factura = this.valor_total_factura;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.prefijo = this.prefijo;
	            	other.numero_factura = this.numero_factura;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.prefijo = readString(dis);
					
					this.numero_factura = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.prefijo,dos);
					
					// String
				
						writeString(this.numero_factura,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
			            this.contador = dis.readInt();
					
						this.fecha_factura = readString(dis,ois);
					
						this.esm_formulacion = readString(dis,ois);
					
						this.esm_dispensacion = readString(dis,ois);
					
						this.esm_facturacion = readString(dis,ois);
					
						this.esm_adscrito = readString(dis,ois);
					
						this.fecha_formulacion = readString(dis,ois);
					
						this.fecha_dispensacion = readString(dis,ois);
					
						this.fecha_registro_dispensacion = readString(dis,ois);
					
						this.tipo_documento = readString(dis,ois);
					
						this.documento = readString(dis,ois);
					
						this.tipificacion = readString(dis,ois);
					
						this.consecutivo_formula = readString(dis,ois);
					
						this.tirilla = readString(dis,ois);
					
						this.tipo_formula = readString(dis,ois);
					
						this.origen_formulacion = readString(dis,ois);
					
						this.codigo_atc = readString(dis,ois);
					
						this.codigo_cum = readString(dis,ois);
					
						this.invima = readString(dis,ois);
					
						this.codigo_cie10 = readString(dis,ois);
					
						this.lote = readString(dis,ois);
					
						this.medico_codigo = readString(dis,ois);
					
						this.medico_nombre = readString(dis,ois);
					
						this.fecha_vencimiento = readString(dis,ois);
					
						this.cantidad_solicitada = readString(dis,ois);
					
						this.cantidad_despachada = readString(dis,ois);
					
						this.cantidad_pendiente = readString(dis,ois);
					
						this.dosis = readString(dis,ois);
					
						this.frecuencia_horas = readString(dis,ois);
					
						this.codigo_interno_servicio = readString(dis,ois);
					
						this.valor_unitario = readString(dis,ois);
					
						this.subtotal = readString(dis,ois);
					
						this.valor_total_adecuacion = readString(dis,ois);
					
						this.valor_total_iva = readString(dis,ois);
					
						this.valor_intermediacion = readString(dis,ois);
					
						this.valor_total_iva_intermediacion = readString(dis,ois);
					
						this.valor_total_medicamento = readString(dis,ois);
					
						this.valor_total_factura = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
			            this.contador = objectIn.readInt();
					
						this.fecha_factura = readString(dis,objectIn);
					
						this.esm_formulacion = readString(dis,objectIn);
					
						this.esm_dispensacion = readString(dis,objectIn);
					
						this.esm_facturacion = readString(dis,objectIn);
					
						this.esm_adscrito = readString(dis,objectIn);
					
						this.fecha_formulacion = readString(dis,objectIn);
					
						this.fecha_dispensacion = readString(dis,objectIn);
					
						this.fecha_registro_dispensacion = readString(dis,objectIn);
					
						this.tipo_documento = readString(dis,objectIn);
					
						this.documento = readString(dis,objectIn);
					
						this.tipificacion = readString(dis,objectIn);
					
						this.consecutivo_formula = readString(dis,objectIn);
					
						this.tirilla = readString(dis,objectIn);
					
						this.tipo_formula = readString(dis,objectIn);
					
						this.origen_formulacion = readString(dis,objectIn);
					
						this.codigo_atc = readString(dis,objectIn);
					
						this.codigo_cum = readString(dis,objectIn);
					
						this.invima = readString(dis,objectIn);
					
						this.codigo_cie10 = readString(dis,objectIn);
					
						this.lote = readString(dis,objectIn);
					
						this.medico_codigo = readString(dis,objectIn);
					
						this.medico_nombre = readString(dis,objectIn);
					
						this.fecha_vencimiento = readString(dis,objectIn);
					
						this.cantidad_solicitada = readString(dis,objectIn);
					
						this.cantidad_despachada = readString(dis,objectIn);
					
						this.cantidad_pendiente = readString(dis,objectIn);
					
						this.dosis = readString(dis,objectIn);
					
						this.frecuencia_horas = readString(dis,objectIn);
					
						this.codigo_interno_servicio = readString(dis,objectIn);
					
						this.valor_unitario = readString(dis,objectIn);
					
						this.subtotal = readString(dis,objectIn);
					
						this.valor_total_adecuacion = readString(dis,objectIn);
					
						this.valor_total_iva = readString(dis,objectIn);
					
						this.valor_intermediacion = readString(dis,objectIn);
					
						this.valor_total_iva_intermediacion = readString(dis,objectIn);
					
						this.valor_total_medicamento = readString(dis,objectIn);
					
						this.valor_total_factura = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
		            	dos.writeInt(this.contador);
					
						writeString(this.fecha_factura, dos, oos);
					
						writeString(this.esm_formulacion, dos, oos);
					
						writeString(this.esm_dispensacion, dos, oos);
					
						writeString(this.esm_facturacion, dos, oos);
					
						writeString(this.esm_adscrito, dos, oos);
					
						writeString(this.fecha_formulacion, dos, oos);
					
						writeString(this.fecha_dispensacion, dos, oos);
					
						writeString(this.fecha_registro_dispensacion, dos, oos);
					
						writeString(this.tipo_documento, dos, oos);
					
						writeString(this.documento, dos, oos);
					
						writeString(this.tipificacion, dos, oos);
					
						writeString(this.consecutivo_formula, dos, oos);
					
						writeString(this.tirilla, dos, oos);
					
						writeString(this.tipo_formula, dos, oos);
					
						writeString(this.origen_formulacion, dos, oos);
					
						writeString(this.codigo_atc, dos, oos);
					
						writeString(this.codigo_cum, dos, oos);
					
						writeString(this.invima, dos, oos);
					
						writeString(this.codigo_cie10, dos, oos);
					
						writeString(this.lote, dos, oos);
					
						writeString(this.medico_codigo, dos, oos);
					
						writeString(this.medico_nombre, dos, oos);
					
						writeString(this.fecha_vencimiento, dos, oos);
					
						writeString(this.cantidad_solicitada, dos, oos);
					
						writeString(this.cantidad_despachada, dos, oos);
					
						writeString(this.cantidad_pendiente, dos, oos);
					
						writeString(this.dosis, dos, oos);
					
						writeString(this.frecuencia_horas, dos, oos);
					
						writeString(this.codigo_interno_servicio, dos, oos);
					
						writeString(this.valor_unitario, dos, oos);
					
						writeString(this.subtotal, dos, oos);
					
						writeString(this.valor_total_adecuacion, dos, oos);
					
						writeString(this.valor_total_iva, dos, oos);
					
						writeString(this.valor_intermediacion, dos, oos);
					
						writeString(this.valor_total_iva_intermediacion, dos, oos);
					
						writeString(this.valor_total_medicamento, dos, oos);
					
						writeString(this.valor_total_factura, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					objectOut.writeInt(this.contador);
					
						writeString(this.fecha_factura, dos, objectOut);
					
						writeString(this.esm_formulacion, dos, objectOut);
					
						writeString(this.esm_dispensacion, dos, objectOut);
					
						writeString(this.esm_facturacion, dos, objectOut);
					
						writeString(this.esm_adscrito, dos, objectOut);
					
						writeString(this.fecha_formulacion, dos, objectOut);
					
						writeString(this.fecha_dispensacion, dos, objectOut);
					
						writeString(this.fecha_registro_dispensacion, dos, objectOut);
					
						writeString(this.tipo_documento, dos, objectOut);
					
						writeString(this.documento, dos, objectOut);
					
						writeString(this.tipificacion, dos, objectOut);
					
						writeString(this.consecutivo_formula, dos, objectOut);
					
						writeString(this.tirilla, dos, objectOut);
					
						writeString(this.tipo_formula, dos, objectOut);
					
						writeString(this.origen_formulacion, dos, objectOut);
					
						writeString(this.codigo_atc, dos, objectOut);
					
						writeString(this.codigo_cum, dos, objectOut);
					
						writeString(this.invima, dos, objectOut);
					
						writeString(this.codigo_cie10, dos, objectOut);
					
						writeString(this.lote, dos, objectOut);
					
						writeString(this.medico_codigo, dos, objectOut);
					
						writeString(this.medico_nombre, dos, objectOut);
					
						writeString(this.fecha_vencimiento, dos, objectOut);
					
						writeString(this.cantidad_solicitada, dos, objectOut);
					
						writeString(this.cantidad_despachada, dos, objectOut);
					
						writeString(this.cantidad_pendiente, dos, objectOut);
					
						writeString(this.dosis, dos, objectOut);
					
						writeString(this.frecuencia_horas, dos, objectOut);
					
						writeString(this.codigo_interno_servicio, dos, objectOut);
					
						writeString(this.valor_unitario, dos, objectOut);
					
						writeString(this.subtotal, dos, objectOut);
					
						writeString(this.valor_total_adecuacion, dos, objectOut);
					
						writeString(this.valor_total_iva, dos, objectOut);
					
						writeString(this.valor_intermediacion, dos, objectOut);
					
						writeString(this.valor_total_iva_intermediacion, dos, objectOut);
					
						writeString(this.valor_total_medicamento, dos, objectOut);
					
						writeString(this.valor_total_factura, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("contador="+String.valueOf(contador));
		sb.append(",prefijo="+prefijo);
		sb.append(",numero_factura="+numero_factura);
		sb.append(",fecha_factura="+fecha_factura);
		sb.append(",esm_formulacion="+esm_formulacion);
		sb.append(",esm_dispensacion="+esm_dispensacion);
		sb.append(",esm_facturacion="+esm_facturacion);
		sb.append(",esm_adscrito="+esm_adscrito);
		sb.append(",fecha_formulacion="+fecha_formulacion);
		sb.append(",fecha_dispensacion="+fecha_dispensacion);
		sb.append(",fecha_registro_dispensacion="+fecha_registro_dispensacion);
		sb.append(",tipo_documento="+tipo_documento);
		sb.append(",documento="+documento);
		sb.append(",tipificacion="+tipificacion);
		sb.append(",consecutivo_formula="+consecutivo_formula);
		sb.append(",tirilla="+tirilla);
		sb.append(",tipo_formula="+tipo_formula);
		sb.append(",origen_formulacion="+origen_formulacion);
		sb.append(",codigo_atc="+codigo_atc);
		sb.append(",codigo_cum="+codigo_cum);
		sb.append(",invima="+invima);
		sb.append(",codigo_cie10="+codigo_cie10);
		sb.append(",lote="+lote);
		sb.append(",medico_codigo="+medico_codigo);
		sb.append(",medico_nombre="+medico_nombre);
		sb.append(",fecha_vencimiento="+fecha_vencimiento);
		sb.append(",cantidad_solicitada="+cantidad_solicitada);
		sb.append(",cantidad_despachada="+cantidad_despachada);
		sb.append(",cantidad_pendiente="+cantidad_pendiente);
		sb.append(",dosis="+dosis);
		sb.append(",frecuencia_horas="+frecuencia_horas);
		sb.append(",codigo_interno_servicio="+codigo_interno_servicio);
		sb.append(",valor_unitario="+valor_unitario);
		sb.append(",subtotal="+subtotal);
		sb.append(",valor_total_adecuacion="+valor_total_adecuacion);
		sb.append(",valor_total_iva="+valor_total_iva);
		sb.append(",valor_intermediacion="+valor_intermediacion);
		sb.append(",valor_total_iva_intermediacion="+valor_total_iva_intermediacion);
		sb.append(",valor_total_medicamento="+valor_total_medicamento);
		sb.append(",valor_total_factura="+valor_total_factura);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.prefijo, other.prefijo);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.numero_factura, other.numero_factura);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row2");
					}
				
		int tos_count_tAdvancedHash_row2 = 0;
		

			   		// connection name:row2
			   		// source node:tHashInput_8 - inputs:(after_tHashInput_4) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_4 - inputs:(row88,row2) outputs:(INS)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row24Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row2.contador = next_tHashInput_8.contador;
	row2.prefijo = next_tHashInput_8.prefijo;
	row2.numero_factura = next_tHashInput_8.numero_factura;
	row2.fecha_factura = next_tHashInput_8.fecha_factura;
	row2.esm_formulacion = next_tHashInput_8.esm_formulacion;
	row2.esm_dispensacion = next_tHashInput_8.esm_dispensacion;
	row2.esm_facturacion = next_tHashInput_8.esm_facturacion;
	row2.esm_adscrito = next_tHashInput_8.esm_adscrito;
	row2.fecha_formulacion = next_tHashInput_8.fecha_formulacion;
	row2.fecha_dispensacion = next_tHashInput_8.fecha_dispensacion;
	row2.fecha_registro_dispensacion = next_tHashInput_8.fecha_registro_dispensacion;
	row2.tipo_documento = next_tHashInput_8.tipo_documento;
	row2.documento = next_tHashInput_8.documento;
	row2.tipificacion = next_tHashInput_8.tipificacion;
	row2.consecutivo_formula = next_tHashInput_8.consecutivo_formula;
	row2.tirilla = next_tHashInput_8.tirilla;
	row2.tipo_formula = next_tHashInput_8.tipo_formula;
	row2.origen_formulacion = next_tHashInput_8.origen_formulacion;
	row2.codigo_atc = next_tHashInput_8.codigo_atc;
	row2.codigo_cum = next_tHashInput_8.codigo_cum;
	row2.invima = next_tHashInput_8.invima;
	row2.codigo_cie10 = next_tHashInput_8.codigo_cie10;
	row2.lote = next_tHashInput_8.lote;
	row2.medico_codigo = next_tHashInput_8.medico_codigo;
	row2.medico_nombre = next_tHashInput_8.medico_nombre;
	row2.fecha_vencimiento = next_tHashInput_8.fecha_vencimiento;
	row2.cantidad_solicitada = next_tHashInput_8.cantidad_solicitada;
	row2.cantidad_despachada = next_tHashInput_8.cantidad_despachada;
	row2.cantidad_pendiente = next_tHashInput_8.cantidad_pendiente;
	row2.dosis = next_tHashInput_8.dosis;
	row2.frecuencia_horas = next_tHashInput_8.frecuencia_horas;
	row2.codigo_interno_servicio = next_tHashInput_8.codigo_interno_servicio;
	row2.valor_unitario = next_tHashInput_8.valor_unitario;
	row2.subtotal = next_tHashInput_8.subtotal;
	row2.valor_total_adecuacion = next_tHashInput_8.valor_total_adecuacion;
	row2.valor_total_iva = next_tHashInput_8.valor_total_iva;
	row2.valor_intermediacion = next_tHashInput_8.valor_intermediacion;
	row2.valor_total_iva_intermediacion = next_tHashInput_8.valor_total_iva_intermediacion;
	row2.valor_total_medicamento = next_tHashInput_8.valor_total_medicamento;
	row2.valor_total_factura = next_tHashInput_8.valor_total_factura;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row2"
						
						);
					}
					


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.contador = row2.contador;
				
				row2_HashRow.prefijo = row2.prefijo;
				
				row2_HashRow.numero_factura = row2.numero_factura;
				
				row2_HashRow.fecha_factura = row2.fecha_factura;
				
				row2_HashRow.esm_formulacion = row2.esm_formulacion;
				
				row2_HashRow.esm_dispensacion = row2.esm_dispensacion;
				
				row2_HashRow.esm_facturacion = row2.esm_facturacion;
				
				row2_HashRow.esm_adscrito = row2.esm_adscrito;
				
				row2_HashRow.fecha_formulacion = row2.fecha_formulacion;
				
				row2_HashRow.fecha_dispensacion = row2.fecha_dispensacion;
				
				row2_HashRow.fecha_registro_dispensacion = row2.fecha_registro_dispensacion;
				
				row2_HashRow.tipo_documento = row2.tipo_documento;
				
				row2_HashRow.documento = row2.documento;
				
				row2_HashRow.tipificacion = row2.tipificacion;
				
				row2_HashRow.consecutivo_formula = row2.consecutivo_formula;
				
				row2_HashRow.tirilla = row2.tirilla;
				
				row2_HashRow.tipo_formula = row2.tipo_formula;
				
				row2_HashRow.origen_formulacion = row2.origen_formulacion;
				
				row2_HashRow.codigo_atc = row2.codigo_atc;
				
				row2_HashRow.codigo_cum = row2.codigo_cum;
				
				row2_HashRow.invima = row2.invima;
				
				row2_HashRow.codigo_cie10 = row2.codigo_cie10;
				
				row2_HashRow.lote = row2.lote;
				
				row2_HashRow.medico_codigo = row2.medico_codigo;
				
				row2_HashRow.medico_nombre = row2.medico_nombre;
				
				row2_HashRow.fecha_vencimiento = row2.fecha_vencimiento;
				
				row2_HashRow.cantidad_solicitada = row2.cantidad_solicitada;
				
				row2_HashRow.cantidad_despachada = row2.cantidad_despachada;
				
				row2_HashRow.cantidad_pendiente = row2.cantidad_pendiente;
				
				row2_HashRow.dosis = row2.dosis;
				
				row2_HashRow.frecuencia_horas = row2.frecuencia_horas;
				
				row2_HashRow.codigo_interno_servicio = row2.codigo_interno_servicio;
				
				row2_HashRow.valor_unitario = row2.valor_unitario;
				
				row2_HashRow.subtotal = row2.subtotal;
				
				row2_HashRow.valor_total_adecuacion = row2.valor_total_adecuacion;
				
				row2_HashRow.valor_total_iva = row2.valor_total_iva;
				
				row2_HashRow.valor_intermediacion = row2.valor_intermediacion;
				
				row2_HashRow.valor_total_iva_intermediacion = row2.valor_total_iva_intermediacion;
				
				row2_HashRow.valor_total_medicamento = row2.valor_total_medicamento;
				
				row2_HashRow.valor_total_factura = row2.valor_total_factura;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row2 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

tHash_Lookup_row2.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row2");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";
	
	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row46Struct implements routines.system.IPersistableRow<row46Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];

	
			    public BigDecimal valor_total_medicamento;

				public BigDecimal getValor_total_medicamento () {
					return this.valor_total_medicamento;
				}

				public Boolean valor_total_medicamentoIsNullable(){
				    return false;
				}
				public Boolean valor_total_medicamentoIsKey(){
				    return false;
				}
				public Integer valor_total_medicamentoLength(){
				    return null;
				}
				public Integer valor_total_medicamentoPrecision(){
				    return null;
				}
				public String valor_total_medicamentoDefault(){
				
					return null;
				
				}
				public String valor_total_medicamentoComment(){
				
				    return "";
				
				}
				public String valor_total_medicamentoPattern(){
				
					return "";
				
				}
				public String valor_total_medicamentoOriginalDbColumnName(){
				
					return "valor_total_medicamento";
				
				}

				
			    public BigDecimal total;

				public BigDecimal getTotal () {
					return this.total;
				}

				public Boolean totalIsNullable(){
				    return true;
				}
				public Boolean totalIsKey(){
				    return false;
				}
				public Integer totalLength(){
				    return null;
				}
				public Integer totalPrecision(){
				    return null;
				}
				public String totalDefault(){
				
					return null;
				
				}
				public String totalComment(){
				
				    return "";
				
				}
				public String totalPattern(){
				
					return "";
				
				}
				public String totalOriginalDbColumnName(){
				
					return "total";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
						this.valor_total_medicamento = (BigDecimal) dis.readObject();
					
						this.total = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
       			    	dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.valor_total_medicamento);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.total);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("valor_total_medicamento="+String.valueOf(valor_total_medicamento));
		sb.append(",total="+String.valueOf(total));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row46Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_25Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_25_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row46Struct row46 = new row46Struct();




	
	/**
	 * [tAdvancedHash_row46 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row46", false);
		start_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row46");
					}
				
		int tos_count_tAdvancedHash_row46 = 0;
		

			   		// connection name:row46
			   		// source node:tHashInput_25 - inputs:(after_tFixedFlowInput_6) outputs:(row46,row46) | target node:tAdvancedHash_row46 - inputs:(row46) outputs:()
			   		// linked node: tMap_5 - inputs:(row26,row46) outputs:(Recepcion)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row46 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_ROWS;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row46Struct> tHash_Lookup_row46 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row46Struct>getLookup(matchingModeEnum_row46);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row46", tHash_Lookup_row46);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row46 begin ] stop
 */



	
	/**
	 * [tHashInput_25 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_25", false);
		start_Hash.put("tHashInput_25", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_25";
	
	
		int tos_count_tHashInput_25 = 0;
		


int nb_line_tHashInput_25 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_25=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row45Struct> tHashFile_tHashInput_25 = mf_tHashInput_25.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_20");
if(tHashFile_tHashInput_25==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row45Struct> iterator_tHashInput_25 = tHashFile_tHashInput_25.iterator();
while (iterator_tHashInput_25.hasNext()) {
    row45Struct next_tHashInput_25 = iterator_tHashInput_25.next();

	row46.valor_total_medicamento = next_tHashInput_25.valor_total_medicamento;
	row46.total = next_tHashInput_25.total;

 



/**
 * [tHashInput_25 begin ] stop
 */
	
	/**
	 * [tHashInput_25 main ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 


	tos_count_tHashInput_25++;

/**
 * [tHashInput_25 main ] stop
 */
	
	/**
	 * [tHashInput_25 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row46"
						
						);
					}
					


			   
			   

					row46Struct row46_HashRow = new row46Struct();
		   	   	   
				
				row46_HashRow.valor_total_medicamento = row46.valor_total_medicamento;
				
				row46_HashRow.total = row46.total;
				
			tHash_Lookup_row46.put(row46_HashRow);
			
            




 


	tos_count_tAdvancedHash_row46++;

/**
 * [tAdvancedHash_row46 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row46 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_25 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_25 end ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	
    

		
			nb_line_tHashInput_25++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_20");
	


	globalMap.put("tHashInput_25_NB_LINE", nb_line_tHashInput_25);       

 

ok_Hash.put("tHashInput_25", true);
end_Hash.put("tHashInput_25", System.currentTimeMillis());




/**
 * [tHashInput_25 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

tHash_Lookup_row46.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row46");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row46", true);
end_Hash.put("tAdvancedHash_row46", System.currentTimeMillis());




/**
 * [tAdvancedHash_row46 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_25 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_25";
	
	

 



/**
 * [tHashInput_25 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row46 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row46";
	
	

 



/**
 * [tAdvancedHash_row46 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_25_SUBPROCESS_STATE", 1);
	}
	


public static class row87Struct implements routines.system.IPersistableComparableLookupRow<row87Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row87Struct other = (row87Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row87Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row87Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row87Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row87Struct row87 = new row87Struct();




	
	/**
	 * [tAdvancedHash_row87 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row87", false);
		start_Hash.put("tAdvancedHash_row87", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row87";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row87");
					}
				
		int tos_count_tAdvancedHash_row87 = 0;
		

			   		// connection name:row87
			   		// source node:tHashInput_7 - inputs:(after_tHashInput_6) outputs:(row87,row87) | target node:tAdvancedHash_row87 - inputs:(row87) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row87 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row87Struct> tHash_Lookup_row87 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row87Struct>getLookup(matchingModeEnum_row87);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row87", tHash_Lookup_row87);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row87 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_10");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row25Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row25Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row87.ID = next_tHashInput_7.ID;
	row87.NOMBRE = next_tHashInput_7.NOMBRE;
	row87.SIGLA = next_tHashInput_7.SIGLA;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row87 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row87";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row87"
						
						);
					}
					


			   
			   

					row87Struct row87_HashRow = new row87Struct();
		   	   	   
				
				row87_HashRow.ID = row87.ID;
				
				row87_HashRow.NOMBRE = row87.NOMBRE;
				
				row87_HashRow.SIGLA = row87.SIGLA;
				
			tHash_Lookup_row87.put(row87_HashRow);
			
            




 


	tos_count_tAdvancedHash_row87++;

/**
 * [tAdvancedHash_row87 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row87 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row87";
	
	

 



/**
 * [tAdvancedHash_row87 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row87 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row87";
	
	

 



/**
 * [tAdvancedHash_row87 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_10");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row87 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row87";
	
	

tHash_Lookup_row87.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row87");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row87", true);
end_Hash.put("tAdvancedHash_row87", System.currentTimeMillis());




/**
 * [tAdvancedHash_row87 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row87 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row87";
	
	

 



/**
 * [tAdvancedHash_row87 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row86Struct implements routines.system.IPersistableComparableLookupRow<row86Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return null;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NUMERO;

				public String getNUMERO () {
					return this.NUMERO;
				}

				public Boolean NUMEROIsNullable(){
				    return true;
				}
				public Boolean NUMEROIsKey(){
				    return false;
				}
				public Integer NUMEROLength(){
				    return null;
				}
				public Integer NUMEROPrecision(){
				    return null;
				}
				public String NUMERODefault(){
				
					return null;
				
				}
				public String NUMEROComment(){
				
				    return "";
				
				}
				public String NUMEROPattern(){
				
					return "";
				
				}
				public String NUMEROOriginalDbColumnName(){
				
					return "NUMERO";
				
				}

				
			    public String PREFIJO;

				public String getPREFIJO () {
					return this.PREFIJO;
				}

				public Boolean PREFIJOIsNullable(){
				    return true;
				}
				public Boolean PREFIJOIsKey(){
				    return false;
				}
				public Integer PREFIJOLength(){
				    return null;
				}
				public Integer PREFIJOPrecision(){
				    return null;
				}
				public String PREFIJODefault(){
				
					return null;
				
				}
				public String PREFIJOComment(){
				
				    return "";
				
				}
				public String PREFIJOPattern(){
				
					return "";
				
				}
				public String PREFIJOOriginalDbColumnName(){
				
					return "PREFIJO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.NUMERO == null) ? 0 : this.NUMERO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row86Struct other = (row86Struct) obj;
		
						if (this.NUMERO == null) {
							if (other.NUMERO != null)
								return false;
						
						} else if (!this.NUMERO.equals(other.NUMERO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row86Struct other) {

		other.ID = this.ID;
	            other.NUMERO = this.NUMERO;
	            other.PREFIJO = this.PREFIJO;
	            
	}

	public void copyKeysDataTo(row86Struct other) {

		other.NUMERO = this.NUMERO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.NUMERO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.NUMERO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.NUMERO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.NUMERO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.PREFIJO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.PREFIJO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.PREFIJO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.PREFIJO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NUMERO="+NUMERO);
		sb.append(",PREFIJO="+PREFIJO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row86Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.NUMERO, other.NUMERO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row86Struct row86 = new row86Struct();




	
	/**
	 * [tAdvancedHash_row86 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row86", false);
		start_Hash.put("tAdvancedHash_row86", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row86";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row86");
					}
				
		int tos_count_tAdvancedHash_row86 = 0;
		

			   		// connection name:row86
			   		// source node:tOracleInput_13 - inputs:(after_tHashInput_6) outputs:(row86,row86) | target node:tAdvancedHash_row86 - inputs:(row86) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row86 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row86Struct> tHash_Lookup_row86 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row86Struct>getLookup(matchingModeEnum_row86);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row86", tHash_Lookup_row86);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row86 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				String driverClass_tOracleInput_13 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_13);
				
			String url_tOracleInput_13 = null;
				url_tOracleInput_13 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_13 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_13 = context.db_origen_Password; 

				String dbPwd_tOracleInput_13 = decryptedPassword_tOracleInput_13;

				
					java.util.Properties atnParamsPrope_tOracleInput_13 = new java.util.Properties();
					atnParamsPrope_tOracleInput_13.put("user",dbUser_tOracleInput_13);
					atnParamsPrope_tOracleInput_13.put("password",dbPwd_tOracleInput_13);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_13.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_13 = java.sql.DriverManager.getConnection(url_tOracleInput_13, atnParamsPrope_tOracleInput_13);
				java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_13.next()) {
					sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
				}
                                if (!(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                                }
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_13.setFetchSize(1000);


		    String dbquery_tOracleInput_13 = "SELECT ID,NUMERO,PREFIJO FROM ACM_FACTURA WHERE DCARGUE_ID = "+context.vArchivo_Id;
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row86.ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row86.ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row86.NUMERO = null;
							} else {
	                         		
        	row86.NUMERO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row86.PREFIJO = null;
							} else {
	                         		
        	row86.PREFIJO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 3, false);
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row86 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row86";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row86"
						
						);
					}
					


			   
			   

					row86Struct row86_HashRow = new row86Struct();
		   	   	   
				
				row86_HashRow.ID = row86.ID;
				
				row86_HashRow.NUMERO = row86.NUMERO;
				
				row86_HashRow.PREFIJO = row86.PREFIJO;
				
			tHash_Lookup_row86.put(row86_HashRow);
			
            




 


	tos_count_tAdvancedHash_row86++;

/**
 * [tAdvancedHash_row86 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row86 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row86";
	
	

 



/**
 * [tAdvancedHash_row86 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row86 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row86";
	
	

 



/**
 * [tAdvancedHash_row86 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
	if(conn_tOracleInput_13 != null && !conn_tOracleInput_13.isClosed()) {
	
			conn_tOracleInput_13.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row86 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row86";
	
	

tHash_Lookup_row86.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row86");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row86", true);
end_Hash.put("tAdvancedHash_row86", System.currentTimeMillis());




/**
 * [tAdvancedHash_row86 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row86 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row86";
	
	

 



/**
 * [tAdvancedHash_row86 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tHashInput_10 - inputs:(after_tHashInput_6) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tHashInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_10", false);
		start_Hash.put("tHashInput_10", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_10";
	
	
		int tos_count_tHashInput_10 = 0;
		


int nb_line_tHashInput_10 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_10=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_10 = mf_tHashInput_10.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_10==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_10 = tHashFile_tHashInput_10.iterator();
while (iterator_tHashInput_10.hasNext()) {
    row4Struct next_tHashInput_10 = iterator_tHashInput_10.next();

	row7.ID = next_tHashInput_10.ID;
	row7.CODIGO = next_tHashInput_10.CODIGO;

 



/**
 * [tHashInput_10 begin ] stop
 */
	
	/**
	 * [tHashInput_10 main ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 


	tos_count_tHashInput_10++;

/**
 * [tHashInput_10 main ] stop
 */
	
	/**
	 * [tHashInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.ID = row7.ID;
				
				row7_HashRow.CODIGO = row7.CODIGO;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_10 end ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	
    

		
			nb_line_tHashInput_10++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_10_NB_LINE", nb_line_tHashInput_10);       

 

ok_Hash.put("tHashInput_10", true);
end_Hash.put("tHashInput_10", System.currentTimeMillis());




/**
 * [tHashInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_10 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_10";
	
	

 



/**
 * [tHashInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableComparableLookupRow<row29Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_101061\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo de origen";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "1";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "FK - GEN_ESTREGISTRO (Estado del Registro)";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 20;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla para el registro del tipo de Origen";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tAdvancedHash_row29 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row29", false);
		start_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row29";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tAdvancedHash_row29 = 0;
		

			   		// connection name:row29
			   		// source node:tHashInput_13 - inputs:(after_tHashInput_6) outputs:(row29,row29) | target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row29Struct> tHash_Lookup_row29 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row29Struct>getLookup(matchingModeEnum_row29);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row29 begin ] stop
 */



	
	/**
	 * [tHashInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_13", false);
		start_Hash.put("tHashInput_13", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_13";
	
	
		int tos_count_tHashInput_13 = 0;
		


int nb_line_tHashInput_13 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_13=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row22Struct> tHashFile_tHashInput_13 = mf_tHashInput_13.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_13");
if(tHashFile_tHashInput_13==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row22Struct> iterator_tHashInput_13 = tHashFile_tHashInput_13.iterator();
while (iterator_tHashInput_13.hasNext()) {
    row22Struct next_tHashInput_13 = iterator_tHashInput_13.next();

	row29.ID = next_tHashInput_13.ID;
	row29.NOMBRE = next_tHashInput_13.NOMBRE;
	row29.ESTREGISTRO_ID = next_tHashInput_13.ESTREGISTRO_ID;
	row29.SIGLA = next_tHashInput_13.SIGLA;

 



/**
 * [tHashInput_13 begin ] stop
 */
	
	/**
	 * [tHashInput_13 main ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 


	tos_count_tHashInput_13++;

/**
 * [tHashInput_13 main ] stop
 */
	
	/**
	 * [tHashInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					


			   
			   

					row29Struct row29_HashRow = new row29Struct();
		   	   	   
				
				row29_HashRow.ID = row29.ID;
				
				row29_HashRow.NOMBRE = row29.NOMBRE;
				
				row29_HashRow.ESTREGISTRO_ID = row29.ESTREGISTRO_ID;
				
				row29_HashRow.SIGLA = row29.SIGLA;
				
			tHash_Lookup_row29.put(row29_HashRow);
			
            




 


	tos_count_tAdvancedHash_row29++;

/**
 * [tAdvancedHash_row29 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_13 end ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	
    

		
			nb_line_tHashInput_13++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_13");
	


	globalMap.put("tHashInput_13_NB_LINE", nb_line_tHashInput_13);       

 

ok_Hash.put("tHashInput_13", true);
end_Hash.put("tHashInput_13", System.currentTimeMillis());




/**
 * [tHashInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

tHash_Lookup_row29.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row29", true);
end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());




/**
 * [tAdvancedHash_row29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_13 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_13";
	
	

 



/**
 * [tHashInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row30Struct implements routines.system.IPersistableComparableLookupRow<row30Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return true;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "SALUDSIS\".\"ISEQ$$_100510\".nextval";
				
				}
				public String IDComment(){
				
				    return "PK - Llave Primaria";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 100;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "Nombre del tipo de formula";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public BigDecimal ESTREGISTRO_ID;

				public BigDecimal getESTREGISTRO_ID () {
					return this.ESTREGISTRO_ID;
				}

				public Boolean ESTREGISTRO_IDIsNullable(){
				    return false;
				}
				public Boolean ESTREGISTRO_IDIsKey(){
				    return false;
				}
				public Integer ESTREGISTRO_IDLength(){
				    return 0;
				}
				public Integer ESTREGISTRO_IDPrecision(){
				    return null;
				}
				public String ESTREGISTRO_IDDefault(){
				
					return "1";
				
				}
				public String ESTREGISTRO_IDComment(){
				
				    return "FK - GEN_ESTREGISTRO";
				
				}
				public String ESTREGISTRO_IDPattern(){
				
					return "";
				
				}
				public String ESTREGISTRO_IDOriginalDbColumnName(){
				
					return "ESTREGISTRO_ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 5;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "Sigla del tipo de formula";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.SIGLA == null) ? 0 : this.SIGLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row30Struct other = (row30Struct) obj;
		
						if (this.SIGLA == null) {
							if (other.SIGLA != null)
								return false;
						
						} else if (!this.SIGLA.equals(other.SIGLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row30Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            other.ESTREGISTRO_ID = this.ESTREGISTRO_ID;
	            other.SIGLA = this.SIGLA;
	            
	}

	public void copyKeysDataTo(row30Struct other) {

		other.SIGLA = this.SIGLA;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.SIGLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.SIGLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.ESTREGISTRO_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTREGISTRO_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",ESTREGISTRO_ID="+String.valueOf(ESTREGISTRO_ID));
		sb.append(",SIGLA="+SIGLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.SIGLA, other.SIGLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();




	
	/**
	 * [tAdvancedHash_row30 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row30", false);
		start_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tAdvancedHash_row30 = 0;
		

			   		// connection name:row30
			   		// source node:tHashInput_12 - inputs:(after_tHashInput_6) outputs:(row30,row30) | target node:tAdvancedHash_row30 - inputs:(row30) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row30 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row30Struct> tHash_Lookup_row30 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row30Struct>getLookup(matchingModeEnum_row30);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row30", tHash_Lookup_row30);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row30 begin ] stop
 */



	
	/**
	 * [tHashInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_12", false);
		start_Hash.put("tHashInput_12", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_12";
	
	
		int tos_count_tHashInput_12 = 0;
		


int nb_line_tHashInput_12 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_12=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row28Struct> tHashFile_tHashInput_12 = mf_tHashInput_12.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_14");
if(tHashFile_tHashInput_12==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row28Struct> iterator_tHashInput_12 = tHashFile_tHashInput_12.iterator();
while (iterator_tHashInput_12.hasNext()) {
    row28Struct next_tHashInput_12 = iterator_tHashInput_12.next();

	row30.ID = next_tHashInput_12.ID;
	row30.NOMBRE = next_tHashInput_12.NOMBRE;
	row30.ESTREGISTRO_ID = next_tHashInput_12.ESTREGISTRO_ID;
	row30.SIGLA = next_tHashInput_12.SIGLA;

 



/**
 * [tHashInput_12 begin ] stop
 */
	
	/**
	 * [tHashInput_12 main ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 


	tos_count_tHashInput_12++;

/**
 * [tHashInput_12 main ] stop
 */
	
	/**
	 * [tHashInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					


			   
			   

					row30Struct row30_HashRow = new row30Struct();
		   	   	   
				
				row30_HashRow.ID = row30.ID;
				
				row30_HashRow.NOMBRE = row30.NOMBRE;
				
				row30_HashRow.ESTREGISTRO_ID = row30.ESTREGISTRO_ID;
				
				row30_HashRow.SIGLA = row30.SIGLA;
				
			tHash_Lookup_row30.put(row30_HashRow);
			
            




 


	tos_count_tAdvancedHash_row30++;

/**
 * [tAdvancedHash_row30 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row30 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_12 end ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	
    

		
			nb_line_tHashInput_12++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_14");
	


	globalMap.put("tHashInput_12_NB_LINE", nb_line_tHashInput_12);       

 

ok_Hash.put("tHashInput_12", true);
end_Hash.put("tHashInput_12", System.currentTimeMillis());




/**
 * [tHashInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

tHash_Lookup_row30.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row30", true);
end_Hash.put("tAdvancedHash_row30", System.currentTimeMillis());




/**
 * [tAdvancedHash_row30 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_12 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_12";
	
	

 



/**
 * [tHashInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row30 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row30";
	
	

 



/**
 * [tAdvancedHash_row30 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row38Struct implements routines.system.IPersistableComparableLookupRow<row38Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row38Struct other = (row38Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row38Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row38Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row38Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row38Struct row38 = new row38Struct();




	
	/**
	 * [tAdvancedHash_row38 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row38", false);
		start_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row38";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row38");
					}
				
		int tos_count_tAdvancedHash_row38 = 0;
		

			   		// connection name:row38
			   		// source node:tHashInput_19 - inputs:(after_tHashInput_6) outputs:(row38,row38) | target node:tAdvancedHash_row38 - inputs:(row38) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row38 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row38Struct> tHash_Lookup_row38 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row38Struct>getLookup(matchingModeEnum_row38);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row38", tHash_Lookup_row38);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row38 begin ] stop
 */



	
	/**
	 * [tHashInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_19", false);
		start_Hash.put("tHashInput_19", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_19";
	
	
		int tos_count_tHashInput_19 = 0;
		


int nb_line_tHashInput_19 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_19=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_19 = mf_tHashInput_19.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_19==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_19 = tHashFile_tHashInput_19.iterator();
while (iterator_tHashInput_19.hasNext()) {
    row9Struct next_tHashInput_19 = iterator_tHashInput_19.next();

	row38.ESTABLECIMIENTOID = next_tHashInput_19.ESTABLECIMIENTOID;
	row38.SIGLA = next_tHashInput_19.SIGLA;
	row38.NOMBRE = next_tHashInput_19.NOMBRE;
	row38.CODIGO = next_tHashInput_19.CODIGO;
	row38.FUERZA_ID = next_tHashInput_19.FUERZA_ID;

 



/**
 * [tHashInput_19 begin ] stop
 */
	
	/**
	 * [tHashInput_19 main ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 


	tos_count_tHashInput_19++;

/**
 * [tHashInput_19 main ] stop
 */
	
	/**
	 * [tHashInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row38"
						
						);
					}
					


			   
			   

					row38Struct row38_HashRow = new row38Struct();
		   	   	   
				
				row38_HashRow.ESTABLECIMIENTOID = row38.ESTABLECIMIENTOID;
				
				row38_HashRow.SIGLA = row38.SIGLA;
				
				row38_HashRow.NOMBRE = row38.NOMBRE;
				
				row38_HashRow.CODIGO = row38.CODIGO;
				
				row38_HashRow.FUERZA_ID = row38.FUERZA_ID;
				
			tHash_Lookup_row38.put(row38_HashRow);
			
            




 


	tos_count_tAdvancedHash_row38++;

/**
 * [tAdvancedHash_row38 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row38 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_19 end ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	
    

		
			nb_line_tHashInput_19++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_19_NB_LINE", nb_line_tHashInput_19);       

 

ok_Hash.put("tHashInput_19", true);
end_Hash.put("tHashInput_19", System.currentTimeMillis());




/**
 * [tHashInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

tHash_Lookup_row38.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row38");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row38", true);
end_Hash.put("tAdvancedHash_row38", System.currentTimeMillis());




/**
 * [tAdvancedHash_row38 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_19 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_19";
	
	

 



/**
 * [tHashInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row38 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row38";
	
	

 



/**
 * [tAdvancedHash_row38 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row39Struct implements routines.system.IPersistableComparableLookupRow<row39Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row39Struct other = (row39Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row39Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row39Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row39Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row39Struct row39 = new row39Struct();




	
	/**
	 * [tAdvancedHash_row39 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row39", false);
		start_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row39";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row39");
					}
				
		int tos_count_tAdvancedHash_row39 = 0;
		

			   		// connection name:row39
			   		// source node:tHashInput_20 - inputs:(after_tHashInput_6) outputs:(row39,row39) | target node:tAdvancedHash_row39 - inputs:(row39) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row39 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row39Struct> tHash_Lookup_row39 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row39Struct>getLookup(matchingModeEnum_row39);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row39", tHash_Lookup_row39);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row39 begin ] stop
 */



	
	/**
	 * [tHashInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_20", false);
		start_Hash.put("tHashInput_20", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_20";
	
	
		int tos_count_tHashInput_20 = 0;
		


int nb_line_tHashInput_20 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_20=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_20 = mf_tHashInput_20.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_20==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_20 = tHashFile_tHashInput_20.iterator();
while (iterator_tHashInput_20.hasNext()) {
    row9Struct next_tHashInput_20 = iterator_tHashInput_20.next();

	row39.ESTABLECIMIENTOID = next_tHashInput_20.ESTABLECIMIENTOID;
	row39.SIGLA = next_tHashInput_20.SIGLA;
	row39.NOMBRE = next_tHashInput_20.NOMBRE;
	row39.CODIGO = next_tHashInput_20.CODIGO;
	row39.FUERZA_ID = next_tHashInput_20.FUERZA_ID;

 



/**
 * [tHashInput_20 begin ] stop
 */
	
	/**
	 * [tHashInput_20 main ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 


	tos_count_tHashInput_20++;

/**
 * [tHashInput_20 main ] stop
 */
	
	/**
	 * [tHashInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row39 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row39"
						
						);
					}
					


			   
			   

					row39Struct row39_HashRow = new row39Struct();
		   	   	   
				
				row39_HashRow.ESTABLECIMIENTOID = row39.ESTABLECIMIENTOID;
				
				row39_HashRow.SIGLA = row39.SIGLA;
				
				row39_HashRow.NOMBRE = row39.NOMBRE;
				
				row39_HashRow.CODIGO = row39.CODIGO;
				
				row39_HashRow.FUERZA_ID = row39.FUERZA_ID;
				
			tHash_Lookup_row39.put(row39_HashRow);
			
            




 


	tos_count_tAdvancedHash_row39++;

/**
 * [tAdvancedHash_row39 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row39 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";
	
	

 



/**
 * [tAdvancedHash_row39 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row39 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";
	
	

 



/**
 * [tAdvancedHash_row39 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_20 end ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	
    

		
			nb_line_tHashInput_20++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_20_NB_LINE", nb_line_tHashInput_20);       

 

ok_Hash.put("tHashInput_20", true);
end_Hash.put("tHashInput_20", System.currentTimeMillis());




/**
 * [tHashInput_20 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row39 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";
	
	

tHash_Lookup_row39.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row39");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row39", true);
end_Hash.put("tAdvancedHash_row39", System.currentTimeMillis());




/**
 * [tAdvancedHash_row39 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_20 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_20";
	
	

 



/**
 * [tHashInput_20 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row39 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row39";
	
	

 



/**
 * [tAdvancedHash_row39 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_20_SUBPROCESS_STATE", 1);
	}
	


public static class row40Struct implements routines.system.IPersistableComparableLookupRow<row40Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row40Struct other = (row40Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row40Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row40Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row40Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row40Struct row40 = new row40Struct();




	
	/**
	 * [tAdvancedHash_row40 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row40", false);
		start_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row40";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row40");
					}
				
		int tos_count_tAdvancedHash_row40 = 0;
		

			   		// connection name:row40
			   		// source node:tHashInput_21 - inputs:(after_tHashInput_6) outputs:(row40,row40) | target node:tAdvancedHash_row40 - inputs:(row40) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row40 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row40Struct> tHash_Lookup_row40 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row40Struct>getLookup(matchingModeEnum_row40);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row40", tHash_Lookup_row40);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row40 begin ] stop
 */



	
	/**
	 * [tHashInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_21", false);
		start_Hash.put("tHashInput_21", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_21";
	
	
		int tos_count_tHashInput_21 = 0;
		


int nb_line_tHashInput_21 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_21=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_21 = mf_tHashInput_21.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_21==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_21 = tHashFile_tHashInput_21.iterator();
while (iterator_tHashInput_21.hasNext()) {
    row9Struct next_tHashInput_21 = iterator_tHashInput_21.next();

	row40.ESTABLECIMIENTOID = next_tHashInput_21.ESTABLECIMIENTOID;
	row40.SIGLA = next_tHashInput_21.SIGLA;
	row40.NOMBRE = next_tHashInput_21.NOMBRE;
	row40.CODIGO = next_tHashInput_21.CODIGO;
	row40.FUERZA_ID = next_tHashInput_21.FUERZA_ID;

 



/**
 * [tHashInput_21 begin ] stop
 */
	
	/**
	 * [tHashInput_21 main ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 


	tos_count_tHashInput_21++;

/**
 * [tHashInput_21 main ] stop
 */
	
	/**
	 * [tHashInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row40"
						
						);
					}
					


			   
			   

					row40Struct row40_HashRow = new row40Struct();
		   	   	   
				
				row40_HashRow.ESTABLECIMIENTOID = row40.ESTABLECIMIENTOID;
				
				row40_HashRow.SIGLA = row40.SIGLA;
				
				row40_HashRow.NOMBRE = row40.NOMBRE;
				
				row40_HashRow.CODIGO = row40.CODIGO;
				
				row40_HashRow.FUERZA_ID = row40.FUERZA_ID;
				
			tHash_Lookup_row40.put(row40_HashRow);
			
            




 


	tos_count_tAdvancedHash_row40++;

/**
 * [tAdvancedHash_row40 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row40 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_21 end ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	
    

		
			nb_line_tHashInput_21++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_21_NB_LINE", nb_line_tHashInput_21);       

 

ok_Hash.put("tHashInput_21", true);
end_Hash.put("tHashInput_21", System.currentTimeMillis());




/**
 * [tHashInput_21 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

tHash_Lookup_row40.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row40");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row40", true);
end_Hash.put("tAdvancedHash_row40", System.currentTimeMillis());




/**
 * [tAdvancedHash_row40 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_21 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_21";
	
	

 



/**
 * [tHashInput_21 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row40 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row40";
	
	

 



/**
 * [tAdvancedHash_row40 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableComparableLookupRow<row41Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row41Struct other = (row41Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row41Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row41Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_22Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_22_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tAdvancedHash_row41 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row41", false);
		start_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row41";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tAdvancedHash_row41 = 0;
		

			   		// connection name:row41
			   		// source node:tHashInput_22 - inputs:(after_tHashInput_6) outputs:(row41,row41) | target node:tAdvancedHash_row41 - inputs:(row41) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row41 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row41Struct> tHash_Lookup_row41 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row41Struct>getLookup(matchingModeEnum_row41);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row41", tHash_Lookup_row41);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row41 begin ] stop
 */



	
	/**
	 * [tHashInput_22 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_22", false);
		start_Hash.put("tHashInput_22", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_22";
	
	
		int tos_count_tHashInput_22 = 0;
		


int nb_line_tHashInput_22 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_22=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_22 = mf_tHashInput_22.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_22==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_22 = tHashFile_tHashInput_22.iterator();
while (iterator_tHashInput_22.hasNext()) {
    row9Struct next_tHashInput_22 = iterator_tHashInput_22.next();

	row41.ESTABLECIMIENTOID = next_tHashInput_22.ESTABLECIMIENTOID;
	row41.SIGLA = next_tHashInput_22.SIGLA;
	row41.NOMBRE = next_tHashInput_22.NOMBRE;
	row41.CODIGO = next_tHashInput_22.CODIGO;
	row41.FUERZA_ID = next_tHashInput_22.FUERZA_ID;

 



/**
 * [tHashInput_22 begin ] stop
 */
	
	/**
	 * [tHashInput_22 main ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 


	tos_count_tHashInput_22++;

/**
 * [tHashInput_22 main ] stop
 */
	
	/**
	 * [tHashInput_22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					


			   
			   

					row41Struct row41_HashRow = new row41Struct();
		   	   	   
				
				row41_HashRow.ESTABLECIMIENTOID = row41.ESTABLECIMIENTOID;
				
				row41_HashRow.SIGLA = row41.SIGLA;
				
				row41_HashRow.NOMBRE = row41.NOMBRE;
				
				row41_HashRow.CODIGO = row41.CODIGO;
				
				row41_HashRow.FUERZA_ID = row41.FUERZA_ID;
				
			tHash_Lookup_row41.put(row41_HashRow);
			
            




 


	tos_count_tAdvancedHash_row41++;

/**
 * [tAdvancedHash_row41 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row41 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

 



/**
 * [tAdvancedHash_row41 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row41 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

 



/**
 * [tAdvancedHash_row41 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_22 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_22 end ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	
    

		
			nb_line_tHashInput_22++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_22_NB_LINE", nb_line_tHashInput_22);       

 

ok_Hash.put("tHashInput_22", true);
end_Hash.put("tHashInput_22", System.currentTimeMillis());




/**
 * [tHashInput_22 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

tHash_Lookup_row41.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row41", true);
end_Hash.put("tAdvancedHash_row41", System.currentTimeMillis());




/**
 * [tAdvancedHash_row41 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_22 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_22";
	
	

 



/**
 * [tHashInput_22 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row41 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row41";
	
	

 



/**
 * [tAdvancedHash_row41 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_22_SUBPROCESS_STATE", 1);
	}
	


public static class row42Struct implements routines.system.IPersistableComparableLookupRow<row42Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CODIGO_CUM;

				public String getCODIGO_CUM () {
					return this.CODIGO_CUM;
				}

				public Boolean CODIGO_CUMIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CUMIsKey(){
				    return false;
				}
				public Integer CODIGO_CUMLength(){
				    return 50;
				}
				public Integer CODIGO_CUMPrecision(){
				    return 0;
				}
				public String CODIGO_CUMDefault(){
				
					return null;
				
				}
				public String CODIGO_CUMComment(){
				
				    return "";
				
				}
				public String CODIGO_CUMPattern(){
				
					return "";
				
				}
				public String CODIGO_CUMOriginalDbColumnName(){
				
					return "CODIGO_CUM";
				
				}

				
			    public String COMERCIAL;

				public String getCOMERCIAL () {
					return this.COMERCIAL;
				}

				public Boolean COMERCIALIsNullable(){
				    return true;
				}
				public Boolean COMERCIALIsKey(){
				    return false;
				}
				public Integer COMERCIALLength(){
				    return 150;
				}
				public Integer COMERCIALPrecision(){
				    return 0;
				}
				public String COMERCIALDefault(){
				
					return null;
				
				}
				public String COMERCIALComment(){
				
				    return "";
				
				}
				public String COMERCIALPattern(){
				
					return "";
				
				}
				public String COMERCIALOriginalDbColumnName(){
				
					return "COMERCIAL";
				
				}

				
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO_CUM == null) ? 0 : this.CODIGO_CUM.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row42Struct other = (row42Struct) obj;
		
						if (this.CODIGO_CUM == null) {
							if (other.CODIGO_CUM != null)
								return false;
						
						} else if (!this.CODIGO_CUM.equals(other.CODIGO_CUM))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row42Struct other) {

		other.CODIGO_CUM = this.CODIGO_CUM;
	            other.COMERCIAL = this.COMERCIAL;
	            other.ID = this.ID;
	            
	}

	public void copyKeysDataTo(row42Struct other) {

		other.CODIGO_CUM = this.CODIGO_CUM;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO_CUM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO_CUM = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_CUM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO_CUM,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.COMERCIAL = readString(dis,ois);
					
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.COMERCIAL = readString(dis,objectIn);
					
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.COMERCIAL, dos, oos);
					
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.COMERCIAL, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CODIGO_CUM="+CODIGO_CUM);
		sb.append(",COMERCIAL="+COMERCIAL);
		sb.append(",ID="+String.valueOf(ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row42Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO_CUM, other.CODIGO_CUM);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_23Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_23_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row42Struct row42 = new row42Struct();




	
	/**
	 * [tAdvancedHash_row42 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row42", false);
		start_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row42";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row42");
					}
				
		int tos_count_tAdvancedHash_row42 = 0;
		

			   		// connection name:row42
			   		// source node:tHashInput_23 - inputs:(after_tHashInput_6) outputs:(row42,row42) | target node:tAdvancedHash_row42 - inputs:(row42) outputs:()
			   		// linked node: tMap_6 - inputs:(row85,row87,row86,row7,row29,row30,row38,row39,row40,row41,row42) outputs:(out11)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row42 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row42Struct> tHash_Lookup_row42 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row42Struct>getLookup(matchingModeEnum_row42);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row42", tHash_Lookup_row42);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row42 begin ] stop
 */



	
	/**
	 * [tHashInput_23 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_23", false);
		start_Hash.put("tHashInput_23", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_23";
	
	
		int tos_count_tHashInput_23 = 0;
		


int nb_line_tHashInput_23 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_23=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct> tHashFile_tHashInput_23 = mf_tHashInput_23.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_23==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row12Struct> iterator_tHashInput_23 = tHashFile_tHashInput_23.iterator();
while (iterator_tHashInput_23.hasNext()) {
    row12Struct next_tHashInput_23 = iterator_tHashInput_23.next();

	row42.CODIGO_CUM = next_tHashInput_23.CODIGO_CUM;
	row42.COMERCIAL = next_tHashInput_23.COMERCIAL;
	row42.ID = next_tHashInput_23.ID;

 



/**
 * [tHashInput_23 begin ] stop
 */
	
	/**
	 * [tHashInput_23 main ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 


	tos_count_tHashInput_23++;

/**
 * [tHashInput_23 main ] stop
 */
	
	/**
	 * [tHashInput_23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row42"
						
						);
					}
					


			   
			   

					row42Struct row42_HashRow = new row42Struct();
		   	   	   
				
				row42_HashRow.CODIGO_CUM = row42.CODIGO_CUM;
				
				row42_HashRow.COMERCIAL = row42.COMERCIAL;
				
				row42_HashRow.ID = row42.ID;
				
			tHash_Lookup_row42.put(row42_HashRow);
			
            




 


	tos_count_tAdvancedHash_row42++;

/**
 * [tAdvancedHash_row42 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row42 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_23 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_23 end ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	
    

		
			nb_line_tHashInput_23++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_23_NB_LINE", nb_line_tHashInput_23);       

 

ok_Hash.put("tHashInput_23", true);
end_Hash.put("tHashInput_23", System.currentTimeMillis());




/**
 * [tHashInput_23 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

tHash_Lookup_row42.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row42");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row42", true);
end_Hash.put("tAdvancedHash_row42", System.currentTimeMillis());




/**
 * [tAdvancedHash_row42 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_23 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_23";
	
	

 



/**
 * [tHashInput_23 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row42 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row42";
	
	

 



/**
 * [tAdvancedHash_row42 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_23_SUBPROCESS_STATE", 1);
	}
	


public static class row47Struct implements routines.system.IPersistableComparableLookupRow<row47Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public String CONSECUTIVO;

				public String getCONSECUTIVO () {
					return this.CONSECUTIVO;
				}

				public Boolean CONSECUTIVOIsNullable(){
				    return false;
				}
				public Boolean CONSECUTIVOIsKey(){
				    return false;
				}
				public Integer CONSECUTIVOLength(){
				    return 50;
				}
				public Integer CONSECUTIVOPrecision(){
				    return 0;
				}
				public String CONSECUTIVODefault(){
				
					return null;
				
				}
				public String CONSECUTIVOComment(){
				
				    return "";
				
				}
				public String CONSECUTIVOPattern(){
				
					return "";
				
				}
				public String CONSECUTIVOOriginalDbColumnName(){
				
					return "CONSECUTIVO";
				
				}

				
			    public BigDecimal PRODUCTOS_ID;

				public BigDecimal getPRODUCTOS_ID () {
					return this.PRODUCTOS_ID;
				}

				public Boolean PRODUCTOS_IDIsNullable(){
				    return false;
				}
				public Boolean PRODUCTOS_IDIsKey(){
				    return false;
				}
				public Integer PRODUCTOS_IDLength(){
				    return 0;
				}
				public Integer PRODUCTOS_IDPrecision(){
				    return null;
				}
				public String PRODUCTOS_IDDefault(){
				
					return "";
				
				}
				public String PRODUCTOS_IDComment(){
				
				    return "";
				
				}
				public String PRODUCTOS_IDPattern(){
				
					return "";
				
				}
				public String PRODUCTOS_IDOriginalDbColumnName(){
				
					return "PRODUCTOS_ID";
				
				}

				
			    public BigDecimal DFORMEDINSUMOS_ID;

				public BigDecimal getDFORMEDINSUMOS_ID () {
					return this.DFORMEDINSUMOS_ID;
				}

				public Boolean DFORMEDINSUMOS_IDIsNullable(){
				    return false;
				}
				public Boolean DFORMEDINSUMOS_IDIsKey(){
				    return false;
				}
				public Integer DFORMEDINSUMOS_IDLength(){
				    return 0;
				}
				public Integer DFORMEDINSUMOS_IDPrecision(){
				    return null;
				}
				public String DFORMEDINSUMOS_IDDefault(){
				
					return "";
				
				}
				public String DFORMEDINSUMOS_IDComment(){
				
				    return "";
				
				}
				public String DFORMEDINSUMOS_IDPattern(){
				
					return "";
				
				}
				public String DFORMEDINSUMOS_IDOriginalDbColumnName(){
				
					return "DFORMEDINSUMOS_ID";
				
				}

				
			    public String TIRILLA;

				public String getTIRILLA () {
					return this.TIRILLA;
				}

				public Boolean TIRILLAIsNullable(){
				    return false;
				}
				public Boolean TIRILLAIsKey(){
				    return false;
				}
				public Integer TIRILLALength(){
				    return 50;
				}
				public Integer TIRILLAPrecision(){
				    return 0;
				}
				public String TIRILLADefault(){
				
					return null;
				
				}
				public String TIRILLAComment(){
				
				    return "";
				
				}
				public String TIRILLAPattern(){
				
					return "";
				
				}
				public String TIRILLAOriginalDbColumnName(){
				
					return "TIRILLA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CONSECUTIVO == null) ? 0 : this.CONSECUTIVO.hashCode());
					
						result = prime * result + ((this.PRODUCTOS_ID == null) ? 0 : this.PRODUCTOS_ID.hashCode());
					
						result = prime * result + ((this.TIRILLA == null) ? 0 : this.TIRILLA.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row47Struct other = (row47Struct) obj;
		
						if (this.CONSECUTIVO == null) {
							if (other.CONSECUTIVO != null)
								return false;
						
						} else if (!this.CONSECUTIVO.equals(other.CONSECUTIVO))
						
							return false;
					
						if (this.PRODUCTOS_ID == null) {
							if (other.PRODUCTOS_ID != null)
								return false;
						
						} else if (!this.PRODUCTOS_ID.equals(other.PRODUCTOS_ID))
						
							return false;
					
						if (this.TIRILLA == null) {
							if (other.TIRILLA != null)
								return false;
						
						} else if (!this.TIRILLA.equals(other.TIRILLA))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row47Struct other) {

		other.CONSECUTIVO = this.CONSECUTIVO;
	            other.PRODUCTOS_ID = this.PRODUCTOS_ID;
	            other.DFORMEDINSUMOS_ID = this.DFORMEDINSUMOS_ID;
	            other.TIRILLA = this.TIRILLA;
	            
	}

	public void copyKeysDataTo(row47Struct other) {

		other.CONSECUTIVO = this.CONSECUTIVO;
	            	other.PRODUCTOS_ID = this.PRODUCTOS_ID;
	            	other.TIRILLA = this.TIRILLA;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CONSECUTIVO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
					this.TIRILLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CONSECUTIVO = readString(dis);
					
						this.PRODUCTOS_ID = (BigDecimal) dis.readObject();
					
					this.TIRILLA = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PRODUCTOS_ID);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CONSECUTIVO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PRODUCTOS_ID);
					
					// String
				
						writeString(this.TIRILLA,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.DFORMEDINSUMOS_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.DFORMEDINSUMOS_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.DFORMEDINSUMOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DFORMEDINSUMOS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("CONSECUTIVO="+CONSECUTIVO);
		sb.append(",PRODUCTOS_ID="+String.valueOf(PRODUCTOS_ID));
		sb.append(",DFORMEDINSUMOS_ID="+String.valueOf(DFORMEDINSUMOS_ID));
		sb.append(",TIRILLA="+TIRILLA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row47Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CONSECUTIVO, other.CONSECUTIVO);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PRODUCTOS_ID, other.PRODUCTOS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.TIRILLA, other.TIRILLA);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row47Struct row47 = new row47Struct();




	
	/**
	 * [tAdvancedHash_row47 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row47", false);
		start_Hash.put("tAdvancedHash_row47", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row47";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row47");
					}
				
		int tos_count_tAdvancedHash_row47 = 0;
		

			   		// connection name:row47
			   		// source node:tOracleInput_18 - inputs:(after_tHashInput_6) outputs:(row47,row47) | target node:tAdvancedHash_row47 - inputs:(row47) outputs:()
			   		// linked node: tMap_11 - inputs:(out11,row47) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row47 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row47Struct> tHash_Lookup_row47 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row47Struct>getLookup(matchingModeEnum_row47);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row47", tHash_Lookup_row47);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row47 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				String driverClass_tOracleInput_18 = "oracle.jdbc.OracleDriver";
				java.lang.Class.forName(driverClass_tOracleInput_18);
				
			String url_tOracleInput_18 = null;
				url_tOracleInput_18 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";

				String dbUser_tOracleInput_18 = context.db_origen_Login;

				

				
	final String decryptedPassword_tOracleInput_18 = context.db_origen_Password; 

				String dbPwd_tOracleInput_18 = decryptedPassword_tOracleInput_18;

				
					java.util.Properties atnParamsPrope_tOracleInput_18 = new java.util.Properties();
					atnParamsPrope_tOracleInput_18.put("user",dbUser_tOracleInput_18);
					atnParamsPrope_tOracleInput_18.put("password",dbPwd_tOracleInput_18);
                    if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                        atnParamsPrope_tOracleInput_18.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
                    }
					conn_tOracleInput_18 = java.sql.DriverManager.getConnection(url_tOracleInput_18, atnParamsPrope_tOracleInput_18);
				java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
				java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
				String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
				while (rsGetTZ_tOracleInput_18.next()) {
					sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
				}
                                if (!(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) &&
                                        conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class)) {
                                    if (conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class) != null) {
                                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class)).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                                    }
                                } else {
                                    ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                                }
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement();

		    String dbquery_tOracleInput_18 = "select formmedin.CONSECUTIVO\n        , INV.PRODUCTOS_ID\n        , dformmedin.ID AS DFORMEDINSUMOS_ID\n        , TI.CO"
+"NSECUTIVO AS TIRILLA\n       \nFROM  HCL_FORMMEDINSUMOS formmedin \nINNER JOIN  HCL_DFORMMEDINSUMOS dformmedin ON  formm"
+"edin.id = dformmedin.formmedinsumos_id \nINNER JOIN MED_DMOVIMIENTOS dmov ON dmov.DFORMMEDINSUMOS_id = dformmedin.id\nin"
+"ner join med_inventarios inv on inv.id = dmov.inventarios_id\nINNER JOIN MED_MOVIMIENTOS MOV ON MOV.ID = DMOV.MOVIMIENTO"
+"S_ID\nINNER JOIN MED_TIRILLAS TI ON TI.ID = MOV.TIRILLAS_ID\nWHERE formmedin.ESTREGISTRO_ID = 1\nAND dformmedin.ESTREGIS"
+"TRO_ID = 1\nAND dmov.ESTREGISTRO_ID = 1\norder by formmedin.id desc";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row47.CONSECUTIVO = null;
							} else {
	                         		
        	row47.CONSECUTIVO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 1, false);
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row47.PRODUCTOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(2) != null) {
						row47.PRODUCTOS_ID = rs_tOracleInput_18.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 3) {
								row47.DFORMEDINSUMOS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(3) != null) {
						row47.DFORMEDINSUMOS_ID = rs_tOracleInput_18.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 4) {
								row47.TIRILLA = null;
							} else {
	                         		
        	row47.TIRILLA = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 4, false);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row47 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row47";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row47"
						
						);
					}
					


			   
			   

					row47Struct row47_HashRow = new row47Struct();
		   	   	   
				
				row47_HashRow.CONSECUTIVO = row47.CONSECUTIVO;
				
				row47_HashRow.PRODUCTOS_ID = row47.PRODUCTOS_ID;
				
				row47_HashRow.DFORMEDINSUMOS_ID = row47.DFORMEDINSUMOS_ID;
				
				row47_HashRow.TIRILLA = row47.TIRILLA;
				
			tHash_Lookup_row47.put(row47_HashRow);
			
            




 


	tos_count_tAdvancedHash_row47++;

/**
 * [tAdvancedHash_row47 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row47 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row47";
	
	

 



/**
 * [tAdvancedHash_row47 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row47 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row47";
	
	

 



/**
 * [tAdvancedHash_row47 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
	if(conn_tOracleInput_18 != null && !conn_tOracleInput_18.isClosed()) {
	
			conn_tOracleInput_18.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}
	
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row47 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row47";
	
	

tHash_Lookup_row47.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row47");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row47", true);
end_Hash.put("tAdvancedHash_row47", System.currentTimeMillis());




/**
 * [tAdvancedHash_row47 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row47 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row47";
	
	

 



/**
 * [tAdvancedHash_row47 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return false;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 10;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.ID = this.ID;
	            other.CODIGO = this.CODIGO;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",CODIGO="+CODIGO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tHashInput_9 - inputs:(after_tHashInput_11) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_9 - inputs:(row17,row18) outputs:(copyOfout9_0)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tHashInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_9", false);
		start_Hash.put("tHashInput_9", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_9";
	
	
		int tos_count_tHashInput_9 = 0;
		


int nb_line_tHashInput_9 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_9=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_9 = mf_tHashInput_9.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_11");
if(tHashFile_tHashInput_9==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_9 = tHashFile_tHashInput_9.iterator();
while (iterator_tHashInput_9.hasNext()) {
    row4Struct next_tHashInput_9 = iterator_tHashInput_9.next();

	row18.ID = next_tHashInput_9.ID;
	row18.CODIGO = next_tHashInput_9.CODIGO;

 



/**
 * [tHashInput_9 begin ] stop
 */
	
	/**
	 * [tHashInput_9 main ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 


	tos_count_tHashInput_9++;

/**
 * [tHashInput_9 main ] stop
 */
	
	/**
	 * [tHashInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.ID = row18.ID;
				
				row18_HashRow.CODIGO = row18.CODIGO;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_9 end ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	
    

		
			nb_line_tHashInput_9++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_11");
	


	globalMap.put("tHashInput_9_NB_LINE", nb_line_tHashInput_9);       

 

ok_Hash.put("tHashInput_9", true);
end_Hash.put("tHashInput_9", System.currentTimeMillis());




/**
 * [tHashInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_9 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_9";
	
	

 



/**
 * [tHashInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableComparableLookupRow<row34Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row34Struct other = (row34Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row34Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row34Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tAdvancedHash_row34 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row34", false);
		start_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row34";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tAdvancedHash_row34 = 0;
		

			   		// connection name:row34
			   		// source node:tHashInput_15 - inputs:(after_tHashInput_14) outputs:(row34,row34) | target node:tAdvancedHash_row34 - inputs:(row34) outputs:()
			   		// linked node: tMap_8 - inputs:(row33,row34,row35,row36,row37) outputs:(error_esm_formulacion,error_esm_dispensacion,error_esm_facturacion,error_esm_adscrito)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row34 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row34Struct> tHash_Lookup_row34 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row34Struct>getLookup(matchingModeEnum_row34);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row34", tHash_Lookup_row34);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row34 begin ] stop
 */



	
	/**
	 * [tHashInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_15", false);
		start_Hash.put("tHashInput_15", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_15";
	
	
		int tos_count_tHashInput_15 = 0;
		


int nb_line_tHashInput_15 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_15=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_15 = mf_tHashInput_15.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_15==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_15 = tHashFile_tHashInput_15.iterator();
while (iterator_tHashInput_15.hasNext()) {
    row9Struct next_tHashInput_15 = iterator_tHashInput_15.next();

	row34.ESTABLECIMIENTOID = next_tHashInput_15.ESTABLECIMIENTOID;
	row34.SIGLA = next_tHashInput_15.SIGLA;
	row34.NOMBRE = next_tHashInput_15.NOMBRE;
	row34.CODIGO = next_tHashInput_15.CODIGO;
	row34.FUERZA_ID = next_tHashInput_15.FUERZA_ID;

 



/**
 * [tHashInput_15 begin ] stop
 */
	
	/**
	 * [tHashInput_15 main ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 


	tos_count_tHashInput_15++;

/**
 * [tHashInput_15 main ] stop
 */
	
	/**
	 * [tHashInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					


			   
			   

					row34Struct row34_HashRow = new row34Struct();
		   	   	   
				
				row34_HashRow.ESTABLECIMIENTOID = row34.ESTABLECIMIENTOID;
				
				row34_HashRow.SIGLA = row34.SIGLA;
				
				row34_HashRow.NOMBRE = row34.NOMBRE;
				
				row34_HashRow.CODIGO = row34.CODIGO;
				
				row34_HashRow.FUERZA_ID = row34.FUERZA_ID;
				
			tHash_Lookup_row34.put(row34_HashRow);
			
            




 


	tos_count_tAdvancedHash_row34++;

/**
 * [tAdvancedHash_row34 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

 



/**
 * [tAdvancedHash_row34 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row34 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

 



/**
 * [tAdvancedHash_row34 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_15 end ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	
    

		
			nb_line_tHashInput_15++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_15_NB_LINE", nb_line_tHashInput_15);       

 

ok_Hash.put("tHashInput_15", true);
end_Hash.put("tHashInput_15", System.currentTimeMillis());




/**
 * [tHashInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

tHash_Lookup_row34.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row34", true);
end_Hash.put("tAdvancedHash_row34", System.currentTimeMillis());




/**
 * [tAdvancedHash_row34 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_15 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_15";
	
	

 



/**
 * [tHashInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row34 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row34";
	
	

 



/**
 * [tAdvancedHash_row34 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableComparableLookupRow<row35Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row35Struct other = (row35Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row35Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row35Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tAdvancedHash_row35 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row35", false);
		start_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row35";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tAdvancedHash_row35 = 0;
		

			   		// connection name:row35
			   		// source node:tHashInput_16 - inputs:(after_tHashInput_14) outputs:(row35,row35) | target node:tAdvancedHash_row35 - inputs:(row35) outputs:()
			   		// linked node: tMap_8 - inputs:(row33,row34,row35,row36,row37) outputs:(error_esm_formulacion,error_esm_dispensacion,error_esm_facturacion,error_esm_adscrito)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row35 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row35Struct> tHash_Lookup_row35 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row35Struct>getLookup(matchingModeEnum_row35);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row35", tHash_Lookup_row35);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row35 begin ] stop
 */



	
	/**
	 * [tHashInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_16", false);
		start_Hash.put("tHashInput_16", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_16";
	
	
		int tos_count_tHashInput_16 = 0;
		


int nb_line_tHashInput_16 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_16=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_16 = mf_tHashInput_16.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_16==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_16 = tHashFile_tHashInput_16.iterator();
while (iterator_tHashInput_16.hasNext()) {
    row9Struct next_tHashInput_16 = iterator_tHashInput_16.next();

	row35.ESTABLECIMIENTOID = next_tHashInput_16.ESTABLECIMIENTOID;
	row35.SIGLA = next_tHashInput_16.SIGLA;
	row35.NOMBRE = next_tHashInput_16.NOMBRE;
	row35.CODIGO = next_tHashInput_16.CODIGO;
	row35.FUERZA_ID = next_tHashInput_16.FUERZA_ID;

 



/**
 * [tHashInput_16 begin ] stop
 */
	
	/**
	 * [tHashInput_16 main ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 


	tos_count_tHashInput_16++;

/**
 * [tHashInput_16 main ] stop
 */
	
	/**
	 * [tHashInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					


			   
			   

					row35Struct row35_HashRow = new row35Struct();
		   	   	   
				
				row35_HashRow.ESTABLECIMIENTOID = row35.ESTABLECIMIENTOID;
				
				row35_HashRow.SIGLA = row35.SIGLA;
				
				row35_HashRow.NOMBRE = row35.NOMBRE;
				
				row35_HashRow.CODIGO = row35.CODIGO;
				
				row35_HashRow.FUERZA_ID = row35.FUERZA_ID;
				
			tHash_Lookup_row35.put(row35_HashRow);
			
            




 


	tos_count_tAdvancedHash_row35++;

/**
 * [tAdvancedHash_row35 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row35 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_16 end ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	
    

		
			nb_line_tHashInput_16++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_16_NB_LINE", nb_line_tHashInput_16);       

 

ok_Hash.put("tHashInput_16", true);
end_Hash.put("tHashInput_16", System.currentTimeMillis());




/**
 * [tHashInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

tHash_Lookup_row35.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row35", true);
end_Hash.put("tAdvancedHash_row35", System.currentTimeMillis());




/**
 * [tAdvancedHash_row35 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_16 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_16";
	
	

 



/**
 * [tHashInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row35 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row35";
	
	

 



/**
 * [tAdvancedHash_row35 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row36Struct implements routines.system.IPersistableComparableLookupRow<row36Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row36Struct other = (row36Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row36Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row36Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row36Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row36Struct row36 = new row36Struct();




	
	/**
	 * [tAdvancedHash_row36 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row36", false);
		start_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row36";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row36");
					}
				
		int tos_count_tAdvancedHash_row36 = 0;
		

			   		// connection name:row36
			   		// source node:tHashInput_17 - inputs:(after_tHashInput_14) outputs:(row36,row36) | target node:tAdvancedHash_row36 - inputs:(row36) outputs:()
			   		// linked node: tMap_8 - inputs:(row33,row34,row35,row36,row37) outputs:(error_esm_formulacion,error_esm_dispensacion,error_esm_facturacion,error_esm_adscrito)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row36 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row36Struct> tHash_Lookup_row36 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row36Struct>getLookup(matchingModeEnum_row36);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row36", tHash_Lookup_row36);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row36 begin ] stop
 */



	
	/**
	 * [tHashInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_17", false);
		start_Hash.put("tHashInput_17", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_17";
	
	
		int tos_count_tHashInput_17 = 0;
		


int nb_line_tHashInput_17 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_17=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_17 = mf_tHashInput_17.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_17==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_17 = tHashFile_tHashInput_17.iterator();
while (iterator_tHashInput_17.hasNext()) {
    row9Struct next_tHashInput_17 = iterator_tHashInput_17.next();

	row36.ESTABLECIMIENTOID = next_tHashInput_17.ESTABLECIMIENTOID;
	row36.SIGLA = next_tHashInput_17.SIGLA;
	row36.NOMBRE = next_tHashInput_17.NOMBRE;
	row36.CODIGO = next_tHashInput_17.CODIGO;
	row36.FUERZA_ID = next_tHashInput_17.FUERZA_ID;

 



/**
 * [tHashInput_17 begin ] stop
 */
	
	/**
	 * [tHashInput_17 main ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 


	tos_count_tHashInput_17++;

/**
 * [tHashInput_17 main ] stop
 */
	
	/**
	 * [tHashInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row36"
						
						);
					}
					


			   
			   

					row36Struct row36_HashRow = new row36Struct();
		   	   	   
				
				row36_HashRow.ESTABLECIMIENTOID = row36.ESTABLECIMIENTOID;
				
				row36_HashRow.SIGLA = row36.SIGLA;
				
				row36_HashRow.NOMBRE = row36.NOMBRE;
				
				row36_HashRow.CODIGO = row36.CODIGO;
				
				row36_HashRow.FUERZA_ID = row36.FUERZA_ID;
				
			tHash_Lookup_row36.put(row36_HashRow);
			
            




 


	tos_count_tAdvancedHash_row36++;

/**
 * [tAdvancedHash_row36 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row36 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

 



/**
 * [tAdvancedHash_row36 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row36 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

 



/**
 * [tAdvancedHash_row36 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_17 end ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	
    

		
			nb_line_tHashInput_17++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_17_NB_LINE", nb_line_tHashInput_17);       

 

ok_Hash.put("tHashInput_17", true);
end_Hash.put("tHashInput_17", System.currentTimeMillis());




/**
 * [tHashInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

tHash_Lookup_row36.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row36");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row36", true);
end_Hash.put("tAdvancedHash_row36", System.currentTimeMillis());




/**
 * [tAdvancedHash_row36 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_17 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_17";
	
	

 



/**
 * [tHashInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row36 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row36";
	
	

 



/**
 * [tAdvancedHash_row36 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row37Struct implements routines.system.IPersistableComparableLookupRow<row37Struct> {
    final static byte[] commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
    static byte[] commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ESTABLECIMIENTOID;

				public BigDecimal getESTABLECIMIENTOID () {
					return this.ESTABLECIMIENTOID;
				}

				public Boolean ESTABLECIMIENTOIDIsNullable(){
				    return false;
				}
				public Boolean ESTABLECIMIENTOIDIsKey(){
				    return false;
				}
				public Integer ESTABLECIMIENTOIDLength(){
				    return 0;
				}
				public Integer ESTABLECIMIENTOIDPrecision(){
				    return null;
				}
				public String ESTABLECIMIENTOIDDefault(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDComment(){
				
				    return "";
				
				}
				public String ESTABLECIMIENTOIDPattern(){
				
					return "";
				
				}
				public String ESTABLECIMIENTOIDOriginalDbColumnName(){
				
					return "ESTABLECIMIENTOID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return false;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 100;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 2000;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				
			    public String CODIGO;

				public String getCODIGO () {
					return this.CODIGO;
				}

				public Boolean CODIGOIsNullable(){
				    return true;
				}
				public Boolean CODIGOIsKey(){
				    return false;
				}
				public Integer CODIGOLength(){
				    return 100;
				}
				public Integer CODIGOPrecision(){
				    return 0;
				}
				public String CODIGODefault(){
				
					return null;
				
				}
				public String CODIGOComment(){
				
				    return "";
				
				}
				public String CODIGOPattern(){
				
					return "";
				
				}
				public String CODIGOOriginalDbColumnName(){
				
					return "CODIGO";
				
				}

				
			    public BigDecimal FUERZA_ID;

				public BigDecimal getFUERZA_ID () {
					return this.FUERZA_ID;
				}

				public Boolean FUERZA_IDIsNullable(){
				    return true;
				}
				public Boolean FUERZA_IDIsKey(){
				    return false;
				}
				public Integer FUERZA_IDLength(){
				    return 0;
				}
				public Integer FUERZA_IDPrecision(){
				    return null;
				}
				public String FUERZA_IDDefault(){
				
					return "";
				
				}
				public String FUERZA_IDComment(){
				
				    return "";
				
				}
				public String FUERZA_IDPattern(){
				
					return "";
				
				}
				public String FUERZA_IDOriginalDbColumnName(){
				
					return "FUERZA_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.CODIGO == null) ? 0 : this.CODIGO.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row37Struct other = (row37Struct) obj;
		
						if (this.CODIGO == null) {
							if (other.CODIGO != null)
								return false;
						
						} else if (!this.CODIGO.equals(other.CODIGO))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row37Struct other) {

		other.ESTABLECIMIENTOID = this.ESTABLECIMIENTOID;
	            other.SIGLA = this.SIGLA;
	            other.NOMBRE = this.NOMBRE;
	            other.CODIGO = this.CODIGO;
	            other.FUERZA_ID = this.FUERZA_ID;
	            
	}

	public void copyKeysDataTo(row37Struct other) {

		other.CODIGO = this.CODIGO;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length) {
				if(length < 1024 && commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos.length == 0) {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[1024];
				} else {
   					commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length);
			strReturn = new String(commonByteArray_ACM_CONTROL_AUDITORIA_CargueMedicamentos, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_ACM_CONTROL_AUDITORIA_CargueMedicamentos) {

        	try {

        		int length = 0;
		
					this.CODIGO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.CODIGO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) ois.readObject();
					
						this.SIGLA = readString(dis,ois);
					
						this.NOMBRE = readString(dis,ois);
					
       			    	this.FUERZA_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.ESTABLECIMIENTOID = (BigDecimal) objectIn.readObject();
					
						this.SIGLA = readString(dis,objectIn);
					
						this.NOMBRE = readString(dis,objectIn);
					
       			    	this.FUERZA_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, oos);
					
						writeString(this.NOMBRE, dos, oos);
					
       			    	oos.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.ESTABLECIMIENTOID);
					
						writeString(this.SIGLA, dos, objectOut);
					
						writeString(this.NOMBRE, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FUERZA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ESTABLECIMIENTOID="+String.valueOf(ESTABLECIMIENTOID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",NOMBRE="+NOMBRE);
		sb.append(",CODIGO="+CODIGO);
		sb.append(",FUERZA_ID="+String.valueOf(FUERZA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row37Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.CODIGO, other.CODIGO);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row37Struct row37 = new row37Struct();




	
	/**
	 * [tAdvancedHash_row37 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row37", false);
		start_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row37";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row37");
					}
				
		int tos_count_tAdvancedHash_row37 = 0;
		

			   		// connection name:row37
			   		// source node:tHashInput_18 - inputs:(after_tHashInput_14) outputs:(row37,row37) | target node:tAdvancedHash_row37 - inputs:(row37) outputs:()
			   		// linked node: tMap_8 - inputs:(row33,row34,row35,row36,row37) outputs:(error_esm_formulacion,error_esm_dispensacion,error_esm_facturacion,error_esm_adscrito)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row37 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row37Struct> tHash_Lookup_row37 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row37Struct>getLookup(matchingModeEnum_row37);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row37", tHash_Lookup_row37);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row37 begin ] stop
 */



	
	/**
	 * [tHashInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_18", false);
		start_Hash.put("tHashInput_18", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_18";
	
	
		int tos_count_tHashInput_18 = 0;
		


int nb_line_tHashInput_18 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_18=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row9Struct> tHashFile_tHashInput_18 = mf_tHashInput_18.getAdvancedMemoryHashFile("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_18==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row9Struct> iterator_tHashInput_18 = tHashFile_tHashInput_18.iterator();
while (iterator_tHashInput_18.hasNext()) {
    row9Struct next_tHashInput_18 = iterator_tHashInput_18.next();

	row37.ESTABLECIMIENTOID = next_tHashInput_18.ESTABLECIMIENTOID;
	row37.SIGLA = next_tHashInput_18.SIGLA;
	row37.NOMBRE = next_tHashInput_18.NOMBRE;
	row37.CODIGO = next_tHashInput_18.CODIGO;
	row37.FUERZA_ID = next_tHashInput_18.FUERZA_ID;

 



/**
 * [tHashInput_18 begin ] stop
 */
	
	/**
	 * [tHashInput_18 main ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 


	tos_count_tHashInput_18++;

/**
 * [tHashInput_18 main ] stop
 */
	
	/**
	 * [tHashInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row37"
						
						);
					}
					


			   
			   

					row37Struct row37_HashRow = new row37Struct();
		   	   	   
				
				row37_HashRow.ESTABLECIMIENTOID = row37.ESTABLECIMIENTOID;
				
				row37_HashRow.SIGLA = row37.SIGLA;
				
				row37_HashRow.NOMBRE = row37.NOMBRE;
				
				row37_HashRow.CODIGO = row37.CODIGO;
				
				row37_HashRow.FUERZA_ID = row37.FUERZA_ID;
				
			tHash_Lookup_row37.put(row37_HashRow);
			
            




 


	tos_count_tAdvancedHash_row37++;

/**
 * [tAdvancedHash_row37 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row37 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

 



/**
 * [tAdvancedHash_row37 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row37 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

 



/**
 * [tAdvancedHash_row37 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_18 end ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	
    

		
			nb_line_tHashInput_18++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_CargueMedicamentos_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_18_NB_LINE", nb_line_tHashInput_18);       

 

ok_Hash.put("tHashInput_18", true);
end_Hash.put("tHashInput_18", System.currentTimeMillis());




/**
 * [tHashInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

tHash_Lookup_row37.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row37");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row37", true);
end_Hash.put("tAdvancedHash_row37", System.currentTimeMillis());




/**
 * [tAdvancedHash_row37 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_18 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_18";
	
	

 



/**
 * [tHashInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row37 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row37";
	
	

 



/**
 * [tAdvancedHash_row37 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_18_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final CargueMedicamentos CargueMedicamentosClass = new CargueMedicamentos();

        int exitCode = CargueMedicamentosClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = CargueMedicamentos.class.getClassLoader().getResourceAsStream("acm_control_auditoria/carguemedicamentos_0_1/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = CargueMedicamentos.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("BANDERA", "id_Integer");
                        if(context.getStringValue("BANDERA") == null) {
                            context.BANDERA = null;
                        } else {
                            try{
                                context.BANDERA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("BANDERA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BANDERA", e.getMessage()));
                                context.BANDERA=null;
                            }
                        }
                        context.setContextType("bodega", "id_String");
                        if(context.getStringValue("bodega") == null) {
                            context.bodega = null;
                        } else {
                            context.bodega=(String) context.getProperty("bodega");
                        }
                        context.setContextType("cantidad", "id_String");
                        if(context.getStringValue("cantidad") == null) {
                            context.cantidad = null;
                        } else {
                            context.cantidad=(String) context.getProperty("cantidad");
                        }
                        context.setContextType("cantidad_despachada", "id_String");
                        if(context.getStringValue("cantidad_despachada") == null) {
                            context.cantidad_despachada = null;
                        } else {
                            context.cantidad_despachada=(String) context.getProperty("cantidad_despachada");
                        }
                        context.setContextType("cantidad_solicitada", "id_String");
                        if(context.getStringValue("cantidad_solicitada") == null) {
                            context.cantidad_solicitada = null;
                        } else {
                            context.cantidad_solicitada=(String) context.getProperty("cantidad_solicitada");
                        }
                        context.setContextType("codigo_autorizacion", "id_String");
                        if(context.getStringValue("codigo_autorizacion") == null) {
                            context.codigo_autorizacion = null;
                        } else {
                            context.codigo_autorizacion=(String) context.getProperty("codigo_autorizacion");
                        }
                        context.setContextType("codigo_cie10", "id_String");
                        if(context.getStringValue("codigo_cie10") == null) {
                            context.codigo_cie10 = null;
                        } else {
                            context.codigo_cie10=(String) context.getProperty("codigo_cie10");
                        }
                        context.setContextType("codigo_cum", "id_String");
                        if(context.getStringValue("codigo_cum") == null) {
                            context.codigo_cum = null;
                        } else {
                            context.codigo_cum=(String) context.getProperty("codigo_cum");
                        }
                        context.setContextType("codigo_cups", "id_String");
                        if(context.getStringValue("codigo_cups") == null) {
                            context.codigo_cups = null;
                        } else {
                            context.codigo_cups=(String) context.getProperty("codigo_cups");
                        }
                        context.setContextType("concentracion", "id_String");
                        if(context.getStringValue("concentracion") == null) {
                            context.concentracion = null;
                        } else {
                            context.concentracion=(String) context.getProperty("concentracion");
                        }
                        context.setContextType("confidencialidad", "id_String");
                        if(context.getStringValue("confidencialidad") == null) {
                            context.confidencialidad = null;
                        } else {
                            context.confidencialidad=(String) context.getProperty("confidencialidad");
                        }
                        context.setContextType("CONTRATOS_ID", "id_BigDecimal");
                        if(context.getStringValue("CONTRATOS_ID") == null) {
                            context.CONTRATOS_ID = null;
                        } else {
                            try{
                                context.CONTRATOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CONTRATOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CONTRATOS_ID", e.getMessage()));
                                context.CONTRATOS_ID=null;
                            }
                        }
                        context.setContextType("ctc_aprobado", "id_String");
                        if(context.getStringValue("ctc_aprobado") == null) {
                            context.ctc_aprobado = null;
                        } else {
                            context.ctc_aprobado=(String) context.getProperty("ctc_aprobado");
                        }
                        context.setContextType("descripcion_cie10", "id_String");
                        if(context.getStringValue("descripcion_cie10") == null) {
                            context.descripcion_cie10 = null;
                        } else {
                            context.descripcion_cie10=(String) context.getProperty("descripcion_cie10");
                        }
                        context.setContextType("descripcion_cups", "id_String");
                        if(context.getStringValue("descripcion_cups") == null) {
                            context.descripcion_cups = null;
                        } else {
                            context.descripcion_cups=(String) context.getProperty("descripcion_cups");
                        }
                        context.setContextType("documento", "id_String");
                        if(context.getStringValue("documento") == null) {
                            context.documento = null;
                        } else {
                            context.documento=(String) context.getProperty("documento");
                        }
                        context.setContextType("esm", "id_String");
                        if(context.getStringValue("esm") == null) {
                            context.esm = null;
                        } else {
                            context.esm=(String) context.getProperty("esm");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("EstAfiliacionActivo", "id_Integer");
                        if(context.getStringValue("EstAfiliacionActivo") == null) {
                            context.EstAfiliacionActivo = null;
                        } else {
                            try{
                                context.EstAfiliacionActivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliacionActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliacionActivo", e.getMessage()));
                                context.EstAfiliacionActivo=null;
                            }
                        }
                        context.setContextType("EstAfiliacionProvisional", "id_Integer");
                        if(context.getStringValue("EstAfiliacionProvisional") == null) {
                            context.EstAfiliacionProvisional = null;
                        } else {
                            try{
                                context.EstAfiliacionProvisional=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliacionProvisional"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliacionProvisional", e.getMessage()));
                                context.EstAfiliacionProvisional=null;
                            }
                        }
                        context.setContextType("EstAfiliaicionInactivo", "id_Integer");
                        if(context.getStringValue("EstAfiliaicionInactivo") == null) {
                            context.EstAfiliaicionInactivo = null;
                        } else {
                            try{
                                context.EstAfiliaicionInactivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstAfiliaicionInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstAfiliaicionInactivo", e.getMessage()));
                                context.EstAfiliaicionInactivo=null;
                            }
                        }
                        context.setContextType("EstArchivoPCE", "id_BigDecimal");
                        if(context.getStringValue("EstArchivoPCE") == null) {
                            context.EstArchivoPCE = null;
                        } else {
                            try{
                                context.EstArchivoPCE=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("EstArchivoPCE"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstArchivoPCE", e.getMessage()));
                                context.EstArchivoPCE=null;
                            }
                        }
                        context.setContextType("fecha_autorizacion", "id_String");
                        if(context.getStringValue("fecha_autorizacion") == null) {
                            context.fecha_autorizacion = null;
                        } else {
                            context.fecha_autorizacion=(String) context.getProperty("fecha_autorizacion");
                        }
                        context.setContextType("fecha_dispensacion", "id_String");
                        if(context.getStringValue("fecha_dispensacion") == null) {
                            context.fecha_dispensacion = null;
                        } else {
                            context.fecha_dispensacion=(String) context.getProperty("fecha_dispensacion");
                        }
                        context.setContextType("fecha_egreso", "id_String");
                        if(context.getStringValue("fecha_egreso") == null) {
                            context.fecha_egreso = null;
                        } else {
                            context.fecha_egreso=(String) context.getProperty("fecha_egreso");
                        }
                        context.setContextType("fecha_factura", "id_String");
                        if(context.getStringValue("fecha_factura") == null) {
                            context.fecha_factura = null;
                        } else {
                            context.fecha_factura=(String) context.getProperty("fecha_factura");
                        }
                        context.setContextType("fecha_formulacion", "id_String");
                        if(context.getStringValue("fecha_formulacion") == null) {
                            context.fecha_formulacion = null;
                        } else {
                            context.fecha_formulacion=(String) context.getProperty("fecha_formulacion");
                        }
                        context.setContextType("fecha_ingreso", "id_String");
                        if(context.getStringValue("fecha_ingreso") == null) {
                            context.fecha_ingreso = null;
                        } else {
                            context.fecha_ingreso=(String) context.getProperty("fecha_ingreso");
                        }
                        context.setContextType("FECHA_NULL", "id_Date");
                        if(context.getStringValue("FECHA_NULL") == null) {
                            context.FECHA_NULL = null;
                        } else {
                            String context_FECHA_NULL_value = context.getProperty("FECHA_NULL");
                            try{
                                if (context_FECHA_NULL_value == null){
                                    context_FECHA_NULL_value = "";
                                }
                                int context_FECHA_NULL_pos = context_FECHA_NULL_value.indexOf(";");
                                String context_FECHA_NULL_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FECHA_NULL_pos > -1){
                                    context_FECHA_NULL_pattern = context_FECHA_NULL_value.substring(0, context_FECHA_NULL_pos);
                                    context_FECHA_NULL_value = context_FECHA_NULL_value.substring(context_FECHA_NULL_pos + 1);
                                }

                                context.FECHA_NULL=(java.util.Date)(new java.text.SimpleDateFormat(context_FECHA_NULL_pattern).parse(context_FECHA_NULL_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FECHA_NULL_longValue = Long.valueOf(context_FECHA_NULL_value);
                                    context.FECHA_NULL = new java.util.Date(context_FECHA_NULL_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_NULL", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FECHA_NULL=null;
                                }
                            }
                        }
                        context.setContextType("fecha_registro", "id_String");
                        if(context.getStringValue("fecha_registro") == null) {
                            context.fecha_registro = null;
                        } else {
                            context.fecha_registro=(String) context.getProperty("fecha_registro");
                        }
                        context.setContextType("fecha_servicio", "id_String");
                        if(context.getStringValue("fecha_servicio") == null) {
                            context.fecha_servicio = null;
                        } else {
                            context.fecha_servicio=(String) context.getProperty("fecha_servicio");
                        }
                        context.setContextType("fecha_vencimiento", "id_String");
                        if(context.getStringValue("fecha_vencimiento") == null) {
                            context.fecha_vencimiento = null;
                        } else {
                            context.fecha_vencimiento=(String) context.getProperty("fecha_vencimiento");
                        }
                        context.setContextType("fuerza_militar", "id_String");
                        if(context.getStringValue("fuerza_militar") == null) {
                            context.fuerza_militar = null;
                        } else {
                            context.fuerza_militar=(String) context.getProperty("fuerza_militar");
                        }
                        context.setContextType("HORA", "id_Integer");
                        if(context.getStringValue("HORA") == null) {
                            context.HORA = null;
                        } else {
                            try{
                                context.HORA=routines.system.ParserUtils.parseTo_Integer (context.getProperty("HORA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HORA", e.getMessage()));
                                context.HORA=null;
                            }
                        }
                        context.setContextType("invima", "id_String");
                        if(context.getStringValue("invima") == null) {
                            context.invima = null;
                        } else {
                            context.invima=(String) context.getProperty("invima");
                        }
                        context.setContextType("laboratorio", "id_String");
                        if(context.getStringValue("laboratorio") == null) {
                            context.laboratorio = null;
                        } else {
                            context.laboratorio=(String) context.getProperty("laboratorio");
                        }
                        context.setContextType("lote", "id_String");
                        if(context.getStringValue("lote") == null) {
                            context.lote = null;
                        } else {
                            context.lote=(String) context.getProperty("lote");
                        }
                        context.setContextType("lugar_dispensacion", "id_String");
                        if(context.getStringValue("lugar_dispensacion") == null) {
                            context.lugar_dispensacion = null;
                        } else {
                            context.lugar_dispensacion=(String) context.getProperty("lugar_dispensacion");
                        }
                        context.setContextType("MEDCONTRATOS_ID", "id_BigDecimal");
                        if(context.getStringValue("MEDCONTRATOS_ID") == null) {
                            context.MEDCONTRATOS_ID = null;
                        } else {
                            try{
                                context.MEDCONTRATOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MEDCONTRATOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MEDCONTRATOS_ID", e.getMessage()));
                                context.MEDCONTRATOS_ID=null;
                            }
                        }
                        context.setContextType("Narchivo", "id_String");
                        if(context.getStringValue("Narchivo") == null) {
                            context.Narchivo = null;
                        } else {
                            context.Narchivo=(String) context.getProperty("Narchivo");
                        }
                        context.setContextType("nombre_medicamento", "id_String");
                        if(context.getStringValue("nombre_medicamento") == null) {
                            context.nombre_medicamento = null;
                        } else {
                            context.nombre_medicamento=(String) context.getProperty("nombre_medicamento");
                        }
                        context.setContextType("numero", "id_String");
                        if(context.getStringValue("numero") == null) {
                            context.numero = null;
                        } else {
                            context.numero=(String) context.getProperty("numero");
                        }
                        context.setContextType("numero_factura", "id_String");
                        if(context.getStringValue("numero_factura") == null) {
                            context.numero_factura = null;
                        } else {
                            context.numero_factura=(String) context.getProperty("numero_factura");
                        }
                        context.setContextType("numero_formula", "id_String");
                        if(context.getStringValue("numero_formula") == null) {
                            context.numero_formula = null;
                        } else {
                            context.numero_formula=(String) context.getProperty("numero_formula");
                        }
                        context.setContextType("observaciones", "id_String");
                        if(context.getStringValue("observaciones") == null) {
                            context.observaciones = null;
                        } else {
                            context.observaciones=(String) context.getProperty("observaciones");
                        }
                        context.setContextType("origen_formulacion", "id_String");
                        if(context.getStringValue("origen_formulacion") == null) {
                            context.origen_formulacion = null;
                        } else {
                            context.origen_formulacion=(String) context.getProperty("origen_formulacion");
                        }
                        context.setContextType("periodo", "id_String");
                        if(context.getStringValue("periodo") == null) {
                            context.periodo = null;
                        } else {
                            context.periodo=(String) context.getProperty("periodo");
                        }
                        context.setContextType("prefijo", "id_String");
                        if(context.getStringValue("prefijo") == null) {
                            context.prefijo = null;
                        } else {
                            context.prefijo=(String) context.getProperty("prefijo");
                        }
                        context.setContextType("presentacion", "id_String");
                        if(context.getStringValue("presentacion") == null) {
                            context.presentacion = null;
                        } else {
                            context.presentacion=(String) context.getProperty("presentacion");
                        }
                        context.setContextType("PRESTADOR", "id_BigDecimal");
                        if(context.getStringValue("PRESTADOR") == null) {
                            context.PRESTADOR = null;
                        } else {
                            try{
                                context.PRESTADOR=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PRESTADOR"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PRESTADOR", e.getMessage()));
                                context.PRESTADOR=null;
                            }
                        }
                        context.setContextType("producto_comercial", "id_String");
                        if(context.getStringValue("producto_comercial") == null) {
                            context.producto_comercial = null;
                        } else {
                            context.producto_comercial=(String) context.getProperty("producto_comercial");
                        }
                        context.setContextType("servicio", "id_String");
                        if(context.getStringValue("servicio") == null) {
                            context.servicio = null;
                        } else {
                            context.servicio=(String) context.getProperty("servicio");
                        }
                        context.setContextType("ssmp", "id_String");
                        if(context.getStringValue("ssmp") == null) {
                            context.ssmp = null;
                        } else {
                            context.ssmp=(String) context.getProperty("ssmp");
                        }
                        context.setContextType("subtotal", "id_String");
                        if(context.getStringValue("subtotal") == null) {
                            context.subtotal = null;
                        } else {
                            context.subtotal=(String) context.getProperty("subtotal");
                        }
                        context.setContextType("tipificacion", "id_String");
                        if(context.getStringValue("tipificacion") == null) {
                            context.tipificacion = null;
                        } else {
                            context.tipificacion=(String) context.getProperty("tipificacion");
                        }
                        context.setContextType("tipo", "id_String");
                        if(context.getStringValue("tipo") == null) {
                            context.tipo = null;
                        } else {
                            context.tipo=(String) context.getProperty("tipo");
                        }
                        context.setContextType("tipo_documento", "id_String");
                        if(context.getStringValue("tipo_documento") == null) {
                            context.tipo_documento = null;
                        } else {
                            context.tipo_documento=(String) context.getProperty("tipo_documento");
                        }
                        context.setContextType("tipo_formula", "id_String");
                        if(context.getStringValue("tipo_formula") == null) {
                            context.tipo_formula = null;
                        } else {
                            context.tipo_formula=(String) context.getProperty("tipo_formula");
                        }
                        context.setContextType("tipo_servicio", "id_String");
                        if(context.getStringValue("tipo_servicio") == null) {
                            context.tipo_servicio = null;
                        } else {
                            context.tipo_servicio=(String) context.getProperty("tipo_servicio");
                        }
                        context.setContextType("TipoRespuesta", "id_BigDecimal");
                        if(context.getStringValue("TipoRespuesta") == null) {
                            context.TipoRespuesta = null;
                        } else {
                            try{
                                context.TipoRespuesta=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TipoRespuesta"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TipoRespuesta", e.getMessage()));
                                context.TipoRespuesta=null;
                            }
                        }
                        context.setContextType("tirilla", "id_String");
                        if(context.getStringValue("tirilla") == null) {
                            context.tirilla = null;
                        } else {
                            context.tirilla=(String) context.getProperty("tirilla");
                        }
                        context.setContextType("unidad_medida", "id_String");
                        if(context.getStringValue("unidad_medida") == null) {
                            context.unidad_medida = null;
                        } else {
                            context.unidad_medida=(String) context.getProperty("unidad_medida");
                        }
                        context.setContextType("valor_gravado", "id_String");
                        if(context.getStringValue("valor_gravado") == null) {
                            context.valor_gravado = null;
                        } else {
                            context.valor_gravado=(String) context.getProperty("valor_gravado");
                        }
                        context.setContextType("valor_intermediacion", "id_String");
                        if(context.getStringValue("valor_intermediacion") == null) {
                            context.valor_intermediacion = null;
                        } else {
                            context.valor_intermediacion=(String) context.getProperty("valor_intermediacion");
                        }
                        context.setContextType("valor_total", "id_String");
                        if(context.getStringValue("valor_total") == null) {
                            context.valor_total = null;
                        } else {
                            context.valor_total=(String) context.getProperty("valor_total");
                        }
                        context.setContextType("valor_unitario", "id_String");
                        if(context.getStringValue("valor_unitario") == null) {
                            context.valor_unitario = null;
                        } else {
                            context.valor_unitario=(String) context.getProperty("valor_unitario");
                        }
                        context.setContextType("via_administracion", "id_String");
                        if(context.getStringValue("via_administracion") == null) {
                            context.via_administracion = null;
                        } else {
                            context.via_administracion=(String) context.getProperty("via_administracion");
                        }
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("PathStorage", "id_String");
                        if(context.getStringValue("PathStorage") == null) {
                            context.PathStorage = null;
                        } else {
                            context.PathStorage=(String) context.getProperty("PathStorage");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("CargueArchivoId", "id_Integer");
                        if(context.getStringValue("CargueArchivoId") == null) {
                            context.CargueArchivoId = null;
                        } else {
                            try{
                                context.CargueArchivoId=routines.system.ParserUtils.parseTo_Integer (context.getProperty("CargueArchivoId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CargueArchivoId", e.getMessage()));
                                context.CargueArchivoId=null;
                            }
                        }
                        context.setContextType("fechaArchivoErrores", "id_String");
                        if(context.getStringValue("fechaArchivoErrores") == null) {
                            context.fechaArchivoErrores = null;
                        } else {
                            context.fechaArchivoErrores=(String) context.getProperty("fechaArchivoErrores");
                        }
                        context.setContextType("nErroresArchivo", "id_Integer");
                        if(context.getStringValue("nErroresArchivo") == null) {
                            context.nErroresArchivo = null;
                        } else {
                            try{
                                context.nErroresArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("nErroresArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "nErroresArchivo", e.getMessage()));
                                context.nErroresArchivo=null;
                            }
                        }
                        context.setContextType("nRegArchivo", "id_Integer");
                        if(context.getStringValue("nRegArchivo") == null) {
                            context.nRegArchivo = null;
                        } else {
                            try{
                                context.nRegArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("nRegArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "nRegArchivo", e.getMessage()));
                                context.nRegArchivo=null;
                            }
                        }
                        context.setContextType("vArchivo_Id", "id_BigDecimal");
                        if(context.getStringValue("vArchivo_Id") == null) {
                            context.vArchivo_Id = null;
                        } else {
                            try{
                                context.vArchivo_Id=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vArchivo_Id"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vArchivo_Id", e.getMessage()));
                                context.vArchivo_Id=null;
                            }
                        }
                        context.setContextType("vCantRegistros", "id_Integer");
                        if(context.getStringValue("vCantRegistros") == null) {
                            context.vCantRegistros = null;
                        } else {
                            try{
                                context.vCantRegistros=routines.system.ParserUtils.parseTo_Integer (context.getProperty("vCantRegistros"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vCantRegistros", e.getMessage()));
                                context.vCantRegistros=null;
                            }
                        }
                        context.setContextType("vEstadoCarga", "id_String");
                        if(context.getStringValue("vEstadoCarga") == null) {
                            context.vEstadoCarga = null;
                        } else {
                            context.vEstadoCarga=(String) context.getProperty("vEstadoCarga");
                        }
                        context.setContextType("vIdTipoArchivo", "id_BigDecimal");
                        if(context.getStringValue("vIdTipoArchivo") == null) {
                            context.vIdTipoArchivo = null;
                        } else {
                            try{
                                context.vIdTipoArchivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIdTipoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIdTipoArchivo", e.getMessage()));
                                context.vIdTipoArchivo=null;
                            }
                        }
                        context.setContextType("vNombreArchivo", "id_String");
                        if(context.getStringValue("vNombreArchivo") == null) {
                            context.vNombreArchivo = null;
                        } else {
                            context.vNombreArchivo=(String) context.getProperty("vNombreArchivo");
                        }
                        context.setContextType("vNombreTipoArchivo", "id_String");
                        if(context.getStringValue("vNombreTipoArchivo") == null) {
                            context.vNombreTipoArchivo = null;
                        } else {
                            context.vNombreTipoArchivo=(String) context.getProperty("vNombreTipoArchivo");
                        }
                        context.setContextType("vPeriodo", "id_Date");
                        if(context.getStringValue("vPeriodo") == null) {
                            context.vPeriodo = null;
                        } else {
                            String context_vPeriodo_value = context.getProperty("vPeriodo");
                            try{
                                if (context_vPeriodo_value == null){
                                    context_vPeriodo_value = "";
                                }
                                int context_vPeriodo_pos = context_vPeriodo_value.indexOf(";");
                                String context_vPeriodo_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vPeriodo_pos > -1){
                                    context_vPeriodo_pattern = context_vPeriodo_value.substring(0, context_vPeriodo_pos);
                                    context_vPeriodo_value = context_vPeriodo_value.substring(context_vPeriodo_pos + 1);
                                }

                                context.vPeriodo=(java.util.Date)(new java.text.SimpleDateFormat(context_vPeriodo_pattern).parse(context_vPeriodo_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vPeriodo_longValue = Long.valueOf(context_vPeriodo_value);
                                    context.vPeriodo = new java.util.Date(context_vPeriodo_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vPeriodo", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vPeriodo=null;
                                }
                            }
                        }
                        context.setContextType("vRecepcionId", "id_BigDecimal");
                        if(context.getStringValue("vRecepcionId") == null) {
                            context.vRecepcionId = null;
                        } else {
                            try{
                                context.vRecepcionId=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vRecepcionId"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vRecepcionId", e.getMessage()));
                                context.vRecepcionId=null;
                            }
                        }
                        context.setContextType("vTipoArchivo", "id_String");
                        if(context.getStringValue("vTipoArchivo") == null) {
                            context.vTipoArchivo = null;
                        } else {
                            context.vTipoArchivo=(String) context.getProperty("vTipoArchivo");
                        }
                        context.setContextType("contador", "id_Integer");
                        if(context.getStringValue("contador") == null) {
                            context.contador = null;
                        } else {
                            try{
                                context.contador=routines.system.ParserUtils.parseTo_Integer (context.getProperty("contador"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "contador", e.getMessage()));
                                context.contador=null;
                            }
                        }
                        context.setContextType("eCIE10", "id_String");
                        if(context.getStringValue("eCIE10") == null) {
                            context.eCIE10 = null;
                        } else {
                            context.eCIE10=(String) context.getProperty("eCIE10");
                        }
                        context.setContextType("eComercial", "id_String");
                        if(context.getStringValue("eComercial") == null) {
                            context.eComercial = null;
                        } else {
                            context.eComercial=(String) context.getProperty("eComercial");
                        }
                        context.setContextType("eConcentracion", "id_String");
                        if(context.getStringValue("eConcentracion") == null) {
                            context.eConcentracion = null;
                        } else {
                            context.eConcentracion=(String) context.getProperty("eConcentracion");
                        }
                        }

                private void processContext_1() {
                        context.setContextType("eCTC", "id_String");
                        if(context.getStringValue("eCTC") == null) {
                            context.eCTC = null;
                        } else {
                            context.eCTC=(String) context.getProperty("eCTC");
                        }
                        context.setContextType("eCum", "id_String");
                        if(context.getStringValue("eCum") == null) {
                            context.eCum = null;
                        } else {
                            context.eCum=(String) context.getProperty("eCum");
                        }
                        context.setContextType("eCUPS", "id_String");
                        if(context.getStringValue("eCUPS") == null) {
                            context.eCUPS = null;
                        } else {
                            context.eCUPS=(String) context.getProperty("eCUPS");
                        }
                        context.setContextType("eESM", "id_String");
                        if(context.getStringValue("eESM") == null) {
                            context.eESM = null;
                        } else {
                            context.eESM=(String) context.getProperty("eESM");
                        }
                        context.setContextType("eGeneral", "id_String");
                        if(context.getStringValue("eGeneral") == null) {
                            context.eGeneral = null;
                        } else {
                            context.eGeneral=(String) context.getProperty("eGeneral");
                        }
                        context.setContextType("eGenerico", "id_String");
                        if(context.getStringValue("eGenerico") == null) {
                            context.eGenerico = null;
                        } else {
                            context.eGenerico=(String) context.getProperty("eGenerico");
                        }
                        context.setContextType("eInvima", "id_String");
                        if(context.getStringValue("eInvima") == null) {
                            context.eInvima = null;
                        } else {
                            context.eInvima=(String) context.getProperty("eInvima");
                        }
                        context.setContextType("eLaboratorio", "id_String");
                        if(context.getStringValue("eLaboratorio") == null) {
                            context.eLaboratorio = null;
                        } else {
                            context.eLaboratorio=(String) context.getProperty("eLaboratorio");
                        }
                        context.setContextType("ePersona", "id_String");
                        if(context.getStringValue("ePersona") == null) {
                            context.ePersona = null;
                        } else {
                            context.ePersona=(String) context.getProperty("ePersona");
                        }
                        context.setContextType("ePresentacion", "id_String");
                        if(context.getStringValue("ePresentacion") == null) {
                            context.ePresentacion = null;
                        } else {
                            context.ePresentacion=(String) context.getProperty("ePresentacion");
                        }
                        context.setContextType("eSSMP", "id_String");
                        if(context.getStringValue("eSSMP") == null) {
                            context.eSSMP = null;
                        } else {
                            context.eSSMP=(String) context.getProperty("eSSMP");
                        }
                        context.setContextType("eTipoFormula", "id_String");
                        if(context.getStringValue("eTipoFormula") == null) {
                            context.eTipoFormula = null;
                        } else {
                            context.eTipoFormula=(String) context.getProperty("eTipoFormula");
                        }
                        context.setContextType("eUmedida", "id_String");
                        if(context.getStringValue("eUmedida") == null) {
                            context.eUmedida = null;
                        } else {
                            context.eUmedida=(String) context.getProperty("eUmedida");
                        }
                        context.setContextType("eViaAdministracion", "id_String");
                        if(context.getStringValue("eViaAdministracion") == null) {
                            context.eViaAdministracion = null;
                        } else {
                            context.eViaAdministracion=(String) context.getProperty("eViaAdministracion");
                        }
                        context.setContextType("code", "id_Integer");
                        if(context.getStringValue("code") == null) {
                            context.code = null;
                        } else {
                            try{
                                context.code=routines.system.ParserUtils.parseTo_Integer (context.getProperty("code"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "code", e.getMessage()));
                                context.code=null;
                            }
                        }
                        context.setContextType("context", "id_String");
                        if(context.getStringValue("context") == null) {
                            context.context = null;
                        } else {
                            context.context=(String) context.getProperty("context");
                        }
                        context.setContextType("job", "id_String");
                        if(context.getStringValue("job") == null) {
                            context.job = null;
                        } else {
                            context.job=(String) context.getProperty("job");
                        }
                        context.setContextType("message", "id_String");
                        if(context.getStringValue("message") == null) {
                            context.message = null;
                        } else {
                            context.message=(String) context.getProperty("message");
                        }
                        context.setContextType("moment", "id_Date");
                        if(context.getStringValue("moment") == null) {
                            context.moment = null;
                        } else {
                            String context_moment_value = context.getProperty("moment");
                            try{
                                if (context_moment_value == null){
                                    context_moment_value = "";
                                }
                                int context_moment_pos = context_moment_value.indexOf(";");
                                String context_moment_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_moment_pos > -1){
                                    context_moment_pattern = context_moment_value.substring(0, context_moment_pos);
                                    context_moment_value = context_moment_value.substring(context_moment_pos + 1);
                                }

                                context.moment=(java.util.Date)(new java.text.SimpleDateFormat(context_moment_pattern).parse(context_moment_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_moment_longValue = Long.valueOf(context_moment_value);
                                    context.moment = new java.util.Date(context_moment_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "moment", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.moment=null;
                                }
                            }
                        }
                        context.setContextType("origen", "id_String");
                        if(context.getStringValue("origen") == null) {
                            context.origen = null;
                        } else {
                            context.origen=(String) context.getProperty("origen");
                        }
                        context.setContextType("priority", "id_Integer");
                        if(context.getStringValue("priority") == null) {
                            context.priority = null;
                        } else {
                            try{
                                context.priority=routines.system.ParserUtils.parseTo_Integer (context.getProperty("priority"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "priority", e.getMessage()));
                                context.priority=null;
                            }
                        }
                        context.setContextType("project", "id_String");
                        if(context.getStringValue("project") == null) {
                            context.project = null;
                        } else {
                            context.project=(String) context.getProperty("project");
                        }
                        context.setContextType("server_destino", "id_String");
                        if(context.getStringValue("server_destino") == null) {
                            context.server_destino = null;
                        } else {
                            context.server_destino=(String) context.getProperty("server_destino");
                        }
                        context.setContextType("server_origen", "id_String");
                        if(context.getStringValue("server_origen") == null) {
                            context.server_origen = null;
                        } else {
                            context.server_origen=(String) context.getProperty("server_origen");
                        }
                        context.setContextType("service_name_destino", "id_String");
                        if(context.getStringValue("service_name_destino") == null) {
                            context.service_name_destino = null;
                        } else {
                            context.service_name_destino=(String) context.getProperty("service_name_destino");
                        }
                        context.setContextType("service_name_origen", "id_String");
                        if(context.getStringValue("service_name_origen") == null) {
                            context.service_name_origen = null;
                        } else {
                            context.service_name_origen=(String) context.getProperty("service_name_origen");
                        }
                        context.setContextType("user_destino", "id_String");
                        if(context.getStringValue("user_destino") == null) {
                            context.user_destino = null;
                        } else {
                            context.user_destino=(String) context.getProperty("user_destino");
                        }
                        context.setContextType("user_origen", "id_String");
                        if(context.getStringValue("user_origen") == null) {
                            context.user_origen = null;
                        } else {
                            context.user_origen=(String) context.getProperty("user_origen");
                        }
                        context.setContextType("Cerrada", "id_BigDecimal");
                        if(context.getStringValue("Cerrada") == null) {
                            context.Cerrada = null;
                        } else {
                            try{
                                context.Cerrada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Cerrada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Cerrada", e.getMessage()));
                                context.Cerrada=null;
                            }
                        }
                        context.setContextType("Editada", "id_BigDecimal");
                        if(context.getStringValue("Editada") == null) {
                            context.Editada = null;
                        } else {
                            try{
                                context.Editada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Editada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Editada", e.getMessage()));
                                context.Editada=null;
                            }
                        }
                        context.setContextType("Editando", "id_BigDecimal");
                        if(context.getStringValue("Editando") == null) {
                            context.Editando = null;
                        } else {
                            try{
                                context.Editando=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Editando"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Editando", e.getMessage()));
                                context.Editando=null;
                            }
                        }
                        context.setContextType("Finalizada", "id_BigDecimal");
                        if(context.getStringValue("Finalizada") == null) {
                            context.Finalizada = null;
                        } else {
                            try{
                                context.Finalizada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Finalizada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Finalizada", e.getMessage()));
                                context.Finalizada=null;
                            }
                        }
                        context.setContextType("Iniciada", "id_BigDecimal");
                        if(context.getStringValue("Iniciada") == null) {
                            context.Iniciada = null;
                        } else {
                            try{
                                context.Iniciada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Iniciada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Iniciada", e.getMessage()));
                                context.Iniciada=null;
                            }
                        }
                        context.setContextType("Manual", "id_BigDecimal");
                        if(context.getStringValue("Manual") == null) {
                            context.Manual = null;
                        } else {
                            try{
                                context.Manual=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("Manual"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "Manual", e.getMessage()));
                                context.Manual=null;
                            }
                        }
                        context.setContextType("SinInniciar", "id_BigDecimal");
                        if(context.getStringValue("SinInniciar") == null) {
                            context.SinInniciar = null;
                        } else {
                            try{
                                context.SinInniciar=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SinInniciar"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SinInniciar", e.getMessage()));
                                context.SinInniciar=null;
                            }
                        }
                        context.setContextType("estActivo", "id_BigDecimal");
                        if(context.getStringValue("estActivo") == null) {
                            context.estActivo = null;
                        } else {
                            try{
                                context.estActivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estActivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estActivo", e.getMessage()));
                                context.estActivo=null;
                            }
                        }
                        context.setContextType("estCancelado", "id_BigDecimal");
                        if(context.getStringValue("estCancelado") == null) {
                            context.estCancelado = null;
                        } else {
                            try{
                                context.estCancelado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estCancelado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estCancelado", e.getMessage()));
                                context.estCancelado=null;
                            }
                        }
                        context.setContextType("estEnProceso", "id_BigDecimal");
                        if(context.getStringValue("estEnProceso") == null) {
                            context.estEnProceso = null;
                        } else {
                            try{
                                context.estEnProceso=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estEnProceso"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estEnProceso", e.getMessage()));
                                context.estEnProceso=null;
                            }
                        }
                        context.setContextType("estErrorArchivo", "id_BigDecimal");
                        if(context.getStringValue("estErrorArchivo") == null) {
                            context.estErrorArchivo = null;
                        } else {
                            try{
                                context.estErrorArchivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estErrorArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estErrorArchivo", e.getMessage()));
                                context.estErrorArchivo=null;
                            }
                        }
                        context.setContextType("estErrorProcesamiento", "id_BigDecimal");
                        if(context.getStringValue("estErrorProcesamiento") == null) {
                            context.estErrorProcesamiento = null;
                        } else {
                            try{
                                context.estErrorProcesamiento=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estErrorProcesamiento"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estErrorProcesamiento", e.getMessage()));
                                context.estErrorProcesamiento=null;
                            }
                        }
                        context.setContextType("estInactivo", "id_BigDecimal");
                        if(context.getStringValue("estInactivo") == null) {
                            context.estInactivo = null;
                        } else {
                            try{
                                context.estInactivo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estInactivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estInactivo", e.getMessage()));
                                context.estInactivo=null;
                            }
                        }
                        context.setContextType("estPausado", "id_BigDecimal");
                        if(context.getStringValue("estPausado") == null) {
                            context.estPausado = null;
                        } else {
                            try{
                                context.estPausado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estPausado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estPausado", e.getMessage()));
                                context.estPausado=null;
                            }
                        }
                        context.setContextType("estProcesado", "id_BigDecimal");
                        if(context.getStringValue("estProcesado") == null) {
                            context.estProcesado = null;
                        } else {
                            try{
                                context.estProcesado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("estProcesado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "estProcesado", e.getMessage()));
                                context.estProcesado=null;
                            }
                        }
                        context.setContextType("EstValidado", "id_BigDecimal");
                        if(context.getStringValue("EstValidado") == null) {
                            context.EstValidado = null;
                        } else {
                            try{
                                context.EstValidado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("EstValidado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstValidado", e.getMessage()));
                                context.EstValidado=null;
                            }
                        }
                        context.setContextType("archivoSalida", "id_String");
                        if(context.getStringValue("archivoSalida") == null) {
                            context.archivoSalida = null;
                        } else {
                            context.archivoSalida=(String) context.getProperty("archivoSalida");
                        }
                        context.setContextType("BANDERA_EJECUCION", "id_Integer");
                        if(context.getStringValue("BANDERA_EJECUCION") == null) {
                            context.BANDERA_EJECUCION = null;
                        } else {
                            try{
                                context.BANDERA_EJECUCION=routines.system.ParserUtils.parseTo_Integer (context.getProperty("BANDERA_EJECUCION"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "BANDERA_EJECUCION", e.getMessage()));
                                context.BANDERA_EJECUCION=null;
                            }
                        }
                        context.setContextType("DCARGUE_ID", "id_BigDecimal");
                        if(context.getStringValue("DCARGUE_ID") == null) {
                            context.DCARGUE_ID = null;
                        } else {
                            try{
                                context.DCARGUE_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("DCARGUE_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "DCARGUE_ID", e.getMessage()));
                                context.DCARGUE_ID=null;
                            }
                        }
                        context.setContextType("DESTINO", "id_String");
                        if(context.getStringValue("DESTINO") == null) {
                            context.DESTINO = null;
                        } else {
                            context.DESTINO=(String) context.getProperty("DESTINO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("JOB_ID", "id_BigDecimal");
                        if(context.getStringValue("JOB_ID") == null) {
                            context.JOB_ID = null;
                        } else {
                            try{
                                context.JOB_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("JOB_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "JOB_ID", e.getMessage()));
                                context.JOB_ID=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RECEPCION_ID", "id_BigDecimal");
                        if(context.getStringValue("RECEPCION_ID") == null) {
                            context.RECEPCION_ID = null;
                        } else {
                            try{
                                context.RECEPCION_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("RECEPCION_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "RECEPCION_ID", e.getMessage()));
                                context.RECEPCION_ID=null;
                            }
                        }
                        context.setContextType("TJOB", "id_Integer");
                        if(context.getStringValue("TJOB") == null) {
                            context.TJOB = null;
                        } else {
                            try{
                                context.TJOB=routines.system.ParserUtils.parseTo_Integer (context.getProperty("TJOB"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TJOB", e.getMessage()));
                                context.TJOB=null;
                            }
                        }
                        context.setContextType("EstadoArchivo", "id_Integer");
                        if(context.getStringValue("EstadoArchivo") == null) {
                            context.EstadoArchivo = null;
                        } else {
                            try{
                                context.EstadoArchivo=routines.system.ParserUtils.parseTo_Integer (context.getProperty("EstadoArchivo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "EstadoArchivo", e.getMessage()));
                                context.EstadoArchivo=null;
                            }
                        }
                        context.setContextType("Fauditoria", "id_Date");
                        if(context.getStringValue("Fauditoria") == null) {
                            context.Fauditoria = null;
                        } else {
                            String context_Fauditoria_value = context.getProperty("Fauditoria");
                            try{
                                if (context_Fauditoria_value == null){
                                    context_Fauditoria_value = "";
                                }
                                int context_Fauditoria_pos = context_Fauditoria_value.indexOf(";");
                                String context_Fauditoria_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_Fauditoria_pos > -1){
                                    context_Fauditoria_pattern = context_Fauditoria_value.substring(0, context_Fauditoria_pos);
                                    context_Fauditoria_value = context_Fauditoria_value.substring(context_Fauditoria_pos + 1);
                                }

                                context.Fauditoria=(java.util.Date)(new java.text.SimpleDateFormat(context_Fauditoria_pattern).parse(context_Fauditoria_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_Fauditoria_longValue = Long.valueOf(context_Fauditoria_value);
                                    context.Fauditoria = new java.util.Date(context_Fauditoria_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "Fauditoria", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.Fauditoria=null;
                                }
                            }
                        }
                        context.setContextType("HAUDITORIA_ID", "id_BigDecimal");
                        if(context.getStringValue("HAUDITORIA_ID") == null) {
                            context.HAUDITORIA_ID = null;
                        } else {
                            try{
                                context.HAUDITORIA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("HAUDITORIA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "HAUDITORIA_ID", e.getMessage()));
                                context.HAUDITORIA_ID=null;
                            }
                        }
                        context.setContextType("Nfactura", "id_String");
                        if(context.getStringValue("Nfactura") == null) {
                            context.Nfactura = null;
                        } else {
                            context.Nfactura=(String) context.getProperty("Nfactura");
                        }
                        context.setContextType("Sprefijo", "id_String");
                        if(context.getStringValue("Sprefijo") == null) {
                            context.Sprefijo = null;
                        } else {
                            context.Sprefijo=(String) context.getProperty("Sprefijo");
                        }
                        context.setContextType("SumaFactura", "id_Double");
                        if(context.getStringValue("SumaFactura") == null) {
                            context.SumaFactura = null;
                        } else {
                            try{
                                context.SumaFactura=routines.system.ParserUtils.parseTo_Double (context.getProperty("SumaFactura"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaFactura", e.getMessage()));
                                context.SumaFactura=null;
                            }
                        }
                        context.setContextType("SumaGlosas", "id_Double");
                        if(context.getStringValue("SumaGlosas") == null) {
                            context.SumaGlosas = null;
                        } else {
                            try{
                                context.SumaGlosas=routines.system.ParserUtils.parseTo_Double (context.getProperty("SumaGlosas"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaGlosas", e.getMessage()));
                                context.SumaGlosas=null;
                            }
                        }
                        context.setContextType("mail_Message", "id_String");
                        if(context.getStringValue("mail_Message") == null) {
                            context.mail_Message = null;
                        } else {
                            context.mail_Message=(String) context.getProperty("mail_Message");
                        }
                        context.setContextType("mail_Password", "id_String");
                        if(context.getStringValue("mail_Password") == null) {
                            context.mail_Password = null;
                        } else {
                            context.mail_Password=(String) context.getProperty("mail_Password");
                        }
                        context.setContextType("mail_SenderName", "id_String");
                        if(context.getStringValue("mail_SenderName") == null) {
                            context.mail_SenderName = null;
                        } else {
                            context.mail_SenderName=(String) context.getProperty("mail_SenderName");
                        }
                        context.setContextType("mail_SMTP_Host", "id_String");
                        if(context.getStringValue("mail_SMTP_Host") == null) {
                            context.mail_SMTP_Host = null;
                        } else {
                            context.mail_SMTP_Host=(String) context.getProperty("mail_SMTP_Host");
                        }
                        context.setContextType("mail_SMTP_Port", "id_String");
                        if(context.getStringValue("mail_SMTP_Port") == null) {
                            context.mail_SMTP_Port = null;
                        } else {
                            context.mail_SMTP_Port=(String) context.getProperty("mail_SMTP_Port");
                        }
                        context.setContextType("mail_Subject", "id_String");
                        if(context.getStringValue("mail_Subject") == null) {
                            context.mail_Subject = null;
                        } else {
                            context.mail_Subject=(String) context.getProperty("mail_Subject");
                        }
                        context.setContextType("mail_To", "id_String");
                        if(context.getStringValue("mail_To") == null) {
                            context.mail_To = null;
                        } else {
                            context.mail_To=(String) context.getProperty("mail_To");
                        }
                        context.setContextType("mail_User", "id_String");
                        if(context.getStringValue("mail_User") == null) {
                            context.mail_User = null;
                        } else {
                            context.mail_User=(String) context.getProperty("mail_User");
                        }
                        context.setContextType("AfiliacionDerechos", "id_BigDecimal");
                        if(context.getStringValue("AfiliacionDerechos") == null) {
                            context.AfiliacionDerechos = null;
                        } else {
                            try{
                                context.AfiliacionDerechos=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AfiliacionDerechos"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AfiliacionDerechos", e.getMessage()));
                                context.AfiliacionDerechos=null;
                            }
                        }
                        context.setContextType("AfiliacionDerechosD", "id_String");
                        if(context.getStringValue("AfiliacionDerechosD") == null) {
                            context.AfiliacionDerechosD = null;
                        } else {
                            context.AfiliacionDerechosD=(String) context.getProperty("AfiliacionDerechosD");
                        }
                        context.setContextType("AfiliacionInactiva", "id_BigDecimal");
                        if(context.getStringValue("AfiliacionInactiva") == null) {
                            context.AfiliacionInactiva = null;
                        } else {
                            try{
                                context.AfiliacionInactiva=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AfiliacionInactiva"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AfiliacionInactiva", e.getMessage()));
                                context.AfiliacionInactiva=null;
                            }
                        }
                        context.setContextType("AfiliacionInactivaD", "id_String");
                        if(context.getStringValue("AfiliacionInactivaD") == null) {
                            context.AfiliacionInactivaD = null;
                        } else {
                            context.AfiliacionInactivaD=(String) context.getProperty("AfiliacionInactivaD");
                        }
                        context.setContextType("AutorizacionCobrado", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionCobrado") == null) {
                            context.AutorizacionCobrado = null;
                        } else {
                            try{
                                context.AutorizacionCobrado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionCobrado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionCobrado", e.getMessage()));
                                context.AutorizacionCobrado=null;
                            }
                        }
                        context.setContextType("AutorizacionCobradoD", "id_String");
                        if(context.getStringValue("AutorizacionCobradoD") == null) {
                            context.AutorizacionCobradoD = null;
                        } else {
                            context.AutorizacionCobradoD=(String) context.getProperty("AutorizacionCobradoD");
                        }
                        context.setContextType("AutorizacionCups", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionCups") == null) {
                            context.AutorizacionCups = null;
                        } else {
                            try{
                                context.AutorizacionCups=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionCups"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionCups", e.getMessage()));
                                context.AutorizacionCups=null;
                            }
                        }
                        context.setContextType("AutorizacionCupsD", "id_String");
                        if(context.getStringValue("AutorizacionCupsD") == null) {
                            context.AutorizacionCupsD = null;
                        } else {
                            context.AutorizacionCupsD=(String) context.getProperty("AutorizacionCupsD");
                        }
                        context.setContextType("AutorizacionNoExiste", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionNoExiste") == null) {
                            context.AutorizacionNoExiste = null;
                        } else {
                            try{
                                context.AutorizacionNoExiste=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionNoExiste"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionNoExiste", e.getMessage()));
                                context.AutorizacionNoExiste=null;
                            }
                        }
                        context.setContextType("AutorizacionNoExisteD", "id_String");
                        if(context.getStringValue("AutorizacionNoExisteD") == null) {
                            context.AutorizacionNoExisteD = null;
                        } else {
                            context.AutorizacionNoExisteD=(String) context.getProperty("AutorizacionNoExisteD");
                        }
                        context.setContextType("AutorizacionPersona", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionPersona") == null) {
                            context.AutorizacionPersona = null;
                        } else {
                            try{
                                context.AutorizacionPersona=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionPersona"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionPersona", e.getMessage()));
                                context.AutorizacionPersona=null;
                            }
                        }
                        context.setContextType("AutorizacionPersonaD", "id_String");
                        if(context.getStringValue("AutorizacionPersonaD") == null) {
                            context.AutorizacionPersonaD = null;
                        } else {
                            context.AutorizacionPersonaD=(String) context.getProperty("AutorizacionPersonaD");
                        }
                        context.setContextType("AutorizacionPrestador", "id_BigDecimal");
                        if(context.getStringValue("AutorizacionPrestador") == null) {
                            context.AutorizacionPrestador = null;
                        } else {
                            try{
                                context.AutorizacionPrestador=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AutorizacionPrestador"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AutorizacionPrestador", e.getMessage()));
                                context.AutorizacionPrestador=null;
                            }
                        }
                        context.setContextType("AutorizacionPrestadorD", "id_String");
                        if(context.getStringValue("AutorizacionPrestadorD") == null) {
                            context.AutorizacionPrestadorD = null;
                        } else {
                            context.AutorizacionPrestadorD=(String) context.getProperty("AutorizacionPrestadorD");
                        }
                        context.setContextType("CantidadFormulada", "id_BigDecimal");
                        if(context.getStringValue("CantidadFormulada") == null) {
                            context.CantidadFormulada = null;
                        } else {
                            try{
                                context.CantidadFormulada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("CantidadFormulada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "CantidadFormulada", e.getMessage()));
                                context.CantidadFormulada=null;
                            }
                        }
                        context.setContextType("CantidadFormuladaD", "id_String");
                        if(context.getStringValue("CantidadFormuladaD") == null) {
                            context.CantidadFormuladaD = null;
                        } else {
                            context.CantidadFormuladaD=(String) context.getProperty("CantidadFormuladaD");
                        }
                        context.setContextType("FacturaAuditada", "id_BigDecimal");
                        if(context.getStringValue("FacturaAuditada") == null) {
                            context.FacturaAuditada = null;
                        } else {
                            try{
                                context.FacturaAuditada=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("FacturaAuditada"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "FacturaAuditada", e.getMessage()));
                                context.FacturaAuditada=null;
                            }
                        }
                        context.setContextType("FacturaAuditadaD", "id_String");
                        if(context.getStringValue("FacturaAuditadaD") == null) {
                            context.FacturaAuditadaD = null;
                        } else {
                            context.FacturaAuditadaD=(String) context.getProperty("FacturaAuditadaD");
                        }
                        context.setContextType("MedicamentoNoPactado", "id_BigDecimal");
                        if(context.getStringValue("MedicamentoNoPactado") == null) {
                            context.MedicamentoNoPactado = null;
                        } else {
                            try{
                                context.MedicamentoNoPactado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MedicamentoNoPactado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MedicamentoNoPactado", e.getMessage()));
                                context.MedicamentoNoPactado=null;
                            }
                        }
                        context.setContextType("MedicamentoNoPactadoD", "id_String");
                        if(context.getStringValue("MedicamentoNoPactadoD") == null) {
                            context.MedicamentoNoPactadoD = null;
                        } else {
                            context.MedicamentoNoPactadoD=(String) context.getProperty("MedicamentoNoPactadoD");
                        }
                        context.setContextType("PorcetajeConsumo", "id_BigDecimal");
                        if(context.getStringValue("PorcetajeConsumo") == null) {
                            context.PorcetajeConsumo = null;
                        } else {
                            try{
                                context.PorcetajeConsumo=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PorcetajeConsumo"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PorcetajeConsumo", e.getMessage()));
                                context.PorcetajeConsumo=null;
                            }
                        }
                        context.setContextType("PorcetajeConsumoD", "id_String");
                        if(context.getStringValue("PorcetajeConsumoD") == null) {
                            context.PorcetajeConsumoD = null;
                        } else {
                            context.PorcetajeConsumoD=(String) context.getProperty("PorcetajeConsumoD");
                        }
                        context.setContextType("SumaFacturas", "id_BigDecimal");
                        if(context.getStringValue("SumaFacturas") == null) {
                            context.SumaFacturas = null;
                        } else {
                            try{
                                context.SumaFacturas=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("SumaFacturas"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SumaFacturas", e.getMessage()));
                                context.SumaFacturas=null;
                            }
                        }
                        context.setContextType("SumaFacturasD", "id_String");
                        if(context.getStringValue("SumaFacturasD") == null) {
                            context.SumaFacturasD = null;
                        } else {
                            context.SumaFacturasD=(String) context.getProperty("SumaFacturasD");
                        }
                        context.setContextType("TiempoEntrega", "id_BigDecimal");
                        if(context.getStringValue("TiempoEntrega") == null) {
                            context.TiempoEntrega = null;
                        } else {
                            try{
                                context.TiempoEntrega=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("TiempoEntrega"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "TiempoEntrega", e.getMessage()));
                                context.TiempoEntrega=null;
                            }
                        }
                        context.setContextType("TiempoEntregaD", "id_String");
                        if(context.getStringValue("TiempoEntregaD") == null) {
                            context.TiempoEntregaD = null;
                        } else {
                            context.TiempoEntregaD=(String) context.getProperty("TiempoEntregaD");
                        }
                        }

                private void processContext_2() {
                        context.setContextType("ValorDiferente", "id_BigDecimal");
                        if(context.getStringValue("ValorDiferente") == null) {
                            context.ValorDiferente = null;
                        } else {
                            try{
                                context.ValorDiferente=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ValorDiferente"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ValorDiferente", e.getMessage()));
                                context.ValorDiferente=null;
                            }
                        }
                        context.setContextType("ValorDiferenteD", "id_String");
                        if(context.getStringValue("ValorDiferenteD") == null) {
                            context.ValorDiferenteD = null;
                        } else {
                            context.ValorDiferenteD=(String) context.getProperty("ValorDiferenteD");
                        }
                        context.setContextType("ValorNoPactado", "id_BigDecimal");
                        if(context.getStringValue("ValorNoPactado") == null) {
                            context.ValorNoPactado = null;
                        } else {
                            try{
                                context.ValorNoPactado=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ValorNoPactado"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ValorNoPactado", e.getMessage()));
                                context.ValorNoPactado=null;
                            }
                        }
                        context.setContextType("ValorNoPactadoD", "id_String");
                        if(context.getStringValue("ValorNoPactadoD") == null) {
                            context.ValorNoPactadoD = null;
                        } else {
                            context.ValorNoPactadoD=(String) context.getProperty("ValorNoPactadoD");
                        }
                        context.setContextType("VidaUtil", "id_BigDecimal");
                        if(context.getStringValue("VidaUtil") == null) {
                            context.VidaUtil = null;
                        } else {
                            try{
                                context.VidaUtil=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("VidaUtil"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VidaUtil", e.getMessage()));
                                context.VidaUtil=null;
                            }
                        }
                        context.setContextType("VidaUtilD", "id_String");
                        if(context.getStringValue("VidaUtilD") == null) {
                            context.VidaUtilD = null;
                        } else {
                            context.VidaUtilD=(String) context.getProperty("VidaUtilD");
                        }
                        context.setContextType("AUDITORIA_ID", "id_BigDecimal");
                        if(context.getStringValue("AUDITORIA_ID") == null) {
                            context.AUDITORIA_ID = null;
                        } else {
                            try{
                                context.AUDITORIA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AUDITORIA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AUDITORIA_ID", e.getMessage()));
                                context.AUDITORIA_ID=null;
                            }
                        }
                        context.setContextType("ETAPASNORMATIVIDAD_ID", "id_BigDecimal");
                        if(context.getStringValue("ETAPASNORMATIVIDAD_ID") == null) {
                            context.ETAPASNORMATIVIDAD_ID = null;
                        } else {
                            try{
                                context.ETAPASNORMATIVIDAD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ETAPASNORMATIVIDAD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ETAPASNORMATIVIDAD_ID", e.getMessage()));
                                context.ETAPASNORMATIVIDAD_ID=null;
                            }
                        }
                        context.setContextType("FRADICADO", "id_Date");
                        if(context.getStringValue("FRADICADO") == null) {
                            context.FRADICADO = null;
                        } else {
                            String context_FRADICADO_value = context.getProperty("FRADICADO");
                            try{
                                if (context_FRADICADO_value == null){
                                    context_FRADICADO_value = "";
                                }
                                int context_FRADICADO_pos = context_FRADICADO_value.indexOf(";");
                                String context_FRADICADO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_FRADICADO_pos > -1){
                                    context_FRADICADO_pattern = context_FRADICADO_value.substring(0, context_FRADICADO_pos);
                                    context_FRADICADO_value = context_FRADICADO_value.substring(context_FRADICADO_pos + 1);
                                }

                                context.FRADICADO=(java.util.Date)(new java.text.SimpleDateFormat(context_FRADICADO_pattern).parse(context_FRADICADO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_FRADICADO_longValue = Long.valueOf(context_FRADICADO_value);
                                    context.FRADICADO = new java.util.Date(context_FRADICADO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "FRADICADO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.FRADICADO=null;
                                }
                            }
                        }
                        context.setContextType("NORMATIVIDAD_ETAPA_ID", "id_BigDecimal");
                        if(context.getStringValue("NORMATIVIDAD_ETAPA_ID") == null) {
                            context.NORMATIVIDAD_ETAPA_ID = null;
                        } else {
                            try{
                                context.NORMATIVIDAD_ETAPA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("NORMATIVIDAD_ETAPA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NORMATIVIDAD_ETAPA_ID", e.getMessage()));
                                context.NORMATIVIDAD_ETAPA_ID=null;
                            }
                        }
                        context.setContextType("NORMATIVIDAD_GLOSA_ID", "id_BigDecimal");
                        if(context.getStringValue("NORMATIVIDAD_GLOSA_ID") == null) {
                            context.NORMATIVIDAD_GLOSA_ID = null;
                        } else {
                            try{
                                context.NORMATIVIDAD_GLOSA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("NORMATIVIDAD_GLOSA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "NORMATIVIDAD_GLOSA_ID", e.getMessage()));
                                context.NORMATIVIDAD_GLOSA_ID=null;
                            }
                        }
                        context.setContextType("SUMATORIA", "id_Double");
                        if(context.getStringValue("SUMATORIA") == null) {
                            context.SUMATORIA = null;
                        } else {
                            try{
                                context.SUMATORIA=routines.system.ParserUtils.parseTo_Double (context.getProperty("SUMATORIA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SUMATORIA", e.getMessage()));
                                context.SUMATORIA=null;
                            }
                        }
                        context.setContextType("SUMATORIA_FACTURA", "id_Double");
                        if(context.getStringValue("SUMATORIA_FACTURA") == null) {
                            context.SUMATORIA_FACTURA = null;
                        } else {
                            try{
                                context.SUMATORIA_FACTURA=routines.system.ParserUtils.parseTo_Double (context.getProperty("SUMATORIA_FACTURA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "SUMATORIA_FACTURA", e.getMessage()));
                                context.SUMATORIA_FACTURA=null;
                            }
                        }
                        context.setContextType("UORG_ID", "id_BigDecimal");
                        if(context.getStringValue("UORG_ID") == null) {
                            context.UORG_ID = null;
                        } else {
                            try{
                                context.UORG_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("UORG_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "UORG_ID", e.getMessage()));
                                context.UORG_ID=null;
                            }
                        }
                        context.setContextType("USUARIOS_ID", "id_BigDecimal");
                        if(context.getStringValue("USUARIOS_ID") == null) {
                            context.USUARIOS_ID = null;
                        } else {
                            try{
                                context.USUARIOS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("USUARIOS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "USUARIOS_ID", e.getMessage()));
                                context.USUARIOS_ID=null;
                            }
                        }
                        context.setContextType("VIDA_UTIL", "id_Integer");
                        if(context.getStringValue("VIDA_UTIL") == null) {
                            context.VIDA_UTIL = null;
                        } else {
                            try{
                                context.VIDA_UTIL=routines.system.ParserUtils.parseTo_Integer (context.getProperty("VIDA_UTIL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "VIDA_UTIL", e.getMessage()));
                                context.VIDA_UTIL=null;
                            }
                        }
                        context.setContextType("vFechaFinContrato", "id_Date");
                        if(context.getStringValue("vFechaFinContrato") == null) {
                            context.vFechaFinContrato = null;
                        } else {
                            String context_vFechaFinContrato_value = context.getProperty("vFechaFinContrato");
                            try{
                                if (context_vFechaFinContrato_value == null){
                                    context_vFechaFinContrato_value = "";
                                }
                                int context_vFechaFinContrato_pos = context_vFechaFinContrato_value.indexOf(";");
                                String context_vFechaFinContrato_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vFechaFinContrato_pos > -1){
                                    context_vFechaFinContrato_pattern = context_vFechaFinContrato_value.substring(0, context_vFechaFinContrato_pos);
                                    context_vFechaFinContrato_value = context_vFechaFinContrato_value.substring(context_vFechaFinContrato_pos + 1);
                                }

                                context.vFechaFinContrato=(java.util.Date)(new java.text.SimpleDateFormat(context_vFechaFinContrato_pattern).parse(context_vFechaFinContrato_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vFechaFinContrato_longValue = Long.valueOf(context_vFechaFinContrato_value);
                                    context.vFechaFinContrato = new java.util.Date(context_vFechaFinContrato_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vFechaFinContrato", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vFechaFinContrato=null;
                                }
                            }
                        }
                        context.setContextType("vFechaIniContrato", "id_Date");
                        if(context.getStringValue("vFechaIniContrato") == null) {
                            context.vFechaIniContrato = null;
                        } else {
                            String context_vFechaIniContrato_value = context.getProperty("vFechaIniContrato");
                            try{
                                if (context_vFechaIniContrato_value == null){
                                    context_vFechaIniContrato_value = "";
                                }
                                int context_vFechaIniContrato_pos = context_vFechaIniContrato_value.indexOf(";");
                                String context_vFechaIniContrato_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_vFechaIniContrato_pos > -1){
                                    context_vFechaIniContrato_pattern = context_vFechaIniContrato_value.substring(0, context_vFechaIniContrato_pos);
                                    context_vFechaIniContrato_value = context_vFechaIniContrato_value.substring(context_vFechaIniContrato_pos + 1);
                                }

                                context.vFechaIniContrato=(java.util.Date)(new java.text.SimpleDateFormat(context_vFechaIniContrato_pattern).parse(context_vFechaIniContrato_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_vFechaIniContrato_longValue = Long.valueOf(context_vFechaIniContrato_value);
                                    context.vFechaIniContrato = new java.util.Date(context_vFechaIniContrato_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "vFechaIniContrato", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.vFechaIniContrato=null;
                                }
                            }
                        }
                        context.setContextType("vIntermediacionDisp", "id_BigDecimal");
                        if(context.getStringValue("vIntermediacionDisp") == null) {
                            context.vIntermediacionDisp = null;
                        } else {
                            try{
                                context.vIntermediacionDisp=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIntermediacionDisp"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIntermediacionDisp", e.getMessage()));
                                context.vIntermediacionDisp=null;
                            }
                        }
                        context.setContextType("vIntermediacionSum", "id_BigDecimal");
                        if(context.getStringValue("vIntermediacionSum") == null) {
                            context.vIntermediacionSum = null;
                        } else {
                            try{
                                context.vIntermediacionSum=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("vIntermediacionSum"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "vIntermediacionSum", e.getMessage()));
                                context.vIntermediacionSum=null;
                            }
                        }
                        context.setContextType("vTipificacion", "id_String");
                        if(context.getStringValue("vTipificacion") == null) {
                            context.vTipificacion = null;
                        } else {
                            context.vTipificacion=(String) context.getProperty("vTipificacion");
                        }
                        context.setContextType("vTipoArchivoSigla", "id_String");
                        if(context.getStringValue("vTipoArchivoSigla") == null) {
                            context.vTipoArchivoSigla = null;
                        } else {
                            context.vTipoArchivoSigla=(String) context.getProperty("vTipoArchivoSigla");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                        processContext_1();
                        processContext_2();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("BANDERA")) {
                context.BANDERA = (Integer) parentContextMap.get("BANDERA");
            }if (parentContextMap.containsKey("bodega")) {
                context.bodega = (String) parentContextMap.get("bodega");
            }if (parentContextMap.containsKey("cantidad")) {
                context.cantidad = (String) parentContextMap.get("cantidad");
            }if (parentContextMap.containsKey("cantidad_despachada")) {
                context.cantidad_despachada = (String) parentContextMap.get("cantidad_despachada");
            }if (parentContextMap.containsKey("cantidad_solicitada")) {
                context.cantidad_solicitada = (String) parentContextMap.get("cantidad_solicitada");
            }if (parentContextMap.containsKey("codigo_autorizacion")) {
                context.codigo_autorizacion = (String) parentContextMap.get("codigo_autorizacion");
            }if (parentContextMap.containsKey("codigo_cie10")) {
                context.codigo_cie10 = (String) parentContextMap.get("codigo_cie10");
            }if (parentContextMap.containsKey("codigo_cum")) {
                context.codigo_cum = (String) parentContextMap.get("codigo_cum");
            }if (parentContextMap.containsKey("codigo_cups")) {
                context.codigo_cups = (String) parentContextMap.get("codigo_cups");
            }if (parentContextMap.containsKey("concentracion")) {
                context.concentracion = (String) parentContextMap.get("concentracion");
            }if (parentContextMap.containsKey("confidencialidad")) {
                context.confidencialidad = (String) parentContextMap.get("confidencialidad");
            }if (parentContextMap.containsKey("CONTRATOS_ID")) {
                context.CONTRATOS_ID = (BigDecimal) parentContextMap.get("CONTRATOS_ID");
            }if (parentContextMap.containsKey("ctc_aprobado")) {
                context.ctc_aprobado = (String) parentContextMap.get("ctc_aprobado");
            }if (parentContextMap.containsKey("descripcion_cie10")) {
                context.descripcion_cie10 = (String) parentContextMap.get("descripcion_cie10");
            }if (parentContextMap.containsKey("descripcion_cups")) {
                context.descripcion_cups = (String) parentContextMap.get("descripcion_cups");
            }if (parentContextMap.containsKey("documento")) {
                context.documento = (String) parentContextMap.get("documento");
            }if (parentContextMap.containsKey("esm")) {
                context.esm = (String) parentContextMap.get("esm");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("EstAfiliacionActivo")) {
                context.EstAfiliacionActivo = (Integer) parentContextMap.get("EstAfiliacionActivo");
            }if (parentContextMap.containsKey("EstAfiliacionProvisional")) {
                context.EstAfiliacionProvisional = (Integer) parentContextMap.get("EstAfiliacionProvisional");
            }if (parentContextMap.containsKey("EstAfiliaicionInactivo")) {
                context.EstAfiliaicionInactivo = (Integer) parentContextMap.get("EstAfiliaicionInactivo");
            }if (parentContextMap.containsKey("EstArchivoPCE")) {
                context.EstArchivoPCE = (BigDecimal) parentContextMap.get("EstArchivoPCE");
            }if (parentContextMap.containsKey("fecha_autorizacion")) {
                context.fecha_autorizacion = (String) parentContextMap.get("fecha_autorizacion");
            }if (parentContextMap.containsKey("fecha_dispensacion")) {
                context.fecha_dispensacion = (String) parentContextMap.get("fecha_dispensacion");
            }if (parentContextMap.containsKey("fecha_egreso")) {
                context.fecha_egreso = (String) parentContextMap.get("fecha_egreso");
            }if (parentContextMap.containsKey("fecha_factura")) {
                context.fecha_factura = (String) parentContextMap.get("fecha_factura");
            }if (parentContextMap.containsKey("fecha_formulacion")) {
                context.fecha_formulacion = (String) parentContextMap.get("fecha_formulacion");
            }if (parentContextMap.containsKey("fecha_ingreso")) {
                context.fecha_ingreso = (String) parentContextMap.get("fecha_ingreso");
            }if (parentContextMap.containsKey("FECHA_NULL")) {
                context.FECHA_NULL = (java.util.Date) parentContextMap.get("FECHA_NULL");
            }if (parentContextMap.containsKey("fecha_registro")) {
                context.fecha_registro = (String) parentContextMap.get("fecha_registro");
            }if (parentContextMap.containsKey("fecha_servicio")) {
                context.fecha_servicio = (String) parentContextMap.get("fecha_servicio");
            }if (parentContextMap.containsKey("fecha_vencimiento")) {
                context.fecha_vencimiento = (String) parentContextMap.get("fecha_vencimiento");
            }if (parentContextMap.containsKey("fuerza_militar")) {
                context.fuerza_militar = (String) parentContextMap.get("fuerza_militar");
            }if (parentContextMap.containsKey("HORA")) {
                context.HORA = (Integer) parentContextMap.get("HORA");
            }if (parentContextMap.containsKey("invima")) {
                context.invima = (String) parentContextMap.get("invima");
            }if (parentContextMap.containsKey("laboratorio")) {
                context.laboratorio = (String) parentContextMap.get("laboratorio");
            }if (parentContextMap.containsKey("lote")) {
                context.lote = (String) parentContextMap.get("lote");
            }if (parentContextMap.containsKey("lugar_dispensacion")) {
                context.lugar_dispensacion = (String) parentContextMap.get("lugar_dispensacion");
            }if (parentContextMap.containsKey("MEDCONTRATOS_ID")) {
                context.MEDCONTRATOS_ID = (BigDecimal) parentContextMap.get("MEDCONTRATOS_ID");
            }if (parentContextMap.containsKey("Narchivo")) {
                context.Narchivo = (String) parentContextMap.get("Narchivo");
            }if (parentContextMap.containsKey("nombre_medicamento")) {
                context.nombre_medicamento = (String) parentContextMap.get("nombre_medicamento");
            }if (parentContextMap.containsKey("numero")) {
                context.numero = (String) parentContextMap.get("numero");
            }if (parentContextMap.containsKey("numero_factura")) {
                context.numero_factura = (String) parentContextMap.get("numero_factura");
            }if (parentContextMap.containsKey("numero_formula")) {
                context.numero_formula = (String) parentContextMap.get("numero_formula");
            }if (parentContextMap.containsKey("observaciones")) {
                context.observaciones = (String) parentContextMap.get("observaciones");
            }if (parentContextMap.containsKey("origen_formulacion")) {
                context.origen_formulacion = (String) parentContextMap.get("origen_formulacion");
            }if (parentContextMap.containsKey("periodo")) {
                context.periodo = (String) parentContextMap.get("periodo");
            }if (parentContextMap.containsKey("prefijo")) {
                context.prefijo = (String) parentContextMap.get("prefijo");
            }if (parentContextMap.containsKey("presentacion")) {
                context.presentacion = (String) parentContextMap.get("presentacion");
            }if (parentContextMap.containsKey("PRESTADOR")) {
                context.PRESTADOR = (BigDecimal) parentContextMap.get("PRESTADOR");
            }if (parentContextMap.containsKey("producto_comercial")) {
                context.producto_comercial = (String) parentContextMap.get("producto_comercial");
            }if (parentContextMap.containsKey("servicio")) {
                context.servicio = (String) parentContextMap.get("servicio");
            }if (parentContextMap.containsKey("ssmp")) {
                context.ssmp = (String) parentContextMap.get("ssmp");
            }if (parentContextMap.containsKey("subtotal")) {
                context.subtotal = (String) parentContextMap.get("subtotal");
            }if (parentContextMap.containsKey("tipificacion")) {
                context.tipificacion = (String) parentContextMap.get("tipificacion");
            }if (parentContextMap.containsKey("tipo")) {
                context.tipo = (String) parentContextMap.get("tipo");
            }if (parentContextMap.containsKey("tipo_documento")) {
                context.tipo_documento = (String) parentContextMap.get("tipo_documento");
            }if (parentContextMap.containsKey("tipo_formula")) {
                context.tipo_formula = (String) parentContextMap.get("tipo_formula");
            }if (parentContextMap.containsKey("tipo_servicio")) {
                context.tipo_servicio = (String) parentContextMap.get("tipo_servicio");
            }if (parentContextMap.containsKey("TipoRespuesta")) {
                context.TipoRespuesta = (BigDecimal) parentContextMap.get("TipoRespuesta");
            }if (parentContextMap.containsKey("tirilla")) {
                context.tirilla = (String) parentContextMap.get("tirilla");
            }if (parentContextMap.containsKey("unidad_medida")) {
                context.unidad_medida = (String) parentContextMap.get("unidad_medida");
            }if (parentContextMap.containsKey("valor_gravado")) {
                context.valor_gravado = (String) parentContextMap.get("valor_gravado");
            }if (parentContextMap.containsKey("valor_intermediacion")) {
                context.valor_intermediacion = (String) parentContextMap.get("valor_intermediacion");
            }if (parentContextMap.containsKey("valor_total")) {
                context.valor_total = (String) parentContextMap.get("valor_total");
            }if (parentContextMap.containsKey("valor_unitario")) {
                context.valor_unitario = (String) parentContextMap.get("valor_unitario");
            }if (parentContextMap.containsKey("via_administracion")) {
                context.via_administracion = (String) parentContextMap.get("via_administracion");
            }if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("PathStorage")) {
                context.PathStorage = (String) parentContextMap.get("PathStorage");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("CargueArchivoId")) {
                context.CargueArchivoId = (Integer) parentContextMap.get("CargueArchivoId");
            }if (parentContextMap.containsKey("fechaArchivoErrores")) {
                context.fechaArchivoErrores = (String) parentContextMap.get("fechaArchivoErrores");
            }if (parentContextMap.containsKey("nErroresArchivo")) {
                context.nErroresArchivo = (Integer) parentContextMap.get("nErroresArchivo");
            }if (parentContextMap.containsKey("nRegArchivo")) {
                context.nRegArchivo = (Integer) parentContextMap.get("nRegArchivo");
            }if (parentContextMap.containsKey("vArchivo_Id")) {
                context.vArchivo_Id = (BigDecimal) parentContextMap.get("vArchivo_Id");
            }if (parentContextMap.containsKey("vCantRegistros")) {
                context.vCantRegistros = (Integer) parentContextMap.get("vCantRegistros");
            }if (parentContextMap.containsKey("vEstadoCarga")) {
                context.vEstadoCarga = (String) parentContextMap.get("vEstadoCarga");
            }if (parentContextMap.containsKey("vIdTipoArchivo")) {
                context.vIdTipoArchivo = (BigDecimal) parentContextMap.get("vIdTipoArchivo");
            }if (parentContextMap.containsKey("vNombreArchivo")) {
                context.vNombreArchivo = (String) parentContextMap.get("vNombreArchivo");
            }if (parentContextMap.containsKey("vNombreTipoArchivo")) {
                context.vNombreTipoArchivo = (String) parentContextMap.get("vNombreTipoArchivo");
            }if (parentContextMap.containsKey("vPeriodo")) {
                context.vPeriodo = (java.util.Date) parentContextMap.get("vPeriodo");
            }if (parentContextMap.containsKey("vRecepcionId")) {
                context.vRecepcionId = (BigDecimal) parentContextMap.get("vRecepcionId");
            }if (parentContextMap.containsKey("vTipoArchivo")) {
                context.vTipoArchivo = (String) parentContextMap.get("vTipoArchivo");
            }if (parentContextMap.containsKey("contador")) {
                context.contador = (Integer) parentContextMap.get("contador");
            }if (parentContextMap.containsKey("eCIE10")) {
                context.eCIE10 = (String) parentContextMap.get("eCIE10");
            }if (parentContextMap.containsKey("eComercial")) {
                context.eComercial = (String) parentContextMap.get("eComercial");
            }if (parentContextMap.containsKey("eConcentracion")) {
                context.eConcentracion = (String) parentContextMap.get("eConcentracion");
            }if (parentContextMap.containsKey("eCTC")) {
                context.eCTC = (String) parentContextMap.get("eCTC");
            }if (parentContextMap.containsKey("eCum")) {
                context.eCum = (String) parentContextMap.get("eCum");
            }if (parentContextMap.containsKey("eCUPS")) {
                context.eCUPS = (String) parentContextMap.get("eCUPS");
            }if (parentContextMap.containsKey("eESM")) {
                context.eESM = (String) parentContextMap.get("eESM");
            }if (parentContextMap.containsKey("eGeneral")) {
                context.eGeneral = (String) parentContextMap.get("eGeneral");
            }if (parentContextMap.containsKey("eGenerico")) {
                context.eGenerico = (String) parentContextMap.get("eGenerico");
            }if (parentContextMap.containsKey("eInvima")) {
                context.eInvima = (String) parentContextMap.get("eInvima");
            }if (parentContextMap.containsKey("eLaboratorio")) {
                context.eLaboratorio = (String) parentContextMap.get("eLaboratorio");
            }if (parentContextMap.containsKey("ePersona")) {
                context.ePersona = (String) parentContextMap.get("ePersona");
            }if (parentContextMap.containsKey("ePresentacion")) {
                context.ePresentacion = (String) parentContextMap.get("ePresentacion");
            }if (parentContextMap.containsKey("eSSMP")) {
                context.eSSMP = (String) parentContextMap.get("eSSMP");
            }if (parentContextMap.containsKey("eTipoFormula")) {
                context.eTipoFormula = (String) parentContextMap.get("eTipoFormula");
            }if (parentContextMap.containsKey("eUmedida")) {
                context.eUmedida = (String) parentContextMap.get("eUmedida");
            }if (parentContextMap.containsKey("eViaAdministracion")) {
                context.eViaAdministracion = (String) parentContextMap.get("eViaAdministracion");
            }if (parentContextMap.containsKey("code")) {
                context.code = (Integer) parentContextMap.get("code");
            }if (parentContextMap.containsKey("context")) {
                context.context = (String) parentContextMap.get("context");
            }if (parentContextMap.containsKey("job")) {
                context.job = (String) parentContextMap.get("job");
            }if (parentContextMap.containsKey("message")) {
                context.message = (String) parentContextMap.get("message");
            }if (parentContextMap.containsKey("moment")) {
                context.moment = (java.util.Date) parentContextMap.get("moment");
            }if (parentContextMap.containsKey("origen")) {
                context.origen = (String) parentContextMap.get("origen");
            }if (parentContextMap.containsKey("priority")) {
                context.priority = (Integer) parentContextMap.get("priority");
            }if (parentContextMap.containsKey("project")) {
                context.project = (String) parentContextMap.get("project");
            }if (parentContextMap.containsKey("server_destino")) {
                context.server_destino = (String) parentContextMap.get("server_destino");
            }if (parentContextMap.containsKey("server_origen")) {
                context.server_origen = (String) parentContextMap.get("server_origen");
            }if (parentContextMap.containsKey("service_name_destino")) {
                context.service_name_destino = (String) parentContextMap.get("service_name_destino");
            }if (parentContextMap.containsKey("service_name_origen")) {
                context.service_name_origen = (String) parentContextMap.get("service_name_origen");
            }if (parentContextMap.containsKey("user_destino")) {
                context.user_destino = (String) parentContextMap.get("user_destino");
            }if (parentContextMap.containsKey("user_origen")) {
                context.user_origen = (String) parentContextMap.get("user_origen");
            }if (parentContextMap.containsKey("Cerrada")) {
                context.Cerrada = (BigDecimal) parentContextMap.get("Cerrada");
            }if (parentContextMap.containsKey("Editada")) {
                context.Editada = (BigDecimal) parentContextMap.get("Editada");
            }if (parentContextMap.containsKey("Editando")) {
                context.Editando = (BigDecimal) parentContextMap.get("Editando");
            }if (parentContextMap.containsKey("Finalizada")) {
                context.Finalizada = (BigDecimal) parentContextMap.get("Finalizada");
            }if (parentContextMap.containsKey("Iniciada")) {
                context.Iniciada = (BigDecimal) parentContextMap.get("Iniciada");
            }if (parentContextMap.containsKey("Manual")) {
                context.Manual = (BigDecimal) parentContextMap.get("Manual");
            }if (parentContextMap.containsKey("SinInniciar")) {
                context.SinInniciar = (BigDecimal) parentContextMap.get("SinInniciar");
            }if (parentContextMap.containsKey("estActivo")) {
                context.estActivo = (BigDecimal) parentContextMap.get("estActivo");
            }if (parentContextMap.containsKey("estCancelado")) {
                context.estCancelado = (BigDecimal) parentContextMap.get("estCancelado");
            }if (parentContextMap.containsKey("estEnProceso")) {
                context.estEnProceso = (BigDecimal) parentContextMap.get("estEnProceso");
            }if (parentContextMap.containsKey("estErrorArchivo")) {
                context.estErrorArchivo = (BigDecimal) parentContextMap.get("estErrorArchivo");
            }if (parentContextMap.containsKey("estErrorProcesamiento")) {
                context.estErrorProcesamiento = (BigDecimal) parentContextMap.get("estErrorProcesamiento");
            }if (parentContextMap.containsKey("estInactivo")) {
                context.estInactivo = (BigDecimal) parentContextMap.get("estInactivo");
            }if (parentContextMap.containsKey("estPausado")) {
                context.estPausado = (BigDecimal) parentContextMap.get("estPausado");
            }if (parentContextMap.containsKey("estProcesado")) {
                context.estProcesado = (BigDecimal) parentContextMap.get("estProcesado");
            }if (parentContextMap.containsKey("EstValidado")) {
                context.EstValidado = (BigDecimal) parentContextMap.get("EstValidado");
            }if (parentContextMap.containsKey("archivoSalida")) {
                context.archivoSalida = (String) parentContextMap.get("archivoSalida");
            }if (parentContextMap.containsKey("BANDERA_EJECUCION")) {
                context.BANDERA_EJECUCION = (Integer) parentContextMap.get("BANDERA_EJECUCION");
            }if (parentContextMap.containsKey("DCARGUE_ID")) {
                context.DCARGUE_ID = (BigDecimal) parentContextMap.get("DCARGUE_ID");
            }if (parentContextMap.containsKey("DESTINO")) {
                context.DESTINO = (String) parentContextMap.get("DESTINO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("JOB_ID")) {
                context.JOB_ID = (BigDecimal) parentContextMap.get("JOB_ID");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RECEPCION_ID")) {
                context.RECEPCION_ID = (BigDecimal) parentContextMap.get("RECEPCION_ID");
            }if (parentContextMap.containsKey("TJOB")) {
                context.TJOB = (Integer) parentContextMap.get("TJOB");
            }if (parentContextMap.containsKey("EstadoArchivo")) {
                context.EstadoArchivo = (Integer) parentContextMap.get("EstadoArchivo");
            }if (parentContextMap.containsKey("Fauditoria")) {
                context.Fauditoria = (java.util.Date) parentContextMap.get("Fauditoria");
            }if (parentContextMap.containsKey("HAUDITORIA_ID")) {
                context.HAUDITORIA_ID = (BigDecimal) parentContextMap.get("HAUDITORIA_ID");
            }if (parentContextMap.containsKey("Nfactura")) {
                context.Nfactura = (String) parentContextMap.get("Nfactura");
            }if (parentContextMap.containsKey("Sprefijo")) {
                context.Sprefijo = (String) parentContextMap.get("Sprefijo");
            }if (parentContextMap.containsKey("SumaFactura")) {
                context.SumaFactura = (Double) parentContextMap.get("SumaFactura");
            }if (parentContextMap.containsKey("SumaGlosas")) {
                context.SumaGlosas = (Double) parentContextMap.get("SumaGlosas");
            }if (parentContextMap.containsKey("mail_Message")) {
                context.mail_Message = (String) parentContextMap.get("mail_Message");
            }if (parentContextMap.containsKey("mail_Password")) {
                context.mail_Password = (String) parentContextMap.get("mail_Password");
            }if (parentContextMap.containsKey("mail_SenderName")) {
                context.mail_SenderName = (String) parentContextMap.get("mail_SenderName");
            }if (parentContextMap.containsKey("mail_SMTP_Host")) {
                context.mail_SMTP_Host = (String) parentContextMap.get("mail_SMTP_Host");
            }if (parentContextMap.containsKey("mail_SMTP_Port")) {
                context.mail_SMTP_Port = (String) parentContextMap.get("mail_SMTP_Port");
            }if (parentContextMap.containsKey("mail_Subject")) {
                context.mail_Subject = (String) parentContextMap.get("mail_Subject");
            }if (parentContextMap.containsKey("mail_To")) {
                context.mail_To = (String) parentContextMap.get("mail_To");
            }if (parentContextMap.containsKey("mail_User")) {
                context.mail_User = (String) parentContextMap.get("mail_User");
            }if (parentContextMap.containsKey("AfiliacionDerechos")) {
                context.AfiliacionDerechos = (BigDecimal) parentContextMap.get("AfiliacionDerechos");
            }if (parentContextMap.containsKey("AfiliacionDerechosD")) {
                context.AfiliacionDerechosD = (String) parentContextMap.get("AfiliacionDerechosD");
            }if (parentContextMap.containsKey("AfiliacionInactiva")) {
                context.AfiliacionInactiva = (BigDecimal) parentContextMap.get("AfiliacionInactiva");
            }if (parentContextMap.containsKey("AfiliacionInactivaD")) {
                context.AfiliacionInactivaD = (String) parentContextMap.get("AfiliacionInactivaD");
            }if (parentContextMap.containsKey("AutorizacionCobrado")) {
                context.AutorizacionCobrado = (BigDecimal) parentContextMap.get("AutorizacionCobrado");
            }if (parentContextMap.containsKey("AutorizacionCobradoD")) {
                context.AutorizacionCobradoD = (String) parentContextMap.get("AutorizacionCobradoD");
            }if (parentContextMap.containsKey("AutorizacionCups")) {
                context.AutorizacionCups = (BigDecimal) parentContextMap.get("AutorizacionCups");
            }if (parentContextMap.containsKey("AutorizacionCupsD")) {
                context.AutorizacionCupsD = (String) parentContextMap.get("AutorizacionCupsD");
            }if (parentContextMap.containsKey("AutorizacionNoExiste")) {
                context.AutorizacionNoExiste = (BigDecimal) parentContextMap.get("AutorizacionNoExiste");
            }if (parentContextMap.containsKey("AutorizacionNoExisteD")) {
                context.AutorizacionNoExisteD = (String) parentContextMap.get("AutorizacionNoExisteD");
            }if (parentContextMap.containsKey("AutorizacionPersona")) {
                context.AutorizacionPersona = (BigDecimal) parentContextMap.get("AutorizacionPersona");
            }if (parentContextMap.containsKey("AutorizacionPersonaD")) {
                context.AutorizacionPersonaD = (String) parentContextMap.get("AutorizacionPersonaD");
            }if (parentContextMap.containsKey("AutorizacionPrestador")) {
                context.AutorizacionPrestador = (BigDecimal) parentContextMap.get("AutorizacionPrestador");
            }if (parentContextMap.containsKey("AutorizacionPrestadorD")) {
                context.AutorizacionPrestadorD = (String) parentContextMap.get("AutorizacionPrestadorD");
            }if (parentContextMap.containsKey("CantidadFormulada")) {
                context.CantidadFormulada = (BigDecimal) parentContextMap.get("CantidadFormulada");
            }if (parentContextMap.containsKey("CantidadFormuladaD")) {
                context.CantidadFormuladaD = (String) parentContextMap.get("CantidadFormuladaD");
            }if (parentContextMap.containsKey("FacturaAuditada")) {
                context.FacturaAuditada = (BigDecimal) parentContextMap.get("FacturaAuditada");
            }if (parentContextMap.containsKey("FacturaAuditadaD")) {
                context.FacturaAuditadaD = (String) parentContextMap.get("FacturaAuditadaD");
            }if (parentContextMap.containsKey("MedicamentoNoPactado")) {
                context.MedicamentoNoPactado = (BigDecimal) parentContextMap.get("MedicamentoNoPactado");
            }if (parentContextMap.containsKey("MedicamentoNoPactadoD")) {
                context.MedicamentoNoPactadoD = (String) parentContextMap.get("MedicamentoNoPactadoD");
            }if (parentContextMap.containsKey("PorcetajeConsumo")) {
                context.PorcetajeConsumo = (BigDecimal) parentContextMap.get("PorcetajeConsumo");
            }if (parentContextMap.containsKey("PorcetajeConsumoD")) {
                context.PorcetajeConsumoD = (String) parentContextMap.get("PorcetajeConsumoD");
            }if (parentContextMap.containsKey("SumaFacturas")) {
                context.SumaFacturas = (BigDecimal) parentContextMap.get("SumaFacturas");
            }if (parentContextMap.containsKey("SumaFacturasD")) {
                context.SumaFacturasD = (String) parentContextMap.get("SumaFacturasD");
            }if (parentContextMap.containsKey("TiempoEntrega")) {
                context.TiempoEntrega = (BigDecimal) parentContextMap.get("TiempoEntrega");
            }if (parentContextMap.containsKey("TiempoEntregaD")) {
                context.TiempoEntregaD = (String) parentContextMap.get("TiempoEntregaD");
            }if (parentContextMap.containsKey("ValorDiferente")) {
                context.ValorDiferente = (BigDecimal) parentContextMap.get("ValorDiferente");
            }if (parentContextMap.containsKey("ValorDiferenteD")) {
                context.ValorDiferenteD = (String) parentContextMap.get("ValorDiferenteD");
            }if (parentContextMap.containsKey("ValorNoPactado")) {
                context.ValorNoPactado = (BigDecimal) parentContextMap.get("ValorNoPactado");
            }if (parentContextMap.containsKey("ValorNoPactadoD")) {
                context.ValorNoPactadoD = (String) parentContextMap.get("ValorNoPactadoD");
            }if (parentContextMap.containsKey("VidaUtil")) {
                context.VidaUtil = (BigDecimal) parentContextMap.get("VidaUtil");
            }if (parentContextMap.containsKey("VidaUtilD")) {
                context.VidaUtilD = (String) parentContextMap.get("VidaUtilD");
            }if (parentContextMap.containsKey("AUDITORIA_ID")) {
                context.AUDITORIA_ID = (BigDecimal) parentContextMap.get("AUDITORIA_ID");
            }if (parentContextMap.containsKey("ETAPASNORMATIVIDAD_ID")) {
                context.ETAPASNORMATIVIDAD_ID = (BigDecimal) parentContextMap.get("ETAPASNORMATIVIDAD_ID");
            }if (parentContextMap.containsKey("FRADICADO")) {
                context.FRADICADO = (java.util.Date) parentContextMap.get("FRADICADO");
            }if (parentContextMap.containsKey("NORMATIVIDAD_ETAPA_ID")) {
                context.NORMATIVIDAD_ETAPA_ID = (BigDecimal) parentContextMap.get("NORMATIVIDAD_ETAPA_ID");
            }if (parentContextMap.containsKey("NORMATIVIDAD_GLOSA_ID")) {
                context.NORMATIVIDAD_GLOSA_ID = (BigDecimal) parentContextMap.get("NORMATIVIDAD_GLOSA_ID");
            }if (parentContextMap.containsKey("SUMATORIA")) {
                context.SUMATORIA = (Double) parentContextMap.get("SUMATORIA");
            }if (parentContextMap.containsKey("SUMATORIA_FACTURA")) {
                context.SUMATORIA_FACTURA = (Double) parentContextMap.get("SUMATORIA_FACTURA");
            }if (parentContextMap.containsKey("UORG_ID")) {
                context.UORG_ID = (BigDecimal) parentContextMap.get("UORG_ID");
            }if (parentContextMap.containsKey("USUARIOS_ID")) {
                context.USUARIOS_ID = (BigDecimal) parentContextMap.get("USUARIOS_ID");
            }if (parentContextMap.containsKey("VIDA_UTIL")) {
                context.VIDA_UTIL = (Integer) parentContextMap.get("VIDA_UTIL");
            }if (parentContextMap.containsKey("vFechaFinContrato")) {
                context.vFechaFinContrato = (java.util.Date) parentContextMap.get("vFechaFinContrato");
            }if (parentContextMap.containsKey("vFechaIniContrato")) {
                context.vFechaIniContrato = (java.util.Date) parentContextMap.get("vFechaIniContrato");
            }if (parentContextMap.containsKey("vIntermediacionDisp")) {
                context.vIntermediacionDisp = (BigDecimal) parentContextMap.get("vIntermediacionDisp");
            }if (parentContextMap.containsKey("vIntermediacionSum")) {
                context.vIntermediacionSum = (BigDecimal) parentContextMap.get("vIntermediacionSum");
            }if (parentContextMap.containsKey("vTipificacion")) {
                context.vTipificacion = (String) parentContextMap.get("vTipificacion");
            }if (parentContextMap.containsKey("vTipoArchivoSigla")) {
                context.vTipoArchivoSigla = (String) parentContextMap.get("vTipoArchivoSigla");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : CargueMedicamentos");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     2405710 characters generated by Talend Open Studio for ESB 
 *     on the November 1, 2024, 1:30:29 AM COT
 ************************************************************************************************/