// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio.fichafamiliar_1_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_13
	//import java.util.List;

	//the import part of tJava_3
	//import java.util.List;

	//the import part of tJava_5
	//import java.util.List;

	//the import part of tJava_10
	//import java.util.List;

	//the import part of tJava_11
	//import java.util.List;

	//the import part of tJava_12
	//import java.util.List;

	//the import part of tJavaRow_5
	//import java.util.List;

	//the import part of tJava_14
	//import java.util.List;

	//the import part of tJava_15
	//import java.util.List;

	//the import part of tJava_16
	//import java.util.List;

	//the import part of tJava_17
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJava_2
	//import java.util.List;

	//the import part of tJava_4
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJava_6
	//import java.util.List;

	//the import part of tJava_7
	//import java.util.List;

	//the import part of tJava_8
	//import java.util.List;

	//the import part of tJava_9
	//import java.util.List;

	//the import part of tJava_18
	//import java.util.List;

	//the import part of tJava_21
	//import java.util.List;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.FileOutputStream;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;


	//the import part of tJava_19
	//import java.util.List;

	//the import part of tJava_20
	//import java.util.List;

	//the import part of tJavaRow_7
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;

	//the import part of tJavaRow_4
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: FichaFamiliar Purpose: Inserta información de la ficha familiar en  BFICHA_FAMILIAR<br>
 * Description: Inserta la información de la ficha familiar desde la BD saludsis hacia la bodega en la tabla BFICHA_FAMILIAR
Actualización
Fecha 			Quién 				Que 
06/09/2018		Roger Prieto		cambia los joblets por incompatibilidad con la versión comunity <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status DEV
 */
public class FichaFamiliar implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	private Object[] multiThreadLockWrite = new Object[0];
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(COM_EPS_ID != null){
				
					this.setProperty("COM_EPS_ID", COM_EPS_ID.toString());
				
			}
			
			if(COM_FICHA_ID != null){
				
					this.setProperty("COM_FICHA_ID", COM_FICHA_ID.toString());
				
			}
			
			if(COM_FREGISTRO != null){
				
					String pattern_COM_FREGISTRO = "yyyy-MM-dd HH:mm:ss";
					String value_COM_FREGISTRO = "";
					String[] parts_COM_FREGISTRO = value_COM_FREGISTRO.split(";");
					if(parts_COM_FREGISTRO.length > 1){
						pattern_COM_FREGISTRO = parts_COM_FREGISTRO[0];
						this.setProperty("COM_FREGISTRO", pattern_COM_FREGISTRO + ";" + FormatterUtils.format_Date(COM_FREGISTRO, pattern_COM_FREGISTRO));
					}else{
						this.setProperty("COM_FREGISTRO", FormatterUtils.format_Date(COM_FREGISTRO, pattern_COM_FREGISTRO));
					}
				
			}
			
			if(COM_OPCION1 != null){
				
					this.setProperty("COM_OPCION1", COM_OPCION1.toString());
				
			}
			
			if(COM_OPCION2 != null){
				
					String pattern_COM_OPCION2 = "yyyy-MM-dd HH:mm:ss";
					String value_COM_OPCION2 = "";
					String[] parts_COM_OPCION2 = value_COM_OPCION2.split(";");
					if(parts_COM_OPCION2.length > 1){
						pattern_COM_OPCION2 = parts_COM_OPCION2[0];
						this.setProperty("COM_OPCION2", pattern_COM_OPCION2 + ";" + FormatterUtils.format_Date(COM_OPCION2, pattern_COM_OPCION2));
					}else{
						this.setProperty("COM_OPCION2", FormatterUtils.format_Date(COM_OPCION2, pattern_COM_OPCION2));
					}
				
			}
			
			if(COM_PERSONA_ID != null){
				
					this.setProperty("COM_PERSONA_ID", COM_PERSONA_ID.toString());
				
			}
			
			if(COM_RECOMENDACIONES != null){
				
					this.setProperty("COM_RECOMENDACIONES", COM_RECOMENDACIONES.toString());
				
			}
			
			if(COM_RESPUESTA != null){
				
					this.setProperty("COM_RESPUESTA", COM_RESPUESTA.toString());
				
			}
			
			if(COM_SIGLA != null){
				
					this.setProperty("COM_SIGLA", COM_SIGLA.toString());
				
			}
			
			if(COM_TPREGUNTAS_ID != null){
				
					this.setProperty("COM_TPREGUNTAS_ID", COM_TPREGUNTAS_ID.toString());
				
			}
			
			if(COM_TREGIMENSALUD_ID != null){
				
					this.setProperty("COM_TREGIMENSALUD_ID", COM_TREGIMENSALUD_ID.toString());
				
			}
			
			if(COM_TRESPUESTAS_ID != null){
				
					this.setProperty("COM_TRESPUESTAS_ID", COM_TRESPUESTAS_ID.toString());
				
			}
			
			if(COM_VPREDETERMINADO != null){
				
					this.setProperty("COM_VPREDETERMINADO", COM_VPREDETERMINADO.toString());
				
			}
			
			if(PER_EPS_ID != null){
				
					this.setProperty("PER_EPS_ID", PER_EPS_ID.toString());
				
			}
			
			if(PER_FICHA_ID != null){
				
					this.setProperty("PER_FICHA_ID", PER_FICHA_ID.toString());
				
			}
			
			if(PER_FREGISTRO != null){
				
					String pattern_PER_FREGISTRO = "yyyy-MM-dd HH:mm:ss";
					String value_PER_FREGISTRO = "";
					String[] parts_PER_FREGISTRO = value_PER_FREGISTRO.split(";");
					if(parts_PER_FREGISTRO.length > 1){
						pattern_PER_FREGISTRO = parts_PER_FREGISTRO[0];
						this.setProperty("PER_FREGISTRO", pattern_PER_FREGISTRO + ";" + FormatterUtils.format_Date(PER_FREGISTRO, pattern_PER_FREGISTRO));
					}else{
						this.setProperty("PER_FREGISTRO", FormatterUtils.format_Date(PER_FREGISTRO, pattern_PER_FREGISTRO));
					}
				
			}
			
			if(PER_OPCION1 != null){
				
					this.setProperty("PER_OPCION1", PER_OPCION1.toString());
				
			}
			
			if(PER_OPCION2 != null){
				
					String pattern_PER_OPCION2 = "yyyy-MM-dd HH:mm:ss";
					String value_PER_OPCION2 = "";
					String[] parts_PER_OPCION2 = value_PER_OPCION2.split(";");
					if(parts_PER_OPCION2.length > 1){
						pattern_PER_OPCION2 = parts_PER_OPCION2[0];
						this.setProperty("PER_OPCION2", pattern_PER_OPCION2 + ";" + FormatterUtils.format_Date(PER_OPCION2, pattern_PER_OPCION2));
					}else{
						this.setProperty("PER_OPCION2", FormatterUtils.format_Date(PER_OPCION2, pattern_PER_OPCION2));
					}
				
			}
			
			if(PER_PERSONA_ID != null){
				
					this.setProperty("PER_PERSONA_ID", PER_PERSONA_ID.toString());
				
			}
			
			if(PER_RECOMENDACIONES != null){
				
					this.setProperty("PER_RECOMENDACIONES", PER_RECOMENDACIONES.toString());
				
			}
			
			if(PER_RESPUESTA != null){
				
					this.setProperty("PER_RESPUESTA", PER_RESPUESTA.toString());
				
			}
			
			if(PER_SIGLA != null){
				
					this.setProperty("PER_SIGLA", PER_SIGLA.toString());
				
			}
			
			if(PER_TPREGUNTAS_ID != null){
				
					this.setProperty("PER_TPREGUNTAS_ID", PER_TPREGUNTAS_ID.toString());
				
			}
			
			if(PER_TREGIMENSALUD_ID != null){
				
					this.setProperty("PER_TREGIMENSALUD_ID", PER_TREGIMENSALUD_ID.toString());
				
			}
			
			if(PER_TRESPUESTAS_ID != null){
				
					this.setProperty("PER_TRESPUESTAS_ID", PER_TRESPUESTAS_ID.toString());
				
			}
			
			if(PER_VPREDETERMINADO != null){
				
					this.setProperty("PER_VPREDETERMINADO", PER_VPREDETERMINADO.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(CONDITION_PRINCIPAL != null){
				
					this.setProperty("CONDITION_PRINCIPAL", CONDITION_PRINCIPAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(LOGS_STAT != null){
				
					this.setProperty("LOGS_STAT", LOGS_STAT.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
			if(ABIERTA != null){
				
					this.setProperty("ABIERTA", ABIERTA.toString());
				
			}
			
			if(AREA != null){
				
					this.setProperty("AREA", AREA.toString());
				
			}
			
			if(COMBO != null){
				
					this.setProperty("COMBO", COMBO.toString());
				
			}
			
			if(COMBO_COMBO != null){
				
					this.setProperty("COMBO_COMBO", COMBO_COMBO.toString());
				
			}
			
			if(COMBO_NUMERICO != null){
				
					this.setProperty("COMBO_NUMERICO", COMBO_NUMERICO.toString());
				
			}
			
			if(COMBO_OTRO != null){
				
					this.setProperty("COMBO_OTRO", COMBO_OTRO.toString());
				
			}
			
			if(COMBO_TEXTO != null){
				
					this.setProperty("COMBO_TEXTO", COMBO_TEXTO.toString());
				
			}
			
			if(COMBO_TEXTO_FIJO != null){
				
					this.setProperty("COMBO_TEXTO_FIJO", COMBO_TEXTO_FIJO.toString());
				
			}
			
			if(FECHA_NORMAL != null){
				
					this.setProperty("FECHA_NORMAL", FECHA_NORMAL.toString());
				
			}
			
			if(MULTISELECT != null){
				
					this.setProperty("MULTISELECT", MULTISELECT.toString());
				
			}
			
			if(RANGO_NUMERICO != null){
				
					this.setProperty("RANGO_NUMERICO", RANGO_NUMERICO.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public BigDecimal COM_EPS_ID;
public BigDecimal getCOM_EPS_ID(){
	return this.COM_EPS_ID;
}
public BigDecimal COM_FICHA_ID;
public BigDecimal getCOM_FICHA_ID(){
	return this.COM_FICHA_ID;
}
public java.util.Date COM_FREGISTRO;
public java.util.Date getCOM_FREGISTRO(){
	return this.COM_FREGISTRO;
}
public String COM_OPCION1;
public String getCOM_OPCION1(){
	return this.COM_OPCION1;
}
public java.util.Date COM_OPCION2;
public java.util.Date getCOM_OPCION2(){
	return this.COM_OPCION2;
}
public BigDecimal COM_PERSONA_ID;
public BigDecimal getCOM_PERSONA_ID(){
	return this.COM_PERSONA_ID;
}
public String COM_RECOMENDACIONES;
public String getCOM_RECOMENDACIONES(){
	return this.COM_RECOMENDACIONES;
}
public String COM_RESPUESTA;
public String getCOM_RESPUESTA(){
	return this.COM_RESPUESTA;
}
public String COM_SIGLA;
public String getCOM_SIGLA(){
	return this.COM_SIGLA;
}
public BigDecimal COM_TPREGUNTAS_ID;
public BigDecimal getCOM_TPREGUNTAS_ID(){
	return this.COM_TPREGUNTAS_ID;
}
public BigDecimal COM_TREGIMENSALUD_ID;
public BigDecimal getCOM_TREGIMENSALUD_ID(){
	return this.COM_TREGIMENSALUD_ID;
}
public BigDecimal COM_TRESPUESTAS_ID;
public BigDecimal getCOM_TRESPUESTAS_ID(){
	return this.COM_TRESPUESTAS_ID;
}
public String COM_VPREDETERMINADO;
public String getCOM_VPREDETERMINADO(){
	return this.COM_VPREDETERMINADO;
}
public BigDecimal PER_EPS_ID;
public BigDecimal getPER_EPS_ID(){
	return this.PER_EPS_ID;
}
public BigDecimal PER_FICHA_ID;
public BigDecimal getPER_FICHA_ID(){
	return this.PER_FICHA_ID;
}
public java.util.Date PER_FREGISTRO;
public java.util.Date getPER_FREGISTRO(){
	return this.PER_FREGISTRO;
}
public String PER_OPCION1;
public String getPER_OPCION1(){
	return this.PER_OPCION1;
}
public java.util.Date PER_OPCION2;
public java.util.Date getPER_OPCION2(){
	return this.PER_OPCION2;
}
public BigDecimal PER_PERSONA_ID;
public BigDecimal getPER_PERSONA_ID(){
	return this.PER_PERSONA_ID;
}
public String PER_RECOMENDACIONES;
public String getPER_RECOMENDACIONES(){
	return this.PER_RECOMENDACIONES;
}
public String PER_RESPUESTA;
public String getPER_RESPUESTA(){
	return this.PER_RESPUESTA;
}
public String PER_SIGLA;
public String getPER_SIGLA(){
	return this.PER_SIGLA;
}
public BigDecimal PER_TPREGUNTAS_ID;
public BigDecimal getPER_TPREGUNTAS_ID(){
	return this.PER_TPREGUNTAS_ID;
}
public BigDecimal PER_TREGIMENSALUD_ID;
public BigDecimal getPER_TREGIMENSALUD_ID(){
	return this.PER_TREGIMENSALUD_ID;
}
public BigDecimal PER_TRESPUESTAS_ID;
public BigDecimal getPER_TRESPUESTAS_ID(){
	return this.PER_TRESPUESTAS_ID;
}
public String PER_VPREDETERMINADO;
public String getPER_VPREDETERMINADO(){
	return this.PER_VPREDETERMINADO;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String CONDITION_PRINCIPAL;
public String getCONDITION_PRINCIPAL(){
	return this.CONDITION_PRINCIPAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String LOGS_STAT;
public String getLOGS_STAT(){
	return this.LOGS_STAT;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
public BigDecimal ABIERTA;
public BigDecimal getABIERTA(){
	return this.ABIERTA;
}
public BigDecimal AREA;
public BigDecimal getAREA(){
	return this.AREA;
}
public BigDecimal COMBO;
public BigDecimal getCOMBO(){
	return this.COMBO;
}
public BigDecimal COMBO_COMBO;
public BigDecimal getCOMBO_COMBO(){
	return this.COMBO_COMBO;
}
public BigDecimal COMBO_NUMERICO;
public BigDecimal getCOMBO_NUMERICO(){
	return this.COMBO_NUMERICO;
}
public BigDecimal COMBO_OTRO;
public BigDecimal getCOMBO_OTRO(){
	return this.COMBO_OTRO;
}
public BigDecimal COMBO_TEXTO;
public BigDecimal getCOMBO_TEXTO(){
	return this.COMBO_TEXTO;
}
public BigDecimal COMBO_TEXTO_FIJO;
public BigDecimal getCOMBO_TEXTO_FIJO(){
	return this.COMBO_TEXTO_FIJO;
}
public BigDecimal FECHA_NORMAL;
public BigDecimal getFECHA_NORMAL(){
	return this.FECHA_NORMAL;
}
public BigDecimal MULTISELECT;
public BigDecimal getMULTISELECT(){
	return this.MULTISELECT;
}
public BigDecimal RANGO_NUMERICO;
public BigDecimal getRANGO_NUMERICO(){
	return this.RANGO_NUMERICO;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.2";
	private final String jobName = "FichaFamiliar";
	private final String projectName = "REP_INICIO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Object>());
		
	
		private final java.util.Map<String, Long> start_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Long> end_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Long>());
		private final java.util.Map<String, Boolean> ok_Hash = java.util.Collections.synchronizedMap(new java.util.HashMap<String, Boolean>());
		public  final java.util.List<String[]> globalBuffer = java.util.Collections.synchronizedList(new java.util.ArrayList<String[]>());
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_2 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				FichaFamiliar.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(FichaFamiliar.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_2.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_2Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_13_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_11_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_14_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_15_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_16_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_17_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void vFlowMeter_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_8_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_9_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_18_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPivotToColumnsDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
						try {
							
								if(this.execStat){
									runStat.updateStatOnConnection("OnComponentError1", 0, "error");
								}
							
							
								((java.util.Map)threadLocal.get()).put("errorCode", null);
								tJava_20Process(globalMap);
								if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
									((java.util.Map)threadLocal.get()).put("status", "end");
								}
								

						} catch (Exception e) {
							e.printStackTrace();
						}
						
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_19_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileDelete_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileDelete_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tJava_20_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void vFlowMeter_out4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tLogCatcher_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tPrejob_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row28_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row29_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_7_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tOracleInput_6_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row33_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tFileInputDelimited_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_5_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_tUnite_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_tUnite_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_2_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_2_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_2_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tDenormalize_1_DenormalizeOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tDenormalize_1_ArrayIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tDenormalize_1_ArrayIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tSortRow_1_SortOut_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tSortRow_1_SortIn_error(exception, errorComponent, globalMap);
						
						}
					
			public void tSortRow_1_SortIn_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_3_TMAP_OUT_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
							tMap_3_TMAP_IN_error(exception, errorComponent, globalMap);
						
						}
					
			public void tMap_3_TMAP_IN_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				((java.util.Map)threadLocal.get()).put("status", "failure");
				
					tHashInput_tUnite_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_13_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_11_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_14_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_15_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_16_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_17_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_6_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_7_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_8_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_9_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_18_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_5_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputDelimited_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_19_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileDelete_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_20_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_tUnite_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tHashInput_tUnite_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tOracleClose_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tOracleClose_2Process(globalMap);



/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk20", 0, "ok");
				}
				tJava_13Process(globalMap);



/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_13", false);
		start_Hash.put("tJava_13", System.currentTimeMillis());
		
	
	currentComponent="tJava_13";
	
	
		int tos_count_tJava_13 = 0;
		


context.FECHA_TERMINACION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Success";

System.out.println("  - End: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
System.out.println("+ Job " + context.ESTADO_EXEC);
 



/**
 * [tJava_13 begin ] stop
 */
	
	/**
	 * [tJava_13 main ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 


	tos_count_tJava_13++;

/**
 * [tJava_13 main ] stop
 */
	
	/**
	 * [tJava_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_begin ] stop
 */
	
	/**
	 * [tJava_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 process_data_end ] stop
 */
	
	/**
	 * [tJava_13 end ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 

ok_Hash.put("tJava_13", true);
end_Hash.put("tJava_13", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk21", 0, "ok");
				}
				tFixedFlowInput_4Process(globalMap);



/**
 * [tJava_13 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_13 finally ] start
	 */

	

	
	
	currentComponent="tJava_13";
	
	

 



/**
 * [tJava_13 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_13_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_INICIO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_FINAL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ESTADO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOBS");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_4", false);
		start_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_4";
	
	
		int tos_count_tFixedFlowInput_4 = 0;
		

	    for (int i_tFixedFlowInput_4 = 0 ; i_tFixedFlowInput_4 < 1 ; i_tFixedFlowInput_4++) {
	                	            	
    	            		row41.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row41.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row41.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row41.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row41.JOBS = context.JOB;
    	            	

 



/**
 * [tFixedFlowInput_4 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 


	tos_count_tFixedFlowInput_4++;

/**
 * [tFixedFlowInput_4 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row41.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.JOBS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());

                    }



 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_4 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

        }
        globalMap.put("tFixedFlowInput_4_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_4", true);
end_Hash.put("tFixedFlowInput_4", System.currentTimeMillis());




/**
 * [tFixedFlowInput_4 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_4 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_4";
	
	

 



/**
 * [tFixedFlowInput_4 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 150;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row3Struct row3 = new row3Struct();




	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashOutput_1 = null;
		String hashKey_tHashOutput_1 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_1)){
			    if(mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1) == null){
	      		    mf_tHashOutput_1.getResourceMap().put(hashKey_tHashOutput_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }else{
			    	tHashFile_tHashOutput_1 = mf_tHashOutput_1.getResourceMap().get(hashKey_tHashOutput_1);
			    }
			}
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement();

		    String dbquery_tOracleInput_1 = "SELECT ID, NOMBRE FROM GEN_TREGIMENSALUD WHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row3.ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row3.ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row3.NOMBRE = null;
							} else {
	                         		
        	row3.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 2, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					



    
		row3Struct oneRow_tHashOutput_1 = new row3Struct();
				
					oneRow_tHashOutput_1.ID = row3.ID;
					oneRow_tHashOutput_1.NOMBRE = row3.NOMBRE;
		
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_1:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_2Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 500;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.DESCRIPCION = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.DESCRIPCION,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement();

		    String dbquery_tOracleInput_2 = " SELECT ID, DESCRIPCION \nFROM AFI_EPS \nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row4.ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row4.ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row4.DESCRIPCION = null;
							} else {
	                         		
        	row4.DESCRIPCION = routines.system.JDBCUtil.getString(rs_tOracleInput_2, 2, false);
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					



    
		row4Struct oneRow_tHashOutput_2 = new row4Struct();
				
					oneRow_tHashOutput_2.ID = row4.ID;
					oneRow_tHashOutput_2.DESCRIPCION = row4.DESCRIPCION;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_2:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_11Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row25Struct implements routines.system.IPersistableRow<row25Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal TPREGUNTAS_ID;

				public BigDecimal getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row25Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row25Struct row25 = new row25Struct();




	
	/**
	 * [tHashOutput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_7", false);
		start_Hash.put("tHashOutput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row25");
					}
				
		int tos_count_tHashOutput_7 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct> tHashFile_tHashOutput_7 = null;
		String hashKey_tHashOutput_7 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_7";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_7)){
			    if(mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7) == null){
	      		    mf_tHashOutput_7.getResourceMap().put(hashKey_tHashOutput_7, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }else{
			    	tHashFile_tHashOutput_7 = mf_tHashOutput_7.getResourceMap().get(hashKey_tHashOutput_7);
			    }
			}
        int nb_line_tHashOutput_7 = 0;

 



/**
 * [tHashOutput_7 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement();

		    String dbquery_tOracleInput_11 = " SELECT GPR.ID, GPR.SIGLA, GPR.TPREGUNTAS_ID \nFROM GEN_PREGUNTAS GPR\nWHERE GPR.ESTREGISTRO_ID = 1 \nAND GPR.SIGLA LIK"
+"E 'FF%'\n ";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row25.ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row25.ID = rs_tOracleInput_11.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row25.SIGLA = null;
							} else {
	                         		
        	row25.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_11 < 3) {
								row25.TPREGUNTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(3) != null) {
						row25.TPREGUNTAS_ID = rs_tOracleInput_11.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_7 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row25"
						
						);
					}
					



    
		row25Struct oneRow_tHashOutput_7 = new row25Struct();
				
					oneRow_tHashOutput_7.ID = row25.ID;
					oneRow_tHashOutput_7.SIGLA = row25.SIGLA;
					oneRow_tHashOutput_7.TPREGUNTAS_ID = row25.TPREGUNTAS_ID;
		
        tHashFile_tHashOutput_7.put(oneRow_tHashOutput_7);
        nb_line_tHashOutput_7 ++;

 


	tos_count_tHashOutput_7++;

/**
 * [tHashOutput_7 main ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tHashOutput_7 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	
globalMap.put("tHashOutput_7_NB_LINE", nb_line_tHashOutput_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row25");
			  	}
			  	
 

ok_Hash.put("tHashOutput_7", true);
end_Hash.put("tHashOutput_7", System.currentTimeMillis());




/**
 * [tHashOutput_7 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_11:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk6", 0, "ok");
								} 
							
							tOracleInput_3Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tHashOutput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_7";
	
	

 



/**
 * [tHashOutput_7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal TPREGUNTAS_ID;

				public BigDecimal getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tHashOutput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_3", false);
		start_Hash.put("tHashOutput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tHashOutput_3 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashOutput_3 = null;
		String hashKey_tHashOutput_3 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_3";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_3)){
			    if(mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3) == null){
	      		    mf_tHashOutput_3.getResourceMap().put(hashKey_tHashOutput_3, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }else{
			    	tHashFile_tHashOutput_3 = mf_tHashOutput_3.getResourceMap().get(hashKey_tHashOutput_3);
			    }
			}
        int nb_line_tHashOutput_3 = 0;

 



/**
 * [tHashOutput_3 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement();

		    String dbquery_tOracleInput_3 = " SELECT GPR.ID, GPR.SIGLA, GPR.TPREGUNTAS_ID \nFROM GEN_PREGUNTAS GPR\nWHERE GPR.ESTREGISTRO_ID = 1 \nAND GPR.SIGLA LIK"
+"E 'FF%'\n ";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row5.ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row5.ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row5.SIGLA = null;
							} else {
	                         		
        	row5.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_3, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_3 < 3) {
								row5.TPREGUNTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(3) != null) {
						row5.TPREGUNTAS_ID = rs_tOracleInput_3.getBigDecimal(3);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_3 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					



    
		row5Struct oneRow_tHashOutput_3 = new row5Struct();
				
					oneRow_tHashOutput_3.ID = row5.ID;
					oneRow_tHashOutput_3.SIGLA = row5.SIGLA;
					oneRow_tHashOutput_3.TPREGUNTAS_ID = row5.TPREGUNTAS_ID;
		
        tHashFile_tHashOutput_3.put(oneRow_tHashOutput_3);
        nb_line_tHashOutput_3 ++;

 


	tos_count_tHashOutput_3++;

/**
 * [tHashOutput_3 main ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_3 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	
globalMap.put("tHashOutput_3_NB_LINE", nb_line_tHashOutput_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tHashOutput_3", true);
end_Hash.put("tHashOutput_3", System.currentTimeMillis());




/**
 * [tHashOutput_3 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_3:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk3", 0, "ok");
								} 
							
							tOracleInput_4Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_3";
	
	

 



/**
 * [tHashOutput_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String VPREDETERMINADO;

				public String getVPREDETERMINADO () {
					return this.VPREDETERMINADO;
				}

				public Boolean VPREDETERMINADOIsNullable(){
				    return false;
				}
				public Boolean VPREDETERMINADOIsKey(){
				    return false;
				}
				public Integer VPREDETERMINADOLength(){
				    return 100;
				}
				public Integer VPREDETERMINADOPrecision(){
				    return 0;
				}
				public String VPREDETERMINADODefault(){
				
					return null;
				
				}
				public String VPREDETERMINADOComment(){
				
				    return "";
				
				}
				public String VPREDETERMINADOPattern(){
				
					return "";
				
				}
				public String VPREDETERMINADOOriginalDbColumnName(){
				
					return "VPREDETERMINADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.VPREDETERMINADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.VPREDETERMINADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VPREDETERMINADO="+VPREDETERMINADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tHashOutput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_4", false);
		start_Hash.put("tHashOutput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tHashOutput_4 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct> tHashFile_tHashOutput_4 = null;
		String hashKey_tHashOutput_4 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_4";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_4)){
			    if(mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4) == null){
	      		    mf_tHashOutput_4.getResourceMap().put(hashKey_tHashOutput_4, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }else{
			    	tHashFile_tHashOutput_4 = mf_tHashOutput_4.getResourceMap().get(hashKey_tHashOutput_4);
			    }
			}
        int nb_line_tHashOutput_4 = 0;

 



/**
 * [tHashOutput_4 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT ID, VPREDETERMINADO\n FROM GEN_TRESPUESTAS \nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row6.ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row6.ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row6.VPREDETERMINADO = null;
							} else {
	                         		
        	row6.VPREDETERMINADO = routines.system.JDBCUtil.getString(rs_tOracleInput_4, 2, false);
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_4 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					



    
		row6Struct oneRow_tHashOutput_4 = new row6Struct();
				
					oneRow_tHashOutput_4.ID = row6.ID;
					oneRow_tHashOutput_4.VPREDETERMINADO = row6.VPREDETERMINADO;
		
        tHashFile_tHashOutput_4.put(oneRow_tHashOutput_4);
        nb_line_tHashOutput_4 ++;

 


	tos_count_tHashOutput_4++;

/**
 * [tHashOutput_4 main ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tHashOutput_4 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	
globalMap.put("tHashOutput_4_NB_LINE", nb_line_tHashOutput_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tHashOutput_4", true);
end_Hash.put("tHashOutput_4", System.currentTimeMillis());




/**
 * [tHashOutput_4 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_4:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk4", 0, "ok");
								} 
							
							tOracleInput_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tHashOutput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_4";
	
	

 



/**
 * [tHashOutput_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 50;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
					this.NOMBRE = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
					// String
				
						writeString(this.NOMBRE,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tJava_3 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement();

		    String dbquery_tOracleInput_5 = "SELECT ID, NOMBRE \nFROM GEN_TPREGUNTAS \nWHERE ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row7.ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row7.ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row7.NOMBRE = null;
							} else {
	                         		
        	row7.NOMBRE = routines.system.JDBCUtil.getString(rs_tOracleInput_5, 2, false);
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


    	            
            globalMap.put("row7.ID", row7.ID);
    	            
            globalMap.put("row7.NOMBRE", row7.NOMBRE);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tJava_3++;
	
	
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tJava_3);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_3", false);
		start_Hash.put("tJava_3", System.currentTimeMillis());
		
	
	currentComponent="tJava_3";
	
	
		int tos_count_tJava_3 = 0;
		


if (row7.NOMBRE.equals("COMBO")){
		context.COMBO = row7.ID;
	} else if (row7.NOMBRE.equals("COMBO_COMBO")){
		context.COMBO_COMBO = row7.ID;
	} else if (row7.NOMBRE.equals("COMBO_TEXTO")){
		context.COMBO_TEXTO = row7.ID;
	} else if (row7.NOMBRE.equals("MULTISELECT")){
		context.MULTISELECT = row7.ID;
	} else if (row7.NOMBRE.equals("COMBO_OTRO")){
		context.COMBO_OTRO = row7.ID;
	} else if (row7.NOMBRE.equals("RANGO_NUMERICO")){
		context.RANGO_NUMERICO = row7.ID;
	} else if (row7.NOMBRE.equals("COMBO_NUMERICO")){
		context.COMBO_NUMERICO = row7.ID;
	} else if (row7.NOMBRE.equals("FECHA_NORMAL")){
		context.FECHA_NORMAL = row7.ID;
	} else if (row7.NOMBRE.equals("ABIERTA")){
		context.ABIERTA = row7.ID;
	} else if (row7.NOMBRE.equals("COMBO_TEXTO_FIJO")){
		context.COMBO_TEXTO_FIJO = row7.ID;
	}
	


 



/**
 * [tJava_3 begin ] stop
 */
	
	/**
	 * [tJava_3 main ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 


	tos_count_tJava_3++;

/**
 * [tJava_3 main ] stop
 */
	
	/**
	 * [tJava_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_begin ] stop
 */
	
	/**
	 * [tJava_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 process_data_end ] stop
 */
	
	/**
	 * [tJava_3 end ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 

ok_Hash.put("tJava_3", true);
end_Hash.put("tJava_3", System.currentTimeMillis());




/**
 * [tJava_3 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tJava_3);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk7", 0, "ok");
								} 
							
							tJava_5Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tJava_3 finally ] start
	 */

	

	
	
	currentComponent="tJava_3";
	
	

 



/**
 * [tJava_3 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public void tJava_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_5", false);
		start_Hash.put("tJava_5", System.currentTimeMillis());
		
	
	currentComponent="tJava_5";
	
	
		int tos_count_tJava_5 = 0;
		





if (!context.ACTUALIZACION_TOTAL){

//context.FANTERIOR = TalendDate.formatDate("dd/MM/YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-60,"DD"));
context.CONDITION = "WHERE  FI.HFINALIZACION >= to_date('"+ context.FANTERIOR+"' ,'DD/MM/YYYY') ";
System.out.println( context.FANTERIOR);
System.out.println("Actualización diaria");
} else {
System.out.println("Actualización total");
context.CONDITION = " ";
}

 



/**
 * [tJava_5 begin ] stop
 */
	
	/**
	 * [tJava_5 main ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 


	tos_count_tJava_5++;

/**
 * [tJava_5 main ] stop
 */
	
	/**
	 * [tJava_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_begin ] stop
 */
	
	/**
	 * [tJava_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 process_data_end ] stop
 */
	
	/**
	 * [tJava_5 end ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 

ok_Hash.put("tJava_5", true);
end_Hash.put("tJava_5", System.currentTimeMillis());




/**
 * [tJava_5 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_5:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk10", 0, "ok");
								} 
							
							tOracleInput_6Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_5 finally ] start
	 */

	

	
	
	currentComponent="tJava_5";
	
	

 



/**
 * [tJava_5 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_5_SUBPROCESS_STATE", 1);
	}
	


public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public BigDecimal TRESPUESTAS_ID;

				public BigDecimal getTRESPUESTAS_ID () {
					return this.TRESPUESTAS_ID;
				}

				public Boolean TRESPUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean TRESPUESTAS_IDIsKey(){
				    return false;
				}
				public Integer TRESPUESTAS_IDLength(){
				    return 0;
				}
				public Integer TRESPUESTAS_IDPrecision(){
				    return 0;
				}
				public String TRESPUESTAS_IDDefault(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDComment(){
				
				    return "";
				
				}
				public String TRESPUESTAS_IDPattern(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDOriginalDbColumnName(){
				
					return "TRESPUESTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 500;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public java.util.Date OPCION2;

				public java.util.Date getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal TPREGUNTAS_ID;

				public BigDecimal getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				
			    public String VPREDETERMINADO;

				public String getVPREDETERMINADO () {
					return this.VPREDETERMINADO;
				}

				public Boolean VPREDETERMINADOIsNullable(){
				    return false;
				}
				public Boolean VPREDETERMINADOIsKey(){
				    return false;
				}
				public Integer VPREDETERMINADOLength(){
				    return 100;
				}
				public Integer VPREDETERMINADOPrecision(){
				    return 0;
				}
				public String VPREDETERMINADODefault(){
				
					return null;
				
				}
				public String VPREDETERMINADOComment(){
				
				    return "";
				
				}
				public String VPREDETERMINADOPattern(){
				
					return "";
				
				}
				public String VPREDETERMINADOOriginalDbColumnName(){
				
					return "VPREDETERMINADO";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.VPREDETERMINADO = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.VPREDETERMINADO = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPREGUNTAS_ID);
					
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPREGUNTAS_ID);
					
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",TRESPUESTAS_ID="+String.valueOf(TRESPUESTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+String.valueOf(OPCION2));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
		sb.append(",VPREDETERMINADO="+VPREDETERMINADO);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row13Struct implements routines.system.IPersistableRow<row13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public BigDecimal PREGUNTAS_ID;

				public BigDecimal getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public BigDecimal TRESPUESTAS_ID;

				public BigDecimal getTRESPUESTAS_ID () {
					return this.TRESPUESTAS_ID;
				}

				public Boolean TRESPUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean TRESPUESTAS_IDIsKey(){
				    return false;
				}
				public Integer TRESPUESTAS_IDLength(){
				    return 0;
				}
				public Integer TRESPUESTAS_IDPrecision(){
				    return 0;
				}
				public String TRESPUESTAS_IDDefault(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDComment(){
				
				    return "";
				
				}
				public String TRESPUESTAS_IDPattern(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDOriginalDbColumnName(){
				
					return "TRESPUESTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 500;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public java.util.Date OPCION2;

				public java.util.Date getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",TRESPUESTAS_ID="+String.valueOf(TRESPUESTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+String.valueOf(OPCION2));
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_6Struct implements routines.system.IPersistableRow<after_tOracleInput_6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public BigDecimal PREGUNTAS_ID;

				public BigDecimal getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public BigDecimal TRESPUESTAS_ID;

				public BigDecimal getTRESPUESTAS_ID () {
					return this.TRESPUESTAS_ID;
				}

				public Boolean TRESPUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean TRESPUESTAS_IDIsKey(){
				    return false;
				}
				public Integer TRESPUESTAS_IDLength(){
				    return 0;
				}
				public Integer TRESPUESTAS_IDPrecision(){
				    return 0;
				}
				public String TRESPUESTAS_IDDefault(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDComment(){
				
				    return "";
				
				}
				public String TRESPUESTAS_IDPattern(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDOriginalDbColumnName(){
				
					return "TRESPUESTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 500;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public java.util.Date OPCION2;

				public java.util.Date getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",TRESPUESTAS_ID="+String.valueOf(TRESPUESTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+String.valueOf(OPCION2));
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_6Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_3Process(globalMap);
		tHashInput_4Process(globalMap);

		row13Struct row13 = new row13Struct();
out2Struct out2 = new out2Struct();





	
	/**
	 * [tFlowToIterate_3 begin ] start
	 */

				
			int NB_ITERATE_tJava_10 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_3", false);
		start_Hash.put("tFlowToIterate_3", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tFlowToIterate_3 = 0;
		

int nb_line_tFlowToIterate_3 = 0;
int counter_tFlowToIterate_3 = 0;

 



/**
 * [tFlowToIterate_3 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement();

		    String dbquery_tOracleInput_6 = "SELECT GP.ID AS PERSONA_ID, \n       FI.ID AS FICHA_ID,\n       CF.TREGIMENSALUD_ID,\n       CF.EPS_ID, \n       FI.FRE"
+"GISTRO,\n       FR.PREGUNTAS_ID,\n       FR.TRESPUESTAS_ID,\n       NVL( FR.OPCION1, ' ' ) AS OPCION1,  \n       FR.OPCI"
+"ON2,\n	   NVL ( CF.RECOMENDACIONES, ' ') AS RECOMENDACIONES	             \n     FROM GEN_PERSONAS GP \n     INNER JOIN F"
+"FA_COMPOSICION_FAMILIAR CF ON CF.PERSONA_ID = GP.ID AND CF.ESTREGISTRO_ID = 1\n     INNER JOIN FFA_IDENTIFICACION FI ON "
+"FI.ID = CF.IDENTIFICACION_ID AND FI.ESTREGISTRO_ID = 1\n     INNER JOIN FFA_RESPUESTAS FR ON FR.IDENTIFICACION_ID = FI.I"
+"D AND FR.ESTREGISTRO_ID = 1 and fr.COMPOSICION_FAMILIAR_ID is null\n    "+context.CONDITION+" \nORDER BY FR.PREGUNTAS_ID";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row13.PERSONA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row13.PERSONA_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row13.FICHA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row13.FICHA_ID = rs_tOracleInput_6.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row13.TREGIMENSALUD_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(3) != null) {
						row13.TREGIMENSALUD_ID = rs_tOracleInput_6.getBigDecimal(3);
					} else {
				
						row13.TREGIMENSALUD_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 4) {
								row13.EPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(4) != null) {
						row13.EPS_ID = rs_tOracleInput_6.getBigDecimal(4);
					} else {
				
						row13.EPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 5) {
								row13.FREGISTRO = null;
							} else {
										
			row13.FREGISTRO = routines.system.JDBCUtil.getDate(rs_tOracleInput_6, 5);
		                    }
							if(colQtyInRs_tOracleInput_6 < 6) {
								row13.PREGUNTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(6) != null) {
						row13.PREGUNTAS_ID = rs_tOracleInput_6.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 7) {
								row13.TRESPUESTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(7) != null) {
						row13.TRESPUESTAS_ID = rs_tOracleInput_6.getBigDecimal(7);
					} else {
				
						row13.TRESPUESTAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 8) {
								row13.OPCION1 = null;
							} else {
	                         		
        	row13.OPCION1 = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_6 < 9) {
								row13.OPCION2 = null;
							} else {
										
			row13.OPCION2 = routines.system.JDBCUtil.getDate(rs_tOracleInput_6, 9);
		                    }
							if(colQtyInRs_tOracleInput_6 < 10) {
								row13.RECOMENDACIONES = null;
							} else {
	                         		
        	row13.RECOMENDACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 10, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row14Struct row14 = null;
					
						row15Struct row15 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row14HashKey.ID = row13.PREGUNTAS_ID ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row14.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_2 = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row15HashKey.ID = row13.TRESPUESTAS_ID ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row15.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow15 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow15 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row15 != null && tHash_Lookup_row15.hasNext()) || forceLooprow15) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row15'
									
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								
								if(!forceLooprow15) { // G 46
								
							
								 
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow15 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;

if(!rejectedInnerJoin_tMap_2 ) {

// # Output table : 'out2'
out2_tmp.PERSONA_ID = row13.PERSONA_ID ;
out2_tmp.FICHA_ID = row13.FICHA_ID ;
out2_tmp.TREGIMENSALUD_ID = row13.TREGIMENSALUD_ID ;
out2_tmp.EPS_ID = row13.EPS_ID ;
out2_tmp.FREGISTRO = row13.FREGISTRO ;
out2_tmp.TRESPUESTAS_ID = row13.TRESPUESTAS_ID ;
out2_tmp.OPCION1 = row13.OPCION1 ;
out2_tmp.OPCION2 = row13.OPCION2 ;
out2_tmp.SIGLA = row14.SIGLA ;
out2_tmp.TPREGUNTAS_ID = row14.TPREGUNTAS_ID ;
out2_tmp.VPREDETERMINADO = row15.VPREDETERMINADO ;
out2_tmp.RECOMENDACIONES = row13.RECOMENDACIONES ;
out2 = out2_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tFlowToIterate_3 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					


    	            
            globalMap.put("out2.PERSONA_ID", out2.PERSONA_ID);
    	            
            globalMap.put("out2.FICHA_ID", out2.FICHA_ID);
    	            
            globalMap.put("out2.TREGIMENSALUD_ID", out2.TREGIMENSALUD_ID);
    	            
            globalMap.put("out2.EPS_ID", out2.EPS_ID);
    	            
            globalMap.put("out2.FREGISTRO", out2.FREGISTRO);
    	            
            globalMap.put("out2.TRESPUESTAS_ID", out2.TRESPUESTAS_ID);
    	            
            globalMap.put("out2.OPCION1", out2.OPCION1);
    	            
            globalMap.put("out2.OPCION2", out2.OPCION2);
    	            
            globalMap.put("out2.SIGLA", out2.SIGLA);
    	            
            globalMap.put("out2.TPREGUNTAS_ID", out2.TPREGUNTAS_ID);
    	            
            globalMap.put("out2.VPREDETERMINADO", out2.VPREDETERMINADO);
    	            
            globalMap.put("out2.RECOMENDACIONES", out2.RECOMENDACIONES);
    	
 
	   nb_line_tFlowToIterate_3++;  
       counter_tFlowToIterate_3++;
       globalMap.put("tFlowToIterate_3_CURRENT_ITERATION", counter_tFlowToIterate_3);
 


	tos_count_tFlowToIterate_3++;

/**
 * [tFlowToIterate_3 main ] stop
 */
	
	/**
	 * [tFlowToIterate_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

 



/**
 * [tFlowToIterate_3 process_data_begin ] stop
 */
	NB_ITERATE_tJava_10++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("If17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk14", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk10", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If16", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row12", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If15", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If13", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If18", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row16", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate3", 1, "exec" + NB_ITERATE_tJava_10);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_10", false);
		start_Hash.put("tJava_10", System.currentTimeMillis());
		
	
	currentComponent="tJava_10";
	
	
		int tos_count_tJava_10 = 0;
		


context.PER_PERSONA_ID = out2.PERSONA_ID;
context.PER_FICHA_ID = out2.FICHA_ID;
context.PER_FREGISTRO = out2.FREGISTRO;
context.PER_EPS_ID = out2.EPS_ID;
context.PER_TREGIMENSALUD_ID = out2.TREGIMENSALUD_ID;
context.PER_TPREGUNTAS_ID = out2.TPREGUNTAS_ID;
context.PER_SIGLA = out2.SIGLA;
context.PER_OPCION1 = out2.OPCION1;
context.PER_OPCION2 = out2.OPCION2;
context.PER_TRESPUESTAS_ID = out2.TRESPUESTAS_ID;
context.PER_VPREDETERMINADO = out2.VPREDETERMINADO;
context.PER_RECOMENDACIONES = out2.RECOMENDACIONES;


 



/**
 * [tJava_10 begin ] stop
 */
	
	/**
	 * [tJava_10 main ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 


	tos_count_tJava_10++;

/**
 * [tJava_10 main ] stop
 */
	
	/**
	 * [tJava_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_begin ] stop
 */
	
	/**
	 * [tJava_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 process_data_end ] stop
 */
	
	/**
	 * [tJava_10 end ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 

ok_Hash.put("tJava_10", true);
end_Hash.put("tJava_10", System.currentTimeMillis());

   			if (context.PER_TPREGUNTAS_ID.compareTo(context.COMBO)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If11", 0, "true");
					}
				tJava_11Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If11", 0, "false");
					}   	 
   				}
   			if (context.PER_TPREGUNTAS_ID.compareTo(context.COMBO_COMBO)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If12", 0, "true");
					}
				tJava_12Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If12", 0, "false");
					}   	 
   				}
   			if (context.PER_TPREGUNTAS_ID.compareTo(context.COMBO_TEXTO)== 0 || context.PER_TPREGUNTAS_ID.compareTo(context.COMBO_OTRO)== 0 || context.PER_TPREGUNTAS_ID.compareTo(context.COMBO_NUMERICO)== 0 ||
context.PER_TPREGUNTAS_ID.compareTo(context.COMBO_TEXTO_FIJO)== 0
) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If14", 0, "true");
					}
				tJava_14Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If14", 0, "false");
					}   	 
   				}
   			if (context.PER_TPREGUNTAS_ID.compareTo(context.MULTISELECT)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If15", 0, "true");
					}
				tJava_15Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If15", 0, "false");
					}   	 
   				}
   			if (context.PER_TPREGUNTAS_ID.compareTo(context.RANGO_NUMERICO)== 0 || context.PER_TPREGUNTAS_ID.compareTo(context.ABIERTA)== 0 || 
context.PER_TPREGUNTAS_ID.compareTo(context.AREA)== 0 ) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If16", 0, "true");
					}
				tJava_16Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If16", 0, "false");
					}   	 
   				}
   			if (context.PER_TPREGUNTAS_ID.compareTo(context.FECHA_NORMAL)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If17", 0, "true");
					}
				tJava_17Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If17", 0, "false");
					}   	 
   				}



/**
 * [tJava_10 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate3", 2, "exec" + NB_ITERATE_tJava_10);
						}				
					




	
	/**
	 * [tFlowToIterate_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

 



/**
 * [tFlowToIterate_3 process_data_end ] stop
 */

} // End of branch "out2"



	
		} // close loop of lookup 'row15' // G_TM_M_043
	
	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tFlowToIterate_3 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

globalMap.put("tFlowToIterate_3_NB_LINE",nb_line_tFlowToIterate_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_3", true);
end_Hash.put("tFlowToIterate_3", System.currentTimeMillis());




/**
 * [tFlowToIterate_3 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_6:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk11", 0, "ok");
								} 
							
							tOracleInput_7Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_3 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_3";
	
	

 



/**
 * [tFlowToIterate_3 finally ] stop
 */

	
	/**
	 * [tJava_10 finally ] start
	 */

	

	
	
	currentComponent="tJava_10";
	
	

 



/**
 * [tJava_10 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_11", false);
		start_Hash.put("tJava_11", System.currentTimeMillis());
		
	
	currentComponent="tJava_11";
	
	
		int tos_count_tJava_11 = 0;
		


if (context.PER_TRESPUESTAS_ID == null){
context.PER_RESPUESTA = context.PER_OPCION1;
} else {
context.PER_RESPUESTA = context.PER_VPREDETERMINADO;
}



 



/**
 * [tJava_11 begin ] stop
 */
	
	/**
	 * [tJava_11 main ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 


	tos_count_tJava_11++;

/**
 * [tJava_11 main ] stop
 */
	
	/**
	 * [tJava_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_begin ] stop
 */
	
	/**
	 * [tJava_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 process_data_end ] stop
 */
	
	/**
	 * [tJava_11 end ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 

ok_Hash.put("tJava_11", true);
end_Hash.put("tJava_11", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk11", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_11 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_11 finally ] start
	 */

	

	
	
	currentComponent="tJava_11";
	
	

 



/**
 * [tJava_11 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_11_SUBPROCESS_STATE", 1);
	}
	


public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return null;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return null;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return null;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();




	
	/**
	 * [tHashOutput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_5", false);
		start_Hash.put("tHashOutput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tHashOutput_5 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct> tHashFile_tHashOutput_5 = null;
		String hashKey_tHashOutput_5 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_5";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_5)){
			    if(mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5) == null){
	      		    mf_tHashOutput_5.getResourceMap().put(hashKey_tHashOutput_5, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }else{
			    	tHashFile_tHashOutput_5 = mf_tHashOutput_5.getResourceMap().get(hashKey_tHashOutput_5);
			    }
			}
        int nb_line_tHashOutput_5 = 0;

 



/**
 * [tHashOutput_5 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_3", false);
		start_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_3";
	
	
		int tos_count_tFixedFlowInput_3 = 0;
		

	    for (int i_tFixedFlowInput_3 = 0 ; i_tFixedFlowInput_3 < 1 ; i_tFixedFlowInput_3++) {
	                	            	
    	            		row12.PERSONA_ID = context.PER_PERSONA_ID;
    	            	        	            	
    	            		row12.FICHA_ID = context.PER_FICHA_ID;
    	            	        	            	
    	            		row12.TREGIMENSALUD_ID = context.PER_TREGIMENSALUD_ID;
    	            	        	            	
    	            		row12.EPS_ID = context.PER_EPS_ID;
    	            	        	            	
    	            		row12.FREGISTRO = context.PER_FREGISTRO;
    	            	        	            	
    	            		row12.SIGLA = context.PER_SIGLA;
    	            	        	            	
    	            		row12.RESPUESTAS = context.PER_RESPUESTA;
    	            	        	            	
    	            		row12.RECOMENDACIONES = context.PER_RECOMENDACIONES;
    	            	

 



/**
 * [tFixedFlowInput_3 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 


	tos_count_tFixedFlowInput_3++;

/**
 * [tFixedFlowInput_3 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_5 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					



    
		row12Struct oneRow_tHashOutput_5 = new row12Struct();
				
					oneRow_tHashOutput_5.PERSONA_ID = row12.PERSONA_ID;
					oneRow_tHashOutput_5.FICHA_ID = row12.FICHA_ID;
					oneRow_tHashOutput_5.TREGIMENSALUD_ID = row12.TREGIMENSALUD_ID;
					oneRow_tHashOutput_5.EPS_ID = row12.EPS_ID;
					oneRow_tHashOutput_5.FREGISTRO = row12.FREGISTRO;
					oneRow_tHashOutput_5.SIGLA = row12.SIGLA;
					oneRow_tHashOutput_5.RESPUESTAS = row12.RESPUESTAS;
					oneRow_tHashOutput_5.RECOMENDACIONES = row12.RECOMENDACIONES;
		
        tHashFile_tHashOutput_5.put(oneRow_tHashOutput_5);
        nb_line_tHashOutput_5 ++;

 


	tos_count_tHashOutput_5++;

/**
 * [tHashOutput_5 main ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_3 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

        }
        globalMap.put("tFixedFlowInput_3_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_3", true);
end_Hash.put("tFixedFlowInput_3", System.currentTimeMillis());




/**
 * [tFixedFlowInput_3 end ] stop
 */

	
	/**
	 * [tHashOutput_5 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	
globalMap.put("tHashOutput_5_NB_LINE", nb_line_tHashOutput_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tHashOutput_5", true);
end_Hash.put("tHashOutput_5", System.currentTimeMillis());




/**
 * [tHashOutput_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_3 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_3";
	
	

 



/**
 * [tFixedFlowInput_3 finally ] stop
 */

	
	/**
	 * [tHashOutput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_5";
	
	

 



/**
 * [tHashOutput_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_3_SUBPROCESS_STATE", 1);
	}
	


public void tJava_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_12", false);
		start_Hash.put("tJava_12", System.currentTimeMillis());
		
	
	currentComponent="tJava_12";
	
	
		int tos_count_tJava_12 = 0;
		


if (context.PER_TRESPUESTAS_ID == null){
context.PER_RESPUESTA = context.PER_OPCION1;
}

 



/**
 * [tJava_12 begin ] stop
 */
	
	/**
	 * [tJava_12 main ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 


	tos_count_tJava_12++;

/**
 * [tJava_12 main ] stop
 */
	
	/**
	 * [tJava_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_begin ] stop
 */
	
	/**
	 * [tJava_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 process_data_end ] stop
 */
	
	/**
	 * [tJava_12 end ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 

ok_Hash.put("tJava_12", true);
end_Hash.put("tJava_12", System.currentTimeMillis());

   			if (context.PER_TRESPUESTAS_ID != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If13", 0, "true");
					}
				tOracleInput_9Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If13", 0, "false");
					}   	 
   				}
   			if (context.PER_TRESPUESTAS_ID == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If18", 0, "true");
					}
				tFixedFlowInput_3Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If18", 0, "false");
					}   	 
   				}



/**
 * [tJava_12 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_12 finally ] start
	 */

	

	
	
	currentComponent="tJava_12";
	
	

 



/**
 * [tJava_12 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_12_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public String VPREDETERMINADO;

				public String getVPREDETERMINADO () {
					return this.VPREDETERMINADO;
				}

				public Boolean VPREDETERMINADOIsNullable(){
				    return false;
				}
				public Boolean VPREDETERMINADOIsKey(){
				    return false;
				}
				public Integer VPREDETERMINADOLength(){
				    return 0;
				}
				public Integer VPREDETERMINADOPrecision(){
				    return 0;
				}
				public String VPREDETERMINADODefault(){
				
					return null;
				
				}
				public String VPREDETERMINADOComment(){
				
				    return "";
				
				}
				public String VPREDETERMINADOPattern(){
				
					return "";
				
				}
				public String VPREDETERMINADOOriginalDbColumnName(){
				
					return "VPREDETERMINADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.VPREDETERMINADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.VPREDETERMINADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VPREDETERMINADO="+VPREDETERMINADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tJavaRow_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_5", false);
		start_Hash.put("tJavaRow_5", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tJavaRow_5 = 0;
		

int nb_line_tJavaRow_5 = 0;

 



/**
 * [tJavaRow_5 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement();

		    String dbquery_tOracleInput_9 = "SELECT NVL( GTR.VPREDETERMINADO,' ') AS VPREDETERMINADO FROM GEN_TRESPUESTAS  WHERE  ID = "+ context.PER_OPCION1;
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row16.VPREDETERMINADO = null;
							} else {
	                         		
        	row16.VPREDETERMINADO = routines.system.JDBCUtil.getString(rs_tOracleInput_9, 1, false);
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_5 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					

    if (Utils.empty(row16.VPREDETERMINADO) == true  ){
context.PER_RESPUESTA = context.PER_VPREDETERMINADO;
} else {
context.PER_RESPUESTA = context.PER_VPREDETERMINADO +", "+ row16.VPREDETERMINADO;
}



    nb_line_tJavaRow_5++;   

 


	tos_count_tJavaRow_5++;

/**
 * [tJavaRow_5 main ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tJavaRow_5 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

globalMap.put("tJavaRow_5_NB_LINE",nb_line_tJavaRow_5);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tJavaRow_5", true);
end_Hash.put("tJavaRow_5", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk10", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJavaRow_5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tJavaRow_5 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_5";
	
	

 



/**
 * [tJavaRow_5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public void tJava_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_14", false);
		start_Hash.put("tJava_14", System.currentTimeMillis());
		
	
	currentComponent="tJava_14";
	
	
		int tos_count_tJava_14 = 0;
		


if (context.PER_TRESPUESTAS_ID == null){
context.PER_RESPUESTA = context.PER_OPCION1;
} else if (Utils.empty(context.PER_OPCION1) == true  ){
context.PER_RESPUESTA = context.PER_VPREDETERMINADO;
} else {
context.PER_RESPUESTA = context.PER_VPREDETERMINADO +", "+ context.PER_OPCION1;
}

 



/**
 * [tJava_14 begin ] stop
 */
	
	/**
	 * [tJava_14 main ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 


	tos_count_tJava_14++;

/**
 * [tJava_14 main ] stop
 */
	
	/**
	 * [tJava_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 



/**
 * [tJava_14 process_data_begin ] stop
 */
	
	/**
	 * [tJava_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 



/**
 * [tJava_14 process_data_end ] stop
 */
	
	/**
	 * [tJava_14 end ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 

ok_Hash.put("tJava_14", true);
end_Hash.put("tJava_14", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk12", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_14 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_14 finally ] start
	 */

	

	
	
	currentComponent="tJava_14";
	
	

 



/**
 * [tJava_14 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_14_SUBPROCESS_STATE", 1);
	}
	


public void tJava_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_15", false);
		start_Hash.put("tJava_15", System.currentTimeMillis());
		
	
	currentComponent="tJava_15";
	
	
		int tos_count_tJava_15 = 0;
		


if (Utils.empty(context.PER_OPCION1) == true  ){
context.PER_RESPUESTA = context.PER_VPREDETERMINADO;
} else {
context.PER_RESPUESTA = context.PER_VPREDETERMINADO +", "+ context.PER_OPCION1;
}

 



/**
 * [tJava_15 begin ] stop
 */
	
	/**
	 * [tJava_15 main ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 


	tos_count_tJava_15++;

/**
 * [tJava_15 main ] stop
 */
	
	/**
	 * [tJava_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 



/**
 * [tJava_15 process_data_begin ] stop
 */
	
	/**
	 * [tJava_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 



/**
 * [tJava_15 process_data_end ] stop
 */
	
	/**
	 * [tJava_15 end ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 

ok_Hash.put("tJava_15", true);
end_Hash.put("tJava_15", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk13", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_15 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_15 finally ] start
	 */

	

	
	
	currentComponent="tJava_15";
	
	

 



/**
 * [tJava_15 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_15_SUBPROCESS_STATE", 1);
	}
	


public void tJava_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_16", false);
		start_Hash.put("tJava_16", System.currentTimeMillis());
		
	
	currentComponent="tJava_16";
	
	
		int tos_count_tJava_16 = 0;
		


context.PER_RESPUESTA = context.PER_OPCION1;



 



/**
 * [tJava_16 begin ] stop
 */
	
	/**
	 * [tJava_16 main ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 


	tos_count_tJava_16++;

/**
 * [tJava_16 main ] stop
 */
	
	/**
	 * [tJava_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 



/**
 * [tJava_16 process_data_begin ] stop
 */
	
	/**
	 * [tJava_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 



/**
 * [tJava_16 process_data_end ] stop
 */
	
	/**
	 * [tJava_16 end ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 

ok_Hash.put("tJava_16", true);
end_Hash.put("tJava_16", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk14", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_16 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_16 finally ] start
	 */

	

	
	
	currentComponent="tJava_16";
	
	

 



/**
 * [tJava_16 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_16_SUBPROCESS_STATE", 1);
	}
	


public void tJava_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_17", false);
		start_Hash.put("tJava_17", System.currentTimeMillis());
		
	
	currentComponent="tJava_17";
	
	
		int tos_count_tJava_17 = 0;
		


context.PER_RESPUESTA = TalendDate.formatDate("dd/MM/yyyy", context.PER_OPCION2);

 



/**
 * [tJava_17 begin ] stop
 */
	
	/**
	 * [tJava_17 main ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 


	tos_count_tJava_17++;

/**
 * [tJava_17 main ] stop
 */
	
	/**
	 * [tJava_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 



/**
 * [tJava_17 process_data_begin ] stop
 */
	
	/**
	 * [tJava_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 



/**
 * [tJava_17 process_data_end ] stop
 */
	
	/**
	 * [tJava_17 end ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 

ok_Hash.put("tJava_17", true);
end_Hash.put("tJava_17", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk15", 0, "ok");
				}
				tFixedFlowInput_3Process(globalMap);



/**
 * [tJava_17 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_17 finally ] start
	 */

	

	
	
	currentComponent="tJava_17";
	
	

 



/**
 * [tJava_17 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_17_SUBPROCESS_STATE", 1);
	}
	


public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public BigDecimal TRESPUESTAS_ID;

				public BigDecimal getTRESPUESTAS_ID () {
					return this.TRESPUESTAS_ID;
				}

				public Boolean TRESPUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean TRESPUESTAS_IDIsKey(){
				    return false;
				}
				public Integer TRESPUESTAS_IDLength(){
				    return 0;
				}
				public Integer TRESPUESTAS_IDPrecision(){
				    return 0;
				}
				public String TRESPUESTAS_IDDefault(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDComment(){
				
				    return "";
				
				}
				public String TRESPUESTAS_IDPattern(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDOriginalDbColumnName(){
				
					return "TRESPUESTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 500;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public java.util.Date OPCION2;

				public java.util.Date getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal TPREGUNTAS_ID;

				public BigDecimal getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				
			    public String VPREDETERMINADO;

				public String getVPREDETERMINADO () {
					return this.VPREDETERMINADO;
				}

				public Boolean VPREDETERMINADOIsNullable(){
				    return false;
				}
				public Boolean VPREDETERMINADOIsKey(){
				    return false;
				}
				public Integer VPREDETERMINADOLength(){
				    return 100;
				}
				public Integer VPREDETERMINADOPrecision(){
				    return 0;
				}
				public String VPREDETERMINADODefault(){
				
					return null;
				
				}
				public String VPREDETERMINADOComment(){
				
				    return "";
				
				}
				public String VPREDETERMINADOPattern(){
				
					return "";
				
				}
				public String VPREDETERMINADOOriginalDbColumnName(){
				
					return "VPREDETERMINADO";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.VPREDETERMINADO = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.SIGLA = readString(dis);
					
						this.TPREGUNTAS_ID = (BigDecimal) dis.readObject();
					
					this.VPREDETERMINADO = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TPREGUNTAS_ID);
					
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TPREGUNTAS_ID);
					
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",TRESPUESTAS_ID="+String.valueOf(TRESPUESTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+String.valueOf(OPCION2));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
		sb.append(",VPREDETERMINADO="+VPREDETERMINADO);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row8Struct implements routines.system.IPersistableRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public BigDecimal PREGUNTAS_ID;

				public BigDecimal getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public BigDecimal TRESPUESTAS_ID;

				public BigDecimal getTRESPUESTAS_ID () {
					return this.TRESPUESTAS_ID;
				}

				public Boolean TRESPUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean TRESPUESTAS_IDIsKey(){
				    return false;
				}
				public Integer TRESPUESTAS_IDLength(){
				    return 0;
				}
				public Integer TRESPUESTAS_IDPrecision(){
				    return 0;
				}
				public String TRESPUESTAS_IDDefault(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDComment(){
				
				    return "";
				
				}
				public String TRESPUESTAS_IDPattern(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDOriginalDbColumnName(){
				
					return "TRESPUESTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 500;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public java.util.Date OPCION2;

				public java.util.Date getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",TRESPUESTAS_ID="+String.valueOf(TRESPUESTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+String.valueOf(OPCION2));
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_7Struct implements routines.system.IPersistableRow<after_tOracleInput_7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public BigDecimal PREGUNTAS_ID;

				public BigDecimal getPREGUNTAS_ID () {
					return this.PREGUNTAS_ID;
				}

				public Boolean PREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean PREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer PREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer PREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String PREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String PREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String PREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String PREGUNTAS_IDOriginalDbColumnName(){
				
					return "PREGUNTAS_ID";
				
				}

				
			    public BigDecimal TRESPUESTAS_ID;

				public BigDecimal getTRESPUESTAS_ID () {
					return this.TRESPUESTAS_ID;
				}

				public Boolean TRESPUESTAS_IDIsNullable(){
				    return true;
				}
				public Boolean TRESPUESTAS_IDIsKey(){
				    return false;
				}
				public Integer TRESPUESTAS_IDLength(){
				    return 0;
				}
				public Integer TRESPUESTAS_IDPrecision(){
				    return 0;
				}
				public String TRESPUESTAS_IDDefault(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDComment(){
				
				    return "";
				
				}
				public String TRESPUESTAS_IDPattern(){
				
					return "";
				
				}
				public String TRESPUESTAS_IDOriginalDbColumnName(){
				
					return "TRESPUESTAS_ID";
				
				}

				
			    public String OPCION1;

				public String getOPCION1 () {
					return this.OPCION1;
				}

				public Boolean OPCION1IsNullable(){
				    return true;
				}
				public Boolean OPCION1IsKey(){
				    return false;
				}
				public Integer OPCION1Length(){
				    return 500;
				}
				public Integer OPCION1Precision(){
				    return 0;
				}
				public String OPCION1Default(){
				
					return null;
				
				}
				public String OPCION1Comment(){
				
				    return "";
				
				}
				public String OPCION1Pattern(){
				
					return "";
				
				}
				public String OPCION1OriginalDbColumnName(){
				
					return "OPCION1";
				
				}

				
			    public java.util.Date OPCION2;

				public java.util.Date getOPCION2 () {
					return this.OPCION2;
				}

				public Boolean OPCION2IsNullable(){
				    return true;
				}
				public Boolean OPCION2IsKey(){
				    return false;
				}
				public Integer OPCION2Length(){
				    return 0;
				}
				public Integer OPCION2Precision(){
				    return 0;
				}
				public String OPCION2Default(){
				
					return null;
				
				}
				public String OPCION2Comment(){
				
				    return "";
				
				}
				public String OPCION2Pattern(){
				
					return "";
				
				}
				public String OPCION2OriginalDbColumnName(){
				
					return "OPCION2";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 4000;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
						this.PREGUNTAS_ID = (BigDecimal) dis.readObject();
					
						this.TRESPUESTAS_ID = (BigDecimal) dis.readObject();
					
					this.OPCION1 = readString(dis);
					
					this.OPCION2 = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PREGUNTAS_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TRESPUESTAS_ID);
					
					// String
				
						writeString(this.OPCION1,dos);
					
					// java.util.Date
				
						writeDate(this.OPCION2,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",PREGUNTAS_ID="+String.valueOf(PREGUNTAS_ID));
		sb.append(",TRESPUESTAS_ID="+String.valueOf(TRESPUESTAS_ID));
		sb.append(",OPCION1="+OPCION1);
		sb.append(",OPCION2="+String.valueOf(OPCION2));
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_7Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_2Process(globalMap);
		tHashInput_1Process(globalMap);

		row8Struct row8 = new row8Struct();
out1Struct out1 = new out1Struct();





	
	/**
	 * [tFlowToIterate_2 begin ] start
	 */

				
			int NB_ITERATE_tJava_1 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_2", false);
		start_Hash.put("tFlowToIterate_2", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tFlowToIterate_2 = 0;
		

int nb_line_tFlowToIterate_2 = 0;
int counter_tFlowToIterate_2 = 0;

 



/**
 * [tFlowToIterate_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement();

		    String dbquery_tOracleInput_7 = "SELECT GP.ID AS PERSONA_ID, \n       FI.ID AS FICHA_ID,\n       CF.TREGIMENSALUD_ID,\n       CF.EPS_ID, \n       FI.FRE"
+"GISTRO,\n       FR.PREGUNTAS_ID,\n       FR.TRESPUESTAS_ID,\n       NVL( FR.OPCION1, ' ' ) AS OPCION1,  \n       FR.OPCI"
+"ON2,\n	   NVL ( CF.RECOMENDACIONES, ' ') AS RECOMENDACIONES	             \n     FROM GEN_PERSONAS GP \n     INNER JOIN F"
+"FA_COMPOSICION_FAMILIAR CF ON CF.PERSONA_ID = GP.ID AND CF.ESTREGISTRO_ID = 1\n     INNER JOIN FFA_IDENTIFICACION FI ON "
+"FI.ID = CF.IDENTIFICACION_ID AND FI.ESTREGISTRO_ID = 1\n     INNER JOIN FFA_RESPUESTAS FR ON FR.IDENTIFICACION_ID = FI.I"
+"D AND FR.ESTREGISTRO_ID = 1 AND Fr.Composicion_Familiar_Id = CF.ID \n      "+context.CONDITION+" \nORDER BY FR.PREGUNTAS_ID";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row8.PERSONA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row8.PERSONA_ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row8.FICHA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(2) != null) {
						row8.FICHA_ID = rs_tOracleInput_7.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row8.TREGIMENSALUD_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(3) != null) {
						row8.TREGIMENSALUD_ID = rs_tOracleInput_7.getBigDecimal(3);
					} else {
				
						row8.TREGIMENSALUD_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row8.EPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(4) != null) {
						row8.EPS_ID = rs_tOracleInput_7.getBigDecimal(4);
					} else {
				
						row8.EPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row8.FREGISTRO = null;
							} else {
										
			row8.FREGISTRO = routines.system.JDBCUtil.getDate(rs_tOracleInput_7, 5);
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row8.PREGUNTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(6) != null) {
						row8.PREGUNTAS_ID = rs_tOracleInput_7.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 7) {
								row8.TRESPUESTAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(7) != null) {
						row8.TRESPUESTAS_ID = rs_tOracleInput_7.getBigDecimal(7);
					} else {
				
						row8.TRESPUESTAS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 8) {
								row8.OPCION1 = null;
							} else {
	                         		
        	row8.OPCION1 = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 9) {
								row8.OPCION2 = null;
							} else {
										
			row8.OPCION2 = routines.system.JDBCUtil.getDate(rs_tOracleInput_7, 9);
		                    }
							if(colQtyInRs_tOracleInput_7 < 10) {
								row8.RECOMENDACIONES = null;
							} else {
	                         		
        	row8.RECOMENDACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 10, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row9Struct row9 = null;
					
						row10Struct row10 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row9HashKey.ID = row8.PREGUNTAS_ID ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row9.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_1 = true;
	  								
						
									
	
		  								forceLooprow9 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow9 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row9 != null && tHash_Lookup_row9.hasNext()) || forceLooprow9) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row9'
									
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								
								if(!forceLooprow9) { // G 46
								
							
								 
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow9 = false;
									 	
							
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row10HashKey.ID = row8.TRESPUESTAS_ID ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row10.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow10 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow10 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row10 != null && tHash_Lookup_row10.hasNext()) || forceLooprow10) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row10'
									
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								
								if(!forceLooprow10) { // G 46
								
							
								 
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow10 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;

if(!rejectedInnerJoin_tMap_1 ) {

// # Output table : 'out1'
out1_tmp.PERSONA_ID = row8.PERSONA_ID ;
out1_tmp.FICHA_ID = row8.FICHA_ID ;
out1_tmp.TREGIMENSALUD_ID = row8.TREGIMENSALUD_ID ;
out1_tmp.EPS_ID = row8.EPS_ID ;
out1_tmp.FREGISTRO = row8.FREGISTRO ;
out1_tmp.TRESPUESTAS_ID = row8.TRESPUESTAS_ID ;
out1_tmp.OPCION1 = row8.OPCION1 ;
out1_tmp.OPCION2 = row8.OPCION2 ;
out1_tmp.SIGLA = row9.SIGLA ;
out1_tmp.TPREGUNTAS_ID = row9.TPREGUNTAS_ID ;
out1_tmp.VPREDETERMINADO = row10.VPREDETERMINADO ;
out1_tmp.RECOMENDACIONES = row8.RECOMENDACIONES ;
out1 = out1_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tFlowToIterate_2 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					


    	            
            globalMap.put("out1.PERSONA_ID", out1.PERSONA_ID);
    	            
            globalMap.put("out1.FICHA_ID", out1.FICHA_ID);
    	            
            globalMap.put("out1.TREGIMENSALUD_ID", out1.TREGIMENSALUD_ID);
    	            
            globalMap.put("out1.EPS_ID", out1.EPS_ID);
    	            
            globalMap.put("out1.FREGISTRO", out1.FREGISTRO);
    	            
            globalMap.put("out1.TRESPUESTAS_ID", out1.TRESPUESTAS_ID);
    	            
            globalMap.put("out1.OPCION1", out1.OPCION1);
    	            
            globalMap.put("out1.OPCION2", out1.OPCION2);
    	            
            globalMap.put("out1.SIGLA", out1.SIGLA);
    	            
            globalMap.put("out1.TPREGUNTAS_ID", out1.TPREGUNTAS_ID);
    	            
            globalMap.put("out1.VPREDETERMINADO", out1.VPREDETERMINADO);
    	            
            globalMap.put("out1.RECOMENDACIONES", out1.RECOMENDACIONES);
    	
 
	   nb_line_tFlowToIterate_2++;  
       counter_tFlowToIterate_2++;
       globalMap.put("tFlowToIterate_2_CURRENT_ITERATION", counter_tFlowToIterate_2);
 


	tos_count_tFlowToIterate_2++;

/**
 * [tFlowToIterate_2 main ] stop
 */
	
	/**
	 * [tFlowToIterate_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_begin ] stop
 */
	NB_ITERATE_tJava_1++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row11", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If7", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("meterRowrow17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("row17", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk4", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If8", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If2", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If1", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If6", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If3", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If22", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("If5", 3, 0);
					}           			
				
					if(execStat){				
	       				runStat.updateStatOnConnection("OnComponentOk9", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate2", 1, "exec" + NB_ITERATE_tJava_1);
					//Thread.sleep(1000);
				}				
			

	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.COM_PERSONA_ID = out1.PERSONA_ID;
context.COM_FICHA_ID = out1.FICHA_ID;
context.COM_FREGISTRO = out1.FREGISTRO;
context.COM_EPS_ID = out1.EPS_ID;
context.COM_TREGIMENSALUD_ID = out1.TREGIMENSALUD_ID;
context.COM_TPREGUNTAS_ID = out1.TPREGUNTAS_ID;
context.COM_SIGLA = out1.SIGLA;
context.COM_OPCION1 = out1.OPCION1;
context.COM_OPCION2 = out1.OPCION2;
context.COM_TRESPUESTAS_ID = out1.TRESPUESTAS_ID;
context.COM_VPREDETERMINADO = out1.VPREDETERMINADO;
context.COM_RECOMENDACIONES = out1.RECOMENDACIONES;


/*
System.out.println("Contexto preguntas comunes");
System.out.println("context.COM_PERSONA_ID: "+context.COM_PERSONA_ID);
System.out.println("context.COM_FICHA_ID: "+ context.COM_FICHA_ID );
System.out.println("context.COM_FREGISTRO: "+ context.COM_FREGISTRO);
System.out.println("context.COM_EPS_ID: "+ context.COM_EPS_ID);
System.out.println("context.COM_TREGIMENSALUD_ID: " + context.COM_TREGIMENSALUD_ID );
System.out.println("context.COM_TPREGUNTAS_ID: "+ context.COM_TPREGUNTAS_ID);
System.out.println("context.COM_SIGLA: "+ context.COM_SIGLA);
System.out.println("context.COM_OPCION1: " + context.COM_OPCION1 );
System.out.println("context.COM_OPCION2: "+ context.COM_OPCION2);
System.out.println("context.COM_TRESPUESTAS_ID: "+ context.COM_TRESPUESTAS_ID);
System.out.println("context.COM_VPREDETERMINADO: "+ context.COM_VPREDETERMINADO);
*/



 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

   			if (context.COM_TPREGUNTAS_ID.compareTo(context.COMBO)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If1", 0, "true");
					}
				tJava_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If1", 0, "false");
					}   	 
   				}
   			if (context.COM_TPREGUNTAS_ID.compareTo(context.COMBO_COMBO)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If2", 0, "true");
					}
				tJava_4Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If2", 0, "false");
					}   	 
   				}
   			if (context.COM_TPREGUNTAS_ID.compareTo(context.COMBO_TEXTO)== 0 || context.COM_TPREGUNTAS_ID.compareTo(context.COMBO_OTRO)== 0 || context.COM_TPREGUNTAS_ID.compareTo(context.COMBO_NUMERICO)== 0 ||
context.COM_TPREGUNTAS_ID.compareTo(context.COMBO_TEXTO_FIJO)== 0
) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If5", 0, "true");
					}
				tJava_6Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If5", 0, "false");
					}   	 
   				}
   			if (context.COM_TPREGUNTAS_ID.compareTo(context.MULTISELECT)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If6", 0, "true");
					}
				tJava_7Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If6", 0, "false");
					}   	 
   				}
   			if (context.COM_TPREGUNTAS_ID.compareTo(context.RANGO_NUMERICO)== 0 || context.COM_TPREGUNTAS_ID.compareTo(context.ABIERTA)== 0 || 
context.COM_TPREGUNTAS_ID.compareTo(context.AREA)== 0 ) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If7", 0, "true");
					}
				tJava_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If7", 0, "false");
					}   	 
   				}
   			if (context.COM_TPREGUNTAS_ID.compareTo(context.FECHA_NORMAL)== 0) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If8", 0, "true");
					}
				tJava_9Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If8", 0, "false");
					}   	 
   				}



/**
 * [tJava_1 end ] stop
 */
						if(execStat){
							runStat.updateStatOnConnection("iterate2", 2, "exec" + NB_ITERATE_tJava_1);
						}				
					




	
	/**
	 * [tFlowToIterate_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 process_data_end ] stop
 */

} // End of branch "out1"



	
		} // close loop of lookup 'row10' // G_TM_M_043
		
		} // close loop of lookup 'row9' // G_TM_M_043
	
	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tFlowToIterate_2 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

globalMap.put("tFlowToIterate_2_NB_LINE",nb_line_tFlowToIterate_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_2", true);
end_Hash.put("tFlowToIterate_2", System.currentTimeMillis());




/**
 * [tFlowToIterate_2 end ] stop
 */






				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_7:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk12", 0, "ok");
								} 
							
							tJava_18Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_2 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_2";
	
	

 



/**
 * [tFlowToIterate_2 finally ] stop
 */

	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_2", false);
		start_Hash.put("tJava_2", System.currentTimeMillis());
		
	
	currentComponent="tJava_2";
	
	
		int tos_count_tJava_2 = 0;
		


if (context.COM_TRESPUESTAS_ID == null){
context.COM_RESPUESTA = context.COM_OPCION1;
} else {
context.COM_RESPUESTA = context.COM_VPREDETERMINADO;
}



 



/**
 * [tJava_2 begin ] stop
 */
	
	/**
	 * [tJava_2 main ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 


	tos_count_tJava_2++;

/**
 * [tJava_2 main ] stop
 */
	
	/**
	 * [tJava_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_begin ] stop
 */
	
	/**
	 * [tJava_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 process_data_end ] stop
 */
	
	/**
	 * [tJava_2 end ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 

ok_Hash.put("tJava_2", true);
end_Hash.put("tJava_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJava_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_2 finally ] start
	 */

	

	
	
	currentComponent="tJava_2";
	
	

 



/**
 * [tJava_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_2_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableRow<row17Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return null;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return null;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return null;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();





	
	/**
	 * [tHashOutput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_6", false);
		start_Hash.put("tHashOutput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"meterRowrow17");
					}
				
		int tos_count_tHashOutput_6 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashOutput_6 = null;
		String hashKey_tHashOutput_6 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_6";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_6)){
			    if(mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6) == null){
	      		    mf_tHashOutput_6.getResourceMap().put(hashKey_tHashOutput_6, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }else{
			    	tHashFile_tHashOutput_6 = mf_tHashOutput_6.getResourceMap().get(hashKey_tHashOutput_6);
			    }
			}
        int nb_line_tHashOutput_6 = 0;

 



/**
 * [tHashOutput_6 begin ] stop
 */



	
	/**
	 * [vFlowMeter_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("vFlowMeter_row17", false);
		start_Hash.put("vFlowMeter_row17", System.currentTimeMillis());
		
	
	currentComponent="vFlowMeter_row17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_vFlowMeter_row17 = 0;
		

    int count_vFlowMeter_row17 = 0; 
 



/**
 * [vFlowMeter_row17 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row17.PERSONA_ID = context.COM_PERSONA_ID;
    	            	        	            	
    	            		row17.FICHA_ID = context.COM_FICHA_ID;
    	            	        	            	
    	            		row17.TREGIMENSALUD_ID = context.COM_TREGIMENSALUD_ID;
    	            	        	            	
    	            		row17.EPS_ID = context.COM_EPS_ID;
    	            	        	            	
    	            		row17.FREGISTRO = context.COM_FREGISTRO;
    	            	        	            	
    	            		row17.SIGLA = context.COM_SIGLA;
    	            	        	            	
    	            		row17.RESPUESTAS = context.COM_RESPUESTA;
    	            	        	            	
    	            		row17.RECOMENDACIONES = context.COM_RECOMENDACIONES;
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [vFlowMeter_row17 main ] start
	 */

	

	
	
	currentComponent="vFlowMeter_row17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					

    count_vFlowMeter_row17++; 
 


	tos_count_vFlowMeter_row17++;

/**
 * [vFlowMeter_row17 main ] stop
 */
	
	/**
	 * [vFlowMeter_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="vFlowMeter_row17";
	
	

 



/**
 * [vFlowMeter_row17 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_6 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"meterRowrow17"
						
						);
					}
					



    
		row17Struct oneRow_tHashOutput_6 = new row17Struct();
				
					oneRow_tHashOutput_6.PERSONA_ID = row17.PERSONA_ID;
					oneRow_tHashOutput_6.FICHA_ID = row17.FICHA_ID;
					oneRow_tHashOutput_6.TREGIMENSALUD_ID = row17.TREGIMENSALUD_ID;
					oneRow_tHashOutput_6.EPS_ID = row17.EPS_ID;
					oneRow_tHashOutput_6.FREGISTRO = row17.FREGISTRO;
					oneRow_tHashOutput_6.SIGLA = row17.SIGLA;
					oneRow_tHashOutput_6.RESPUESTAS = row17.RESPUESTAS;
					oneRow_tHashOutput_6.RECOMENDACIONES = row17.RECOMENDACIONES;
		
        tHashFile_tHashOutput_6.put(oneRow_tHashOutput_6);
        nb_line_tHashOutput_6 ++;

 


	tos_count_tHashOutput_6++;

/**
 * [tHashOutput_6 main ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 process_data_end ] stop
 */



	
	/**
	 * [vFlowMeter_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="vFlowMeter_row17";
	
	

 



/**
 * [vFlowMeter_row17 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [vFlowMeter_row17 end ] start
	 */

	

	
	
	currentComponent="vFlowMeter_row17";
	
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("vFlowMeter_row17", true);
end_Hash.put("vFlowMeter_row17", System.currentTimeMillis());




/**
 * [vFlowMeter_row17 end ] stop
 */

	
	/**
	 * [tHashOutput_6 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	
globalMap.put("tHashOutput_6_NB_LINE", nb_line_tHashOutput_6);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"meterRowrow17");
			  	}
			  	
 

ok_Hash.put("tHashOutput_6", true);
end_Hash.put("tHashOutput_6", System.currentTimeMillis());




/**
 * [tHashOutput_6 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [vFlowMeter_row17 finally ] start
	 */

	

	
	
	currentComponent="vFlowMeter_row17";
	
	

 



/**
 * [vFlowMeter_row17 finally ] stop
 */

	
	/**
	 * [tHashOutput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_6";
	
	

 



/**
 * [tHashOutput_6 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tJava_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_4", false);
		start_Hash.put("tJava_4", System.currentTimeMillis());
		
	
	currentComponent="tJava_4";
	
	
		int tos_count_tJava_4 = 0;
		


if (context.COM_TRESPUESTAS_ID == null){
context.COM_RESPUESTA = context.COM_OPCION1;
}

 



/**
 * [tJava_4 begin ] stop
 */
	
	/**
	 * [tJava_4 main ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 


	tos_count_tJava_4++;

/**
 * [tJava_4 main ] stop
 */
	
	/**
	 * [tJava_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_begin ] stop
 */
	
	/**
	 * [tJava_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 process_data_end ] stop
 */
	
	/**
	 * [tJava_4 end ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 

ok_Hash.put("tJava_4", true);
end_Hash.put("tJava_4", System.currentTimeMillis());

   			if (context.COM_TRESPUESTAS_ID == null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If22", 0, "true");
					}
				tFixedFlowInput_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If22", 0, "false");
					}   	 
   				}
   			if (context.COM_TRESPUESTAS_ID != null) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If3", 0, "true");
					}
				tOracleInput_8Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If3", 0, "false");
					}   	 
   				}



/**
 * [tJava_4 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_4 finally ] start
	 */

	

	
	
	currentComponent="tJava_4";
	
	

 



/**
 * [tJava_4 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_4_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableRow<row11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public String VPREDETERMINADO;

				public String getVPREDETERMINADO () {
					return this.VPREDETERMINADO;
				}

				public Boolean VPREDETERMINADOIsNullable(){
				    return false;
				}
				public Boolean VPREDETERMINADOIsKey(){
				    return false;
				}
				public Integer VPREDETERMINADOLength(){
				    return 100;
				}
				public Integer VPREDETERMINADOPrecision(){
				    return 0;
				}
				public String VPREDETERMINADODefault(){
				
					return null;
				
				}
				public String VPREDETERMINADOComment(){
				
				    return "";
				
				}
				public String VPREDETERMINADOPattern(){
				
					return "";
				
				}
				public String VPREDETERMINADOOriginalDbColumnName(){
				
					return "VPREDETERMINADO";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.VPREDETERMINADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.VPREDETERMINADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.VPREDETERMINADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("VPREDETERMINADO="+VPREDETERMINADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement();

		    String dbquery_tOracleInput_8 = "SELECT NVL( GTR.VPREDETERMINADO,' ') AS VPREDETERMINADO FROM GEN_TRESPUESTAS GTR WHERE  GTR.ID ="+context.COM_OPCION1;
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row11.VPREDETERMINADO = null;
							} else {
	                         		
        	row11.VPREDETERMINADO = routines.system.JDBCUtil.getString(rs_tOracleInput_8, 1, false);
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					

    if (context.COM_SIGLA.equals("FF079")){
	context.COM_RESPUESTA = context.COM_VPREDETERMINADO +",Tipo de problema visual: "+row11.VPREDETERMINADO;
} else if ( context.COM_SIGLA.equals("FF080")){
	context.COM_RESPUESTA = context.COM_VPREDETERMINADO +",Problemas auditivos corregidos: "+row11.VPREDETERMINADO;
} else {
	context.COM_RESPUESTA = context.COM_VPREDETERMINADO +",Resultado: "+row11.VPREDETERMINADO;
}

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public void tJava_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_6", false);
		start_Hash.put("tJava_6", System.currentTimeMillis());
		
	
	currentComponent="tJava_6";
	
	
		int tos_count_tJava_6 = 0;
		


if (context.COM_TRESPUESTAS_ID == null){
context.COM_RESPUESTA = context.COM_OPCION1;
} else if (Utils.empty(context.COM_OPCION1) == true ){
context.COM_RESPUESTA = context.COM_VPREDETERMINADO;
} else {
context.COM_RESPUESTA = context.COM_VPREDETERMINADO +", "+ context.COM_OPCION1;
}
 



/**
 * [tJava_6 begin ] stop
 */
	
	/**
	 * [tJava_6 main ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 


	tos_count_tJava_6++;

/**
 * [tJava_6 main ] stop
 */
	
	/**
	 * [tJava_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_begin ] stop
 */
	
	/**
	 * [tJava_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 process_data_end ] stop
 */
	
	/**
	 * [tJava_6 end ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 

ok_Hash.put("tJava_6", true);
end_Hash.put("tJava_6", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJava_6 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_6 finally ] start
	 */

	

	
	
	currentComponent="tJava_6";
	
	

 



/**
 * [tJava_6 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_6_SUBPROCESS_STATE", 1);
	}
	


public void tJava_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_7", false);
		start_Hash.put("tJava_7", System.currentTimeMillis());
		
	
	currentComponent="tJava_7";
	
	
		int tos_count_tJava_7 = 0;
		


if (Utils.empty(context.COM_OPCION1) == true ){
context.COM_RESPUESTA = context.COM_VPREDETERMINADO;
} else {
context.COM_RESPUESTA = context.COM_VPREDETERMINADO +", "+ context.COM_OPCION1;
}
 



/**
 * [tJava_7 begin ] stop
 */
	
	/**
	 * [tJava_7 main ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 


	tos_count_tJava_7++;

/**
 * [tJava_7 main ] stop
 */
	
	/**
	 * [tJava_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_begin ] stop
 */
	
	/**
	 * [tJava_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 process_data_end ] stop
 */
	
	/**
	 * [tJava_7 end ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 

ok_Hash.put("tJava_7", true);
end_Hash.put("tJava_7", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk6", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJava_7 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_7 finally ] start
	 */

	

	
	
	currentComponent="tJava_7";
	
	

 



/**
 * [tJava_7 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_7_SUBPROCESS_STATE", 1);
	}
	


public void tJava_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_8", false);
		start_Hash.put("tJava_8", System.currentTimeMillis());
		
	
	currentComponent="tJava_8";
	
	
		int tos_count_tJava_8 = 0;
		


context.COM_RESPUESTA = context.COM_OPCION1;



 



/**
 * [tJava_8 begin ] stop
 */
	
	/**
	 * [tJava_8 main ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 


	tos_count_tJava_8++;

/**
 * [tJava_8 main ] stop
 */
	
	/**
	 * [tJava_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_begin ] stop
 */
	
	/**
	 * [tJava_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 process_data_end ] stop
 */
	
	/**
	 * [tJava_8 end ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 

ok_Hash.put("tJava_8", true);
end_Hash.put("tJava_8", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJava_8 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_8 finally ] start
	 */

	

	
	
	currentComponent="tJava_8";
	
	

 



/**
 * [tJava_8 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_8_SUBPROCESS_STATE", 1);
	}
	


public void tJava_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_9", false);
		start_Hash.put("tJava_9", System.currentTimeMillis());
		
	
	currentComponent="tJava_9";
	
	
		int tos_count_tJava_9 = 0;
		


context.COM_RESPUESTA = TalendDate.formatDate("dd/MM/yyyy", context.COM_OPCION2);

 



/**
 * [tJava_9 begin ] stop
 */
	
	/**
	 * [tJava_9 main ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 


	tos_count_tJava_9++;

/**
 * [tJava_9 main ] stop
 */
	
	/**
	 * [tJava_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_begin ] stop
 */
	
	/**
	 * [tJava_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 process_data_end ] stop
 */
	
	/**
	 * [tJava_9 end ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 

ok_Hash.put("tJava_9", true);
end_Hash.put("tJava_9", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);



/**
 * [tJava_9 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_9 finally ] start
	 */

	

	
	
	currentComponent="tJava_9";
	
	

 



/**
 * [tJava_9 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_9_SUBPROCESS_STATE", 1);
	}
	


public void tJava_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_18", false);
		start_Hash.put("tJava_18", System.currentTimeMillis());
		
	
	currentComponent="tJava_18";
	
	
		int tos_count_tJava_18 = 0;
		



 



/**
 * [tJava_18 begin ] stop
 */
	
	/**
	 * [tJava_18 main ] start
	 */

	

	
	
	currentComponent="tJava_18";
	
	

 


	tos_count_tJava_18++;

/**
 * [tJava_18 main ] stop
 */
	
	/**
	 * [tJava_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_18";
	
	

 



/**
 * [tJava_18 process_data_begin ] stop
 */
	
	/**
	 * [tJava_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_18";
	
	

 



/**
 * [tJava_18 process_data_end ] stop
 */
	
	/**
	 * [tJava_18 end ] start
	 */

	

	
	
	currentComponent="tJava_18";
	
	

 

ok_Hash.put("tJava_18", true);
end_Hash.put("tJava_18", System.currentTimeMillis());

   			if (((Integer)globalMap.get("tOracleInput_6_NB_LINE")) >0 /*|| ((Integer)globalMap.get("tOracleInput_7_NB_LINE"))>0*/) {
   				
					if(execStat){
   	 					runStat.updateStatOnConnection("If23", 0, "true");
					}
				tHashInput_tUnite_2Process(globalMap);
			}

			   
   				else{
					if(execStat){   
   	 					runStat.updateStatOnConnection("If23", 0, "false");
					}   	 
   				}



/**
 * [tJava_18 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_18 finally ] start
	 */

	

	
	
	currentComponent="tJava_18";
	
	

 



/**
 * [tJava_18 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_18_SUBPROCESS_STATE", 1);
	}
	


public static class tHashInput_tUnite_1_row21Struct implements routines.system.IPersistableRow<tHashInput_tUnite_1_row21Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tHashInput_tUnite_1_row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row20Struct implements routines.system.IPersistableRow<row20Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row19Struct row19 = new row19Struct();

		row20Struct row20 = new row20Struct();

			tHashInput_tUnite_1_row21Struct tHashInput_tUnite_1_row21 = new tHashInput_tUnite_1_row21Struct();




	
	/**
	 * [tHashOutput_tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_tUnite_1", false);
		start_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"tHashInput_tUnite_1_tHashInput_tUnite_1_row21");
					}
				
		int tos_count_tHashOutput_tUnite_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row21Struct> tHashFile_tHashOutput_tUnite_1 = null;
		String hashKey_tHashOutput_tUnite_1 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_tUnite_1";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_tUnite_1)){
			    if(mf_tHashOutput_tUnite_1.getResourceMap().get(hashKey_tHashOutput_tUnite_1) == null){
	      		    mf_tHashOutput_tUnite_1.getResourceMap().put(hashKey_tHashOutput_tUnite_1, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row21Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1.getResourceMap().get(hashKey_tHashOutput_tUnite_1);
			    }else{
			    	tHashFile_tHashOutput_tUnite_1 = mf_tHashOutput_tUnite_1.getResourceMap().get(hashKey_tHashOutput_tUnite_1);
			    }
			}
        int nb_line_tHashOutput_tUnite_1 = 0;

 



/**
 * [tHashOutput_tUnite_1 begin ] stop
 */



	
	/**
	 * [tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_1", false);
		start_Hash.put("tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tUnite_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20","row19");
					}
				
		int tos_count_tUnite_1 = 0;
		

int nb_line_tUnite_1 = 0;

 



/**
 * [tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_5", false);
		start_Hash.put("tHashInput_5", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_5";
	
	
		int tos_count_tHashInput_5 = 0;
		


int nb_line_tHashInput_5 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_5=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row12Struct> tHashFile_tHashInput_5 = mf_tHashInput_5.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_5");
if(tHashFile_tHashInput_5==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row12Struct> iterator_tHashInput_5 = tHashFile_tHashInput_5.iterator();
while (iterator_tHashInput_5.hasNext()) {
    row12Struct next_tHashInput_5 = iterator_tHashInput_5.next();

	row19.PERSONA_ID = next_tHashInput_5.PERSONA_ID;
	row19.FICHA_ID = next_tHashInput_5.FICHA_ID;
	row19.TREGIMENSALUD_ID = next_tHashInput_5.TREGIMENSALUD_ID;
	row19.EPS_ID = next_tHashInput_5.EPS_ID;
	row19.FREGISTRO = next_tHashInput_5.FREGISTRO;
	row19.SIGLA = next_tHashInput_5.SIGLA;
	row19.RESPUESTAS = next_tHashInput_5.RESPUESTAS;
	row19.RECOMENDACIONES = next_tHashInput_5.RECOMENDACIONES;

 



/**
 * [tHashInput_5 begin ] stop
 */
	
	/**
	 * [tHashInput_5 main ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 


	tos_count_tHashInput_5++;

/**
 * [tHashInput_5 main ] stop
 */
	
	/**
	 * [tHashInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row19"
									
							);
						}
						
//////////
 

// for output
			tHashInput_tUnite_1_row21 = new tHashInput_tUnite_1_row21Struct();
								
			tHashInput_tUnite_1_row21.PERSONA_ID = row19.PERSONA_ID;								
			tHashInput_tUnite_1_row21.FICHA_ID = row19.FICHA_ID;								
			tHashInput_tUnite_1_row21.TREGIMENSALUD_ID = row19.TREGIMENSALUD_ID;								
			tHashInput_tUnite_1_row21.EPS_ID = row19.EPS_ID;								
			tHashInput_tUnite_1_row21.FREGISTRO = row19.FREGISTRO;								
			tHashInput_tUnite_1_row21.SIGLA = row19.SIGLA;								
			tHashInput_tUnite_1_row21.RESPUESTAS = row19.RESPUESTAS;								
			tHashInput_tUnite_1_row21.RECOMENDACIONES = row19.RECOMENDACIONES;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"tHashInput_tUnite_1_tHashInput_tUnite_1_row21"
						
						);
					}
					



    
		tHashInput_tUnite_1_row21Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row21Struct();
				
					oneRow_tHashOutput_tUnite_1.PERSONA_ID = tHashInput_tUnite_1_row21.PERSONA_ID;
					oneRow_tHashOutput_tUnite_1.FICHA_ID = tHashInput_tUnite_1_row21.FICHA_ID;
					oneRow_tHashOutput_tUnite_1.TREGIMENSALUD_ID = tHashInput_tUnite_1_row21.TREGIMENSALUD_ID;
					oneRow_tHashOutput_tUnite_1.EPS_ID = tHashInput_tUnite_1_row21.EPS_ID;
					oneRow_tHashOutput_tUnite_1.FREGISTRO = tHashInput_tUnite_1_row21.FREGISTRO;
					oneRow_tHashOutput_tUnite_1.SIGLA = tHashInput_tUnite_1_row21.SIGLA;
					oneRow_tHashOutput_tUnite_1.RESPUESTAS = tHashInput_tUnite_1_row21.RESPUESTAS;
					oneRow_tHashOutput_tUnite_1.RECOMENDACIONES = tHashInput_tUnite_1_row21.RECOMENDACIONES;
		
        tHashFile_tHashOutput_tUnite_1.put(oneRow_tHashOutput_tUnite_1);
        nb_line_tHashOutput_tUnite_1 ++;

 


	tos_count_tHashOutput_tUnite_1++;

/**
 * [tHashOutput_tUnite_1 main ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	

 



/**
 * [tHashOutput_tUnite_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	

 



/**
 * [tHashOutput_tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_5 end ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	
    

		
			nb_line_tHashInput_5++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_5");
	


	globalMap.put("tHashInput_5_NB_LINE", nb_line_tHashInput_5);       

 

ok_Hash.put("tHashInput_5", true);
end_Hash.put("tHashInput_5", System.currentTimeMillis());




/**
 * [tHashInput_5 end ] stop
 */
	
	/**
	 * [tHashInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_6", false);
		start_Hash.put("tHashInput_6", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_6";
	
	
		int tos_count_tHashInput_6 = 0;
		


int nb_line_tHashInput_6 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_6=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row17Struct> tHashFile_tHashInput_6 = mf_tHashInput_6.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_6");
if(tHashFile_tHashInput_6==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row17Struct> iterator_tHashInput_6 = tHashFile_tHashInput_6.iterator();
while (iterator_tHashInput_6.hasNext()) {
    row17Struct next_tHashInput_6 = iterator_tHashInput_6.next();

	row20.PERSONA_ID = next_tHashInput_6.PERSONA_ID;
	row20.FICHA_ID = next_tHashInput_6.FICHA_ID;
	row20.TREGIMENSALUD_ID = next_tHashInput_6.TREGIMENSALUD_ID;
	row20.EPS_ID = next_tHashInput_6.EPS_ID;
	row20.FREGISTRO = next_tHashInput_6.FREGISTRO;
	row20.SIGLA = next_tHashInput_6.SIGLA;
	row20.RESPUESTAS = next_tHashInput_6.RESPUESTAS;
	row20.RECOMENDACIONES = next_tHashInput_6.RECOMENDACIONES;

 



/**
 * [tHashInput_6 begin ] stop
 */
	
	/**
	 * [tHashInput_6 main ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 


	tos_count_tHashInput_6++;

/**
 * [tHashInput_6 main ] stop
 */
	
	/**
	 * [tHashInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row20"
									
							);
						}
						
//////////
 

// for output
			tHashInput_tUnite_1_row21 = new tHashInput_tUnite_1_row21Struct();
								
			tHashInput_tUnite_1_row21.PERSONA_ID = row20.PERSONA_ID;								
			tHashInput_tUnite_1_row21.FICHA_ID = row20.FICHA_ID;								
			tHashInput_tUnite_1_row21.TREGIMENSALUD_ID = row20.TREGIMENSALUD_ID;								
			tHashInput_tUnite_1_row21.EPS_ID = row20.EPS_ID;								
			tHashInput_tUnite_1_row21.FREGISTRO = row20.FREGISTRO;								
			tHashInput_tUnite_1_row21.SIGLA = row20.SIGLA;								
			tHashInput_tUnite_1_row21.RESPUESTAS = row20.RESPUESTAS;								
			tHashInput_tUnite_1_row21.RECOMENDACIONES = row20.RECOMENDACIONES;			

			nb_line_tUnite_1++;

//////////
 


	tos_count_tUnite_1++;

/**
 * [tUnite_1 main ] stop
 */
	
	/**
	 * [tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"tHashInput_tUnite_1_tHashInput_tUnite_1_row21"
						
						);
					}
					



    
		tHashInput_tUnite_1_row21Struct oneRow_tHashOutput_tUnite_1 = new tHashInput_tUnite_1_row21Struct();
				
					oneRow_tHashOutput_tUnite_1.PERSONA_ID = tHashInput_tUnite_1_row21.PERSONA_ID;
					oneRow_tHashOutput_tUnite_1.FICHA_ID = tHashInput_tUnite_1_row21.FICHA_ID;
					oneRow_tHashOutput_tUnite_1.TREGIMENSALUD_ID = tHashInput_tUnite_1_row21.TREGIMENSALUD_ID;
					oneRow_tHashOutput_tUnite_1.EPS_ID = tHashInput_tUnite_1_row21.EPS_ID;
					oneRow_tHashOutput_tUnite_1.FREGISTRO = tHashInput_tUnite_1_row21.FREGISTRO;
					oneRow_tHashOutput_tUnite_1.SIGLA = tHashInput_tUnite_1_row21.SIGLA;
					oneRow_tHashOutput_tUnite_1.RESPUESTAS = tHashInput_tUnite_1_row21.RESPUESTAS;
					oneRow_tHashOutput_tUnite_1.RECOMENDACIONES = tHashInput_tUnite_1_row21.RECOMENDACIONES;
		
        tHashFile_tHashOutput_tUnite_1.put(oneRow_tHashOutput_tUnite_1);
        nb_line_tHashOutput_tUnite_1 ++;

 


	tos_count_tHashOutput_tUnite_1++;

/**
 * [tHashOutput_tUnite_1 main ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	

 



/**
 * [tHashOutput_tUnite_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	

 



/**
 * [tHashOutput_tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_6 end ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	
    

		
			nb_line_tHashInput_6++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_6");
	


	globalMap.put("tHashInput_6_NB_LINE", nb_line_tHashInput_6);       

 

ok_Hash.put("tHashInput_6", true);
end_Hash.put("tHashInput_6", System.currentTimeMillis());




/**
 * [tHashInput_6 end ] stop
 */
	
	/**
	 * [tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

globalMap.put("tUnite_1_NB_LINE", nb_line_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20","row19");
			  	}
			  	
 

ok_Hash.put("tUnite_1", true);
end_Hash.put("tUnite_1", System.currentTimeMillis());




/**
 * [tUnite_1 end ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	
globalMap.put("tHashOutput_tUnite_1_NB_LINE", nb_line_tHashOutput_tUnite_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"tHashInput_tUnite_1_tHashInput_tUnite_1_row21");
			  	}
			  	
 

ok_Hash.put("tHashOutput_tUnite_1", true);
end_Hash.put("tHashOutput_tUnite_1", System.currentTimeMillis());




/**
 * [tHashOutput_tUnite_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_5 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_5";
	
	

 



/**
 * [tHashInput_5 finally ] stop
 */
	
	/**
	 * [tHashInput_6 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_6";
	
	

 



/**
 * [tHashInput_6 finally ] stop
 */
	
	/**
	 * [tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tUnite_1";
	
	

 



/**
 * [tUnite_1 finally ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_1";
	
	

 



/**
 * [tHashOutput_tUnite_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_5_SUBPROCESS_STATE", 1);
	}
	


public void tJava_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_21", false);
		start_Hash.put("tJava_21", System.currentTimeMillis());
		
	
	currentComponent="tJava_21";
	
	
		int tos_count_tJava_21 = 0;
		


File theDirSalida = new File(context.RutaSistema+"/FFA");

// if the directory does not exist, create it
if (!theDirSalida.exists()) {
    System.out.println("creating directory: " + theDirSalida.getName());
    boolean result = false;
    
    try{
        theDirSalida.mkdir();
        result = true;
    } 
    catch(SecurityException se){
        //handle it
    }        
    if(result) {    
        System.out.println("DIR created");  
    }
}
 



/**
 * [tJava_21 begin ] stop
 */
	
	/**
	 * [tJava_21 main ] start
	 */

	

	
	
	currentComponent="tJava_21";
	
	

 


	tos_count_tJava_21++;

/**
 * [tJava_21 main ] stop
 */
	
	/**
	 * [tJava_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_21";
	
	

 



/**
 * [tJava_21 process_data_begin ] stop
 */
	
	/**
	 * [tJava_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_21";
	
	

 



/**
 * [tJava_21 process_data_end ] stop
 */
	
	/**
	 * [tJava_21 end ] start
	 */

	

	
	
	currentComponent="tJava_21";
	
	

 

ok_Hash.put("tJava_21", true);
end_Hash.put("tJava_21", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk23", 0, "ok");
				}
				tFileInputDelimited_1Process(globalMap);



/**
 * [tJava_21 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_21 finally ] start
	 */

	

	
	
	currentComponent="tJava_21";
	
	

 



/**
 * [tJava_21 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_21_SUBPROCESS_STATE", 1);
	}
	


public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int PERSONA_ID;

				public int getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return true;
				}
				public Integer PERSONA_IDLength(){
				    return 6;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return null;
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public int FICHA_ID;

				public int getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return true;
				}
				public Integer FICHA_IDLength(){
				    return 3;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return null;
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public String TREGIMEN_SALUD;

				public String getTREGIMEN_SALUD () {
					return this.TREGIMEN_SALUD;
				}

				public Boolean TREGIMEN_SALUDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_SALUDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_SALUDLength(){
				    return 20;
				}
				public Integer TREGIMEN_SALUDPrecision(){
				    return 0;
				}
				public String TREGIMEN_SALUDDefault(){
				
					return null;
				
				}
				public String TREGIMEN_SALUDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_SALUDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TREGIMEN_SALUDOriginalDbColumnName(){
				
					return "TREGIMEN_SALUD";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return 18;
				}
				public Integer EPSPrecision(){
				    return 0;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return true;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 10;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 95;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				
			    public String FORMACION;

				public String getFORMACION () {
					return this.FORMACION;
				}

				public Boolean FORMACIONIsNullable(){
				    return true;
				}
				public Boolean FORMACIONIsKey(){
				    return false;
				}
				public Integer FORMACIONLength(){
				    return 27;
				}
				public Integer FORMACIONPrecision(){
				    return 0;
				}
				public String FORMACIONDefault(){
				
					return null;
				
				}
				public String FORMACIONComment(){
				
				    return "";
				
				}
				public String FORMACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMACIONOriginalDbColumnName(){
				
					return "FORMACION";
				
				}

				
			    public String EXPANSION;

				public String getEXPANSION () {
					return this.EXPANSION;
				}

				public Boolean EXPANSIONIsNullable(){
				    return true;
				}
				public Boolean EXPANSIONIsKey(){
				    return false;
				}
				public Integer EXPANSIONLength(){
				    return 27;
				}
				public Integer EXPANSIONPrecision(){
				    return 0;
				}
				public String EXPANSIONDefault(){
				
					return null;
				
				}
				public String EXPANSIONComment(){
				
				    return "";
				
				}
				public String EXPANSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXPANSIONOriginalDbColumnName(){
				
					return "EXPANSION";
				
				}

				
			    public String CONSOLIDACION;

				public String getCONSOLIDACION () {
					return this.CONSOLIDACION;
				}

				public Boolean CONSOLIDACIONIsNullable(){
				    return true;
				}
				public Boolean CONSOLIDACIONIsKey(){
				    return false;
				}
				public Integer CONSOLIDACIONLength(){
				    return 27;
				}
				public Integer CONSOLIDACIONPrecision(){
				    return 0;
				}
				public String CONSOLIDACIONDefault(){
				
					return null;
				
				}
				public String CONSOLIDACIONComment(){
				
				    return "";
				
				}
				public String CONSOLIDACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSOLIDACIONOriginalDbColumnName(){
				
					return "CONSOLIDACION";
				
				}

				
			    public String APERTURA;

				public String getAPERTURA () {
					return this.APERTURA;
				}

				public Boolean APERTURAIsNullable(){
				    return true;
				}
				public Boolean APERTURAIsKey(){
				    return false;
				}
				public Integer APERTURALength(){
				    return 27;
				}
				public Integer APERTURAPrecision(){
				    return 0;
				}
				public String APERTURADefault(){
				
					return null;
				
				}
				public String APERTURAComment(){
				
				    return "";
				
				}
				public String APERTURAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String APERTURAOriginalDbColumnName(){
				
					return "APERTURA";
				
				}

				
			    public String POSPARENTAL;

				public String getPOSPARENTAL () {
					return this.POSPARENTAL;
				}

				public Boolean POSPARENTALIsNullable(){
				    return true;
				}
				public Boolean POSPARENTALIsKey(){
				    return false;
				}
				public Integer POSPARENTALLength(){
				    return 22;
				}
				public Integer POSPARENTALPrecision(){
				    return 0;
				}
				public String POSPARENTALDefault(){
				
					return null;
				
				}
				public String POSPARENTALComment(){
				
				    return "";
				
				}
				public String POSPARENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String POSPARENTALOriginalDbColumnName(){
				
					return "POSPARENTAL";
				
				}

				
			    public String DISOLUCION;

				public String getDISOLUCION () {
					return this.DISOLUCION;
				}

				public Boolean DISOLUCIONIsNullable(){
				    return true;
				}
				public Boolean DISOLUCIONIsKey(){
				    return false;
				}
				public Integer DISOLUCIONLength(){
				    return 27;
				}
				public Integer DISOLUCIONPrecision(){
				    return 0;
				}
				public String DISOLUCIONDefault(){
				
					return null;
				
				}
				public String DISOLUCIONComment(){
				
				    return "";
				
				}
				public String DISOLUCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISOLUCIONOriginalDbColumnName(){
				
					return "DISOLUCION";
				
				}

				
			    public String ESTFAMILIAR;

				public String getESTFAMILIAR () {
					return this.ESTFAMILIAR;
				}

				public Boolean ESTFAMILIARIsNullable(){
				    return true;
				}
				public Boolean ESTFAMILIARIsKey(){
				    return false;
				}
				public Integer ESTFAMILIARLength(){
				    return 16;
				}
				public Integer ESTFAMILIARPrecision(){
				    return 0;
				}
				public String ESTFAMILIARDefault(){
				
					return null;
				
				}
				public String ESTFAMILIARComment(){
				
				    return "";
				
				}
				public String ESTFAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESTFAMILIAROriginalDbColumnName(){
				
					return "ESTFAMILIAR";
				
				}

				
			    public String TIPO_VIVIENDA;

				public String getTIPO_VIVIENDA () {
					return this.TIPO_VIVIENDA;
				}

				public Boolean TIPO_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TIPO_VIVIENDAIsKey(){
				    return false;
				}
				public Integer TIPO_VIVIENDALength(){
				    return 6;
				}
				public Integer TIPO_VIVIENDAPrecision(){
				    return 0;
				}
				public String TIPO_VIVIENDADefault(){
				
					return null;
				
				}
				public String TIPO_VIVIENDAComment(){
				
				    return "";
				
				}
				public String TIPO_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_VIVIENDAOriginalDbColumnName(){
				
					return "TIPO_VIVIENDA";
				
				}

				
			    public String CUARTOS;

				public String getCUARTOS () {
					return this.CUARTOS;
				}

				public Boolean CUARTOSIsNullable(){
				    return true;
				}
				public Boolean CUARTOSIsKey(){
				    return false;
				}
				public Integer CUARTOSLength(){
				    return 3;
				}
				public Integer CUARTOSPrecision(){
				    return 0;
				}
				public String CUARTOSDefault(){
				
					return null;
				
				}
				public String CUARTOSComment(){
				
				    return "";
				
				}
				public String CUARTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUARTOSOriginalDbColumnName(){
				
					return "CUARTOS";
				
				}

				
			    public String UBICACION;

				public String getUBICACION () {
					return this.UBICACION;
				}

				public Boolean UBICACIONIsNullable(){
				    return true;
				}
				public Boolean UBICACIONIsKey(){
				    return false;
				}
				public Integer UBICACIONLength(){
				    return 32;
				}
				public Integer UBICACIONPrecision(){
				    return 0;
				}
				public String UBICACIONDefault(){
				
					return null;
				
				}
				public String UBICACIONComment(){
				
				    return "";
				
				}
				public String UBICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UBICACIONOriginalDbColumnName(){
				
					return "UBICACION";
				
				}

				
			    public String BANOS;

				public String getBANOS () {
					return this.BANOS;
				}

				public Boolean BANOSIsNullable(){
				    return true;
				}
				public Boolean BANOSIsKey(){
				    return false;
				}
				public Integer BANOSLength(){
				    return 3;
				}
				public Integer BANOSPrecision(){
				    return 0;
				}
				public String BANOSDefault(){
				
					return null;
				
				}
				public String BANOSComment(){
				
				    return "";
				
				}
				public String BANOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BANOSOriginalDbColumnName(){
				
					return "BANOS";
				
				}

				
			    public String TENENCIA;

				public String getTENENCIA () {
					return this.TENENCIA;
				}

				public Boolean TENENCIAIsNullable(){
				    return true;
				}
				public Boolean TENENCIAIsKey(){
				    return false;
				}
				public Integer TENENCIALength(){
				    return 10;
				}
				public Integer TENENCIAPrecision(){
				    return 0;
				}
				public String TENENCIADefault(){
				
					return null;
				
				}
				public String TENENCIAComment(){
				
				    return "";
				
				}
				public String TENENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TENENCIAOriginalDbColumnName(){
				
					return "TENENCIA";
				
				}

				
			    public String TRESPORCUARTO;

				public String getTRESPORCUARTO () {
					return this.TRESPORCUARTO;
				}

				public Boolean TRESPORCUARTOIsNullable(){
				    return true;
				}
				public Boolean TRESPORCUARTOIsKey(){
				    return false;
				}
				public Integer TRESPORCUARTOLength(){
				    return 4;
				}
				public Integer TRESPORCUARTOPrecision(){
				    return 0;
				}
				public String TRESPORCUARTODefault(){
				
					return null;
				
				}
				public String TRESPORCUARTOComment(){
				
				    return "";
				
				}
				public String TRESPORCUARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRESPORCUARTOOriginalDbColumnName(){
				
					return "TRESPORCUARTO";
				
				}

				
			    public String TIPOHAB;

				public String getTIPOHAB () {
					return this.TIPOHAB;
				}

				public Boolean TIPOHABIsNullable(){
				    return true;
				}
				public Boolean TIPOHABIsKey(){
				    return false;
				}
				public Integer TIPOHABLength(){
				    return 12;
				}
				public Integer TIPOHABPrecision(){
				    return 0;
				}
				public String TIPOHABDefault(){
				
					return null;
				
				}
				public String TIPOHABComment(){
				
				    return "";
				
				}
				public String TIPOHABPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPOHABOriginalDbColumnName(){
				
					return "TIPOHAB";
				
				}

				
			    public String ACT_PRODUCTIVA;

				public String getACT_PRODUCTIVA () {
					return this.ACT_PRODUCTIVA;
				}

				public Boolean ACT_PRODUCTIVAIsNullable(){
				    return true;
				}
				public Boolean ACT_PRODUCTIVAIsKey(){
				    return false;
				}
				public Integer ACT_PRODUCTIVALength(){
				    return 24;
				}
				public Integer ACT_PRODUCTIVAPrecision(){
				    return 0;
				}
				public String ACT_PRODUCTIVADefault(){
				
					return null;
				
				}
				public String ACT_PRODUCTIVAComment(){
				
				    return "";
				
				}
				public String ACT_PRODUCTIVAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_PRODUCTIVAOriginalDbColumnName(){
				
					return "ACT_PRODUCTIVA";
				
				}

				
			    public String MAQUINARIA;

				public String getMAQUINARIA () {
					return this.MAQUINARIA;
				}

				public Boolean MAQUINARIAIsNullable(){
				    return true;
				}
				public Boolean MAQUINARIAIsKey(){
				    return false;
				}
				public Integer MAQUINARIALength(){
				    return 4;
				}
				public Integer MAQUINARIAPrecision(){
				    return 0;
				}
				public String MAQUINARIADefault(){
				
					return null;
				
				}
				public String MAQUINARIAComment(){
				
				    return "";
				
				}
				public String MAQUINARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MAQUINARIAOriginalDbColumnName(){
				
					return "MAQUINARIA";
				
				}

				
			    public String EXCRETAS;

				public String getEXCRETAS () {
					return this.EXCRETAS;
				}

				public Boolean EXCRETASIsNullable(){
				    return true;
				}
				public Boolean EXCRETASIsKey(){
				    return false;
				}
				public Integer EXCRETASLength(){
				    return 15;
				}
				public Integer EXCRETASPrecision(){
				    return 0;
				}
				public String EXCRETASDefault(){
				
					return null;
				
				}
				public String EXCRETASComment(){
				
				    return "";
				
				}
				public String EXCRETASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXCRETASOriginalDbColumnName(){
				
					return "EXCRETAS";
				
				}

				
			    public String MEDIOS_COMUNICACION;

				public String getMEDIOS_COMUNICACION () {
					return this.MEDIOS_COMUNICACION;
				}

				public Boolean MEDIOS_COMUNICACIONIsNullable(){
				    return true;
				}
				public Boolean MEDIOS_COMUNICACIONIsKey(){
				    return false;
				}
				public Integer MEDIOS_COMUNICACIONLength(){
				    return 26;
				}
				public Integer MEDIOS_COMUNICACIONPrecision(){
				    return 0;
				}
				public String MEDIOS_COMUNICACIONDefault(){
				
					return null;
				
				}
				public String MEDIOS_COMUNICACIONComment(){
				
				    return "";
				
				}
				public String MEDIOS_COMUNICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MEDIOS_COMUNICACIONOriginalDbColumnName(){
				
					return "MEDIOS_COMUNICACION";
				
				}

				
			    public String TIPO_ALUMBRADO;

				public String getTIPO_ALUMBRADO () {
					return this.TIPO_ALUMBRADO;
				}

				public Boolean TIPO_ALUMBRADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_ALUMBRADOIsKey(){
				    return false;
				}
				public Integer TIPO_ALUMBRADOLength(){
				    return 33;
				}
				public Integer TIPO_ALUMBRADOPrecision(){
				    return 0;
				}
				public String TIPO_ALUMBRADODefault(){
				
					return null;
				
				}
				public String TIPO_ALUMBRADOComment(){
				
				    return "";
				
				}
				public String TIPO_ALUMBRADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_ALUMBRADOOriginalDbColumnName(){
				
					return "TIPO_ALUMBRADO";
				
				}

				
			    public String MASCOTAS;

				public String getMASCOTAS () {
					return this.MASCOTAS;
				}

				public Boolean MASCOTASIsNullable(){
				    return true;
				}
				public Boolean MASCOTASIsKey(){
				    return false;
				}
				public Integer MASCOTASLength(){
				    return 9;
				}
				public Integer MASCOTASPrecision(){
				    return 0;
				}
				public String MASCOTASDefault(){
				
					return null;
				
				}
				public String MASCOTASComment(){
				
				    return "";
				
				}
				public String MASCOTASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MASCOTASOriginalDbColumnName(){
				
					return "MASCOTAS";
				
				}

				
			    public String MASCOTAS_VAC;

				public String getMASCOTAS_VAC () {
					return this.MASCOTAS_VAC;
				}

				public Boolean MASCOTAS_VACIsNullable(){
				    return true;
				}
				public Boolean MASCOTAS_VACIsKey(){
				    return false;
				}
				public Integer MASCOTAS_VACLength(){
				    return 6;
				}
				public Integer MASCOTAS_VACPrecision(){
				    return 0;
				}
				public String MASCOTAS_VACDefault(){
				
					return null;
				
				}
				public String MASCOTAS_VACComment(){
				
				    return "";
				
				}
				public String MASCOTAS_VACPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MASCOTAS_VACOriginalDbColumnName(){
				
					return "MASCOTAS_VAC";
				
				}

				
			    public String DISP_BASURAS;

				public String getDISP_BASURAS () {
					return this.DISP_BASURAS;
				}

				public Boolean DISP_BASURASIsNullable(){
				    return true;
				}
				public Boolean DISP_BASURASIsKey(){
				    return false;
				}
				public Integer DISP_BASURASLength(){
				    return 34;
				}
				public Integer DISP_BASURASPrecision(){
				    return 0;
				}
				public String DISP_BASURASDefault(){
				
					return null;
				
				}
				public String DISP_BASURASComment(){
				
				    return "";
				
				}
				public String DISP_BASURASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISP_BASURASOriginalDbColumnName(){
				
					return "DISP_BASURAS";
				
				}

				
			    public String VECTORES;

				public String getVECTORES () {
					return this.VECTORES;
				}

				public Boolean VECTORESIsNullable(){
				    return true;
				}
				public Boolean VECTORESIsKey(){
				    return false;
				}
				public Integer VECTORESLength(){
				    return 8;
				}
				public Integer VECTORESPrecision(){
				    return 0;
				}
				public String VECTORESDefault(){
				
					return null;
				
				}
				public String VECTORESComment(){
				
				    return "";
				
				}
				public String VECTORESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VECTORESOriginalDbColumnName(){
				
					return "VECTORES";
				
				}

				
			    public String PROB_ACCIDENTE;

				public String getPROB_ACCIDENTE () {
					return this.PROB_ACCIDENTE;
				}

				public Boolean PROB_ACCIDENTEIsNullable(){
				    return true;
				}
				public Boolean PROB_ACCIDENTEIsKey(){
				    return false;
				}
				public Integer PROB_ACCIDENTELength(){
				    return 25;
				}
				public Integer PROB_ACCIDENTEPrecision(){
				    return 0;
				}
				public String PROB_ACCIDENTEDefault(){
				
					return null;
				
				}
				public String PROB_ACCIDENTEComment(){
				
				    return "";
				
				}
				public String PROB_ACCIDENTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROB_ACCIDENTEOriginalDbColumnName(){
				
					return "PROB_ACCIDENTE";
				
				}

				
			    public String CONT_AMB;

				public String getCONT_AMB () {
					return this.CONT_AMB;
				}

				public Boolean CONT_AMBIsNullable(){
				    return true;
				}
				public Boolean CONT_AMBIsKey(){
				    return false;
				}
				public Integer CONT_AMBLength(){
				    return 4;
				}
				public Integer CONT_AMBPrecision(){
				    return 0;
				}
				public String CONT_AMBDefault(){
				
					return null;
				
				}
				public String CONT_AMBComment(){
				
				    return "";
				
				}
				public String CONT_AMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONT_AMBOriginalDbColumnName(){
				
					return "CONT_AMB";
				
				}

				
			    public String ABAST_AGUA;

				public String getABAST_AGUA () {
					return this.ABAST_AGUA;
				}

				public Boolean ABAST_AGUAIsNullable(){
				    return true;
				}
				public Boolean ABAST_AGUAIsKey(){
				    return false;
				}
				public Integer ABAST_AGUALength(){
				    return 23;
				}
				public Integer ABAST_AGUAPrecision(){
				    return 0;
				}
				public String ABAST_AGUADefault(){
				
					return null;
				
				}
				public String ABAST_AGUAComment(){
				
				    return "";
				
				}
				public String ABAST_AGUAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ABAST_AGUAOriginalDbColumnName(){
				
					return "ABAST_AGUA";
				
				}

				
			    public String TRATA_CASA_AGUA;

				public String getTRATA_CASA_AGUA () {
					return this.TRATA_CASA_AGUA;
				}

				public Boolean TRATA_CASA_AGUAIsNullable(){
				    return true;
				}
				public Boolean TRATA_CASA_AGUAIsKey(){
				    return false;
				}
				public Integer TRATA_CASA_AGUALength(){
				    return 10;
				}
				public Integer TRATA_CASA_AGUAPrecision(){
				    return 0;
				}
				public String TRATA_CASA_AGUADefault(){
				
					return null;
				
				}
				public String TRATA_CASA_AGUAComment(){
				
				    return "";
				
				}
				public String TRATA_CASA_AGUAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATA_CASA_AGUAOriginalDbColumnName(){
				
					return "TRATA_CASA_AGUA";
				
				}

				
			    public String TRATA_AGUA_FUENTE;

				public String getTRATA_AGUA_FUENTE () {
					return this.TRATA_AGUA_FUENTE;
				}

				public Boolean TRATA_AGUA_FUENTEIsNullable(){
				    return true;
				}
				public Boolean TRATA_AGUA_FUENTEIsKey(){
				    return false;
				}
				public Integer TRATA_AGUA_FUENTELength(){
				    return 4;
				}
				public Integer TRATA_AGUA_FUENTEPrecision(){
				    return 0;
				}
				public String TRATA_AGUA_FUENTEDefault(){
				
					return null;
				
				}
				public String TRATA_AGUA_FUENTEComment(){
				
				    return "";
				
				}
				public String TRATA_AGUA_FUENTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATA_AGUA_FUENTEOriginalDbColumnName(){
				
					return "TRATA_AGUA_FUENTE";
				
				}

				
			    public String TIPO_COCINA;

				public String getTIPO_COCINA () {
					return this.TIPO_COCINA;
				}

				public Boolean TIPO_COCINAIsNullable(){
				    return true;
				}
				public Boolean TIPO_COCINAIsKey(){
				    return false;
				}
				public Integer TIPO_COCINALength(){
				    return 12;
				}
				public Integer TIPO_COCINAPrecision(){
				    return 0;
				}
				public String TIPO_COCINADefault(){
				
					return null;
				
				}
				public String TIPO_COCINAComment(){
				
				    return "";
				
				}
				public String TIPO_COCINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_COCINAOriginalDbColumnName(){
				
					return "TIPO_COCINA";
				
				}

				
			    public String HUMO_VIVIENDA;

				public String getHUMO_VIVIENDA () {
					return this.HUMO_VIVIENDA;
				}

				public Boolean HUMO_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean HUMO_VIVIENDAIsKey(){
				    return false;
				}
				public Integer HUMO_VIVIENDALength(){
				    return 4;
				}
				public Integer HUMO_VIVIENDAPrecision(){
				    return 0;
				}
				public String HUMO_VIVIENDADefault(){
				
					return null;
				
				}
				public String HUMO_VIVIENDAComment(){
				
				    return "";
				
				}
				public String HUMO_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HUMO_VIVIENDAOriginalDbColumnName(){
				
					return "HUMO_VIVIENDA";
				
				}

				
			    public String COCINA_CONSTRU_MATERIAL;

				public String getCOCINA_CONSTRU_MATERIAL () {
					return this.COCINA_CONSTRU_MATERIAL;
				}

				public Boolean COCINA_CONSTRU_MATERIALIsNullable(){
				    return true;
				}
				public Boolean COCINA_CONSTRU_MATERIALIsKey(){
				    return false;
				}
				public Integer COCINA_CONSTRU_MATERIALLength(){
				    return 4;
				}
				public Integer COCINA_CONSTRU_MATERIALPrecision(){
				    return 0;
				}
				public String COCINA_CONSTRU_MATERIALDefault(){
				
					return null;
				
				}
				public String COCINA_CONSTRU_MATERIALComment(){
				
				    return "";
				
				}
				public String COCINA_CONSTRU_MATERIALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_CONSTRU_MATERIALOriginalDbColumnName(){
				
					return "COCINA_CONSTRU_MATERIAL";
				
				}

				
			    public String COCINA_VIVIENDA;

				public String getCOCINA_VIVIENDA () {
					return this.COCINA_VIVIENDA;
				}

				public Boolean COCINA_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean COCINA_VIVIENDAIsKey(){
				    return false;
				}
				public Integer COCINA_VIVIENDALength(){
				    return 4;
				}
				public Integer COCINA_VIVIENDAPrecision(){
				    return 0;
				}
				public String COCINA_VIVIENDADefault(){
				
					return null;
				
				}
				public String COCINA_VIVIENDAComment(){
				
				    return "";
				
				}
				public String COCINA_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_VIVIENDAOriginalDbColumnName(){
				
					return "COCINA_VIVIENDA";
				
				}

				
			    public String COMBUSTIBLE_COCINA;

				public String getCOMBUSTIBLE_COCINA () {
					return this.COMBUSTIBLE_COCINA;
				}

				public Boolean COMBUSTIBLE_COCINAIsNullable(){
				    return true;
				}
				public Boolean COMBUSTIBLE_COCINAIsKey(){
				    return false;
				}
				public Integer COMBUSTIBLE_COCINALength(){
				    return 12;
				}
				public Integer COMBUSTIBLE_COCINAPrecision(){
				    return 0;
				}
				public String COMBUSTIBLE_COCINADefault(){
				
					return null;
				
				}
				public String COMBUSTIBLE_COCINAComment(){
				
				    return "";
				
				}
				public String COMBUSTIBLE_COCINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMBUSTIBLE_COCINAOriginalDbColumnName(){
				
					return "COMBUSTIBLE_COCINA";
				
				}

				
			    public String COCINA_DORMITORIO;

				public String getCOCINA_DORMITORIO () {
					return this.COCINA_DORMITORIO;
				}

				public Boolean COCINA_DORMITORIOIsNullable(){
				    return true;
				}
				public Boolean COCINA_DORMITORIOIsKey(){
				    return false;
				}
				public Integer COCINA_DORMITORIOLength(){
				    return 4;
				}
				public Integer COCINA_DORMITORIOPrecision(){
				    return 0;
				}
				public String COCINA_DORMITORIODefault(){
				
					return null;
				
				}
				public String COCINA_DORMITORIOComment(){
				
				    return "";
				
				}
				public String COCINA_DORMITORIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_DORMITORIOOriginalDbColumnName(){
				
					return "COCINA_DORMITORIO";
				
				}

				
			    public String TIPO_PISOS;

				public String getTIPO_PISOS () {
					return this.TIPO_PISOS;
				}

				public Boolean TIPO_PISOSIsNullable(){
				    return true;
				}
				public Boolean TIPO_PISOSIsKey(){
				    return false;
				}
				public Integer TIPO_PISOSLength(){
				    return 9;
				}
				public Integer TIPO_PISOSPrecision(){
				    return 0;
				}
				public String TIPO_PISOSDefault(){
				
					return null;
				
				}
				public String TIPO_PISOSComment(){
				
				    return "";
				
				}
				public String TIPO_PISOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_PISOSOriginalDbColumnName(){
				
					return "TIPO_PISOS";
				
				}

				
			    public String TIPO_TECHOS;

				public String getTIPO_TECHOS () {
					return this.TIPO_TECHOS;
				}

				public Boolean TIPO_TECHOSIsNullable(){
				    return true;
				}
				public Boolean TIPO_TECHOSIsKey(){
				    return false;
				}
				public Integer TIPO_TECHOSLength(){
				    return 17;
				}
				public Integer TIPO_TECHOSPrecision(){
				    return 0;
				}
				public String TIPO_TECHOSDefault(){
				
					return null;
				
				}
				public String TIPO_TECHOSComment(){
				
				    return "";
				
				}
				public String TIPO_TECHOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_TECHOSOriginalDbColumnName(){
				
					return "TIPO_TECHOS";
				
				}

				
			    public String TIPO_PAREDES;

				public String getTIPO_PAREDES () {
					return this.TIPO_PAREDES;
				}

				public Boolean TIPO_PAREDESIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAREDESIsKey(){
				    return false;
				}
				public Integer TIPO_PAREDESLength(){
				    return 40;
				}
				public Integer TIPO_PAREDESPrecision(){
				    return 0;
				}
				public String TIPO_PAREDESDefault(){
				
					return null;
				
				}
				public String TIPO_PAREDESComment(){
				
				    return "";
				
				}
				public String TIPO_PAREDESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_PAREDESOriginalDbColumnName(){
				
					return "TIPO_PAREDES";
				
				}

				
			    public String VIVIENDA_2KM;

				public String getVIVIENDA_2KM () {
					return this.VIVIENDA_2KM;
				}

				public Boolean VIVIENDA_2KMIsNullable(){
				    return true;
				}
				public Boolean VIVIENDA_2KMIsKey(){
				    return false;
				}
				public Integer VIVIENDA_2KMLength(){
				    return 34;
				}
				public Integer VIVIENDA_2KMPrecision(){
				    return 0;
				}
				public String VIVIENDA_2KMDefault(){
				
					return null;
				
				}
				public String VIVIENDA_2KMComment(){
				
				    return "";
				
				}
				public String VIVIENDA_2KMPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIVIENDA_2KMOriginalDbColumnName(){
				
					return "VIVIENDA_2KM";
				
				}

				
			    public String BARRERAS_ACCESOS;

				public String getBARRERAS_ACCESOS () {
					return this.BARRERAS_ACCESOS;
				}

				public Boolean BARRERAS_ACCESOSIsNullable(){
				    return true;
				}
				public Boolean BARRERAS_ACCESOSIsKey(){
				    return false;
				}
				public Integer BARRERAS_ACCESOSLength(){
				    return 27;
				}
				public Integer BARRERAS_ACCESOSPrecision(){
				    return 0;
				}
				public String BARRERAS_ACCESOSDefault(){
				
					return null;
				
				}
				public String BARRERAS_ACCESOSComment(){
				
				    return "";
				
				}
				public String BARRERAS_ACCESOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BARRERAS_ACCESOSOriginalDbColumnName(){
				
					return "BARRERAS_ACCESOS";
				
				}

				
			    public String DIST_SALUD_CERCANO;

				public String getDIST_SALUD_CERCANO () {
					return this.DIST_SALUD_CERCANO;
				}

				public Boolean DIST_SALUD_CERCANOIsNullable(){
				    return true;
				}
				public Boolean DIST_SALUD_CERCANOIsKey(){
				    return false;
				}
				public Integer DIST_SALUD_CERCANOLength(){
				    return 12;
				}
				public Integer DIST_SALUD_CERCANOPrecision(){
				    return 0;
				}
				public String DIST_SALUD_CERCANODefault(){
				
					return null;
				
				}
				public String DIST_SALUD_CERCANOComment(){
				
				    return "";
				
				}
				public String DIST_SALUD_CERCANOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIST_SALUD_CERCANOOriginalDbColumnName(){
				
					return "DIST_SALUD_CERCANO";
				
				}

				
			    public String MEDIO_TRANSPORTE;

				public String getMEDIO_TRANSPORTE () {
					return this.MEDIO_TRANSPORTE;
				}

				public Boolean MEDIO_TRANSPORTEIsNullable(){
				    return true;
				}
				public Boolean MEDIO_TRANSPORTEIsKey(){
				    return false;
				}
				public Integer MEDIO_TRANSPORTELength(){
				    return 24;
				}
				public Integer MEDIO_TRANSPORTEPrecision(){
				    return 0;
				}
				public String MEDIO_TRANSPORTEDefault(){
				
					return null;
				
				}
				public String MEDIO_TRANSPORTEComment(){
				
				    return "";
				
				}
				public String MEDIO_TRANSPORTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MEDIO_TRANSPORTEOriginalDbColumnName(){
				
					return "MEDIO_TRANSPORTE";
				
				}

				
			    public String VIA_ACCESO;

				public String getVIA_ACCESO () {
					return this.VIA_ACCESO;
				}

				public Boolean VIA_ACCESOIsNullable(){
				    return true;
				}
				public Boolean VIA_ACCESOIsKey(){
				    return false;
				}
				public Integer VIA_ACCESOLength(){
				    return 16;
				}
				public Integer VIA_ACCESOPrecision(){
				    return 0;
				}
				public String VIA_ACCESODefault(){
				
					return null;
				
				}
				public String VIA_ACCESOComment(){
				
				    return "";
				
				}
				public String VIA_ACCESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIA_ACCESOOriginalDbColumnName(){
				
					return "VIA_ACCESO";
				
				}

				
			    public String NACIDOS_VIVOS;

				public String getNACIDOS_VIVOS () {
					return this.NACIDOS_VIVOS;
				}

				public Boolean NACIDOS_VIVOSIsNullable(){
				    return true;
				}
				public Boolean NACIDOS_VIVOSIsKey(){
				    return false;
				}
				public Integer NACIDOS_VIVOSLength(){
				    return 3;
				}
				public Integer NACIDOS_VIVOSPrecision(){
				    return 0;
				}
				public String NACIDOS_VIVOSDefault(){
				
					return null;
				
				}
				public String NACIDOS_VIVOSComment(){
				
				    return "";
				
				}
				public String NACIDOS_VIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NACIDOS_VIVOSOriginalDbColumnName(){
				
					return "NACIDOS_VIVOS";
				
				}

				
			    public String MORTALIDAD;

				public String getMORTALIDAD () {
					return this.MORTALIDAD;
				}

				public Boolean MORTALIDADIsNullable(){
				    return true;
				}
				public Boolean MORTALIDADIsKey(){
				    return false;
				}
				public Integer MORTALIDADLength(){
				    return 19;
				}
				public Integer MORTALIDADPrecision(){
				    return 0;
				}
				public String MORTALIDADDefault(){
				
					return null;
				
				}
				public String MORTALIDADComment(){
				
				    return "";
				
				}
				public String MORTALIDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORTALIDADOriginalDbColumnName(){
				
					return "MORTALIDAD";
				
				}

				
			    public String HIPERTENSION;

				public String getHIPERTENSION () {
					return this.HIPERTENSION;
				}

				public Boolean HIPERTENSIONIsNullable(){
				    return true;
				}
				public Boolean HIPERTENSIONIsKey(){
				    return false;
				}
				public Integer HIPERTENSIONLength(){
				    return 17;
				}
				public Integer HIPERTENSIONPrecision(){
				    return 0;
				}
				public String HIPERTENSIONDefault(){
				
					return null;
				
				}
				public String HIPERTENSIONComment(){
				
				    return "";
				
				}
				public String HIPERTENSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HIPERTENSIONOriginalDbColumnName(){
				
					return "HIPERTENSION";
				
				}

				
			    public String DIABETES;

				public String getDIABETES () {
					return this.DIABETES;
				}

				public Boolean DIABETESIsNullable(){
				    return true;
				}
				public Boolean DIABETESIsKey(){
				    return false;
				}
				public Integer DIABETESLength(){
				    return 9;
				}
				public Integer DIABETESPrecision(){
				    return 0;
				}
				public String DIABETESDefault(){
				
					return null;
				
				}
				public String DIABETESComment(){
				
				    return "";
				
				}
				public String DIABETESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIABETESOriginalDbColumnName(){
				
					return "DIABETES";
				
				}

				
			    public String ENF_CARDIACAS;

				public String getENF_CARDIACAS () {
					return this.ENF_CARDIACAS;
				}

				public Boolean ENF_CARDIACASIsNullable(){
				    return true;
				}
				public Boolean ENF_CARDIACASIsKey(){
				    return false;
				}
				public Integer ENF_CARDIACASLength(){
				    return 8;
				}
				public Integer ENF_CARDIACASPrecision(){
				    return 0;
				}
				public String ENF_CARDIACASDefault(){
				
					return null;
				
				}
				public String ENF_CARDIACASComment(){
				
				    return "";
				
				}
				public String ENF_CARDIACASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_CARDIACASOriginalDbColumnName(){
				
					return "ENF_CARDIACAS";
				
				}

				
			    public String CANCER;

				public String getCANCER () {
					return this.CANCER;
				}

				public Boolean CANCERIsNullable(){
				    return true;
				}
				public Boolean CANCERIsKey(){
				    return false;
				}
				public Integer CANCERLength(){
				    return 9;
				}
				public Integer CANCERPrecision(){
				    return 0;
				}
				public String CANCERDefault(){
				
					return null;
				
				}
				public String CANCERComment(){
				
				    return "";
				
				}
				public String CANCERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CANCEROriginalDbColumnName(){
				
					return "CANCER";
				
				}

				
			    public String ENF_RENAL;

				public String getENF_RENAL () {
					return this.ENF_RENAL;
				}

				public Boolean ENF_RENALIsNullable(){
				    return true;
				}
				public Boolean ENF_RENALIsKey(){
				    return false;
				}
				public Integer ENF_RENALLength(){
				    return 16;
				}
				public Integer ENF_RENALPrecision(){
				    return 0;
				}
				public String ENF_RENALDefault(){
				
					return null;
				
				}
				public String ENF_RENALComment(){
				
				    return "";
				
				}
				public String ENF_RENALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_RENALOriginalDbColumnName(){
				
					return "ENF_RENAL";
				
				}

				
			    public String ENF_CONGENITA;

				public String getENF_CONGENITA () {
					return this.ENF_CONGENITA;
				}

				public Boolean ENF_CONGENITAIsNullable(){
				    return true;
				}
				public Boolean ENF_CONGENITAIsKey(){
				    return false;
				}
				public Integer ENF_CONGENITALength(){
				    return 17;
				}
				public Integer ENF_CONGENITAPrecision(){
				    return 0;
				}
				public String ENF_CONGENITADefault(){
				
					return null;
				
				}
				public String ENF_CONGENITAComment(){
				
				    return "";
				
				}
				public String ENF_CONGENITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_CONGENITAOriginalDbColumnName(){
				
					return "ENF_CONGENITA";
				
				}

				
			    public String AYUDA_FAMI_NECES;

				public String getAYUDA_FAMI_NECES () {
					return this.AYUDA_FAMI_NECES;
				}

				public Boolean AYUDA_FAMI_NECESIsNullable(){
				    return true;
				}
				public Boolean AYUDA_FAMI_NECESIsKey(){
				    return false;
				}
				public Integer AYUDA_FAMI_NECESLength(){
				    return 10;
				}
				public Integer AYUDA_FAMI_NECESPrecision(){
				    return 0;
				}
				public String AYUDA_FAMI_NECESDefault(){
				
					return null;
				
				}
				public String AYUDA_FAMI_NECESComment(){
				
				    return "";
				
				}
				public String AYUDA_FAMI_NECESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String AYUDA_FAMI_NECESOriginalDbColumnName(){
				
					return "AYUDA_FAMI_NECES";
				
				}

				
			    public String AYUDA_FAMI_PROYEC;

				public String getAYUDA_FAMI_PROYEC () {
					return this.AYUDA_FAMI_PROYEC;
				}

				public Boolean AYUDA_FAMI_PROYECIsNullable(){
				    return true;
				}
				public Boolean AYUDA_FAMI_PROYECIsKey(){
				    return false;
				}
				public Integer AYUDA_FAMI_PROYECLength(){
				    return 14;
				}
				public Integer AYUDA_FAMI_PROYECPrecision(){
				    return 0;
				}
				public String AYUDA_FAMI_PROYECDefault(){
				
					return null;
				
				}
				public String AYUDA_FAMI_PROYECComment(){
				
				    return "";
				
				}
				public String AYUDA_FAMI_PROYECPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String AYUDA_FAMI_PROYECOriginalDbColumnName(){
				
					return "AYUDA_FAMI_PROYEC";
				
				}

				
			    public String APOYO_FAMI_SENTIM;

				public String getAPOYO_FAMI_SENTIM () {
					return this.APOYO_FAMI_SENTIM;
				}

				public Boolean APOYO_FAMI_SENTIMIsNullable(){
				    return true;
				}
				public Boolean APOYO_FAMI_SENTIMIsKey(){
				    return false;
				}
				public Integer APOYO_FAMI_SENTIMLength(){
				    return 14;
				}
				public Integer APOYO_FAMI_SENTIMPrecision(){
				    return 0;
				}
				public String APOYO_FAMI_SENTIMDefault(){
				
					return null;
				
				}
				public String APOYO_FAMI_SENTIMComment(){
				
				    return "";
				
				}
				public String APOYO_FAMI_SENTIMPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String APOYO_FAMI_SENTIMOriginalDbColumnName(){
				
					return "APOYO_FAMI_SENTIM";
				
				}

				
			    public String DECISIONES_HOGAR;

				public String getDECISIONES_HOGAR () {
					return this.DECISIONES_HOGAR;
				}

				public Boolean DECISIONES_HOGARIsNullable(){
				    return true;
				}
				public Boolean DECISIONES_HOGARIsKey(){
				    return false;
				}
				public Integer DECISIONES_HOGARLength(){
				    return 24;
				}
				public Integer DECISIONES_HOGARPrecision(){
				    return 0;
				}
				public String DECISIONES_HOGARDefault(){
				
					return null;
				
				}
				public String DECISIONES_HOGARComment(){
				
				    return "";
				
				}
				public String DECISIONES_HOGARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DECISIONES_HOGAROriginalDbColumnName(){
				
					return "DECISIONES_HOGAR";
				
				}

				
			    public String COM_INTRAFAMILIAR;

				public String getCOM_INTRAFAMILIAR () {
					return this.COM_INTRAFAMILIAR;
				}

				public Boolean COM_INTRAFAMILIARIsNullable(){
				    return true;
				}
				public Boolean COM_INTRAFAMILIARIsKey(){
				    return false;
				}
				public Integer COM_INTRAFAMILIARLength(){
				    return 10;
				}
				public Integer COM_INTRAFAMILIARPrecision(){
				    return 0;
				}
				public String COM_INTRAFAMILIARDefault(){
				
					return null;
				
				}
				public String COM_INTRAFAMILIARComment(){
				
				    return "";
				
				}
				public String COM_INTRAFAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COM_INTRAFAMILIAROriginalDbColumnName(){
				
					return "COM_INTRAFAMILIAR";
				
				}

				
			    public String ACT_FAMILIAR;

				public String getACT_FAMILIAR () {
					return this.ACT_FAMILIAR;
				}

				public Boolean ACT_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean ACT_FAMILIARIsKey(){
				    return false;
				}
				public Integer ACT_FAMILIARLength(){
				    return 4;
				}
				public Integer ACT_FAMILIARPrecision(){
				    return 0;
				}
				public String ACT_FAMILIARDefault(){
				
					return null;
				
				}
				public String ACT_FAMILIARComment(){
				
				    return "";
				
				}
				public String ACT_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_FAMILIAROriginalDbColumnName(){
				
					return "ACT_FAMILIAR";
				
				}

				
			    public String DISFRUTA_ACTIVIDADES;

				public String getDISFRUTA_ACTIVIDADES () {
					return this.DISFRUTA_ACTIVIDADES;
				}

				public Boolean DISFRUTA_ACTIVIDADESIsNullable(){
				    return true;
				}
				public Boolean DISFRUTA_ACTIVIDADESIsKey(){
				    return false;
				}
				public Integer DISFRUTA_ACTIVIDADESLength(){
				    return 4;
				}
				public Integer DISFRUTA_ACTIVIDADESPrecision(){
				    return 0;
				}
				public String DISFRUTA_ACTIVIDADESDefault(){
				
					return null;
				
				}
				public String DISFRUTA_ACTIVIDADESComment(){
				
				    return "";
				
				}
				public String DISFRUTA_ACTIVIDADESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISFRUTA_ACTIVIDADESOriginalDbColumnName(){
				
					return "DISFRUTA_ACTIVIDADES";
				
				}

				
			    public String CEPILLADO;

				public String getCEPILLADO () {
					return this.CEPILLADO;
				}

				public Boolean CEPILLADOIsNullable(){
				    return true;
				}
				public Boolean CEPILLADOIsKey(){
				    return false;
				}
				public Integer CEPILLADOLength(){
				    return 4;
				}
				public Integer CEPILLADOPrecision(){
				    return 0;
				}
				public String CEPILLADODefault(){
				
					return null;
				
				}
				public String CEPILLADOComment(){
				
				    return "";
				
				}
				public String CEPILLADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CEPILLADOOriginalDbColumnName(){
				
					return "CEPILLADO";
				
				}

				
			    public String NUM_CEPILLADO;

				public String getNUM_CEPILLADO () {
					return this.NUM_CEPILLADO;
				}

				public Boolean NUM_CEPILLADOIsNullable(){
				    return true;
				}
				public Boolean NUM_CEPILLADOIsKey(){
				    return false;
				}
				public Integer NUM_CEPILLADOLength(){
				    return 18;
				}
				public Integer NUM_CEPILLADOPrecision(){
				    return 0;
				}
				public String NUM_CEPILLADODefault(){
				
					return null;
				
				}
				public String NUM_CEPILLADOComment(){
				
				    return "";
				
				}
				public String NUM_CEPILLADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CEPILLADOOriginalDbColumnName(){
				
					return "NUM_CEPILLADO";
				
				}

				
			    public String CARIES;

				public String getCARIES () {
					return this.CARIES;
				}

				public Boolean CARIESIsNullable(){
				    return true;
				}
				public Boolean CARIESIsKey(){
				    return false;
				}
				public Integer CARIESLength(){
				    return 4;
				}
				public Integer CARIESPrecision(){
				    return 0;
				}
				public String CARIESDefault(){
				
					return null;
				
				}
				public String CARIESComment(){
				
				    return "";
				
				}
				public String CARIESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARIESOriginalDbColumnName(){
				
					return "CARIES";
				
				}

				
			    public String ODONTOLOGO;

				public String getODONTOLOGO () {
					return this.ODONTOLOGO;
				}

				public Boolean ODONTOLOGOIsNullable(){
				    return true;
				}
				public Boolean ODONTOLOGOIsKey(){
				    return false;
				}
				public Integer ODONTOLOGOLength(){
				    return 4;
				}
				public Integer ODONTOLOGOPrecision(){
				    return 0;
				}
				public String ODONTOLOGODefault(){
				
					return null;
				
				}
				public String ODONTOLOGOComment(){
				
				    return "";
				
				}
				public String ODONTOLOGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ODONTOLOGOOriginalDbColumnName(){
				
					return "ODONTOLOGO";
				
				}

				
			    public String FREC_ODONTOLOGO;

				public String getFREC_ODONTOLOGO () {
					return this.FREC_ODONTOLOGO;
				}

				public Boolean FREC_ODONTOLOGOIsNullable(){
				    return true;
				}
				public Boolean FREC_ODONTOLOGOIsKey(){
				    return false;
				}
				public Integer FREC_ODONTOLOGOLength(){
				    return 12;
				}
				public Integer FREC_ODONTOLOGOPrecision(){
				    return 0;
				}
				public String FREC_ODONTOLOGODefault(){
				
					return null;
				
				}
				public String FREC_ODONTOLOGOComment(){
				
				    return "";
				
				}
				public String FREC_ODONTOLOGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ODONTOLOGOOriginalDbColumnName(){
				
					return "FREC_ODONTOLOGO";
				
				}

				
			    public String FULTIMA_ODONTOLOGIA;

				public String getFULTIMA_ODONTOLOGIA () {
					return this.FULTIMA_ODONTOLOGIA;
				}

				public Boolean FULTIMA_ODONTOLOGIAIsNullable(){
				    return true;
				}
				public Boolean FULTIMA_ODONTOLOGIAIsKey(){
				    return false;
				}
				public Integer FULTIMA_ODONTOLOGIALength(){
				    return 12;
				}
				public Integer FULTIMA_ODONTOLOGIAPrecision(){
				    return 0;
				}
				public String FULTIMA_ODONTOLOGIADefault(){
				
					return null;
				
				}
				public String FULTIMA_ODONTOLOGIAComment(){
				
				    return "";
				
				}
				public String FULTIMA_ODONTOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FULTIMA_ODONTOLOGIAOriginalDbColumnName(){
				
					return "FULTIMA_ODONTOLOGIA";
				
				}

				
			    public String TOP_FLUOR;

				public String getTOP_FLUOR () {
					return this.TOP_FLUOR;
				}

				public Boolean TOP_FLUORIsNullable(){
				    return true;
				}
				public Boolean TOP_FLUORIsKey(){
				    return false;
				}
				public Integer TOP_FLUORLength(){
				    return 1;
				}
				public Integer TOP_FLUORPrecision(){
				    return 0;
				}
				public String TOP_FLUORDefault(){
				
					return null;
				
				}
				public String TOP_FLUORComment(){
				
				    return "";
				
				}
				public String TOP_FLUORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TOP_FLUOROriginalDbColumnName(){
				
					return "TOP_FLUOR";
				
				}

				
			    public String SEDA_DENTAL;

				public String getSEDA_DENTAL () {
					return this.SEDA_DENTAL;
				}

				public Boolean SEDA_DENTALIsNullable(){
				    return true;
				}
				public Boolean SEDA_DENTALIsKey(){
				    return false;
				}
				public Integer SEDA_DENTALLength(){
				    return 4;
				}
				public Integer SEDA_DENTALPrecision(){
				    return 0;
				}
				public String SEDA_DENTALDefault(){
				
					return null;
				
				}
				public String SEDA_DENTALComment(){
				
				    return "";
				
				}
				public String SEDA_DENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEDA_DENTALOriginalDbColumnName(){
				
					return "SEDA_DENTAL";
				
				}

				
			    public String SELLANTE;

				public String getSELLANTE () {
					return this.SELLANTE;
				}

				public Boolean SELLANTEIsNullable(){
				    return true;
				}
				public Boolean SELLANTEIsKey(){
				    return false;
				}
				public Integer SELLANTELength(){
				    return 1;
				}
				public Integer SELLANTEPrecision(){
				    return 0;
				}
				public String SELLANTEDefault(){
				
					return null;
				
				}
				public String SELLANTEComment(){
				
				    return "";
				
				}
				public String SELLANTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SELLANTEOriginalDbColumnName(){
				
					return "SELLANTE";
				
				}

				
			    public String PERDIDA_DIENTES;

				public String getPERDIDA_DIENTES () {
					return this.PERDIDA_DIENTES;
				}

				public Boolean PERDIDA_DIENTESIsNullable(){
				    return true;
				}
				public Boolean PERDIDA_DIENTESIsKey(){
				    return false;
				}
				public Integer PERDIDA_DIENTESLength(){
				    return 4;
				}
				public Integer PERDIDA_DIENTESPrecision(){
				    return 0;
				}
				public String PERDIDA_DIENTESDefault(){
				
					return null;
				
				}
				public String PERDIDA_DIENTESComment(){
				
				    return "";
				
				}
				public String PERDIDA_DIENTESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERDIDA_DIENTESOriginalDbColumnName(){
				
					return "PERDIDA_DIENTES";
				
				}

				
			    public String CARNE;

				public String getCARNE () {
					return this.CARNE;
				}

				public Boolean CARNEIsNullable(){
				    return true;
				}
				public Boolean CARNEIsKey(){
				    return false;
				}
				public Integer CARNELength(){
				    return 4;
				}
				public Integer CARNEPrecision(){
				    return 0;
				}
				public String CARNEDefault(){
				
					return null;
				
				}
				public String CARNEComment(){
				
				    return "";
				
				}
				public String CARNEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARNEOriginalDbColumnName(){
				
					return "CARNE";
				
				}

				
			    public String ESQUEMA_EDAD;

				public String getESQUEMA_EDAD () {
					return this.ESQUEMA_EDAD;
				}

				public Boolean ESQUEMA_EDADIsNullable(){
				    return true;
				}
				public Boolean ESQUEMA_EDADIsKey(){
				    return false;
				}
				public Integer ESQUEMA_EDADLength(){
				    return 4;
				}
				public Integer ESQUEMA_EDADPrecision(){
				    return 0;
				}
				public String ESQUEMA_EDADDefault(){
				
					return null;
				
				}
				public String ESQUEMA_EDADComment(){
				
				    return "";
				
				}
				public String ESQUEMA_EDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESQUEMA_EDADOriginalDbColumnName(){
				
					return "ESQUEMA_EDAD";
				
				}

				
			    public String ENF_TROPICAL;

				public String getENF_TROPICAL () {
					return this.ENF_TROPICAL;
				}

				public Boolean ENF_TROPICALIsNullable(){
				    return true;
				}
				public Boolean ENF_TROPICALIsKey(){
				    return false;
				}
				public Integer ENF_TROPICALLength(){
				    return 17;
				}
				public Integer ENF_TROPICALPrecision(){
				    return 0;
				}
				public String ENF_TROPICALDefault(){
				
					return null;
				
				}
				public String ENF_TROPICALComment(){
				
				    return "";
				
				}
				public String ENF_TROPICALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_TROPICALOriginalDbColumnName(){
				
					return "ENF_TROPICAL";
				
				}

				
			    public String ENF_TRANSMISION;

				public String getENF_TRANSMISION () {
					return this.ENF_TRANSMISION;
				}

				public Boolean ENF_TRANSMISIONIsNullable(){
				    return true;
				}
				public Boolean ENF_TRANSMISIONIsKey(){
				    return false;
				}
				public Integer ENF_TRANSMISIONLength(){
				    return 4;
				}
				public Integer ENF_TRANSMISIONPrecision(){
				    return 0;
				}
				public String ENF_TRANSMISIONDefault(){
				
					return null;
				
				}
				public String ENF_TRANSMISIONComment(){
				
				    return "";
				
				}
				public String ENF_TRANSMISIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_TRANSMISIONOriginalDbColumnName(){
				
					return "ENF_TRANSMISION";
				
				}

				
			    public String TRATAMIENTO_ETS;

				public String getTRATAMIENTO_ETS () {
					return this.TRATAMIENTO_ETS;
				}

				public Boolean TRATAMIENTO_ETSIsNullable(){
				    return true;
				}
				public Boolean TRATAMIENTO_ETSIsKey(){
				    return false;
				}
				public Integer TRATAMIENTO_ETSLength(){
				    return 1;
				}
				public Integer TRATAMIENTO_ETSPrecision(){
				    return 0;
				}
				public String TRATAMIENTO_ETSDefault(){
				
					return null;
				
				}
				public String TRATAMIENTO_ETSComment(){
				
				    return "";
				
				}
				public String TRATAMIENTO_ETSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATAMIENTO_ETSOriginalDbColumnName(){
				
					return "TRATAMIENTO_ETS";
				
				}

				
			    public String PROBLEMAS_VISUALES;

				public String getPROBLEMAS_VISUALES () {
					return this.PROBLEMAS_VISUALES;
				}

				public Boolean PROBLEMAS_VISUALESIsNullable(){
				    return true;
				}
				public Boolean PROBLEMAS_VISUALESIsKey(){
				    return false;
				}
				public Integer PROBLEMAS_VISUALESLength(){
				    return 4;
				}
				public Integer PROBLEMAS_VISUALESPrecision(){
				    return 0;
				}
				public String PROBLEMAS_VISUALESDefault(){
				
					return null;
				
				}
				public String PROBLEMAS_VISUALESComment(){
				
				    return "";
				
				}
				public String PROBLEMAS_VISUALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROBLEMAS_VISUALESOriginalDbColumnName(){
				
					return "PROBLEMAS_VISUALES";
				
				}

				
			    public String PROBLEMAS_AUDITIVOS;

				public String getPROBLEMAS_AUDITIVOS () {
					return this.PROBLEMAS_AUDITIVOS;
				}

				public Boolean PROBLEMAS_AUDITIVOSIsNullable(){
				    return true;
				}
				public Boolean PROBLEMAS_AUDITIVOSIsKey(){
				    return false;
				}
				public Integer PROBLEMAS_AUDITIVOSLength(){
				    return 4;
				}
				public Integer PROBLEMAS_AUDITIVOSPrecision(){
				    return 0;
				}
				public String PROBLEMAS_AUDITIVOSDefault(){
				
					return null;
				
				}
				public String PROBLEMAS_AUDITIVOSComment(){
				
				    return "";
				
				}
				public String PROBLEMAS_AUDITIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROBLEMAS_AUDITIVOSOriginalDbColumnName(){
				
					return "PROBLEMAS_AUDITIVOS";
				
				}

				
			    public String RENDIMIENTO_ESTUDIOS;

				public String getRENDIMIENTO_ESTUDIOS () {
					return this.RENDIMIENTO_ESTUDIOS;
				}

				public Boolean RENDIMIENTO_ESTUDIOSIsNullable(){
				    return true;
				}
				public Boolean RENDIMIENTO_ESTUDIOSIsKey(){
				    return false;
				}
				public Integer RENDIMIENTO_ESTUDIOSLength(){
				    return 1;
				}
				public Integer RENDIMIENTO_ESTUDIOSPrecision(){
				    return 0;
				}
				public String RENDIMIENTO_ESTUDIOSDefault(){
				
					return null;
				
				}
				public String RENDIMIENTO_ESTUDIOSComment(){
				
				    return "";
				
				}
				public String RENDIMIENTO_ESTUDIOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RENDIMIENTO_ESTUDIOSOriginalDbColumnName(){
				
					return "RENDIMIENTO_ESTUDIOS";
				
				}

				
			    public String ACT_EXTRACURRICULAR;

				public String getACT_EXTRACURRICULAR () {
					return this.ACT_EXTRACURRICULAR;
				}

				public Boolean ACT_EXTRACURRICULARIsNullable(){
				    return true;
				}
				public Boolean ACT_EXTRACURRICULARIsKey(){
				    return false;
				}
				public Integer ACT_EXTRACURRICULARLength(){
				    return 1;
				}
				public Integer ACT_EXTRACURRICULARPrecision(){
				    return 0;
				}
				public String ACT_EXTRACURRICULARDefault(){
				
					return null;
				
				}
				public String ACT_EXTRACURRICULARComment(){
				
				    return "";
				
				}
				public String ACT_EXTRACURRICULARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_EXTRACURRICULAROriginalDbColumnName(){
				
					return "ACT_EXTRACURRICULAR";
				
				}

				
			    public String PRESION_SISTOLICA;

				public String getPRESION_SISTOLICA () {
					return this.PRESION_SISTOLICA;
				}

				public Boolean PRESION_SISTOLICAIsNullable(){
				    return true;
				}
				public Boolean PRESION_SISTOLICAIsKey(){
				    return false;
				}
				public Integer PRESION_SISTOLICALength(){
				    return 5;
				}
				public Integer PRESION_SISTOLICAPrecision(){
				    return 0;
				}
				public String PRESION_SISTOLICADefault(){
				
					return null;
				
				}
				public String PRESION_SISTOLICAComment(){
				
				    return "";
				
				}
				public String PRESION_SISTOLICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PRESION_SISTOLICAOriginalDbColumnName(){
				
					return "PRESION_SISTOLICA";
				
				}

				
			    public String PRESION_DIASTOLICA;

				public String getPRESION_DIASTOLICA () {
					return this.PRESION_DIASTOLICA;
				}

				public Boolean PRESION_DIASTOLICAIsNullable(){
				    return true;
				}
				public Boolean PRESION_DIASTOLICAIsKey(){
				    return false;
				}
				public Integer PRESION_DIASTOLICALength(){
				    return 4;
				}
				public Integer PRESION_DIASTOLICAPrecision(){
				    return 0;
				}
				public String PRESION_DIASTOLICADefault(){
				
					return null;
				
				}
				public String PRESION_DIASTOLICAComment(){
				
				    return "";
				
				}
				public String PRESION_DIASTOLICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PRESION_DIASTOLICAOriginalDbColumnName(){
				
					return "PRESION_DIASTOLICA";
				
				}

				
			    public String ACT_FISICA;

				public String getACT_FISICA () {
					return this.ACT_FISICA;
				}

				public Boolean ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean ACT_FISICAIsKey(){
				    return false;
				}
				public Integer ACT_FISICALength(){
				    return 4;
				}
				public Integer ACT_FISICAPrecision(){
				    return 0;
				}
				public String ACT_FISICADefault(){
				
					return null;
				
				}
				public String ACT_FISICAComment(){
				
				    return "";
				
				}
				public String ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_FISICAOriginalDbColumnName(){
				
					return "ACT_FISICA";
				
				}

				
			    public String FREC_ACT_FISICA;

				public String getFREC_ACT_FISICA () {
					return this.FREC_ACT_FISICA;
				}

				public Boolean FREC_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean FREC_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer FREC_ACT_FISICALength(){
				    return 29;
				}
				public Integer FREC_ACT_FISICAPrecision(){
				    return 0;
				}
				public String FREC_ACT_FISICADefault(){
				
					return null;
				
				}
				public String FREC_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String FREC_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ACT_FISICAOriginalDbColumnName(){
				
					return "FREC_ACT_FISICA";
				
				}

				
			    public String DURACION_ACT_FISICA;

				public String getDURACION_ACT_FISICA () {
					return this.DURACION_ACT_FISICA;
				}

				public Boolean DURACION_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean DURACION_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer DURACION_ACT_FISICALength(){
				    return 11;
				}
				public Integer DURACION_ACT_FISICAPrecision(){
				    return 0;
				}
				public String DURACION_ACT_FISICADefault(){
				
					return null;
				
				}
				public String DURACION_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String DURACION_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DURACION_ACT_FISICAOriginalDbColumnName(){
				
					return "DURACION_ACT_FISICA";
				
				}

				
			    public String INT_ACT_FISICA;

				public String getINT_ACT_FISICA () {
					return this.INT_ACT_FISICA;
				}

				public Boolean INT_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean INT_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer INT_ACT_FISICALength(){
				    return 11;
				}
				public Integer INT_ACT_FISICAPrecision(){
				    return 0;
				}
				public String INT_ACT_FISICADefault(){
				
					return null;
				
				}
				public String INT_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String INT_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String INT_ACT_FISICAOriginalDbColumnName(){
				
					return "INT_ACT_FISICA";
				
				}

				
			    public String CAIDAS;

				public String getCAIDAS () {
					return this.CAIDAS;
				}

				public Boolean CAIDASIsNullable(){
				    return true;
				}
				public Boolean CAIDASIsKey(){
				    return false;
				}
				public Integer CAIDASLength(){
				    return 4;
				}
				public Integer CAIDASPrecision(){
				    return 0;
				}
				public String CAIDASDefault(){
				
					return null;
				
				}
				public String CAIDASComment(){
				
				    return "";
				
				}
				public String CAIDASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CAIDASOriginalDbColumnName(){
				
					return "CAIDAS";
				
				}

				
			    public String DISC_FISICA;

				public String getDISC_FISICA () {
					return this.DISC_FISICA;
				}

				public Boolean DISC_FISICAIsNullable(){
				    return true;
				}
				public Boolean DISC_FISICAIsKey(){
				    return false;
				}
				public Integer DISC_FISICALength(){
				    return 9;
				}
				public Integer DISC_FISICAPrecision(){
				    return 0;
				}
				public String DISC_FISICADefault(){
				
					return null;
				
				}
				public String DISC_FISICAComment(){
				
				    return "";
				
				}
				public String DISC_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISC_FISICAOriginalDbColumnName(){
				
					return "DISC_FISICA";
				
				}

				
			    public String DISC_MENTAL;

				public String getDISC_MENTAL () {
					return this.DISC_MENTAL;
				}

				public Boolean DISC_MENTALIsNullable(){
				    return true;
				}
				public Boolean DISC_MENTALIsKey(){
				    return false;
				}
				public Integer DISC_MENTALLength(){
				    return 9;
				}
				public Integer DISC_MENTALPrecision(){
				    return 0;
				}
				public String DISC_MENTALDefault(){
				
					return null;
				
				}
				public String DISC_MENTALComment(){
				
				    return "";
				
				}
				public String DISC_MENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISC_MENTALOriginalDbColumnName(){
				
					return "DISC_MENTAL";
				
				}

				
			    public String EDAD_MESTRUACION;

				public String getEDAD_MESTRUACION () {
					return this.EDAD_MESTRUACION;
				}

				public Boolean EDAD_MESTRUACIONIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESTRUACIONIsKey(){
				    return false;
				}
				public Integer EDAD_MESTRUACIONLength(){
				    return 1;
				}
				public Integer EDAD_MESTRUACIONPrecision(){
				    return 0;
				}
				public String EDAD_MESTRUACIONDefault(){
				
					return null;
				
				}
				public String EDAD_MESTRUACIONComment(){
				
				    return "";
				
				}
				public String EDAD_MESTRUACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EDAD_MESTRUACIONOriginalDbColumnName(){
				
					return "EDAD_MESTRUACION";
				
				}

				
			    public String FECHA_REGLA;

				public String getFECHA_REGLA () {
					return this.FECHA_REGLA;
				}

				public Boolean FECHA_REGLAIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGLAIsKey(){
				    return false;
				}
				public Integer FECHA_REGLALength(){
				    return 1;
				}
				public Integer FECHA_REGLAPrecision(){
				    return 0;
				}
				public String FECHA_REGLADefault(){
				
					return null;
				
				}
				public String FECHA_REGLAComment(){
				
				    return "";
				
				}
				public String FECHA_REGLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_REGLAOriginalDbColumnName(){
				
					return "FECHA_REGLA";
				
				}

				
			    public String PARACLINICOS;

				public String getPARACLINICOS () {
					return this.PARACLINICOS;
				}

				public Boolean PARACLINICOSIsNullable(){
				    return true;
				}
				public Boolean PARACLINICOSIsKey(){
				    return false;
				}
				public Integer PARACLINICOSLength(){
				    return 1;
				}
				public Integer PARACLINICOSPrecision(){
				    return 0;
				}
				public String PARACLINICOSDefault(){
				
					return null;
				
				}
				public String PARACLINICOSComment(){
				
				    return "";
				
				}
				public String PARACLINICOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PARACLINICOSOriginalDbColumnName(){
				
					return "PARACLINICOS";
				
				}

				
			    public String CITOLOGIA;

				public String getCITOLOGIA () {
					return this.CITOLOGIA;
				}

				public Boolean CITOLOGIAIsNullable(){
				    return true;
				}
				public Boolean CITOLOGIAIsKey(){
				    return false;
				}
				public Integer CITOLOGIALength(){
				    return 1;
				}
				public Integer CITOLOGIAPrecision(){
				    return 0;
				}
				public String CITOLOGIADefault(){
				
					return null;
				
				}
				public String CITOLOGIAComment(){
				
				    return "";
				
				}
				public String CITOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CITOLOGIAOriginalDbColumnName(){
				
					return "CITOLOGIA";
				
				}

				
			    public String FECHA_CITOLOGIA;

				public String getFECHA_CITOLOGIA () {
					return this.FECHA_CITOLOGIA;
				}

				public Boolean FECHA_CITOLOGIAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CITOLOGIAIsKey(){
				    return false;
				}
				public Integer FECHA_CITOLOGIALength(){
				    return 1;
				}
				public Integer FECHA_CITOLOGIAPrecision(){
				    return 0;
				}
				public String FECHA_CITOLOGIADefault(){
				
					return null;
				
				}
				public String FECHA_CITOLOGIAComment(){
				
				    return "";
				
				}
				public String FECHA_CITOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CITOLOGIAOriginalDbColumnName(){
				
					return "FECHA_CITOLOGIA";
				
				}

				
			    public String EXAMEN_SENO;

				public String getEXAMEN_SENO () {
					return this.EXAMEN_SENO;
				}

				public Boolean EXAMEN_SENOIsNullable(){
				    return true;
				}
				public Boolean EXAMEN_SENOIsKey(){
				    return false;
				}
				public Integer EXAMEN_SENOLength(){
				    return 1;
				}
				public Integer EXAMEN_SENOPrecision(){
				    return 0;
				}
				public String EXAMEN_SENODefault(){
				
					return null;
				
				}
				public String EXAMEN_SENOComment(){
				
				    return "";
				
				}
				public String EXAMEN_SENOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXAMEN_SENOOriginalDbColumnName(){
				
					return "EXAMEN_SENO";
				
				}

				
			    public String PLAN_FAMILIAR;

				public String getPLAN_FAMILIAR () {
					return this.PLAN_FAMILIAR;
				}

				public Boolean PLAN_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean PLAN_FAMILIARIsKey(){
				    return false;
				}
				public Integer PLAN_FAMILIARLength(){
				    return 1;
				}
				public Integer PLAN_FAMILIARPrecision(){
				    return 0;
				}
				public String PLAN_FAMILIARDefault(){
				
					return null;
				
				}
				public String PLAN_FAMILIARComment(){
				
				    return "";
				
				}
				public String PLAN_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PLAN_FAMILIAROriginalDbColumnName(){
				
					return "PLAN_FAMILIAR";
				
				}

				
			    public String METODO_PLANF;

				public String getMETODO_PLANF () {
					return this.METODO_PLANF;
				}

				public Boolean METODO_PLANFIsNullable(){
				    return true;
				}
				public Boolean METODO_PLANFIsKey(){
				    return false;
				}
				public Integer METODO_PLANFLength(){
				    return 1;
				}
				public Integer METODO_PLANFPrecision(){
				    return 0;
				}
				public String METODO_PLANFDefault(){
				
					return null;
				
				}
				public String METODO_PLANFComment(){
				
				    return "";
				
				}
				public String METODO_PLANFPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String METODO_PLANFOriginalDbColumnName(){
				
					return "METODO_PLANF";
				
				}

				
			    public String TIEMPO_MET_ANIOS;

				public String getTIEMPO_MET_ANIOS () {
					return this.TIEMPO_MET_ANIOS;
				}

				public Boolean TIEMPO_MET_ANIOSIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_ANIOSIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_ANIOSLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_ANIOSPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_ANIOSDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_ANIOSComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_ANIOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_ANIOSOriginalDbColumnName(){
				
					return "TIEMPO_MET_ANIOS";
				
				}

				
			    public String TIEMPO_MET_MESES;

				public String getTIEMPO_MET_MESES () {
					return this.TIEMPO_MET_MESES;
				}

				public Boolean TIEMPO_MET_MESESIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_MESESIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_MESESLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_MESESPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_MESESDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_MESESComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_MESESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_MESESOriginalDbColumnName(){
				
					return "TIEMPO_MET_MESES";
				
				}

				
			    public String TIEMPO_MET_DIAS;

				public String getTIEMPO_MET_DIAS () {
					return this.TIEMPO_MET_DIAS;
				}

				public Boolean TIEMPO_MET_DIASIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_DIASIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_DIASLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_DIASPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_DIASDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_DIASComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_DIASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_DIASOriginalDbColumnName(){
				
					return "TIEMPO_MET_DIAS";
				
				}

				
			    public String CONTR_PLANF_FAMILIAR;

				public String getCONTR_PLANF_FAMILIAR () {
					return this.CONTR_PLANF_FAMILIAR;
				}

				public Boolean CONTR_PLANF_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean CONTR_PLANF_FAMILIARIsKey(){
				    return false;
				}
				public Integer CONTR_PLANF_FAMILIARLength(){
				    return 1;
				}
				public Integer CONTR_PLANF_FAMILIARPrecision(){
				    return 0;
				}
				public String CONTR_PLANF_FAMILIARDefault(){
				
					return null;
				
				}
				public String CONTR_PLANF_FAMILIARComment(){
				
				    return "";
				
				}
				public String CONTR_PLANF_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTR_PLANF_FAMILIAROriginalDbColumnName(){
				
					return "CONTR_PLANF_FAMILIAR";
				
				}

				
			    public String EXAMEN_PROSTATA;

				public String getEXAMEN_PROSTATA () {
					return this.EXAMEN_PROSTATA;
				}

				public Boolean EXAMEN_PROSTATAIsNullable(){
				    return true;
				}
				public Boolean EXAMEN_PROSTATAIsKey(){
				    return false;
				}
				public Integer EXAMEN_PROSTATALength(){
				    return 4;
				}
				public Integer EXAMEN_PROSTATAPrecision(){
				    return 0;
				}
				public String EXAMEN_PROSTATADefault(){
				
					return null;
				
				}
				public String EXAMEN_PROSTATAComment(){
				
				    return "";
				
				}
				public String EXAMEN_PROSTATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXAMEN_PROSTATAOriginalDbColumnName(){
				
					return "EXAMEN_PROSTATA";
				
				}

				
			    public String PSA;

				public String getPSA () {
					return this.PSA;
				}

				public Boolean PSAIsNullable(){
				    return true;
				}
				public Boolean PSAIsKey(){
				    return false;
				}
				public Integer PSALength(){
				    return 4;
				}
				public Integer PSAPrecision(){
				    return 0;
				}
				public String PSADefault(){
				
					return null;
				
				}
				public String PSAComment(){
				
				    return "";
				
				}
				public String PSAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PSAOriginalDbColumnName(){
				
					return "PSA";
				
				}

				
			    public String FECHA_EXAMEN;

				public String getFECHA_EXAMEN () {
					return this.FECHA_EXAMEN;
				}

				public Boolean FECHA_EXAMENIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXAMENIsKey(){
				    return false;
				}
				public Integer FECHA_EXAMENLength(){
				    return 1;
				}
				public Integer FECHA_EXAMENPrecision(){
				    return 0;
				}
				public String FECHA_EXAMENDefault(){
				
					return null;
				
				}
				public String FECHA_EXAMENComment(){
				
				    return "";
				
				}
				public String FECHA_EXAMENPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXAMENOriginalDbColumnName(){
				
					return "FECHA_EXAMEN";
				
				}

				
			    public String GESTA_CONFIRMADA;

				public String getGESTA_CONFIRMADA () {
					return this.GESTA_CONFIRMADA;
				}

				public Boolean GESTA_CONFIRMADAIsNullable(){
				    return true;
				}
				public Boolean GESTA_CONFIRMADAIsKey(){
				    return false;
				}
				public Integer GESTA_CONFIRMADALength(){
				    return 1;
				}
				public Integer GESTA_CONFIRMADAPrecision(){
				    return 0;
				}
				public String GESTA_CONFIRMADADefault(){
				
					return null;
				
				}
				public String GESTA_CONFIRMADAComment(){
				
				    return "";
				
				}
				public String GESTA_CONFIRMADAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GESTA_CONFIRMADAOriginalDbColumnName(){
				
					return "GESTA_CONFIRMADA";
				
				}

				
			    public String GESTA_PLANEADA;

				public String getGESTA_PLANEADA () {
					return this.GESTA_PLANEADA;
				}

				public Boolean GESTA_PLANEADAIsNullable(){
				    return true;
				}
				public Boolean GESTA_PLANEADAIsKey(){
				    return false;
				}
				public Integer GESTA_PLANEADALength(){
				    return 1;
				}
				public Integer GESTA_PLANEADAPrecision(){
				    return 0;
				}
				public String GESTA_PLANEADADefault(){
				
					return null;
				
				}
				public String GESTA_PLANEADAComment(){
				
				    return "";
				
				}
				public String GESTA_PLANEADAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GESTA_PLANEADAOriginalDbColumnName(){
				
					return "GESTA_PLANEADA";
				
				}

				
			    public String CONVIVENCIA_PAREJA;

				public String getCONVIVENCIA_PAREJA () {
					return this.CONVIVENCIA_PAREJA;
				}

				public Boolean CONVIVENCIA_PAREJAIsNullable(){
				    return true;
				}
				public Boolean CONVIVENCIA_PAREJAIsKey(){
				    return false;
				}
				public Integer CONVIVENCIA_PAREJALength(){
				    return 1;
				}
				public Integer CONVIVENCIA_PAREJAPrecision(){
				    return 0;
				}
				public String CONVIVENCIA_PAREJADefault(){
				
					return null;
				
				}
				public String CONVIVENCIA_PAREJAComment(){
				
				    return "";
				
				}
				public String CONVIVENCIA_PAREJAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONVIVENCIA_PAREJAOriginalDbColumnName(){
				
					return "CONVIVENCIA_PAREJA";
				
				}

				
			    public String FUR;

				public String getFUR () {
					return this.FUR;
				}

				public Boolean FURIsNullable(){
				    return true;
				}
				public Boolean FURIsKey(){
				    return false;
				}
				public Integer FURLength(){
				    return 1;
				}
				public Integer FURPrecision(){
				    return 0;
				}
				public String FURDefault(){
				
					return null;
				
				}
				public String FURComment(){
				
				    return "";
				
				}
				public String FURPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FUROriginalDbColumnName(){
				
					return "FUR";
				
				}

				
			    public String SEMANAS;

				public String getSEMANAS () {
					return this.SEMANAS;
				}

				public Boolean SEMANASIsNullable(){
				    return true;
				}
				public Boolean SEMANASIsKey(){
				    return false;
				}
				public Integer SEMANASLength(){
				    return 1;
				}
				public Integer SEMANASPrecision(){
				    return 0;
				}
				public String SEMANASDefault(){
				
					return null;
				
				}
				public String SEMANASComment(){
				
				    return "";
				
				}
				public String SEMANASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEMANASOriginalDbColumnName(){
				
					return "SEMANAS";
				
				}

				
			    public String FECHA_PARTO;

				public String getFECHA_PARTO () {
					return this.FECHA_PARTO;
				}

				public Boolean FECHA_PARTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_PARTOIsKey(){
				    return false;
				}
				public Integer FECHA_PARTOLength(){
				    return 1;
				}
				public Integer FECHA_PARTOPrecision(){
				    return 0;
				}
				public String FECHA_PARTODefault(){
				
					return null;
				
				}
				public String FECHA_PARTOComment(){
				
				    return "";
				
				}
				public String FECHA_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_PARTOOriginalDbColumnName(){
				
					return "FECHA_PARTO";
				
				}

				
			    public String GANANCIA_PESP;

				public String getGANANCIA_PESP () {
					return this.GANANCIA_PESP;
				}

				public Boolean GANANCIA_PESPIsNullable(){
				    return true;
				}
				public Boolean GANANCIA_PESPIsKey(){
				    return false;
				}
				public Integer GANANCIA_PESPLength(){
				    return 1;
				}
				public Integer GANANCIA_PESPPrecision(){
				    return 0;
				}
				public String GANANCIA_PESPDefault(){
				
					return null;
				
				}
				public String GANANCIA_PESPComment(){
				
				    return "";
				
				}
				public String GANANCIA_PESPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GANANCIA_PESPOriginalDbColumnName(){
				
					return "GANANCIA_PESP";
				
				}

				
			    public String CARNE_EMB;

				public String getCARNE_EMB () {
					return this.CARNE_EMB;
				}

				public Boolean CARNE_EMBIsNullable(){
				    return true;
				}
				public Boolean CARNE_EMBIsKey(){
				    return false;
				}
				public Integer CARNE_EMBLength(){
				    return 1;
				}
				public Integer CARNE_EMBPrecision(){
				    return 0;
				}
				public String CARNE_EMBDefault(){
				
					return null;
				
				}
				public String CARNE_EMBComment(){
				
				    return "";
				
				}
				public String CARNE_EMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARNE_EMBOriginalDbColumnName(){
				
					return "CARNE_EMB";
				
				}

				
			    public String CONTROL_PRENATAL;

				public String getCONTROL_PRENATAL () {
					return this.CONTROL_PRENATAL;
				}

				public Boolean CONTROL_PRENATALIsNullable(){
				    return true;
				}
				public Boolean CONTROL_PRENATALIsKey(){
				    return false;
				}
				public Integer CONTROL_PRENATALLength(){
				    return 1;
				}
				public Integer CONTROL_PRENATALPrecision(){
				    return 0;
				}
				public String CONTROL_PRENATALDefault(){
				
					return null;
				
				}
				public String CONTROL_PRENATALComment(){
				
				    return "";
				
				}
				public String CONTROL_PRENATALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTROL_PRENATALOriginalDbColumnName(){
				
					return "CONTROL_PRENATAL";
				
				}

				
			    public String QUIEN_CONTROL;

				public String getQUIEN_CONTROL () {
					return this.QUIEN_CONTROL;
				}

				public Boolean QUIEN_CONTROLIsNullable(){
				    return true;
				}
				public Boolean QUIEN_CONTROLIsKey(){
				    return false;
				}
				public Integer QUIEN_CONTROLLength(){
				    return 1;
				}
				public Integer QUIEN_CONTROLPrecision(){
				    return 0;
				}
				public String QUIEN_CONTROLDefault(){
				
					return null;
				
				}
				public String QUIEN_CONTROLComment(){
				
				    return "";
				
				}
				public String QUIEN_CONTROLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_CONTROLOriginalDbColumnName(){
				
					return "QUIEN_CONTROL";
				
				}

				
			    public String TRIMESTRE_ING_CONTROL;

				public String getTRIMESTRE_ING_CONTROL () {
					return this.TRIMESTRE_ING_CONTROL;
				}

				public Boolean TRIMESTRE_ING_CONTROLIsNullable(){
				    return true;
				}
				public Boolean TRIMESTRE_ING_CONTROLIsKey(){
				    return false;
				}
				public Integer TRIMESTRE_ING_CONTROLLength(){
				    return 1;
				}
				public Integer TRIMESTRE_ING_CONTROLPrecision(){
				    return 0;
				}
				public String TRIMESTRE_ING_CONTROLDefault(){
				
					return null;
				
				}
				public String TRIMESTRE_ING_CONTROLComment(){
				
				    return "";
				
				}
				public String TRIMESTRE_ING_CONTROLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRIMESTRE_ING_CONTROLOriginalDbColumnName(){
				
					return "TRIMESTRE_ING_CONTROL";
				
				}

				
			    public String FECHA_CONTROL_INI;

				public String getFECHA_CONTROL_INI () {
					return this.FECHA_CONTROL_INI;
				}

				public Boolean FECHA_CONTROL_INIIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONTROL_INIIsKey(){
				    return false;
				}
				public Integer FECHA_CONTROL_INILength(){
				    return 1;
				}
				public Integer FECHA_CONTROL_INIPrecision(){
				    return 0;
				}
				public String FECHA_CONTROL_INIDefault(){
				
					return null;
				
				}
				public String FECHA_CONTROL_INIComment(){
				
				    return "";
				
				}
				public String FECHA_CONTROL_INIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CONTROL_INIOriginalDbColumnName(){
				
					return "FECHA_CONTROL_INI";
				
				}

				
			    public String VAL_ODONTOLOGIA;

				public String getVAL_ODONTOLOGIA () {
					return this.VAL_ODONTOLOGIA;
				}

				public Boolean VAL_ODONTOLOGIAIsNullable(){
				    return true;
				}
				public Boolean VAL_ODONTOLOGIAIsKey(){
				    return false;
				}
				public Integer VAL_ODONTOLOGIALength(){
				    return 1;
				}
				public Integer VAL_ODONTOLOGIAPrecision(){
				    return 0;
				}
				public String VAL_ODONTOLOGIADefault(){
				
					return null;
				
				}
				public String VAL_ODONTOLOGIAComment(){
				
				    return "";
				
				}
				public String VAL_ODONTOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VAL_ODONTOLOGIAOriginalDbColumnName(){
				
					return "VAL_ODONTOLOGIA";
				
				}

				
			    public String VAC_GESTANTE;

				public String getVAC_GESTANTE () {
					return this.VAC_GESTANTE;
				}

				public Boolean VAC_GESTANTEIsNullable(){
				    return true;
				}
				public Boolean VAC_GESTANTEIsKey(){
				    return false;
				}
				public Integer VAC_GESTANTELength(){
				    return 1;
				}
				public Integer VAC_GESTANTEPrecision(){
				    return 0;
				}
				public String VAC_GESTANTEDefault(){
				
					return null;
				
				}
				public String VAC_GESTANTEComment(){
				
				    return "";
				
				}
				public String VAC_GESTANTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VAC_GESTANTEOriginalDbColumnName(){
				
					return "VAC_GESTANTE";
				
				}

				
			    public String NUM_GESTACIONES;

				public String getNUM_GESTACIONES () {
					return this.NUM_GESTACIONES;
				}

				public Boolean NUM_GESTACIONESIsNullable(){
				    return true;
				}
				public Boolean NUM_GESTACIONESIsKey(){
				    return false;
				}
				public Integer NUM_GESTACIONESLength(){
				    return 1;
				}
				public Integer NUM_GESTACIONESPrecision(){
				    return 0;
				}
				public String NUM_GESTACIONESDefault(){
				
					return null;
				
				}
				public String NUM_GESTACIONESComment(){
				
				    return "";
				
				}
				public String NUM_GESTACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_GESTACIONESOriginalDbColumnName(){
				
					return "NUM_GESTACIONES";
				
				}

				
			    public String NUM_PARTOS;

				public String getNUM_PARTOS () {
					return this.NUM_PARTOS;
				}

				public Boolean NUM_PARTOSIsNullable(){
				    return true;
				}
				public Boolean NUM_PARTOSIsKey(){
				    return false;
				}
				public Integer NUM_PARTOSLength(){
				    return 1;
				}
				public Integer NUM_PARTOSPrecision(){
				    return 0;
				}
				public String NUM_PARTOSDefault(){
				
					return null;
				
				}
				public String NUM_PARTOSComment(){
				
				    return "";
				
				}
				public String NUM_PARTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_PARTOSOriginalDbColumnName(){
				
					return "NUM_PARTOS";
				
				}

				
			    public String NUM_ABORTOS;

				public String getNUM_ABORTOS () {
					return this.NUM_ABORTOS;
				}

				public Boolean NUM_ABORTOSIsNullable(){
				    return true;
				}
				public Boolean NUM_ABORTOSIsKey(){
				    return false;
				}
				public Integer NUM_ABORTOSLength(){
				    return 1;
				}
				public Integer NUM_ABORTOSPrecision(){
				    return 0;
				}
				public String NUM_ABORTOSDefault(){
				
					return null;
				
				}
				public String NUM_ABORTOSComment(){
				
				    return "";
				
				}
				public String NUM_ABORTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_ABORTOSOriginalDbColumnName(){
				
					return "NUM_ABORTOS";
				
				}

				
			    public String NUM_CESAREA;

				public String getNUM_CESAREA () {
					return this.NUM_CESAREA;
				}

				public Boolean NUM_CESAREAIsNullable(){
				    return true;
				}
				public Boolean NUM_CESAREAIsKey(){
				    return false;
				}
				public Integer NUM_CESAREALength(){
				    return 1;
				}
				public Integer NUM_CESAREAPrecision(){
				    return 0;
				}
				public String NUM_CESAREADefault(){
				
					return null;
				
				}
				public String NUM_CESAREAComment(){
				
				    return "";
				
				}
				public String NUM_CESAREAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CESAREAOriginalDbColumnName(){
				
					return "NUM_CESAREA";
				
				}

				
			    public String NUM_IVE;

				public String getNUM_IVE () {
					return this.NUM_IVE;
				}

				public Boolean NUM_IVEIsNullable(){
				    return true;
				}
				public Boolean NUM_IVEIsKey(){
				    return false;
				}
				public Integer NUM_IVELength(){
				    return 1;
				}
				public Integer NUM_IVEPrecision(){
				    return 0;
				}
				public String NUM_IVEDefault(){
				
					return null;
				
				}
				public String NUM_IVEComment(){
				
				    return "";
				
				}
				public String NUM_IVEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_IVEOriginalDbColumnName(){
				
					return "NUM_IVE";
				
				}

				
			    public String CAUSA_IVE;

				public String getCAUSA_IVE () {
					return this.CAUSA_IVE;
				}

				public Boolean CAUSA_IVEIsNullable(){
				    return true;
				}
				public Boolean CAUSA_IVEIsKey(){
				    return false;
				}
				public Integer CAUSA_IVELength(){
				    return 1;
				}
				public Integer CAUSA_IVEPrecision(){
				    return 0;
				}
				public String CAUSA_IVEDefault(){
				
					return null;
				
				}
				public String CAUSA_IVEComment(){
				
				    return "";
				
				}
				public String CAUSA_IVEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CAUSA_IVEOriginalDbColumnName(){
				
					return "CAUSA_IVE";
				
				}

				
			    public String EMB_ECTOPICO;

				public String getEMB_ECTOPICO () {
					return this.EMB_ECTOPICO;
				}

				public Boolean EMB_ECTOPICOIsNullable(){
				    return true;
				}
				public Boolean EMB_ECTOPICOIsKey(){
				    return false;
				}
				public Integer EMB_ECTOPICOLength(){
				    return 1;
				}
				public Integer EMB_ECTOPICOPrecision(){
				    return 0;
				}
				public String EMB_ECTOPICODefault(){
				
					return null;
				
				}
				public String EMB_ECTOPICOComment(){
				
				    return "";
				
				}
				public String EMB_ECTOPICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EMB_ECTOPICOOriginalDbColumnName(){
				
					return "EMB_ECTOPICO";
				
				}

				
			    public String NUM_NACIDOS_VIVOS;

				public String getNUM_NACIDOS_VIVOS () {
					return this.NUM_NACIDOS_VIVOS;
				}

				public Boolean NUM_NACIDOS_VIVOSIsNullable(){
				    return true;
				}
				public Boolean NUM_NACIDOS_VIVOSIsKey(){
				    return false;
				}
				public Integer NUM_NACIDOS_VIVOSLength(){
				    return 1;
				}
				public Integer NUM_NACIDOS_VIVOSPrecision(){
				    return 0;
				}
				public String NUM_NACIDOS_VIVOSDefault(){
				
					return null;
				
				}
				public String NUM_NACIDOS_VIVOSComment(){
				
				    return "";
				
				}
				public String NUM_NACIDOS_VIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_NACIDOS_VIVOSOriginalDbColumnName(){
				
					return "NUM_NACIDOS_VIVOS";
				
				}

				
			    public String FECHA_ULT_PARTO;

				public String getFECHA_ULT_PARTO () {
					return this.FECHA_ULT_PARTO;
				}

				public Boolean FECHA_ULT_PARTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_ULT_PARTOIsKey(){
				    return false;
				}
				public Integer FECHA_ULT_PARTOLength(){
				    return 1;
				}
				public Integer FECHA_ULT_PARTOPrecision(){
				    return 0;
				}
				public String FECHA_ULT_PARTODefault(){
				
					return null;
				
				}
				public String FECHA_ULT_PARTOComment(){
				
				    return "";
				
				}
				public String FECHA_ULT_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_ULT_PARTOOriginalDbColumnName(){
				
					return "FECHA_ULT_PARTO";
				
				}

				
			    public String RIESGO_OBSTETRICO;

				public String getRIESGO_OBSTETRICO () {
					return this.RIESGO_OBSTETRICO;
				}

				public Boolean RIESGO_OBSTETRICOIsNullable(){
				    return true;
				}
				public Boolean RIESGO_OBSTETRICOIsKey(){
				    return false;
				}
				public Integer RIESGO_OBSTETRICOLength(){
				    return 1;
				}
				public Integer RIESGO_OBSTETRICOPrecision(){
				    return 0;
				}
				public String RIESGO_OBSTETRICODefault(){
				
					return null;
				
				}
				public String RIESGO_OBSTETRICOComment(){
				
				    return "";
				
				}
				public String RIESGO_OBSTETRICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RIESGO_OBSTETRICOOriginalDbColumnName(){
				
					return "RIESGO_OBSTETRICO";
				
				}

				
			    public String HEMOGLOBINA;

				public String getHEMOGLOBINA () {
					return this.HEMOGLOBINA;
				}

				public Boolean HEMOGLOBINAIsNullable(){
				    return true;
				}
				public Boolean HEMOGLOBINAIsKey(){
				    return false;
				}
				public Integer HEMOGLOBINALength(){
				    return 1;
				}
				public Integer HEMOGLOBINAPrecision(){
				    return 0;
				}
				public String HEMOGLOBINADefault(){
				
					return null;
				
				}
				public String HEMOGLOBINAComment(){
				
				    return "";
				
				}
				public String HEMOGLOBINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEMOGLOBINAOriginalDbColumnName(){
				
					return "HEMOGLOBINA";
				
				}

				
			    public String SEROLOGIA;

				public String getSEROLOGIA () {
					return this.SEROLOGIA;
				}

				public Boolean SEROLOGIAIsNullable(){
				    return true;
				}
				public Boolean SEROLOGIAIsKey(){
				    return false;
				}
				public Integer SEROLOGIALength(){
				    return 1;
				}
				public Integer SEROLOGIAPrecision(){
				    return 0;
				}
				public String SEROLOGIADefault(){
				
					return null;
				
				}
				public String SEROLOGIAComment(){
				
				    return "";
				
				}
				public String SEROLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEROLOGIAOriginalDbColumnName(){
				
					return "SEROLOGIA";
				
				}

				
			    public String VIH;

				public String getVIH () {
					return this.VIH;
				}

				public Boolean VIHIsNullable(){
				    return true;
				}
				public Boolean VIHIsKey(){
				    return false;
				}
				public Integer VIHLength(){
				    return 1;
				}
				public Integer VIHPrecision(){
				    return 0;
				}
				public String VIHDefault(){
				
					return null;
				
				}
				public String VIHComment(){
				
				    return "";
				
				}
				public String VIHPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIHOriginalDbColumnName(){
				
					return "VIH";
				
				}

				
			    public String SUPLEMENTACION;

				public String getSUPLEMENTACION () {
					return this.SUPLEMENTACION;
				}

				public Boolean SUPLEMENTACIONIsNullable(){
				    return true;
				}
				public Boolean SUPLEMENTACIONIsKey(){
				    return false;
				}
				public Integer SUPLEMENTACIONLength(){
				    return 1;
				}
				public Integer SUPLEMENTACIONPrecision(){
				    return 0;
				}
				public String SUPLEMENTACIONDefault(){
				
					return null;
				
				}
				public String SUPLEMENTACIONComment(){
				
				    return "";
				
				}
				public String SUPLEMENTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SUPLEMENTACIONOriginalDbColumnName(){
				
					return "SUPLEMENTACION";
				
				}

				
			    public String PERCENTIL_NUTRICIONAL;

				public String getPERCENTIL_NUTRICIONAL () {
					return this.PERCENTIL_NUTRICIONAL;
				}

				public Boolean PERCENTIL_NUTRICIONALIsNullable(){
				    return true;
				}
				public Boolean PERCENTIL_NUTRICIONALIsKey(){
				    return false;
				}
				public Integer PERCENTIL_NUTRICIONALLength(){
				    return 1;
				}
				public Integer PERCENTIL_NUTRICIONALPrecision(){
				    return 0;
				}
				public String PERCENTIL_NUTRICIONALDefault(){
				
					return null;
				
				}
				public String PERCENTIL_NUTRICIONALComment(){
				
				    return "";
				
				}
				public String PERCENTIL_NUTRICIONALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERCENTIL_NUTRICIONALOriginalDbColumnName(){
				
					return "PERCENTIL_NUTRICIONAL";
				
				}

				
			    public String TABAQUISMO;

				public String getTABAQUISMO () {
					return this.TABAQUISMO;
				}

				public Boolean TABAQUISMOIsNullable(){
				    return true;
				}
				public Boolean TABAQUISMOIsKey(){
				    return false;
				}
				public Integer TABAQUISMOLength(){
				    return 1;
				}
				public Integer TABAQUISMOPrecision(){
				    return 0;
				}
				public String TABAQUISMODefault(){
				
					return null;
				
				}
				public String TABAQUISMOComment(){
				
				    return "";
				
				}
				public String TABAQUISMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TABAQUISMOOriginalDbColumnName(){
				
					return "TABAQUISMO";
				
				}

				
			    public String NUM_CIGARRILLOS;

				public String getNUM_CIGARRILLOS () {
					return this.NUM_CIGARRILLOS;
				}

				public Boolean NUM_CIGARRILLOSIsNullable(){
				    return true;
				}
				public Boolean NUM_CIGARRILLOSIsKey(){
				    return false;
				}
				public Integer NUM_CIGARRILLOSLength(){
				    return 1;
				}
				public Integer NUM_CIGARRILLOSPrecision(){
				    return 0;
				}
				public String NUM_CIGARRILLOSDefault(){
				
					return null;
				
				}
				public String NUM_CIGARRILLOSComment(){
				
				    return "";
				
				}
				public String NUM_CIGARRILLOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CIGARRILLOSOriginalDbColumnName(){
				
					return "NUM_CIGARRILLOS";
				
				}

				
			    public String ALCOHOL;

				public String getALCOHOL () {
					return this.ALCOHOL;
				}

				public Boolean ALCOHOLIsNullable(){
				    return true;
				}
				public Boolean ALCOHOLIsKey(){
				    return false;
				}
				public Integer ALCOHOLLength(){
				    return 1;
				}
				public Integer ALCOHOLPrecision(){
				    return 0;
				}
				public String ALCOHOLDefault(){
				
					return null;
				
				}
				public String ALCOHOLComment(){
				
				    return "";
				
				}
				public String ALCOHOLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ALCOHOLOriginalDbColumnName(){
				
					return "ALCOHOL";
				
				}

				
			    public String FREC_ALCOHOL;

				public String getFREC_ALCOHOL () {
					return this.FREC_ALCOHOL;
				}

				public Boolean FREC_ALCOHOLIsNullable(){
				    return true;
				}
				public Boolean FREC_ALCOHOLIsKey(){
				    return false;
				}
				public Integer FREC_ALCOHOLLength(){
				    return 1;
				}
				public Integer FREC_ALCOHOLPrecision(){
				    return 0;
				}
				public String FREC_ALCOHOLDefault(){
				
					return null;
				
				}
				public String FREC_ALCOHOLComment(){
				
				    return "";
				
				}
				public String FREC_ALCOHOLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ALCOHOLOriginalDbColumnName(){
				
					return "FREC_ALCOHOL";
				
				}

				
			    public String ALT_UTERINA;

				public String getALT_UTERINA () {
					return this.ALT_UTERINA;
				}

				public Boolean ALT_UTERINAIsNullable(){
				    return true;
				}
				public Boolean ALT_UTERINAIsKey(){
				    return false;
				}
				public Integer ALT_UTERINALength(){
				    return 1;
				}
				public Integer ALT_UTERINAPrecision(){
				    return 0;
				}
				public String ALT_UTERINADefault(){
				
					return null;
				
				}
				public String ALT_UTERINAComment(){
				
				    return "";
				
				}
				public String ALT_UTERINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ALT_UTERINAOriginalDbColumnName(){
				
					return "ALT_UTERINA";
				
				}

				
			    public String SEDENTARISMO;

				public String getSEDENTARISMO () {
					return this.SEDENTARISMO;
				}

				public Boolean SEDENTARISMOIsNullable(){
				    return true;
				}
				public Boolean SEDENTARISMOIsKey(){
				    return false;
				}
				public Integer SEDENTARISMOLength(){
				    return 1;
				}
				public Integer SEDENTARISMOPrecision(){
				    return 0;
				}
				public String SEDENTARISMODefault(){
				
					return null;
				
				}
				public String SEDENTARISMOComment(){
				
				    return "";
				
				}
				public String SEDENTARISMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEDENTARISMOOriginalDbColumnName(){
				
					return "SEDENTARISMO";
				
				}

				
			    public String PARTO;

				public String getPARTO () {
					return this.PARTO;
				}

				public Boolean PARTOIsNullable(){
				    return true;
				}
				public Boolean PARTOIsKey(){
				    return false;
				}
				public Integer PARTOLength(){
				    return 1;
				}
				public Integer PARTOPrecision(){
				    return 0;
				}
				public String PARTODefault(){
				
					return null;
				
				}
				public String PARTOComment(){
				
				    return "";
				
				}
				public String PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PARTOOriginalDbColumnName(){
				
					return "PARTO";
				
				}

				
			    public String QUIEN_PARTO;

				public String getQUIEN_PARTO () {
					return this.QUIEN_PARTO;
				}

				public Boolean QUIEN_PARTOIsNullable(){
				    return true;
				}
				public Boolean QUIEN_PARTOIsKey(){
				    return false;
				}
				public Integer QUIEN_PARTOLength(){
				    return 1;
				}
				public Integer QUIEN_PARTOPrecision(){
				    return 0;
				}
				public String QUIEN_PARTODefault(){
				
					return null;
				
				}
				public String QUIEN_PARTOComment(){
				
				    return "";
				
				}
				public String QUIEN_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_PARTOOriginalDbColumnName(){
				
					return "QUIEN_PARTO";
				
				}

				
			    public String COMPLICACIONES;

				public String getCOMPLICACIONES () {
					return this.COMPLICACIONES;
				}

				public Boolean COMPLICACIONESIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONESIsKey(){
				    return false;
				}
				public Integer COMPLICACIONESLength(){
				    return 1;
				}
				public Integer COMPLICACIONESPrecision(){
				    return 0;
				}
				public String COMPLICACIONESDefault(){
				
					return null;
				
				}
				public String COMPLICACIONESComment(){
				
				    return "";
				
				}
				public String COMPLICACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONESOriginalDbColumnName(){
				
					return "COMPLICACIONES";
				
				}

				
			    public String ATENCION_PARTO;

				public String getATENCION_PARTO () {
					return this.ATENCION_PARTO;
				}

				public Boolean ATENCION_PARTOIsNullable(){
				    return true;
				}
				public Boolean ATENCION_PARTOIsKey(){
				    return false;
				}
				public Integer ATENCION_PARTOLength(){
				    return 1;
				}
				public Integer ATENCION_PARTOPrecision(){
				    return 0;
				}
				public String ATENCION_PARTODefault(){
				
					return null;
				
				}
				public String ATENCION_PARTOComment(){
				
				    return "";
				
				}
				public String ATENCION_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ATENCION_PARTOOriginalDbColumnName(){
				
					return "ATENCION_PARTO";
				
				}

				
			    public String TIEMPO_GESTACION;

				public String getTIEMPO_GESTACION () {
					return this.TIEMPO_GESTACION;
				}

				public Boolean TIEMPO_GESTACIONIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_GESTACIONIsKey(){
				    return false;
				}
				public Integer TIEMPO_GESTACIONLength(){
				    return 1;
				}
				public Integer TIEMPO_GESTACIONPrecision(){
				    return 0;
				}
				public String TIEMPO_GESTACIONDefault(){
				
					return null;
				
				}
				public String TIEMPO_GESTACIONComment(){
				
				    return "";
				
				}
				public String TIEMPO_GESTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_GESTACIONOriginalDbColumnName(){
				
					return "TIEMPO_GESTACION";
				
				}

				
			    public String ATENCION_INSTITUCIONAL;

				public String getATENCION_INSTITUCIONAL () {
					return this.ATENCION_INSTITUCIONAL;
				}

				public Boolean ATENCION_INSTITUCIONALIsNullable(){
				    return true;
				}
				public Boolean ATENCION_INSTITUCIONALIsKey(){
				    return false;
				}
				public Integer ATENCION_INSTITUCIONALLength(){
				    return 1;
				}
				public Integer ATENCION_INSTITUCIONALPrecision(){
				    return 0;
				}
				public String ATENCION_INSTITUCIONALDefault(){
				
					return null;
				
				}
				public String ATENCION_INSTITUCIONALComment(){
				
				    return "";
				
				}
				public String ATENCION_INSTITUCIONALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ATENCION_INSTITUCIONALOriginalDbColumnName(){
				
					return "ATENCION_INSTITUCIONAL";
				
				}

				
			    public String COMPLICACIONES_POSTPARTO;

				public String getCOMPLICACIONES_POSTPARTO () {
					return this.COMPLICACIONES_POSTPARTO;
				}

				public Boolean COMPLICACIONES_POSTPARTOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_POSTPARTOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_POSTPARTOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_POSTPARTOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_POSTPARTODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_POSTPARTOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_POSTPARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_POSTPARTOOriginalDbColumnName(){
				
					return "COMPLICACIONES_POSTPARTO";
				
				}

				
			    public String COMPLICACIONES_PARTO;

				public String getCOMPLICACIONES_PARTO () {
					return this.COMPLICACIONES_PARTO;
				}

				public Boolean COMPLICACIONES_PARTOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_PARTOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_PARTOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_PARTOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_PARTODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_PARTOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_PARTOOriginalDbColumnName(){
				
					return "COMPLICACIONES_PARTO";
				
				}

				
			    public String COMPLICACIONES_EMBARAZO;

				public String getCOMPLICACIONES_EMBARAZO () {
					return this.COMPLICACIONES_EMBARAZO;
				}

				public Boolean COMPLICACIONES_EMBARAZOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_EMBARAZOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_EMBARAZOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_EMBARAZOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_EMBARAZODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_EMBARAZOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_EMBARAZOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_EMBARAZOOriginalDbColumnName(){
				
					return "COMPLICACIONES_EMBARAZO";
				
				}

				
			    public String PLANIFICACION;

				public String getPLANIFICACION () {
					return this.PLANIFICACION;
				}

				public Boolean PLANIFICACIONIsNullable(){
				    return true;
				}
				public Boolean PLANIFICACIONIsKey(){
				    return false;
				}
				public Integer PLANIFICACIONLength(){
				    return 1;
				}
				public Integer PLANIFICACIONPrecision(){
				    return 0;
				}
				public String PLANIFICACIONDefault(){
				
					return null;
				
				}
				public String PLANIFICACIONComment(){
				
				    return "";
				
				}
				public String PLANIFICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PLANIFICACIONOriginalDbColumnName(){
				
					return "PLANIFICACION";
				
				}

				
			    public String CONSUME_MEDICAMENTO;

				public String getCONSUME_MEDICAMENTO () {
					return this.CONSUME_MEDICAMENTO;
				}

				public Boolean CONSUME_MEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean CONSUME_MEDICAMENTOIsKey(){
				    return false;
				}
				public Integer CONSUME_MEDICAMENTOLength(){
				    return 1;
				}
				public Integer CONSUME_MEDICAMENTOPrecision(){
				    return 0;
				}
				public String CONSUME_MEDICAMENTODefault(){
				
					return null;
				
				}
				public String CONSUME_MEDICAMENTOComment(){
				
				    return "";
				
				}
				public String CONSUME_MEDICAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSUME_MEDICAMENTOOriginalDbColumnName(){
				
					return "CONSUME_MEDICAMENTO";
				
				}

				
			    public String PESO_NACER;

				public String getPESO_NACER () {
					return this.PESO_NACER;
				}

				public Boolean PESO_NACERIsNullable(){
				    return true;
				}
				public Boolean PESO_NACERIsKey(){
				    return false;
				}
				public Integer PESO_NACERLength(){
				    return 1;
				}
				public Integer PESO_NACERPrecision(){
				    return 0;
				}
				public String PESO_NACERDefault(){
				
					return null;
				
				}
				public String PESO_NACERComment(){
				
				    return "";
				
				}
				public String PESO_NACERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PESO_NACEROriginalDbColumnName(){
				
					return "PESO_NACER";
				
				}

				
			    public String TALLA_NACER;

				public String getTALLA_NACER () {
					return this.TALLA_NACER;
				}

				public Boolean TALLA_NACERIsNullable(){
				    return true;
				}
				public Boolean TALLA_NACERIsKey(){
				    return false;
				}
				public Integer TALLA_NACERLength(){
				    return 1;
				}
				public Integer TALLA_NACERPrecision(){
				    return 0;
				}
				public String TALLA_NACERDefault(){
				
					return null;
				
				}
				public String TALLA_NACERComment(){
				
				    return "";
				
				}
				public String TALLA_NACERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TALLA_NACEROriginalDbColumnName(){
				
					return "TALLA_NACER";
				
				}

				
			    public String PERIMETRO_CEFALICO;

				public String getPERIMETRO_CEFALICO () {
					return this.PERIMETRO_CEFALICO;
				}

				public Boolean PERIMETRO_CEFALICOIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_CEFALICOIsKey(){
				    return false;
				}
				public Integer PERIMETRO_CEFALICOLength(){
				    return 1;
				}
				public Integer PERIMETRO_CEFALICOPrecision(){
				    return 0;
				}
				public String PERIMETRO_CEFALICODefault(){
				
					return null;
				
				}
				public String PERIMETRO_CEFALICOComment(){
				
				    return "";
				
				}
				public String PERIMETRO_CEFALICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_CEFALICOOriginalDbColumnName(){
				
					return "PERIMETRO_CEFALICO";
				
				}

				
			    public String PREMATUREZ;

				public String getPREMATUREZ () {
					return this.PREMATUREZ;
				}

				public Boolean PREMATUREZIsNullable(){
				    return true;
				}
				public Boolean PREMATUREZIsKey(){
				    return false;
				}
				public Integer PREMATUREZLength(){
				    return 1;
				}
				public Integer PREMATUREZPrecision(){
				    return 0;
				}
				public String PREMATUREZDefault(){
				
					return null;
				
				}
				public String PREMATUREZComment(){
				
				    return "";
				
				}
				public String PREMATUREZPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PREMATUREZOriginalDbColumnName(){
				
					return "PREMATUREZ";
				
				}

				
			    public String COMPLICACIONES_EMB;

				public String getCOMPLICACIONES_EMB () {
					return this.COMPLICACIONES_EMB;
				}

				public Boolean COMPLICACIONES_EMBIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_EMBIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_EMBLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_EMBPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_EMBDefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_EMBComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_EMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_EMBOriginalDbColumnName(){
				
					return "COMPLICACIONES_EMB";
				
				}

				
			    public String RECIBE_MED;

				public String getRECIBE_MED () {
					return this.RECIBE_MED;
				}

				public Boolean RECIBE_MEDIsNullable(){
				    return true;
				}
				public Boolean RECIBE_MEDIsKey(){
				    return false;
				}
				public Integer RECIBE_MEDLength(){
				    return 1;
				}
				public Integer RECIBE_MEDPrecision(){
				    return 0;
				}
				public String RECIBE_MEDDefault(){
				
					return null;
				
				}
				public String RECIBE_MEDComment(){
				
				    return "";
				
				}
				public String RECIBE_MEDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBE_MEDOriginalDbColumnName(){
				
					return "RECIBE_MED";
				
				}

				
			    public String REGISTRADO;

				public String getREGISTRADO () {
					return this.REGISTRADO;
				}

				public Boolean REGISTRADOIsNullable(){
				    return true;
				}
				public Boolean REGISTRADOIsKey(){
				    return false;
				}
				public Integer REGISTRADOLength(){
				    return 1;
				}
				public Integer REGISTRADOPrecision(){
				    return 0;
				}
				public String REGISTRADODefault(){
				
					return null;
				
				}
				public String REGISTRADOComment(){
				
				    return "";
				
				}
				public String REGISTRADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String REGISTRADOOriginalDbColumnName(){
				
					return "REGISTRADO";
				
				}

				
			    public String ANTECEDENTES_PERINATALES;

				public String getANTECEDENTES_PERINATALES () {
					return this.ANTECEDENTES_PERINATALES;
				}

				public Boolean ANTECEDENTES_PERINATALESIsNullable(){
				    return true;
				}
				public Boolean ANTECEDENTES_PERINATALESIsKey(){
				    return false;
				}
				public Integer ANTECEDENTES_PERINATALESLength(){
				    return 1;
				}
				public Integer ANTECEDENTES_PERINATALESPrecision(){
				    return 0;
				}
				public String ANTECEDENTES_PERINATALESDefault(){
				
					return null;
				
				}
				public String ANTECEDENTES_PERINATALESComment(){
				
				    return "";
				
				}
				public String ANTECEDENTES_PERINATALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ANTECEDENTES_PERINATALESOriginalDbColumnName(){
				
					return "ANTECEDENTES_PERINATALES";
				
				}

				
			    public String PESO_KG;

				public String getPESO_KG () {
					return this.PESO_KG;
				}

				public Boolean PESO_KGIsNullable(){
				    return true;
				}
				public Boolean PESO_KGIsKey(){
				    return false;
				}
				public Integer PESO_KGLength(){
				    return 4;
				}
				public Integer PESO_KGPrecision(){
				    return 0;
				}
				public String PESO_KGDefault(){
				
					return null;
				
				}
				public String PESO_KGComment(){
				
				    return "";
				
				}
				public String PESO_KGPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PESO_KGOriginalDbColumnName(){
				
					return "PESO_KG";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 5;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String CONTROL_CYD;

				public String getCONTROL_CYD () {
					return this.CONTROL_CYD;
				}

				public Boolean CONTROL_CYDIsNullable(){
				    return true;
				}
				public Boolean CONTROL_CYDIsKey(){
				    return false;
				}
				public Integer CONTROL_CYDLength(){
				    return 1;
				}
				public Integer CONTROL_CYDPrecision(){
				    return 0;
				}
				public String CONTROL_CYDDefault(){
				
					return null;
				
				}
				public String CONTROL_CYDComment(){
				
				    return "";
				
				}
				public String CONTROL_CYDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTROL_CYDOriginalDbColumnName(){
				
					return "CONTROL_CYD";
				
				}

				
			    public String IMC;

				public String getIMC () {
					return this.IMC;
				}

				public Boolean IMCIsNullable(){
				    return true;
				}
				public Boolean IMCIsKey(){
				    return false;
				}
				public Integer IMCLength(){
				    return 7;
				}
				public Integer IMCPrecision(){
				    return 0;
				}
				public String IMCDefault(){
				
					return null;
				
				}
				public String IMCComment(){
				
				    return "";
				
				}
				public String IMCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String IMCOriginalDbColumnName(){
				
					return "IMC";
				
				}

				
			    public String ESTADO_NUTRICION;

				public String getESTADO_NUTRICION () {
					return this.ESTADO_NUTRICION;
				}

				public Boolean ESTADO_NUTRICIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_NUTRICIONIsKey(){
				    return false;
				}
				public Integer ESTADO_NUTRICIONLength(){
				    return 13;
				}
				public Integer ESTADO_NUTRICIONPrecision(){
				    return 0;
				}
				public String ESTADO_NUTRICIONDefault(){
				
					return null;
				
				}
				public String ESTADO_NUTRICIONComment(){
				
				    return "";
				
				}
				public String ESTADO_NUTRICIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESTADO_NUTRICIONOriginalDbColumnName(){
				
					return "ESTADO_NUTRICION";
				
				}

				
			    public String VALORACION_DESARROLLO;

				public String getVALORACION_DESARROLLO () {
					return this.VALORACION_DESARROLLO;
				}

				public Boolean VALORACION_DESARROLLOIsNullable(){
				    return true;
				}
				public Boolean VALORACION_DESARROLLOIsKey(){
				    return false;
				}
				public Integer VALORACION_DESARROLLOLength(){
				    return 1;
				}
				public Integer VALORACION_DESARROLLOPrecision(){
				    return 0;
				}
				public String VALORACION_DESARROLLODefault(){
				
					return null;
				
				}
				public String VALORACION_DESARROLLOComment(){
				
				    return "";
				
				}
				public String VALORACION_DESARROLLOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VALORACION_DESARROLLOOriginalDbColumnName(){
				
					return "VALORACION_DESARROLLO";
				
				}

				
			    public String LACTANCIA_6MESES;

				public String getLACTANCIA_6MESES () {
					return this.LACTANCIA_6MESES;
				}

				public Boolean LACTANCIA_6MESESIsNullable(){
				    return true;
				}
				public Boolean LACTANCIA_6MESESIsKey(){
				    return false;
				}
				public Integer LACTANCIA_6MESESLength(){
				    return 1;
				}
				public Integer LACTANCIA_6MESESPrecision(){
				    return 0;
				}
				public String LACTANCIA_6MESESDefault(){
				
					return null;
				
				}
				public String LACTANCIA_6MESESComment(){
				
				    return "";
				
				}
				public String LACTANCIA_6MESESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String LACTANCIA_6MESESOriginalDbColumnName(){
				
					return "LACTANCIA_6MESES";
				
				}

				
			    public String TOMADO_MED_HIPERTENSION;

				public String getTOMADO_MED_HIPERTENSION () {
					return this.TOMADO_MED_HIPERTENSION;
				}

				public Boolean TOMADO_MED_HIPERTENSIONIsNullable(){
				    return true;
				}
				public Boolean TOMADO_MED_HIPERTENSIONIsKey(){
				    return false;
				}
				public Integer TOMADO_MED_HIPERTENSIONLength(){
				    return 4;
				}
				public Integer TOMADO_MED_HIPERTENSIONPrecision(){
				    return 0;
				}
				public String TOMADO_MED_HIPERTENSIONDefault(){
				
					return null;
				
				}
				public String TOMADO_MED_HIPERTENSIONComment(){
				
				    return "";
				
				}
				public String TOMADO_MED_HIPERTENSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TOMADO_MED_HIPERTENSIONOriginalDbColumnName(){
				
					return "TOMADO_MED_HIPERTENSION";
				
				}

				
			    public String PERIMETRO_ABD;

				public String getPERIMETRO_ABD () {
					return this.PERIMETRO_ABD;
				}

				public Boolean PERIMETRO_ABDIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_ABDIsKey(){
				    return false;
				}
				public Integer PERIMETRO_ABDLength(){
				    return 4;
				}
				public Integer PERIMETRO_ABDPrecision(){
				    return 0;
				}
				public String PERIMETRO_ABDDefault(){
				
					return null;
				
				}
				public String PERIMETRO_ABDComment(){
				
				    return "";
				
				}
				public String PERIMETRO_ABDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_ABDOriginalDbColumnName(){
				
					return "PERIMETRO_ABD";
				
				}

				
			    public String GLUCOSA_EMBARAZO;

				public String getGLUCOSA_EMBARAZO () {
					return this.GLUCOSA_EMBARAZO;
				}

				public Boolean GLUCOSA_EMBARAZOIsNullable(){
				    return true;
				}
				public Boolean GLUCOSA_EMBARAZOIsKey(){
				    return false;
				}
				public Integer GLUCOSA_EMBARAZOLength(){
				    return 4;
				}
				public Integer GLUCOSA_EMBARAZOPrecision(){
				    return 0;
				}
				public String GLUCOSA_EMBARAZODefault(){
				
					return null;
				
				}
				public String GLUCOSA_EMBARAZOComment(){
				
				    return "";
				
				}
				public String GLUCOSA_EMBARAZOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GLUCOSA_EMBARAZOOriginalDbColumnName(){
				
					return "GLUCOSA_EMBARAZO";
				
				}

				
			    public String CONSUMO_VEGETALES;

				public String getCONSUMO_VEGETALES () {
					return this.CONSUMO_VEGETALES;
				}

				public Boolean CONSUMO_VEGETALESIsNullable(){
				    return true;
				}
				public Boolean CONSUMO_VEGETALESIsKey(){
				    return false;
				}
				public Integer CONSUMO_VEGETALESLength(){
				    return 4;
				}
				public Integer CONSUMO_VEGETALESPrecision(){
				    return 0;
				}
				public String CONSUMO_VEGETALESDefault(){
				
					return null;
				
				}
				public String CONSUMO_VEGETALESComment(){
				
				    return "";
				
				}
				public String CONSUMO_VEGETALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSUMO_VEGETALESOriginalDbColumnName(){
				
					return "CONSUMO_VEGETALES";
				
				}

				
			    public String SEGURIDAD_ALIMENTARIA;

				public String getSEGURIDAD_ALIMENTARIA () {
					return this.SEGURIDAD_ALIMENTARIA;
				}

				public Boolean SEGURIDAD_ALIMENTARIAIsNullable(){
				    return true;
				}
				public Boolean SEGURIDAD_ALIMENTARIAIsKey(){
				    return false;
				}
				public Integer SEGURIDAD_ALIMENTARIALength(){
				    return 1;
				}
				public Integer SEGURIDAD_ALIMENTARIAPrecision(){
				    return 0;
				}
				public String SEGURIDAD_ALIMENTARIADefault(){
				
					return null;
				
				}
				public String SEGURIDAD_ALIMENTARIAComment(){
				
				    return "";
				
				}
				public String SEGURIDAD_ALIMENTARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEGURIDAD_ALIMENTARIAOriginalDbColumnName(){
				
					return "SEGURIDAD_ALIMENTARIA";
				
				}

				
			    public String DESPARACITADO;

				public String getDESPARACITADO () {
					return this.DESPARACITADO;
				}

				public Boolean DESPARACITADOIsNullable(){
				    return true;
				}
				public Boolean DESPARACITADOIsKey(){
				    return false;
				}
				public Integer DESPARACITADOLength(){
				    return 1;
				}
				public Integer DESPARACITADOPrecision(){
				    return 0;
				}
				public String DESPARACITADODefault(){
				
					return null;
				
				}
				public String DESPARACITADOComment(){
				
				    return "";
				
				}
				public String DESPARACITADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DESPARACITADOOriginalDbColumnName(){
				
					return "DESPARACITADO";
				
				}

				
			    public String FECHA_DESPARACITADO;

				public String getFECHA_DESPARACITADO () {
					return this.FECHA_DESPARACITADO;
				}

				public Boolean FECHA_DESPARACITADOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DESPARACITADOIsKey(){
				    return false;
				}
				public Integer FECHA_DESPARACITADOLength(){
				    return 1;
				}
				public Integer FECHA_DESPARACITADOPrecision(){
				    return 0;
				}
				public String FECHA_DESPARACITADODefault(){
				
					return null;
				
				}
				public String FECHA_DESPARACITADOComment(){
				
				    return "";
				
				}
				public String FECHA_DESPARACITADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DESPARACITADOOriginalDbColumnName(){
				
					return "FECHA_DESPARACITADO";
				
				}

				
			    public String PROGRAMAS_INSCRITO;

				public String getPROGRAMAS_INSCRITO () {
					return this.PROGRAMAS_INSCRITO;
				}

				public Boolean PROGRAMAS_INSCRITOIsNullable(){
				    return true;
				}
				public Boolean PROGRAMAS_INSCRITOIsKey(){
				    return false;
				}
				public Integer PROGRAMAS_INSCRITOLength(){
				    return 76;
				}
				public Integer PROGRAMAS_INSCRITOPrecision(){
				    return 0;
				}
				public String PROGRAMAS_INSCRITODefault(){
				
					return null;
				
				}
				public String PROGRAMAS_INSCRITOComment(){
				
				    return "";
				
				}
				public String PROGRAMAS_INSCRITOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROGRAMAS_INSCRITOOriginalDbColumnName(){
				
					return "PROGRAMAS_INSCRITO";
				
				}

				
			    public String TRANSTORNO_ALIMENTACION;

				public String getTRANSTORNO_ALIMENTACION () {
					return this.TRANSTORNO_ALIMENTACION;
				}

				public Boolean TRANSTORNO_ALIMENTACIONIsNullable(){
				    return true;
				}
				public Boolean TRANSTORNO_ALIMENTACIONIsKey(){
				    return false;
				}
				public Integer TRANSTORNO_ALIMENTACIONLength(){
				    return 4;
				}
				public Integer TRANSTORNO_ALIMENTACIONPrecision(){
				    return 0;
				}
				public String TRANSTORNO_ALIMENTACIONDefault(){
				
					return null;
				
				}
				public String TRANSTORNO_ALIMENTACIONComment(){
				
				    return "";
				
				}
				public String TRANSTORNO_ALIMENTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRANSTORNO_ALIMENTACIONOriginalDbColumnName(){
				
					return "TRANSTORNO_ALIMENTACION";
				
				}

				
			    public String MORB_CRONICA;

				public String getMORB_CRONICA () {
					return this.MORB_CRONICA;
				}

				public Boolean MORB_CRONICAIsNullable(){
				    return true;
				}
				public Boolean MORB_CRONICAIsKey(){
				    return false;
				}
				public Integer MORB_CRONICALength(){
				    return 39;
				}
				public Integer MORB_CRONICAPrecision(){
				    return 0;
				}
				public String MORB_CRONICADefault(){
				
					return null;
				
				}
				public String MORB_CRONICAComment(){
				
				    return "";
				
				}
				public String MORB_CRONICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORB_CRONICAOriginalDbColumnName(){
				
					return "MORB_CRONICA";
				
				}

				
			    public String PERIMETRO_PANTORRILLA;

				public String getPERIMETRO_PANTORRILLA () {
					return this.PERIMETRO_PANTORRILLA;
				}

				public Boolean PERIMETRO_PANTORRILLAIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_PANTORRILLAIsKey(){
				    return false;
				}
				public Integer PERIMETRO_PANTORRILLALength(){
				    return 4;
				}
				public Integer PERIMETRO_PANTORRILLAPrecision(){
				    return 0;
				}
				public String PERIMETRO_PANTORRILLADefault(){
				
					return null;
				
				}
				public String PERIMETRO_PANTORRILLAComment(){
				
				    return "";
				
				}
				public String PERIMETRO_PANTORRILLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_PANTORRILLAOriginalDbColumnName(){
				
					return "PERIMETRO_PANTORRILLA";
				
				}

				
			    public String MORBILIDAD_AGUDA;

				public String getMORBILIDAD_AGUDA () {
					return this.MORBILIDAD_AGUDA;
				}

				public Boolean MORBILIDAD_AGUDAIsNullable(){
				    return true;
				}
				public Boolean MORBILIDAD_AGUDAIsKey(){
				    return false;
				}
				public Integer MORBILIDAD_AGUDALength(){
				    return 9;
				}
				public Integer MORBILIDAD_AGUDAPrecision(){
				    return 0;
				}
				public String MORBILIDAD_AGUDADefault(){
				
					return null;
				
				}
				public String MORBILIDAD_AGUDAComment(){
				
				    return "";
				
				}
				public String MORBILIDAD_AGUDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORBILIDAD_AGUDAOriginalDbColumnName(){
				
					return "MORBILIDAD_AGUDA";
				
				}

				
			    public String BUSCA_AYUDA;

				public String getBUSCA_AYUDA () {
					return this.BUSCA_AYUDA;
				}

				public Boolean BUSCA_AYUDAIsNullable(){
				    return true;
				}
				public Boolean BUSCA_AYUDAIsKey(){
				    return false;
				}
				public Integer BUSCA_AYUDALength(){
				    return 13;
				}
				public Integer BUSCA_AYUDAPrecision(){
				    return 0;
				}
				public String BUSCA_AYUDADefault(){
				
					return null;
				
				}
				public String BUSCA_AYUDAComment(){
				
				    return "";
				
				}
				public String BUSCA_AYUDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BUSCA_AYUDAOriginalDbColumnName(){
				
					return "BUSCA_AYUDA";
				
				}

				
			    public String PORQUE;

				public String getPORQUE () {
					return this.PORQUE;
				}

				public Boolean PORQUEIsNullable(){
				    return true;
				}
				public Boolean PORQUEIsKey(){
				    return false;
				}
				public Integer PORQUELength(){
				    return 6;
				}
				public Integer PORQUEPrecision(){
				    return 0;
				}
				public String PORQUEDefault(){
				
					return null;
				
				}
				public String PORQUEComment(){
				
				    return "";
				
				}
				public String PORQUEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PORQUEOriginalDbColumnName(){
				
					return "PORQUE";
				
				}

				
			    public String RECIBE_MANEJO;

				public String getRECIBE_MANEJO () {
					return this.RECIBE_MANEJO;
				}

				public Boolean RECIBE_MANEJOIsNullable(){
				    return true;
				}
				public Boolean RECIBE_MANEJOIsKey(){
				    return false;
				}
				public Integer RECIBE_MANEJOLength(){
				    return 4;
				}
				public Integer RECIBE_MANEJOPrecision(){
				    return 0;
				}
				public String RECIBE_MANEJODefault(){
				
					return null;
				
				}
				public String RECIBE_MANEJOComment(){
				
				    return "";
				
				}
				public String RECIBE_MANEJOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBE_MANEJOOriginalDbColumnName(){
				
					return "RECIBE_MANEJO";
				
				}

				
			    public String QUIEN_FORMULA;

				public String getQUIEN_FORMULA () {
					return this.QUIEN_FORMULA;
				}

				public Boolean QUIEN_FORMULAIsNullable(){
				    return true;
				}
				public Boolean QUIEN_FORMULAIsKey(){
				    return false;
				}
				public Integer QUIEN_FORMULALength(){
				    return 1;
				}
				public Integer QUIEN_FORMULAPrecision(){
				    return 0;
				}
				public String QUIEN_FORMULADefault(){
				
					return null;
				
				}
				public String QUIEN_FORMULAComment(){
				
				    return "";
				
				}
				public String QUIEN_FORMULAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_FORMULAOriginalDbColumnName(){
				
					return "QUIEN_FORMULA";
				
				}

				
			    public String CONSULTA_SIQUIATRIA;

				public String getCONSULTA_SIQUIATRIA () {
					return this.CONSULTA_SIQUIATRIA;
				}

				public Boolean CONSULTA_SIQUIATRIAIsNullable(){
				    return true;
				}
				public Boolean CONSULTA_SIQUIATRIAIsKey(){
				    return false;
				}
				public Integer CONSULTA_SIQUIATRIALength(){
				    return 4;
				}
				public Integer CONSULTA_SIQUIATRIAPrecision(){
				    return 0;
				}
				public String CONSULTA_SIQUIATRIADefault(){
				
					return null;
				
				}
				public String CONSULTA_SIQUIATRIAComment(){
				
				    return "";
				
				}
				public String CONSULTA_SIQUIATRIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSULTA_SIQUIATRIAOriginalDbColumnName(){
				
					return "CONSULTA_SIQUIATRIA";
				
				}

				
			    public String FORMULADO_MED_PSIQUIATRICOS;

				public String getFORMULADO_MED_PSIQUIATRICOS () {
					return this.FORMULADO_MED_PSIQUIATRICOS;
				}

				public Boolean FORMULADO_MED_PSIQUIATRICOSIsNullable(){
				    return true;
				}
				public Boolean FORMULADO_MED_PSIQUIATRICOSIsKey(){
				    return false;
				}
				public Integer FORMULADO_MED_PSIQUIATRICOSLength(){
				    return 4;
				}
				public Integer FORMULADO_MED_PSIQUIATRICOSPrecision(){
				    return 0;
				}
				public String FORMULADO_MED_PSIQUIATRICOSDefault(){
				
					return null;
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSComment(){
				
				    return "";
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSOriginalDbColumnName(){
				
					return "FORMULADO_MED_PSIQUIATRICOS";
				
				}

				
			    public String FACTORES_RIESGO;

				public String getFACTORES_RIESGO () {
					return this.FACTORES_RIESGO;
				}

				public Boolean FACTORES_RIESGOIsNullable(){
				    return true;
				}
				public Boolean FACTORES_RIESGOIsKey(){
				    return false;
				}
				public Integer FACTORES_RIESGOLength(){
				    return 37;
				}
				public Integer FACTORES_RIESGOPrecision(){
				    return 0;
				}
				public String FACTORES_RIESGODefault(){
				
					return null;
				
				}
				public String FACTORES_RIESGOComment(){
				
				    return "";
				
				}
				public String FACTORES_RIESGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FACTORES_RIESGOOriginalDbColumnName(){
				
					return "FACTORES_RIESGO";
				
				}

				
			    public String SITUACION_ESTRES;

				public String getSITUACION_ESTRES () {
					return this.SITUACION_ESTRES;
				}

				public Boolean SITUACION_ESTRESIsNullable(){
				    return true;
				}
				public Boolean SITUACION_ESTRESIsKey(){
				    return false;
				}
				public Integer SITUACION_ESTRESLength(){
				    return 32;
				}
				public Integer SITUACION_ESTRESPrecision(){
				    return 0;
				}
				public String SITUACION_ESTRESDefault(){
				
					return null;
				
				}
				public String SITUACION_ESTRESComment(){
				
				    return "";
				
				}
				public String SITUACION_ESTRESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SITUACION_ESTRESOriginalDbColumnName(){
				
					return "SITUACION_ESTRES";
				
				}

				
			    public String VIOLENCIA;

				public String getVIOLENCIA () {
					return this.VIOLENCIA;
				}

				public Boolean VIOLENCIAIsNullable(){
				    return true;
				}
				public Boolean VIOLENCIAIsKey(){
				    return false;
				}
				public Integer VIOLENCIALength(){
				    return 48;
				}
				public Integer VIOLENCIAPrecision(){
				    return 0;
				}
				public String VIOLENCIADefault(){
				
					return null;
				
				}
				public String VIOLENCIAComment(){
				
				    return "";
				
				}
				public String VIOLENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIOLENCIAOriginalDbColumnName(){
				
					return "VIOLENCIA";
				
				}

				
			    public String ANT_CONSUMO;

				public String getANT_CONSUMO () {
					return this.ANT_CONSUMO;
				}

				public Boolean ANT_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean ANT_CONSUMOIsKey(){
				    return false;
				}
				public Integer ANT_CONSUMOLength(){
				    return 4;
				}
				public Integer ANT_CONSUMOPrecision(){
				    return 0;
				}
				public String ANT_CONSUMODefault(){
				
					return null;
				
				}
				public String ANT_CONSUMOComment(){
				
				    return "";
				
				}
				public String ANT_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ANT_CONSUMOOriginalDbColumnName(){
				
					return "ANT_CONSUMO";
				
				}

				
			    public String CUAL_ANT_CONSUMO;

				public String getCUAL_ANT_CONSUMO () {
					return this.CUAL_ANT_CONSUMO;
				}

				public Boolean CUAL_ANT_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CUAL_ANT_CONSUMOIsKey(){
				    return false;
				}
				public Integer CUAL_ANT_CONSUMOLength(){
				    return 1;
				}
				public Integer CUAL_ANT_CONSUMOPrecision(){
				    return 0;
				}
				public String CUAL_ANT_CONSUMODefault(){
				
					return null;
				
				}
				public String CUAL_ANT_CONSUMOComment(){
				
				    return "";
				
				}
				public String CUAL_ANT_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUAL_ANT_CONSUMOOriginalDbColumnName(){
				
					return "CUAL_ANT_CONSUMO";
				
				}

				
			    public String CONTINUA_CONSUMO;

				public String getCONTINUA_CONSUMO () {
					return this.CONTINUA_CONSUMO;
				}

				public Boolean CONTINUA_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CONTINUA_CONSUMOIsKey(){
				    return false;
				}
				public Integer CONTINUA_CONSUMOLength(){
				    return 1;
				}
				public Integer CONTINUA_CONSUMOPrecision(){
				    return 0;
				}
				public String CONTINUA_CONSUMODefault(){
				
					return null;
				
				}
				public String CONTINUA_CONSUMOComment(){
				
				    return "";
				
				}
				public String CONTINUA_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTINUA_CONSUMOOriginalDbColumnName(){
				
					return "CONTINUA_CONSUMO";
				
				}

				
			    public String CUAL_CONTINUA_CONSUMO;

				public String getCUAL_CONTINUA_CONSUMO () {
					return this.CUAL_CONTINUA_CONSUMO;
				}

				public Boolean CUAL_CONTINUA_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CUAL_CONTINUA_CONSUMOIsKey(){
				    return false;
				}
				public Integer CUAL_CONTINUA_CONSUMOLength(){
				    return 1;
				}
				public Integer CUAL_CONTINUA_CONSUMOPrecision(){
				    return 0;
				}
				public String CUAL_CONTINUA_CONSUMODefault(){
				
					return null;
				
				}
				public String CUAL_CONTINUA_CONSUMOComment(){
				
				    return "";
				
				}
				public String CUAL_CONTINUA_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUAL_CONTINUA_CONSUMOOriginalDbColumnName(){
				
					return "CUAL_CONTINUA_CONSUMO";
				
				}

				
			    public String BCG;

				public String getBCG () {
					return this.BCG;
				}

				public Boolean BCGIsNullable(){
				    return true;
				}
				public Boolean BCGIsKey(){
				    return false;
				}
				public Integer BCGLength(){
				    return 1;
				}
				public Integer BCGPrecision(){
				    return 0;
				}
				public String BCGDefault(){
				
					return null;
				
				}
				public String BCGComment(){
				
				    return "";
				
				}
				public String BCGPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BCGOriginalDbColumnName(){
				
					return "BCG";
				
				}

				
			    public String HEPATITIS_B;

				public String getHEPATITIS_B () {
					return this.HEPATITIS_B;
				}

				public Boolean HEPATITIS_BIsNullable(){
				    return true;
				}
				public Boolean HEPATITIS_BIsKey(){
				    return false;
				}
				public Integer HEPATITIS_BLength(){
				    return 1;
				}
				public Integer HEPATITIS_BPrecision(){
				    return 0;
				}
				public String HEPATITIS_BDefault(){
				
					return null;
				
				}
				public String HEPATITIS_BComment(){
				
				    return "";
				
				}
				public String HEPATITIS_BPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEPATITIS_BOriginalDbColumnName(){
				
					return "HEPATITIS_B";
				
				}

				
			    public String POLIO;

				public String getPOLIO () {
					return this.POLIO;
				}

				public Boolean POLIOIsNullable(){
				    return true;
				}
				public Boolean POLIOIsKey(){
				    return false;
				}
				public Integer POLIOLength(){
				    return 1;
				}
				public Integer POLIOPrecision(){
				    return 0;
				}
				public String POLIODefault(){
				
					return null;
				
				}
				public String POLIOComment(){
				
				    return "";
				
				}
				public String POLIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String POLIOOriginalDbColumnName(){
				
					return "POLIO";
				
				}

				
			    public String HIB;

				public String getHIB () {
					return this.HIB;
				}

				public Boolean HIBIsNullable(){
				    return true;
				}
				public Boolean HIBIsKey(){
				    return false;
				}
				public Integer HIBLength(){
				    return 1;
				}
				public Integer HIBPrecision(){
				    return 0;
				}
				public String HIBDefault(){
				
					return null;
				
				}
				public String HIBComment(){
				
				    return "";
				
				}
				public String HIBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HIBOriginalDbColumnName(){
				
					return "HIB";
				
				}

				
			    public String NEUMOCOCO;

				public String getNEUMOCOCO () {
					return this.NEUMOCOCO;
				}

				public Boolean NEUMOCOCOIsNullable(){
				    return true;
				}
				public Boolean NEUMOCOCOIsKey(){
				    return false;
				}
				public Integer NEUMOCOCOLength(){
				    return 1;
				}
				public Integer NEUMOCOCOPrecision(){
				    return 0;
				}
				public String NEUMOCOCODefault(){
				
					return null;
				
				}
				public String NEUMOCOCOComment(){
				
				    return "";
				
				}
				public String NEUMOCOCOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NEUMOCOCOOriginalDbColumnName(){
				
					return "NEUMOCOCO";
				
				}

				
			    public String ROTAVIRUS;

				public String getROTAVIRUS () {
					return this.ROTAVIRUS;
				}

				public Boolean ROTAVIRUSIsNullable(){
				    return true;
				}
				public Boolean ROTAVIRUSIsKey(){
				    return false;
				}
				public Integer ROTAVIRUSLength(){
				    return 1;
				}
				public Integer ROTAVIRUSPrecision(){
				    return 0;
				}
				public String ROTAVIRUSDefault(){
				
					return null;
				
				}
				public String ROTAVIRUSComment(){
				
				    return "";
				
				}
				public String ROTAVIRUSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ROTAVIRUSOriginalDbColumnName(){
				
					return "ROTAVIRUS";
				
				}

				
			    public String INFLUENCIA_EST;

				public String getINFLUENCIA_EST () {
					return this.INFLUENCIA_EST;
				}

				public Boolean INFLUENCIA_ESTIsNullable(){
				    return true;
				}
				public Boolean INFLUENCIA_ESTIsKey(){
				    return false;
				}
				public Integer INFLUENCIA_ESTLength(){
				    return 1;
				}
				public Integer INFLUENCIA_ESTPrecision(){
				    return 0;
				}
				public String INFLUENCIA_ESTDefault(){
				
					return null;
				
				}
				public String INFLUENCIA_ESTComment(){
				
				    return "";
				
				}
				public String INFLUENCIA_ESTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String INFLUENCIA_ESTOriginalDbColumnName(){
				
					return "INFLUENCIA_EST";
				
				}

				
			    public String SRP;

				public String getSRP () {
					return this.SRP;
				}

				public Boolean SRPIsNullable(){
				    return true;
				}
				public Boolean SRPIsKey(){
				    return false;
				}
				public Integer SRPLength(){
				    return 1;
				}
				public Integer SRPPrecision(){
				    return 0;
				}
				public String SRPDefault(){
				
					return null;
				
				}
				public String SRPComment(){
				
				    return "";
				
				}
				public String SRPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SRPOriginalDbColumnName(){
				
					return "SRP";
				
				}

				
			    public String VARICELA;

				public String getVARICELA () {
					return this.VARICELA;
				}

				public Boolean VARICELAIsNullable(){
				    return true;
				}
				public Boolean VARICELAIsKey(){
				    return false;
				}
				public Integer VARICELALength(){
				    return 1;
				}
				public Integer VARICELAPrecision(){
				    return 0;
				}
				public String VARICELADefault(){
				
					return null;
				
				}
				public String VARICELAComment(){
				
				    return "";
				
				}
				public String VARICELAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VARICELAOriginalDbColumnName(){
				
					return "VARICELA";
				
				}

				
			    public String HEPATITIS_A;

				public String getHEPATITIS_A () {
					return this.HEPATITIS_A;
				}

				public Boolean HEPATITIS_AIsNullable(){
				    return true;
				}
				public Boolean HEPATITIS_AIsKey(){
				    return false;
				}
				public Integer HEPATITIS_ALength(){
				    return 1;
				}
				public Integer HEPATITIS_APrecision(){
				    return 0;
				}
				public String HEPATITIS_ADefault(){
				
					return null;
				
				}
				public String HEPATITIS_AComment(){
				
				    return "";
				
				}
				public String HEPATITIS_APattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEPATITIS_AOriginalDbColumnName(){
				
					return "HEPATITIS_A";
				
				}

				
			    public String FA;

				public String getFA () {
					return this.FA;
				}

				public Boolean FAIsNullable(){
				    return true;
				}
				public Boolean FAIsKey(){
				    return false;
				}
				public Integer FALength(){
				    return 1;
				}
				public Integer FAPrecision(){
				    return 0;
				}
				public String FADefault(){
				
					return null;
				
				}
				public String FAComment(){
				
				    return "";
				
				}
				public String FAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FAOriginalDbColumnName(){
				
					return "FA";
				
				}

				
			    public String DPT;

				public String getDPT () {
					return this.DPT;
				}

				public Boolean DPTIsNullable(){
				    return true;
				}
				public Boolean DPTIsKey(){
				    return false;
				}
				public Integer DPTLength(){
				    return 1;
				}
				public Integer DPTPrecision(){
				    return 0;
				}
				public String DPTDefault(){
				
					return null;
				
				}
				public String DPTComment(){
				
				    return "";
				
				}
				public String DPTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DPTOriginalDbColumnName(){
				
					return "DPT";
				
				}

				
			    public String VPH;

				public String getVPH () {
					return this.VPH;
				}

				public Boolean VPHIsNullable(){
				    return true;
				}
				public Boolean VPHIsKey(){
				    return false;
				}
				public Integer VPHLength(){
				    return 1;
				}
				public Integer VPHPrecision(){
				    return 0;
				}
				public String VPHDefault(){
				
					return null;
				
				}
				public String VPHComment(){
				
				    return "";
				
				}
				public String VPHPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VPHOriginalDbColumnName(){
				
					return "VPH";
				
				}

				
			    public String TD;

				public String getTD () {
					return this.TD;
				}

				public Boolean TDIsNullable(){
				    return true;
				}
				public Boolean TDIsKey(){
				    return false;
				}
				public Integer TDLength(){
				    return 1;
				}
				public Integer TDPrecision(){
				    return 0;
				}
				public String TDDefault(){
				
					return null;
				
				}
				public String TDComment(){
				
				    return "";
				
				}
				public String TDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TDOriginalDbColumnName(){
				
					return "TD";
				
				}

				
			    public String MAMOGRAFIA;

				public String getMAMOGRAFIA () {
					return this.MAMOGRAFIA;
				}

				public Boolean MAMOGRAFIAIsNullable(){
				    return true;
				}
				public Boolean MAMOGRAFIAIsKey(){
				    return false;
				}
				public Integer MAMOGRAFIALength(){
				    return 1;
				}
				public Integer MAMOGRAFIAPrecision(){
				    return 0;
				}
				public String MAMOGRAFIADefault(){
				
					return null;
				
				}
				public String MAMOGRAFIAComment(){
				
				    return "";
				
				}
				public String MAMOGRAFIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MAMOGRAFIAOriginalDbColumnName(){
				
					return "MAMOGRAFIA";
				
				}

				
			    public String PROTESIS_DENTAL;

				public String getPROTESIS_DENTAL () {
					return this.PROTESIS_DENTAL;
				}

				public Boolean PROTESIS_DENTALIsNullable(){
				    return true;
				}
				public Boolean PROTESIS_DENTALIsKey(){
				    return false;
				}
				public Integer PROTESIS_DENTALLength(){
				    return 1;
				}
				public Integer PROTESIS_DENTALPrecision(){
				    return 0;
				}
				public String PROTESIS_DENTALDefault(){
				
					return null;
				
				}
				public String PROTESIS_DENTALComment(){
				
				    return "";
				
				}
				public String PROTESIS_DENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROTESIS_DENTALOriginalDbColumnName(){
				
					return "PROTESIS_DENTAL";
				
				}

				
			    public String RECIBIO_MEDICAMENTOS;

				public String getRECIBIO_MEDICAMENTOS () {
					return this.RECIBIO_MEDICAMENTOS;
				}

				public Boolean RECIBIO_MEDICAMENTOSIsNullable(){
				    return true;
				}
				public Boolean RECIBIO_MEDICAMENTOSIsKey(){
				    return false;
				}
				public Integer RECIBIO_MEDICAMENTOSLength(){
				    return 1;
				}
				public Integer RECIBIO_MEDICAMENTOSPrecision(){
				    return 0;
				}
				public String RECIBIO_MEDICAMENTOSDefault(){
				
					return null;
				
				}
				public String RECIBIO_MEDICAMENTOSComment(){
				
				    return "";
				
				}
				public String RECIBIO_MEDICAMENTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBIO_MEDICAMENTOSOriginalDbColumnName(){
				
					return "RECIBIO_MEDICAMENTOS";
				
				}

				
			    public String VALIDADO;

				public String getVALIDADO () {
					return this.VALIDADO;
				}

				public Boolean VALIDADOIsNullable(){
				    return true;
				}
				public Boolean VALIDADOIsKey(){
				    return false;
				}
				public Integer VALIDADOLength(){
				    return 8;
				}
				public Integer VALIDADOPrecision(){
				    return 0;
				}
				public String VALIDADODefault(){
				
					return null;
				
				}
				public String VALIDADOComment(){
				
				    return "";
				
				}
				public String VALIDADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VALIDADOOriginalDbColumnName(){
				
					return "VALIDADO";
				
				}

				
			    public String ECOGRAFIA_MAMARIA;

				public String getECOGRAFIA_MAMARIA () {
					return this.ECOGRAFIA_MAMARIA;
				}

				public Boolean ECOGRAFIA_MAMARIAIsNullable(){
				    return true;
				}
				public Boolean ECOGRAFIA_MAMARIAIsKey(){
				    return false;
				}
				public Integer ECOGRAFIA_MAMARIALength(){
				    return 1;
				}
				public Integer ECOGRAFIA_MAMARIAPrecision(){
				    return 0;
				}
				public String ECOGRAFIA_MAMARIADefault(){
				
					return null;
				
				}
				public String ECOGRAFIA_MAMARIAComment(){
				
				    return "";
				
				}
				public String ECOGRAFIA_MAMARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ECOGRAFIA_MAMARIAOriginalDbColumnName(){
				
					return "ECOGRAFIA_MAMARIA";
				
				}

				
			    public String MENTALES;

				public String getMENTALES () {
					return this.MENTALES;
				}

				public Boolean MENTALESIsNullable(){
				    return true;
				}
				public Boolean MENTALESIsKey(){
				    return false;
				}
				public Integer MENTALESLength(){
				    return null;
				}
				public Integer MENTALESPrecision(){
				    return null;
				}
				public String MENTALESDefault(){
				
					return null;
				
				}
				public String MENTALESComment(){
				
				    return "";
				
				}
				public String MENTALESPattern(){
				
					return "";
				
				}
				public String MENTALESOriginalDbColumnName(){
				
					return "MENTALES";
				
				}

				
			    public String INF_SUM_USUARIO;

				public String getINF_SUM_USUARIO () {
					return this.INF_SUM_USUARIO;
				}

				public Boolean INF_SUM_USUARIOIsNullable(){
				    return true;
				}
				public Boolean INF_SUM_USUARIOIsKey(){
				    return false;
				}
				public Integer INF_SUM_USUARIOLength(){
				    return null;
				}
				public Integer INF_SUM_USUARIOPrecision(){
				    return null;
				}
				public String INF_SUM_USUARIODefault(){
				
					return null;
				
				}
				public String INF_SUM_USUARIOComment(){
				
				    return "";
				
				}
				public String INF_SUM_USUARIOPattern(){
				
					return "";
				
				}
				public String INF_SUM_USUARIOOriginalDbColumnName(){
				
					return "INF_SUM_USUARIO";
				
				}

				
			    public String NIVEL_INGRESO;

				public String getNIVEL_INGRESO () {
					return this.NIVEL_INGRESO;
				}

				public Boolean NIVEL_INGRESOIsNullable(){
				    return true;
				}
				public Boolean NIVEL_INGRESOIsKey(){
				    return false;
				}
				public Integer NIVEL_INGRESOLength(){
				    return null;
				}
				public Integer NIVEL_INGRESOPrecision(){
				    return null;
				}
				public String NIVEL_INGRESODefault(){
				
					return null;
				
				}
				public String NIVEL_INGRESOComment(){
				
				    return "";
				
				}
				public String NIVEL_INGRESOPattern(){
				
					return "";
				
				}
				public String NIVEL_INGRESOOriginalDbColumnName(){
				
					return "NIVEL_INGRESO";
				
				}

				
			    public String VACUNACION_NOPAI;

				public String getVACUNACION_NOPAI () {
					return this.VACUNACION_NOPAI;
				}

				public Boolean VACUNACION_NOPAIIsNullable(){
				    return true;
				}
				public Boolean VACUNACION_NOPAIIsKey(){
				    return false;
				}
				public Integer VACUNACION_NOPAILength(){
				    return null;
				}
				public Integer VACUNACION_NOPAIPrecision(){
				    return null;
				}
				public String VACUNACION_NOPAIDefault(){
				
					return null;
				
				}
				public String VACUNACION_NOPAIComment(){
				
				    return "";
				
				}
				public String VACUNACION_NOPAIPattern(){
				
					return "";
				
				}
				public String VACUNACION_NOPAIOriginalDbColumnName(){
				
					return "VACUNACION_NOPAI";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				
			    public String GESTOR;

				public String getGESTOR () {
					return this.GESTOR;
				}

				public Boolean GESTORIsNullable(){
				    return true;
				}
				public Boolean GESTORIsKey(){
				    return false;
				}
				public Integer GESTORLength(){
				    return 403;
				}
				public Integer GESTORPrecision(){
				    return 0;
				}
				public String GESTORDefault(){
				
					return null;
				
				}
				public String GESTORComment(){
				
				    return "";
				
				}
				public String GESTORPattern(){
				
					return "";
				
				}
				public String GESTOROriginalDbColumnName(){
				
					return "GESTOR";
				
				}

				
			    public java.util.Date FFINALIZACION;

				public java.util.Date getFFINALIZACION () {
					return this.FFINALIZACION;
				}

				public Boolean FFINALIZACIONIsNullable(){
				    return true;
				}
				public Boolean FFINALIZACIONIsKey(){
				    return false;
				}
				public Integer FFINALIZACIONLength(){
				    return 0;
				}
				public Integer FFINALIZACIONPrecision(){
				    return 0;
				}
				public String FFINALIZACIONDefault(){
				
					return null;
				
				}
				public String FFINALIZACIONComment(){
				
				    return "";
				
				}
				public String FFINALIZACIONPattern(){
				
					return "";
				
				}
				public String FFINALIZACIONOriginalDbColumnName(){
				
					return "FFINALIZACION";
				
				}

				
			    public BigDecimal FINDRISK_VALOR;

				public BigDecimal getFINDRISK_VALOR () {
					return this.FINDRISK_VALOR;
				}

				public Boolean FINDRISK_VALORIsNullable(){
				    return true;
				}
				public Boolean FINDRISK_VALORIsKey(){
				    return false;
				}
				public Integer FINDRISK_VALORLength(){
				    return 40;
				}
				public Integer FINDRISK_VALORPrecision(){
				    return 0;
				}
				public String FINDRISK_VALORDefault(){
				
					return null;
				
				}
				public String FINDRISK_VALORComment(){
				
				    return "";
				
				}
				public String FINDRISK_VALORPattern(){
				
					return "";
				
				}
				public String FINDRISK_VALOROriginalDbColumnName(){
				
					return "FINDRISK_VALOR";
				
				}

				
			    public String FINDRISK_CATEGORIA;

				public String getFINDRISK_CATEGORIA () {
					return this.FINDRISK_CATEGORIA;
				}

				public Boolean FINDRISK_CATEGORIAIsNullable(){
				    return true;
				}
				public Boolean FINDRISK_CATEGORIAIsKey(){
				    return false;
				}
				public Integer FINDRISK_CATEGORIALength(){
				    return 21;
				}
				public Integer FINDRISK_CATEGORIAPrecision(){
				    return 0;
				}
				public String FINDRISK_CATEGORIADefault(){
				
					return null;
				
				}
				public String FINDRISK_CATEGORIAComment(){
				
				    return "";
				
				}
				public String FINDRISK_CATEGORIAPattern(){
				
					return "";
				
				}
				public String FINDRISK_CATEGORIAOriginalDbColumnName(){
				
					return "FINDRISK_CATEGORIA";
				
				}

				
			    public BigDecimal UORG_EBAS;

				public BigDecimal getUORG_EBAS () {
					return this.UORG_EBAS;
				}

				public Boolean UORG_EBASIsNullable(){
				    return true;
				}
				public Boolean UORG_EBASIsKey(){
				    return false;
				}
				public Integer UORG_EBASLength(){
				    return 0;
				}
				public Integer UORG_EBASPrecision(){
				    return null;
				}
				public String UORG_EBASDefault(){
				
					return "";
				
				}
				public String UORG_EBASComment(){
				
				    return "";
				
				}
				public String UORG_EBASPattern(){
				
					return "";
				
				}
				public String UORG_EBASOriginalDbColumnName(){
				
					return "UORG_EBAS";
				
				}

				
			    public String PREPAGADA;

				public String getPREPAGADA () {
					return this.PREPAGADA;
				}

				public Boolean PREPAGADAIsNullable(){
				    return true;
				}
				public Boolean PREPAGADAIsKey(){
				    return false;
				}
				public Integer PREPAGADALength(){
				    return 500;
				}
				public Integer PREPAGADAPrecision(){
				    return 0;
				}
				public String PREPAGADADefault(){
				
					return null;
				
				}
				public String PREPAGADAComment(){
				
				    return "";
				
				}
				public String PREPAGADAPattern(){
				
					return "";
				
				}
				public String PREPAGADAOriginalDbColumnName(){
				
					return "PREPAGADA";
				
				}

				
			    public String TIPO_REGISTRO;

				public String getTIPO_REGISTRO () {
					return this.TIPO_REGISTRO;
				}

				public Boolean TIPO_REGISTROIsNullable(){
				    return true;
				}
				public Boolean TIPO_REGISTROIsKey(){
				    return false;
				}
				public Integer TIPO_REGISTROLength(){
				    return 11;
				}
				public Integer TIPO_REGISTROPrecision(){
				    return 0;
				}
				public String TIPO_REGISTRODefault(){
				
					return null;
				
				}
				public String TIPO_REGISTROComment(){
				
				    return "";
				
				}
				public String TIPO_REGISTROPattern(){
				
					return "";
				
				}
				public String TIPO_REGISTROOriginalDbColumnName(){
				
					return "TIPO_REGISTRO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.PERSONA_ID;
						
							result = prime * result + (int) this.FICHA_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out4Struct other = (out4Struct) obj;
		
						if (this.PERSONA_ID != other.PERSONA_ID)
							return false;
					
						if (this.FICHA_ID != other.FICHA_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(out4Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            other.FICHA_ID = this.FICHA_ID;
	            other.TREGIMEN_SALUD = this.TREGIMEN_SALUD;
	            other.EPS = this.EPS;
	            other.FREGISTRO = this.FREGISTRO;
	            other.RECOMENDACIONES = this.RECOMENDACIONES;
	            other.FORMACION = this.FORMACION;
	            other.EXPANSION = this.EXPANSION;
	            other.CONSOLIDACION = this.CONSOLIDACION;
	            other.APERTURA = this.APERTURA;
	            other.POSPARENTAL = this.POSPARENTAL;
	            other.DISOLUCION = this.DISOLUCION;
	            other.ESTFAMILIAR = this.ESTFAMILIAR;
	            other.TIPO_VIVIENDA = this.TIPO_VIVIENDA;
	            other.CUARTOS = this.CUARTOS;
	            other.UBICACION = this.UBICACION;
	            other.BANOS = this.BANOS;
	            other.TENENCIA = this.TENENCIA;
	            other.TRESPORCUARTO = this.TRESPORCUARTO;
	            other.TIPOHAB = this.TIPOHAB;
	            other.ACT_PRODUCTIVA = this.ACT_PRODUCTIVA;
	            other.MAQUINARIA = this.MAQUINARIA;
	            other.EXCRETAS = this.EXCRETAS;
	            other.MEDIOS_COMUNICACION = this.MEDIOS_COMUNICACION;
	            other.TIPO_ALUMBRADO = this.TIPO_ALUMBRADO;
	            other.MASCOTAS = this.MASCOTAS;
	            other.MASCOTAS_VAC = this.MASCOTAS_VAC;
	            other.DISP_BASURAS = this.DISP_BASURAS;
	            other.VECTORES = this.VECTORES;
	            other.PROB_ACCIDENTE = this.PROB_ACCIDENTE;
	            other.CONT_AMB = this.CONT_AMB;
	            other.ABAST_AGUA = this.ABAST_AGUA;
	            other.TRATA_CASA_AGUA = this.TRATA_CASA_AGUA;
	            other.TRATA_AGUA_FUENTE = this.TRATA_AGUA_FUENTE;
	            other.TIPO_COCINA = this.TIPO_COCINA;
	            other.HUMO_VIVIENDA = this.HUMO_VIVIENDA;
	            other.COCINA_CONSTRU_MATERIAL = this.COCINA_CONSTRU_MATERIAL;
	            other.COCINA_VIVIENDA = this.COCINA_VIVIENDA;
	            other.COMBUSTIBLE_COCINA = this.COMBUSTIBLE_COCINA;
	            other.COCINA_DORMITORIO = this.COCINA_DORMITORIO;
	            other.TIPO_PISOS = this.TIPO_PISOS;
	            other.TIPO_TECHOS = this.TIPO_TECHOS;
	            other.TIPO_PAREDES = this.TIPO_PAREDES;
	            other.VIVIENDA_2KM = this.VIVIENDA_2KM;
	            other.BARRERAS_ACCESOS = this.BARRERAS_ACCESOS;
	            other.DIST_SALUD_CERCANO = this.DIST_SALUD_CERCANO;
	            other.MEDIO_TRANSPORTE = this.MEDIO_TRANSPORTE;
	            other.VIA_ACCESO = this.VIA_ACCESO;
	            other.NACIDOS_VIVOS = this.NACIDOS_VIVOS;
	            other.MORTALIDAD = this.MORTALIDAD;
	            other.HIPERTENSION = this.HIPERTENSION;
	            other.DIABETES = this.DIABETES;
	            other.ENF_CARDIACAS = this.ENF_CARDIACAS;
	            other.CANCER = this.CANCER;
	            other.ENF_RENAL = this.ENF_RENAL;
	            other.ENF_CONGENITA = this.ENF_CONGENITA;
	            other.AYUDA_FAMI_NECES = this.AYUDA_FAMI_NECES;
	            other.AYUDA_FAMI_PROYEC = this.AYUDA_FAMI_PROYEC;
	            other.APOYO_FAMI_SENTIM = this.APOYO_FAMI_SENTIM;
	            other.DECISIONES_HOGAR = this.DECISIONES_HOGAR;
	            other.COM_INTRAFAMILIAR = this.COM_INTRAFAMILIAR;
	            other.ACT_FAMILIAR = this.ACT_FAMILIAR;
	            other.DISFRUTA_ACTIVIDADES = this.DISFRUTA_ACTIVIDADES;
	            other.CEPILLADO = this.CEPILLADO;
	            other.NUM_CEPILLADO = this.NUM_CEPILLADO;
	            other.CARIES = this.CARIES;
	            other.ODONTOLOGO = this.ODONTOLOGO;
	            other.FREC_ODONTOLOGO = this.FREC_ODONTOLOGO;
	            other.FULTIMA_ODONTOLOGIA = this.FULTIMA_ODONTOLOGIA;
	            other.TOP_FLUOR = this.TOP_FLUOR;
	            other.SEDA_DENTAL = this.SEDA_DENTAL;
	            other.SELLANTE = this.SELLANTE;
	            other.PERDIDA_DIENTES = this.PERDIDA_DIENTES;
	            other.CARNE = this.CARNE;
	            other.ESQUEMA_EDAD = this.ESQUEMA_EDAD;
	            other.ENF_TROPICAL = this.ENF_TROPICAL;
	            other.ENF_TRANSMISION = this.ENF_TRANSMISION;
	            other.TRATAMIENTO_ETS = this.TRATAMIENTO_ETS;
	            other.PROBLEMAS_VISUALES = this.PROBLEMAS_VISUALES;
	            other.PROBLEMAS_AUDITIVOS = this.PROBLEMAS_AUDITIVOS;
	            other.RENDIMIENTO_ESTUDIOS = this.RENDIMIENTO_ESTUDIOS;
	            other.ACT_EXTRACURRICULAR = this.ACT_EXTRACURRICULAR;
	            other.PRESION_SISTOLICA = this.PRESION_SISTOLICA;
	            other.PRESION_DIASTOLICA = this.PRESION_DIASTOLICA;
	            other.ACT_FISICA = this.ACT_FISICA;
	            other.FREC_ACT_FISICA = this.FREC_ACT_FISICA;
	            other.DURACION_ACT_FISICA = this.DURACION_ACT_FISICA;
	            other.INT_ACT_FISICA = this.INT_ACT_FISICA;
	            other.CAIDAS = this.CAIDAS;
	            other.DISC_FISICA = this.DISC_FISICA;
	            other.DISC_MENTAL = this.DISC_MENTAL;
	            other.EDAD_MESTRUACION = this.EDAD_MESTRUACION;
	            other.FECHA_REGLA = this.FECHA_REGLA;
	            other.PARACLINICOS = this.PARACLINICOS;
	            other.CITOLOGIA = this.CITOLOGIA;
	            other.FECHA_CITOLOGIA = this.FECHA_CITOLOGIA;
	            other.EXAMEN_SENO = this.EXAMEN_SENO;
	            other.PLAN_FAMILIAR = this.PLAN_FAMILIAR;
	            other.METODO_PLANF = this.METODO_PLANF;
	            other.TIEMPO_MET_ANIOS = this.TIEMPO_MET_ANIOS;
	            other.TIEMPO_MET_MESES = this.TIEMPO_MET_MESES;
	            other.TIEMPO_MET_DIAS = this.TIEMPO_MET_DIAS;
	            other.CONTR_PLANF_FAMILIAR = this.CONTR_PLANF_FAMILIAR;
	            other.EXAMEN_PROSTATA = this.EXAMEN_PROSTATA;
	            other.PSA = this.PSA;
	            other.FECHA_EXAMEN = this.FECHA_EXAMEN;
	            other.GESTA_CONFIRMADA = this.GESTA_CONFIRMADA;
	            other.GESTA_PLANEADA = this.GESTA_PLANEADA;
	            other.CONVIVENCIA_PAREJA = this.CONVIVENCIA_PAREJA;
	            other.FUR = this.FUR;
	            other.SEMANAS = this.SEMANAS;
	            other.FECHA_PARTO = this.FECHA_PARTO;
	            other.GANANCIA_PESP = this.GANANCIA_PESP;
	            other.CARNE_EMB = this.CARNE_EMB;
	            other.CONTROL_PRENATAL = this.CONTROL_PRENATAL;
	            other.QUIEN_CONTROL = this.QUIEN_CONTROL;
	            other.TRIMESTRE_ING_CONTROL = this.TRIMESTRE_ING_CONTROL;
	            other.FECHA_CONTROL_INI = this.FECHA_CONTROL_INI;
	            other.VAL_ODONTOLOGIA = this.VAL_ODONTOLOGIA;
	            other.VAC_GESTANTE = this.VAC_GESTANTE;
	            other.NUM_GESTACIONES = this.NUM_GESTACIONES;
	            other.NUM_PARTOS = this.NUM_PARTOS;
	            other.NUM_ABORTOS = this.NUM_ABORTOS;
	            other.NUM_CESAREA = this.NUM_CESAREA;
	            other.NUM_IVE = this.NUM_IVE;
	            other.CAUSA_IVE = this.CAUSA_IVE;
	            other.EMB_ECTOPICO = this.EMB_ECTOPICO;
	            other.NUM_NACIDOS_VIVOS = this.NUM_NACIDOS_VIVOS;
	            other.FECHA_ULT_PARTO = this.FECHA_ULT_PARTO;
	            other.RIESGO_OBSTETRICO = this.RIESGO_OBSTETRICO;
	            other.HEMOGLOBINA = this.HEMOGLOBINA;
	            other.SEROLOGIA = this.SEROLOGIA;
	            other.VIH = this.VIH;
	            other.SUPLEMENTACION = this.SUPLEMENTACION;
	            other.PERCENTIL_NUTRICIONAL = this.PERCENTIL_NUTRICIONAL;
	            other.TABAQUISMO = this.TABAQUISMO;
	            other.NUM_CIGARRILLOS = this.NUM_CIGARRILLOS;
	            other.ALCOHOL = this.ALCOHOL;
	            other.FREC_ALCOHOL = this.FREC_ALCOHOL;
	            other.ALT_UTERINA = this.ALT_UTERINA;
	            other.SEDENTARISMO = this.SEDENTARISMO;
	            other.PARTO = this.PARTO;
	            other.QUIEN_PARTO = this.QUIEN_PARTO;
	            other.COMPLICACIONES = this.COMPLICACIONES;
	            other.ATENCION_PARTO = this.ATENCION_PARTO;
	            other.TIEMPO_GESTACION = this.TIEMPO_GESTACION;
	            other.ATENCION_INSTITUCIONAL = this.ATENCION_INSTITUCIONAL;
	            other.COMPLICACIONES_POSTPARTO = this.COMPLICACIONES_POSTPARTO;
	            other.COMPLICACIONES_PARTO = this.COMPLICACIONES_PARTO;
	            other.COMPLICACIONES_EMBARAZO = this.COMPLICACIONES_EMBARAZO;
	            other.PLANIFICACION = this.PLANIFICACION;
	            other.CONSUME_MEDICAMENTO = this.CONSUME_MEDICAMENTO;
	            other.PESO_NACER = this.PESO_NACER;
	            other.TALLA_NACER = this.TALLA_NACER;
	            other.PERIMETRO_CEFALICO = this.PERIMETRO_CEFALICO;
	            other.PREMATUREZ = this.PREMATUREZ;
	            other.COMPLICACIONES_EMB = this.COMPLICACIONES_EMB;
	            other.RECIBE_MED = this.RECIBE_MED;
	            other.REGISTRADO = this.REGISTRADO;
	            other.ANTECEDENTES_PERINATALES = this.ANTECEDENTES_PERINATALES;
	            other.PESO_KG = this.PESO_KG;
	            other.TALLA = this.TALLA;
	            other.CONTROL_CYD = this.CONTROL_CYD;
	            other.IMC = this.IMC;
	            other.ESTADO_NUTRICION = this.ESTADO_NUTRICION;
	            other.VALORACION_DESARROLLO = this.VALORACION_DESARROLLO;
	            other.LACTANCIA_6MESES = this.LACTANCIA_6MESES;
	            other.TOMADO_MED_HIPERTENSION = this.TOMADO_MED_HIPERTENSION;
	            other.PERIMETRO_ABD = this.PERIMETRO_ABD;
	            other.GLUCOSA_EMBARAZO = this.GLUCOSA_EMBARAZO;
	            other.CONSUMO_VEGETALES = this.CONSUMO_VEGETALES;
	            other.SEGURIDAD_ALIMENTARIA = this.SEGURIDAD_ALIMENTARIA;
	            other.DESPARACITADO = this.DESPARACITADO;
	            other.FECHA_DESPARACITADO = this.FECHA_DESPARACITADO;
	            other.PROGRAMAS_INSCRITO = this.PROGRAMAS_INSCRITO;
	            other.TRANSTORNO_ALIMENTACION = this.TRANSTORNO_ALIMENTACION;
	            other.MORB_CRONICA = this.MORB_CRONICA;
	            other.PERIMETRO_PANTORRILLA = this.PERIMETRO_PANTORRILLA;
	            other.MORBILIDAD_AGUDA = this.MORBILIDAD_AGUDA;
	            other.BUSCA_AYUDA = this.BUSCA_AYUDA;
	            other.PORQUE = this.PORQUE;
	            other.RECIBE_MANEJO = this.RECIBE_MANEJO;
	            other.QUIEN_FORMULA = this.QUIEN_FORMULA;
	            other.CONSULTA_SIQUIATRIA = this.CONSULTA_SIQUIATRIA;
	            other.FORMULADO_MED_PSIQUIATRICOS = this.FORMULADO_MED_PSIQUIATRICOS;
	            other.FACTORES_RIESGO = this.FACTORES_RIESGO;
	            other.SITUACION_ESTRES = this.SITUACION_ESTRES;
	            other.VIOLENCIA = this.VIOLENCIA;
	            other.ANT_CONSUMO = this.ANT_CONSUMO;
	            other.CUAL_ANT_CONSUMO = this.CUAL_ANT_CONSUMO;
	            other.CONTINUA_CONSUMO = this.CONTINUA_CONSUMO;
	            other.CUAL_CONTINUA_CONSUMO = this.CUAL_CONTINUA_CONSUMO;
	            other.BCG = this.BCG;
	            other.HEPATITIS_B = this.HEPATITIS_B;
	            other.POLIO = this.POLIO;
	            other.HIB = this.HIB;
	            other.NEUMOCOCO = this.NEUMOCOCO;
	            other.ROTAVIRUS = this.ROTAVIRUS;
	            other.INFLUENCIA_EST = this.INFLUENCIA_EST;
	            other.SRP = this.SRP;
	            other.VARICELA = this.VARICELA;
	            other.HEPATITIS_A = this.HEPATITIS_A;
	            other.FA = this.FA;
	            other.DPT = this.DPT;
	            other.VPH = this.VPH;
	            other.TD = this.TD;
	            other.MAMOGRAFIA = this.MAMOGRAFIA;
	            other.PROTESIS_DENTAL = this.PROTESIS_DENTAL;
	            other.RECIBIO_MEDICAMENTOS = this.RECIBIO_MEDICAMENTOS;
	            other.VALIDADO = this.VALIDADO;
	            other.ECOGRAFIA_MAMARIA = this.ECOGRAFIA_MAMARIA;
	            other.MENTALES = this.MENTALES;
	            other.INF_SUM_USUARIO = this.INF_SUM_USUARIO;
	            other.NIVEL_INGRESO = this.NIVEL_INGRESO;
	            other.VACUNACION_NOPAI = this.VACUNACION_NOPAI;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            other.GESTOR = this.GESTOR;
	            other.FFINALIZACION = this.FFINALIZACION;
	            other.FINDRISK_VALOR = this.FINDRISK_VALOR;
	            other.FINDRISK_CATEGORIA = this.FINDRISK_CATEGORIA;
	            other.UORG_EBAS = this.UORG_EBAS;
	            other.PREPAGADA = this.PREPAGADA;
	            other.TIPO_REGISTRO = this.TIPO_REGISTRO;
	            
	}

	public void copyKeysDataTo(out4Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            	other.FICHA_ID = this.FICHA_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.PERSONA_ID = dis.readInt();
					
			        this.FICHA_ID = dis.readInt();
					
					this.TREGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.FORMACION = readString(dis);
					
					this.EXPANSION = readString(dis);
					
					this.CONSOLIDACION = readString(dis);
					
					this.APERTURA = readString(dis);
					
					this.POSPARENTAL = readString(dis);
					
					this.DISOLUCION = readString(dis);
					
					this.ESTFAMILIAR = readString(dis);
					
					this.TIPO_VIVIENDA = readString(dis);
					
					this.CUARTOS = readString(dis);
					
					this.UBICACION = readString(dis);
					
					this.BANOS = readString(dis);
					
					this.TENENCIA = readString(dis);
					
					this.TRESPORCUARTO = readString(dis);
					
					this.TIPOHAB = readString(dis);
					
					this.ACT_PRODUCTIVA = readString(dis);
					
					this.MAQUINARIA = readString(dis);
					
					this.EXCRETAS = readString(dis);
					
					this.MEDIOS_COMUNICACION = readString(dis);
					
					this.TIPO_ALUMBRADO = readString(dis);
					
					this.MASCOTAS = readString(dis);
					
					this.MASCOTAS_VAC = readString(dis);
					
					this.DISP_BASURAS = readString(dis);
					
					this.VECTORES = readString(dis);
					
					this.PROB_ACCIDENTE = readString(dis);
					
					this.CONT_AMB = readString(dis);
					
					this.ABAST_AGUA = readString(dis);
					
					this.TRATA_CASA_AGUA = readString(dis);
					
					this.TRATA_AGUA_FUENTE = readString(dis);
					
					this.TIPO_COCINA = readString(dis);
					
					this.HUMO_VIVIENDA = readString(dis);
					
					this.COCINA_CONSTRU_MATERIAL = readString(dis);
					
					this.COCINA_VIVIENDA = readString(dis);
					
					this.COMBUSTIBLE_COCINA = readString(dis);
					
					this.COCINA_DORMITORIO = readString(dis);
					
					this.TIPO_PISOS = readString(dis);
					
					this.TIPO_TECHOS = readString(dis);
					
					this.TIPO_PAREDES = readString(dis);
					
					this.VIVIENDA_2KM = readString(dis);
					
					this.BARRERAS_ACCESOS = readString(dis);
					
					this.DIST_SALUD_CERCANO = readString(dis);
					
					this.MEDIO_TRANSPORTE = readString(dis);
					
					this.VIA_ACCESO = readString(dis);
					
					this.NACIDOS_VIVOS = readString(dis);
					
					this.MORTALIDAD = readString(dis);
					
					this.HIPERTENSION = readString(dis);
					
					this.DIABETES = readString(dis);
					
					this.ENF_CARDIACAS = readString(dis);
					
					this.CANCER = readString(dis);
					
					this.ENF_RENAL = readString(dis);
					
					this.ENF_CONGENITA = readString(dis);
					
					this.AYUDA_FAMI_NECES = readString(dis);
					
					this.AYUDA_FAMI_PROYEC = readString(dis);
					
					this.APOYO_FAMI_SENTIM = readString(dis);
					
					this.DECISIONES_HOGAR = readString(dis);
					
					this.COM_INTRAFAMILIAR = readString(dis);
					
					this.ACT_FAMILIAR = readString(dis);
					
					this.DISFRUTA_ACTIVIDADES = readString(dis);
					
					this.CEPILLADO = readString(dis);
					
					this.NUM_CEPILLADO = readString(dis);
					
					this.CARIES = readString(dis);
					
					this.ODONTOLOGO = readString(dis);
					
					this.FREC_ODONTOLOGO = readString(dis);
					
					this.FULTIMA_ODONTOLOGIA = readString(dis);
					
					this.TOP_FLUOR = readString(dis);
					
					this.SEDA_DENTAL = readString(dis);
					
					this.SELLANTE = readString(dis);
					
					this.PERDIDA_DIENTES = readString(dis);
					
					this.CARNE = readString(dis);
					
					this.ESQUEMA_EDAD = readString(dis);
					
					this.ENF_TROPICAL = readString(dis);
					
					this.ENF_TRANSMISION = readString(dis);
					
					this.TRATAMIENTO_ETS = readString(dis);
					
					this.PROBLEMAS_VISUALES = readString(dis);
					
					this.PROBLEMAS_AUDITIVOS = readString(dis);
					
					this.RENDIMIENTO_ESTUDIOS = readString(dis);
					
					this.ACT_EXTRACURRICULAR = readString(dis);
					
					this.PRESION_SISTOLICA = readString(dis);
					
					this.PRESION_DIASTOLICA = readString(dis);
					
					this.ACT_FISICA = readString(dis);
					
					this.FREC_ACT_FISICA = readString(dis);
					
					this.DURACION_ACT_FISICA = readString(dis);
					
					this.INT_ACT_FISICA = readString(dis);
					
					this.CAIDAS = readString(dis);
					
					this.DISC_FISICA = readString(dis);
					
					this.DISC_MENTAL = readString(dis);
					
					this.EDAD_MESTRUACION = readString(dis);
					
					this.FECHA_REGLA = readString(dis);
					
					this.PARACLINICOS = readString(dis);
					
					this.CITOLOGIA = readString(dis);
					
					this.FECHA_CITOLOGIA = readString(dis);
					
					this.EXAMEN_SENO = readString(dis);
					
					this.PLAN_FAMILIAR = readString(dis);
					
					this.METODO_PLANF = readString(dis);
					
					this.TIEMPO_MET_ANIOS = readString(dis);
					
					this.TIEMPO_MET_MESES = readString(dis);
					
					this.TIEMPO_MET_DIAS = readString(dis);
					
					this.CONTR_PLANF_FAMILIAR = readString(dis);
					
					this.EXAMEN_PROSTATA = readString(dis);
					
					this.PSA = readString(dis);
					
					this.FECHA_EXAMEN = readString(dis);
					
					this.GESTA_CONFIRMADA = readString(dis);
					
					this.GESTA_PLANEADA = readString(dis);
					
					this.CONVIVENCIA_PAREJA = readString(dis);
					
					this.FUR = readString(dis);
					
					this.SEMANAS = readString(dis);
					
					this.FECHA_PARTO = readString(dis);
					
					this.GANANCIA_PESP = readString(dis);
					
					this.CARNE_EMB = readString(dis);
					
					this.CONTROL_PRENATAL = readString(dis);
					
					this.QUIEN_CONTROL = readString(dis);
					
					this.TRIMESTRE_ING_CONTROL = readString(dis);
					
					this.FECHA_CONTROL_INI = readString(dis);
					
					this.VAL_ODONTOLOGIA = readString(dis);
					
					this.VAC_GESTANTE = readString(dis);
					
					this.NUM_GESTACIONES = readString(dis);
					
					this.NUM_PARTOS = readString(dis);
					
					this.NUM_ABORTOS = readString(dis);
					
					this.NUM_CESAREA = readString(dis);
					
					this.NUM_IVE = readString(dis);
					
					this.CAUSA_IVE = readString(dis);
					
					this.EMB_ECTOPICO = readString(dis);
					
					this.NUM_NACIDOS_VIVOS = readString(dis);
					
					this.FECHA_ULT_PARTO = readString(dis);
					
					this.RIESGO_OBSTETRICO = readString(dis);
					
					this.HEMOGLOBINA = readString(dis);
					
					this.SEROLOGIA = readString(dis);
					
					this.VIH = readString(dis);
					
					this.SUPLEMENTACION = readString(dis);
					
					this.PERCENTIL_NUTRICIONAL = readString(dis);
					
					this.TABAQUISMO = readString(dis);
					
					this.NUM_CIGARRILLOS = readString(dis);
					
					this.ALCOHOL = readString(dis);
					
					this.FREC_ALCOHOL = readString(dis);
					
					this.ALT_UTERINA = readString(dis);
					
					this.SEDENTARISMO = readString(dis);
					
					this.PARTO = readString(dis);
					
					this.QUIEN_PARTO = readString(dis);
					
					this.COMPLICACIONES = readString(dis);
					
					this.ATENCION_PARTO = readString(dis);
					
					this.TIEMPO_GESTACION = readString(dis);
					
					this.ATENCION_INSTITUCIONAL = readString(dis);
					
					this.COMPLICACIONES_POSTPARTO = readString(dis);
					
					this.COMPLICACIONES_PARTO = readString(dis);
					
					this.COMPLICACIONES_EMBARAZO = readString(dis);
					
					this.PLANIFICACION = readString(dis);
					
					this.CONSUME_MEDICAMENTO = readString(dis);
					
					this.PESO_NACER = readString(dis);
					
					this.TALLA_NACER = readString(dis);
					
					this.PERIMETRO_CEFALICO = readString(dis);
					
					this.PREMATUREZ = readString(dis);
					
					this.COMPLICACIONES_EMB = readString(dis);
					
					this.RECIBE_MED = readString(dis);
					
					this.REGISTRADO = readString(dis);
					
					this.ANTECEDENTES_PERINATALES = readString(dis);
					
					this.PESO_KG = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.CONTROL_CYD = readString(dis);
					
					this.IMC = readString(dis);
					
					this.ESTADO_NUTRICION = readString(dis);
					
					this.VALORACION_DESARROLLO = readString(dis);
					
					this.LACTANCIA_6MESES = readString(dis);
					
					this.TOMADO_MED_HIPERTENSION = readString(dis);
					
					this.PERIMETRO_ABD = readString(dis);
					
					this.GLUCOSA_EMBARAZO = readString(dis);
					
					this.CONSUMO_VEGETALES = readString(dis);
					
					this.SEGURIDAD_ALIMENTARIA = readString(dis);
					
					this.DESPARACITADO = readString(dis);
					
					this.FECHA_DESPARACITADO = readString(dis);
					
					this.PROGRAMAS_INSCRITO = readString(dis);
					
					this.TRANSTORNO_ALIMENTACION = readString(dis);
					
					this.MORB_CRONICA = readString(dis);
					
					this.PERIMETRO_PANTORRILLA = readString(dis);
					
					this.MORBILIDAD_AGUDA = readString(dis);
					
					this.BUSCA_AYUDA = readString(dis);
					
					this.PORQUE = readString(dis);
					
					this.RECIBE_MANEJO = readString(dis);
					
					this.QUIEN_FORMULA = readString(dis);
					
					this.CONSULTA_SIQUIATRIA = readString(dis);
					
					this.FORMULADO_MED_PSIQUIATRICOS = readString(dis);
					
					this.FACTORES_RIESGO = readString(dis);
					
					this.SITUACION_ESTRES = readString(dis);
					
					this.VIOLENCIA = readString(dis);
					
					this.ANT_CONSUMO = readString(dis);
					
					this.CUAL_ANT_CONSUMO = readString(dis);
					
					this.CONTINUA_CONSUMO = readString(dis);
					
					this.CUAL_CONTINUA_CONSUMO = readString(dis);
					
					this.BCG = readString(dis);
					
					this.HEPATITIS_B = readString(dis);
					
					this.POLIO = readString(dis);
					
					this.HIB = readString(dis);
					
					this.NEUMOCOCO = readString(dis);
					
					this.ROTAVIRUS = readString(dis);
					
					this.INFLUENCIA_EST = readString(dis);
					
					this.SRP = readString(dis);
					
					this.VARICELA = readString(dis);
					
					this.HEPATITIS_A = readString(dis);
					
					this.FA = readString(dis);
					
					this.DPT = readString(dis);
					
					this.VPH = readString(dis);
					
					this.TD = readString(dis);
					
					this.MAMOGRAFIA = readString(dis);
					
					this.PROTESIS_DENTAL = readString(dis);
					
					this.RECIBIO_MEDICAMENTOS = readString(dis);
					
					this.VALIDADO = readString(dis);
					
					this.ECOGRAFIA_MAMARIA = readString(dis);
					
					this.MENTALES = readString(dis);
					
					this.INF_SUM_USUARIO = readString(dis);
					
					this.NIVEL_INGRESO = readString(dis);
					
					this.VACUNACION_NOPAI = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.GESTOR = readString(dis);
					
					this.FFINALIZACION = readDate(dis);
					
						this.FINDRISK_VALOR = (BigDecimal) dis.readObject();
					
					this.FINDRISK_CATEGORIA = readString(dis);
					
						this.UORG_EBAS = (BigDecimal) dis.readObject();
					
					this.PREPAGADA = readString(dis);
					
					this.TIPO_REGISTRO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.PERSONA_ID = dis.readInt();
					
			        this.FICHA_ID = dis.readInt();
					
					this.TREGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.FORMACION = readString(dis);
					
					this.EXPANSION = readString(dis);
					
					this.CONSOLIDACION = readString(dis);
					
					this.APERTURA = readString(dis);
					
					this.POSPARENTAL = readString(dis);
					
					this.DISOLUCION = readString(dis);
					
					this.ESTFAMILIAR = readString(dis);
					
					this.TIPO_VIVIENDA = readString(dis);
					
					this.CUARTOS = readString(dis);
					
					this.UBICACION = readString(dis);
					
					this.BANOS = readString(dis);
					
					this.TENENCIA = readString(dis);
					
					this.TRESPORCUARTO = readString(dis);
					
					this.TIPOHAB = readString(dis);
					
					this.ACT_PRODUCTIVA = readString(dis);
					
					this.MAQUINARIA = readString(dis);
					
					this.EXCRETAS = readString(dis);
					
					this.MEDIOS_COMUNICACION = readString(dis);
					
					this.TIPO_ALUMBRADO = readString(dis);
					
					this.MASCOTAS = readString(dis);
					
					this.MASCOTAS_VAC = readString(dis);
					
					this.DISP_BASURAS = readString(dis);
					
					this.VECTORES = readString(dis);
					
					this.PROB_ACCIDENTE = readString(dis);
					
					this.CONT_AMB = readString(dis);
					
					this.ABAST_AGUA = readString(dis);
					
					this.TRATA_CASA_AGUA = readString(dis);
					
					this.TRATA_AGUA_FUENTE = readString(dis);
					
					this.TIPO_COCINA = readString(dis);
					
					this.HUMO_VIVIENDA = readString(dis);
					
					this.COCINA_CONSTRU_MATERIAL = readString(dis);
					
					this.COCINA_VIVIENDA = readString(dis);
					
					this.COMBUSTIBLE_COCINA = readString(dis);
					
					this.COCINA_DORMITORIO = readString(dis);
					
					this.TIPO_PISOS = readString(dis);
					
					this.TIPO_TECHOS = readString(dis);
					
					this.TIPO_PAREDES = readString(dis);
					
					this.VIVIENDA_2KM = readString(dis);
					
					this.BARRERAS_ACCESOS = readString(dis);
					
					this.DIST_SALUD_CERCANO = readString(dis);
					
					this.MEDIO_TRANSPORTE = readString(dis);
					
					this.VIA_ACCESO = readString(dis);
					
					this.NACIDOS_VIVOS = readString(dis);
					
					this.MORTALIDAD = readString(dis);
					
					this.HIPERTENSION = readString(dis);
					
					this.DIABETES = readString(dis);
					
					this.ENF_CARDIACAS = readString(dis);
					
					this.CANCER = readString(dis);
					
					this.ENF_RENAL = readString(dis);
					
					this.ENF_CONGENITA = readString(dis);
					
					this.AYUDA_FAMI_NECES = readString(dis);
					
					this.AYUDA_FAMI_PROYEC = readString(dis);
					
					this.APOYO_FAMI_SENTIM = readString(dis);
					
					this.DECISIONES_HOGAR = readString(dis);
					
					this.COM_INTRAFAMILIAR = readString(dis);
					
					this.ACT_FAMILIAR = readString(dis);
					
					this.DISFRUTA_ACTIVIDADES = readString(dis);
					
					this.CEPILLADO = readString(dis);
					
					this.NUM_CEPILLADO = readString(dis);
					
					this.CARIES = readString(dis);
					
					this.ODONTOLOGO = readString(dis);
					
					this.FREC_ODONTOLOGO = readString(dis);
					
					this.FULTIMA_ODONTOLOGIA = readString(dis);
					
					this.TOP_FLUOR = readString(dis);
					
					this.SEDA_DENTAL = readString(dis);
					
					this.SELLANTE = readString(dis);
					
					this.PERDIDA_DIENTES = readString(dis);
					
					this.CARNE = readString(dis);
					
					this.ESQUEMA_EDAD = readString(dis);
					
					this.ENF_TROPICAL = readString(dis);
					
					this.ENF_TRANSMISION = readString(dis);
					
					this.TRATAMIENTO_ETS = readString(dis);
					
					this.PROBLEMAS_VISUALES = readString(dis);
					
					this.PROBLEMAS_AUDITIVOS = readString(dis);
					
					this.RENDIMIENTO_ESTUDIOS = readString(dis);
					
					this.ACT_EXTRACURRICULAR = readString(dis);
					
					this.PRESION_SISTOLICA = readString(dis);
					
					this.PRESION_DIASTOLICA = readString(dis);
					
					this.ACT_FISICA = readString(dis);
					
					this.FREC_ACT_FISICA = readString(dis);
					
					this.DURACION_ACT_FISICA = readString(dis);
					
					this.INT_ACT_FISICA = readString(dis);
					
					this.CAIDAS = readString(dis);
					
					this.DISC_FISICA = readString(dis);
					
					this.DISC_MENTAL = readString(dis);
					
					this.EDAD_MESTRUACION = readString(dis);
					
					this.FECHA_REGLA = readString(dis);
					
					this.PARACLINICOS = readString(dis);
					
					this.CITOLOGIA = readString(dis);
					
					this.FECHA_CITOLOGIA = readString(dis);
					
					this.EXAMEN_SENO = readString(dis);
					
					this.PLAN_FAMILIAR = readString(dis);
					
					this.METODO_PLANF = readString(dis);
					
					this.TIEMPO_MET_ANIOS = readString(dis);
					
					this.TIEMPO_MET_MESES = readString(dis);
					
					this.TIEMPO_MET_DIAS = readString(dis);
					
					this.CONTR_PLANF_FAMILIAR = readString(dis);
					
					this.EXAMEN_PROSTATA = readString(dis);
					
					this.PSA = readString(dis);
					
					this.FECHA_EXAMEN = readString(dis);
					
					this.GESTA_CONFIRMADA = readString(dis);
					
					this.GESTA_PLANEADA = readString(dis);
					
					this.CONVIVENCIA_PAREJA = readString(dis);
					
					this.FUR = readString(dis);
					
					this.SEMANAS = readString(dis);
					
					this.FECHA_PARTO = readString(dis);
					
					this.GANANCIA_PESP = readString(dis);
					
					this.CARNE_EMB = readString(dis);
					
					this.CONTROL_PRENATAL = readString(dis);
					
					this.QUIEN_CONTROL = readString(dis);
					
					this.TRIMESTRE_ING_CONTROL = readString(dis);
					
					this.FECHA_CONTROL_INI = readString(dis);
					
					this.VAL_ODONTOLOGIA = readString(dis);
					
					this.VAC_GESTANTE = readString(dis);
					
					this.NUM_GESTACIONES = readString(dis);
					
					this.NUM_PARTOS = readString(dis);
					
					this.NUM_ABORTOS = readString(dis);
					
					this.NUM_CESAREA = readString(dis);
					
					this.NUM_IVE = readString(dis);
					
					this.CAUSA_IVE = readString(dis);
					
					this.EMB_ECTOPICO = readString(dis);
					
					this.NUM_NACIDOS_VIVOS = readString(dis);
					
					this.FECHA_ULT_PARTO = readString(dis);
					
					this.RIESGO_OBSTETRICO = readString(dis);
					
					this.HEMOGLOBINA = readString(dis);
					
					this.SEROLOGIA = readString(dis);
					
					this.VIH = readString(dis);
					
					this.SUPLEMENTACION = readString(dis);
					
					this.PERCENTIL_NUTRICIONAL = readString(dis);
					
					this.TABAQUISMO = readString(dis);
					
					this.NUM_CIGARRILLOS = readString(dis);
					
					this.ALCOHOL = readString(dis);
					
					this.FREC_ALCOHOL = readString(dis);
					
					this.ALT_UTERINA = readString(dis);
					
					this.SEDENTARISMO = readString(dis);
					
					this.PARTO = readString(dis);
					
					this.QUIEN_PARTO = readString(dis);
					
					this.COMPLICACIONES = readString(dis);
					
					this.ATENCION_PARTO = readString(dis);
					
					this.TIEMPO_GESTACION = readString(dis);
					
					this.ATENCION_INSTITUCIONAL = readString(dis);
					
					this.COMPLICACIONES_POSTPARTO = readString(dis);
					
					this.COMPLICACIONES_PARTO = readString(dis);
					
					this.COMPLICACIONES_EMBARAZO = readString(dis);
					
					this.PLANIFICACION = readString(dis);
					
					this.CONSUME_MEDICAMENTO = readString(dis);
					
					this.PESO_NACER = readString(dis);
					
					this.TALLA_NACER = readString(dis);
					
					this.PERIMETRO_CEFALICO = readString(dis);
					
					this.PREMATUREZ = readString(dis);
					
					this.COMPLICACIONES_EMB = readString(dis);
					
					this.RECIBE_MED = readString(dis);
					
					this.REGISTRADO = readString(dis);
					
					this.ANTECEDENTES_PERINATALES = readString(dis);
					
					this.PESO_KG = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.CONTROL_CYD = readString(dis);
					
					this.IMC = readString(dis);
					
					this.ESTADO_NUTRICION = readString(dis);
					
					this.VALORACION_DESARROLLO = readString(dis);
					
					this.LACTANCIA_6MESES = readString(dis);
					
					this.TOMADO_MED_HIPERTENSION = readString(dis);
					
					this.PERIMETRO_ABD = readString(dis);
					
					this.GLUCOSA_EMBARAZO = readString(dis);
					
					this.CONSUMO_VEGETALES = readString(dis);
					
					this.SEGURIDAD_ALIMENTARIA = readString(dis);
					
					this.DESPARACITADO = readString(dis);
					
					this.FECHA_DESPARACITADO = readString(dis);
					
					this.PROGRAMAS_INSCRITO = readString(dis);
					
					this.TRANSTORNO_ALIMENTACION = readString(dis);
					
					this.MORB_CRONICA = readString(dis);
					
					this.PERIMETRO_PANTORRILLA = readString(dis);
					
					this.MORBILIDAD_AGUDA = readString(dis);
					
					this.BUSCA_AYUDA = readString(dis);
					
					this.PORQUE = readString(dis);
					
					this.RECIBE_MANEJO = readString(dis);
					
					this.QUIEN_FORMULA = readString(dis);
					
					this.CONSULTA_SIQUIATRIA = readString(dis);
					
					this.FORMULADO_MED_PSIQUIATRICOS = readString(dis);
					
					this.FACTORES_RIESGO = readString(dis);
					
					this.SITUACION_ESTRES = readString(dis);
					
					this.VIOLENCIA = readString(dis);
					
					this.ANT_CONSUMO = readString(dis);
					
					this.CUAL_ANT_CONSUMO = readString(dis);
					
					this.CONTINUA_CONSUMO = readString(dis);
					
					this.CUAL_CONTINUA_CONSUMO = readString(dis);
					
					this.BCG = readString(dis);
					
					this.HEPATITIS_B = readString(dis);
					
					this.POLIO = readString(dis);
					
					this.HIB = readString(dis);
					
					this.NEUMOCOCO = readString(dis);
					
					this.ROTAVIRUS = readString(dis);
					
					this.INFLUENCIA_EST = readString(dis);
					
					this.SRP = readString(dis);
					
					this.VARICELA = readString(dis);
					
					this.HEPATITIS_A = readString(dis);
					
					this.FA = readString(dis);
					
					this.DPT = readString(dis);
					
					this.VPH = readString(dis);
					
					this.TD = readString(dis);
					
					this.MAMOGRAFIA = readString(dis);
					
					this.PROTESIS_DENTAL = readString(dis);
					
					this.RECIBIO_MEDICAMENTOS = readString(dis);
					
					this.VALIDADO = readString(dis);
					
					this.ECOGRAFIA_MAMARIA = readString(dis);
					
					this.MENTALES = readString(dis);
					
					this.INF_SUM_USUARIO = readString(dis);
					
					this.NIVEL_INGRESO = readString(dis);
					
					this.VACUNACION_NOPAI = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
					this.GESTOR = readString(dis);
					
					this.FFINALIZACION = readDate(dis);
					
						this.FINDRISK_VALOR = (BigDecimal) dis.readObject();
					
					this.FINDRISK_CATEGORIA = readString(dis);
					
						this.UORG_EBAS = (BigDecimal) dis.readObject();
					
					this.PREPAGADA = readString(dis);
					
					this.TIPO_REGISTRO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.FORMACION,dos);
					
					// String
				
						writeString(this.EXPANSION,dos);
					
					// String
				
						writeString(this.CONSOLIDACION,dos);
					
					// String
				
						writeString(this.APERTURA,dos);
					
					// String
				
						writeString(this.POSPARENTAL,dos);
					
					// String
				
						writeString(this.DISOLUCION,dos);
					
					// String
				
						writeString(this.ESTFAMILIAR,dos);
					
					// String
				
						writeString(this.TIPO_VIVIENDA,dos);
					
					// String
				
						writeString(this.CUARTOS,dos);
					
					// String
				
						writeString(this.UBICACION,dos);
					
					// String
				
						writeString(this.BANOS,dos);
					
					// String
				
						writeString(this.TENENCIA,dos);
					
					// String
				
						writeString(this.TRESPORCUARTO,dos);
					
					// String
				
						writeString(this.TIPOHAB,dos);
					
					// String
				
						writeString(this.ACT_PRODUCTIVA,dos);
					
					// String
				
						writeString(this.MAQUINARIA,dos);
					
					// String
				
						writeString(this.EXCRETAS,dos);
					
					// String
				
						writeString(this.MEDIOS_COMUNICACION,dos);
					
					// String
				
						writeString(this.TIPO_ALUMBRADO,dos);
					
					// String
				
						writeString(this.MASCOTAS,dos);
					
					// String
				
						writeString(this.MASCOTAS_VAC,dos);
					
					// String
				
						writeString(this.DISP_BASURAS,dos);
					
					// String
				
						writeString(this.VECTORES,dos);
					
					// String
				
						writeString(this.PROB_ACCIDENTE,dos);
					
					// String
				
						writeString(this.CONT_AMB,dos);
					
					// String
				
						writeString(this.ABAST_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_CASA_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_AGUA_FUENTE,dos);
					
					// String
				
						writeString(this.TIPO_COCINA,dos);
					
					// String
				
						writeString(this.HUMO_VIVIENDA,dos);
					
					// String
				
						writeString(this.COCINA_CONSTRU_MATERIAL,dos);
					
					// String
				
						writeString(this.COCINA_VIVIENDA,dos);
					
					// String
				
						writeString(this.COMBUSTIBLE_COCINA,dos);
					
					// String
				
						writeString(this.COCINA_DORMITORIO,dos);
					
					// String
				
						writeString(this.TIPO_PISOS,dos);
					
					// String
				
						writeString(this.TIPO_TECHOS,dos);
					
					// String
				
						writeString(this.TIPO_PAREDES,dos);
					
					// String
				
						writeString(this.VIVIENDA_2KM,dos);
					
					// String
				
						writeString(this.BARRERAS_ACCESOS,dos);
					
					// String
				
						writeString(this.DIST_SALUD_CERCANO,dos);
					
					// String
				
						writeString(this.MEDIO_TRANSPORTE,dos);
					
					// String
				
						writeString(this.VIA_ACCESO,dos);
					
					// String
				
						writeString(this.NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.MORTALIDAD,dos);
					
					// String
				
						writeString(this.HIPERTENSION,dos);
					
					// String
				
						writeString(this.DIABETES,dos);
					
					// String
				
						writeString(this.ENF_CARDIACAS,dos);
					
					// String
				
						writeString(this.CANCER,dos);
					
					// String
				
						writeString(this.ENF_RENAL,dos);
					
					// String
				
						writeString(this.ENF_CONGENITA,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_NECES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_PROYEC,dos);
					
					// String
				
						writeString(this.APOYO_FAMI_SENTIM,dos);
					
					// String
				
						writeString(this.DECISIONES_HOGAR,dos);
					
					// String
				
						writeString(this.COM_INTRAFAMILIAR,dos);
					
					// String
				
						writeString(this.ACT_FAMILIAR,dos);
					
					// String
				
						writeString(this.DISFRUTA_ACTIVIDADES,dos);
					
					// String
				
						writeString(this.CEPILLADO,dos);
					
					// String
				
						writeString(this.NUM_CEPILLADO,dos);
					
					// String
				
						writeString(this.CARIES,dos);
					
					// String
				
						writeString(this.ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FREC_ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FULTIMA_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.TOP_FLUOR,dos);
					
					// String
				
						writeString(this.SEDA_DENTAL,dos);
					
					// String
				
						writeString(this.SELLANTE,dos);
					
					// String
				
						writeString(this.PERDIDA_DIENTES,dos);
					
					// String
				
						writeString(this.CARNE,dos);
					
					// String
				
						writeString(this.ESQUEMA_EDAD,dos);
					
					// String
				
						writeString(this.ENF_TROPICAL,dos);
					
					// String
				
						writeString(this.ENF_TRANSMISION,dos);
					
					// String
				
						writeString(this.TRATAMIENTO_ETS,dos);
					
					// String
				
						writeString(this.PROBLEMAS_VISUALES,dos);
					
					// String
				
						writeString(this.PROBLEMAS_AUDITIVOS,dos);
					
					// String
				
						writeString(this.RENDIMIENTO_ESTUDIOS,dos);
					
					// String
				
						writeString(this.ACT_EXTRACURRICULAR,dos);
					
					// String
				
						writeString(this.PRESION_SISTOLICA,dos);
					
					// String
				
						writeString(this.PRESION_DIASTOLICA,dos);
					
					// String
				
						writeString(this.ACT_FISICA,dos);
					
					// String
				
						writeString(this.FREC_ACT_FISICA,dos);
					
					// String
				
						writeString(this.DURACION_ACT_FISICA,dos);
					
					// String
				
						writeString(this.INT_ACT_FISICA,dos);
					
					// String
				
						writeString(this.CAIDAS,dos);
					
					// String
				
						writeString(this.DISC_FISICA,dos);
					
					// String
				
						writeString(this.DISC_MENTAL,dos);
					
					// String
				
						writeString(this.EDAD_MESTRUACION,dos);
					
					// String
				
						writeString(this.FECHA_REGLA,dos);
					
					// String
				
						writeString(this.PARACLINICOS,dos);
					
					// String
				
						writeString(this.CITOLOGIA,dos);
					
					// String
				
						writeString(this.FECHA_CITOLOGIA,dos);
					
					// String
				
						writeString(this.EXAMEN_SENO,dos);
					
					// String
				
						writeString(this.PLAN_FAMILIAR,dos);
					
					// String
				
						writeString(this.METODO_PLANF,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_ANIOS,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_MESES,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_DIAS,dos);
					
					// String
				
						writeString(this.CONTR_PLANF_FAMILIAR,dos);
					
					// String
				
						writeString(this.EXAMEN_PROSTATA,dos);
					
					// String
				
						writeString(this.PSA,dos);
					
					// String
				
						writeString(this.FECHA_EXAMEN,dos);
					
					// String
				
						writeString(this.GESTA_CONFIRMADA,dos);
					
					// String
				
						writeString(this.GESTA_PLANEADA,dos);
					
					// String
				
						writeString(this.CONVIVENCIA_PAREJA,dos);
					
					// String
				
						writeString(this.FUR,dos);
					
					// String
				
						writeString(this.SEMANAS,dos);
					
					// String
				
						writeString(this.FECHA_PARTO,dos);
					
					// String
				
						writeString(this.GANANCIA_PESP,dos);
					
					// String
				
						writeString(this.CARNE_EMB,dos);
					
					// String
				
						writeString(this.CONTROL_PRENATAL,dos);
					
					// String
				
						writeString(this.QUIEN_CONTROL,dos);
					
					// String
				
						writeString(this.TRIMESTRE_ING_CONTROL,dos);
					
					// String
				
						writeString(this.FECHA_CONTROL_INI,dos);
					
					// String
				
						writeString(this.VAL_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.VAC_GESTANTE,dos);
					
					// String
				
						writeString(this.NUM_GESTACIONES,dos);
					
					// String
				
						writeString(this.NUM_PARTOS,dos);
					
					// String
				
						writeString(this.NUM_ABORTOS,dos);
					
					// String
				
						writeString(this.NUM_CESAREA,dos);
					
					// String
				
						writeString(this.NUM_IVE,dos);
					
					// String
				
						writeString(this.CAUSA_IVE,dos);
					
					// String
				
						writeString(this.EMB_ECTOPICO,dos);
					
					// String
				
						writeString(this.NUM_NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.FECHA_ULT_PARTO,dos);
					
					// String
				
						writeString(this.RIESGO_OBSTETRICO,dos);
					
					// String
				
						writeString(this.HEMOGLOBINA,dos);
					
					// String
				
						writeString(this.SEROLOGIA,dos);
					
					// String
				
						writeString(this.VIH,dos);
					
					// String
				
						writeString(this.SUPLEMENTACION,dos);
					
					// String
				
						writeString(this.PERCENTIL_NUTRICIONAL,dos);
					
					// String
				
						writeString(this.TABAQUISMO,dos);
					
					// String
				
						writeString(this.NUM_CIGARRILLOS,dos);
					
					// String
				
						writeString(this.ALCOHOL,dos);
					
					// String
				
						writeString(this.FREC_ALCOHOL,dos);
					
					// String
				
						writeString(this.ALT_UTERINA,dos);
					
					// String
				
						writeString(this.SEDENTARISMO,dos);
					
					// String
				
						writeString(this.PARTO,dos);
					
					// String
				
						writeString(this.QUIEN_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES,dos);
					
					// String
				
						writeString(this.ATENCION_PARTO,dos);
					
					// String
				
						writeString(this.TIEMPO_GESTACION,dos);
					
					// String
				
						writeString(this.ATENCION_INSTITUCIONAL,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_POSTPARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMBARAZO,dos);
					
					// String
				
						writeString(this.PLANIFICACION,dos);
					
					// String
				
						writeString(this.CONSUME_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.PESO_NACER,dos);
					
					// String
				
						writeString(this.TALLA_NACER,dos);
					
					// String
				
						writeString(this.PERIMETRO_CEFALICO,dos);
					
					// String
				
						writeString(this.PREMATUREZ,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMB,dos);
					
					// String
				
						writeString(this.RECIBE_MED,dos);
					
					// String
				
						writeString(this.REGISTRADO,dos);
					
					// String
				
						writeString(this.ANTECEDENTES_PERINATALES,dos);
					
					// String
				
						writeString(this.PESO_KG,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.CONTROL_CYD,dos);
					
					// String
				
						writeString(this.IMC,dos);
					
					// String
				
						writeString(this.ESTADO_NUTRICION,dos);
					
					// String
				
						writeString(this.VALORACION_DESARROLLO,dos);
					
					// String
				
						writeString(this.LACTANCIA_6MESES,dos);
					
					// String
				
						writeString(this.TOMADO_MED_HIPERTENSION,dos);
					
					// String
				
						writeString(this.PERIMETRO_ABD,dos);
					
					// String
				
						writeString(this.GLUCOSA_EMBARAZO,dos);
					
					// String
				
						writeString(this.CONSUMO_VEGETALES,dos);
					
					// String
				
						writeString(this.SEGURIDAD_ALIMENTARIA,dos);
					
					// String
				
						writeString(this.DESPARACITADO,dos);
					
					// String
				
						writeString(this.FECHA_DESPARACITADO,dos);
					
					// String
				
						writeString(this.PROGRAMAS_INSCRITO,dos);
					
					// String
				
						writeString(this.TRANSTORNO_ALIMENTACION,dos);
					
					// String
				
						writeString(this.MORB_CRONICA,dos);
					
					// String
				
						writeString(this.PERIMETRO_PANTORRILLA,dos);
					
					// String
				
						writeString(this.MORBILIDAD_AGUDA,dos);
					
					// String
				
						writeString(this.BUSCA_AYUDA,dos);
					
					// String
				
						writeString(this.PORQUE,dos);
					
					// String
				
						writeString(this.RECIBE_MANEJO,dos);
					
					// String
				
						writeString(this.QUIEN_FORMULA,dos);
					
					// String
				
						writeString(this.CONSULTA_SIQUIATRIA,dos);
					
					// String
				
						writeString(this.FORMULADO_MED_PSIQUIATRICOS,dos);
					
					// String
				
						writeString(this.FACTORES_RIESGO,dos);
					
					// String
				
						writeString(this.SITUACION_ESTRES,dos);
					
					// String
				
						writeString(this.VIOLENCIA,dos);
					
					// String
				
						writeString(this.ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.BCG,dos);
					
					// String
				
						writeString(this.HEPATITIS_B,dos);
					
					// String
				
						writeString(this.POLIO,dos);
					
					// String
				
						writeString(this.HIB,dos);
					
					// String
				
						writeString(this.NEUMOCOCO,dos);
					
					// String
				
						writeString(this.ROTAVIRUS,dos);
					
					// String
				
						writeString(this.INFLUENCIA_EST,dos);
					
					// String
				
						writeString(this.SRP,dos);
					
					// String
				
						writeString(this.VARICELA,dos);
					
					// String
				
						writeString(this.HEPATITIS_A,dos);
					
					// String
				
						writeString(this.FA,dos);
					
					// String
				
						writeString(this.DPT,dos);
					
					// String
				
						writeString(this.VPH,dos);
					
					// String
				
						writeString(this.TD,dos);
					
					// String
				
						writeString(this.MAMOGRAFIA,dos);
					
					// String
				
						writeString(this.PROTESIS_DENTAL,dos);
					
					// String
				
						writeString(this.RECIBIO_MEDICAMENTOS,dos);
					
					// String
				
						writeString(this.VALIDADO,dos);
					
					// String
				
						writeString(this.ECOGRAFIA_MAMARIA,dos);
					
					// String
				
						writeString(this.MENTALES,dos);
					
					// String
				
						writeString(this.INF_SUM_USUARIO,dos);
					
					// String
				
						writeString(this.NIVEL_INGRESO,dos);
					
					// String
				
						writeString(this.VACUNACION_NOPAI,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.GESTOR,dos);
					
					// java.util.Date
				
						writeDate(this.FFINALIZACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FINDRISK_VALOR);
					
					// String
				
						writeString(this.FINDRISK_CATEGORIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_EBAS);
					
					// String
				
						writeString(this.PREPAGADA,dos);
					
					// String
				
						writeString(this.TIPO_REGISTRO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.FORMACION,dos);
					
					// String
				
						writeString(this.EXPANSION,dos);
					
					// String
				
						writeString(this.CONSOLIDACION,dos);
					
					// String
				
						writeString(this.APERTURA,dos);
					
					// String
				
						writeString(this.POSPARENTAL,dos);
					
					// String
				
						writeString(this.DISOLUCION,dos);
					
					// String
				
						writeString(this.ESTFAMILIAR,dos);
					
					// String
				
						writeString(this.TIPO_VIVIENDA,dos);
					
					// String
				
						writeString(this.CUARTOS,dos);
					
					// String
				
						writeString(this.UBICACION,dos);
					
					// String
				
						writeString(this.BANOS,dos);
					
					// String
				
						writeString(this.TENENCIA,dos);
					
					// String
				
						writeString(this.TRESPORCUARTO,dos);
					
					// String
				
						writeString(this.TIPOHAB,dos);
					
					// String
				
						writeString(this.ACT_PRODUCTIVA,dos);
					
					// String
				
						writeString(this.MAQUINARIA,dos);
					
					// String
				
						writeString(this.EXCRETAS,dos);
					
					// String
				
						writeString(this.MEDIOS_COMUNICACION,dos);
					
					// String
				
						writeString(this.TIPO_ALUMBRADO,dos);
					
					// String
				
						writeString(this.MASCOTAS,dos);
					
					// String
				
						writeString(this.MASCOTAS_VAC,dos);
					
					// String
				
						writeString(this.DISP_BASURAS,dos);
					
					// String
				
						writeString(this.VECTORES,dos);
					
					// String
				
						writeString(this.PROB_ACCIDENTE,dos);
					
					// String
				
						writeString(this.CONT_AMB,dos);
					
					// String
				
						writeString(this.ABAST_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_CASA_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_AGUA_FUENTE,dos);
					
					// String
				
						writeString(this.TIPO_COCINA,dos);
					
					// String
				
						writeString(this.HUMO_VIVIENDA,dos);
					
					// String
				
						writeString(this.COCINA_CONSTRU_MATERIAL,dos);
					
					// String
				
						writeString(this.COCINA_VIVIENDA,dos);
					
					// String
				
						writeString(this.COMBUSTIBLE_COCINA,dos);
					
					// String
				
						writeString(this.COCINA_DORMITORIO,dos);
					
					// String
				
						writeString(this.TIPO_PISOS,dos);
					
					// String
				
						writeString(this.TIPO_TECHOS,dos);
					
					// String
				
						writeString(this.TIPO_PAREDES,dos);
					
					// String
				
						writeString(this.VIVIENDA_2KM,dos);
					
					// String
				
						writeString(this.BARRERAS_ACCESOS,dos);
					
					// String
				
						writeString(this.DIST_SALUD_CERCANO,dos);
					
					// String
				
						writeString(this.MEDIO_TRANSPORTE,dos);
					
					// String
				
						writeString(this.VIA_ACCESO,dos);
					
					// String
				
						writeString(this.NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.MORTALIDAD,dos);
					
					// String
				
						writeString(this.HIPERTENSION,dos);
					
					// String
				
						writeString(this.DIABETES,dos);
					
					// String
				
						writeString(this.ENF_CARDIACAS,dos);
					
					// String
				
						writeString(this.CANCER,dos);
					
					// String
				
						writeString(this.ENF_RENAL,dos);
					
					// String
				
						writeString(this.ENF_CONGENITA,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_NECES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_PROYEC,dos);
					
					// String
				
						writeString(this.APOYO_FAMI_SENTIM,dos);
					
					// String
				
						writeString(this.DECISIONES_HOGAR,dos);
					
					// String
				
						writeString(this.COM_INTRAFAMILIAR,dos);
					
					// String
				
						writeString(this.ACT_FAMILIAR,dos);
					
					// String
				
						writeString(this.DISFRUTA_ACTIVIDADES,dos);
					
					// String
				
						writeString(this.CEPILLADO,dos);
					
					// String
				
						writeString(this.NUM_CEPILLADO,dos);
					
					// String
				
						writeString(this.CARIES,dos);
					
					// String
				
						writeString(this.ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FREC_ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FULTIMA_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.TOP_FLUOR,dos);
					
					// String
				
						writeString(this.SEDA_DENTAL,dos);
					
					// String
				
						writeString(this.SELLANTE,dos);
					
					// String
				
						writeString(this.PERDIDA_DIENTES,dos);
					
					// String
				
						writeString(this.CARNE,dos);
					
					// String
				
						writeString(this.ESQUEMA_EDAD,dos);
					
					// String
				
						writeString(this.ENF_TROPICAL,dos);
					
					// String
				
						writeString(this.ENF_TRANSMISION,dos);
					
					// String
				
						writeString(this.TRATAMIENTO_ETS,dos);
					
					// String
				
						writeString(this.PROBLEMAS_VISUALES,dos);
					
					// String
				
						writeString(this.PROBLEMAS_AUDITIVOS,dos);
					
					// String
				
						writeString(this.RENDIMIENTO_ESTUDIOS,dos);
					
					// String
				
						writeString(this.ACT_EXTRACURRICULAR,dos);
					
					// String
				
						writeString(this.PRESION_SISTOLICA,dos);
					
					// String
				
						writeString(this.PRESION_DIASTOLICA,dos);
					
					// String
				
						writeString(this.ACT_FISICA,dos);
					
					// String
				
						writeString(this.FREC_ACT_FISICA,dos);
					
					// String
				
						writeString(this.DURACION_ACT_FISICA,dos);
					
					// String
				
						writeString(this.INT_ACT_FISICA,dos);
					
					// String
				
						writeString(this.CAIDAS,dos);
					
					// String
				
						writeString(this.DISC_FISICA,dos);
					
					// String
				
						writeString(this.DISC_MENTAL,dos);
					
					// String
				
						writeString(this.EDAD_MESTRUACION,dos);
					
					// String
				
						writeString(this.FECHA_REGLA,dos);
					
					// String
				
						writeString(this.PARACLINICOS,dos);
					
					// String
				
						writeString(this.CITOLOGIA,dos);
					
					// String
				
						writeString(this.FECHA_CITOLOGIA,dos);
					
					// String
				
						writeString(this.EXAMEN_SENO,dos);
					
					// String
				
						writeString(this.PLAN_FAMILIAR,dos);
					
					// String
				
						writeString(this.METODO_PLANF,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_ANIOS,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_MESES,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_DIAS,dos);
					
					// String
				
						writeString(this.CONTR_PLANF_FAMILIAR,dos);
					
					// String
				
						writeString(this.EXAMEN_PROSTATA,dos);
					
					// String
				
						writeString(this.PSA,dos);
					
					// String
				
						writeString(this.FECHA_EXAMEN,dos);
					
					// String
				
						writeString(this.GESTA_CONFIRMADA,dos);
					
					// String
				
						writeString(this.GESTA_PLANEADA,dos);
					
					// String
				
						writeString(this.CONVIVENCIA_PAREJA,dos);
					
					// String
				
						writeString(this.FUR,dos);
					
					// String
				
						writeString(this.SEMANAS,dos);
					
					// String
				
						writeString(this.FECHA_PARTO,dos);
					
					// String
				
						writeString(this.GANANCIA_PESP,dos);
					
					// String
				
						writeString(this.CARNE_EMB,dos);
					
					// String
				
						writeString(this.CONTROL_PRENATAL,dos);
					
					// String
				
						writeString(this.QUIEN_CONTROL,dos);
					
					// String
				
						writeString(this.TRIMESTRE_ING_CONTROL,dos);
					
					// String
				
						writeString(this.FECHA_CONTROL_INI,dos);
					
					// String
				
						writeString(this.VAL_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.VAC_GESTANTE,dos);
					
					// String
				
						writeString(this.NUM_GESTACIONES,dos);
					
					// String
				
						writeString(this.NUM_PARTOS,dos);
					
					// String
				
						writeString(this.NUM_ABORTOS,dos);
					
					// String
				
						writeString(this.NUM_CESAREA,dos);
					
					// String
				
						writeString(this.NUM_IVE,dos);
					
					// String
				
						writeString(this.CAUSA_IVE,dos);
					
					// String
				
						writeString(this.EMB_ECTOPICO,dos);
					
					// String
				
						writeString(this.NUM_NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.FECHA_ULT_PARTO,dos);
					
					// String
				
						writeString(this.RIESGO_OBSTETRICO,dos);
					
					// String
				
						writeString(this.HEMOGLOBINA,dos);
					
					// String
				
						writeString(this.SEROLOGIA,dos);
					
					// String
				
						writeString(this.VIH,dos);
					
					// String
				
						writeString(this.SUPLEMENTACION,dos);
					
					// String
				
						writeString(this.PERCENTIL_NUTRICIONAL,dos);
					
					// String
				
						writeString(this.TABAQUISMO,dos);
					
					// String
				
						writeString(this.NUM_CIGARRILLOS,dos);
					
					// String
				
						writeString(this.ALCOHOL,dos);
					
					// String
				
						writeString(this.FREC_ALCOHOL,dos);
					
					// String
				
						writeString(this.ALT_UTERINA,dos);
					
					// String
				
						writeString(this.SEDENTARISMO,dos);
					
					// String
				
						writeString(this.PARTO,dos);
					
					// String
				
						writeString(this.QUIEN_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES,dos);
					
					// String
				
						writeString(this.ATENCION_PARTO,dos);
					
					// String
				
						writeString(this.TIEMPO_GESTACION,dos);
					
					// String
				
						writeString(this.ATENCION_INSTITUCIONAL,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_POSTPARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMBARAZO,dos);
					
					// String
				
						writeString(this.PLANIFICACION,dos);
					
					// String
				
						writeString(this.CONSUME_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.PESO_NACER,dos);
					
					// String
				
						writeString(this.TALLA_NACER,dos);
					
					// String
				
						writeString(this.PERIMETRO_CEFALICO,dos);
					
					// String
				
						writeString(this.PREMATUREZ,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMB,dos);
					
					// String
				
						writeString(this.RECIBE_MED,dos);
					
					// String
				
						writeString(this.REGISTRADO,dos);
					
					// String
				
						writeString(this.ANTECEDENTES_PERINATALES,dos);
					
					// String
				
						writeString(this.PESO_KG,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.CONTROL_CYD,dos);
					
					// String
				
						writeString(this.IMC,dos);
					
					// String
				
						writeString(this.ESTADO_NUTRICION,dos);
					
					// String
				
						writeString(this.VALORACION_DESARROLLO,dos);
					
					// String
				
						writeString(this.LACTANCIA_6MESES,dos);
					
					// String
				
						writeString(this.TOMADO_MED_HIPERTENSION,dos);
					
					// String
				
						writeString(this.PERIMETRO_ABD,dos);
					
					// String
				
						writeString(this.GLUCOSA_EMBARAZO,dos);
					
					// String
				
						writeString(this.CONSUMO_VEGETALES,dos);
					
					// String
				
						writeString(this.SEGURIDAD_ALIMENTARIA,dos);
					
					// String
				
						writeString(this.DESPARACITADO,dos);
					
					// String
				
						writeString(this.FECHA_DESPARACITADO,dos);
					
					// String
				
						writeString(this.PROGRAMAS_INSCRITO,dos);
					
					// String
				
						writeString(this.TRANSTORNO_ALIMENTACION,dos);
					
					// String
				
						writeString(this.MORB_CRONICA,dos);
					
					// String
				
						writeString(this.PERIMETRO_PANTORRILLA,dos);
					
					// String
				
						writeString(this.MORBILIDAD_AGUDA,dos);
					
					// String
				
						writeString(this.BUSCA_AYUDA,dos);
					
					// String
				
						writeString(this.PORQUE,dos);
					
					// String
				
						writeString(this.RECIBE_MANEJO,dos);
					
					// String
				
						writeString(this.QUIEN_FORMULA,dos);
					
					// String
				
						writeString(this.CONSULTA_SIQUIATRIA,dos);
					
					// String
				
						writeString(this.FORMULADO_MED_PSIQUIATRICOS,dos);
					
					// String
				
						writeString(this.FACTORES_RIESGO,dos);
					
					// String
				
						writeString(this.SITUACION_ESTRES,dos);
					
					// String
				
						writeString(this.VIOLENCIA,dos);
					
					// String
				
						writeString(this.ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.BCG,dos);
					
					// String
				
						writeString(this.HEPATITIS_B,dos);
					
					// String
				
						writeString(this.POLIO,dos);
					
					// String
				
						writeString(this.HIB,dos);
					
					// String
				
						writeString(this.NEUMOCOCO,dos);
					
					// String
				
						writeString(this.ROTAVIRUS,dos);
					
					// String
				
						writeString(this.INFLUENCIA_EST,dos);
					
					// String
				
						writeString(this.SRP,dos);
					
					// String
				
						writeString(this.VARICELA,dos);
					
					// String
				
						writeString(this.HEPATITIS_A,dos);
					
					// String
				
						writeString(this.FA,dos);
					
					// String
				
						writeString(this.DPT,dos);
					
					// String
				
						writeString(this.VPH,dos);
					
					// String
				
						writeString(this.TD,dos);
					
					// String
				
						writeString(this.MAMOGRAFIA,dos);
					
					// String
				
						writeString(this.PROTESIS_DENTAL,dos);
					
					// String
				
						writeString(this.RECIBIO_MEDICAMENTOS,dos);
					
					// String
				
						writeString(this.VALIDADO,dos);
					
					// String
				
						writeString(this.ECOGRAFIA_MAMARIA,dos);
					
					// String
				
						writeString(this.MENTALES,dos);
					
					// String
				
						writeString(this.INF_SUM_USUARIO,dos);
					
					// String
				
						writeString(this.NIVEL_INGRESO,dos);
					
					// String
				
						writeString(this.VACUNACION_NOPAI,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
					// String
				
						writeString(this.GESTOR,dos);
					
					// java.util.Date
				
						writeDate(this.FFINALIZACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FINDRISK_VALOR);
					
					// String
				
						writeString(this.FINDRISK_CATEGORIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_EBAS);
					
					// String
				
						writeString(this.PREPAGADA,dos);
					
					// String
				
						writeString(this.TIPO_REGISTRO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMEN_SALUD="+TREGIMEN_SALUD);
		sb.append(",EPS="+EPS);
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
		sb.append(",FORMACION="+FORMACION);
		sb.append(",EXPANSION="+EXPANSION);
		sb.append(",CONSOLIDACION="+CONSOLIDACION);
		sb.append(",APERTURA="+APERTURA);
		sb.append(",POSPARENTAL="+POSPARENTAL);
		sb.append(",DISOLUCION="+DISOLUCION);
		sb.append(",ESTFAMILIAR="+ESTFAMILIAR);
		sb.append(",TIPO_VIVIENDA="+TIPO_VIVIENDA);
		sb.append(",CUARTOS="+CUARTOS);
		sb.append(",UBICACION="+UBICACION);
		sb.append(",BANOS="+BANOS);
		sb.append(",TENENCIA="+TENENCIA);
		sb.append(",TRESPORCUARTO="+TRESPORCUARTO);
		sb.append(",TIPOHAB="+TIPOHAB);
		sb.append(",ACT_PRODUCTIVA="+ACT_PRODUCTIVA);
		sb.append(",MAQUINARIA="+MAQUINARIA);
		sb.append(",EXCRETAS="+EXCRETAS);
		sb.append(",MEDIOS_COMUNICACION="+MEDIOS_COMUNICACION);
		sb.append(",TIPO_ALUMBRADO="+TIPO_ALUMBRADO);
		sb.append(",MASCOTAS="+MASCOTAS);
		sb.append(",MASCOTAS_VAC="+MASCOTAS_VAC);
		sb.append(",DISP_BASURAS="+DISP_BASURAS);
		sb.append(",VECTORES="+VECTORES);
		sb.append(",PROB_ACCIDENTE="+PROB_ACCIDENTE);
		sb.append(",CONT_AMB="+CONT_AMB);
		sb.append(",ABAST_AGUA="+ABAST_AGUA);
		sb.append(",TRATA_CASA_AGUA="+TRATA_CASA_AGUA);
		sb.append(",TRATA_AGUA_FUENTE="+TRATA_AGUA_FUENTE);
		sb.append(",TIPO_COCINA="+TIPO_COCINA);
		sb.append(",HUMO_VIVIENDA="+HUMO_VIVIENDA);
		sb.append(",COCINA_CONSTRU_MATERIAL="+COCINA_CONSTRU_MATERIAL);
		sb.append(",COCINA_VIVIENDA="+COCINA_VIVIENDA);
		sb.append(",COMBUSTIBLE_COCINA="+COMBUSTIBLE_COCINA);
		sb.append(",COCINA_DORMITORIO="+COCINA_DORMITORIO);
		sb.append(",TIPO_PISOS="+TIPO_PISOS);
		sb.append(",TIPO_TECHOS="+TIPO_TECHOS);
		sb.append(",TIPO_PAREDES="+TIPO_PAREDES);
		sb.append(",VIVIENDA_2KM="+VIVIENDA_2KM);
		sb.append(",BARRERAS_ACCESOS="+BARRERAS_ACCESOS);
		sb.append(",DIST_SALUD_CERCANO="+DIST_SALUD_CERCANO);
		sb.append(",MEDIO_TRANSPORTE="+MEDIO_TRANSPORTE);
		sb.append(",VIA_ACCESO="+VIA_ACCESO);
		sb.append(",NACIDOS_VIVOS="+NACIDOS_VIVOS);
		sb.append(",MORTALIDAD="+MORTALIDAD);
		sb.append(",HIPERTENSION="+HIPERTENSION);
		sb.append(",DIABETES="+DIABETES);
		sb.append(",ENF_CARDIACAS="+ENF_CARDIACAS);
		sb.append(",CANCER="+CANCER);
		sb.append(",ENF_RENAL="+ENF_RENAL);
		sb.append(",ENF_CONGENITA="+ENF_CONGENITA);
		sb.append(",AYUDA_FAMI_NECES="+AYUDA_FAMI_NECES);
		sb.append(",AYUDA_FAMI_PROYEC="+AYUDA_FAMI_PROYEC);
		sb.append(",APOYO_FAMI_SENTIM="+APOYO_FAMI_SENTIM);
		sb.append(",DECISIONES_HOGAR="+DECISIONES_HOGAR);
		sb.append(",COM_INTRAFAMILIAR="+COM_INTRAFAMILIAR);
		sb.append(",ACT_FAMILIAR="+ACT_FAMILIAR);
		sb.append(",DISFRUTA_ACTIVIDADES="+DISFRUTA_ACTIVIDADES);
		sb.append(",CEPILLADO="+CEPILLADO);
		sb.append(",NUM_CEPILLADO="+NUM_CEPILLADO);
		sb.append(",CARIES="+CARIES);
		sb.append(",ODONTOLOGO="+ODONTOLOGO);
		sb.append(",FREC_ODONTOLOGO="+FREC_ODONTOLOGO);
		sb.append(",FULTIMA_ODONTOLOGIA="+FULTIMA_ODONTOLOGIA);
		sb.append(",TOP_FLUOR="+TOP_FLUOR);
		sb.append(",SEDA_DENTAL="+SEDA_DENTAL);
		sb.append(",SELLANTE="+SELLANTE);
		sb.append(",PERDIDA_DIENTES="+PERDIDA_DIENTES);
		sb.append(",CARNE="+CARNE);
		sb.append(",ESQUEMA_EDAD="+ESQUEMA_EDAD);
		sb.append(",ENF_TROPICAL="+ENF_TROPICAL);
		sb.append(",ENF_TRANSMISION="+ENF_TRANSMISION);
		sb.append(",TRATAMIENTO_ETS="+TRATAMIENTO_ETS);
		sb.append(",PROBLEMAS_VISUALES="+PROBLEMAS_VISUALES);
		sb.append(",PROBLEMAS_AUDITIVOS="+PROBLEMAS_AUDITIVOS);
		sb.append(",RENDIMIENTO_ESTUDIOS="+RENDIMIENTO_ESTUDIOS);
		sb.append(",ACT_EXTRACURRICULAR="+ACT_EXTRACURRICULAR);
		sb.append(",PRESION_SISTOLICA="+PRESION_SISTOLICA);
		sb.append(",PRESION_DIASTOLICA="+PRESION_DIASTOLICA);
		sb.append(",ACT_FISICA="+ACT_FISICA);
		sb.append(",FREC_ACT_FISICA="+FREC_ACT_FISICA);
		sb.append(",DURACION_ACT_FISICA="+DURACION_ACT_FISICA);
		sb.append(",INT_ACT_FISICA="+INT_ACT_FISICA);
		sb.append(",CAIDAS="+CAIDAS);
		sb.append(",DISC_FISICA="+DISC_FISICA);
		sb.append(",DISC_MENTAL="+DISC_MENTAL);
		sb.append(",EDAD_MESTRUACION="+EDAD_MESTRUACION);
		sb.append(",FECHA_REGLA="+FECHA_REGLA);
		sb.append(",PARACLINICOS="+PARACLINICOS);
		sb.append(",CITOLOGIA="+CITOLOGIA);
		sb.append(",FECHA_CITOLOGIA="+FECHA_CITOLOGIA);
		sb.append(",EXAMEN_SENO="+EXAMEN_SENO);
		sb.append(",PLAN_FAMILIAR="+PLAN_FAMILIAR);
		sb.append(",METODO_PLANF="+METODO_PLANF);
		sb.append(",TIEMPO_MET_ANIOS="+TIEMPO_MET_ANIOS);
		sb.append(",TIEMPO_MET_MESES="+TIEMPO_MET_MESES);
		sb.append(",TIEMPO_MET_DIAS="+TIEMPO_MET_DIAS);
		sb.append(",CONTR_PLANF_FAMILIAR="+CONTR_PLANF_FAMILIAR);
		sb.append(",EXAMEN_PROSTATA="+EXAMEN_PROSTATA);
		sb.append(",PSA="+PSA);
		sb.append(",FECHA_EXAMEN="+FECHA_EXAMEN);
		sb.append(",GESTA_CONFIRMADA="+GESTA_CONFIRMADA);
		sb.append(",GESTA_PLANEADA="+GESTA_PLANEADA);
		sb.append(",CONVIVENCIA_PAREJA="+CONVIVENCIA_PAREJA);
		sb.append(",FUR="+FUR);
		sb.append(",SEMANAS="+SEMANAS);
		sb.append(",FECHA_PARTO="+FECHA_PARTO);
		sb.append(",GANANCIA_PESP="+GANANCIA_PESP);
		sb.append(",CARNE_EMB="+CARNE_EMB);
		sb.append(",CONTROL_PRENATAL="+CONTROL_PRENATAL);
		sb.append(",QUIEN_CONTROL="+QUIEN_CONTROL);
		sb.append(",TRIMESTRE_ING_CONTROL="+TRIMESTRE_ING_CONTROL);
		sb.append(",FECHA_CONTROL_INI="+FECHA_CONTROL_INI);
		sb.append(",VAL_ODONTOLOGIA="+VAL_ODONTOLOGIA);
		sb.append(",VAC_GESTANTE="+VAC_GESTANTE);
		sb.append(",NUM_GESTACIONES="+NUM_GESTACIONES);
		sb.append(",NUM_PARTOS="+NUM_PARTOS);
		sb.append(",NUM_ABORTOS="+NUM_ABORTOS);
		sb.append(",NUM_CESAREA="+NUM_CESAREA);
		sb.append(",NUM_IVE="+NUM_IVE);
		sb.append(",CAUSA_IVE="+CAUSA_IVE);
		sb.append(",EMB_ECTOPICO="+EMB_ECTOPICO);
		sb.append(",NUM_NACIDOS_VIVOS="+NUM_NACIDOS_VIVOS);
		sb.append(",FECHA_ULT_PARTO="+FECHA_ULT_PARTO);
		sb.append(",RIESGO_OBSTETRICO="+RIESGO_OBSTETRICO);
		sb.append(",HEMOGLOBINA="+HEMOGLOBINA);
		sb.append(",SEROLOGIA="+SEROLOGIA);
		sb.append(",VIH="+VIH);
		sb.append(",SUPLEMENTACION="+SUPLEMENTACION);
		sb.append(",PERCENTIL_NUTRICIONAL="+PERCENTIL_NUTRICIONAL);
		sb.append(",TABAQUISMO="+TABAQUISMO);
		sb.append(",NUM_CIGARRILLOS="+NUM_CIGARRILLOS);
		sb.append(",ALCOHOL="+ALCOHOL);
		sb.append(",FREC_ALCOHOL="+FREC_ALCOHOL);
		sb.append(",ALT_UTERINA="+ALT_UTERINA);
		sb.append(",SEDENTARISMO="+SEDENTARISMO);
		sb.append(",PARTO="+PARTO);
		sb.append(",QUIEN_PARTO="+QUIEN_PARTO);
		sb.append(",COMPLICACIONES="+COMPLICACIONES);
		sb.append(",ATENCION_PARTO="+ATENCION_PARTO);
		sb.append(",TIEMPO_GESTACION="+TIEMPO_GESTACION);
		sb.append(",ATENCION_INSTITUCIONAL="+ATENCION_INSTITUCIONAL);
		sb.append(",COMPLICACIONES_POSTPARTO="+COMPLICACIONES_POSTPARTO);
		sb.append(",COMPLICACIONES_PARTO="+COMPLICACIONES_PARTO);
		sb.append(",COMPLICACIONES_EMBARAZO="+COMPLICACIONES_EMBARAZO);
		sb.append(",PLANIFICACION="+PLANIFICACION);
		sb.append(",CONSUME_MEDICAMENTO="+CONSUME_MEDICAMENTO);
		sb.append(",PESO_NACER="+PESO_NACER);
		sb.append(",TALLA_NACER="+TALLA_NACER);
		sb.append(",PERIMETRO_CEFALICO="+PERIMETRO_CEFALICO);
		sb.append(",PREMATUREZ="+PREMATUREZ);
		sb.append(",COMPLICACIONES_EMB="+COMPLICACIONES_EMB);
		sb.append(",RECIBE_MED="+RECIBE_MED);
		sb.append(",REGISTRADO="+REGISTRADO);
		sb.append(",ANTECEDENTES_PERINATALES="+ANTECEDENTES_PERINATALES);
		sb.append(",PESO_KG="+PESO_KG);
		sb.append(",TALLA="+TALLA);
		sb.append(",CONTROL_CYD="+CONTROL_CYD);
		sb.append(",IMC="+IMC);
		sb.append(",ESTADO_NUTRICION="+ESTADO_NUTRICION);
		sb.append(",VALORACION_DESARROLLO="+VALORACION_DESARROLLO);
		sb.append(",LACTANCIA_6MESES="+LACTANCIA_6MESES);
		sb.append(",TOMADO_MED_HIPERTENSION="+TOMADO_MED_HIPERTENSION);
		sb.append(",PERIMETRO_ABD="+PERIMETRO_ABD);
		sb.append(",GLUCOSA_EMBARAZO="+GLUCOSA_EMBARAZO);
		sb.append(",CONSUMO_VEGETALES="+CONSUMO_VEGETALES);
		sb.append(",SEGURIDAD_ALIMENTARIA="+SEGURIDAD_ALIMENTARIA);
		sb.append(",DESPARACITADO="+DESPARACITADO);
		sb.append(",FECHA_DESPARACITADO="+FECHA_DESPARACITADO);
		sb.append(",PROGRAMAS_INSCRITO="+PROGRAMAS_INSCRITO);
		sb.append(",TRANSTORNO_ALIMENTACION="+TRANSTORNO_ALIMENTACION);
		sb.append(",MORB_CRONICA="+MORB_CRONICA);
		sb.append(",PERIMETRO_PANTORRILLA="+PERIMETRO_PANTORRILLA);
		sb.append(",MORBILIDAD_AGUDA="+MORBILIDAD_AGUDA);
		sb.append(",BUSCA_AYUDA="+BUSCA_AYUDA);
		sb.append(",PORQUE="+PORQUE);
		sb.append(",RECIBE_MANEJO="+RECIBE_MANEJO);
		sb.append(",QUIEN_FORMULA="+QUIEN_FORMULA);
		sb.append(",CONSULTA_SIQUIATRIA="+CONSULTA_SIQUIATRIA);
		sb.append(",FORMULADO_MED_PSIQUIATRICOS="+FORMULADO_MED_PSIQUIATRICOS);
		sb.append(",FACTORES_RIESGO="+FACTORES_RIESGO);
		sb.append(",SITUACION_ESTRES="+SITUACION_ESTRES);
		sb.append(",VIOLENCIA="+VIOLENCIA);
		sb.append(",ANT_CONSUMO="+ANT_CONSUMO);
		sb.append(",CUAL_ANT_CONSUMO="+CUAL_ANT_CONSUMO);
		sb.append(",CONTINUA_CONSUMO="+CONTINUA_CONSUMO);
		sb.append(",CUAL_CONTINUA_CONSUMO="+CUAL_CONTINUA_CONSUMO);
		sb.append(",BCG="+BCG);
		sb.append(",HEPATITIS_B="+HEPATITIS_B);
		sb.append(",POLIO="+POLIO);
		sb.append(",HIB="+HIB);
		sb.append(",NEUMOCOCO="+NEUMOCOCO);
		sb.append(",ROTAVIRUS="+ROTAVIRUS);
		sb.append(",INFLUENCIA_EST="+INFLUENCIA_EST);
		sb.append(",SRP="+SRP);
		sb.append(",VARICELA="+VARICELA);
		sb.append(",HEPATITIS_A="+HEPATITIS_A);
		sb.append(",FA="+FA);
		sb.append(",DPT="+DPT);
		sb.append(",VPH="+VPH);
		sb.append(",TD="+TD);
		sb.append(",MAMOGRAFIA="+MAMOGRAFIA);
		sb.append(",PROTESIS_DENTAL="+PROTESIS_DENTAL);
		sb.append(",RECIBIO_MEDICAMENTOS="+RECIBIO_MEDICAMENTOS);
		sb.append(",VALIDADO="+VALIDADO);
		sb.append(",ECOGRAFIA_MAMARIA="+ECOGRAFIA_MAMARIA);
		sb.append(",MENTALES="+MENTALES);
		sb.append(",INF_SUM_USUARIO="+INF_SUM_USUARIO);
		sb.append(",NIVEL_INGRESO="+NIVEL_INGRESO);
		sb.append(",VACUNACION_NOPAI="+VACUNACION_NOPAI);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
		sb.append(",GESTOR="+GESTOR);
		sb.append(",FFINALIZACION="+String.valueOf(FFINALIZACION));
		sb.append(",FINDRISK_VALOR="+String.valueOf(FINDRISK_VALOR));
		sb.append(",FINDRISK_CATEGORIA="+FINDRISK_CATEGORIA);
		sb.append(",UORG_EBAS="+String.valueOf(UORG_EBAS));
		sb.append(",PREPAGADA="+PREPAGADA);
		sb.append(",TIPO_REGISTRO="+TIPO_REGISTRO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FICHA_ID, other.FICHA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row18Struct implements routines.system.IPersistableRow<row18Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public int PERSONA_ID;

				public int getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return true;
				}
				public Integer PERSONA_IDLength(){
				    return 6;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return null;
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public int FICHA_ID;

				public int getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return true;
				}
				public Integer FICHA_IDLength(){
				    return 3;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return null;
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public String TREGIMEN_SALUD;

				public String getTREGIMEN_SALUD () {
					return this.TREGIMEN_SALUD;
				}

				public Boolean TREGIMEN_SALUDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_SALUDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_SALUDLength(){
				    return 20;
				}
				public Integer TREGIMEN_SALUDPrecision(){
				    return 0;
				}
				public String TREGIMEN_SALUDDefault(){
				
					return null;
				
				}
				public String TREGIMEN_SALUDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_SALUDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TREGIMEN_SALUDOriginalDbColumnName(){
				
					return "TREGIMEN_SALUD";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return 18;
				}
				public Integer EPSPrecision(){
				    return 0;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return true;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 10;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 95;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				
			    public String FORMACION;

				public String getFORMACION () {
					return this.FORMACION;
				}

				public Boolean FORMACIONIsNullable(){
				    return true;
				}
				public Boolean FORMACIONIsKey(){
				    return false;
				}
				public Integer FORMACIONLength(){
				    return 27;
				}
				public Integer FORMACIONPrecision(){
				    return 0;
				}
				public String FORMACIONDefault(){
				
					return null;
				
				}
				public String FORMACIONComment(){
				
				    return "";
				
				}
				public String FORMACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMACIONOriginalDbColumnName(){
				
					return "FORMACION";
				
				}

				
			    public String EXPANSION;

				public String getEXPANSION () {
					return this.EXPANSION;
				}

				public Boolean EXPANSIONIsNullable(){
				    return true;
				}
				public Boolean EXPANSIONIsKey(){
				    return false;
				}
				public Integer EXPANSIONLength(){
				    return 27;
				}
				public Integer EXPANSIONPrecision(){
				    return 0;
				}
				public String EXPANSIONDefault(){
				
					return null;
				
				}
				public String EXPANSIONComment(){
				
				    return "";
				
				}
				public String EXPANSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXPANSIONOriginalDbColumnName(){
				
					return "EXPANSION";
				
				}

				
			    public String CONSOLIDACION;

				public String getCONSOLIDACION () {
					return this.CONSOLIDACION;
				}

				public Boolean CONSOLIDACIONIsNullable(){
				    return true;
				}
				public Boolean CONSOLIDACIONIsKey(){
				    return false;
				}
				public Integer CONSOLIDACIONLength(){
				    return 27;
				}
				public Integer CONSOLIDACIONPrecision(){
				    return 0;
				}
				public String CONSOLIDACIONDefault(){
				
					return null;
				
				}
				public String CONSOLIDACIONComment(){
				
				    return "";
				
				}
				public String CONSOLIDACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSOLIDACIONOriginalDbColumnName(){
				
					return "CONSOLIDACION";
				
				}

				
			    public String APERTURA;

				public String getAPERTURA () {
					return this.APERTURA;
				}

				public Boolean APERTURAIsNullable(){
				    return true;
				}
				public Boolean APERTURAIsKey(){
				    return false;
				}
				public Integer APERTURALength(){
				    return 27;
				}
				public Integer APERTURAPrecision(){
				    return 0;
				}
				public String APERTURADefault(){
				
					return null;
				
				}
				public String APERTURAComment(){
				
				    return "";
				
				}
				public String APERTURAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String APERTURAOriginalDbColumnName(){
				
					return "APERTURA";
				
				}

				
			    public String POSPARENTAL;

				public String getPOSPARENTAL () {
					return this.POSPARENTAL;
				}

				public Boolean POSPARENTALIsNullable(){
				    return true;
				}
				public Boolean POSPARENTALIsKey(){
				    return false;
				}
				public Integer POSPARENTALLength(){
				    return 22;
				}
				public Integer POSPARENTALPrecision(){
				    return 0;
				}
				public String POSPARENTALDefault(){
				
					return null;
				
				}
				public String POSPARENTALComment(){
				
				    return "";
				
				}
				public String POSPARENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String POSPARENTALOriginalDbColumnName(){
				
					return "POSPARENTAL";
				
				}

				
			    public String DISOLUCION;

				public String getDISOLUCION () {
					return this.DISOLUCION;
				}

				public Boolean DISOLUCIONIsNullable(){
				    return true;
				}
				public Boolean DISOLUCIONIsKey(){
				    return false;
				}
				public Integer DISOLUCIONLength(){
				    return 27;
				}
				public Integer DISOLUCIONPrecision(){
				    return 0;
				}
				public String DISOLUCIONDefault(){
				
					return null;
				
				}
				public String DISOLUCIONComment(){
				
				    return "";
				
				}
				public String DISOLUCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISOLUCIONOriginalDbColumnName(){
				
					return "DISOLUCION";
				
				}

				
			    public String ESTFAMILIAR;

				public String getESTFAMILIAR () {
					return this.ESTFAMILIAR;
				}

				public Boolean ESTFAMILIARIsNullable(){
				    return true;
				}
				public Boolean ESTFAMILIARIsKey(){
				    return false;
				}
				public Integer ESTFAMILIARLength(){
				    return 16;
				}
				public Integer ESTFAMILIARPrecision(){
				    return 0;
				}
				public String ESTFAMILIARDefault(){
				
					return null;
				
				}
				public String ESTFAMILIARComment(){
				
				    return "";
				
				}
				public String ESTFAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESTFAMILIAROriginalDbColumnName(){
				
					return "ESTFAMILIAR";
				
				}

				
			    public String TIPO_VIVIENDA;

				public String getTIPO_VIVIENDA () {
					return this.TIPO_VIVIENDA;
				}

				public Boolean TIPO_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TIPO_VIVIENDAIsKey(){
				    return false;
				}
				public Integer TIPO_VIVIENDALength(){
				    return 6;
				}
				public Integer TIPO_VIVIENDAPrecision(){
				    return 0;
				}
				public String TIPO_VIVIENDADefault(){
				
					return null;
				
				}
				public String TIPO_VIVIENDAComment(){
				
				    return "";
				
				}
				public String TIPO_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_VIVIENDAOriginalDbColumnName(){
				
					return "TIPO_VIVIENDA";
				
				}

				
			    public String CUARTOS;

				public String getCUARTOS () {
					return this.CUARTOS;
				}

				public Boolean CUARTOSIsNullable(){
				    return true;
				}
				public Boolean CUARTOSIsKey(){
				    return false;
				}
				public Integer CUARTOSLength(){
				    return 3;
				}
				public Integer CUARTOSPrecision(){
				    return 0;
				}
				public String CUARTOSDefault(){
				
					return null;
				
				}
				public String CUARTOSComment(){
				
				    return "";
				
				}
				public String CUARTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUARTOSOriginalDbColumnName(){
				
					return "CUARTOS";
				
				}

				
			    public String UBICACION;

				public String getUBICACION () {
					return this.UBICACION;
				}

				public Boolean UBICACIONIsNullable(){
				    return true;
				}
				public Boolean UBICACIONIsKey(){
				    return false;
				}
				public Integer UBICACIONLength(){
				    return 32;
				}
				public Integer UBICACIONPrecision(){
				    return 0;
				}
				public String UBICACIONDefault(){
				
					return null;
				
				}
				public String UBICACIONComment(){
				
				    return "";
				
				}
				public String UBICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UBICACIONOriginalDbColumnName(){
				
					return "UBICACION";
				
				}

				
			    public String BANOS;

				public String getBANOS () {
					return this.BANOS;
				}

				public Boolean BANOSIsNullable(){
				    return true;
				}
				public Boolean BANOSIsKey(){
				    return false;
				}
				public Integer BANOSLength(){
				    return 3;
				}
				public Integer BANOSPrecision(){
				    return 0;
				}
				public String BANOSDefault(){
				
					return null;
				
				}
				public String BANOSComment(){
				
				    return "";
				
				}
				public String BANOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BANOSOriginalDbColumnName(){
				
					return "BANOS";
				
				}

				
			    public String TENENCIA;

				public String getTENENCIA () {
					return this.TENENCIA;
				}

				public Boolean TENENCIAIsNullable(){
				    return true;
				}
				public Boolean TENENCIAIsKey(){
				    return false;
				}
				public Integer TENENCIALength(){
				    return 10;
				}
				public Integer TENENCIAPrecision(){
				    return 0;
				}
				public String TENENCIADefault(){
				
					return null;
				
				}
				public String TENENCIAComment(){
				
				    return "";
				
				}
				public String TENENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TENENCIAOriginalDbColumnName(){
				
					return "TENENCIA";
				
				}

				
			    public String TRESPORCUARTO;

				public String getTRESPORCUARTO () {
					return this.TRESPORCUARTO;
				}

				public Boolean TRESPORCUARTOIsNullable(){
				    return true;
				}
				public Boolean TRESPORCUARTOIsKey(){
				    return false;
				}
				public Integer TRESPORCUARTOLength(){
				    return 4;
				}
				public Integer TRESPORCUARTOPrecision(){
				    return 0;
				}
				public String TRESPORCUARTODefault(){
				
					return null;
				
				}
				public String TRESPORCUARTOComment(){
				
				    return "";
				
				}
				public String TRESPORCUARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRESPORCUARTOOriginalDbColumnName(){
				
					return "TRESPORCUARTO";
				
				}

				
			    public String TIPOHAB;

				public String getTIPOHAB () {
					return this.TIPOHAB;
				}

				public Boolean TIPOHABIsNullable(){
				    return true;
				}
				public Boolean TIPOHABIsKey(){
				    return false;
				}
				public Integer TIPOHABLength(){
				    return 12;
				}
				public Integer TIPOHABPrecision(){
				    return 0;
				}
				public String TIPOHABDefault(){
				
					return null;
				
				}
				public String TIPOHABComment(){
				
				    return "";
				
				}
				public String TIPOHABPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPOHABOriginalDbColumnName(){
				
					return "TIPOHAB";
				
				}

				
			    public String ACT_PRODUCTIVA;

				public String getACT_PRODUCTIVA () {
					return this.ACT_PRODUCTIVA;
				}

				public Boolean ACT_PRODUCTIVAIsNullable(){
				    return true;
				}
				public Boolean ACT_PRODUCTIVAIsKey(){
				    return false;
				}
				public Integer ACT_PRODUCTIVALength(){
				    return 24;
				}
				public Integer ACT_PRODUCTIVAPrecision(){
				    return 0;
				}
				public String ACT_PRODUCTIVADefault(){
				
					return null;
				
				}
				public String ACT_PRODUCTIVAComment(){
				
				    return "";
				
				}
				public String ACT_PRODUCTIVAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_PRODUCTIVAOriginalDbColumnName(){
				
					return "ACT_PRODUCTIVA";
				
				}

				
			    public String MAQUINARIA;

				public String getMAQUINARIA () {
					return this.MAQUINARIA;
				}

				public Boolean MAQUINARIAIsNullable(){
				    return true;
				}
				public Boolean MAQUINARIAIsKey(){
				    return false;
				}
				public Integer MAQUINARIALength(){
				    return 4;
				}
				public Integer MAQUINARIAPrecision(){
				    return 0;
				}
				public String MAQUINARIADefault(){
				
					return null;
				
				}
				public String MAQUINARIAComment(){
				
				    return "";
				
				}
				public String MAQUINARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MAQUINARIAOriginalDbColumnName(){
				
					return "MAQUINARIA";
				
				}

				
			    public String EXCRETAS;

				public String getEXCRETAS () {
					return this.EXCRETAS;
				}

				public Boolean EXCRETASIsNullable(){
				    return true;
				}
				public Boolean EXCRETASIsKey(){
				    return false;
				}
				public Integer EXCRETASLength(){
				    return 15;
				}
				public Integer EXCRETASPrecision(){
				    return 0;
				}
				public String EXCRETASDefault(){
				
					return null;
				
				}
				public String EXCRETASComment(){
				
				    return "";
				
				}
				public String EXCRETASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXCRETASOriginalDbColumnName(){
				
					return "EXCRETAS";
				
				}

				
			    public String MEDIOS_COMUNICACION;

				public String getMEDIOS_COMUNICACION () {
					return this.MEDIOS_COMUNICACION;
				}

				public Boolean MEDIOS_COMUNICACIONIsNullable(){
				    return true;
				}
				public Boolean MEDIOS_COMUNICACIONIsKey(){
				    return false;
				}
				public Integer MEDIOS_COMUNICACIONLength(){
				    return 26;
				}
				public Integer MEDIOS_COMUNICACIONPrecision(){
				    return 0;
				}
				public String MEDIOS_COMUNICACIONDefault(){
				
					return null;
				
				}
				public String MEDIOS_COMUNICACIONComment(){
				
				    return "";
				
				}
				public String MEDIOS_COMUNICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MEDIOS_COMUNICACIONOriginalDbColumnName(){
				
					return "MEDIOS_COMUNICACION";
				
				}

				
			    public String TIPO_ALUMBRADO;

				public String getTIPO_ALUMBRADO () {
					return this.TIPO_ALUMBRADO;
				}

				public Boolean TIPO_ALUMBRADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_ALUMBRADOIsKey(){
				    return false;
				}
				public Integer TIPO_ALUMBRADOLength(){
				    return 33;
				}
				public Integer TIPO_ALUMBRADOPrecision(){
				    return 0;
				}
				public String TIPO_ALUMBRADODefault(){
				
					return null;
				
				}
				public String TIPO_ALUMBRADOComment(){
				
				    return "";
				
				}
				public String TIPO_ALUMBRADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_ALUMBRADOOriginalDbColumnName(){
				
					return "TIPO_ALUMBRADO";
				
				}

				
			    public String MASCOTAS;

				public String getMASCOTAS () {
					return this.MASCOTAS;
				}

				public Boolean MASCOTASIsNullable(){
				    return true;
				}
				public Boolean MASCOTASIsKey(){
				    return false;
				}
				public Integer MASCOTASLength(){
				    return 9;
				}
				public Integer MASCOTASPrecision(){
				    return 0;
				}
				public String MASCOTASDefault(){
				
					return null;
				
				}
				public String MASCOTASComment(){
				
				    return "";
				
				}
				public String MASCOTASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MASCOTASOriginalDbColumnName(){
				
					return "MASCOTAS";
				
				}

				
			    public String MASCOTAS_VAC;

				public String getMASCOTAS_VAC () {
					return this.MASCOTAS_VAC;
				}

				public Boolean MASCOTAS_VACIsNullable(){
				    return true;
				}
				public Boolean MASCOTAS_VACIsKey(){
				    return false;
				}
				public Integer MASCOTAS_VACLength(){
				    return 6;
				}
				public Integer MASCOTAS_VACPrecision(){
				    return 0;
				}
				public String MASCOTAS_VACDefault(){
				
					return null;
				
				}
				public String MASCOTAS_VACComment(){
				
				    return "";
				
				}
				public String MASCOTAS_VACPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MASCOTAS_VACOriginalDbColumnName(){
				
					return "MASCOTAS_VAC";
				
				}

				
			    public String DISP_BASURAS;

				public String getDISP_BASURAS () {
					return this.DISP_BASURAS;
				}

				public Boolean DISP_BASURASIsNullable(){
				    return true;
				}
				public Boolean DISP_BASURASIsKey(){
				    return false;
				}
				public Integer DISP_BASURASLength(){
				    return 34;
				}
				public Integer DISP_BASURASPrecision(){
				    return 0;
				}
				public String DISP_BASURASDefault(){
				
					return null;
				
				}
				public String DISP_BASURASComment(){
				
				    return "";
				
				}
				public String DISP_BASURASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISP_BASURASOriginalDbColumnName(){
				
					return "DISP_BASURAS";
				
				}

				
			    public String VECTORES;

				public String getVECTORES () {
					return this.VECTORES;
				}

				public Boolean VECTORESIsNullable(){
				    return true;
				}
				public Boolean VECTORESIsKey(){
				    return false;
				}
				public Integer VECTORESLength(){
				    return 8;
				}
				public Integer VECTORESPrecision(){
				    return 0;
				}
				public String VECTORESDefault(){
				
					return null;
				
				}
				public String VECTORESComment(){
				
				    return "";
				
				}
				public String VECTORESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VECTORESOriginalDbColumnName(){
				
					return "VECTORES";
				
				}

				
			    public String PROB_ACCIDENTE;

				public String getPROB_ACCIDENTE () {
					return this.PROB_ACCIDENTE;
				}

				public Boolean PROB_ACCIDENTEIsNullable(){
				    return true;
				}
				public Boolean PROB_ACCIDENTEIsKey(){
				    return false;
				}
				public Integer PROB_ACCIDENTELength(){
				    return 25;
				}
				public Integer PROB_ACCIDENTEPrecision(){
				    return 0;
				}
				public String PROB_ACCIDENTEDefault(){
				
					return null;
				
				}
				public String PROB_ACCIDENTEComment(){
				
				    return "";
				
				}
				public String PROB_ACCIDENTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROB_ACCIDENTEOriginalDbColumnName(){
				
					return "PROB_ACCIDENTE";
				
				}

				
			    public String CONT_AMB;

				public String getCONT_AMB () {
					return this.CONT_AMB;
				}

				public Boolean CONT_AMBIsNullable(){
				    return true;
				}
				public Boolean CONT_AMBIsKey(){
				    return false;
				}
				public Integer CONT_AMBLength(){
				    return 4;
				}
				public Integer CONT_AMBPrecision(){
				    return 0;
				}
				public String CONT_AMBDefault(){
				
					return null;
				
				}
				public String CONT_AMBComment(){
				
				    return "";
				
				}
				public String CONT_AMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONT_AMBOriginalDbColumnName(){
				
					return "CONT_AMB";
				
				}

				
			    public String ABAST_AGUA;

				public String getABAST_AGUA () {
					return this.ABAST_AGUA;
				}

				public Boolean ABAST_AGUAIsNullable(){
				    return true;
				}
				public Boolean ABAST_AGUAIsKey(){
				    return false;
				}
				public Integer ABAST_AGUALength(){
				    return 23;
				}
				public Integer ABAST_AGUAPrecision(){
				    return 0;
				}
				public String ABAST_AGUADefault(){
				
					return null;
				
				}
				public String ABAST_AGUAComment(){
				
				    return "";
				
				}
				public String ABAST_AGUAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ABAST_AGUAOriginalDbColumnName(){
				
					return "ABAST_AGUA";
				
				}

				
			    public String TRATA_CASA_AGUA;

				public String getTRATA_CASA_AGUA () {
					return this.TRATA_CASA_AGUA;
				}

				public Boolean TRATA_CASA_AGUAIsNullable(){
				    return true;
				}
				public Boolean TRATA_CASA_AGUAIsKey(){
				    return false;
				}
				public Integer TRATA_CASA_AGUALength(){
				    return 10;
				}
				public Integer TRATA_CASA_AGUAPrecision(){
				    return 0;
				}
				public String TRATA_CASA_AGUADefault(){
				
					return null;
				
				}
				public String TRATA_CASA_AGUAComment(){
				
				    return "";
				
				}
				public String TRATA_CASA_AGUAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATA_CASA_AGUAOriginalDbColumnName(){
				
					return "TRATA_CASA_AGUA";
				
				}

				
			    public String TRATA_AGUA_FUENTE;

				public String getTRATA_AGUA_FUENTE () {
					return this.TRATA_AGUA_FUENTE;
				}

				public Boolean TRATA_AGUA_FUENTEIsNullable(){
				    return true;
				}
				public Boolean TRATA_AGUA_FUENTEIsKey(){
				    return false;
				}
				public Integer TRATA_AGUA_FUENTELength(){
				    return 4;
				}
				public Integer TRATA_AGUA_FUENTEPrecision(){
				    return 0;
				}
				public String TRATA_AGUA_FUENTEDefault(){
				
					return null;
				
				}
				public String TRATA_AGUA_FUENTEComment(){
				
				    return "";
				
				}
				public String TRATA_AGUA_FUENTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATA_AGUA_FUENTEOriginalDbColumnName(){
				
					return "TRATA_AGUA_FUENTE";
				
				}

				
			    public String TIPO_COCINA;

				public String getTIPO_COCINA () {
					return this.TIPO_COCINA;
				}

				public Boolean TIPO_COCINAIsNullable(){
				    return true;
				}
				public Boolean TIPO_COCINAIsKey(){
				    return false;
				}
				public Integer TIPO_COCINALength(){
				    return 12;
				}
				public Integer TIPO_COCINAPrecision(){
				    return 0;
				}
				public String TIPO_COCINADefault(){
				
					return null;
				
				}
				public String TIPO_COCINAComment(){
				
				    return "";
				
				}
				public String TIPO_COCINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_COCINAOriginalDbColumnName(){
				
					return "TIPO_COCINA";
				
				}

				
			    public String HUMO_VIVIENDA;

				public String getHUMO_VIVIENDA () {
					return this.HUMO_VIVIENDA;
				}

				public Boolean HUMO_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean HUMO_VIVIENDAIsKey(){
				    return false;
				}
				public Integer HUMO_VIVIENDALength(){
				    return 4;
				}
				public Integer HUMO_VIVIENDAPrecision(){
				    return 0;
				}
				public String HUMO_VIVIENDADefault(){
				
					return null;
				
				}
				public String HUMO_VIVIENDAComment(){
				
				    return "";
				
				}
				public String HUMO_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HUMO_VIVIENDAOriginalDbColumnName(){
				
					return "HUMO_VIVIENDA";
				
				}

				
			    public String COCINA_CONSTRU_MATERIAL;

				public String getCOCINA_CONSTRU_MATERIAL () {
					return this.COCINA_CONSTRU_MATERIAL;
				}

				public Boolean COCINA_CONSTRU_MATERIALIsNullable(){
				    return true;
				}
				public Boolean COCINA_CONSTRU_MATERIALIsKey(){
				    return false;
				}
				public Integer COCINA_CONSTRU_MATERIALLength(){
				    return 4;
				}
				public Integer COCINA_CONSTRU_MATERIALPrecision(){
				    return 0;
				}
				public String COCINA_CONSTRU_MATERIALDefault(){
				
					return null;
				
				}
				public String COCINA_CONSTRU_MATERIALComment(){
				
				    return "";
				
				}
				public String COCINA_CONSTRU_MATERIALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_CONSTRU_MATERIALOriginalDbColumnName(){
				
					return "COCINA_CONSTRU_MATERIAL";
				
				}

				
			    public String COCINA_VIVIENDA;

				public String getCOCINA_VIVIENDA () {
					return this.COCINA_VIVIENDA;
				}

				public Boolean COCINA_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean COCINA_VIVIENDAIsKey(){
				    return false;
				}
				public Integer COCINA_VIVIENDALength(){
				    return 4;
				}
				public Integer COCINA_VIVIENDAPrecision(){
				    return 0;
				}
				public String COCINA_VIVIENDADefault(){
				
					return null;
				
				}
				public String COCINA_VIVIENDAComment(){
				
				    return "";
				
				}
				public String COCINA_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_VIVIENDAOriginalDbColumnName(){
				
					return "COCINA_VIVIENDA";
				
				}

				
			    public String COMBUSTIBLE_COCINA;

				public String getCOMBUSTIBLE_COCINA () {
					return this.COMBUSTIBLE_COCINA;
				}

				public Boolean COMBUSTIBLE_COCINAIsNullable(){
				    return true;
				}
				public Boolean COMBUSTIBLE_COCINAIsKey(){
				    return false;
				}
				public Integer COMBUSTIBLE_COCINALength(){
				    return 12;
				}
				public Integer COMBUSTIBLE_COCINAPrecision(){
				    return 0;
				}
				public String COMBUSTIBLE_COCINADefault(){
				
					return null;
				
				}
				public String COMBUSTIBLE_COCINAComment(){
				
				    return "";
				
				}
				public String COMBUSTIBLE_COCINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMBUSTIBLE_COCINAOriginalDbColumnName(){
				
					return "COMBUSTIBLE_COCINA";
				
				}

				
			    public String COCINA_DORMITORIO;

				public String getCOCINA_DORMITORIO () {
					return this.COCINA_DORMITORIO;
				}

				public Boolean COCINA_DORMITORIOIsNullable(){
				    return true;
				}
				public Boolean COCINA_DORMITORIOIsKey(){
				    return false;
				}
				public Integer COCINA_DORMITORIOLength(){
				    return 4;
				}
				public Integer COCINA_DORMITORIOPrecision(){
				    return 0;
				}
				public String COCINA_DORMITORIODefault(){
				
					return null;
				
				}
				public String COCINA_DORMITORIOComment(){
				
				    return "";
				
				}
				public String COCINA_DORMITORIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_DORMITORIOOriginalDbColumnName(){
				
					return "COCINA_DORMITORIO";
				
				}

				
			    public String TIPO_PISOS;

				public String getTIPO_PISOS () {
					return this.TIPO_PISOS;
				}

				public Boolean TIPO_PISOSIsNullable(){
				    return true;
				}
				public Boolean TIPO_PISOSIsKey(){
				    return false;
				}
				public Integer TIPO_PISOSLength(){
				    return 9;
				}
				public Integer TIPO_PISOSPrecision(){
				    return 0;
				}
				public String TIPO_PISOSDefault(){
				
					return null;
				
				}
				public String TIPO_PISOSComment(){
				
				    return "";
				
				}
				public String TIPO_PISOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_PISOSOriginalDbColumnName(){
				
					return "TIPO_PISOS";
				
				}

				
			    public String TIPO_TECHOS;

				public String getTIPO_TECHOS () {
					return this.TIPO_TECHOS;
				}

				public Boolean TIPO_TECHOSIsNullable(){
				    return true;
				}
				public Boolean TIPO_TECHOSIsKey(){
				    return false;
				}
				public Integer TIPO_TECHOSLength(){
				    return 17;
				}
				public Integer TIPO_TECHOSPrecision(){
				    return 0;
				}
				public String TIPO_TECHOSDefault(){
				
					return null;
				
				}
				public String TIPO_TECHOSComment(){
				
				    return "";
				
				}
				public String TIPO_TECHOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_TECHOSOriginalDbColumnName(){
				
					return "TIPO_TECHOS";
				
				}

				
			    public String TIPO_PAREDES;

				public String getTIPO_PAREDES () {
					return this.TIPO_PAREDES;
				}

				public Boolean TIPO_PAREDESIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAREDESIsKey(){
				    return false;
				}
				public Integer TIPO_PAREDESLength(){
				    return 40;
				}
				public Integer TIPO_PAREDESPrecision(){
				    return 0;
				}
				public String TIPO_PAREDESDefault(){
				
					return null;
				
				}
				public String TIPO_PAREDESComment(){
				
				    return "";
				
				}
				public String TIPO_PAREDESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_PAREDESOriginalDbColumnName(){
				
					return "TIPO_PAREDES";
				
				}

				
			    public String VIVIENDA_2KM;

				public String getVIVIENDA_2KM () {
					return this.VIVIENDA_2KM;
				}

				public Boolean VIVIENDA_2KMIsNullable(){
				    return true;
				}
				public Boolean VIVIENDA_2KMIsKey(){
				    return false;
				}
				public Integer VIVIENDA_2KMLength(){
				    return 34;
				}
				public Integer VIVIENDA_2KMPrecision(){
				    return 0;
				}
				public String VIVIENDA_2KMDefault(){
				
					return null;
				
				}
				public String VIVIENDA_2KMComment(){
				
				    return "";
				
				}
				public String VIVIENDA_2KMPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIVIENDA_2KMOriginalDbColumnName(){
				
					return "VIVIENDA_2KM";
				
				}

				
			    public String BARRERAS_ACCESOS;

				public String getBARRERAS_ACCESOS () {
					return this.BARRERAS_ACCESOS;
				}

				public Boolean BARRERAS_ACCESOSIsNullable(){
				    return true;
				}
				public Boolean BARRERAS_ACCESOSIsKey(){
				    return false;
				}
				public Integer BARRERAS_ACCESOSLength(){
				    return 27;
				}
				public Integer BARRERAS_ACCESOSPrecision(){
				    return 0;
				}
				public String BARRERAS_ACCESOSDefault(){
				
					return null;
				
				}
				public String BARRERAS_ACCESOSComment(){
				
				    return "";
				
				}
				public String BARRERAS_ACCESOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BARRERAS_ACCESOSOriginalDbColumnName(){
				
					return "BARRERAS_ACCESOS";
				
				}

				
			    public String DIST_SALUD_CERCANO;

				public String getDIST_SALUD_CERCANO () {
					return this.DIST_SALUD_CERCANO;
				}

				public Boolean DIST_SALUD_CERCANOIsNullable(){
				    return true;
				}
				public Boolean DIST_SALUD_CERCANOIsKey(){
				    return false;
				}
				public Integer DIST_SALUD_CERCANOLength(){
				    return 12;
				}
				public Integer DIST_SALUD_CERCANOPrecision(){
				    return 0;
				}
				public String DIST_SALUD_CERCANODefault(){
				
					return null;
				
				}
				public String DIST_SALUD_CERCANOComment(){
				
				    return "";
				
				}
				public String DIST_SALUD_CERCANOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIST_SALUD_CERCANOOriginalDbColumnName(){
				
					return "DIST_SALUD_CERCANO";
				
				}

				
			    public String MEDIO_TRANSPORTE;

				public String getMEDIO_TRANSPORTE () {
					return this.MEDIO_TRANSPORTE;
				}

				public Boolean MEDIO_TRANSPORTEIsNullable(){
				    return true;
				}
				public Boolean MEDIO_TRANSPORTEIsKey(){
				    return false;
				}
				public Integer MEDIO_TRANSPORTELength(){
				    return 24;
				}
				public Integer MEDIO_TRANSPORTEPrecision(){
				    return 0;
				}
				public String MEDIO_TRANSPORTEDefault(){
				
					return null;
				
				}
				public String MEDIO_TRANSPORTEComment(){
				
				    return "";
				
				}
				public String MEDIO_TRANSPORTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MEDIO_TRANSPORTEOriginalDbColumnName(){
				
					return "MEDIO_TRANSPORTE";
				
				}

				
			    public String VIA_ACCESO;

				public String getVIA_ACCESO () {
					return this.VIA_ACCESO;
				}

				public Boolean VIA_ACCESOIsNullable(){
				    return true;
				}
				public Boolean VIA_ACCESOIsKey(){
				    return false;
				}
				public Integer VIA_ACCESOLength(){
				    return 16;
				}
				public Integer VIA_ACCESOPrecision(){
				    return 0;
				}
				public String VIA_ACCESODefault(){
				
					return null;
				
				}
				public String VIA_ACCESOComment(){
				
				    return "";
				
				}
				public String VIA_ACCESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIA_ACCESOOriginalDbColumnName(){
				
					return "VIA_ACCESO";
				
				}

				
			    public String NACIDOS_VIVOS;

				public String getNACIDOS_VIVOS () {
					return this.NACIDOS_VIVOS;
				}

				public Boolean NACIDOS_VIVOSIsNullable(){
				    return true;
				}
				public Boolean NACIDOS_VIVOSIsKey(){
				    return false;
				}
				public Integer NACIDOS_VIVOSLength(){
				    return 3;
				}
				public Integer NACIDOS_VIVOSPrecision(){
				    return 0;
				}
				public String NACIDOS_VIVOSDefault(){
				
					return null;
				
				}
				public String NACIDOS_VIVOSComment(){
				
				    return "";
				
				}
				public String NACIDOS_VIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NACIDOS_VIVOSOriginalDbColumnName(){
				
					return "NACIDOS_VIVOS";
				
				}

				
			    public String MORTALIDAD;

				public String getMORTALIDAD () {
					return this.MORTALIDAD;
				}

				public Boolean MORTALIDADIsNullable(){
				    return true;
				}
				public Boolean MORTALIDADIsKey(){
				    return false;
				}
				public Integer MORTALIDADLength(){
				    return 19;
				}
				public Integer MORTALIDADPrecision(){
				    return 0;
				}
				public String MORTALIDADDefault(){
				
					return null;
				
				}
				public String MORTALIDADComment(){
				
				    return "";
				
				}
				public String MORTALIDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORTALIDADOriginalDbColumnName(){
				
					return "MORTALIDAD";
				
				}

				
			    public String HIPERTENSION;

				public String getHIPERTENSION () {
					return this.HIPERTENSION;
				}

				public Boolean HIPERTENSIONIsNullable(){
				    return true;
				}
				public Boolean HIPERTENSIONIsKey(){
				    return false;
				}
				public Integer HIPERTENSIONLength(){
				    return 17;
				}
				public Integer HIPERTENSIONPrecision(){
				    return 0;
				}
				public String HIPERTENSIONDefault(){
				
					return null;
				
				}
				public String HIPERTENSIONComment(){
				
				    return "";
				
				}
				public String HIPERTENSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HIPERTENSIONOriginalDbColumnName(){
				
					return "HIPERTENSION";
				
				}

				
			    public String DIABETES;

				public String getDIABETES () {
					return this.DIABETES;
				}

				public Boolean DIABETESIsNullable(){
				    return true;
				}
				public Boolean DIABETESIsKey(){
				    return false;
				}
				public Integer DIABETESLength(){
				    return 9;
				}
				public Integer DIABETESPrecision(){
				    return 0;
				}
				public String DIABETESDefault(){
				
					return null;
				
				}
				public String DIABETESComment(){
				
				    return "";
				
				}
				public String DIABETESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIABETESOriginalDbColumnName(){
				
					return "DIABETES";
				
				}

				
			    public String ENF_CARDIACAS;

				public String getENF_CARDIACAS () {
					return this.ENF_CARDIACAS;
				}

				public Boolean ENF_CARDIACASIsNullable(){
				    return true;
				}
				public Boolean ENF_CARDIACASIsKey(){
				    return false;
				}
				public Integer ENF_CARDIACASLength(){
				    return 8;
				}
				public Integer ENF_CARDIACASPrecision(){
				    return 0;
				}
				public String ENF_CARDIACASDefault(){
				
					return null;
				
				}
				public String ENF_CARDIACASComment(){
				
				    return "";
				
				}
				public String ENF_CARDIACASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_CARDIACASOriginalDbColumnName(){
				
					return "ENF_CARDIACAS";
				
				}

				
			    public String CANCER;

				public String getCANCER () {
					return this.CANCER;
				}

				public Boolean CANCERIsNullable(){
				    return true;
				}
				public Boolean CANCERIsKey(){
				    return false;
				}
				public Integer CANCERLength(){
				    return 9;
				}
				public Integer CANCERPrecision(){
				    return 0;
				}
				public String CANCERDefault(){
				
					return null;
				
				}
				public String CANCERComment(){
				
				    return "";
				
				}
				public String CANCERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CANCEROriginalDbColumnName(){
				
					return "CANCER";
				
				}

				
			    public String ENF_RENAL;

				public String getENF_RENAL () {
					return this.ENF_RENAL;
				}

				public Boolean ENF_RENALIsNullable(){
				    return true;
				}
				public Boolean ENF_RENALIsKey(){
				    return false;
				}
				public Integer ENF_RENALLength(){
				    return 16;
				}
				public Integer ENF_RENALPrecision(){
				    return 0;
				}
				public String ENF_RENALDefault(){
				
					return null;
				
				}
				public String ENF_RENALComment(){
				
				    return "";
				
				}
				public String ENF_RENALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_RENALOriginalDbColumnName(){
				
					return "ENF_RENAL";
				
				}

				
			    public String ENF_CONGENITA;

				public String getENF_CONGENITA () {
					return this.ENF_CONGENITA;
				}

				public Boolean ENF_CONGENITAIsNullable(){
				    return true;
				}
				public Boolean ENF_CONGENITAIsKey(){
				    return false;
				}
				public Integer ENF_CONGENITALength(){
				    return 17;
				}
				public Integer ENF_CONGENITAPrecision(){
				    return 0;
				}
				public String ENF_CONGENITADefault(){
				
					return null;
				
				}
				public String ENF_CONGENITAComment(){
				
				    return "";
				
				}
				public String ENF_CONGENITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_CONGENITAOriginalDbColumnName(){
				
					return "ENF_CONGENITA";
				
				}

				
			    public String MENTALES;

				public String getMENTALES () {
					return this.MENTALES;
				}

				public Boolean MENTALESIsNullable(){
				    return true;
				}
				public Boolean MENTALESIsKey(){
				    return false;
				}
				public Integer MENTALESLength(){
				    return null;
				}
				public Integer MENTALESPrecision(){
				    return null;
				}
				public String MENTALESDefault(){
				
					return null;
				
				}
				public String MENTALESComment(){
				
				    return "";
				
				}
				public String MENTALESPattern(){
				
					return "";
				
				}
				public String MENTALESOriginalDbColumnName(){
				
					return "MENTALES";
				
				}

				
			    public String AYUDA_FAMI_NECES;

				public String getAYUDA_FAMI_NECES () {
					return this.AYUDA_FAMI_NECES;
				}

				public Boolean AYUDA_FAMI_NECESIsNullable(){
				    return true;
				}
				public Boolean AYUDA_FAMI_NECESIsKey(){
				    return false;
				}
				public Integer AYUDA_FAMI_NECESLength(){
				    return 10;
				}
				public Integer AYUDA_FAMI_NECESPrecision(){
				    return 0;
				}
				public String AYUDA_FAMI_NECESDefault(){
				
					return null;
				
				}
				public String AYUDA_FAMI_NECESComment(){
				
				    return "";
				
				}
				public String AYUDA_FAMI_NECESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String AYUDA_FAMI_NECESOriginalDbColumnName(){
				
					return "AYUDA_FAMI_NECES";
				
				}

				
			    public String AYUDA_FAMI_PROYEC;

				public String getAYUDA_FAMI_PROYEC () {
					return this.AYUDA_FAMI_PROYEC;
				}

				public Boolean AYUDA_FAMI_PROYECIsNullable(){
				    return true;
				}
				public Boolean AYUDA_FAMI_PROYECIsKey(){
				    return false;
				}
				public Integer AYUDA_FAMI_PROYECLength(){
				    return 14;
				}
				public Integer AYUDA_FAMI_PROYECPrecision(){
				    return 0;
				}
				public String AYUDA_FAMI_PROYECDefault(){
				
					return null;
				
				}
				public String AYUDA_FAMI_PROYECComment(){
				
				    return "";
				
				}
				public String AYUDA_FAMI_PROYECPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String AYUDA_FAMI_PROYECOriginalDbColumnName(){
				
					return "AYUDA_FAMI_PROYEC";
				
				}

				
			    public String APOYO_FAMI_SENTIM;

				public String getAPOYO_FAMI_SENTIM () {
					return this.APOYO_FAMI_SENTIM;
				}

				public Boolean APOYO_FAMI_SENTIMIsNullable(){
				    return true;
				}
				public Boolean APOYO_FAMI_SENTIMIsKey(){
				    return false;
				}
				public Integer APOYO_FAMI_SENTIMLength(){
				    return 14;
				}
				public Integer APOYO_FAMI_SENTIMPrecision(){
				    return 0;
				}
				public String APOYO_FAMI_SENTIMDefault(){
				
					return null;
				
				}
				public String APOYO_FAMI_SENTIMComment(){
				
				    return "";
				
				}
				public String APOYO_FAMI_SENTIMPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String APOYO_FAMI_SENTIMOriginalDbColumnName(){
				
					return "APOYO_FAMI_SENTIM";
				
				}

				
			    public String DECISIONES_HOGAR;

				public String getDECISIONES_HOGAR () {
					return this.DECISIONES_HOGAR;
				}

				public Boolean DECISIONES_HOGARIsNullable(){
				    return true;
				}
				public Boolean DECISIONES_HOGARIsKey(){
				    return false;
				}
				public Integer DECISIONES_HOGARLength(){
				    return 24;
				}
				public Integer DECISIONES_HOGARPrecision(){
				    return 0;
				}
				public String DECISIONES_HOGARDefault(){
				
					return null;
				
				}
				public String DECISIONES_HOGARComment(){
				
				    return "";
				
				}
				public String DECISIONES_HOGARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DECISIONES_HOGAROriginalDbColumnName(){
				
					return "DECISIONES_HOGAR";
				
				}

				
			    public String COM_INTRAFAMILIAR;

				public String getCOM_INTRAFAMILIAR () {
					return this.COM_INTRAFAMILIAR;
				}

				public Boolean COM_INTRAFAMILIARIsNullable(){
				    return true;
				}
				public Boolean COM_INTRAFAMILIARIsKey(){
				    return false;
				}
				public Integer COM_INTRAFAMILIARLength(){
				    return 10;
				}
				public Integer COM_INTRAFAMILIARPrecision(){
				    return 0;
				}
				public String COM_INTRAFAMILIARDefault(){
				
					return null;
				
				}
				public String COM_INTRAFAMILIARComment(){
				
				    return "";
				
				}
				public String COM_INTRAFAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COM_INTRAFAMILIAROriginalDbColumnName(){
				
					return "COM_INTRAFAMILIAR";
				
				}

				
			    public String ACT_FAMILIAR;

				public String getACT_FAMILIAR () {
					return this.ACT_FAMILIAR;
				}

				public Boolean ACT_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean ACT_FAMILIARIsKey(){
				    return false;
				}
				public Integer ACT_FAMILIARLength(){
				    return 4;
				}
				public Integer ACT_FAMILIARPrecision(){
				    return 0;
				}
				public String ACT_FAMILIARDefault(){
				
					return null;
				
				}
				public String ACT_FAMILIARComment(){
				
				    return "";
				
				}
				public String ACT_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_FAMILIAROriginalDbColumnName(){
				
					return "ACT_FAMILIAR";
				
				}

				
			    public String DISFRUTA_ACTIVIDADES;

				public String getDISFRUTA_ACTIVIDADES () {
					return this.DISFRUTA_ACTIVIDADES;
				}

				public Boolean DISFRUTA_ACTIVIDADESIsNullable(){
				    return true;
				}
				public Boolean DISFRUTA_ACTIVIDADESIsKey(){
				    return false;
				}
				public Integer DISFRUTA_ACTIVIDADESLength(){
				    return 4;
				}
				public Integer DISFRUTA_ACTIVIDADESPrecision(){
				    return 0;
				}
				public String DISFRUTA_ACTIVIDADESDefault(){
				
					return null;
				
				}
				public String DISFRUTA_ACTIVIDADESComment(){
				
				    return "";
				
				}
				public String DISFRUTA_ACTIVIDADESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISFRUTA_ACTIVIDADESOriginalDbColumnName(){
				
					return "DISFRUTA_ACTIVIDADES";
				
				}

				
			    public String CEPILLADO;

				public String getCEPILLADO () {
					return this.CEPILLADO;
				}

				public Boolean CEPILLADOIsNullable(){
				    return true;
				}
				public Boolean CEPILLADOIsKey(){
				    return false;
				}
				public Integer CEPILLADOLength(){
				    return 4;
				}
				public Integer CEPILLADOPrecision(){
				    return 0;
				}
				public String CEPILLADODefault(){
				
					return null;
				
				}
				public String CEPILLADOComment(){
				
				    return "";
				
				}
				public String CEPILLADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CEPILLADOOriginalDbColumnName(){
				
					return "CEPILLADO";
				
				}

				
			    public String NUM_CEPILLADO;

				public String getNUM_CEPILLADO () {
					return this.NUM_CEPILLADO;
				}

				public Boolean NUM_CEPILLADOIsNullable(){
				    return true;
				}
				public Boolean NUM_CEPILLADOIsKey(){
				    return false;
				}
				public Integer NUM_CEPILLADOLength(){
				    return 18;
				}
				public Integer NUM_CEPILLADOPrecision(){
				    return 0;
				}
				public String NUM_CEPILLADODefault(){
				
					return null;
				
				}
				public String NUM_CEPILLADOComment(){
				
				    return "";
				
				}
				public String NUM_CEPILLADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CEPILLADOOriginalDbColumnName(){
				
					return "NUM_CEPILLADO";
				
				}

				
			    public String CARIES;

				public String getCARIES () {
					return this.CARIES;
				}

				public Boolean CARIESIsNullable(){
				    return true;
				}
				public Boolean CARIESIsKey(){
				    return false;
				}
				public Integer CARIESLength(){
				    return 4;
				}
				public Integer CARIESPrecision(){
				    return 0;
				}
				public String CARIESDefault(){
				
					return null;
				
				}
				public String CARIESComment(){
				
				    return "";
				
				}
				public String CARIESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARIESOriginalDbColumnName(){
				
					return "CARIES";
				
				}

				
			    public String ODONTOLOGO;

				public String getODONTOLOGO () {
					return this.ODONTOLOGO;
				}

				public Boolean ODONTOLOGOIsNullable(){
				    return true;
				}
				public Boolean ODONTOLOGOIsKey(){
				    return false;
				}
				public Integer ODONTOLOGOLength(){
				    return 4;
				}
				public Integer ODONTOLOGOPrecision(){
				    return 0;
				}
				public String ODONTOLOGODefault(){
				
					return null;
				
				}
				public String ODONTOLOGOComment(){
				
				    return "";
				
				}
				public String ODONTOLOGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ODONTOLOGOOriginalDbColumnName(){
				
					return "ODONTOLOGO";
				
				}

				
			    public String FREC_ODONTOLOGO;

				public String getFREC_ODONTOLOGO () {
					return this.FREC_ODONTOLOGO;
				}

				public Boolean FREC_ODONTOLOGOIsNullable(){
				    return true;
				}
				public Boolean FREC_ODONTOLOGOIsKey(){
				    return false;
				}
				public Integer FREC_ODONTOLOGOLength(){
				    return 12;
				}
				public Integer FREC_ODONTOLOGOPrecision(){
				    return 0;
				}
				public String FREC_ODONTOLOGODefault(){
				
					return null;
				
				}
				public String FREC_ODONTOLOGOComment(){
				
				    return "";
				
				}
				public String FREC_ODONTOLOGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ODONTOLOGOOriginalDbColumnName(){
				
					return "FREC_ODONTOLOGO";
				
				}

				
			    public String FULTIMA_ODONTOLOGIA;

				public String getFULTIMA_ODONTOLOGIA () {
					return this.FULTIMA_ODONTOLOGIA;
				}

				public Boolean FULTIMA_ODONTOLOGIAIsNullable(){
				    return true;
				}
				public Boolean FULTIMA_ODONTOLOGIAIsKey(){
				    return false;
				}
				public Integer FULTIMA_ODONTOLOGIALength(){
				    return 12;
				}
				public Integer FULTIMA_ODONTOLOGIAPrecision(){
				    return 0;
				}
				public String FULTIMA_ODONTOLOGIADefault(){
				
					return null;
				
				}
				public String FULTIMA_ODONTOLOGIAComment(){
				
				    return "";
				
				}
				public String FULTIMA_ODONTOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FULTIMA_ODONTOLOGIAOriginalDbColumnName(){
				
					return "FULTIMA_ODONTOLOGIA";
				
				}

				
			    public String TOP_FLUOR;

				public String getTOP_FLUOR () {
					return this.TOP_FLUOR;
				}

				public Boolean TOP_FLUORIsNullable(){
				    return true;
				}
				public Boolean TOP_FLUORIsKey(){
				    return false;
				}
				public Integer TOP_FLUORLength(){
				    return 1;
				}
				public Integer TOP_FLUORPrecision(){
				    return 0;
				}
				public String TOP_FLUORDefault(){
				
					return null;
				
				}
				public String TOP_FLUORComment(){
				
				    return "";
				
				}
				public String TOP_FLUORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TOP_FLUOROriginalDbColumnName(){
				
					return "TOP_FLUOR";
				
				}

				
			    public String SEDA_DENTAL;

				public String getSEDA_DENTAL () {
					return this.SEDA_DENTAL;
				}

				public Boolean SEDA_DENTALIsNullable(){
				    return true;
				}
				public Boolean SEDA_DENTALIsKey(){
				    return false;
				}
				public Integer SEDA_DENTALLength(){
				    return 4;
				}
				public Integer SEDA_DENTALPrecision(){
				    return 0;
				}
				public String SEDA_DENTALDefault(){
				
					return null;
				
				}
				public String SEDA_DENTALComment(){
				
				    return "";
				
				}
				public String SEDA_DENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEDA_DENTALOriginalDbColumnName(){
				
					return "SEDA_DENTAL";
				
				}

				
			    public String SELLANTE;

				public String getSELLANTE () {
					return this.SELLANTE;
				}

				public Boolean SELLANTEIsNullable(){
				    return true;
				}
				public Boolean SELLANTEIsKey(){
				    return false;
				}
				public Integer SELLANTELength(){
				    return 1;
				}
				public Integer SELLANTEPrecision(){
				    return 0;
				}
				public String SELLANTEDefault(){
				
					return null;
				
				}
				public String SELLANTEComment(){
				
				    return "";
				
				}
				public String SELLANTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SELLANTEOriginalDbColumnName(){
				
					return "SELLANTE";
				
				}

				
			    public String PERDIDA_DIENTES;

				public String getPERDIDA_DIENTES () {
					return this.PERDIDA_DIENTES;
				}

				public Boolean PERDIDA_DIENTESIsNullable(){
				    return true;
				}
				public Boolean PERDIDA_DIENTESIsKey(){
				    return false;
				}
				public Integer PERDIDA_DIENTESLength(){
				    return 4;
				}
				public Integer PERDIDA_DIENTESPrecision(){
				    return 0;
				}
				public String PERDIDA_DIENTESDefault(){
				
					return null;
				
				}
				public String PERDIDA_DIENTESComment(){
				
				    return "";
				
				}
				public String PERDIDA_DIENTESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERDIDA_DIENTESOriginalDbColumnName(){
				
					return "PERDIDA_DIENTES";
				
				}

				
			    public String CARNE;

				public String getCARNE () {
					return this.CARNE;
				}

				public Boolean CARNEIsNullable(){
				    return true;
				}
				public Boolean CARNEIsKey(){
				    return false;
				}
				public Integer CARNELength(){
				    return 4;
				}
				public Integer CARNEPrecision(){
				    return 0;
				}
				public String CARNEDefault(){
				
					return null;
				
				}
				public String CARNEComment(){
				
				    return "";
				
				}
				public String CARNEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARNEOriginalDbColumnName(){
				
					return "CARNE";
				
				}

				
			    public String ESQUEMA_EDAD;

				public String getESQUEMA_EDAD () {
					return this.ESQUEMA_EDAD;
				}

				public Boolean ESQUEMA_EDADIsNullable(){
				    return true;
				}
				public Boolean ESQUEMA_EDADIsKey(){
				    return false;
				}
				public Integer ESQUEMA_EDADLength(){
				    return 4;
				}
				public Integer ESQUEMA_EDADPrecision(){
				    return 0;
				}
				public String ESQUEMA_EDADDefault(){
				
					return null;
				
				}
				public String ESQUEMA_EDADComment(){
				
				    return "";
				
				}
				public String ESQUEMA_EDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESQUEMA_EDADOriginalDbColumnName(){
				
					return "ESQUEMA_EDAD";
				
				}

				
			    public String ENF_TROPICAL;

				public String getENF_TROPICAL () {
					return this.ENF_TROPICAL;
				}

				public Boolean ENF_TROPICALIsNullable(){
				    return true;
				}
				public Boolean ENF_TROPICALIsKey(){
				    return false;
				}
				public Integer ENF_TROPICALLength(){
				    return 17;
				}
				public Integer ENF_TROPICALPrecision(){
				    return 0;
				}
				public String ENF_TROPICALDefault(){
				
					return null;
				
				}
				public String ENF_TROPICALComment(){
				
				    return "";
				
				}
				public String ENF_TROPICALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_TROPICALOriginalDbColumnName(){
				
					return "ENF_TROPICAL";
				
				}

				
			    public String ENF_TRANSMISION;

				public String getENF_TRANSMISION () {
					return this.ENF_TRANSMISION;
				}

				public Boolean ENF_TRANSMISIONIsNullable(){
				    return true;
				}
				public Boolean ENF_TRANSMISIONIsKey(){
				    return false;
				}
				public Integer ENF_TRANSMISIONLength(){
				    return 4;
				}
				public Integer ENF_TRANSMISIONPrecision(){
				    return 0;
				}
				public String ENF_TRANSMISIONDefault(){
				
					return null;
				
				}
				public String ENF_TRANSMISIONComment(){
				
				    return "";
				
				}
				public String ENF_TRANSMISIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_TRANSMISIONOriginalDbColumnName(){
				
					return "ENF_TRANSMISION";
				
				}

				
			    public String TRATAMIENTO_ETS;

				public String getTRATAMIENTO_ETS () {
					return this.TRATAMIENTO_ETS;
				}

				public Boolean TRATAMIENTO_ETSIsNullable(){
				    return true;
				}
				public Boolean TRATAMIENTO_ETSIsKey(){
				    return false;
				}
				public Integer TRATAMIENTO_ETSLength(){
				    return 1;
				}
				public Integer TRATAMIENTO_ETSPrecision(){
				    return 0;
				}
				public String TRATAMIENTO_ETSDefault(){
				
					return null;
				
				}
				public String TRATAMIENTO_ETSComment(){
				
				    return "";
				
				}
				public String TRATAMIENTO_ETSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATAMIENTO_ETSOriginalDbColumnName(){
				
					return "TRATAMIENTO_ETS";
				
				}

				
			    public String PROBLEMAS_VISUALES;

				public String getPROBLEMAS_VISUALES () {
					return this.PROBLEMAS_VISUALES;
				}

				public Boolean PROBLEMAS_VISUALESIsNullable(){
				    return true;
				}
				public Boolean PROBLEMAS_VISUALESIsKey(){
				    return false;
				}
				public Integer PROBLEMAS_VISUALESLength(){
				    return 4;
				}
				public Integer PROBLEMAS_VISUALESPrecision(){
				    return 0;
				}
				public String PROBLEMAS_VISUALESDefault(){
				
					return null;
				
				}
				public String PROBLEMAS_VISUALESComment(){
				
				    return "";
				
				}
				public String PROBLEMAS_VISUALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROBLEMAS_VISUALESOriginalDbColumnName(){
				
					return "PROBLEMAS_VISUALES";
				
				}

				
			    public String PROBLEMAS_AUDITIVOS;

				public String getPROBLEMAS_AUDITIVOS () {
					return this.PROBLEMAS_AUDITIVOS;
				}

				public Boolean PROBLEMAS_AUDITIVOSIsNullable(){
				    return true;
				}
				public Boolean PROBLEMAS_AUDITIVOSIsKey(){
				    return false;
				}
				public Integer PROBLEMAS_AUDITIVOSLength(){
				    return 4;
				}
				public Integer PROBLEMAS_AUDITIVOSPrecision(){
				    return 0;
				}
				public String PROBLEMAS_AUDITIVOSDefault(){
				
					return null;
				
				}
				public String PROBLEMAS_AUDITIVOSComment(){
				
				    return "";
				
				}
				public String PROBLEMAS_AUDITIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROBLEMAS_AUDITIVOSOriginalDbColumnName(){
				
					return "PROBLEMAS_AUDITIVOS";
				
				}

				
			    public String RENDIMIENTO_ESTUDIOS;

				public String getRENDIMIENTO_ESTUDIOS () {
					return this.RENDIMIENTO_ESTUDIOS;
				}

				public Boolean RENDIMIENTO_ESTUDIOSIsNullable(){
				    return true;
				}
				public Boolean RENDIMIENTO_ESTUDIOSIsKey(){
				    return false;
				}
				public Integer RENDIMIENTO_ESTUDIOSLength(){
				    return 1;
				}
				public Integer RENDIMIENTO_ESTUDIOSPrecision(){
				    return 0;
				}
				public String RENDIMIENTO_ESTUDIOSDefault(){
				
					return null;
				
				}
				public String RENDIMIENTO_ESTUDIOSComment(){
				
				    return "";
				
				}
				public String RENDIMIENTO_ESTUDIOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RENDIMIENTO_ESTUDIOSOriginalDbColumnName(){
				
					return "RENDIMIENTO_ESTUDIOS";
				
				}

				
			    public String ACT_EXTRACURRICULAR;

				public String getACT_EXTRACURRICULAR () {
					return this.ACT_EXTRACURRICULAR;
				}

				public Boolean ACT_EXTRACURRICULARIsNullable(){
				    return true;
				}
				public Boolean ACT_EXTRACURRICULARIsKey(){
				    return false;
				}
				public Integer ACT_EXTRACURRICULARLength(){
				    return 1;
				}
				public Integer ACT_EXTRACURRICULARPrecision(){
				    return 0;
				}
				public String ACT_EXTRACURRICULARDefault(){
				
					return null;
				
				}
				public String ACT_EXTRACURRICULARComment(){
				
				    return "";
				
				}
				public String ACT_EXTRACURRICULARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_EXTRACURRICULAROriginalDbColumnName(){
				
					return "ACT_EXTRACURRICULAR";
				
				}

				
			    public String PRESION_SISTOLICA;

				public String getPRESION_SISTOLICA () {
					return this.PRESION_SISTOLICA;
				}

				public Boolean PRESION_SISTOLICAIsNullable(){
				    return true;
				}
				public Boolean PRESION_SISTOLICAIsKey(){
				    return false;
				}
				public Integer PRESION_SISTOLICALength(){
				    return 5;
				}
				public Integer PRESION_SISTOLICAPrecision(){
				    return 0;
				}
				public String PRESION_SISTOLICADefault(){
				
					return null;
				
				}
				public String PRESION_SISTOLICAComment(){
				
				    return "";
				
				}
				public String PRESION_SISTOLICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PRESION_SISTOLICAOriginalDbColumnName(){
				
					return "PRESION_SISTOLICA";
				
				}

				
			    public String PRESION_DIASTOLICA;

				public String getPRESION_DIASTOLICA () {
					return this.PRESION_DIASTOLICA;
				}

				public Boolean PRESION_DIASTOLICAIsNullable(){
				    return true;
				}
				public Boolean PRESION_DIASTOLICAIsKey(){
				    return false;
				}
				public Integer PRESION_DIASTOLICALength(){
				    return 4;
				}
				public Integer PRESION_DIASTOLICAPrecision(){
				    return 0;
				}
				public String PRESION_DIASTOLICADefault(){
				
					return null;
				
				}
				public String PRESION_DIASTOLICAComment(){
				
				    return "";
				
				}
				public String PRESION_DIASTOLICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PRESION_DIASTOLICAOriginalDbColumnName(){
				
					return "PRESION_DIASTOLICA";
				
				}

				
			    public String ACT_FISICA;

				public String getACT_FISICA () {
					return this.ACT_FISICA;
				}

				public Boolean ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean ACT_FISICAIsKey(){
				    return false;
				}
				public Integer ACT_FISICALength(){
				    return 4;
				}
				public Integer ACT_FISICAPrecision(){
				    return 0;
				}
				public String ACT_FISICADefault(){
				
					return null;
				
				}
				public String ACT_FISICAComment(){
				
				    return "";
				
				}
				public String ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_FISICAOriginalDbColumnName(){
				
					return "ACT_FISICA";
				
				}

				
			    public String FREC_ACT_FISICA;

				public String getFREC_ACT_FISICA () {
					return this.FREC_ACT_FISICA;
				}

				public Boolean FREC_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean FREC_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer FREC_ACT_FISICALength(){
				    return 29;
				}
				public Integer FREC_ACT_FISICAPrecision(){
				    return 0;
				}
				public String FREC_ACT_FISICADefault(){
				
					return null;
				
				}
				public String FREC_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String FREC_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ACT_FISICAOriginalDbColumnName(){
				
					return "FREC_ACT_FISICA";
				
				}

				
			    public String DURACION_ACT_FISICA;

				public String getDURACION_ACT_FISICA () {
					return this.DURACION_ACT_FISICA;
				}

				public Boolean DURACION_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean DURACION_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer DURACION_ACT_FISICALength(){
				    return 11;
				}
				public Integer DURACION_ACT_FISICAPrecision(){
				    return 0;
				}
				public String DURACION_ACT_FISICADefault(){
				
					return null;
				
				}
				public String DURACION_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String DURACION_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DURACION_ACT_FISICAOriginalDbColumnName(){
				
					return "DURACION_ACT_FISICA";
				
				}

				
			    public String INT_ACT_FISICA;

				public String getINT_ACT_FISICA () {
					return this.INT_ACT_FISICA;
				}

				public Boolean INT_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean INT_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer INT_ACT_FISICALength(){
				    return 11;
				}
				public Integer INT_ACT_FISICAPrecision(){
				    return 0;
				}
				public String INT_ACT_FISICADefault(){
				
					return null;
				
				}
				public String INT_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String INT_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String INT_ACT_FISICAOriginalDbColumnName(){
				
					return "INT_ACT_FISICA";
				
				}

				
			    public String CAIDAS;

				public String getCAIDAS () {
					return this.CAIDAS;
				}

				public Boolean CAIDASIsNullable(){
				    return true;
				}
				public Boolean CAIDASIsKey(){
				    return false;
				}
				public Integer CAIDASLength(){
				    return 4;
				}
				public Integer CAIDASPrecision(){
				    return 0;
				}
				public String CAIDASDefault(){
				
					return null;
				
				}
				public String CAIDASComment(){
				
				    return "";
				
				}
				public String CAIDASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CAIDASOriginalDbColumnName(){
				
					return "CAIDAS";
				
				}

				
			    public String DISC_FISICA;

				public String getDISC_FISICA () {
					return this.DISC_FISICA;
				}

				public Boolean DISC_FISICAIsNullable(){
				    return true;
				}
				public Boolean DISC_FISICAIsKey(){
				    return false;
				}
				public Integer DISC_FISICALength(){
				    return 9;
				}
				public Integer DISC_FISICAPrecision(){
				    return 0;
				}
				public String DISC_FISICADefault(){
				
					return null;
				
				}
				public String DISC_FISICAComment(){
				
				    return "";
				
				}
				public String DISC_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISC_FISICAOriginalDbColumnName(){
				
					return "DISC_FISICA";
				
				}

				
			    public String DISC_MENTAL;

				public String getDISC_MENTAL () {
					return this.DISC_MENTAL;
				}

				public Boolean DISC_MENTALIsNullable(){
				    return true;
				}
				public Boolean DISC_MENTALIsKey(){
				    return false;
				}
				public Integer DISC_MENTALLength(){
				    return 9;
				}
				public Integer DISC_MENTALPrecision(){
				    return 0;
				}
				public String DISC_MENTALDefault(){
				
					return null;
				
				}
				public String DISC_MENTALComment(){
				
				    return "";
				
				}
				public String DISC_MENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISC_MENTALOriginalDbColumnName(){
				
					return "DISC_MENTAL";
				
				}

				
			    public String EDAD_MESTRUACION;

				public String getEDAD_MESTRUACION () {
					return this.EDAD_MESTRUACION;
				}

				public Boolean EDAD_MESTRUACIONIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESTRUACIONIsKey(){
				    return false;
				}
				public Integer EDAD_MESTRUACIONLength(){
				    return 1;
				}
				public Integer EDAD_MESTRUACIONPrecision(){
				    return 0;
				}
				public String EDAD_MESTRUACIONDefault(){
				
					return null;
				
				}
				public String EDAD_MESTRUACIONComment(){
				
				    return "";
				
				}
				public String EDAD_MESTRUACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EDAD_MESTRUACIONOriginalDbColumnName(){
				
					return "EDAD_MESTRUACION";
				
				}

				
			    public String FECHA_REGLA;

				public String getFECHA_REGLA () {
					return this.FECHA_REGLA;
				}

				public Boolean FECHA_REGLAIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGLAIsKey(){
				    return false;
				}
				public Integer FECHA_REGLALength(){
				    return 1;
				}
				public Integer FECHA_REGLAPrecision(){
				    return 0;
				}
				public String FECHA_REGLADefault(){
				
					return null;
				
				}
				public String FECHA_REGLAComment(){
				
				    return "";
				
				}
				public String FECHA_REGLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_REGLAOriginalDbColumnName(){
				
					return "FECHA_REGLA";
				
				}

				
			    public String PARACLINICOS;

				public String getPARACLINICOS () {
					return this.PARACLINICOS;
				}

				public Boolean PARACLINICOSIsNullable(){
				    return true;
				}
				public Boolean PARACLINICOSIsKey(){
				    return false;
				}
				public Integer PARACLINICOSLength(){
				    return 1;
				}
				public Integer PARACLINICOSPrecision(){
				    return 0;
				}
				public String PARACLINICOSDefault(){
				
					return null;
				
				}
				public String PARACLINICOSComment(){
				
				    return "";
				
				}
				public String PARACLINICOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PARACLINICOSOriginalDbColumnName(){
				
					return "PARACLINICOS";
				
				}

				
			    public String CITOLOGIA;

				public String getCITOLOGIA () {
					return this.CITOLOGIA;
				}

				public Boolean CITOLOGIAIsNullable(){
				    return true;
				}
				public Boolean CITOLOGIAIsKey(){
				    return false;
				}
				public Integer CITOLOGIALength(){
				    return 1;
				}
				public Integer CITOLOGIAPrecision(){
				    return 0;
				}
				public String CITOLOGIADefault(){
				
					return null;
				
				}
				public String CITOLOGIAComment(){
				
				    return "";
				
				}
				public String CITOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CITOLOGIAOriginalDbColumnName(){
				
					return "CITOLOGIA";
				
				}

				
			    public String FECHA_CITOLOGIA;

				public String getFECHA_CITOLOGIA () {
					return this.FECHA_CITOLOGIA;
				}

				public Boolean FECHA_CITOLOGIAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CITOLOGIAIsKey(){
				    return false;
				}
				public Integer FECHA_CITOLOGIALength(){
				    return 1;
				}
				public Integer FECHA_CITOLOGIAPrecision(){
				    return 0;
				}
				public String FECHA_CITOLOGIADefault(){
				
					return null;
				
				}
				public String FECHA_CITOLOGIAComment(){
				
				    return "";
				
				}
				public String FECHA_CITOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CITOLOGIAOriginalDbColumnName(){
				
					return "FECHA_CITOLOGIA";
				
				}

				
			    public String EXAMEN_SENO;

				public String getEXAMEN_SENO () {
					return this.EXAMEN_SENO;
				}

				public Boolean EXAMEN_SENOIsNullable(){
				    return true;
				}
				public Boolean EXAMEN_SENOIsKey(){
				    return false;
				}
				public Integer EXAMEN_SENOLength(){
				    return 1;
				}
				public Integer EXAMEN_SENOPrecision(){
				    return 0;
				}
				public String EXAMEN_SENODefault(){
				
					return null;
				
				}
				public String EXAMEN_SENOComment(){
				
				    return "";
				
				}
				public String EXAMEN_SENOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXAMEN_SENOOriginalDbColumnName(){
				
					return "EXAMEN_SENO";
				
				}

				
			    public String PLAN_FAMILIAR;

				public String getPLAN_FAMILIAR () {
					return this.PLAN_FAMILIAR;
				}

				public Boolean PLAN_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean PLAN_FAMILIARIsKey(){
				    return false;
				}
				public Integer PLAN_FAMILIARLength(){
				    return 1;
				}
				public Integer PLAN_FAMILIARPrecision(){
				    return 0;
				}
				public String PLAN_FAMILIARDefault(){
				
					return null;
				
				}
				public String PLAN_FAMILIARComment(){
				
				    return "";
				
				}
				public String PLAN_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PLAN_FAMILIAROriginalDbColumnName(){
				
					return "PLAN_FAMILIAR";
				
				}

				
			    public String METODO_PLANF;

				public String getMETODO_PLANF () {
					return this.METODO_PLANF;
				}

				public Boolean METODO_PLANFIsNullable(){
				    return true;
				}
				public Boolean METODO_PLANFIsKey(){
				    return false;
				}
				public Integer METODO_PLANFLength(){
				    return 1;
				}
				public Integer METODO_PLANFPrecision(){
				    return 0;
				}
				public String METODO_PLANFDefault(){
				
					return null;
				
				}
				public String METODO_PLANFComment(){
				
				    return "";
				
				}
				public String METODO_PLANFPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String METODO_PLANFOriginalDbColumnName(){
				
					return "METODO_PLANF";
				
				}

				
			    public String TIEMPO_MET_ANIOS;

				public String getTIEMPO_MET_ANIOS () {
					return this.TIEMPO_MET_ANIOS;
				}

				public Boolean TIEMPO_MET_ANIOSIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_ANIOSIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_ANIOSLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_ANIOSPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_ANIOSDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_ANIOSComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_ANIOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_ANIOSOriginalDbColumnName(){
				
					return "TIEMPO_MET_ANIOS";
				
				}

				
			    public String TIEMPO_MET_MESES;

				public String getTIEMPO_MET_MESES () {
					return this.TIEMPO_MET_MESES;
				}

				public Boolean TIEMPO_MET_MESESIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_MESESIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_MESESLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_MESESPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_MESESDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_MESESComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_MESESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_MESESOriginalDbColumnName(){
				
					return "TIEMPO_MET_MESES";
				
				}

				
			    public String TIEMPO_MET_DIAS;

				public String getTIEMPO_MET_DIAS () {
					return this.TIEMPO_MET_DIAS;
				}

				public Boolean TIEMPO_MET_DIASIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_DIASIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_DIASLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_DIASPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_DIASDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_DIASComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_DIASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_DIASOriginalDbColumnName(){
				
					return "TIEMPO_MET_DIAS";
				
				}

				
			    public String CONTR_PLANF_FAMILIAR;

				public String getCONTR_PLANF_FAMILIAR () {
					return this.CONTR_PLANF_FAMILIAR;
				}

				public Boolean CONTR_PLANF_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean CONTR_PLANF_FAMILIARIsKey(){
				    return false;
				}
				public Integer CONTR_PLANF_FAMILIARLength(){
				    return 1;
				}
				public Integer CONTR_PLANF_FAMILIARPrecision(){
				    return 0;
				}
				public String CONTR_PLANF_FAMILIARDefault(){
				
					return null;
				
				}
				public String CONTR_PLANF_FAMILIARComment(){
				
				    return "";
				
				}
				public String CONTR_PLANF_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTR_PLANF_FAMILIAROriginalDbColumnName(){
				
					return "CONTR_PLANF_FAMILIAR";
				
				}

				
			    public String EXAMEN_PROSTATA;

				public String getEXAMEN_PROSTATA () {
					return this.EXAMEN_PROSTATA;
				}

				public Boolean EXAMEN_PROSTATAIsNullable(){
				    return true;
				}
				public Boolean EXAMEN_PROSTATAIsKey(){
				    return false;
				}
				public Integer EXAMEN_PROSTATALength(){
				    return 4;
				}
				public Integer EXAMEN_PROSTATAPrecision(){
				    return 0;
				}
				public String EXAMEN_PROSTATADefault(){
				
					return null;
				
				}
				public String EXAMEN_PROSTATAComment(){
				
				    return "";
				
				}
				public String EXAMEN_PROSTATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXAMEN_PROSTATAOriginalDbColumnName(){
				
					return "EXAMEN_PROSTATA";
				
				}

				
			    public String PSA;

				public String getPSA () {
					return this.PSA;
				}

				public Boolean PSAIsNullable(){
				    return true;
				}
				public Boolean PSAIsKey(){
				    return false;
				}
				public Integer PSALength(){
				    return 4;
				}
				public Integer PSAPrecision(){
				    return 0;
				}
				public String PSADefault(){
				
					return null;
				
				}
				public String PSAComment(){
				
				    return "";
				
				}
				public String PSAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PSAOriginalDbColumnName(){
				
					return "PSA";
				
				}

				
			    public String FECHA_EXAMEN;

				public String getFECHA_EXAMEN () {
					return this.FECHA_EXAMEN;
				}

				public Boolean FECHA_EXAMENIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXAMENIsKey(){
				    return false;
				}
				public Integer FECHA_EXAMENLength(){
				    return 1;
				}
				public Integer FECHA_EXAMENPrecision(){
				    return 0;
				}
				public String FECHA_EXAMENDefault(){
				
					return null;
				
				}
				public String FECHA_EXAMENComment(){
				
				    return "";
				
				}
				public String FECHA_EXAMENPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXAMENOriginalDbColumnName(){
				
					return "FECHA_EXAMEN";
				
				}

				
			    public String GESTA_CONFIRMADA;

				public String getGESTA_CONFIRMADA () {
					return this.GESTA_CONFIRMADA;
				}

				public Boolean GESTA_CONFIRMADAIsNullable(){
				    return true;
				}
				public Boolean GESTA_CONFIRMADAIsKey(){
				    return false;
				}
				public Integer GESTA_CONFIRMADALength(){
				    return 1;
				}
				public Integer GESTA_CONFIRMADAPrecision(){
				    return 0;
				}
				public String GESTA_CONFIRMADADefault(){
				
					return null;
				
				}
				public String GESTA_CONFIRMADAComment(){
				
				    return "";
				
				}
				public String GESTA_CONFIRMADAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GESTA_CONFIRMADAOriginalDbColumnName(){
				
					return "GESTA_CONFIRMADA";
				
				}

				
			    public String GESTA_PLANEADA;

				public String getGESTA_PLANEADA () {
					return this.GESTA_PLANEADA;
				}

				public Boolean GESTA_PLANEADAIsNullable(){
				    return true;
				}
				public Boolean GESTA_PLANEADAIsKey(){
				    return false;
				}
				public Integer GESTA_PLANEADALength(){
				    return 1;
				}
				public Integer GESTA_PLANEADAPrecision(){
				    return 0;
				}
				public String GESTA_PLANEADADefault(){
				
					return null;
				
				}
				public String GESTA_PLANEADAComment(){
				
				    return "";
				
				}
				public String GESTA_PLANEADAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GESTA_PLANEADAOriginalDbColumnName(){
				
					return "GESTA_PLANEADA";
				
				}

				
			    public String CONVIVENCIA_PAREJA;

				public String getCONVIVENCIA_PAREJA () {
					return this.CONVIVENCIA_PAREJA;
				}

				public Boolean CONVIVENCIA_PAREJAIsNullable(){
				    return true;
				}
				public Boolean CONVIVENCIA_PAREJAIsKey(){
				    return false;
				}
				public Integer CONVIVENCIA_PAREJALength(){
				    return 1;
				}
				public Integer CONVIVENCIA_PAREJAPrecision(){
				    return 0;
				}
				public String CONVIVENCIA_PAREJADefault(){
				
					return null;
				
				}
				public String CONVIVENCIA_PAREJAComment(){
				
				    return "";
				
				}
				public String CONVIVENCIA_PAREJAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONVIVENCIA_PAREJAOriginalDbColumnName(){
				
					return "CONVIVENCIA_PAREJA";
				
				}

				
			    public String FUR;

				public String getFUR () {
					return this.FUR;
				}

				public Boolean FURIsNullable(){
				    return true;
				}
				public Boolean FURIsKey(){
				    return false;
				}
				public Integer FURLength(){
				    return 1;
				}
				public Integer FURPrecision(){
				    return 0;
				}
				public String FURDefault(){
				
					return null;
				
				}
				public String FURComment(){
				
				    return "";
				
				}
				public String FURPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FUROriginalDbColumnName(){
				
					return "FUR";
				
				}

				
			    public String SEMANAS;

				public String getSEMANAS () {
					return this.SEMANAS;
				}

				public Boolean SEMANASIsNullable(){
				    return true;
				}
				public Boolean SEMANASIsKey(){
				    return false;
				}
				public Integer SEMANASLength(){
				    return 1;
				}
				public Integer SEMANASPrecision(){
				    return 0;
				}
				public String SEMANASDefault(){
				
					return null;
				
				}
				public String SEMANASComment(){
				
				    return "";
				
				}
				public String SEMANASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEMANASOriginalDbColumnName(){
				
					return "SEMANAS";
				
				}

				
			    public String FECHA_PARTO;

				public String getFECHA_PARTO () {
					return this.FECHA_PARTO;
				}

				public Boolean FECHA_PARTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_PARTOIsKey(){
				    return false;
				}
				public Integer FECHA_PARTOLength(){
				    return 1;
				}
				public Integer FECHA_PARTOPrecision(){
				    return 0;
				}
				public String FECHA_PARTODefault(){
				
					return null;
				
				}
				public String FECHA_PARTOComment(){
				
				    return "";
				
				}
				public String FECHA_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_PARTOOriginalDbColumnName(){
				
					return "FECHA_PARTO";
				
				}

				
			    public String GANANCIA_PESP;

				public String getGANANCIA_PESP () {
					return this.GANANCIA_PESP;
				}

				public Boolean GANANCIA_PESPIsNullable(){
				    return true;
				}
				public Boolean GANANCIA_PESPIsKey(){
				    return false;
				}
				public Integer GANANCIA_PESPLength(){
				    return 1;
				}
				public Integer GANANCIA_PESPPrecision(){
				    return 0;
				}
				public String GANANCIA_PESPDefault(){
				
					return null;
				
				}
				public String GANANCIA_PESPComment(){
				
				    return "";
				
				}
				public String GANANCIA_PESPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GANANCIA_PESPOriginalDbColumnName(){
				
					return "GANANCIA_PESP";
				
				}

				
			    public String CARNE_EMB;

				public String getCARNE_EMB () {
					return this.CARNE_EMB;
				}

				public Boolean CARNE_EMBIsNullable(){
				    return true;
				}
				public Boolean CARNE_EMBIsKey(){
				    return false;
				}
				public Integer CARNE_EMBLength(){
				    return 1;
				}
				public Integer CARNE_EMBPrecision(){
				    return 0;
				}
				public String CARNE_EMBDefault(){
				
					return null;
				
				}
				public String CARNE_EMBComment(){
				
				    return "";
				
				}
				public String CARNE_EMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARNE_EMBOriginalDbColumnName(){
				
					return "CARNE_EMB";
				
				}

				
			    public String CONTROL_PRENATAL;

				public String getCONTROL_PRENATAL () {
					return this.CONTROL_PRENATAL;
				}

				public Boolean CONTROL_PRENATALIsNullable(){
				    return true;
				}
				public Boolean CONTROL_PRENATALIsKey(){
				    return false;
				}
				public Integer CONTROL_PRENATALLength(){
				    return 1;
				}
				public Integer CONTROL_PRENATALPrecision(){
				    return 0;
				}
				public String CONTROL_PRENATALDefault(){
				
					return null;
				
				}
				public String CONTROL_PRENATALComment(){
				
				    return "";
				
				}
				public String CONTROL_PRENATALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTROL_PRENATALOriginalDbColumnName(){
				
					return "CONTROL_PRENATAL";
				
				}

				
			    public String QUIEN_CONTROL;

				public String getQUIEN_CONTROL () {
					return this.QUIEN_CONTROL;
				}

				public Boolean QUIEN_CONTROLIsNullable(){
				    return true;
				}
				public Boolean QUIEN_CONTROLIsKey(){
				    return false;
				}
				public Integer QUIEN_CONTROLLength(){
				    return 1;
				}
				public Integer QUIEN_CONTROLPrecision(){
				    return 0;
				}
				public String QUIEN_CONTROLDefault(){
				
					return null;
				
				}
				public String QUIEN_CONTROLComment(){
				
				    return "";
				
				}
				public String QUIEN_CONTROLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_CONTROLOriginalDbColumnName(){
				
					return "QUIEN_CONTROL";
				
				}

				
			    public String TRIMESTRE_ING_CONTROL;

				public String getTRIMESTRE_ING_CONTROL () {
					return this.TRIMESTRE_ING_CONTROL;
				}

				public Boolean TRIMESTRE_ING_CONTROLIsNullable(){
				    return true;
				}
				public Boolean TRIMESTRE_ING_CONTROLIsKey(){
				    return false;
				}
				public Integer TRIMESTRE_ING_CONTROLLength(){
				    return 1;
				}
				public Integer TRIMESTRE_ING_CONTROLPrecision(){
				    return 0;
				}
				public String TRIMESTRE_ING_CONTROLDefault(){
				
					return null;
				
				}
				public String TRIMESTRE_ING_CONTROLComment(){
				
				    return "";
				
				}
				public String TRIMESTRE_ING_CONTROLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRIMESTRE_ING_CONTROLOriginalDbColumnName(){
				
					return "TRIMESTRE_ING_CONTROL";
				
				}

				
			    public String FECHA_CONTROL_INI;

				public String getFECHA_CONTROL_INI () {
					return this.FECHA_CONTROL_INI;
				}

				public Boolean FECHA_CONTROL_INIIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONTROL_INIIsKey(){
				    return false;
				}
				public Integer FECHA_CONTROL_INILength(){
				    return 1;
				}
				public Integer FECHA_CONTROL_INIPrecision(){
				    return 0;
				}
				public String FECHA_CONTROL_INIDefault(){
				
					return null;
				
				}
				public String FECHA_CONTROL_INIComment(){
				
				    return "";
				
				}
				public String FECHA_CONTROL_INIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CONTROL_INIOriginalDbColumnName(){
				
					return "FECHA_CONTROL_INI";
				
				}

				
			    public String VAL_ODONTOLOGIA;

				public String getVAL_ODONTOLOGIA () {
					return this.VAL_ODONTOLOGIA;
				}

				public Boolean VAL_ODONTOLOGIAIsNullable(){
				    return true;
				}
				public Boolean VAL_ODONTOLOGIAIsKey(){
				    return false;
				}
				public Integer VAL_ODONTOLOGIALength(){
				    return 1;
				}
				public Integer VAL_ODONTOLOGIAPrecision(){
				    return 0;
				}
				public String VAL_ODONTOLOGIADefault(){
				
					return null;
				
				}
				public String VAL_ODONTOLOGIAComment(){
				
				    return "";
				
				}
				public String VAL_ODONTOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VAL_ODONTOLOGIAOriginalDbColumnName(){
				
					return "VAL_ODONTOLOGIA";
				
				}

				
			    public String VAC_GESTANTE;

				public String getVAC_GESTANTE () {
					return this.VAC_GESTANTE;
				}

				public Boolean VAC_GESTANTEIsNullable(){
				    return true;
				}
				public Boolean VAC_GESTANTEIsKey(){
				    return false;
				}
				public Integer VAC_GESTANTELength(){
				    return 1;
				}
				public Integer VAC_GESTANTEPrecision(){
				    return 0;
				}
				public String VAC_GESTANTEDefault(){
				
					return null;
				
				}
				public String VAC_GESTANTEComment(){
				
				    return "";
				
				}
				public String VAC_GESTANTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VAC_GESTANTEOriginalDbColumnName(){
				
					return "VAC_GESTANTE";
				
				}

				
			    public String NUM_GESTACIONES;

				public String getNUM_GESTACIONES () {
					return this.NUM_GESTACIONES;
				}

				public Boolean NUM_GESTACIONESIsNullable(){
				    return true;
				}
				public Boolean NUM_GESTACIONESIsKey(){
				    return false;
				}
				public Integer NUM_GESTACIONESLength(){
				    return 1;
				}
				public Integer NUM_GESTACIONESPrecision(){
				    return 0;
				}
				public String NUM_GESTACIONESDefault(){
				
					return null;
				
				}
				public String NUM_GESTACIONESComment(){
				
				    return "";
				
				}
				public String NUM_GESTACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_GESTACIONESOriginalDbColumnName(){
				
					return "NUM_GESTACIONES";
				
				}

				
			    public String NUM_PARTOS;

				public String getNUM_PARTOS () {
					return this.NUM_PARTOS;
				}

				public Boolean NUM_PARTOSIsNullable(){
				    return true;
				}
				public Boolean NUM_PARTOSIsKey(){
				    return false;
				}
				public Integer NUM_PARTOSLength(){
				    return 1;
				}
				public Integer NUM_PARTOSPrecision(){
				    return 0;
				}
				public String NUM_PARTOSDefault(){
				
					return null;
				
				}
				public String NUM_PARTOSComment(){
				
				    return "";
				
				}
				public String NUM_PARTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_PARTOSOriginalDbColumnName(){
				
					return "NUM_PARTOS";
				
				}

				
			    public String NUM_ABORTOS;

				public String getNUM_ABORTOS () {
					return this.NUM_ABORTOS;
				}

				public Boolean NUM_ABORTOSIsNullable(){
				    return true;
				}
				public Boolean NUM_ABORTOSIsKey(){
				    return false;
				}
				public Integer NUM_ABORTOSLength(){
				    return 1;
				}
				public Integer NUM_ABORTOSPrecision(){
				    return 0;
				}
				public String NUM_ABORTOSDefault(){
				
					return null;
				
				}
				public String NUM_ABORTOSComment(){
				
				    return "";
				
				}
				public String NUM_ABORTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_ABORTOSOriginalDbColumnName(){
				
					return "NUM_ABORTOS";
				
				}

				
			    public String NUM_CESAREA;

				public String getNUM_CESAREA () {
					return this.NUM_CESAREA;
				}

				public Boolean NUM_CESAREAIsNullable(){
				    return true;
				}
				public Boolean NUM_CESAREAIsKey(){
				    return false;
				}
				public Integer NUM_CESAREALength(){
				    return 1;
				}
				public Integer NUM_CESAREAPrecision(){
				    return 0;
				}
				public String NUM_CESAREADefault(){
				
					return null;
				
				}
				public String NUM_CESAREAComment(){
				
				    return "";
				
				}
				public String NUM_CESAREAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CESAREAOriginalDbColumnName(){
				
					return "NUM_CESAREA";
				
				}

				
			    public String NUM_IVE;

				public String getNUM_IVE () {
					return this.NUM_IVE;
				}

				public Boolean NUM_IVEIsNullable(){
				    return true;
				}
				public Boolean NUM_IVEIsKey(){
				    return false;
				}
				public Integer NUM_IVELength(){
				    return 1;
				}
				public Integer NUM_IVEPrecision(){
				    return 0;
				}
				public String NUM_IVEDefault(){
				
					return null;
				
				}
				public String NUM_IVEComment(){
				
				    return "";
				
				}
				public String NUM_IVEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_IVEOriginalDbColumnName(){
				
					return "NUM_IVE";
				
				}

				
			    public String CAUSA_IVE;

				public String getCAUSA_IVE () {
					return this.CAUSA_IVE;
				}

				public Boolean CAUSA_IVEIsNullable(){
				    return true;
				}
				public Boolean CAUSA_IVEIsKey(){
				    return false;
				}
				public Integer CAUSA_IVELength(){
				    return 1;
				}
				public Integer CAUSA_IVEPrecision(){
				    return 0;
				}
				public String CAUSA_IVEDefault(){
				
					return null;
				
				}
				public String CAUSA_IVEComment(){
				
				    return "";
				
				}
				public String CAUSA_IVEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CAUSA_IVEOriginalDbColumnName(){
				
					return "CAUSA_IVE";
				
				}

				
			    public String EMB_ECTOPICO;

				public String getEMB_ECTOPICO () {
					return this.EMB_ECTOPICO;
				}

				public Boolean EMB_ECTOPICOIsNullable(){
				    return true;
				}
				public Boolean EMB_ECTOPICOIsKey(){
				    return false;
				}
				public Integer EMB_ECTOPICOLength(){
				    return 1;
				}
				public Integer EMB_ECTOPICOPrecision(){
				    return 0;
				}
				public String EMB_ECTOPICODefault(){
				
					return null;
				
				}
				public String EMB_ECTOPICOComment(){
				
				    return "";
				
				}
				public String EMB_ECTOPICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EMB_ECTOPICOOriginalDbColumnName(){
				
					return "EMB_ECTOPICO";
				
				}

				
			    public String NUM_NACIDOS_VIVOS;

				public String getNUM_NACIDOS_VIVOS () {
					return this.NUM_NACIDOS_VIVOS;
				}

				public Boolean NUM_NACIDOS_VIVOSIsNullable(){
				    return true;
				}
				public Boolean NUM_NACIDOS_VIVOSIsKey(){
				    return false;
				}
				public Integer NUM_NACIDOS_VIVOSLength(){
				    return 1;
				}
				public Integer NUM_NACIDOS_VIVOSPrecision(){
				    return 0;
				}
				public String NUM_NACIDOS_VIVOSDefault(){
				
					return null;
				
				}
				public String NUM_NACIDOS_VIVOSComment(){
				
				    return "";
				
				}
				public String NUM_NACIDOS_VIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_NACIDOS_VIVOSOriginalDbColumnName(){
				
					return "NUM_NACIDOS_VIVOS";
				
				}

				
			    public String FECHA_ULT_PARTO;

				public String getFECHA_ULT_PARTO () {
					return this.FECHA_ULT_PARTO;
				}

				public Boolean FECHA_ULT_PARTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_ULT_PARTOIsKey(){
				    return false;
				}
				public Integer FECHA_ULT_PARTOLength(){
				    return 1;
				}
				public Integer FECHA_ULT_PARTOPrecision(){
				    return 0;
				}
				public String FECHA_ULT_PARTODefault(){
				
					return null;
				
				}
				public String FECHA_ULT_PARTOComment(){
				
				    return "";
				
				}
				public String FECHA_ULT_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_ULT_PARTOOriginalDbColumnName(){
				
					return "FECHA_ULT_PARTO";
				
				}

				
			    public String RIESGO_OBSTETRICO;

				public String getRIESGO_OBSTETRICO () {
					return this.RIESGO_OBSTETRICO;
				}

				public Boolean RIESGO_OBSTETRICOIsNullable(){
				    return true;
				}
				public Boolean RIESGO_OBSTETRICOIsKey(){
				    return false;
				}
				public Integer RIESGO_OBSTETRICOLength(){
				    return 1;
				}
				public Integer RIESGO_OBSTETRICOPrecision(){
				    return 0;
				}
				public String RIESGO_OBSTETRICODefault(){
				
					return null;
				
				}
				public String RIESGO_OBSTETRICOComment(){
				
				    return "";
				
				}
				public String RIESGO_OBSTETRICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RIESGO_OBSTETRICOOriginalDbColumnName(){
				
					return "RIESGO_OBSTETRICO";
				
				}

				
			    public String HEMOGLOBINA;

				public String getHEMOGLOBINA () {
					return this.HEMOGLOBINA;
				}

				public Boolean HEMOGLOBINAIsNullable(){
				    return true;
				}
				public Boolean HEMOGLOBINAIsKey(){
				    return false;
				}
				public Integer HEMOGLOBINALength(){
				    return 1;
				}
				public Integer HEMOGLOBINAPrecision(){
				    return 0;
				}
				public String HEMOGLOBINADefault(){
				
					return null;
				
				}
				public String HEMOGLOBINAComment(){
				
				    return "";
				
				}
				public String HEMOGLOBINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEMOGLOBINAOriginalDbColumnName(){
				
					return "HEMOGLOBINA";
				
				}

				
			    public String SEROLOGIA;

				public String getSEROLOGIA () {
					return this.SEROLOGIA;
				}

				public Boolean SEROLOGIAIsNullable(){
				    return true;
				}
				public Boolean SEROLOGIAIsKey(){
				    return false;
				}
				public Integer SEROLOGIALength(){
				    return 1;
				}
				public Integer SEROLOGIAPrecision(){
				    return 0;
				}
				public String SEROLOGIADefault(){
				
					return null;
				
				}
				public String SEROLOGIAComment(){
				
				    return "";
				
				}
				public String SEROLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEROLOGIAOriginalDbColumnName(){
				
					return "SEROLOGIA";
				
				}

				
			    public String VIH;

				public String getVIH () {
					return this.VIH;
				}

				public Boolean VIHIsNullable(){
				    return true;
				}
				public Boolean VIHIsKey(){
				    return false;
				}
				public Integer VIHLength(){
				    return 1;
				}
				public Integer VIHPrecision(){
				    return 0;
				}
				public String VIHDefault(){
				
					return null;
				
				}
				public String VIHComment(){
				
				    return "";
				
				}
				public String VIHPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIHOriginalDbColumnName(){
				
					return "VIH";
				
				}

				
			    public String SUPLEMENTACION;

				public String getSUPLEMENTACION () {
					return this.SUPLEMENTACION;
				}

				public Boolean SUPLEMENTACIONIsNullable(){
				    return true;
				}
				public Boolean SUPLEMENTACIONIsKey(){
				    return false;
				}
				public Integer SUPLEMENTACIONLength(){
				    return 1;
				}
				public Integer SUPLEMENTACIONPrecision(){
				    return 0;
				}
				public String SUPLEMENTACIONDefault(){
				
					return null;
				
				}
				public String SUPLEMENTACIONComment(){
				
				    return "";
				
				}
				public String SUPLEMENTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SUPLEMENTACIONOriginalDbColumnName(){
				
					return "SUPLEMENTACION";
				
				}

				
			    public String PERCENTIL_NUTRICIONAL;

				public String getPERCENTIL_NUTRICIONAL () {
					return this.PERCENTIL_NUTRICIONAL;
				}

				public Boolean PERCENTIL_NUTRICIONALIsNullable(){
				    return true;
				}
				public Boolean PERCENTIL_NUTRICIONALIsKey(){
				    return false;
				}
				public Integer PERCENTIL_NUTRICIONALLength(){
				    return 1;
				}
				public Integer PERCENTIL_NUTRICIONALPrecision(){
				    return 0;
				}
				public String PERCENTIL_NUTRICIONALDefault(){
				
					return null;
				
				}
				public String PERCENTIL_NUTRICIONALComment(){
				
				    return "";
				
				}
				public String PERCENTIL_NUTRICIONALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERCENTIL_NUTRICIONALOriginalDbColumnName(){
				
					return "PERCENTIL_NUTRICIONAL";
				
				}

				
			    public String TABAQUISMO;

				public String getTABAQUISMO () {
					return this.TABAQUISMO;
				}

				public Boolean TABAQUISMOIsNullable(){
				    return true;
				}
				public Boolean TABAQUISMOIsKey(){
				    return false;
				}
				public Integer TABAQUISMOLength(){
				    return 1;
				}
				public Integer TABAQUISMOPrecision(){
				    return 0;
				}
				public String TABAQUISMODefault(){
				
					return null;
				
				}
				public String TABAQUISMOComment(){
				
				    return "";
				
				}
				public String TABAQUISMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TABAQUISMOOriginalDbColumnName(){
				
					return "TABAQUISMO";
				
				}

				
			    public String NUM_CIGARRILLOS;

				public String getNUM_CIGARRILLOS () {
					return this.NUM_CIGARRILLOS;
				}

				public Boolean NUM_CIGARRILLOSIsNullable(){
				    return true;
				}
				public Boolean NUM_CIGARRILLOSIsKey(){
				    return false;
				}
				public Integer NUM_CIGARRILLOSLength(){
				    return 1;
				}
				public Integer NUM_CIGARRILLOSPrecision(){
				    return 0;
				}
				public String NUM_CIGARRILLOSDefault(){
				
					return null;
				
				}
				public String NUM_CIGARRILLOSComment(){
				
				    return "";
				
				}
				public String NUM_CIGARRILLOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CIGARRILLOSOriginalDbColumnName(){
				
					return "NUM_CIGARRILLOS";
				
				}

				
			    public String ALCOHOL;

				public String getALCOHOL () {
					return this.ALCOHOL;
				}

				public Boolean ALCOHOLIsNullable(){
				    return true;
				}
				public Boolean ALCOHOLIsKey(){
				    return false;
				}
				public Integer ALCOHOLLength(){
				    return 1;
				}
				public Integer ALCOHOLPrecision(){
				    return 0;
				}
				public String ALCOHOLDefault(){
				
					return null;
				
				}
				public String ALCOHOLComment(){
				
				    return "";
				
				}
				public String ALCOHOLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ALCOHOLOriginalDbColumnName(){
				
					return "ALCOHOL";
				
				}

				
			    public String FREC_ALCOHOL;

				public String getFREC_ALCOHOL () {
					return this.FREC_ALCOHOL;
				}

				public Boolean FREC_ALCOHOLIsNullable(){
				    return true;
				}
				public Boolean FREC_ALCOHOLIsKey(){
				    return false;
				}
				public Integer FREC_ALCOHOLLength(){
				    return 1;
				}
				public Integer FREC_ALCOHOLPrecision(){
				    return 0;
				}
				public String FREC_ALCOHOLDefault(){
				
					return null;
				
				}
				public String FREC_ALCOHOLComment(){
				
				    return "";
				
				}
				public String FREC_ALCOHOLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ALCOHOLOriginalDbColumnName(){
				
					return "FREC_ALCOHOL";
				
				}

				
			    public String ALT_UTERINA;

				public String getALT_UTERINA () {
					return this.ALT_UTERINA;
				}

				public Boolean ALT_UTERINAIsNullable(){
				    return true;
				}
				public Boolean ALT_UTERINAIsKey(){
				    return false;
				}
				public Integer ALT_UTERINALength(){
				    return 1;
				}
				public Integer ALT_UTERINAPrecision(){
				    return 0;
				}
				public String ALT_UTERINADefault(){
				
					return null;
				
				}
				public String ALT_UTERINAComment(){
				
				    return "";
				
				}
				public String ALT_UTERINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ALT_UTERINAOriginalDbColumnName(){
				
					return "ALT_UTERINA";
				
				}

				
			    public String SEDENTARISMO;

				public String getSEDENTARISMO () {
					return this.SEDENTARISMO;
				}

				public Boolean SEDENTARISMOIsNullable(){
				    return true;
				}
				public Boolean SEDENTARISMOIsKey(){
				    return false;
				}
				public Integer SEDENTARISMOLength(){
				    return 1;
				}
				public Integer SEDENTARISMOPrecision(){
				    return 0;
				}
				public String SEDENTARISMODefault(){
				
					return null;
				
				}
				public String SEDENTARISMOComment(){
				
				    return "";
				
				}
				public String SEDENTARISMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEDENTARISMOOriginalDbColumnName(){
				
					return "SEDENTARISMO";
				
				}

				
			    public String PARTO;

				public String getPARTO () {
					return this.PARTO;
				}

				public Boolean PARTOIsNullable(){
				    return true;
				}
				public Boolean PARTOIsKey(){
				    return false;
				}
				public Integer PARTOLength(){
				    return 1;
				}
				public Integer PARTOPrecision(){
				    return 0;
				}
				public String PARTODefault(){
				
					return null;
				
				}
				public String PARTOComment(){
				
				    return "";
				
				}
				public String PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PARTOOriginalDbColumnName(){
				
					return "PARTO";
				
				}

				
			    public String QUIEN_PARTO;

				public String getQUIEN_PARTO () {
					return this.QUIEN_PARTO;
				}

				public Boolean QUIEN_PARTOIsNullable(){
				    return true;
				}
				public Boolean QUIEN_PARTOIsKey(){
				    return false;
				}
				public Integer QUIEN_PARTOLength(){
				    return 1;
				}
				public Integer QUIEN_PARTOPrecision(){
				    return 0;
				}
				public String QUIEN_PARTODefault(){
				
					return null;
				
				}
				public String QUIEN_PARTOComment(){
				
				    return "";
				
				}
				public String QUIEN_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_PARTOOriginalDbColumnName(){
				
					return "QUIEN_PARTO";
				
				}

				
			    public String COMPLICACIONES;

				public String getCOMPLICACIONES () {
					return this.COMPLICACIONES;
				}

				public Boolean COMPLICACIONESIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONESIsKey(){
				    return false;
				}
				public Integer COMPLICACIONESLength(){
				    return 1;
				}
				public Integer COMPLICACIONESPrecision(){
				    return 0;
				}
				public String COMPLICACIONESDefault(){
				
					return null;
				
				}
				public String COMPLICACIONESComment(){
				
				    return "";
				
				}
				public String COMPLICACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONESOriginalDbColumnName(){
				
					return "COMPLICACIONES";
				
				}

				
			    public String ATENCION_PARTO;

				public String getATENCION_PARTO () {
					return this.ATENCION_PARTO;
				}

				public Boolean ATENCION_PARTOIsNullable(){
				    return true;
				}
				public Boolean ATENCION_PARTOIsKey(){
				    return false;
				}
				public Integer ATENCION_PARTOLength(){
				    return 1;
				}
				public Integer ATENCION_PARTOPrecision(){
				    return 0;
				}
				public String ATENCION_PARTODefault(){
				
					return null;
				
				}
				public String ATENCION_PARTOComment(){
				
				    return "";
				
				}
				public String ATENCION_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ATENCION_PARTOOriginalDbColumnName(){
				
					return "ATENCION_PARTO";
				
				}

				
			    public String TIEMPO_GESTACION;

				public String getTIEMPO_GESTACION () {
					return this.TIEMPO_GESTACION;
				}

				public Boolean TIEMPO_GESTACIONIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_GESTACIONIsKey(){
				    return false;
				}
				public Integer TIEMPO_GESTACIONLength(){
				    return 1;
				}
				public Integer TIEMPO_GESTACIONPrecision(){
				    return 0;
				}
				public String TIEMPO_GESTACIONDefault(){
				
					return null;
				
				}
				public String TIEMPO_GESTACIONComment(){
				
				    return "";
				
				}
				public String TIEMPO_GESTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_GESTACIONOriginalDbColumnName(){
				
					return "TIEMPO_GESTACION";
				
				}

				
			    public String ATENCION_INSTITUCIONAL;

				public String getATENCION_INSTITUCIONAL () {
					return this.ATENCION_INSTITUCIONAL;
				}

				public Boolean ATENCION_INSTITUCIONALIsNullable(){
				    return true;
				}
				public Boolean ATENCION_INSTITUCIONALIsKey(){
				    return false;
				}
				public Integer ATENCION_INSTITUCIONALLength(){
				    return 1;
				}
				public Integer ATENCION_INSTITUCIONALPrecision(){
				    return 0;
				}
				public String ATENCION_INSTITUCIONALDefault(){
				
					return null;
				
				}
				public String ATENCION_INSTITUCIONALComment(){
				
				    return "";
				
				}
				public String ATENCION_INSTITUCIONALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ATENCION_INSTITUCIONALOriginalDbColumnName(){
				
					return "ATENCION_INSTITUCIONAL";
				
				}

				
			    public String COMPLICACIONES_POSTPARTO;

				public String getCOMPLICACIONES_POSTPARTO () {
					return this.COMPLICACIONES_POSTPARTO;
				}

				public Boolean COMPLICACIONES_POSTPARTOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_POSTPARTOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_POSTPARTOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_POSTPARTOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_POSTPARTODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_POSTPARTOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_POSTPARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_POSTPARTOOriginalDbColumnName(){
				
					return "COMPLICACIONES_POSTPARTO";
				
				}

				
			    public String COMPLICACIONES_PARTO;

				public String getCOMPLICACIONES_PARTO () {
					return this.COMPLICACIONES_PARTO;
				}

				public Boolean COMPLICACIONES_PARTOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_PARTOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_PARTOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_PARTOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_PARTODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_PARTOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_PARTOOriginalDbColumnName(){
				
					return "COMPLICACIONES_PARTO";
				
				}

				
			    public String COMPLICACIONES_EMBARAZO;

				public String getCOMPLICACIONES_EMBARAZO () {
					return this.COMPLICACIONES_EMBARAZO;
				}

				public Boolean COMPLICACIONES_EMBARAZOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_EMBARAZOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_EMBARAZOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_EMBARAZOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_EMBARAZODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_EMBARAZOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_EMBARAZOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_EMBARAZOOriginalDbColumnName(){
				
					return "COMPLICACIONES_EMBARAZO";
				
				}

				
			    public String PLANIFICACION;

				public String getPLANIFICACION () {
					return this.PLANIFICACION;
				}

				public Boolean PLANIFICACIONIsNullable(){
				    return true;
				}
				public Boolean PLANIFICACIONIsKey(){
				    return false;
				}
				public Integer PLANIFICACIONLength(){
				    return 1;
				}
				public Integer PLANIFICACIONPrecision(){
				    return 0;
				}
				public String PLANIFICACIONDefault(){
				
					return null;
				
				}
				public String PLANIFICACIONComment(){
				
				    return "";
				
				}
				public String PLANIFICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PLANIFICACIONOriginalDbColumnName(){
				
					return "PLANIFICACION";
				
				}

				
			    public String CONSUME_MEDICAMENTO;

				public String getCONSUME_MEDICAMENTO () {
					return this.CONSUME_MEDICAMENTO;
				}

				public Boolean CONSUME_MEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean CONSUME_MEDICAMENTOIsKey(){
				    return false;
				}
				public Integer CONSUME_MEDICAMENTOLength(){
				    return 1;
				}
				public Integer CONSUME_MEDICAMENTOPrecision(){
				    return 0;
				}
				public String CONSUME_MEDICAMENTODefault(){
				
					return null;
				
				}
				public String CONSUME_MEDICAMENTOComment(){
				
				    return "";
				
				}
				public String CONSUME_MEDICAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSUME_MEDICAMENTOOriginalDbColumnName(){
				
					return "CONSUME_MEDICAMENTO";
				
				}

				
			    public String PESO_NACER;

				public String getPESO_NACER () {
					return this.PESO_NACER;
				}

				public Boolean PESO_NACERIsNullable(){
				    return true;
				}
				public Boolean PESO_NACERIsKey(){
				    return false;
				}
				public Integer PESO_NACERLength(){
				    return 1;
				}
				public Integer PESO_NACERPrecision(){
				    return 0;
				}
				public String PESO_NACERDefault(){
				
					return null;
				
				}
				public String PESO_NACERComment(){
				
				    return "";
				
				}
				public String PESO_NACERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PESO_NACEROriginalDbColumnName(){
				
					return "PESO_NACER";
				
				}

				
			    public String TALLA_NACER;

				public String getTALLA_NACER () {
					return this.TALLA_NACER;
				}

				public Boolean TALLA_NACERIsNullable(){
				    return true;
				}
				public Boolean TALLA_NACERIsKey(){
				    return false;
				}
				public Integer TALLA_NACERLength(){
				    return 1;
				}
				public Integer TALLA_NACERPrecision(){
				    return 0;
				}
				public String TALLA_NACERDefault(){
				
					return null;
				
				}
				public String TALLA_NACERComment(){
				
				    return "";
				
				}
				public String TALLA_NACERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TALLA_NACEROriginalDbColumnName(){
				
					return "TALLA_NACER";
				
				}

				
			    public String PERIMETRO_CEFALICO;

				public String getPERIMETRO_CEFALICO () {
					return this.PERIMETRO_CEFALICO;
				}

				public Boolean PERIMETRO_CEFALICOIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_CEFALICOIsKey(){
				    return false;
				}
				public Integer PERIMETRO_CEFALICOLength(){
				    return 1;
				}
				public Integer PERIMETRO_CEFALICOPrecision(){
				    return 0;
				}
				public String PERIMETRO_CEFALICODefault(){
				
					return null;
				
				}
				public String PERIMETRO_CEFALICOComment(){
				
				    return "";
				
				}
				public String PERIMETRO_CEFALICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_CEFALICOOriginalDbColumnName(){
				
					return "PERIMETRO_CEFALICO";
				
				}

				
			    public String PREMATUREZ;

				public String getPREMATUREZ () {
					return this.PREMATUREZ;
				}

				public Boolean PREMATUREZIsNullable(){
				    return true;
				}
				public Boolean PREMATUREZIsKey(){
				    return false;
				}
				public Integer PREMATUREZLength(){
				    return 1;
				}
				public Integer PREMATUREZPrecision(){
				    return 0;
				}
				public String PREMATUREZDefault(){
				
					return null;
				
				}
				public String PREMATUREZComment(){
				
				    return "";
				
				}
				public String PREMATUREZPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PREMATUREZOriginalDbColumnName(){
				
					return "PREMATUREZ";
				
				}

				
			    public String COMPLICACIONES_EMB;

				public String getCOMPLICACIONES_EMB () {
					return this.COMPLICACIONES_EMB;
				}

				public Boolean COMPLICACIONES_EMBIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_EMBIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_EMBLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_EMBPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_EMBDefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_EMBComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_EMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_EMBOriginalDbColumnName(){
				
					return "COMPLICACIONES_EMB";
				
				}

				
			    public String RECIBE_MED;

				public String getRECIBE_MED () {
					return this.RECIBE_MED;
				}

				public Boolean RECIBE_MEDIsNullable(){
				    return true;
				}
				public Boolean RECIBE_MEDIsKey(){
				    return false;
				}
				public Integer RECIBE_MEDLength(){
				    return 1;
				}
				public Integer RECIBE_MEDPrecision(){
				    return 0;
				}
				public String RECIBE_MEDDefault(){
				
					return null;
				
				}
				public String RECIBE_MEDComment(){
				
				    return "";
				
				}
				public String RECIBE_MEDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBE_MEDOriginalDbColumnName(){
				
					return "RECIBE_MED";
				
				}

				
			    public String REGISTRADO;

				public String getREGISTRADO () {
					return this.REGISTRADO;
				}

				public Boolean REGISTRADOIsNullable(){
				    return true;
				}
				public Boolean REGISTRADOIsKey(){
				    return false;
				}
				public Integer REGISTRADOLength(){
				    return 1;
				}
				public Integer REGISTRADOPrecision(){
				    return 0;
				}
				public String REGISTRADODefault(){
				
					return null;
				
				}
				public String REGISTRADOComment(){
				
				    return "";
				
				}
				public String REGISTRADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String REGISTRADOOriginalDbColumnName(){
				
					return "REGISTRADO";
				
				}

				
			    public String ANTECEDENTES_PERINATALES;

				public String getANTECEDENTES_PERINATALES () {
					return this.ANTECEDENTES_PERINATALES;
				}

				public Boolean ANTECEDENTES_PERINATALESIsNullable(){
				    return true;
				}
				public Boolean ANTECEDENTES_PERINATALESIsKey(){
				    return false;
				}
				public Integer ANTECEDENTES_PERINATALESLength(){
				    return 1;
				}
				public Integer ANTECEDENTES_PERINATALESPrecision(){
				    return 0;
				}
				public String ANTECEDENTES_PERINATALESDefault(){
				
					return null;
				
				}
				public String ANTECEDENTES_PERINATALESComment(){
				
				    return "";
				
				}
				public String ANTECEDENTES_PERINATALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ANTECEDENTES_PERINATALESOriginalDbColumnName(){
				
					return "ANTECEDENTES_PERINATALES";
				
				}

				
			    public String PESO_KG;

				public String getPESO_KG () {
					return this.PESO_KG;
				}

				public Boolean PESO_KGIsNullable(){
				    return true;
				}
				public Boolean PESO_KGIsKey(){
				    return false;
				}
				public Integer PESO_KGLength(){
				    return 4;
				}
				public Integer PESO_KGPrecision(){
				    return 0;
				}
				public String PESO_KGDefault(){
				
					return null;
				
				}
				public String PESO_KGComment(){
				
				    return "";
				
				}
				public String PESO_KGPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PESO_KGOriginalDbColumnName(){
				
					return "PESO_KG";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 5;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String CONTROL_CYD;

				public String getCONTROL_CYD () {
					return this.CONTROL_CYD;
				}

				public Boolean CONTROL_CYDIsNullable(){
				    return true;
				}
				public Boolean CONTROL_CYDIsKey(){
				    return false;
				}
				public Integer CONTROL_CYDLength(){
				    return 1;
				}
				public Integer CONTROL_CYDPrecision(){
				    return 0;
				}
				public String CONTROL_CYDDefault(){
				
					return null;
				
				}
				public String CONTROL_CYDComment(){
				
				    return "";
				
				}
				public String CONTROL_CYDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTROL_CYDOriginalDbColumnName(){
				
					return "CONTROL_CYD";
				
				}

				
			    public String IMC;

				public String getIMC () {
					return this.IMC;
				}

				public Boolean IMCIsNullable(){
				    return true;
				}
				public Boolean IMCIsKey(){
				    return false;
				}
				public Integer IMCLength(){
				    return 7;
				}
				public Integer IMCPrecision(){
				    return 0;
				}
				public String IMCDefault(){
				
					return null;
				
				}
				public String IMCComment(){
				
				    return "";
				
				}
				public String IMCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String IMCOriginalDbColumnName(){
				
					return "IMC";
				
				}

				
			    public String ESTADO_NUTRICION;

				public String getESTADO_NUTRICION () {
					return this.ESTADO_NUTRICION;
				}

				public Boolean ESTADO_NUTRICIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_NUTRICIONIsKey(){
				    return false;
				}
				public Integer ESTADO_NUTRICIONLength(){
				    return 13;
				}
				public Integer ESTADO_NUTRICIONPrecision(){
				    return 0;
				}
				public String ESTADO_NUTRICIONDefault(){
				
					return null;
				
				}
				public String ESTADO_NUTRICIONComment(){
				
				    return "";
				
				}
				public String ESTADO_NUTRICIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESTADO_NUTRICIONOriginalDbColumnName(){
				
					return "ESTADO_NUTRICION";
				
				}

				
			    public String VALORACION_DESARROLLO;

				public String getVALORACION_DESARROLLO () {
					return this.VALORACION_DESARROLLO;
				}

				public Boolean VALORACION_DESARROLLOIsNullable(){
				    return true;
				}
				public Boolean VALORACION_DESARROLLOIsKey(){
				    return false;
				}
				public Integer VALORACION_DESARROLLOLength(){
				    return 1;
				}
				public Integer VALORACION_DESARROLLOPrecision(){
				    return 0;
				}
				public String VALORACION_DESARROLLODefault(){
				
					return null;
				
				}
				public String VALORACION_DESARROLLOComment(){
				
				    return "";
				
				}
				public String VALORACION_DESARROLLOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VALORACION_DESARROLLOOriginalDbColumnName(){
				
					return "VALORACION_DESARROLLO";
				
				}

				
			    public String LACTANCIA_6MESES;

				public String getLACTANCIA_6MESES () {
					return this.LACTANCIA_6MESES;
				}

				public Boolean LACTANCIA_6MESESIsNullable(){
				    return true;
				}
				public Boolean LACTANCIA_6MESESIsKey(){
				    return false;
				}
				public Integer LACTANCIA_6MESESLength(){
				    return 1;
				}
				public Integer LACTANCIA_6MESESPrecision(){
				    return 0;
				}
				public String LACTANCIA_6MESESDefault(){
				
					return null;
				
				}
				public String LACTANCIA_6MESESComment(){
				
				    return "";
				
				}
				public String LACTANCIA_6MESESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String LACTANCIA_6MESESOriginalDbColumnName(){
				
					return "LACTANCIA_6MESES";
				
				}

				
			    public String TOMADO_MED_HIPERTENSION;

				public String getTOMADO_MED_HIPERTENSION () {
					return this.TOMADO_MED_HIPERTENSION;
				}

				public Boolean TOMADO_MED_HIPERTENSIONIsNullable(){
				    return true;
				}
				public Boolean TOMADO_MED_HIPERTENSIONIsKey(){
				    return false;
				}
				public Integer TOMADO_MED_HIPERTENSIONLength(){
				    return 4;
				}
				public Integer TOMADO_MED_HIPERTENSIONPrecision(){
				    return 0;
				}
				public String TOMADO_MED_HIPERTENSIONDefault(){
				
					return null;
				
				}
				public String TOMADO_MED_HIPERTENSIONComment(){
				
				    return "";
				
				}
				public String TOMADO_MED_HIPERTENSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TOMADO_MED_HIPERTENSIONOriginalDbColumnName(){
				
					return "TOMADO_MED_HIPERTENSION";
				
				}

				
			    public String PERIMETRO_ABD;

				public String getPERIMETRO_ABD () {
					return this.PERIMETRO_ABD;
				}

				public Boolean PERIMETRO_ABDIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_ABDIsKey(){
				    return false;
				}
				public Integer PERIMETRO_ABDLength(){
				    return 4;
				}
				public Integer PERIMETRO_ABDPrecision(){
				    return 0;
				}
				public String PERIMETRO_ABDDefault(){
				
					return null;
				
				}
				public String PERIMETRO_ABDComment(){
				
				    return "";
				
				}
				public String PERIMETRO_ABDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_ABDOriginalDbColumnName(){
				
					return "PERIMETRO_ABD";
				
				}

				
			    public String GLUCOSA_EMBARAZO;

				public String getGLUCOSA_EMBARAZO () {
					return this.GLUCOSA_EMBARAZO;
				}

				public Boolean GLUCOSA_EMBARAZOIsNullable(){
				    return true;
				}
				public Boolean GLUCOSA_EMBARAZOIsKey(){
				    return false;
				}
				public Integer GLUCOSA_EMBARAZOLength(){
				    return 4;
				}
				public Integer GLUCOSA_EMBARAZOPrecision(){
				    return 0;
				}
				public String GLUCOSA_EMBARAZODefault(){
				
					return null;
				
				}
				public String GLUCOSA_EMBARAZOComment(){
				
				    return "";
				
				}
				public String GLUCOSA_EMBARAZOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GLUCOSA_EMBARAZOOriginalDbColumnName(){
				
					return "GLUCOSA_EMBARAZO";
				
				}

				
			    public String CONSUMO_VEGETALES;

				public String getCONSUMO_VEGETALES () {
					return this.CONSUMO_VEGETALES;
				}

				public Boolean CONSUMO_VEGETALESIsNullable(){
				    return true;
				}
				public Boolean CONSUMO_VEGETALESIsKey(){
				    return false;
				}
				public Integer CONSUMO_VEGETALESLength(){
				    return 4;
				}
				public Integer CONSUMO_VEGETALESPrecision(){
				    return 0;
				}
				public String CONSUMO_VEGETALESDefault(){
				
					return null;
				
				}
				public String CONSUMO_VEGETALESComment(){
				
				    return "";
				
				}
				public String CONSUMO_VEGETALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSUMO_VEGETALESOriginalDbColumnName(){
				
					return "CONSUMO_VEGETALES";
				
				}

				
			    public String SEGURIDAD_ALIMENTARIA;

				public String getSEGURIDAD_ALIMENTARIA () {
					return this.SEGURIDAD_ALIMENTARIA;
				}

				public Boolean SEGURIDAD_ALIMENTARIAIsNullable(){
				    return true;
				}
				public Boolean SEGURIDAD_ALIMENTARIAIsKey(){
				    return false;
				}
				public Integer SEGURIDAD_ALIMENTARIALength(){
				    return 1;
				}
				public Integer SEGURIDAD_ALIMENTARIAPrecision(){
				    return 0;
				}
				public String SEGURIDAD_ALIMENTARIADefault(){
				
					return null;
				
				}
				public String SEGURIDAD_ALIMENTARIAComment(){
				
				    return "";
				
				}
				public String SEGURIDAD_ALIMENTARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEGURIDAD_ALIMENTARIAOriginalDbColumnName(){
				
					return "SEGURIDAD_ALIMENTARIA";
				
				}

				
			    public String DESPARACITADO;

				public String getDESPARACITADO () {
					return this.DESPARACITADO;
				}

				public Boolean DESPARACITADOIsNullable(){
				    return true;
				}
				public Boolean DESPARACITADOIsKey(){
				    return false;
				}
				public Integer DESPARACITADOLength(){
				    return 1;
				}
				public Integer DESPARACITADOPrecision(){
				    return 0;
				}
				public String DESPARACITADODefault(){
				
					return null;
				
				}
				public String DESPARACITADOComment(){
				
				    return "";
				
				}
				public String DESPARACITADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DESPARACITADOOriginalDbColumnName(){
				
					return "DESPARACITADO";
				
				}

				
			    public String FECHA_DESPARACITADO;

				public String getFECHA_DESPARACITADO () {
					return this.FECHA_DESPARACITADO;
				}

				public Boolean FECHA_DESPARACITADOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DESPARACITADOIsKey(){
				    return false;
				}
				public Integer FECHA_DESPARACITADOLength(){
				    return 1;
				}
				public Integer FECHA_DESPARACITADOPrecision(){
				    return 0;
				}
				public String FECHA_DESPARACITADODefault(){
				
					return null;
				
				}
				public String FECHA_DESPARACITADOComment(){
				
				    return "";
				
				}
				public String FECHA_DESPARACITADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DESPARACITADOOriginalDbColumnName(){
				
					return "FECHA_DESPARACITADO";
				
				}

				
			    public String PROGRAMAS_INSCRITO;

				public String getPROGRAMAS_INSCRITO () {
					return this.PROGRAMAS_INSCRITO;
				}

				public Boolean PROGRAMAS_INSCRITOIsNullable(){
				    return true;
				}
				public Boolean PROGRAMAS_INSCRITOIsKey(){
				    return false;
				}
				public Integer PROGRAMAS_INSCRITOLength(){
				    return 76;
				}
				public Integer PROGRAMAS_INSCRITOPrecision(){
				    return 0;
				}
				public String PROGRAMAS_INSCRITODefault(){
				
					return null;
				
				}
				public String PROGRAMAS_INSCRITOComment(){
				
				    return "";
				
				}
				public String PROGRAMAS_INSCRITOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROGRAMAS_INSCRITOOriginalDbColumnName(){
				
					return "PROGRAMAS_INSCRITO";
				
				}

				
			    public String TRANSTORNO_ALIMENTACION;

				public String getTRANSTORNO_ALIMENTACION () {
					return this.TRANSTORNO_ALIMENTACION;
				}

				public Boolean TRANSTORNO_ALIMENTACIONIsNullable(){
				    return true;
				}
				public Boolean TRANSTORNO_ALIMENTACIONIsKey(){
				    return false;
				}
				public Integer TRANSTORNO_ALIMENTACIONLength(){
				    return 4;
				}
				public Integer TRANSTORNO_ALIMENTACIONPrecision(){
				    return 0;
				}
				public String TRANSTORNO_ALIMENTACIONDefault(){
				
					return null;
				
				}
				public String TRANSTORNO_ALIMENTACIONComment(){
				
				    return "";
				
				}
				public String TRANSTORNO_ALIMENTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRANSTORNO_ALIMENTACIONOriginalDbColumnName(){
				
					return "TRANSTORNO_ALIMENTACION";
				
				}

				
			    public String MORB_CRONICA;

				public String getMORB_CRONICA () {
					return this.MORB_CRONICA;
				}

				public Boolean MORB_CRONICAIsNullable(){
				    return true;
				}
				public Boolean MORB_CRONICAIsKey(){
				    return false;
				}
				public Integer MORB_CRONICALength(){
				    return 39;
				}
				public Integer MORB_CRONICAPrecision(){
				    return 0;
				}
				public String MORB_CRONICADefault(){
				
					return null;
				
				}
				public String MORB_CRONICAComment(){
				
				    return "";
				
				}
				public String MORB_CRONICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORB_CRONICAOriginalDbColumnName(){
				
					return "MORB_CRONICA";
				
				}

				
			    public String PERIMETRO_PANTORRILLA;

				public String getPERIMETRO_PANTORRILLA () {
					return this.PERIMETRO_PANTORRILLA;
				}

				public Boolean PERIMETRO_PANTORRILLAIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_PANTORRILLAIsKey(){
				    return false;
				}
				public Integer PERIMETRO_PANTORRILLALength(){
				    return 4;
				}
				public Integer PERIMETRO_PANTORRILLAPrecision(){
				    return 0;
				}
				public String PERIMETRO_PANTORRILLADefault(){
				
					return null;
				
				}
				public String PERIMETRO_PANTORRILLAComment(){
				
				    return "";
				
				}
				public String PERIMETRO_PANTORRILLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_PANTORRILLAOriginalDbColumnName(){
				
					return "PERIMETRO_PANTORRILLA";
				
				}

				
			    public String MORBILIDAD_AGUDA;

				public String getMORBILIDAD_AGUDA () {
					return this.MORBILIDAD_AGUDA;
				}

				public Boolean MORBILIDAD_AGUDAIsNullable(){
				    return true;
				}
				public Boolean MORBILIDAD_AGUDAIsKey(){
				    return false;
				}
				public Integer MORBILIDAD_AGUDALength(){
				    return 9;
				}
				public Integer MORBILIDAD_AGUDAPrecision(){
				    return 0;
				}
				public String MORBILIDAD_AGUDADefault(){
				
					return null;
				
				}
				public String MORBILIDAD_AGUDAComment(){
				
				    return "";
				
				}
				public String MORBILIDAD_AGUDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORBILIDAD_AGUDAOriginalDbColumnName(){
				
					return "MORBILIDAD_AGUDA";
				
				}

				
			    public String BUSCA_AYUDA;

				public String getBUSCA_AYUDA () {
					return this.BUSCA_AYUDA;
				}

				public Boolean BUSCA_AYUDAIsNullable(){
				    return true;
				}
				public Boolean BUSCA_AYUDAIsKey(){
				    return false;
				}
				public Integer BUSCA_AYUDALength(){
				    return 13;
				}
				public Integer BUSCA_AYUDAPrecision(){
				    return 0;
				}
				public String BUSCA_AYUDADefault(){
				
					return null;
				
				}
				public String BUSCA_AYUDAComment(){
				
				    return "";
				
				}
				public String BUSCA_AYUDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BUSCA_AYUDAOriginalDbColumnName(){
				
					return "BUSCA_AYUDA";
				
				}

				
			    public String PORQUE;

				public String getPORQUE () {
					return this.PORQUE;
				}

				public Boolean PORQUEIsNullable(){
				    return true;
				}
				public Boolean PORQUEIsKey(){
				    return false;
				}
				public Integer PORQUELength(){
				    return 6;
				}
				public Integer PORQUEPrecision(){
				    return 0;
				}
				public String PORQUEDefault(){
				
					return null;
				
				}
				public String PORQUEComment(){
				
				    return "";
				
				}
				public String PORQUEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PORQUEOriginalDbColumnName(){
				
					return "PORQUE";
				
				}

				
			    public String RECIBE_MANEJO;

				public String getRECIBE_MANEJO () {
					return this.RECIBE_MANEJO;
				}

				public Boolean RECIBE_MANEJOIsNullable(){
				    return true;
				}
				public Boolean RECIBE_MANEJOIsKey(){
				    return false;
				}
				public Integer RECIBE_MANEJOLength(){
				    return 4;
				}
				public Integer RECIBE_MANEJOPrecision(){
				    return 0;
				}
				public String RECIBE_MANEJODefault(){
				
					return null;
				
				}
				public String RECIBE_MANEJOComment(){
				
				    return "";
				
				}
				public String RECIBE_MANEJOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBE_MANEJOOriginalDbColumnName(){
				
					return "RECIBE_MANEJO";
				
				}

				
			    public String QUIEN_FORMULA;

				public String getQUIEN_FORMULA () {
					return this.QUIEN_FORMULA;
				}

				public Boolean QUIEN_FORMULAIsNullable(){
				    return true;
				}
				public Boolean QUIEN_FORMULAIsKey(){
				    return false;
				}
				public Integer QUIEN_FORMULALength(){
				    return 1;
				}
				public Integer QUIEN_FORMULAPrecision(){
				    return 0;
				}
				public String QUIEN_FORMULADefault(){
				
					return null;
				
				}
				public String QUIEN_FORMULAComment(){
				
				    return "";
				
				}
				public String QUIEN_FORMULAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_FORMULAOriginalDbColumnName(){
				
					return "QUIEN_FORMULA";
				
				}

				
			    public String CONSULTA_SIQUIATRIA;

				public String getCONSULTA_SIQUIATRIA () {
					return this.CONSULTA_SIQUIATRIA;
				}

				public Boolean CONSULTA_SIQUIATRIAIsNullable(){
				    return true;
				}
				public Boolean CONSULTA_SIQUIATRIAIsKey(){
				    return false;
				}
				public Integer CONSULTA_SIQUIATRIALength(){
				    return 4;
				}
				public Integer CONSULTA_SIQUIATRIAPrecision(){
				    return 0;
				}
				public String CONSULTA_SIQUIATRIADefault(){
				
					return null;
				
				}
				public String CONSULTA_SIQUIATRIAComment(){
				
				    return "";
				
				}
				public String CONSULTA_SIQUIATRIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSULTA_SIQUIATRIAOriginalDbColumnName(){
				
					return "CONSULTA_SIQUIATRIA";
				
				}

				
			    public String FORMULADO_MED_PSIQUIATRICOS;

				public String getFORMULADO_MED_PSIQUIATRICOS () {
					return this.FORMULADO_MED_PSIQUIATRICOS;
				}

				public Boolean FORMULADO_MED_PSIQUIATRICOSIsNullable(){
				    return true;
				}
				public Boolean FORMULADO_MED_PSIQUIATRICOSIsKey(){
				    return false;
				}
				public Integer FORMULADO_MED_PSIQUIATRICOSLength(){
				    return 4;
				}
				public Integer FORMULADO_MED_PSIQUIATRICOSPrecision(){
				    return 0;
				}
				public String FORMULADO_MED_PSIQUIATRICOSDefault(){
				
					return null;
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSComment(){
				
				    return "";
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSOriginalDbColumnName(){
				
					return "FORMULADO_MED_PSIQUIATRICOS";
				
				}

				
			    public String FACTORES_RIESGO;

				public String getFACTORES_RIESGO () {
					return this.FACTORES_RIESGO;
				}

				public Boolean FACTORES_RIESGOIsNullable(){
				    return true;
				}
				public Boolean FACTORES_RIESGOIsKey(){
				    return false;
				}
				public Integer FACTORES_RIESGOLength(){
				    return 37;
				}
				public Integer FACTORES_RIESGOPrecision(){
				    return 0;
				}
				public String FACTORES_RIESGODefault(){
				
					return null;
				
				}
				public String FACTORES_RIESGOComment(){
				
				    return "";
				
				}
				public String FACTORES_RIESGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FACTORES_RIESGOOriginalDbColumnName(){
				
					return "FACTORES_RIESGO";
				
				}

				
			    public String SITUACION_ESTRES;

				public String getSITUACION_ESTRES () {
					return this.SITUACION_ESTRES;
				}

				public Boolean SITUACION_ESTRESIsNullable(){
				    return true;
				}
				public Boolean SITUACION_ESTRESIsKey(){
				    return false;
				}
				public Integer SITUACION_ESTRESLength(){
				    return 32;
				}
				public Integer SITUACION_ESTRESPrecision(){
				    return 0;
				}
				public String SITUACION_ESTRESDefault(){
				
					return null;
				
				}
				public String SITUACION_ESTRESComment(){
				
				    return "";
				
				}
				public String SITUACION_ESTRESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SITUACION_ESTRESOriginalDbColumnName(){
				
					return "SITUACION_ESTRES";
				
				}

				
			    public String VIOLENCIA;

				public String getVIOLENCIA () {
					return this.VIOLENCIA;
				}

				public Boolean VIOLENCIAIsNullable(){
				    return true;
				}
				public Boolean VIOLENCIAIsKey(){
				    return false;
				}
				public Integer VIOLENCIALength(){
				    return 48;
				}
				public Integer VIOLENCIAPrecision(){
				    return 0;
				}
				public String VIOLENCIADefault(){
				
					return null;
				
				}
				public String VIOLENCIAComment(){
				
				    return "";
				
				}
				public String VIOLENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIOLENCIAOriginalDbColumnName(){
				
					return "VIOLENCIA";
				
				}

				
			    public String ANT_CONSUMO;

				public String getANT_CONSUMO () {
					return this.ANT_CONSUMO;
				}

				public Boolean ANT_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean ANT_CONSUMOIsKey(){
				    return false;
				}
				public Integer ANT_CONSUMOLength(){
				    return 4;
				}
				public Integer ANT_CONSUMOPrecision(){
				    return 0;
				}
				public String ANT_CONSUMODefault(){
				
					return null;
				
				}
				public String ANT_CONSUMOComment(){
				
				    return "";
				
				}
				public String ANT_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ANT_CONSUMOOriginalDbColumnName(){
				
					return "ANT_CONSUMO";
				
				}

				
			    public String CUAL_ANT_CONSUMO;

				public String getCUAL_ANT_CONSUMO () {
					return this.CUAL_ANT_CONSUMO;
				}

				public Boolean CUAL_ANT_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CUAL_ANT_CONSUMOIsKey(){
				    return false;
				}
				public Integer CUAL_ANT_CONSUMOLength(){
				    return 1;
				}
				public Integer CUAL_ANT_CONSUMOPrecision(){
				    return 0;
				}
				public String CUAL_ANT_CONSUMODefault(){
				
					return null;
				
				}
				public String CUAL_ANT_CONSUMOComment(){
				
				    return "";
				
				}
				public String CUAL_ANT_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUAL_ANT_CONSUMOOriginalDbColumnName(){
				
					return "CUAL_ANT_CONSUMO";
				
				}

				
			    public String CONTINUA_CONSUMO;

				public String getCONTINUA_CONSUMO () {
					return this.CONTINUA_CONSUMO;
				}

				public Boolean CONTINUA_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CONTINUA_CONSUMOIsKey(){
				    return false;
				}
				public Integer CONTINUA_CONSUMOLength(){
				    return 1;
				}
				public Integer CONTINUA_CONSUMOPrecision(){
				    return 0;
				}
				public String CONTINUA_CONSUMODefault(){
				
					return null;
				
				}
				public String CONTINUA_CONSUMOComment(){
				
				    return "";
				
				}
				public String CONTINUA_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTINUA_CONSUMOOriginalDbColumnName(){
				
					return "CONTINUA_CONSUMO";
				
				}

				
			    public String CUAL_CONTINUA_CONSUMO;

				public String getCUAL_CONTINUA_CONSUMO () {
					return this.CUAL_CONTINUA_CONSUMO;
				}

				public Boolean CUAL_CONTINUA_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CUAL_CONTINUA_CONSUMOIsKey(){
				    return false;
				}
				public Integer CUAL_CONTINUA_CONSUMOLength(){
				    return 1;
				}
				public Integer CUAL_CONTINUA_CONSUMOPrecision(){
				    return 0;
				}
				public String CUAL_CONTINUA_CONSUMODefault(){
				
					return null;
				
				}
				public String CUAL_CONTINUA_CONSUMOComment(){
				
				    return "";
				
				}
				public String CUAL_CONTINUA_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUAL_CONTINUA_CONSUMOOriginalDbColumnName(){
				
					return "CUAL_CONTINUA_CONSUMO";
				
				}

				
			    public String BCG;

				public String getBCG () {
					return this.BCG;
				}

				public Boolean BCGIsNullable(){
				    return true;
				}
				public Boolean BCGIsKey(){
				    return false;
				}
				public Integer BCGLength(){
				    return 1;
				}
				public Integer BCGPrecision(){
				    return 0;
				}
				public String BCGDefault(){
				
					return null;
				
				}
				public String BCGComment(){
				
				    return "";
				
				}
				public String BCGPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BCGOriginalDbColumnName(){
				
					return "BCG";
				
				}

				
			    public String HEPATITIS_B;

				public String getHEPATITIS_B () {
					return this.HEPATITIS_B;
				}

				public Boolean HEPATITIS_BIsNullable(){
				    return true;
				}
				public Boolean HEPATITIS_BIsKey(){
				    return false;
				}
				public Integer HEPATITIS_BLength(){
				    return 1;
				}
				public Integer HEPATITIS_BPrecision(){
				    return 0;
				}
				public String HEPATITIS_BDefault(){
				
					return null;
				
				}
				public String HEPATITIS_BComment(){
				
				    return "";
				
				}
				public String HEPATITIS_BPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEPATITIS_BOriginalDbColumnName(){
				
					return "HEPATITIS_B";
				
				}

				
			    public String POLIO;

				public String getPOLIO () {
					return this.POLIO;
				}

				public Boolean POLIOIsNullable(){
				    return true;
				}
				public Boolean POLIOIsKey(){
				    return false;
				}
				public Integer POLIOLength(){
				    return 1;
				}
				public Integer POLIOPrecision(){
				    return 0;
				}
				public String POLIODefault(){
				
					return null;
				
				}
				public String POLIOComment(){
				
				    return "";
				
				}
				public String POLIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String POLIOOriginalDbColumnName(){
				
					return "POLIO";
				
				}

				
			    public String HIB;

				public String getHIB () {
					return this.HIB;
				}

				public Boolean HIBIsNullable(){
				    return true;
				}
				public Boolean HIBIsKey(){
				    return false;
				}
				public Integer HIBLength(){
				    return 1;
				}
				public Integer HIBPrecision(){
				    return 0;
				}
				public String HIBDefault(){
				
					return null;
				
				}
				public String HIBComment(){
				
				    return "";
				
				}
				public String HIBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HIBOriginalDbColumnName(){
				
					return "HIB";
				
				}

				
			    public String NEUMOCOCO;

				public String getNEUMOCOCO () {
					return this.NEUMOCOCO;
				}

				public Boolean NEUMOCOCOIsNullable(){
				    return true;
				}
				public Boolean NEUMOCOCOIsKey(){
				    return false;
				}
				public Integer NEUMOCOCOLength(){
				    return 1;
				}
				public Integer NEUMOCOCOPrecision(){
				    return 0;
				}
				public String NEUMOCOCODefault(){
				
					return null;
				
				}
				public String NEUMOCOCOComment(){
				
				    return "";
				
				}
				public String NEUMOCOCOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NEUMOCOCOOriginalDbColumnName(){
				
					return "NEUMOCOCO";
				
				}

				
			    public String ROTAVIRUS;

				public String getROTAVIRUS () {
					return this.ROTAVIRUS;
				}

				public Boolean ROTAVIRUSIsNullable(){
				    return true;
				}
				public Boolean ROTAVIRUSIsKey(){
				    return false;
				}
				public Integer ROTAVIRUSLength(){
				    return 1;
				}
				public Integer ROTAVIRUSPrecision(){
				    return 0;
				}
				public String ROTAVIRUSDefault(){
				
					return null;
				
				}
				public String ROTAVIRUSComment(){
				
				    return "";
				
				}
				public String ROTAVIRUSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ROTAVIRUSOriginalDbColumnName(){
				
					return "ROTAVIRUS";
				
				}

				
			    public String INFLUENCIA_EST;

				public String getINFLUENCIA_EST () {
					return this.INFLUENCIA_EST;
				}

				public Boolean INFLUENCIA_ESTIsNullable(){
				    return true;
				}
				public Boolean INFLUENCIA_ESTIsKey(){
				    return false;
				}
				public Integer INFLUENCIA_ESTLength(){
				    return 1;
				}
				public Integer INFLUENCIA_ESTPrecision(){
				    return 0;
				}
				public String INFLUENCIA_ESTDefault(){
				
					return null;
				
				}
				public String INFLUENCIA_ESTComment(){
				
				    return "";
				
				}
				public String INFLUENCIA_ESTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String INFLUENCIA_ESTOriginalDbColumnName(){
				
					return "INFLUENCIA_EST";
				
				}

				
			    public String SRP;

				public String getSRP () {
					return this.SRP;
				}

				public Boolean SRPIsNullable(){
				    return true;
				}
				public Boolean SRPIsKey(){
				    return false;
				}
				public Integer SRPLength(){
				    return 1;
				}
				public Integer SRPPrecision(){
				    return 0;
				}
				public String SRPDefault(){
				
					return null;
				
				}
				public String SRPComment(){
				
				    return "";
				
				}
				public String SRPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SRPOriginalDbColumnName(){
				
					return "SRP";
				
				}

				
			    public String VARICELA;

				public String getVARICELA () {
					return this.VARICELA;
				}

				public Boolean VARICELAIsNullable(){
				    return true;
				}
				public Boolean VARICELAIsKey(){
				    return false;
				}
				public Integer VARICELALength(){
				    return 1;
				}
				public Integer VARICELAPrecision(){
				    return 0;
				}
				public String VARICELADefault(){
				
					return null;
				
				}
				public String VARICELAComment(){
				
				    return "";
				
				}
				public String VARICELAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VARICELAOriginalDbColumnName(){
				
					return "VARICELA";
				
				}

				
			    public String HEPATITIS_A;

				public String getHEPATITIS_A () {
					return this.HEPATITIS_A;
				}

				public Boolean HEPATITIS_AIsNullable(){
				    return true;
				}
				public Boolean HEPATITIS_AIsKey(){
				    return false;
				}
				public Integer HEPATITIS_ALength(){
				    return 1;
				}
				public Integer HEPATITIS_APrecision(){
				    return 0;
				}
				public String HEPATITIS_ADefault(){
				
					return null;
				
				}
				public String HEPATITIS_AComment(){
				
				    return "";
				
				}
				public String HEPATITIS_APattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEPATITIS_AOriginalDbColumnName(){
				
					return "HEPATITIS_A";
				
				}

				
			    public String FA;

				public String getFA () {
					return this.FA;
				}

				public Boolean FAIsNullable(){
				    return true;
				}
				public Boolean FAIsKey(){
				    return false;
				}
				public Integer FALength(){
				    return 1;
				}
				public Integer FAPrecision(){
				    return 0;
				}
				public String FADefault(){
				
					return null;
				
				}
				public String FAComment(){
				
				    return "";
				
				}
				public String FAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FAOriginalDbColumnName(){
				
					return "FA";
				
				}

				
			    public String DPT;

				public String getDPT () {
					return this.DPT;
				}

				public Boolean DPTIsNullable(){
				    return true;
				}
				public Boolean DPTIsKey(){
				    return false;
				}
				public Integer DPTLength(){
				    return 1;
				}
				public Integer DPTPrecision(){
				    return 0;
				}
				public String DPTDefault(){
				
					return null;
				
				}
				public String DPTComment(){
				
				    return "";
				
				}
				public String DPTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DPTOriginalDbColumnName(){
				
					return "DPT";
				
				}

				
			    public String VPH;

				public String getVPH () {
					return this.VPH;
				}

				public Boolean VPHIsNullable(){
				    return true;
				}
				public Boolean VPHIsKey(){
				    return false;
				}
				public Integer VPHLength(){
				    return 1;
				}
				public Integer VPHPrecision(){
				    return 0;
				}
				public String VPHDefault(){
				
					return null;
				
				}
				public String VPHComment(){
				
				    return "";
				
				}
				public String VPHPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VPHOriginalDbColumnName(){
				
					return "VPH";
				
				}

				
			    public String TD;

				public String getTD () {
					return this.TD;
				}

				public Boolean TDIsNullable(){
				    return true;
				}
				public Boolean TDIsKey(){
				    return false;
				}
				public Integer TDLength(){
				    return 1;
				}
				public Integer TDPrecision(){
				    return 0;
				}
				public String TDDefault(){
				
					return null;
				
				}
				public String TDComment(){
				
				    return "";
				
				}
				public String TDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TDOriginalDbColumnName(){
				
					return "TD";
				
				}

				
			    public String MAMOGRAFIA;

				public String getMAMOGRAFIA () {
					return this.MAMOGRAFIA;
				}

				public Boolean MAMOGRAFIAIsNullable(){
				    return true;
				}
				public Boolean MAMOGRAFIAIsKey(){
				    return false;
				}
				public Integer MAMOGRAFIALength(){
				    return 1;
				}
				public Integer MAMOGRAFIAPrecision(){
				    return 0;
				}
				public String MAMOGRAFIADefault(){
				
					return null;
				
				}
				public String MAMOGRAFIAComment(){
				
				    return "";
				
				}
				public String MAMOGRAFIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MAMOGRAFIAOriginalDbColumnName(){
				
					return "MAMOGRAFIA";
				
				}

				
			    public String PROTESIS_DENTAL;

				public String getPROTESIS_DENTAL () {
					return this.PROTESIS_DENTAL;
				}

				public Boolean PROTESIS_DENTALIsNullable(){
				    return true;
				}
				public Boolean PROTESIS_DENTALIsKey(){
				    return false;
				}
				public Integer PROTESIS_DENTALLength(){
				    return 1;
				}
				public Integer PROTESIS_DENTALPrecision(){
				    return 0;
				}
				public String PROTESIS_DENTALDefault(){
				
					return null;
				
				}
				public String PROTESIS_DENTALComment(){
				
				    return "";
				
				}
				public String PROTESIS_DENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROTESIS_DENTALOriginalDbColumnName(){
				
					return "PROTESIS_DENTAL";
				
				}

				
			    public String RECIBIO_MEDICAMENTOS;

				public String getRECIBIO_MEDICAMENTOS () {
					return this.RECIBIO_MEDICAMENTOS;
				}

				public Boolean RECIBIO_MEDICAMENTOSIsNullable(){
				    return true;
				}
				public Boolean RECIBIO_MEDICAMENTOSIsKey(){
				    return false;
				}
				public Integer RECIBIO_MEDICAMENTOSLength(){
				    return 1;
				}
				public Integer RECIBIO_MEDICAMENTOSPrecision(){
				    return 0;
				}
				public String RECIBIO_MEDICAMENTOSDefault(){
				
					return null;
				
				}
				public String RECIBIO_MEDICAMENTOSComment(){
				
				    return "";
				
				}
				public String RECIBIO_MEDICAMENTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBIO_MEDICAMENTOSOriginalDbColumnName(){
				
					return "RECIBIO_MEDICAMENTOS";
				
				}

				
			    public String VALIDADO;

				public String getVALIDADO () {
					return this.VALIDADO;
				}

				public Boolean VALIDADOIsNullable(){
				    return true;
				}
				public Boolean VALIDADOIsKey(){
				    return false;
				}
				public Integer VALIDADOLength(){
				    return 8;
				}
				public Integer VALIDADOPrecision(){
				    return 0;
				}
				public String VALIDADODefault(){
				
					return null;
				
				}
				public String VALIDADOComment(){
				
				    return "";
				
				}
				public String VALIDADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VALIDADOOriginalDbColumnName(){
				
					return "VALIDADO";
				
				}

				
			    public String ECOGRAFIA_MAMARIA;

				public String getECOGRAFIA_MAMARIA () {
					return this.ECOGRAFIA_MAMARIA;
				}

				public Boolean ECOGRAFIA_MAMARIAIsNullable(){
				    return true;
				}
				public Boolean ECOGRAFIA_MAMARIAIsKey(){
				    return false;
				}
				public Integer ECOGRAFIA_MAMARIALength(){
				    return 1;
				}
				public Integer ECOGRAFIA_MAMARIAPrecision(){
				    return 0;
				}
				public String ECOGRAFIA_MAMARIADefault(){
				
					return null;
				
				}
				public String ECOGRAFIA_MAMARIAComment(){
				
				    return "";
				
				}
				public String ECOGRAFIA_MAMARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ECOGRAFIA_MAMARIAOriginalDbColumnName(){
				
					return "ECOGRAFIA_MAMARIA";
				
				}

				
			    public String INF_SUM_USUARIO;

				public String getINF_SUM_USUARIO () {
					return this.INF_SUM_USUARIO;
				}

				public Boolean INF_SUM_USUARIOIsNullable(){
				    return true;
				}
				public Boolean INF_SUM_USUARIOIsKey(){
				    return false;
				}
				public Integer INF_SUM_USUARIOLength(){
				    return null;
				}
				public Integer INF_SUM_USUARIOPrecision(){
				    return null;
				}
				public String INF_SUM_USUARIODefault(){
				
					return null;
				
				}
				public String INF_SUM_USUARIOComment(){
				
				    return "";
				
				}
				public String INF_SUM_USUARIOPattern(){
				
					return "";
				
				}
				public String INF_SUM_USUARIOOriginalDbColumnName(){
				
					return "INF_SUM_USUARIO";
				
				}

				
			    public String NIVEL_INGRESO;

				public String getNIVEL_INGRESO () {
					return this.NIVEL_INGRESO;
				}

				public Boolean NIVEL_INGRESOIsNullable(){
				    return true;
				}
				public Boolean NIVEL_INGRESOIsKey(){
				    return false;
				}
				public Integer NIVEL_INGRESOLength(){
				    return null;
				}
				public Integer NIVEL_INGRESOPrecision(){
				    return null;
				}
				public String NIVEL_INGRESODefault(){
				
					return null;
				
				}
				public String NIVEL_INGRESOComment(){
				
				    return "";
				
				}
				public String NIVEL_INGRESOPattern(){
				
					return "";
				
				}
				public String NIVEL_INGRESOOriginalDbColumnName(){
				
					return "NIVEL_INGRESO";
				
				}

				
			    public String DIFTERIA2;

				public String getDIFTERIA2 () {
					return this.DIFTERIA2;
				}

				public Boolean DIFTERIA2IsNullable(){
				    return true;
				}
				public Boolean DIFTERIA2IsKey(){
				    return false;
				}
				public Integer DIFTERIA2Length(){
				    return null;
				}
				public Integer DIFTERIA2Precision(){
				    return null;
				}
				public String DIFTERIA2Default(){
				
					return null;
				
				}
				public String DIFTERIA2Comment(){
				
				    return "";
				
				}
				public String DIFTERIA2Pattern(){
				
					return "";
				
				}
				public String DIFTERIA2OriginalDbColumnName(){
				
					return "DIFTERIA2";
				
				}

				
			    public String DIFTERIA3;

				public String getDIFTERIA3 () {
					return this.DIFTERIA3;
				}

				public Boolean DIFTERIA3IsNullable(){
				    return true;
				}
				public Boolean DIFTERIA3IsKey(){
				    return false;
				}
				public Integer DIFTERIA3Length(){
				    return null;
				}
				public Integer DIFTERIA3Precision(){
				    return null;
				}
				public String DIFTERIA3Default(){
				
					return null;
				
				}
				public String DIFTERIA3Comment(){
				
				    return "";
				
				}
				public String DIFTERIA3Pattern(){
				
					return "";
				
				}
				public String DIFTERIA3OriginalDbColumnName(){
				
					return "DIFTERIA3";
				
				}

				
			    public String POLIO2;

				public String getPOLIO2 () {
					return this.POLIO2;
				}

				public Boolean POLIO2IsNullable(){
				    return true;
				}
				public Boolean POLIO2IsKey(){
				    return false;
				}
				public Integer POLIO2Length(){
				    return null;
				}
				public Integer POLIO2Precision(){
				    return null;
				}
				public String POLIO2Default(){
				
					return null;
				
				}
				public String POLIO2Comment(){
				
				    return "";
				
				}
				public String POLIO2Pattern(){
				
					return "";
				
				}
				public String POLIO2OriginalDbColumnName(){
				
					return "POLIO2";
				
				}

				
			    public String POLIO3;

				public String getPOLIO3 () {
					return this.POLIO3;
				}

				public Boolean POLIO3IsNullable(){
				    return true;
				}
				public Boolean POLIO3IsKey(){
				    return false;
				}
				public Integer POLIO3Length(){
				    return null;
				}
				public Integer POLIO3Precision(){
				    return null;
				}
				public String POLIO3Default(){
				
					return null;
				
				}
				public String POLIO3Comment(){
				
				    return "";
				
				}
				public String POLIO3Pattern(){
				
					return "";
				
				}
				public String POLIO3OriginalDbColumnName(){
				
					return "POLIO3";
				
				}

				
			    public String SARAMPION2;

				public String getSARAMPION2 () {
					return this.SARAMPION2;
				}

				public Boolean SARAMPION2IsNullable(){
				    return true;
				}
				public Boolean SARAMPION2IsKey(){
				    return false;
				}
				public Integer SARAMPION2Length(){
				    return null;
				}
				public Integer SARAMPION2Precision(){
				    return null;
				}
				public String SARAMPION2Default(){
				
					return null;
				
				}
				public String SARAMPION2Comment(){
				
				    return "";
				
				}
				public String SARAMPION2Pattern(){
				
					return "";
				
				}
				public String SARAMPION2OriginalDbColumnName(){
				
					return "SARAMPION2";
				
				}

				
			    public String INFLUENZA2;

				public String getINFLUENZA2 () {
					return this.INFLUENZA2;
				}

				public Boolean INFLUENZA2IsNullable(){
				    return true;
				}
				public Boolean INFLUENZA2IsKey(){
				    return false;
				}
				public Integer INFLUENZA2Length(){
				    return null;
				}
				public Integer INFLUENZA2Precision(){
				    return null;
				}
				public String INFLUENZA2Default(){
				
					return null;
				
				}
				public String INFLUENZA2Comment(){
				
				    return "";
				
				}
				public String INFLUENZA2Pattern(){
				
					return "";
				
				}
				public String INFLUENZA2OriginalDbColumnName(){
				
					return "INFLUENZA2";
				
				}

				
			    public String VACUNACION_NOPAI;

				public String getVACUNACION_NOPAI () {
					return this.VACUNACION_NOPAI;
				}

				public Boolean VACUNACION_NOPAIIsNullable(){
				    return true;
				}
				public Boolean VACUNACION_NOPAIIsKey(){
				    return false;
				}
				public Integer VACUNACION_NOPAILength(){
				    return null;
				}
				public Integer VACUNACION_NOPAIPrecision(){
				    return null;
				}
				public String VACUNACION_NOPAIDefault(){
				
					return null;
				
				}
				public String VACUNACION_NOPAIComment(){
				
				    return "";
				
				}
				public String VACUNACION_NOPAIPattern(){
				
					return "";
				
				}
				public String VACUNACION_NOPAIOriginalDbColumnName(){
				
					return "VACUNACION_NOPAI";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.PERSONA_ID = dis.readInt();
					
			        this.FICHA_ID = dis.readInt();
					
					this.TREGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.FORMACION = readString(dis);
					
					this.EXPANSION = readString(dis);
					
					this.CONSOLIDACION = readString(dis);
					
					this.APERTURA = readString(dis);
					
					this.POSPARENTAL = readString(dis);
					
					this.DISOLUCION = readString(dis);
					
					this.ESTFAMILIAR = readString(dis);
					
					this.TIPO_VIVIENDA = readString(dis);
					
					this.CUARTOS = readString(dis);
					
					this.UBICACION = readString(dis);
					
					this.BANOS = readString(dis);
					
					this.TENENCIA = readString(dis);
					
					this.TRESPORCUARTO = readString(dis);
					
					this.TIPOHAB = readString(dis);
					
					this.ACT_PRODUCTIVA = readString(dis);
					
					this.MAQUINARIA = readString(dis);
					
					this.EXCRETAS = readString(dis);
					
					this.MEDIOS_COMUNICACION = readString(dis);
					
					this.TIPO_ALUMBRADO = readString(dis);
					
					this.MASCOTAS = readString(dis);
					
					this.MASCOTAS_VAC = readString(dis);
					
					this.DISP_BASURAS = readString(dis);
					
					this.VECTORES = readString(dis);
					
					this.PROB_ACCIDENTE = readString(dis);
					
					this.CONT_AMB = readString(dis);
					
					this.ABAST_AGUA = readString(dis);
					
					this.TRATA_CASA_AGUA = readString(dis);
					
					this.TRATA_AGUA_FUENTE = readString(dis);
					
					this.TIPO_COCINA = readString(dis);
					
					this.HUMO_VIVIENDA = readString(dis);
					
					this.COCINA_CONSTRU_MATERIAL = readString(dis);
					
					this.COCINA_VIVIENDA = readString(dis);
					
					this.COMBUSTIBLE_COCINA = readString(dis);
					
					this.COCINA_DORMITORIO = readString(dis);
					
					this.TIPO_PISOS = readString(dis);
					
					this.TIPO_TECHOS = readString(dis);
					
					this.TIPO_PAREDES = readString(dis);
					
					this.VIVIENDA_2KM = readString(dis);
					
					this.BARRERAS_ACCESOS = readString(dis);
					
					this.DIST_SALUD_CERCANO = readString(dis);
					
					this.MEDIO_TRANSPORTE = readString(dis);
					
					this.VIA_ACCESO = readString(dis);
					
					this.NACIDOS_VIVOS = readString(dis);
					
					this.MORTALIDAD = readString(dis);
					
					this.HIPERTENSION = readString(dis);
					
					this.DIABETES = readString(dis);
					
					this.ENF_CARDIACAS = readString(dis);
					
					this.CANCER = readString(dis);
					
					this.ENF_RENAL = readString(dis);
					
					this.ENF_CONGENITA = readString(dis);
					
					this.MENTALES = readString(dis);
					
					this.AYUDA_FAMI_NECES = readString(dis);
					
					this.AYUDA_FAMI_PROYEC = readString(dis);
					
					this.APOYO_FAMI_SENTIM = readString(dis);
					
					this.DECISIONES_HOGAR = readString(dis);
					
					this.COM_INTRAFAMILIAR = readString(dis);
					
					this.ACT_FAMILIAR = readString(dis);
					
					this.DISFRUTA_ACTIVIDADES = readString(dis);
					
					this.CEPILLADO = readString(dis);
					
					this.NUM_CEPILLADO = readString(dis);
					
					this.CARIES = readString(dis);
					
					this.ODONTOLOGO = readString(dis);
					
					this.FREC_ODONTOLOGO = readString(dis);
					
					this.FULTIMA_ODONTOLOGIA = readString(dis);
					
					this.TOP_FLUOR = readString(dis);
					
					this.SEDA_DENTAL = readString(dis);
					
					this.SELLANTE = readString(dis);
					
					this.PERDIDA_DIENTES = readString(dis);
					
					this.CARNE = readString(dis);
					
					this.ESQUEMA_EDAD = readString(dis);
					
					this.ENF_TROPICAL = readString(dis);
					
					this.ENF_TRANSMISION = readString(dis);
					
					this.TRATAMIENTO_ETS = readString(dis);
					
					this.PROBLEMAS_VISUALES = readString(dis);
					
					this.PROBLEMAS_AUDITIVOS = readString(dis);
					
					this.RENDIMIENTO_ESTUDIOS = readString(dis);
					
					this.ACT_EXTRACURRICULAR = readString(dis);
					
					this.PRESION_SISTOLICA = readString(dis);
					
					this.PRESION_DIASTOLICA = readString(dis);
					
					this.ACT_FISICA = readString(dis);
					
					this.FREC_ACT_FISICA = readString(dis);
					
					this.DURACION_ACT_FISICA = readString(dis);
					
					this.INT_ACT_FISICA = readString(dis);
					
					this.CAIDAS = readString(dis);
					
					this.DISC_FISICA = readString(dis);
					
					this.DISC_MENTAL = readString(dis);
					
					this.EDAD_MESTRUACION = readString(dis);
					
					this.FECHA_REGLA = readString(dis);
					
					this.PARACLINICOS = readString(dis);
					
					this.CITOLOGIA = readString(dis);
					
					this.FECHA_CITOLOGIA = readString(dis);
					
					this.EXAMEN_SENO = readString(dis);
					
					this.PLAN_FAMILIAR = readString(dis);
					
					this.METODO_PLANF = readString(dis);
					
					this.TIEMPO_MET_ANIOS = readString(dis);
					
					this.TIEMPO_MET_MESES = readString(dis);
					
					this.TIEMPO_MET_DIAS = readString(dis);
					
					this.CONTR_PLANF_FAMILIAR = readString(dis);
					
					this.EXAMEN_PROSTATA = readString(dis);
					
					this.PSA = readString(dis);
					
					this.FECHA_EXAMEN = readString(dis);
					
					this.GESTA_CONFIRMADA = readString(dis);
					
					this.GESTA_PLANEADA = readString(dis);
					
					this.CONVIVENCIA_PAREJA = readString(dis);
					
					this.FUR = readString(dis);
					
					this.SEMANAS = readString(dis);
					
					this.FECHA_PARTO = readString(dis);
					
					this.GANANCIA_PESP = readString(dis);
					
					this.CARNE_EMB = readString(dis);
					
					this.CONTROL_PRENATAL = readString(dis);
					
					this.QUIEN_CONTROL = readString(dis);
					
					this.TRIMESTRE_ING_CONTROL = readString(dis);
					
					this.FECHA_CONTROL_INI = readString(dis);
					
					this.VAL_ODONTOLOGIA = readString(dis);
					
					this.VAC_GESTANTE = readString(dis);
					
					this.NUM_GESTACIONES = readString(dis);
					
					this.NUM_PARTOS = readString(dis);
					
					this.NUM_ABORTOS = readString(dis);
					
					this.NUM_CESAREA = readString(dis);
					
					this.NUM_IVE = readString(dis);
					
					this.CAUSA_IVE = readString(dis);
					
					this.EMB_ECTOPICO = readString(dis);
					
					this.NUM_NACIDOS_VIVOS = readString(dis);
					
					this.FECHA_ULT_PARTO = readString(dis);
					
					this.RIESGO_OBSTETRICO = readString(dis);
					
					this.HEMOGLOBINA = readString(dis);
					
					this.SEROLOGIA = readString(dis);
					
					this.VIH = readString(dis);
					
					this.SUPLEMENTACION = readString(dis);
					
					this.PERCENTIL_NUTRICIONAL = readString(dis);
					
					this.TABAQUISMO = readString(dis);
					
					this.NUM_CIGARRILLOS = readString(dis);
					
					this.ALCOHOL = readString(dis);
					
					this.FREC_ALCOHOL = readString(dis);
					
					this.ALT_UTERINA = readString(dis);
					
					this.SEDENTARISMO = readString(dis);
					
					this.PARTO = readString(dis);
					
					this.QUIEN_PARTO = readString(dis);
					
					this.COMPLICACIONES = readString(dis);
					
					this.ATENCION_PARTO = readString(dis);
					
					this.TIEMPO_GESTACION = readString(dis);
					
					this.ATENCION_INSTITUCIONAL = readString(dis);
					
					this.COMPLICACIONES_POSTPARTO = readString(dis);
					
					this.COMPLICACIONES_PARTO = readString(dis);
					
					this.COMPLICACIONES_EMBARAZO = readString(dis);
					
					this.PLANIFICACION = readString(dis);
					
					this.CONSUME_MEDICAMENTO = readString(dis);
					
					this.PESO_NACER = readString(dis);
					
					this.TALLA_NACER = readString(dis);
					
					this.PERIMETRO_CEFALICO = readString(dis);
					
					this.PREMATUREZ = readString(dis);
					
					this.COMPLICACIONES_EMB = readString(dis);
					
					this.RECIBE_MED = readString(dis);
					
					this.REGISTRADO = readString(dis);
					
					this.ANTECEDENTES_PERINATALES = readString(dis);
					
					this.PESO_KG = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.CONTROL_CYD = readString(dis);
					
					this.IMC = readString(dis);
					
					this.ESTADO_NUTRICION = readString(dis);
					
					this.VALORACION_DESARROLLO = readString(dis);
					
					this.LACTANCIA_6MESES = readString(dis);
					
					this.TOMADO_MED_HIPERTENSION = readString(dis);
					
					this.PERIMETRO_ABD = readString(dis);
					
					this.GLUCOSA_EMBARAZO = readString(dis);
					
					this.CONSUMO_VEGETALES = readString(dis);
					
					this.SEGURIDAD_ALIMENTARIA = readString(dis);
					
					this.DESPARACITADO = readString(dis);
					
					this.FECHA_DESPARACITADO = readString(dis);
					
					this.PROGRAMAS_INSCRITO = readString(dis);
					
					this.TRANSTORNO_ALIMENTACION = readString(dis);
					
					this.MORB_CRONICA = readString(dis);
					
					this.PERIMETRO_PANTORRILLA = readString(dis);
					
					this.MORBILIDAD_AGUDA = readString(dis);
					
					this.BUSCA_AYUDA = readString(dis);
					
					this.PORQUE = readString(dis);
					
					this.RECIBE_MANEJO = readString(dis);
					
					this.QUIEN_FORMULA = readString(dis);
					
					this.CONSULTA_SIQUIATRIA = readString(dis);
					
					this.FORMULADO_MED_PSIQUIATRICOS = readString(dis);
					
					this.FACTORES_RIESGO = readString(dis);
					
					this.SITUACION_ESTRES = readString(dis);
					
					this.VIOLENCIA = readString(dis);
					
					this.ANT_CONSUMO = readString(dis);
					
					this.CUAL_ANT_CONSUMO = readString(dis);
					
					this.CONTINUA_CONSUMO = readString(dis);
					
					this.CUAL_CONTINUA_CONSUMO = readString(dis);
					
					this.BCG = readString(dis);
					
					this.HEPATITIS_B = readString(dis);
					
					this.POLIO = readString(dis);
					
					this.HIB = readString(dis);
					
					this.NEUMOCOCO = readString(dis);
					
					this.ROTAVIRUS = readString(dis);
					
					this.INFLUENCIA_EST = readString(dis);
					
					this.SRP = readString(dis);
					
					this.VARICELA = readString(dis);
					
					this.HEPATITIS_A = readString(dis);
					
					this.FA = readString(dis);
					
					this.DPT = readString(dis);
					
					this.VPH = readString(dis);
					
					this.TD = readString(dis);
					
					this.MAMOGRAFIA = readString(dis);
					
					this.PROTESIS_DENTAL = readString(dis);
					
					this.RECIBIO_MEDICAMENTOS = readString(dis);
					
					this.VALIDADO = readString(dis);
					
					this.ECOGRAFIA_MAMARIA = readString(dis);
					
					this.INF_SUM_USUARIO = readString(dis);
					
					this.NIVEL_INGRESO = readString(dis);
					
					this.DIFTERIA2 = readString(dis);
					
					this.DIFTERIA3 = readString(dis);
					
					this.POLIO2 = readString(dis);
					
					this.POLIO3 = readString(dis);
					
					this.SARAMPION2 = readString(dis);
					
					this.INFLUENZA2 = readString(dis);
					
					this.VACUNACION_NOPAI = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.PERSONA_ID = dis.readInt();
					
			        this.FICHA_ID = dis.readInt();
					
					this.TREGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.FORMACION = readString(dis);
					
					this.EXPANSION = readString(dis);
					
					this.CONSOLIDACION = readString(dis);
					
					this.APERTURA = readString(dis);
					
					this.POSPARENTAL = readString(dis);
					
					this.DISOLUCION = readString(dis);
					
					this.ESTFAMILIAR = readString(dis);
					
					this.TIPO_VIVIENDA = readString(dis);
					
					this.CUARTOS = readString(dis);
					
					this.UBICACION = readString(dis);
					
					this.BANOS = readString(dis);
					
					this.TENENCIA = readString(dis);
					
					this.TRESPORCUARTO = readString(dis);
					
					this.TIPOHAB = readString(dis);
					
					this.ACT_PRODUCTIVA = readString(dis);
					
					this.MAQUINARIA = readString(dis);
					
					this.EXCRETAS = readString(dis);
					
					this.MEDIOS_COMUNICACION = readString(dis);
					
					this.TIPO_ALUMBRADO = readString(dis);
					
					this.MASCOTAS = readString(dis);
					
					this.MASCOTAS_VAC = readString(dis);
					
					this.DISP_BASURAS = readString(dis);
					
					this.VECTORES = readString(dis);
					
					this.PROB_ACCIDENTE = readString(dis);
					
					this.CONT_AMB = readString(dis);
					
					this.ABAST_AGUA = readString(dis);
					
					this.TRATA_CASA_AGUA = readString(dis);
					
					this.TRATA_AGUA_FUENTE = readString(dis);
					
					this.TIPO_COCINA = readString(dis);
					
					this.HUMO_VIVIENDA = readString(dis);
					
					this.COCINA_CONSTRU_MATERIAL = readString(dis);
					
					this.COCINA_VIVIENDA = readString(dis);
					
					this.COMBUSTIBLE_COCINA = readString(dis);
					
					this.COCINA_DORMITORIO = readString(dis);
					
					this.TIPO_PISOS = readString(dis);
					
					this.TIPO_TECHOS = readString(dis);
					
					this.TIPO_PAREDES = readString(dis);
					
					this.VIVIENDA_2KM = readString(dis);
					
					this.BARRERAS_ACCESOS = readString(dis);
					
					this.DIST_SALUD_CERCANO = readString(dis);
					
					this.MEDIO_TRANSPORTE = readString(dis);
					
					this.VIA_ACCESO = readString(dis);
					
					this.NACIDOS_VIVOS = readString(dis);
					
					this.MORTALIDAD = readString(dis);
					
					this.HIPERTENSION = readString(dis);
					
					this.DIABETES = readString(dis);
					
					this.ENF_CARDIACAS = readString(dis);
					
					this.CANCER = readString(dis);
					
					this.ENF_RENAL = readString(dis);
					
					this.ENF_CONGENITA = readString(dis);
					
					this.MENTALES = readString(dis);
					
					this.AYUDA_FAMI_NECES = readString(dis);
					
					this.AYUDA_FAMI_PROYEC = readString(dis);
					
					this.APOYO_FAMI_SENTIM = readString(dis);
					
					this.DECISIONES_HOGAR = readString(dis);
					
					this.COM_INTRAFAMILIAR = readString(dis);
					
					this.ACT_FAMILIAR = readString(dis);
					
					this.DISFRUTA_ACTIVIDADES = readString(dis);
					
					this.CEPILLADO = readString(dis);
					
					this.NUM_CEPILLADO = readString(dis);
					
					this.CARIES = readString(dis);
					
					this.ODONTOLOGO = readString(dis);
					
					this.FREC_ODONTOLOGO = readString(dis);
					
					this.FULTIMA_ODONTOLOGIA = readString(dis);
					
					this.TOP_FLUOR = readString(dis);
					
					this.SEDA_DENTAL = readString(dis);
					
					this.SELLANTE = readString(dis);
					
					this.PERDIDA_DIENTES = readString(dis);
					
					this.CARNE = readString(dis);
					
					this.ESQUEMA_EDAD = readString(dis);
					
					this.ENF_TROPICAL = readString(dis);
					
					this.ENF_TRANSMISION = readString(dis);
					
					this.TRATAMIENTO_ETS = readString(dis);
					
					this.PROBLEMAS_VISUALES = readString(dis);
					
					this.PROBLEMAS_AUDITIVOS = readString(dis);
					
					this.RENDIMIENTO_ESTUDIOS = readString(dis);
					
					this.ACT_EXTRACURRICULAR = readString(dis);
					
					this.PRESION_SISTOLICA = readString(dis);
					
					this.PRESION_DIASTOLICA = readString(dis);
					
					this.ACT_FISICA = readString(dis);
					
					this.FREC_ACT_FISICA = readString(dis);
					
					this.DURACION_ACT_FISICA = readString(dis);
					
					this.INT_ACT_FISICA = readString(dis);
					
					this.CAIDAS = readString(dis);
					
					this.DISC_FISICA = readString(dis);
					
					this.DISC_MENTAL = readString(dis);
					
					this.EDAD_MESTRUACION = readString(dis);
					
					this.FECHA_REGLA = readString(dis);
					
					this.PARACLINICOS = readString(dis);
					
					this.CITOLOGIA = readString(dis);
					
					this.FECHA_CITOLOGIA = readString(dis);
					
					this.EXAMEN_SENO = readString(dis);
					
					this.PLAN_FAMILIAR = readString(dis);
					
					this.METODO_PLANF = readString(dis);
					
					this.TIEMPO_MET_ANIOS = readString(dis);
					
					this.TIEMPO_MET_MESES = readString(dis);
					
					this.TIEMPO_MET_DIAS = readString(dis);
					
					this.CONTR_PLANF_FAMILIAR = readString(dis);
					
					this.EXAMEN_PROSTATA = readString(dis);
					
					this.PSA = readString(dis);
					
					this.FECHA_EXAMEN = readString(dis);
					
					this.GESTA_CONFIRMADA = readString(dis);
					
					this.GESTA_PLANEADA = readString(dis);
					
					this.CONVIVENCIA_PAREJA = readString(dis);
					
					this.FUR = readString(dis);
					
					this.SEMANAS = readString(dis);
					
					this.FECHA_PARTO = readString(dis);
					
					this.GANANCIA_PESP = readString(dis);
					
					this.CARNE_EMB = readString(dis);
					
					this.CONTROL_PRENATAL = readString(dis);
					
					this.QUIEN_CONTROL = readString(dis);
					
					this.TRIMESTRE_ING_CONTROL = readString(dis);
					
					this.FECHA_CONTROL_INI = readString(dis);
					
					this.VAL_ODONTOLOGIA = readString(dis);
					
					this.VAC_GESTANTE = readString(dis);
					
					this.NUM_GESTACIONES = readString(dis);
					
					this.NUM_PARTOS = readString(dis);
					
					this.NUM_ABORTOS = readString(dis);
					
					this.NUM_CESAREA = readString(dis);
					
					this.NUM_IVE = readString(dis);
					
					this.CAUSA_IVE = readString(dis);
					
					this.EMB_ECTOPICO = readString(dis);
					
					this.NUM_NACIDOS_VIVOS = readString(dis);
					
					this.FECHA_ULT_PARTO = readString(dis);
					
					this.RIESGO_OBSTETRICO = readString(dis);
					
					this.HEMOGLOBINA = readString(dis);
					
					this.SEROLOGIA = readString(dis);
					
					this.VIH = readString(dis);
					
					this.SUPLEMENTACION = readString(dis);
					
					this.PERCENTIL_NUTRICIONAL = readString(dis);
					
					this.TABAQUISMO = readString(dis);
					
					this.NUM_CIGARRILLOS = readString(dis);
					
					this.ALCOHOL = readString(dis);
					
					this.FREC_ALCOHOL = readString(dis);
					
					this.ALT_UTERINA = readString(dis);
					
					this.SEDENTARISMO = readString(dis);
					
					this.PARTO = readString(dis);
					
					this.QUIEN_PARTO = readString(dis);
					
					this.COMPLICACIONES = readString(dis);
					
					this.ATENCION_PARTO = readString(dis);
					
					this.TIEMPO_GESTACION = readString(dis);
					
					this.ATENCION_INSTITUCIONAL = readString(dis);
					
					this.COMPLICACIONES_POSTPARTO = readString(dis);
					
					this.COMPLICACIONES_PARTO = readString(dis);
					
					this.COMPLICACIONES_EMBARAZO = readString(dis);
					
					this.PLANIFICACION = readString(dis);
					
					this.CONSUME_MEDICAMENTO = readString(dis);
					
					this.PESO_NACER = readString(dis);
					
					this.TALLA_NACER = readString(dis);
					
					this.PERIMETRO_CEFALICO = readString(dis);
					
					this.PREMATUREZ = readString(dis);
					
					this.COMPLICACIONES_EMB = readString(dis);
					
					this.RECIBE_MED = readString(dis);
					
					this.REGISTRADO = readString(dis);
					
					this.ANTECEDENTES_PERINATALES = readString(dis);
					
					this.PESO_KG = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.CONTROL_CYD = readString(dis);
					
					this.IMC = readString(dis);
					
					this.ESTADO_NUTRICION = readString(dis);
					
					this.VALORACION_DESARROLLO = readString(dis);
					
					this.LACTANCIA_6MESES = readString(dis);
					
					this.TOMADO_MED_HIPERTENSION = readString(dis);
					
					this.PERIMETRO_ABD = readString(dis);
					
					this.GLUCOSA_EMBARAZO = readString(dis);
					
					this.CONSUMO_VEGETALES = readString(dis);
					
					this.SEGURIDAD_ALIMENTARIA = readString(dis);
					
					this.DESPARACITADO = readString(dis);
					
					this.FECHA_DESPARACITADO = readString(dis);
					
					this.PROGRAMAS_INSCRITO = readString(dis);
					
					this.TRANSTORNO_ALIMENTACION = readString(dis);
					
					this.MORB_CRONICA = readString(dis);
					
					this.PERIMETRO_PANTORRILLA = readString(dis);
					
					this.MORBILIDAD_AGUDA = readString(dis);
					
					this.BUSCA_AYUDA = readString(dis);
					
					this.PORQUE = readString(dis);
					
					this.RECIBE_MANEJO = readString(dis);
					
					this.QUIEN_FORMULA = readString(dis);
					
					this.CONSULTA_SIQUIATRIA = readString(dis);
					
					this.FORMULADO_MED_PSIQUIATRICOS = readString(dis);
					
					this.FACTORES_RIESGO = readString(dis);
					
					this.SITUACION_ESTRES = readString(dis);
					
					this.VIOLENCIA = readString(dis);
					
					this.ANT_CONSUMO = readString(dis);
					
					this.CUAL_ANT_CONSUMO = readString(dis);
					
					this.CONTINUA_CONSUMO = readString(dis);
					
					this.CUAL_CONTINUA_CONSUMO = readString(dis);
					
					this.BCG = readString(dis);
					
					this.HEPATITIS_B = readString(dis);
					
					this.POLIO = readString(dis);
					
					this.HIB = readString(dis);
					
					this.NEUMOCOCO = readString(dis);
					
					this.ROTAVIRUS = readString(dis);
					
					this.INFLUENCIA_EST = readString(dis);
					
					this.SRP = readString(dis);
					
					this.VARICELA = readString(dis);
					
					this.HEPATITIS_A = readString(dis);
					
					this.FA = readString(dis);
					
					this.DPT = readString(dis);
					
					this.VPH = readString(dis);
					
					this.TD = readString(dis);
					
					this.MAMOGRAFIA = readString(dis);
					
					this.PROTESIS_DENTAL = readString(dis);
					
					this.RECIBIO_MEDICAMENTOS = readString(dis);
					
					this.VALIDADO = readString(dis);
					
					this.ECOGRAFIA_MAMARIA = readString(dis);
					
					this.INF_SUM_USUARIO = readString(dis);
					
					this.NIVEL_INGRESO = readString(dis);
					
					this.DIFTERIA2 = readString(dis);
					
					this.DIFTERIA3 = readString(dis);
					
					this.POLIO2 = readString(dis);
					
					this.POLIO3 = readString(dis);
					
					this.SARAMPION2 = readString(dis);
					
					this.INFLUENZA2 = readString(dis);
					
					this.VACUNACION_NOPAI = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.FORMACION,dos);
					
					// String
				
						writeString(this.EXPANSION,dos);
					
					// String
				
						writeString(this.CONSOLIDACION,dos);
					
					// String
				
						writeString(this.APERTURA,dos);
					
					// String
				
						writeString(this.POSPARENTAL,dos);
					
					// String
				
						writeString(this.DISOLUCION,dos);
					
					// String
				
						writeString(this.ESTFAMILIAR,dos);
					
					// String
				
						writeString(this.TIPO_VIVIENDA,dos);
					
					// String
				
						writeString(this.CUARTOS,dos);
					
					// String
				
						writeString(this.UBICACION,dos);
					
					// String
				
						writeString(this.BANOS,dos);
					
					// String
				
						writeString(this.TENENCIA,dos);
					
					// String
				
						writeString(this.TRESPORCUARTO,dos);
					
					// String
				
						writeString(this.TIPOHAB,dos);
					
					// String
				
						writeString(this.ACT_PRODUCTIVA,dos);
					
					// String
				
						writeString(this.MAQUINARIA,dos);
					
					// String
				
						writeString(this.EXCRETAS,dos);
					
					// String
				
						writeString(this.MEDIOS_COMUNICACION,dos);
					
					// String
				
						writeString(this.TIPO_ALUMBRADO,dos);
					
					// String
				
						writeString(this.MASCOTAS,dos);
					
					// String
				
						writeString(this.MASCOTAS_VAC,dos);
					
					// String
				
						writeString(this.DISP_BASURAS,dos);
					
					// String
				
						writeString(this.VECTORES,dos);
					
					// String
				
						writeString(this.PROB_ACCIDENTE,dos);
					
					// String
				
						writeString(this.CONT_AMB,dos);
					
					// String
				
						writeString(this.ABAST_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_CASA_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_AGUA_FUENTE,dos);
					
					// String
				
						writeString(this.TIPO_COCINA,dos);
					
					// String
				
						writeString(this.HUMO_VIVIENDA,dos);
					
					// String
				
						writeString(this.COCINA_CONSTRU_MATERIAL,dos);
					
					// String
				
						writeString(this.COCINA_VIVIENDA,dos);
					
					// String
				
						writeString(this.COMBUSTIBLE_COCINA,dos);
					
					// String
				
						writeString(this.COCINA_DORMITORIO,dos);
					
					// String
				
						writeString(this.TIPO_PISOS,dos);
					
					// String
				
						writeString(this.TIPO_TECHOS,dos);
					
					// String
				
						writeString(this.TIPO_PAREDES,dos);
					
					// String
				
						writeString(this.VIVIENDA_2KM,dos);
					
					// String
				
						writeString(this.BARRERAS_ACCESOS,dos);
					
					// String
				
						writeString(this.DIST_SALUD_CERCANO,dos);
					
					// String
				
						writeString(this.MEDIO_TRANSPORTE,dos);
					
					// String
				
						writeString(this.VIA_ACCESO,dos);
					
					// String
				
						writeString(this.NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.MORTALIDAD,dos);
					
					// String
				
						writeString(this.HIPERTENSION,dos);
					
					// String
				
						writeString(this.DIABETES,dos);
					
					// String
				
						writeString(this.ENF_CARDIACAS,dos);
					
					// String
				
						writeString(this.CANCER,dos);
					
					// String
				
						writeString(this.ENF_RENAL,dos);
					
					// String
				
						writeString(this.ENF_CONGENITA,dos);
					
					// String
				
						writeString(this.MENTALES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_NECES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_PROYEC,dos);
					
					// String
				
						writeString(this.APOYO_FAMI_SENTIM,dos);
					
					// String
				
						writeString(this.DECISIONES_HOGAR,dos);
					
					// String
				
						writeString(this.COM_INTRAFAMILIAR,dos);
					
					// String
				
						writeString(this.ACT_FAMILIAR,dos);
					
					// String
				
						writeString(this.DISFRUTA_ACTIVIDADES,dos);
					
					// String
				
						writeString(this.CEPILLADO,dos);
					
					// String
				
						writeString(this.NUM_CEPILLADO,dos);
					
					// String
				
						writeString(this.CARIES,dos);
					
					// String
				
						writeString(this.ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FREC_ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FULTIMA_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.TOP_FLUOR,dos);
					
					// String
				
						writeString(this.SEDA_DENTAL,dos);
					
					// String
				
						writeString(this.SELLANTE,dos);
					
					// String
				
						writeString(this.PERDIDA_DIENTES,dos);
					
					// String
				
						writeString(this.CARNE,dos);
					
					// String
				
						writeString(this.ESQUEMA_EDAD,dos);
					
					// String
				
						writeString(this.ENF_TROPICAL,dos);
					
					// String
				
						writeString(this.ENF_TRANSMISION,dos);
					
					// String
				
						writeString(this.TRATAMIENTO_ETS,dos);
					
					// String
				
						writeString(this.PROBLEMAS_VISUALES,dos);
					
					// String
				
						writeString(this.PROBLEMAS_AUDITIVOS,dos);
					
					// String
				
						writeString(this.RENDIMIENTO_ESTUDIOS,dos);
					
					// String
				
						writeString(this.ACT_EXTRACURRICULAR,dos);
					
					// String
				
						writeString(this.PRESION_SISTOLICA,dos);
					
					// String
				
						writeString(this.PRESION_DIASTOLICA,dos);
					
					// String
				
						writeString(this.ACT_FISICA,dos);
					
					// String
				
						writeString(this.FREC_ACT_FISICA,dos);
					
					// String
				
						writeString(this.DURACION_ACT_FISICA,dos);
					
					// String
				
						writeString(this.INT_ACT_FISICA,dos);
					
					// String
				
						writeString(this.CAIDAS,dos);
					
					// String
				
						writeString(this.DISC_FISICA,dos);
					
					// String
				
						writeString(this.DISC_MENTAL,dos);
					
					// String
				
						writeString(this.EDAD_MESTRUACION,dos);
					
					// String
				
						writeString(this.FECHA_REGLA,dos);
					
					// String
				
						writeString(this.PARACLINICOS,dos);
					
					// String
				
						writeString(this.CITOLOGIA,dos);
					
					// String
				
						writeString(this.FECHA_CITOLOGIA,dos);
					
					// String
				
						writeString(this.EXAMEN_SENO,dos);
					
					// String
				
						writeString(this.PLAN_FAMILIAR,dos);
					
					// String
				
						writeString(this.METODO_PLANF,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_ANIOS,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_MESES,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_DIAS,dos);
					
					// String
				
						writeString(this.CONTR_PLANF_FAMILIAR,dos);
					
					// String
				
						writeString(this.EXAMEN_PROSTATA,dos);
					
					// String
				
						writeString(this.PSA,dos);
					
					// String
				
						writeString(this.FECHA_EXAMEN,dos);
					
					// String
				
						writeString(this.GESTA_CONFIRMADA,dos);
					
					// String
				
						writeString(this.GESTA_PLANEADA,dos);
					
					// String
				
						writeString(this.CONVIVENCIA_PAREJA,dos);
					
					// String
				
						writeString(this.FUR,dos);
					
					// String
				
						writeString(this.SEMANAS,dos);
					
					// String
				
						writeString(this.FECHA_PARTO,dos);
					
					// String
				
						writeString(this.GANANCIA_PESP,dos);
					
					// String
				
						writeString(this.CARNE_EMB,dos);
					
					// String
				
						writeString(this.CONTROL_PRENATAL,dos);
					
					// String
				
						writeString(this.QUIEN_CONTROL,dos);
					
					// String
				
						writeString(this.TRIMESTRE_ING_CONTROL,dos);
					
					// String
				
						writeString(this.FECHA_CONTROL_INI,dos);
					
					// String
				
						writeString(this.VAL_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.VAC_GESTANTE,dos);
					
					// String
				
						writeString(this.NUM_GESTACIONES,dos);
					
					// String
				
						writeString(this.NUM_PARTOS,dos);
					
					// String
				
						writeString(this.NUM_ABORTOS,dos);
					
					// String
				
						writeString(this.NUM_CESAREA,dos);
					
					// String
				
						writeString(this.NUM_IVE,dos);
					
					// String
				
						writeString(this.CAUSA_IVE,dos);
					
					// String
				
						writeString(this.EMB_ECTOPICO,dos);
					
					// String
				
						writeString(this.NUM_NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.FECHA_ULT_PARTO,dos);
					
					// String
				
						writeString(this.RIESGO_OBSTETRICO,dos);
					
					// String
				
						writeString(this.HEMOGLOBINA,dos);
					
					// String
				
						writeString(this.SEROLOGIA,dos);
					
					// String
				
						writeString(this.VIH,dos);
					
					// String
				
						writeString(this.SUPLEMENTACION,dos);
					
					// String
				
						writeString(this.PERCENTIL_NUTRICIONAL,dos);
					
					// String
				
						writeString(this.TABAQUISMO,dos);
					
					// String
				
						writeString(this.NUM_CIGARRILLOS,dos);
					
					// String
				
						writeString(this.ALCOHOL,dos);
					
					// String
				
						writeString(this.FREC_ALCOHOL,dos);
					
					// String
				
						writeString(this.ALT_UTERINA,dos);
					
					// String
				
						writeString(this.SEDENTARISMO,dos);
					
					// String
				
						writeString(this.PARTO,dos);
					
					// String
				
						writeString(this.QUIEN_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES,dos);
					
					// String
				
						writeString(this.ATENCION_PARTO,dos);
					
					// String
				
						writeString(this.TIEMPO_GESTACION,dos);
					
					// String
				
						writeString(this.ATENCION_INSTITUCIONAL,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_POSTPARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMBARAZO,dos);
					
					// String
				
						writeString(this.PLANIFICACION,dos);
					
					// String
				
						writeString(this.CONSUME_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.PESO_NACER,dos);
					
					// String
				
						writeString(this.TALLA_NACER,dos);
					
					// String
				
						writeString(this.PERIMETRO_CEFALICO,dos);
					
					// String
				
						writeString(this.PREMATUREZ,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMB,dos);
					
					// String
				
						writeString(this.RECIBE_MED,dos);
					
					// String
				
						writeString(this.REGISTRADO,dos);
					
					// String
				
						writeString(this.ANTECEDENTES_PERINATALES,dos);
					
					// String
				
						writeString(this.PESO_KG,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.CONTROL_CYD,dos);
					
					// String
				
						writeString(this.IMC,dos);
					
					// String
				
						writeString(this.ESTADO_NUTRICION,dos);
					
					// String
				
						writeString(this.VALORACION_DESARROLLO,dos);
					
					// String
				
						writeString(this.LACTANCIA_6MESES,dos);
					
					// String
				
						writeString(this.TOMADO_MED_HIPERTENSION,dos);
					
					// String
				
						writeString(this.PERIMETRO_ABD,dos);
					
					// String
				
						writeString(this.GLUCOSA_EMBARAZO,dos);
					
					// String
				
						writeString(this.CONSUMO_VEGETALES,dos);
					
					// String
				
						writeString(this.SEGURIDAD_ALIMENTARIA,dos);
					
					// String
				
						writeString(this.DESPARACITADO,dos);
					
					// String
				
						writeString(this.FECHA_DESPARACITADO,dos);
					
					// String
				
						writeString(this.PROGRAMAS_INSCRITO,dos);
					
					// String
				
						writeString(this.TRANSTORNO_ALIMENTACION,dos);
					
					// String
				
						writeString(this.MORB_CRONICA,dos);
					
					// String
				
						writeString(this.PERIMETRO_PANTORRILLA,dos);
					
					// String
				
						writeString(this.MORBILIDAD_AGUDA,dos);
					
					// String
				
						writeString(this.BUSCA_AYUDA,dos);
					
					// String
				
						writeString(this.PORQUE,dos);
					
					// String
				
						writeString(this.RECIBE_MANEJO,dos);
					
					// String
				
						writeString(this.QUIEN_FORMULA,dos);
					
					// String
				
						writeString(this.CONSULTA_SIQUIATRIA,dos);
					
					// String
				
						writeString(this.FORMULADO_MED_PSIQUIATRICOS,dos);
					
					// String
				
						writeString(this.FACTORES_RIESGO,dos);
					
					// String
				
						writeString(this.SITUACION_ESTRES,dos);
					
					// String
				
						writeString(this.VIOLENCIA,dos);
					
					// String
				
						writeString(this.ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.BCG,dos);
					
					// String
				
						writeString(this.HEPATITIS_B,dos);
					
					// String
				
						writeString(this.POLIO,dos);
					
					// String
				
						writeString(this.HIB,dos);
					
					// String
				
						writeString(this.NEUMOCOCO,dos);
					
					// String
				
						writeString(this.ROTAVIRUS,dos);
					
					// String
				
						writeString(this.INFLUENCIA_EST,dos);
					
					// String
				
						writeString(this.SRP,dos);
					
					// String
				
						writeString(this.VARICELA,dos);
					
					// String
				
						writeString(this.HEPATITIS_A,dos);
					
					// String
				
						writeString(this.FA,dos);
					
					// String
				
						writeString(this.DPT,dos);
					
					// String
				
						writeString(this.VPH,dos);
					
					// String
				
						writeString(this.TD,dos);
					
					// String
				
						writeString(this.MAMOGRAFIA,dos);
					
					// String
				
						writeString(this.PROTESIS_DENTAL,dos);
					
					// String
				
						writeString(this.RECIBIO_MEDICAMENTOS,dos);
					
					// String
				
						writeString(this.VALIDADO,dos);
					
					// String
				
						writeString(this.ECOGRAFIA_MAMARIA,dos);
					
					// String
				
						writeString(this.INF_SUM_USUARIO,dos);
					
					// String
				
						writeString(this.NIVEL_INGRESO,dos);
					
					// String
				
						writeString(this.DIFTERIA2,dos);
					
					// String
				
						writeString(this.DIFTERIA3,dos);
					
					// String
				
						writeString(this.POLIO2,dos);
					
					// String
				
						writeString(this.POLIO3,dos);
					
					// String
				
						writeString(this.SARAMPION2,dos);
					
					// String
				
						writeString(this.INFLUENZA2,dos);
					
					// String
				
						writeString(this.VACUNACION_NOPAI,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.FORMACION,dos);
					
					// String
				
						writeString(this.EXPANSION,dos);
					
					// String
				
						writeString(this.CONSOLIDACION,dos);
					
					// String
				
						writeString(this.APERTURA,dos);
					
					// String
				
						writeString(this.POSPARENTAL,dos);
					
					// String
				
						writeString(this.DISOLUCION,dos);
					
					// String
				
						writeString(this.ESTFAMILIAR,dos);
					
					// String
				
						writeString(this.TIPO_VIVIENDA,dos);
					
					// String
				
						writeString(this.CUARTOS,dos);
					
					// String
				
						writeString(this.UBICACION,dos);
					
					// String
				
						writeString(this.BANOS,dos);
					
					// String
				
						writeString(this.TENENCIA,dos);
					
					// String
				
						writeString(this.TRESPORCUARTO,dos);
					
					// String
				
						writeString(this.TIPOHAB,dos);
					
					// String
				
						writeString(this.ACT_PRODUCTIVA,dos);
					
					// String
				
						writeString(this.MAQUINARIA,dos);
					
					// String
				
						writeString(this.EXCRETAS,dos);
					
					// String
				
						writeString(this.MEDIOS_COMUNICACION,dos);
					
					// String
				
						writeString(this.TIPO_ALUMBRADO,dos);
					
					// String
				
						writeString(this.MASCOTAS,dos);
					
					// String
				
						writeString(this.MASCOTAS_VAC,dos);
					
					// String
				
						writeString(this.DISP_BASURAS,dos);
					
					// String
				
						writeString(this.VECTORES,dos);
					
					// String
				
						writeString(this.PROB_ACCIDENTE,dos);
					
					// String
				
						writeString(this.CONT_AMB,dos);
					
					// String
				
						writeString(this.ABAST_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_CASA_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_AGUA_FUENTE,dos);
					
					// String
				
						writeString(this.TIPO_COCINA,dos);
					
					// String
				
						writeString(this.HUMO_VIVIENDA,dos);
					
					// String
				
						writeString(this.COCINA_CONSTRU_MATERIAL,dos);
					
					// String
				
						writeString(this.COCINA_VIVIENDA,dos);
					
					// String
				
						writeString(this.COMBUSTIBLE_COCINA,dos);
					
					// String
				
						writeString(this.COCINA_DORMITORIO,dos);
					
					// String
				
						writeString(this.TIPO_PISOS,dos);
					
					// String
				
						writeString(this.TIPO_TECHOS,dos);
					
					// String
				
						writeString(this.TIPO_PAREDES,dos);
					
					// String
				
						writeString(this.VIVIENDA_2KM,dos);
					
					// String
				
						writeString(this.BARRERAS_ACCESOS,dos);
					
					// String
				
						writeString(this.DIST_SALUD_CERCANO,dos);
					
					// String
				
						writeString(this.MEDIO_TRANSPORTE,dos);
					
					// String
				
						writeString(this.VIA_ACCESO,dos);
					
					// String
				
						writeString(this.NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.MORTALIDAD,dos);
					
					// String
				
						writeString(this.HIPERTENSION,dos);
					
					// String
				
						writeString(this.DIABETES,dos);
					
					// String
				
						writeString(this.ENF_CARDIACAS,dos);
					
					// String
				
						writeString(this.CANCER,dos);
					
					// String
				
						writeString(this.ENF_RENAL,dos);
					
					// String
				
						writeString(this.ENF_CONGENITA,dos);
					
					// String
				
						writeString(this.MENTALES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_NECES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_PROYEC,dos);
					
					// String
				
						writeString(this.APOYO_FAMI_SENTIM,dos);
					
					// String
				
						writeString(this.DECISIONES_HOGAR,dos);
					
					// String
				
						writeString(this.COM_INTRAFAMILIAR,dos);
					
					// String
				
						writeString(this.ACT_FAMILIAR,dos);
					
					// String
				
						writeString(this.DISFRUTA_ACTIVIDADES,dos);
					
					// String
				
						writeString(this.CEPILLADO,dos);
					
					// String
				
						writeString(this.NUM_CEPILLADO,dos);
					
					// String
				
						writeString(this.CARIES,dos);
					
					// String
				
						writeString(this.ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FREC_ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FULTIMA_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.TOP_FLUOR,dos);
					
					// String
				
						writeString(this.SEDA_DENTAL,dos);
					
					// String
				
						writeString(this.SELLANTE,dos);
					
					// String
				
						writeString(this.PERDIDA_DIENTES,dos);
					
					// String
				
						writeString(this.CARNE,dos);
					
					// String
				
						writeString(this.ESQUEMA_EDAD,dos);
					
					// String
				
						writeString(this.ENF_TROPICAL,dos);
					
					// String
				
						writeString(this.ENF_TRANSMISION,dos);
					
					// String
				
						writeString(this.TRATAMIENTO_ETS,dos);
					
					// String
				
						writeString(this.PROBLEMAS_VISUALES,dos);
					
					// String
				
						writeString(this.PROBLEMAS_AUDITIVOS,dos);
					
					// String
				
						writeString(this.RENDIMIENTO_ESTUDIOS,dos);
					
					// String
				
						writeString(this.ACT_EXTRACURRICULAR,dos);
					
					// String
				
						writeString(this.PRESION_SISTOLICA,dos);
					
					// String
				
						writeString(this.PRESION_DIASTOLICA,dos);
					
					// String
				
						writeString(this.ACT_FISICA,dos);
					
					// String
				
						writeString(this.FREC_ACT_FISICA,dos);
					
					// String
				
						writeString(this.DURACION_ACT_FISICA,dos);
					
					// String
				
						writeString(this.INT_ACT_FISICA,dos);
					
					// String
				
						writeString(this.CAIDAS,dos);
					
					// String
				
						writeString(this.DISC_FISICA,dos);
					
					// String
				
						writeString(this.DISC_MENTAL,dos);
					
					// String
				
						writeString(this.EDAD_MESTRUACION,dos);
					
					// String
				
						writeString(this.FECHA_REGLA,dos);
					
					// String
				
						writeString(this.PARACLINICOS,dos);
					
					// String
				
						writeString(this.CITOLOGIA,dos);
					
					// String
				
						writeString(this.FECHA_CITOLOGIA,dos);
					
					// String
				
						writeString(this.EXAMEN_SENO,dos);
					
					// String
				
						writeString(this.PLAN_FAMILIAR,dos);
					
					// String
				
						writeString(this.METODO_PLANF,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_ANIOS,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_MESES,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_DIAS,dos);
					
					// String
				
						writeString(this.CONTR_PLANF_FAMILIAR,dos);
					
					// String
				
						writeString(this.EXAMEN_PROSTATA,dos);
					
					// String
				
						writeString(this.PSA,dos);
					
					// String
				
						writeString(this.FECHA_EXAMEN,dos);
					
					// String
				
						writeString(this.GESTA_CONFIRMADA,dos);
					
					// String
				
						writeString(this.GESTA_PLANEADA,dos);
					
					// String
				
						writeString(this.CONVIVENCIA_PAREJA,dos);
					
					// String
				
						writeString(this.FUR,dos);
					
					// String
				
						writeString(this.SEMANAS,dos);
					
					// String
				
						writeString(this.FECHA_PARTO,dos);
					
					// String
				
						writeString(this.GANANCIA_PESP,dos);
					
					// String
				
						writeString(this.CARNE_EMB,dos);
					
					// String
				
						writeString(this.CONTROL_PRENATAL,dos);
					
					// String
				
						writeString(this.QUIEN_CONTROL,dos);
					
					// String
				
						writeString(this.TRIMESTRE_ING_CONTROL,dos);
					
					// String
				
						writeString(this.FECHA_CONTROL_INI,dos);
					
					// String
				
						writeString(this.VAL_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.VAC_GESTANTE,dos);
					
					// String
				
						writeString(this.NUM_GESTACIONES,dos);
					
					// String
				
						writeString(this.NUM_PARTOS,dos);
					
					// String
				
						writeString(this.NUM_ABORTOS,dos);
					
					// String
				
						writeString(this.NUM_CESAREA,dos);
					
					// String
				
						writeString(this.NUM_IVE,dos);
					
					// String
				
						writeString(this.CAUSA_IVE,dos);
					
					// String
				
						writeString(this.EMB_ECTOPICO,dos);
					
					// String
				
						writeString(this.NUM_NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.FECHA_ULT_PARTO,dos);
					
					// String
				
						writeString(this.RIESGO_OBSTETRICO,dos);
					
					// String
				
						writeString(this.HEMOGLOBINA,dos);
					
					// String
				
						writeString(this.SEROLOGIA,dos);
					
					// String
				
						writeString(this.VIH,dos);
					
					// String
				
						writeString(this.SUPLEMENTACION,dos);
					
					// String
				
						writeString(this.PERCENTIL_NUTRICIONAL,dos);
					
					// String
				
						writeString(this.TABAQUISMO,dos);
					
					// String
				
						writeString(this.NUM_CIGARRILLOS,dos);
					
					// String
				
						writeString(this.ALCOHOL,dos);
					
					// String
				
						writeString(this.FREC_ALCOHOL,dos);
					
					// String
				
						writeString(this.ALT_UTERINA,dos);
					
					// String
				
						writeString(this.SEDENTARISMO,dos);
					
					// String
				
						writeString(this.PARTO,dos);
					
					// String
				
						writeString(this.QUIEN_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES,dos);
					
					// String
				
						writeString(this.ATENCION_PARTO,dos);
					
					// String
				
						writeString(this.TIEMPO_GESTACION,dos);
					
					// String
				
						writeString(this.ATENCION_INSTITUCIONAL,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_POSTPARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMBARAZO,dos);
					
					// String
				
						writeString(this.PLANIFICACION,dos);
					
					// String
				
						writeString(this.CONSUME_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.PESO_NACER,dos);
					
					// String
				
						writeString(this.TALLA_NACER,dos);
					
					// String
				
						writeString(this.PERIMETRO_CEFALICO,dos);
					
					// String
				
						writeString(this.PREMATUREZ,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMB,dos);
					
					// String
				
						writeString(this.RECIBE_MED,dos);
					
					// String
				
						writeString(this.REGISTRADO,dos);
					
					// String
				
						writeString(this.ANTECEDENTES_PERINATALES,dos);
					
					// String
				
						writeString(this.PESO_KG,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.CONTROL_CYD,dos);
					
					// String
				
						writeString(this.IMC,dos);
					
					// String
				
						writeString(this.ESTADO_NUTRICION,dos);
					
					// String
				
						writeString(this.VALORACION_DESARROLLO,dos);
					
					// String
				
						writeString(this.LACTANCIA_6MESES,dos);
					
					// String
				
						writeString(this.TOMADO_MED_HIPERTENSION,dos);
					
					// String
				
						writeString(this.PERIMETRO_ABD,dos);
					
					// String
				
						writeString(this.GLUCOSA_EMBARAZO,dos);
					
					// String
				
						writeString(this.CONSUMO_VEGETALES,dos);
					
					// String
				
						writeString(this.SEGURIDAD_ALIMENTARIA,dos);
					
					// String
				
						writeString(this.DESPARACITADO,dos);
					
					// String
				
						writeString(this.FECHA_DESPARACITADO,dos);
					
					// String
				
						writeString(this.PROGRAMAS_INSCRITO,dos);
					
					// String
				
						writeString(this.TRANSTORNO_ALIMENTACION,dos);
					
					// String
				
						writeString(this.MORB_CRONICA,dos);
					
					// String
				
						writeString(this.PERIMETRO_PANTORRILLA,dos);
					
					// String
				
						writeString(this.MORBILIDAD_AGUDA,dos);
					
					// String
				
						writeString(this.BUSCA_AYUDA,dos);
					
					// String
				
						writeString(this.PORQUE,dos);
					
					// String
				
						writeString(this.RECIBE_MANEJO,dos);
					
					// String
				
						writeString(this.QUIEN_FORMULA,dos);
					
					// String
				
						writeString(this.CONSULTA_SIQUIATRIA,dos);
					
					// String
				
						writeString(this.FORMULADO_MED_PSIQUIATRICOS,dos);
					
					// String
				
						writeString(this.FACTORES_RIESGO,dos);
					
					// String
				
						writeString(this.SITUACION_ESTRES,dos);
					
					// String
				
						writeString(this.VIOLENCIA,dos);
					
					// String
				
						writeString(this.ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.BCG,dos);
					
					// String
				
						writeString(this.HEPATITIS_B,dos);
					
					// String
				
						writeString(this.POLIO,dos);
					
					// String
				
						writeString(this.HIB,dos);
					
					// String
				
						writeString(this.NEUMOCOCO,dos);
					
					// String
				
						writeString(this.ROTAVIRUS,dos);
					
					// String
				
						writeString(this.INFLUENCIA_EST,dos);
					
					// String
				
						writeString(this.SRP,dos);
					
					// String
				
						writeString(this.VARICELA,dos);
					
					// String
				
						writeString(this.HEPATITIS_A,dos);
					
					// String
				
						writeString(this.FA,dos);
					
					// String
				
						writeString(this.DPT,dos);
					
					// String
				
						writeString(this.VPH,dos);
					
					// String
				
						writeString(this.TD,dos);
					
					// String
				
						writeString(this.MAMOGRAFIA,dos);
					
					// String
				
						writeString(this.PROTESIS_DENTAL,dos);
					
					// String
				
						writeString(this.RECIBIO_MEDICAMENTOS,dos);
					
					// String
				
						writeString(this.VALIDADO,dos);
					
					// String
				
						writeString(this.ECOGRAFIA_MAMARIA,dos);
					
					// String
				
						writeString(this.INF_SUM_USUARIO,dos);
					
					// String
				
						writeString(this.NIVEL_INGRESO,dos);
					
					// String
				
						writeString(this.DIFTERIA2,dos);
					
					// String
				
						writeString(this.DIFTERIA3,dos);
					
					// String
				
						writeString(this.POLIO2,dos);
					
					// String
				
						writeString(this.POLIO3,dos);
					
					// String
				
						writeString(this.SARAMPION2,dos);
					
					// String
				
						writeString(this.INFLUENZA2,dos);
					
					// String
				
						writeString(this.VACUNACION_NOPAI,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMEN_SALUD="+TREGIMEN_SALUD);
		sb.append(",EPS="+EPS);
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
		sb.append(",FORMACION="+FORMACION);
		sb.append(",EXPANSION="+EXPANSION);
		sb.append(",CONSOLIDACION="+CONSOLIDACION);
		sb.append(",APERTURA="+APERTURA);
		sb.append(",POSPARENTAL="+POSPARENTAL);
		sb.append(",DISOLUCION="+DISOLUCION);
		sb.append(",ESTFAMILIAR="+ESTFAMILIAR);
		sb.append(",TIPO_VIVIENDA="+TIPO_VIVIENDA);
		sb.append(",CUARTOS="+CUARTOS);
		sb.append(",UBICACION="+UBICACION);
		sb.append(",BANOS="+BANOS);
		sb.append(",TENENCIA="+TENENCIA);
		sb.append(",TRESPORCUARTO="+TRESPORCUARTO);
		sb.append(",TIPOHAB="+TIPOHAB);
		sb.append(",ACT_PRODUCTIVA="+ACT_PRODUCTIVA);
		sb.append(",MAQUINARIA="+MAQUINARIA);
		sb.append(",EXCRETAS="+EXCRETAS);
		sb.append(",MEDIOS_COMUNICACION="+MEDIOS_COMUNICACION);
		sb.append(",TIPO_ALUMBRADO="+TIPO_ALUMBRADO);
		sb.append(",MASCOTAS="+MASCOTAS);
		sb.append(",MASCOTAS_VAC="+MASCOTAS_VAC);
		sb.append(",DISP_BASURAS="+DISP_BASURAS);
		sb.append(",VECTORES="+VECTORES);
		sb.append(",PROB_ACCIDENTE="+PROB_ACCIDENTE);
		sb.append(",CONT_AMB="+CONT_AMB);
		sb.append(",ABAST_AGUA="+ABAST_AGUA);
		sb.append(",TRATA_CASA_AGUA="+TRATA_CASA_AGUA);
		sb.append(",TRATA_AGUA_FUENTE="+TRATA_AGUA_FUENTE);
		sb.append(",TIPO_COCINA="+TIPO_COCINA);
		sb.append(",HUMO_VIVIENDA="+HUMO_VIVIENDA);
		sb.append(",COCINA_CONSTRU_MATERIAL="+COCINA_CONSTRU_MATERIAL);
		sb.append(",COCINA_VIVIENDA="+COCINA_VIVIENDA);
		sb.append(",COMBUSTIBLE_COCINA="+COMBUSTIBLE_COCINA);
		sb.append(",COCINA_DORMITORIO="+COCINA_DORMITORIO);
		sb.append(",TIPO_PISOS="+TIPO_PISOS);
		sb.append(",TIPO_TECHOS="+TIPO_TECHOS);
		sb.append(",TIPO_PAREDES="+TIPO_PAREDES);
		sb.append(",VIVIENDA_2KM="+VIVIENDA_2KM);
		sb.append(",BARRERAS_ACCESOS="+BARRERAS_ACCESOS);
		sb.append(",DIST_SALUD_CERCANO="+DIST_SALUD_CERCANO);
		sb.append(",MEDIO_TRANSPORTE="+MEDIO_TRANSPORTE);
		sb.append(",VIA_ACCESO="+VIA_ACCESO);
		sb.append(",NACIDOS_VIVOS="+NACIDOS_VIVOS);
		sb.append(",MORTALIDAD="+MORTALIDAD);
		sb.append(",HIPERTENSION="+HIPERTENSION);
		sb.append(",DIABETES="+DIABETES);
		sb.append(",ENF_CARDIACAS="+ENF_CARDIACAS);
		sb.append(",CANCER="+CANCER);
		sb.append(",ENF_RENAL="+ENF_RENAL);
		sb.append(",ENF_CONGENITA="+ENF_CONGENITA);
		sb.append(",MENTALES="+MENTALES);
		sb.append(",AYUDA_FAMI_NECES="+AYUDA_FAMI_NECES);
		sb.append(",AYUDA_FAMI_PROYEC="+AYUDA_FAMI_PROYEC);
		sb.append(",APOYO_FAMI_SENTIM="+APOYO_FAMI_SENTIM);
		sb.append(",DECISIONES_HOGAR="+DECISIONES_HOGAR);
		sb.append(",COM_INTRAFAMILIAR="+COM_INTRAFAMILIAR);
		sb.append(",ACT_FAMILIAR="+ACT_FAMILIAR);
		sb.append(",DISFRUTA_ACTIVIDADES="+DISFRUTA_ACTIVIDADES);
		sb.append(",CEPILLADO="+CEPILLADO);
		sb.append(",NUM_CEPILLADO="+NUM_CEPILLADO);
		sb.append(",CARIES="+CARIES);
		sb.append(",ODONTOLOGO="+ODONTOLOGO);
		sb.append(",FREC_ODONTOLOGO="+FREC_ODONTOLOGO);
		sb.append(",FULTIMA_ODONTOLOGIA="+FULTIMA_ODONTOLOGIA);
		sb.append(",TOP_FLUOR="+TOP_FLUOR);
		sb.append(",SEDA_DENTAL="+SEDA_DENTAL);
		sb.append(",SELLANTE="+SELLANTE);
		sb.append(",PERDIDA_DIENTES="+PERDIDA_DIENTES);
		sb.append(",CARNE="+CARNE);
		sb.append(",ESQUEMA_EDAD="+ESQUEMA_EDAD);
		sb.append(",ENF_TROPICAL="+ENF_TROPICAL);
		sb.append(",ENF_TRANSMISION="+ENF_TRANSMISION);
		sb.append(",TRATAMIENTO_ETS="+TRATAMIENTO_ETS);
		sb.append(",PROBLEMAS_VISUALES="+PROBLEMAS_VISUALES);
		sb.append(",PROBLEMAS_AUDITIVOS="+PROBLEMAS_AUDITIVOS);
		sb.append(",RENDIMIENTO_ESTUDIOS="+RENDIMIENTO_ESTUDIOS);
		sb.append(",ACT_EXTRACURRICULAR="+ACT_EXTRACURRICULAR);
		sb.append(",PRESION_SISTOLICA="+PRESION_SISTOLICA);
		sb.append(",PRESION_DIASTOLICA="+PRESION_DIASTOLICA);
		sb.append(",ACT_FISICA="+ACT_FISICA);
		sb.append(",FREC_ACT_FISICA="+FREC_ACT_FISICA);
		sb.append(",DURACION_ACT_FISICA="+DURACION_ACT_FISICA);
		sb.append(",INT_ACT_FISICA="+INT_ACT_FISICA);
		sb.append(",CAIDAS="+CAIDAS);
		sb.append(",DISC_FISICA="+DISC_FISICA);
		sb.append(",DISC_MENTAL="+DISC_MENTAL);
		sb.append(",EDAD_MESTRUACION="+EDAD_MESTRUACION);
		sb.append(",FECHA_REGLA="+FECHA_REGLA);
		sb.append(",PARACLINICOS="+PARACLINICOS);
		sb.append(",CITOLOGIA="+CITOLOGIA);
		sb.append(",FECHA_CITOLOGIA="+FECHA_CITOLOGIA);
		sb.append(",EXAMEN_SENO="+EXAMEN_SENO);
		sb.append(",PLAN_FAMILIAR="+PLAN_FAMILIAR);
		sb.append(",METODO_PLANF="+METODO_PLANF);
		sb.append(",TIEMPO_MET_ANIOS="+TIEMPO_MET_ANIOS);
		sb.append(",TIEMPO_MET_MESES="+TIEMPO_MET_MESES);
		sb.append(",TIEMPO_MET_DIAS="+TIEMPO_MET_DIAS);
		sb.append(",CONTR_PLANF_FAMILIAR="+CONTR_PLANF_FAMILIAR);
		sb.append(",EXAMEN_PROSTATA="+EXAMEN_PROSTATA);
		sb.append(",PSA="+PSA);
		sb.append(",FECHA_EXAMEN="+FECHA_EXAMEN);
		sb.append(",GESTA_CONFIRMADA="+GESTA_CONFIRMADA);
		sb.append(",GESTA_PLANEADA="+GESTA_PLANEADA);
		sb.append(",CONVIVENCIA_PAREJA="+CONVIVENCIA_PAREJA);
		sb.append(",FUR="+FUR);
		sb.append(",SEMANAS="+SEMANAS);
		sb.append(",FECHA_PARTO="+FECHA_PARTO);
		sb.append(",GANANCIA_PESP="+GANANCIA_PESP);
		sb.append(",CARNE_EMB="+CARNE_EMB);
		sb.append(",CONTROL_PRENATAL="+CONTROL_PRENATAL);
		sb.append(",QUIEN_CONTROL="+QUIEN_CONTROL);
		sb.append(",TRIMESTRE_ING_CONTROL="+TRIMESTRE_ING_CONTROL);
		sb.append(",FECHA_CONTROL_INI="+FECHA_CONTROL_INI);
		sb.append(",VAL_ODONTOLOGIA="+VAL_ODONTOLOGIA);
		sb.append(",VAC_GESTANTE="+VAC_GESTANTE);
		sb.append(",NUM_GESTACIONES="+NUM_GESTACIONES);
		sb.append(",NUM_PARTOS="+NUM_PARTOS);
		sb.append(",NUM_ABORTOS="+NUM_ABORTOS);
		sb.append(",NUM_CESAREA="+NUM_CESAREA);
		sb.append(",NUM_IVE="+NUM_IVE);
		sb.append(",CAUSA_IVE="+CAUSA_IVE);
		sb.append(",EMB_ECTOPICO="+EMB_ECTOPICO);
		sb.append(",NUM_NACIDOS_VIVOS="+NUM_NACIDOS_VIVOS);
		sb.append(",FECHA_ULT_PARTO="+FECHA_ULT_PARTO);
		sb.append(",RIESGO_OBSTETRICO="+RIESGO_OBSTETRICO);
		sb.append(",HEMOGLOBINA="+HEMOGLOBINA);
		sb.append(",SEROLOGIA="+SEROLOGIA);
		sb.append(",VIH="+VIH);
		sb.append(",SUPLEMENTACION="+SUPLEMENTACION);
		sb.append(",PERCENTIL_NUTRICIONAL="+PERCENTIL_NUTRICIONAL);
		sb.append(",TABAQUISMO="+TABAQUISMO);
		sb.append(",NUM_CIGARRILLOS="+NUM_CIGARRILLOS);
		sb.append(",ALCOHOL="+ALCOHOL);
		sb.append(",FREC_ALCOHOL="+FREC_ALCOHOL);
		sb.append(",ALT_UTERINA="+ALT_UTERINA);
		sb.append(",SEDENTARISMO="+SEDENTARISMO);
		sb.append(",PARTO="+PARTO);
		sb.append(",QUIEN_PARTO="+QUIEN_PARTO);
		sb.append(",COMPLICACIONES="+COMPLICACIONES);
		sb.append(",ATENCION_PARTO="+ATENCION_PARTO);
		sb.append(",TIEMPO_GESTACION="+TIEMPO_GESTACION);
		sb.append(",ATENCION_INSTITUCIONAL="+ATENCION_INSTITUCIONAL);
		sb.append(",COMPLICACIONES_POSTPARTO="+COMPLICACIONES_POSTPARTO);
		sb.append(",COMPLICACIONES_PARTO="+COMPLICACIONES_PARTO);
		sb.append(",COMPLICACIONES_EMBARAZO="+COMPLICACIONES_EMBARAZO);
		sb.append(",PLANIFICACION="+PLANIFICACION);
		sb.append(",CONSUME_MEDICAMENTO="+CONSUME_MEDICAMENTO);
		sb.append(",PESO_NACER="+PESO_NACER);
		sb.append(",TALLA_NACER="+TALLA_NACER);
		sb.append(",PERIMETRO_CEFALICO="+PERIMETRO_CEFALICO);
		sb.append(",PREMATUREZ="+PREMATUREZ);
		sb.append(",COMPLICACIONES_EMB="+COMPLICACIONES_EMB);
		sb.append(",RECIBE_MED="+RECIBE_MED);
		sb.append(",REGISTRADO="+REGISTRADO);
		sb.append(",ANTECEDENTES_PERINATALES="+ANTECEDENTES_PERINATALES);
		sb.append(",PESO_KG="+PESO_KG);
		sb.append(",TALLA="+TALLA);
		sb.append(",CONTROL_CYD="+CONTROL_CYD);
		sb.append(",IMC="+IMC);
		sb.append(",ESTADO_NUTRICION="+ESTADO_NUTRICION);
		sb.append(",VALORACION_DESARROLLO="+VALORACION_DESARROLLO);
		sb.append(",LACTANCIA_6MESES="+LACTANCIA_6MESES);
		sb.append(",TOMADO_MED_HIPERTENSION="+TOMADO_MED_HIPERTENSION);
		sb.append(",PERIMETRO_ABD="+PERIMETRO_ABD);
		sb.append(",GLUCOSA_EMBARAZO="+GLUCOSA_EMBARAZO);
		sb.append(",CONSUMO_VEGETALES="+CONSUMO_VEGETALES);
		sb.append(",SEGURIDAD_ALIMENTARIA="+SEGURIDAD_ALIMENTARIA);
		sb.append(",DESPARACITADO="+DESPARACITADO);
		sb.append(",FECHA_DESPARACITADO="+FECHA_DESPARACITADO);
		sb.append(",PROGRAMAS_INSCRITO="+PROGRAMAS_INSCRITO);
		sb.append(",TRANSTORNO_ALIMENTACION="+TRANSTORNO_ALIMENTACION);
		sb.append(",MORB_CRONICA="+MORB_CRONICA);
		sb.append(",PERIMETRO_PANTORRILLA="+PERIMETRO_PANTORRILLA);
		sb.append(",MORBILIDAD_AGUDA="+MORBILIDAD_AGUDA);
		sb.append(",BUSCA_AYUDA="+BUSCA_AYUDA);
		sb.append(",PORQUE="+PORQUE);
		sb.append(",RECIBE_MANEJO="+RECIBE_MANEJO);
		sb.append(",QUIEN_FORMULA="+QUIEN_FORMULA);
		sb.append(",CONSULTA_SIQUIATRIA="+CONSULTA_SIQUIATRIA);
		sb.append(",FORMULADO_MED_PSIQUIATRICOS="+FORMULADO_MED_PSIQUIATRICOS);
		sb.append(",FACTORES_RIESGO="+FACTORES_RIESGO);
		sb.append(",SITUACION_ESTRES="+SITUACION_ESTRES);
		sb.append(",VIOLENCIA="+VIOLENCIA);
		sb.append(",ANT_CONSUMO="+ANT_CONSUMO);
		sb.append(",CUAL_ANT_CONSUMO="+CUAL_ANT_CONSUMO);
		sb.append(",CONTINUA_CONSUMO="+CONTINUA_CONSUMO);
		sb.append(",CUAL_CONTINUA_CONSUMO="+CUAL_CONTINUA_CONSUMO);
		sb.append(",BCG="+BCG);
		sb.append(",HEPATITIS_B="+HEPATITIS_B);
		sb.append(",POLIO="+POLIO);
		sb.append(",HIB="+HIB);
		sb.append(",NEUMOCOCO="+NEUMOCOCO);
		sb.append(",ROTAVIRUS="+ROTAVIRUS);
		sb.append(",INFLUENCIA_EST="+INFLUENCIA_EST);
		sb.append(",SRP="+SRP);
		sb.append(",VARICELA="+VARICELA);
		sb.append(",HEPATITIS_A="+HEPATITIS_A);
		sb.append(",FA="+FA);
		sb.append(",DPT="+DPT);
		sb.append(",VPH="+VPH);
		sb.append(",TD="+TD);
		sb.append(",MAMOGRAFIA="+MAMOGRAFIA);
		sb.append(",PROTESIS_DENTAL="+PROTESIS_DENTAL);
		sb.append(",RECIBIO_MEDICAMENTOS="+RECIBIO_MEDICAMENTOS);
		sb.append(",VALIDADO="+VALIDADO);
		sb.append(",ECOGRAFIA_MAMARIA="+ECOGRAFIA_MAMARIA);
		sb.append(",INF_SUM_USUARIO="+INF_SUM_USUARIO);
		sb.append(",NIVEL_INGRESO="+NIVEL_INGRESO);
		sb.append(",DIFTERIA2="+DIFTERIA2);
		sb.append(",DIFTERIA3="+DIFTERIA3);
		sb.append(",POLIO2="+POLIO2);
		sb.append(",POLIO3="+POLIO3);
		sb.append(",SARAMPION2="+SARAMPION2);
		sb.append(",INFLUENZA2="+INFLUENZA2);
		sb.append(",VACUNACION_NOPAI="+VACUNACION_NOPAI);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tFileInputDelimited_1Struct implements routines.system.IPersistableRow<after_tFileInputDelimited_1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int PERSONA_ID;

				public int getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return true;
				}
				public Integer PERSONA_IDLength(){
				    return 6;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return null;
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public int FICHA_ID;

				public int getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return true;
				}
				public Integer FICHA_IDLength(){
				    return 3;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return null;
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public String TREGIMEN_SALUD;

				public String getTREGIMEN_SALUD () {
					return this.TREGIMEN_SALUD;
				}

				public Boolean TREGIMEN_SALUDIsNullable(){
				    return true;
				}
				public Boolean TREGIMEN_SALUDIsKey(){
				    return false;
				}
				public Integer TREGIMEN_SALUDLength(){
				    return 20;
				}
				public Integer TREGIMEN_SALUDPrecision(){
				    return 0;
				}
				public String TREGIMEN_SALUDDefault(){
				
					return null;
				
				}
				public String TREGIMEN_SALUDComment(){
				
				    return "";
				
				}
				public String TREGIMEN_SALUDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TREGIMEN_SALUDOriginalDbColumnName(){
				
					return "TREGIMEN_SALUD";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return 18;
				}
				public Integer EPSPrecision(){
				    return 0;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return true;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 10;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 95;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				
			    public String FORMACION;

				public String getFORMACION () {
					return this.FORMACION;
				}

				public Boolean FORMACIONIsNullable(){
				    return true;
				}
				public Boolean FORMACIONIsKey(){
				    return false;
				}
				public Integer FORMACIONLength(){
				    return 27;
				}
				public Integer FORMACIONPrecision(){
				    return 0;
				}
				public String FORMACIONDefault(){
				
					return null;
				
				}
				public String FORMACIONComment(){
				
				    return "";
				
				}
				public String FORMACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMACIONOriginalDbColumnName(){
				
					return "FORMACION";
				
				}

				
			    public String EXPANSION;

				public String getEXPANSION () {
					return this.EXPANSION;
				}

				public Boolean EXPANSIONIsNullable(){
				    return true;
				}
				public Boolean EXPANSIONIsKey(){
				    return false;
				}
				public Integer EXPANSIONLength(){
				    return 27;
				}
				public Integer EXPANSIONPrecision(){
				    return 0;
				}
				public String EXPANSIONDefault(){
				
					return null;
				
				}
				public String EXPANSIONComment(){
				
				    return "";
				
				}
				public String EXPANSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXPANSIONOriginalDbColumnName(){
				
					return "EXPANSION";
				
				}

				
			    public String CONSOLIDACION;

				public String getCONSOLIDACION () {
					return this.CONSOLIDACION;
				}

				public Boolean CONSOLIDACIONIsNullable(){
				    return true;
				}
				public Boolean CONSOLIDACIONIsKey(){
				    return false;
				}
				public Integer CONSOLIDACIONLength(){
				    return 27;
				}
				public Integer CONSOLIDACIONPrecision(){
				    return 0;
				}
				public String CONSOLIDACIONDefault(){
				
					return null;
				
				}
				public String CONSOLIDACIONComment(){
				
				    return "";
				
				}
				public String CONSOLIDACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSOLIDACIONOriginalDbColumnName(){
				
					return "CONSOLIDACION";
				
				}

				
			    public String APERTURA;

				public String getAPERTURA () {
					return this.APERTURA;
				}

				public Boolean APERTURAIsNullable(){
				    return true;
				}
				public Boolean APERTURAIsKey(){
				    return false;
				}
				public Integer APERTURALength(){
				    return 27;
				}
				public Integer APERTURAPrecision(){
				    return 0;
				}
				public String APERTURADefault(){
				
					return null;
				
				}
				public String APERTURAComment(){
				
				    return "";
				
				}
				public String APERTURAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String APERTURAOriginalDbColumnName(){
				
					return "APERTURA";
				
				}

				
			    public String POSPARENTAL;

				public String getPOSPARENTAL () {
					return this.POSPARENTAL;
				}

				public Boolean POSPARENTALIsNullable(){
				    return true;
				}
				public Boolean POSPARENTALIsKey(){
				    return false;
				}
				public Integer POSPARENTALLength(){
				    return 22;
				}
				public Integer POSPARENTALPrecision(){
				    return 0;
				}
				public String POSPARENTALDefault(){
				
					return null;
				
				}
				public String POSPARENTALComment(){
				
				    return "";
				
				}
				public String POSPARENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String POSPARENTALOriginalDbColumnName(){
				
					return "POSPARENTAL";
				
				}

				
			    public String DISOLUCION;

				public String getDISOLUCION () {
					return this.DISOLUCION;
				}

				public Boolean DISOLUCIONIsNullable(){
				    return true;
				}
				public Boolean DISOLUCIONIsKey(){
				    return false;
				}
				public Integer DISOLUCIONLength(){
				    return 27;
				}
				public Integer DISOLUCIONPrecision(){
				    return 0;
				}
				public String DISOLUCIONDefault(){
				
					return null;
				
				}
				public String DISOLUCIONComment(){
				
				    return "";
				
				}
				public String DISOLUCIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISOLUCIONOriginalDbColumnName(){
				
					return "DISOLUCION";
				
				}

				
			    public String ESTFAMILIAR;

				public String getESTFAMILIAR () {
					return this.ESTFAMILIAR;
				}

				public Boolean ESTFAMILIARIsNullable(){
				    return true;
				}
				public Boolean ESTFAMILIARIsKey(){
				    return false;
				}
				public Integer ESTFAMILIARLength(){
				    return 16;
				}
				public Integer ESTFAMILIARPrecision(){
				    return 0;
				}
				public String ESTFAMILIARDefault(){
				
					return null;
				
				}
				public String ESTFAMILIARComment(){
				
				    return "";
				
				}
				public String ESTFAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESTFAMILIAROriginalDbColumnName(){
				
					return "ESTFAMILIAR";
				
				}

				
			    public String TIPO_VIVIENDA;

				public String getTIPO_VIVIENDA () {
					return this.TIPO_VIVIENDA;
				}

				public Boolean TIPO_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean TIPO_VIVIENDAIsKey(){
				    return false;
				}
				public Integer TIPO_VIVIENDALength(){
				    return 6;
				}
				public Integer TIPO_VIVIENDAPrecision(){
				    return 0;
				}
				public String TIPO_VIVIENDADefault(){
				
					return null;
				
				}
				public String TIPO_VIVIENDAComment(){
				
				    return "";
				
				}
				public String TIPO_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_VIVIENDAOriginalDbColumnName(){
				
					return "TIPO_VIVIENDA";
				
				}

				
			    public String CUARTOS;

				public String getCUARTOS () {
					return this.CUARTOS;
				}

				public Boolean CUARTOSIsNullable(){
				    return true;
				}
				public Boolean CUARTOSIsKey(){
				    return false;
				}
				public Integer CUARTOSLength(){
				    return 3;
				}
				public Integer CUARTOSPrecision(){
				    return 0;
				}
				public String CUARTOSDefault(){
				
					return null;
				
				}
				public String CUARTOSComment(){
				
				    return "";
				
				}
				public String CUARTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUARTOSOriginalDbColumnName(){
				
					return "CUARTOS";
				
				}

				
			    public String UBICACION;

				public String getUBICACION () {
					return this.UBICACION;
				}

				public Boolean UBICACIONIsNullable(){
				    return true;
				}
				public Boolean UBICACIONIsKey(){
				    return false;
				}
				public Integer UBICACIONLength(){
				    return 32;
				}
				public Integer UBICACIONPrecision(){
				    return 0;
				}
				public String UBICACIONDefault(){
				
					return null;
				
				}
				public String UBICACIONComment(){
				
				    return "";
				
				}
				public String UBICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UBICACIONOriginalDbColumnName(){
				
					return "UBICACION";
				
				}

				
			    public String BANOS;

				public String getBANOS () {
					return this.BANOS;
				}

				public Boolean BANOSIsNullable(){
				    return true;
				}
				public Boolean BANOSIsKey(){
				    return false;
				}
				public Integer BANOSLength(){
				    return 3;
				}
				public Integer BANOSPrecision(){
				    return 0;
				}
				public String BANOSDefault(){
				
					return null;
				
				}
				public String BANOSComment(){
				
				    return "";
				
				}
				public String BANOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BANOSOriginalDbColumnName(){
				
					return "BANOS";
				
				}

				
			    public String TENENCIA;

				public String getTENENCIA () {
					return this.TENENCIA;
				}

				public Boolean TENENCIAIsNullable(){
				    return true;
				}
				public Boolean TENENCIAIsKey(){
				    return false;
				}
				public Integer TENENCIALength(){
				    return 10;
				}
				public Integer TENENCIAPrecision(){
				    return 0;
				}
				public String TENENCIADefault(){
				
					return null;
				
				}
				public String TENENCIAComment(){
				
				    return "";
				
				}
				public String TENENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TENENCIAOriginalDbColumnName(){
				
					return "TENENCIA";
				
				}

				
			    public String TRESPORCUARTO;

				public String getTRESPORCUARTO () {
					return this.TRESPORCUARTO;
				}

				public Boolean TRESPORCUARTOIsNullable(){
				    return true;
				}
				public Boolean TRESPORCUARTOIsKey(){
				    return false;
				}
				public Integer TRESPORCUARTOLength(){
				    return 4;
				}
				public Integer TRESPORCUARTOPrecision(){
				    return 0;
				}
				public String TRESPORCUARTODefault(){
				
					return null;
				
				}
				public String TRESPORCUARTOComment(){
				
				    return "";
				
				}
				public String TRESPORCUARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRESPORCUARTOOriginalDbColumnName(){
				
					return "TRESPORCUARTO";
				
				}

				
			    public String TIPOHAB;

				public String getTIPOHAB () {
					return this.TIPOHAB;
				}

				public Boolean TIPOHABIsNullable(){
				    return true;
				}
				public Boolean TIPOHABIsKey(){
				    return false;
				}
				public Integer TIPOHABLength(){
				    return 12;
				}
				public Integer TIPOHABPrecision(){
				    return 0;
				}
				public String TIPOHABDefault(){
				
					return null;
				
				}
				public String TIPOHABComment(){
				
				    return "";
				
				}
				public String TIPOHABPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPOHABOriginalDbColumnName(){
				
					return "TIPOHAB";
				
				}

				
			    public String ACT_PRODUCTIVA;

				public String getACT_PRODUCTIVA () {
					return this.ACT_PRODUCTIVA;
				}

				public Boolean ACT_PRODUCTIVAIsNullable(){
				    return true;
				}
				public Boolean ACT_PRODUCTIVAIsKey(){
				    return false;
				}
				public Integer ACT_PRODUCTIVALength(){
				    return 24;
				}
				public Integer ACT_PRODUCTIVAPrecision(){
				    return 0;
				}
				public String ACT_PRODUCTIVADefault(){
				
					return null;
				
				}
				public String ACT_PRODUCTIVAComment(){
				
				    return "";
				
				}
				public String ACT_PRODUCTIVAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_PRODUCTIVAOriginalDbColumnName(){
				
					return "ACT_PRODUCTIVA";
				
				}

				
			    public String MAQUINARIA;

				public String getMAQUINARIA () {
					return this.MAQUINARIA;
				}

				public Boolean MAQUINARIAIsNullable(){
				    return true;
				}
				public Boolean MAQUINARIAIsKey(){
				    return false;
				}
				public Integer MAQUINARIALength(){
				    return 4;
				}
				public Integer MAQUINARIAPrecision(){
				    return 0;
				}
				public String MAQUINARIADefault(){
				
					return null;
				
				}
				public String MAQUINARIAComment(){
				
				    return "";
				
				}
				public String MAQUINARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MAQUINARIAOriginalDbColumnName(){
				
					return "MAQUINARIA";
				
				}

				
			    public String EXCRETAS;

				public String getEXCRETAS () {
					return this.EXCRETAS;
				}

				public Boolean EXCRETASIsNullable(){
				    return true;
				}
				public Boolean EXCRETASIsKey(){
				    return false;
				}
				public Integer EXCRETASLength(){
				    return 15;
				}
				public Integer EXCRETASPrecision(){
				    return 0;
				}
				public String EXCRETASDefault(){
				
					return null;
				
				}
				public String EXCRETASComment(){
				
				    return "";
				
				}
				public String EXCRETASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXCRETASOriginalDbColumnName(){
				
					return "EXCRETAS";
				
				}

				
			    public String MEDIOS_COMUNICACION;

				public String getMEDIOS_COMUNICACION () {
					return this.MEDIOS_COMUNICACION;
				}

				public Boolean MEDIOS_COMUNICACIONIsNullable(){
				    return true;
				}
				public Boolean MEDIOS_COMUNICACIONIsKey(){
				    return false;
				}
				public Integer MEDIOS_COMUNICACIONLength(){
				    return 26;
				}
				public Integer MEDIOS_COMUNICACIONPrecision(){
				    return 0;
				}
				public String MEDIOS_COMUNICACIONDefault(){
				
					return null;
				
				}
				public String MEDIOS_COMUNICACIONComment(){
				
				    return "";
				
				}
				public String MEDIOS_COMUNICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MEDIOS_COMUNICACIONOriginalDbColumnName(){
				
					return "MEDIOS_COMUNICACION";
				
				}

				
			    public String TIPO_ALUMBRADO;

				public String getTIPO_ALUMBRADO () {
					return this.TIPO_ALUMBRADO;
				}

				public Boolean TIPO_ALUMBRADOIsNullable(){
				    return true;
				}
				public Boolean TIPO_ALUMBRADOIsKey(){
				    return false;
				}
				public Integer TIPO_ALUMBRADOLength(){
				    return 33;
				}
				public Integer TIPO_ALUMBRADOPrecision(){
				    return 0;
				}
				public String TIPO_ALUMBRADODefault(){
				
					return null;
				
				}
				public String TIPO_ALUMBRADOComment(){
				
				    return "";
				
				}
				public String TIPO_ALUMBRADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_ALUMBRADOOriginalDbColumnName(){
				
					return "TIPO_ALUMBRADO";
				
				}

				
			    public String MASCOTAS;

				public String getMASCOTAS () {
					return this.MASCOTAS;
				}

				public Boolean MASCOTASIsNullable(){
				    return true;
				}
				public Boolean MASCOTASIsKey(){
				    return false;
				}
				public Integer MASCOTASLength(){
				    return 9;
				}
				public Integer MASCOTASPrecision(){
				    return 0;
				}
				public String MASCOTASDefault(){
				
					return null;
				
				}
				public String MASCOTASComment(){
				
				    return "";
				
				}
				public String MASCOTASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MASCOTASOriginalDbColumnName(){
				
					return "MASCOTAS";
				
				}

				
			    public String MASCOTAS_VAC;

				public String getMASCOTAS_VAC () {
					return this.MASCOTAS_VAC;
				}

				public Boolean MASCOTAS_VACIsNullable(){
				    return true;
				}
				public Boolean MASCOTAS_VACIsKey(){
				    return false;
				}
				public Integer MASCOTAS_VACLength(){
				    return 6;
				}
				public Integer MASCOTAS_VACPrecision(){
				    return 0;
				}
				public String MASCOTAS_VACDefault(){
				
					return null;
				
				}
				public String MASCOTAS_VACComment(){
				
				    return "";
				
				}
				public String MASCOTAS_VACPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MASCOTAS_VACOriginalDbColumnName(){
				
					return "MASCOTAS_VAC";
				
				}

				
			    public String DISP_BASURAS;

				public String getDISP_BASURAS () {
					return this.DISP_BASURAS;
				}

				public Boolean DISP_BASURASIsNullable(){
				    return true;
				}
				public Boolean DISP_BASURASIsKey(){
				    return false;
				}
				public Integer DISP_BASURASLength(){
				    return 34;
				}
				public Integer DISP_BASURASPrecision(){
				    return 0;
				}
				public String DISP_BASURASDefault(){
				
					return null;
				
				}
				public String DISP_BASURASComment(){
				
				    return "";
				
				}
				public String DISP_BASURASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISP_BASURASOriginalDbColumnName(){
				
					return "DISP_BASURAS";
				
				}

				
			    public String VECTORES;

				public String getVECTORES () {
					return this.VECTORES;
				}

				public Boolean VECTORESIsNullable(){
				    return true;
				}
				public Boolean VECTORESIsKey(){
				    return false;
				}
				public Integer VECTORESLength(){
				    return 8;
				}
				public Integer VECTORESPrecision(){
				    return 0;
				}
				public String VECTORESDefault(){
				
					return null;
				
				}
				public String VECTORESComment(){
				
				    return "";
				
				}
				public String VECTORESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VECTORESOriginalDbColumnName(){
				
					return "VECTORES";
				
				}

				
			    public String PROB_ACCIDENTE;

				public String getPROB_ACCIDENTE () {
					return this.PROB_ACCIDENTE;
				}

				public Boolean PROB_ACCIDENTEIsNullable(){
				    return true;
				}
				public Boolean PROB_ACCIDENTEIsKey(){
				    return false;
				}
				public Integer PROB_ACCIDENTELength(){
				    return 25;
				}
				public Integer PROB_ACCIDENTEPrecision(){
				    return 0;
				}
				public String PROB_ACCIDENTEDefault(){
				
					return null;
				
				}
				public String PROB_ACCIDENTEComment(){
				
				    return "";
				
				}
				public String PROB_ACCIDENTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROB_ACCIDENTEOriginalDbColumnName(){
				
					return "PROB_ACCIDENTE";
				
				}

				
			    public String CONT_AMB;

				public String getCONT_AMB () {
					return this.CONT_AMB;
				}

				public Boolean CONT_AMBIsNullable(){
				    return true;
				}
				public Boolean CONT_AMBIsKey(){
				    return false;
				}
				public Integer CONT_AMBLength(){
				    return 4;
				}
				public Integer CONT_AMBPrecision(){
				    return 0;
				}
				public String CONT_AMBDefault(){
				
					return null;
				
				}
				public String CONT_AMBComment(){
				
				    return "";
				
				}
				public String CONT_AMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONT_AMBOriginalDbColumnName(){
				
					return "CONT_AMB";
				
				}

				
			    public String ABAST_AGUA;

				public String getABAST_AGUA () {
					return this.ABAST_AGUA;
				}

				public Boolean ABAST_AGUAIsNullable(){
				    return true;
				}
				public Boolean ABAST_AGUAIsKey(){
				    return false;
				}
				public Integer ABAST_AGUALength(){
				    return 23;
				}
				public Integer ABAST_AGUAPrecision(){
				    return 0;
				}
				public String ABAST_AGUADefault(){
				
					return null;
				
				}
				public String ABAST_AGUAComment(){
				
				    return "";
				
				}
				public String ABAST_AGUAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ABAST_AGUAOriginalDbColumnName(){
				
					return "ABAST_AGUA";
				
				}

				
			    public String TRATA_CASA_AGUA;

				public String getTRATA_CASA_AGUA () {
					return this.TRATA_CASA_AGUA;
				}

				public Boolean TRATA_CASA_AGUAIsNullable(){
				    return true;
				}
				public Boolean TRATA_CASA_AGUAIsKey(){
				    return false;
				}
				public Integer TRATA_CASA_AGUALength(){
				    return 10;
				}
				public Integer TRATA_CASA_AGUAPrecision(){
				    return 0;
				}
				public String TRATA_CASA_AGUADefault(){
				
					return null;
				
				}
				public String TRATA_CASA_AGUAComment(){
				
				    return "";
				
				}
				public String TRATA_CASA_AGUAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATA_CASA_AGUAOriginalDbColumnName(){
				
					return "TRATA_CASA_AGUA";
				
				}

				
			    public String TRATA_AGUA_FUENTE;

				public String getTRATA_AGUA_FUENTE () {
					return this.TRATA_AGUA_FUENTE;
				}

				public Boolean TRATA_AGUA_FUENTEIsNullable(){
				    return true;
				}
				public Boolean TRATA_AGUA_FUENTEIsKey(){
				    return false;
				}
				public Integer TRATA_AGUA_FUENTELength(){
				    return 4;
				}
				public Integer TRATA_AGUA_FUENTEPrecision(){
				    return 0;
				}
				public String TRATA_AGUA_FUENTEDefault(){
				
					return null;
				
				}
				public String TRATA_AGUA_FUENTEComment(){
				
				    return "";
				
				}
				public String TRATA_AGUA_FUENTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATA_AGUA_FUENTEOriginalDbColumnName(){
				
					return "TRATA_AGUA_FUENTE";
				
				}

				
			    public String TIPO_COCINA;

				public String getTIPO_COCINA () {
					return this.TIPO_COCINA;
				}

				public Boolean TIPO_COCINAIsNullable(){
				    return true;
				}
				public Boolean TIPO_COCINAIsKey(){
				    return false;
				}
				public Integer TIPO_COCINALength(){
				    return 12;
				}
				public Integer TIPO_COCINAPrecision(){
				    return 0;
				}
				public String TIPO_COCINADefault(){
				
					return null;
				
				}
				public String TIPO_COCINAComment(){
				
				    return "";
				
				}
				public String TIPO_COCINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_COCINAOriginalDbColumnName(){
				
					return "TIPO_COCINA";
				
				}

				
			    public String HUMO_VIVIENDA;

				public String getHUMO_VIVIENDA () {
					return this.HUMO_VIVIENDA;
				}

				public Boolean HUMO_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean HUMO_VIVIENDAIsKey(){
				    return false;
				}
				public Integer HUMO_VIVIENDALength(){
				    return 4;
				}
				public Integer HUMO_VIVIENDAPrecision(){
				    return 0;
				}
				public String HUMO_VIVIENDADefault(){
				
					return null;
				
				}
				public String HUMO_VIVIENDAComment(){
				
				    return "";
				
				}
				public String HUMO_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HUMO_VIVIENDAOriginalDbColumnName(){
				
					return "HUMO_VIVIENDA";
				
				}

				
			    public String COCINA_CONSTRU_MATERIAL;

				public String getCOCINA_CONSTRU_MATERIAL () {
					return this.COCINA_CONSTRU_MATERIAL;
				}

				public Boolean COCINA_CONSTRU_MATERIALIsNullable(){
				    return true;
				}
				public Boolean COCINA_CONSTRU_MATERIALIsKey(){
				    return false;
				}
				public Integer COCINA_CONSTRU_MATERIALLength(){
				    return 4;
				}
				public Integer COCINA_CONSTRU_MATERIALPrecision(){
				    return 0;
				}
				public String COCINA_CONSTRU_MATERIALDefault(){
				
					return null;
				
				}
				public String COCINA_CONSTRU_MATERIALComment(){
				
				    return "";
				
				}
				public String COCINA_CONSTRU_MATERIALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_CONSTRU_MATERIALOriginalDbColumnName(){
				
					return "COCINA_CONSTRU_MATERIAL";
				
				}

				
			    public String COCINA_VIVIENDA;

				public String getCOCINA_VIVIENDA () {
					return this.COCINA_VIVIENDA;
				}

				public Boolean COCINA_VIVIENDAIsNullable(){
				    return true;
				}
				public Boolean COCINA_VIVIENDAIsKey(){
				    return false;
				}
				public Integer COCINA_VIVIENDALength(){
				    return 4;
				}
				public Integer COCINA_VIVIENDAPrecision(){
				    return 0;
				}
				public String COCINA_VIVIENDADefault(){
				
					return null;
				
				}
				public String COCINA_VIVIENDAComment(){
				
				    return "";
				
				}
				public String COCINA_VIVIENDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_VIVIENDAOriginalDbColumnName(){
				
					return "COCINA_VIVIENDA";
				
				}

				
			    public String COMBUSTIBLE_COCINA;

				public String getCOMBUSTIBLE_COCINA () {
					return this.COMBUSTIBLE_COCINA;
				}

				public Boolean COMBUSTIBLE_COCINAIsNullable(){
				    return true;
				}
				public Boolean COMBUSTIBLE_COCINAIsKey(){
				    return false;
				}
				public Integer COMBUSTIBLE_COCINALength(){
				    return 12;
				}
				public Integer COMBUSTIBLE_COCINAPrecision(){
				    return 0;
				}
				public String COMBUSTIBLE_COCINADefault(){
				
					return null;
				
				}
				public String COMBUSTIBLE_COCINAComment(){
				
				    return "";
				
				}
				public String COMBUSTIBLE_COCINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMBUSTIBLE_COCINAOriginalDbColumnName(){
				
					return "COMBUSTIBLE_COCINA";
				
				}

				
			    public String COCINA_DORMITORIO;

				public String getCOCINA_DORMITORIO () {
					return this.COCINA_DORMITORIO;
				}

				public Boolean COCINA_DORMITORIOIsNullable(){
				    return true;
				}
				public Boolean COCINA_DORMITORIOIsKey(){
				    return false;
				}
				public Integer COCINA_DORMITORIOLength(){
				    return 4;
				}
				public Integer COCINA_DORMITORIOPrecision(){
				    return 0;
				}
				public String COCINA_DORMITORIODefault(){
				
					return null;
				
				}
				public String COCINA_DORMITORIOComment(){
				
				    return "";
				
				}
				public String COCINA_DORMITORIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COCINA_DORMITORIOOriginalDbColumnName(){
				
					return "COCINA_DORMITORIO";
				
				}

				
			    public String TIPO_PISOS;

				public String getTIPO_PISOS () {
					return this.TIPO_PISOS;
				}

				public Boolean TIPO_PISOSIsNullable(){
				    return true;
				}
				public Boolean TIPO_PISOSIsKey(){
				    return false;
				}
				public Integer TIPO_PISOSLength(){
				    return 9;
				}
				public Integer TIPO_PISOSPrecision(){
				    return 0;
				}
				public String TIPO_PISOSDefault(){
				
					return null;
				
				}
				public String TIPO_PISOSComment(){
				
				    return "";
				
				}
				public String TIPO_PISOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_PISOSOriginalDbColumnName(){
				
					return "TIPO_PISOS";
				
				}

				
			    public String TIPO_TECHOS;

				public String getTIPO_TECHOS () {
					return this.TIPO_TECHOS;
				}

				public Boolean TIPO_TECHOSIsNullable(){
				    return true;
				}
				public Boolean TIPO_TECHOSIsKey(){
				    return false;
				}
				public Integer TIPO_TECHOSLength(){
				    return 17;
				}
				public Integer TIPO_TECHOSPrecision(){
				    return 0;
				}
				public String TIPO_TECHOSDefault(){
				
					return null;
				
				}
				public String TIPO_TECHOSComment(){
				
				    return "";
				
				}
				public String TIPO_TECHOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_TECHOSOriginalDbColumnName(){
				
					return "TIPO_TECHOS";
				
				}

				
			    public String TIPO_PAREDES;

				public String getTIPO_PAREDES () {
					return this.TIPO_PAREDES;
				}

				public Boolean TIPO_PAREDESIsNullable(){
				    return true;
				}
				public Boolean TIPO_PAREDESIsKey(){
				    return false;
				}
				public Integer TIPO_PAREDESLength(){
				    return 40;
				}
				public Integer TIPO_PAREDESPrecision(){
				    return 0;
				}
				public String TIPO_PAREDESDefault(){
				
					return null;
				
				}
				public String TIPO_PAREDESComment(){
				
				    return "";
				
				}
				public String TIPO_PAREDESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIPO_PAREDESOriginalDbColumnName(){
				
					return "TIPO_PAREDES";
				
				}

				
			    public String VIVIENDA_2KM;

				public String getVIVIENDA_2KM () {
					return this.VIVIENDA_2KM;
				}

				public Boolean VIVIENDA_2KMIsNullable(){
				    return true;
				}
				public Boolean VIVIENDA_2KMIsKey(){
				    return false;
				}
				public Integer VIVIENDA_2KMLength(){
				    return 34;
				}
				public Integer VIVIENDA_2KMPrecision(){
				    return 0;
				}
				public String VIVIENDA_2KMDefault(){
				
					return null;
				
				}
				public String VIVIENDA_2KMComment(){
				
				    return "";
				
				}
				public String VIVIENDA_2KMPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIVIENDA_2KMOriginalDbColumnName(){
				
					return "VIVIENDA_2KM";
				
				}

				
			    public String BARRERAS_ACCESOS;

				public String getBARRERAS_ACCESOS () {
					return this.BARRERAS_ACCESOS;
				}

				public Boolean BARRERAS_ACCESOSIsNullable(){
				    return true;
				}
				public Boolean BARRERAS_ACCESOSIsKey(){
				    return false;
				}
				public Integer BARRERAS_ACCESOSLength(){
				    return 27;
				}
				public Integer BARRERAS_ACCESOSPrecision(){
				    return 0;
				}
				public String BARRERAS_ACCESOSDefault(){
				
					return null;
				
				}
				public String BARRERAS_ACCESOSComment(){
				
				    return "";
				
				}
				public String BARRERAS_ACCESOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BARRERAS_ACCESOSOriginalDbColumnName(){
				
					return "BARRERAS_ACCESOS";
				
				}

				
			    public String DIST_SALUD_CERCANO;

				public String getDIST_SALUD_CERCANO () {
					return this.DIST_SALUD_CERCANO;
				}

				public Boolean DIST_SALUD_CERCANOIsNullable(){
				    return true;
				}
				public Boolean DIST_SALUD_CERCANOIsKey(){
				    return false;
				}
				public Integer DIST_SALUD_CERCANOLength(){
				    return 12;
				}
				public Integer DIST_SALUD_CERCANOPrecision(){
				    return 0;
				}
				public String DIST_SALUD_CERCANODefault(){
				
					return null;
				
				}
				public String DIST_SALUD_CERCANOComment(){
				
				    return "";
				
				}
				public String DIST_SALUD_CERCANOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIST_SALUD_CERCANOOriginalDbColumnName(){
				
					return "DIST_SALUD_CERCANO";
				
				}

				
			    public String MEDIO_TRANSPORTE;

				public String getMEDIO_TRANSPORTE () {
					return this.MEDIO_TRANSPORTE;
				}

				public Boolean MEDIO_TRANSPORTEIsNullable(){
				    return true;
				}
				public Boolean MEDIO_TRANSPORTEIsKey(){
				    return false;
				}
				public Integer MEDIO_TRANSPORTELength(){
				    return 24;
				}
				public Integer MEDIO_TRANSPORTEPrecision(){
				    return 0;
				}
				public String MEDIO_TRANSPORTEDefault(){
				
					return null;
				
				}
				public String MEDIO_TRANSPORTEComment(){
				
				    return "";
				
				}
				public String MEDIO_TRANSPORTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MEDIO_TRANSPORTEOriginalDbColumnName(){
				
					return "MEDIO_TRANSPORTE";
				
				}

				
			    public String VIA_ACCESO;

				public String getVIA_ACCESO () {
					return this.VIA_ACCESO;
				}

				public Boolean VIA_ACCESOIsNullable(){
				    return true;
				}
				public Boolean VIA_ACCESOIsKey(){
				    return false;
				}
				public Integer VIA_ACCESOLength(){
				    return 16;
				}
				public Integer VIA_ACCESOPrecision(){
				    return 0;
				}
				public String VIA_ACCESODefault(){
				
					return null;
				
				}
				public String VIA_ACCESOComment(){
				
				    return "";
				
				}
				public String VIA_ACCESOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIA_ACCESOOriginalDbColumnName(){
				
					return "VIA_ACCESO";
				
				}

				
			    public String NACIDOS_VIVOS;

				public String getNACIDOS_VIVOS () {
					return this.NACIDOS_VIVOS;
				}

				public Boolean NACIDOS_VIVOSIsNullable(){
				    return true;
				}
				public Boolean NACIDOS_VIVOSIsKey(){
				    return false;
				}
				public Integer NACIDOS_VIVOSLength(){
				    return 3;
				}
				public Integer NACIDOS_VIVOSPrecision(){
				    return 0;
				}
				public String NACIDOS_VIVOSDefault(){
				
					return null;
				
				}
				public String NACIDOS_VIVOSComment(){
				
				    return "";
				
				}
				public String NACIDOS_VIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NACIDOS_VIVOSOriginalDbColumnName(){
				
					return "NACIDOS_VIVOS";
				
				}

				
			    public String MORTALIDAD;

				public String getMORTALIDAD () {
					return this.MORTALIDAD;
				}

				public Boolean MORTALIDADIsNullable(){
				    return true;
				}
				public Boolean MORTALIDADIsKey(){
				    return false;
				}
				public Integer MORTALIDADLength(){
				    return 19;
				}
				public Integer MORTALIDADPrecision(){
				    return 0;
				}
				public String MORTALIDADDefault(){
				
					return null;
				
				}
				public String MORTALIDADComment(){
				
				    return "";
				
				}
				public String MORTALIDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORTALIDADOriginalDbColumnName(){
				
					return "MORTALIDAD";
				
				}

				
			    public String HIPERTENSION;

				public String getHIPERTENSION () {
					return this.HIPERTENSION;
				}

				public Boolean HIPERTENSIONIsNullable(){
				    return true;
				}
				public Boolean HIPERTENSIONIsKey(){
				    return false;
				}
				public Integer HIPERTENSIONLength(){
				    return 17;
				}
				public Integer HIPERTENSIONPrecision(){
				    return 0;
				}
				public String HIPERTENSIONDefault(){
				
					return null;
				
				}
				public String HIPERTENSIONComment(){
				
				    return "";
				
				}
				public String HIPERTENSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HIPERTENSIONOriginalDbColumnName(){
				
					return "HIPERTENSION";
				
				}

				
			    public String DIABETES;

				public String getDIABETES () {
					return this.DIABETES;
				}

				public Boolean DIABETESIsNullable(){
				    return true;
				}
				public Boolean DIABETESIsKey(){
				    return false;
				}
				public Integer DIABETESLength(){
				    return 9;
				}
				public Integer DIABETESPrecision(){
				    return 0;
				}
				public String DIABETESDefault(){
				
					return null;
				
				}
				public String DIABETESComment(){
				
				    return "";
				
				}
				public String DIABETESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DIABETESOriginalDbColumnName(){
				
					return "DIABETES";
				
				}

				
			    public String ENF_CARDIACAS;

				public String getENF_CARDIACAS () {
					return this.ENF_CARDIACAS;
				}

				public Boolean ENF_CARDIACASIsNullable(){
				    return true;
				}
				public Boolean ENF_CARDIACASIsKey(){
				    return false;
				}
				public Integer ENF_CARDIACASLength(){
				    return 8;
				}
				public Integer ENF_CARDIACASPrecision(){
				    return 0;
				}
				public String ENF_CARDIACASDefault(){
				
					return null;
				
				}
				public String ENF_CARDIACASComment(){
				
				    return "";
				
				}
				public String ENF_CARDIACASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_CARDIACASOriginalDbColumnName(){
				
					return "ENF_CARDIACAS";
				
				}

				
			    public String CANCER;

				public String getCANCER () {
					return this.CANCER;
				}

				public Boolean CANCERIsNullable(){
				    return true;
				}
				public Boolean CANCERIsKey(){
				    return false;
				}
				public Integer CANCERLength(){
				    return 9;
				}
				public Integer CANCERPrecision(){
				    return 0;
				}
				public String CANCERDefault(){
				
					return null;
				
				}
				public String CANCERComment(){
				
				    return "";
				
				}
				public String CANCERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CANCEROriginalDbColumnName(){
				
					return "CANCER";
				
				}

				
			    public String ENF_RENAL;

				public String getENF_RENAL () {
					return this.ENF_RENAL;
				}

				public Boolean ENF_RENALIsNullable(){
				    return true;
				}
				public Boolean ENF_RENALIsKey(){
				    return false;
				}
				public Integer ENF_RENALLength(){
				    return 16;
				}
				public Integer ENF_RENALPrecision(){
				    return 0;
				}
				public String ENF_RENALDefault(){
				
					return null;
				
				}
				public String ENF_RENALComment(){
				
				    return "";
				
				}
				public String ENF_RENALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_RENALOriginalDbColumnName(){
				
					return "ENF_RENAL";
				
				}

				
			    public String ENF_CONGENITA;

				public String getENF_CONGENITA () {
					return this.ENF_CONGENITA;
				}

				public Boolean ENF_CONGENITAIsNullable(){
				    return true;
				}
				public Boolean ENF_CONGENITAIsKey(){
				    return false;
				}
				public Integer ENF_CONGENITALength(){
				    return 17;
				}
				public Integer ENF_CONGENITAPrecision(){
				    return 0;
				}
				public String ENF_CONGENITADefault(){
				
					return null;
				
				}
				public String ENF_CONGENITAComment(){
				
				    return "";
				
				}
				public String ENF_CONGENITAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_CONGENITAOriginalDbColumnName(){
				
					return "ENF_CONGENITA";
				
				}

				
			    public String MENTALES;

				public String getMENTALES () {
					return this.MENTALES;
				}

				public Boolean MENTALESIsNullable(){
				    return true;
				}
				public Boolean MENTALESIsKey(){
				    return false;
				}
				public Integer MENTALESLength(){
				    return null;
				}
				public Integer MENTALESPrecision(){
				    return null;
				}
				public String MENTALESDefault(){
				
					return null;
				
				}
				public String MENTALESComment(){
				
				    return "";
				
				}
				public String MENTALESPattern(){
				
					return "";
				
				}
				public String MENTALESOriginalDbColumnName(){
				
					return "MENTALES";
				
				}

				
			    public String AYUDA_FAMI_NECES;

				public String getAYUDA_FAMI_NECES () {
					return this.AYUDA_FAMI_NECES;
				}

				public Boolean AYUDA_FAMI_NECESIsNullable(){
				    return true;
				}
				public Boolean AYUDA_FAMI_NECESIsKey(){
				    return false;
				}
				public Integer AYUDA_FAMI_NECESLength(){
				    return 10;
				}
				public Integer AYUDA_FAMI_NECESPrecision(){
				    return 0;
				}
				public String AYUDA_FAMI_NECESDefault(){
				
					return null;
				
				}
				public String AYUDA_FAMI_NECESComment(){
				
				    return "";
				
				}
				public String AYUDA_FAMI_NECESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String AYUDA_FAMI_NECESOriginalDbColumnName(){
				
					return "AYUDA_FAMI_NECES";
				
				}

				
			    public String AYUDA_FAMI_PROYEC;

				public String getAYUDA_FAMI_PROYEC () {
					return this.AYUDA_FAMI_PROYEC;
				}

				public Boolean AYUDA_FAMI_PROYECIsNullable(){
				    return true;
				}
				public Boolean AYUDA_FAMI_PROYECIsKey(){
				    return false;
				}
				public Integer AYUDA_FAMI_PROYECLength(){
				    return 14;
				}
				public Integer AYUDA_FAMI_PROYECPrecision(){
				    return 0;
				}
				public String AYUDA_FAMI_PROYECDefault(){
				
					return null;
				
				}
				public String AYUDA_FAMI_PROYECComment(){
				
				    return "";
				
				}
				public String AYUDA_FAMI_PROYECPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String AYUDA_FAMI_PROYECOriginalDbColumnName(){
				
					return "AYUDA_FAMI_PROYEC";
				
				}

				
			    public String APOYO_FAMI_SENTIM;

				public String getAPOYO_FAMI_SENTIM () {
					return this.APOYO_FAMI_SENTIM;
				}

				public Boolean APOYO_FAMI_SENTIMIsNullable(){
				    return true;
				}
				public Boolean APOYO_FAMI_SENTIMIsKey(){
				    return false;
				}
				public Integer APOYO_FAMI_SENTIMLength(){
				    return 14;
				}
				public Integer APOYO_FAMI_SENTIMPrecision(){
				    return 0;
				}
				public String APOYO_FAMI_SENTIMDefault(){
				
					return null;
				
				}
				public String APOYO_FAMI_SENTIMComment(){
				
				    return "";
				
				}
				public String APOYO_FAMI_SENTIMPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String APOYO_FAMI_SENTIMOriginalDbColumnName(){
				
					return "APOYO_FAMI_SENTIM";
				
				}

				
			    public String DECISIONES_HOGAR;

				public String getDECISIONES_HOGAR () {
					return this.DECISIONES_HOGAR;
				}

				public Boolean DECISIONES_HOGARIsNullable(){
				    return true;
				}
				public Boolean DECISIONES_HOGARIsKey(){
				    return false;
				}
				public Integer DECISIONES_HOGARLength(){
				    return 24;
				}
				public Integer DECISIONES_HOGARPrecision(){
				    return 0;
				}
				public String DECISIONES_HOGARDefault(){
				
					return null;
				
				}
				public String DECISIONES_HOGARComment(){
				
				    return "";
				
				}
				public String DECISIONES_HOGARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DECISIONES_HOGAROriginalDbColumnName(){
				
					return "DECISIONES_HOGAR";
				
				}

				
			    public String COM_INTRAFAMILIAR;

				public String getCOM_INTRAFAMILIAR () {
					return this.COM_INTRAFAMILIAR;
				}

				public Boolean COM_INTRAFAMILIARIsNullable(){
				    return true;
				}
				public Boolean COM_INTRAFAMILIARIsKey(){
				    return false;
				}
				public Integer COM_INTRAFAMILIARLength(){
				    return 10;
				}
				public Integer COM_INTRAFAMILIARPrecision(){
				    return 0;
				}
				public String COM_INTRAFAMILIARDefault(){
				
					return null;
				
				}
				public String COM_INTRAFAMILIARComment(){
				
				    return "";
				
				}
				public String COM_INTRAFAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COM_INTRAFAMILIAROriginalDbColumnName(){
				
					return "COM_INTRAFAMILIAR";
				
				}

				
			    public String ACT_FAMILIAR;

				public String getACT_FAMILIAR () {
					return this.ACT_FAMILIAR;
				}

				public Boolean ACT_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean ACT_FAMILIARIsKey(){
				    return false;
				}
				public Integer ACT_FAMILIARLength(){
				    return 4;
				}
				public Integer ACT_FAMILIARPrecision(){
				    return 0;
				}
				public String ACT_FAMILIARDefault(){
				
					return null;
				
				}
				public String ACT_FAMILIARComment(){
				
				    return "";
				
				}
				public String ACT_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_FAMILIAROriginalDbColumnName(){
				
					return "ACT_FAMILIAR";
				
				}

				
			    public String DISFRUTA_ACTIVIDADES;

				public String getDISFRUTA_ACTIVIDADES () {
					return this.DISFRUTA_ACTIVIDADES;
				}

				public Boolean DISFRUTA_ACTIVIDADESIsNullable(){
				    return true;
				}
				public Boolean DISFRUTA_ACTIVIDADESIsKey(){
				    return false;
				}
				public Integer DISFRUTA_ACTIVIDADESLength(){
				    return 4;
				}
				public Integer DISFRUTA_ACTIVIDADESPrecision(){
				    return 0;
				}
				public String DISFRUTA_ACTIVIDADESDefault(){
				
					return null;
				
				}
				public String DISFRUTA_ACTIVIDADESComment(){
				
				    return "";
				
				}
				public String DISFRUTA_ACTIVIDADESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISFRUTA_ACTIVIDADESOriginalDbColumnName(){
				
					return "DISFRUTA_ACTIVIDADES";
				
				}

				
			    public String CEPILLADO;

				public String getCEPILLADO () {
					return this.CEPILLADO;
				}

				public Boolean CEPILLADOIsNullable(){
				    return true;
				}
				public Boolean CEPILLADOIsKey(){
				    return false;
				}
				public Integer CEPILLADOLength(){
				    return 4;
				}
				public Integer CEPILLADOPrecision(){
				    return 0;
				}
				public String CEPILLADODefault(){
				
					return null;
				
				}
				public String CEPILLADOComment(){
				
				    return "";
				
				}
				public String CEPILLADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CEPILLADOOriginalDbColumnName(){
				
					return "CEPILLADO";
				
				}

				
			    public String NUM_CEPILLADO;

				public String getNUM_CEPILLADO () {
					return this.NUM_CEPILLADO;
				}

				public Boolean NUM_CEPILLADOIsNullable(){
				    return true;
				}
				public Boolean NUM_CEPILLADOIsKey(){
				    return false;
				}
				public Integer NUM_CEPILLADOLength(){
				    return 18;
				}
				public Integer NUM_CEPILLADOPrecision(){
				    return 0;
				}
				public String NUM_CEPILLADODefault(){
				
					return null;
				
				}
				public String NUM_CEPILLADOComment(){
				
				    return "";
				
				}
				public String NUM_CEPILLADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CEPILLADOOriginalDbColumnName(){
				
					return "NUM_CEPILLADO";
				
				}

				
			    public String CARIES;

				public String getCARIES () {
					return this.CARIES;
				}

				public Boolean CARIESIsNullable(){
				    return true;
				}
				public Boolean CARIESIsKey(){
				    return false;
				}
				public Integer CARIESLength(){
				    return 4;
				}
				public Integer CARIESPrecision(){
				    return 0;
				}
				public String CARIESDefault(){
				
					return null;
				
				}
				public String CARIESComment(){
				
				    return "";
				
				}
				public String CARIESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARIESOriginalDbColumnName(){
				
					return "CARIES";
				
				}

				
			    public String ODONTOLOGO;

				public String getODONTOLOGO () {
					return this.ODONTOLOGO;
				}

				public Boolean ODONTOLOGOIsNullable(){
				    return true;
				}
				public Boolean ODONTOLOGOIsKey(){
				    return false;
				}
				public Integer ODONTOLOGOLength(){
				    return 4;
				}
				public Integer ODONTOLOGOPrecision(){
				    return 0;
				}
				public String ODONTOLOGODefault(){
				
					return null;
				
				}
				public String ODONTOLOGOComment(){
				
				    return "";
				
				}
				public String ODONTOLOGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ODONTOLOGOOriginalDbColumnName(){
				
					return "ODONTOLOGO";
				
				}

				
			    public String FREC_ODONTOLOGO;

				public String getFREC_ODONTOLOGO () {
					return this.FREC_ODONTOLOGO;
				}

				public Boolean FREC_ODONTOLOGOIsNullable(){
				    return true;
				}
				public Boolean FREC_ODONTOLOGOIsKey(){
				    return false;
				}
				public Integer FREC_ODONTOLOGOLength(){
				    return 12;
				}
				public Integer FREC_ODONTOLOGOPrecision(){
				    return 0;
				}
				public String FREC_ODONTOLOGODefault(){
				
					return null;
				
				}
				public String FREC_ODONTOLOGOComment(){
				
				    return "";
				
				}
				public String FREC_ODONTOLOGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ODONTOLOGOOriginalDbColumnName(){
				
					return "FREC_ODONTOLOGO";
				
				}

				
			    public String FULTIMA_ODONTOLOGIA;

				public String getFULTIMA_ODONTOLOGIA () {
					return this.FULTIMA_ODONTOLOGIA;
				}

				public Boolean FULTIMA_ODONTOLOGIAIsNullable(){
				    return true;
				}
				public Boolean FULTIMA_ODONTOLOGIAIsKey(){
				    return false;
				}
				public Integer FULTIMA_ODONTOLOGIALength(){
				    return 12;
				}
				public Integer FULTIMA_ODONTOLOGIAPrecision(){
				    return 0;
				}
				public String FULTIMA_ODONTOLOGIADefault(){
				
					return null;
				
				}
				public String FULTIMA_ODONTOLOGIAComment(){
				
				    return "";
				
				}
				public String FULTIMA_ODONTOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FULTIMA_ODONTOLOGIAOriginalDbColumnName(){
				
					return "FULTIMA_ODONTOLOGIA";
				
				}

				
			    public String TOP_FLUOR;

				public String getTOP_FLUOR () {
					return this.TOP_FLUOR;
				}

				public Boolean TOP_FLUORIsNullable(){
				    return true;
				}
				public Boolean TOP_FLUORIsKey(){
				    return false;
				}
				public Integer TOP_FLUORLength(){
				    return 1;
				}
				public Integer TOP_FLUORPrecision(){
				    return 0;
				}
				public String TOP_FLUORDefault(){
				
					return null;
				
				}
				public String TOP_FLUORComment(){
				
				    return "";
				
				}
				public String TOP_FLUORPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TOP_FLUOROriginalDbColumnName(){
				
					return "TOP_FLUOR";
				
				}

				
			    public String SEDA_DENTAL;

				public String getSEDA_DENTAL () {
					return this.SEDA_DENTAL;
				}

				public Boolean SEDA_DENTALIsNullable(){
				    return true;
				}
				public Boolean SEDA_DENTALIsKey(){
				    return false;
				}
				public Integer SEDA_DENTALLength(){
				    return 4;
				}
				public Integer SEDA_DENTALPrecision(){
				    return 0;
				}
				public String SEDA_DENTALDefault(){
				
					return null;
				
				}
				public String SEDA_DENTALComment(){
				
				    return "";
				
				}
				public String SEDA_DENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEDA_DENTALOriginalDbColumnName(){
				
					return "SEDA_DENTAL";
				
				}

				
			    public String SELLANTE;

				public String getSELLANTE () {
					return this.SELLANTE;
				}

				public Boolean SELLANTEIsNullable(){
				    return true;
				}
				public Boolean SELLANTEIsKey(){
				    return false;
				}
				public Integer SELLANTELength(){
				    return 1;
				}
				public Integer SELLANTEPrecision(){
				    return 0;
				}
				public String SELLANTEDefault(){
				
					return null;
				
				}
				public String SELLANTEComment(){
				
				    return "";
				
				}
				public String SELLANTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SELLANTEOriginalDbColumnName(){
				
					return "SELLANTE";
				
				}

				
			    public String PERDIDA_DIENTES;

				public String getPERDIDA_DIENTES () {
					return this.PERDIDA_DIENTES;
				}

				public Boolean PERDIDA_DIENTESIsNullable(){
				    return true;
				}
				public Boolean PERDIDA_DIENTESIsKey(){
				    return false;
				}
				public Integer PERDIDA_DIENTESLength(){
				    return 4;
				}
				public Integer PERDIDA_DIENTESPrecision(){
				    return 0;
				}
				public String PERDIDA_DIENTESDefault(){
				
					return null;
				
				}
				public String PERDIDA_DIENTESComment(){
				
				    return "";
				
				}
				public String PERDIDA_DIENTESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERDIDA_DIENTESOriginalDbColumnName(){
				
					return "PERDIDA_DIENTES";
				
				}

				
			    public String CARNE;

				public String getCARNE () {
					return this.CARNE;
				}

				public Boolean CARNEIsNullable(){
				    return true;
				}
				public Boolean CARNEIsKey(){
				    return false;
				}
				public Integer CARNELength(){
				    return 4;
				}
				public Integer CARNEPrecision(){
				    return 0;
				}
				public String CARNEDefault(){
				
					return null;
				
				}
				public String CARNEComment(){
				
				    return "";
				
				}
				public String CARNEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARNEOriginalDbColumnName(){
				
					return "CARNE";
				
				}

				
			    public String ESQUEMA_EDAD;

				public String getESQUEMA_EDAD () {
					return this.ESQUEMA_EDAD;
				}

				public Boolean ESQUEMA_EDADIsNullable(){
				    return true;
				}
				public Boolean ESQUEMA_EDADIsKey(){
				    return false;
				}
				public Integer ESQUEMA_EDADLength(){
				    return 4;
				}
				public Integer ESQUEMA_EDADPrecision(){
				    return 0;
				}
				public String ESQUEMA_EDADDefault(){
				
					return null;
				
				}
				public String ESQUEMA_EDADComment(){
				
				    return "";
				
				}
				public String ESQUEMA_EDADPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESQUEMA_EDADOriginalDbColumnName(){
				
					return "ESQUEMA_EDAD";
				
				}

				
			    public String ENF_TROPICAL;

				public String getENF_TROPICAL () {
					return this.ENF_TROPICAL;
				}

				public Boolean ENF_TROPICALIsNullable(){
				    return true;
				}
				public Boolean ENF_TROPICALIsKey(){
				    return false;
				}
				public Integer ENF_TROPICALLength(){
				    return 17;
				}
				public Integer ENF_TROPICALPrecision(){
				    return 0;
				}
				public String ENF_TROPICALDefault(){
				
					return null;
				
				}
				public String ENF_TROPICALComment(){
				
				    return "";
				
				}
				public String ENF_TROPICALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_TROPICALOriginalDbColumnName(){
				
					return "ENF_TROPICAL";
				
				}

				
			    public String ENF_TRANSMISION;

				public String getENF_TRANSMISION () {
					return this.ENF_TRANSMISION;
				}

				public Boolean ENF_TRANSMISIONIsNullable(){
				    return true;
				}
				public Boolean ENF_TRANSMISIONIsKey(){
				    return false;
				}
				public Integer ENF_TRANSMISIONLength(){
				    return 4;
				}
				public Integer ENF_TRANSMISIONPrecision(){
				    return 0;
				}
				public String ENF_TRANSMISIONDefault(){
				
					return null;
				
				}
				public String ENF_TRANSMISIONComment(){
				
				    return "";
				
				}
				public String ENF_TRANSMISIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ENF_TRANSMISIONOriginalDbColumnName(){
				
					return "ENF_TRANSMISION";
				
				}

				
			    public String TRATAMIENTO_ETS;

				public String getTRATAMIENTO_ETS () {
					return this.TRATAMIENTO_ETS;
				}

				public Boolean TRATAMIENTO_ETSIsNullable(){
				    return true;
				}
				public Boolean TRATAMIENTO_ETSIsKey(){
				    return false;
				}
				public Integer TRATAMIENTO_ETSLength(){
				    return 1;
				}
				public Integer TRATAMIENTO_ETSPrecision(){
				    return 0;
				}
				public String TRATAMIENTO_ETSDefault(){
				
					return null;
				
				}
				public String TRATAMIENTO_ETSComment(){
				
				    return "";
				
				}
				public String TRATAMIENTO_ETSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRATAMIENTO_ETSOriginalDbColumnName(){
				
					return "TRATAMIENTO_ETS";
				
				}

				
			    public String PROBLEMAS_VISUALES;

				public String getPROBLEMAS_VISUALES () {
					return this.PROBLEMAS_VISUALES;
				}

				public Boolean PROBLEMAS_VISUALESIsNullable(){
				    return true;
				}
				public Boolean PROBLEMAS_VISUALESIsKey(){
				    return false;
				}
				public Integer PROBLEMAS_VISUALESLength(){
				    return 4;
				}
				public Integer PROBLEMAS_VISUALESPrecision(){
				    return 0;
				}
				public String PROBLEMAS_VISUALESDefault(){
				
					return null;
				
				}
				public String PROBLEMAS_VISUALESComment(){
				
				    return "";
				
				}
				public String PROBLEMAS_VISUALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROBLEMAS_VISUALESOriginalDbColumnName(){
				
					return "PROBLEMAS_VISUALES";
				
				}

				
			    public String PROBLEMAS_AUDITIVOS;

				public String getPROBLEMAS_AUDITIVOS () {
					return this.PROBLEMAS_AUDITIVOS;
				}

				public Boolean PROBLEMAS_AUDITIVOSIsNullable(){
				    return true;
				}
				public Boolean PROBLEMAS_AUDITIVOSIsKey(){
				    return false;
				}
				public Integer PROBLEMAS_AUDITIVOSLength(){
				    return 4;
				}
				public Integer PROBLEMAS_AUDITIVOSPrecision(){
				    return 0;
				}
				public String PROBLEMAS_AUDITIVOSDefault(){
				
					return null;
				
				}
				public String PROBLEMAS_AUDITIVOSComment(){
				
				    return "";
				
				}
				public String PROBLEMAS_AUDITIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROBLEMAS_AUDITIVOSOriginalDbColumnName(){
				
					return "PROBLEMAS_AUDITIVOS";
				
				}

				
			    public String RENDIMIENTO_ESTUDIOS;

				public String getRENDIMIENTO_ESTUDIOS () {
					return this.RENDIMIENTO_ESTUDIOS;
				}

				public Boolean RENDIMIENTO_ESTUDIOSIsNullable(){
				    return true;
				}
				public Boolean RENDIMIENTO_ESTUDIOSIsKey(){
				    return false;
				}
				public Integer RENDIMIENTO_ESTUDIOSLength(){
				    return 1;
				}
				public Integer RENDIMIENTO_ESTUDIOSPrecision(){
				    return 0;
				}
				public String RENDIMIENTO_ESTUDIOSDefault(){
				
					return null;
				
				}
				public String RENDIMIENTO_ESTUDIOSComment(){
				
				    return "";
				
				}
				public String RENDIMIENTO_ESTUDIOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RENDIMIENTO_ESTUDIOSOriginalDbColumnName(){
				
					return "RENDIMIENTO_ESTUDIOS";
				
				}

				
			    public String ACT_EXTRACURRICULAR;

				public String getACT_EXTRACURRICULAR () {
					return this.ACT_EXTRACURRICULAR;
				}

				public Boolean ACT_EXTRACURRICULARIsNullable(){
				    return true;
				}
				public Boolean ACT_EXTRACURRICULARIsKey(){
				    return false;
				}
				public Integer ACT_EXTRACURRICULARLength(){
				    return 1;
				}
				public Integer ACT_EXTRACURRICULARPrecision(){
				    return 0;
				}
				public String ACT_EXTRACURRICULARDefault(){
				
					return null;
				
				}
				public String ACT_EXTRACURRICULARComment(){
				
				    return "";
				
				}
				public String ACT_EXTRACURRICULARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_EXTRACURRICULAROriginalDbColumnName(){
				
					return "ACT_EXTRACURRICULAR";
				
				}

				
			    public String PRESION_SISTOLICA;

				public String getPRESION_SISTOLICA () {
					return this.PRESION_SISTOLICA;
				}

				public Boolean PRESION_SISTOLICAIsNullable(){
				    return true;
				}
				public Boolean PRESION_SISTOLICAIsKey(){
				    return false;
				}
				public Integer PRESION_SISTOLICALength(){
				    return 5;
				}
				public Integer PRESION_SISTOLICAPrecision(){
				    return 0;
				}
				public String PRESION_SISTOLICADefault(){
				
					return null;
				
				}
				public String PRESION_SISTOLICAComment(){
				
				    return "";
				
				}
				public String PRESION_SISTOLICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PRESION_SISTOLICAOriginalDbColumnName(){
				
					return "PRESION_SISTOLICA";
				
				}

				
			    public String PRESION_DIASTOLICA;

				public String getPRESION_DIASTOLICA () {
					return this.PRESION_DIASTOLICA;
				}

				public Boolean PRESION_DIASTOLICAIsNullable(){
				    return true;
				}
				public Boolean PRESION_DIASTOLICAIsKey(){
				    return false;
				}
				public Integer PRESION_DIASTOLICALength(){
				    return 4;
				}
				public Integer PRESION_DIASTOLICAPrecision(){
				    return 0;
				}
				public String PRESION_DIASTOLICADefault(){
				
					return null;
				
				}
				public String PRESION_DIASTOLICAComment(){
				
				    return "";
				
				}
				public String PRESION_DIASTOLICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PRESION_DIASTOLICAOriginalDbColumnName(){
				
					return "PRESION_DIASTOLICA";
				
				}

				
			    public String ACT_FISICA;

				public String getACT_FISICA () {
					return this.ACT_FISICA;
				}

				public Boolean ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean ACT_FISICAIsKey(){
				    return false;
				}
				public Integer ACT_FISICALength(){
				    return 4;
				}
				public Integer ACT_FISICAPrecision(){
				    return 0;
				}
				public String ACT_FISICADefault(){
				
					return null;
				
				}
				public String ACT_FISICAComment(){
				
				    return "";
				
				}
				public String ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ACT_FISICAOriginalDbColumnName(){
				
					return "ACT_FISICA";
				
				}

				
			    public String FREC_ACT_FISICA;

				public String getFREC_ACT_FISICA () {
					return this.FREC_ACT_FISICA;
				}

				public Boolean FREC_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean FREC_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer FREC_ACT_FISICALength(){
				    return 29;
				}
				public Integer FREC_ACT_FISICAPrecision(){
				    return 0;
				}
				public String FREC_ACT_FISICADefault(){
				
					return null;
				
				}
				public String FREC_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String FREC_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ACT_FISICAOriginalDbColumnName(){
				
					return "FREC_ACT_FISICA";
				
				}

				
			    public String DURACION_ACT_FISICA;

				public String getDURACION_ACT_FISICA () {
					return this.DURACION_ACT_FISICA;
				}

				public Boolean DURACION_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean DURACION_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer DURACION_ACT_FISICALength(){
				    return 11;
				}
				public Integer DURACION_ACT_FISICAPrecision(){
				    return 0;
				}
				public String DURACION_ACT_FISICADefault(){
				
					return null;
				
				}
				public String DURACION_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String DURACION_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DURACION_ACT_FISICAOriginalDbColumnName(){
				
					return "DURACION_ACT_FISICA";
				
				}

				
			    public String INT_ACT_FISICA;

				public String getINT_ACT_FISICA () {
					return this.INT_ACT_FISICA;
				}

				public Boolean INT_ACT_FISICAIsNullable(){
				    return true;
				}
				public Boolean INT_ACT_FISICAIsKey(){
				    return false;
				}
				public Integer INT_ACT_FISICALength(){
				    return 11;
				}
				public Integer INT_ACT_FISICAPrecision(){
				    return 0;
				}
				public String INT_ACT_FISICADefault(){
				
					return null;
				
				}
				public String INT_ACT_FISICAComment(){
				
				    return "";
				
				}
				public String INT_ACT_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String INT_ACT_FISICAOriginalDbColumnName(){
				
					return "INT_ACT_FISICA";
				
				}

				
			    public String CAIDAS;

				public String getCAIDAS () {
					return this.CAIDAS;
				}

				public Boolean CAIDASIsNullable(){
				    return true;
				}
				public Boolean CAIDASIsKey(){
				    return false;
				}
				public Integer CAIDASLength(){
				    return 4;
				}
				public Integer CAIDASPrecision(){
				    return 0;
				}
				public String CAIDASDefault(){
				
					return null;
				
				}
				public String CAIDASComment(){
				
				    return "";
				
				}
				public String CAIDASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CAIDASOriginalDbColumnName(){
				
					return "CAIDAS";
				
				}

				
			    public String DISC_FISICA;

				public String getDISC_FISICA () {
					return this.DISC_FISICA;
				}

				public Boolean DISC_FISICAIsNullable(){
				    return true;
				}
				public Boolean DISC_FISICAIsKey(){
				    return false;
				}
				public Integer DISC_FISICALength(){
				    return 9;
				}
				public Integer DISC_FISICAPrecision(){
				    return 0;
				}
				public String DISC_FISICADefault(){
				
					return null;
				
				}
				public String DISC_FISICAComment(){
				
				    return "";
				
				}
				public String DISC_FISICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISC_FISICAOriginalDbColumnName(){
				
					return "DISC_FISICA";
				
				}

				
			    public String DISC_MENTAL;

				public String getDISC_MENTAL () {
					return this.DISC_MENTAL;
				}

				public Boolean DISC_MENTALIsNullable(){
				    return true;
				}
				public Boolean DISC_MENTALIsKey(){
				    return false;
				}
				public Integer DISC_MENTALLength(){
				    return 9;
				}
				public Integer DISC_MENTALPrecision(){
				    return 0;
				}
				public String DISC_MENTALDefault(){
				
					return null;
				
				}
				public String DISC_MENTALComment(){
				
				    return "";
				
				}
				public String DISC_MENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DISC_MENTALOriginalDbColumnName(){
				
					return "DISC_MENTAL";
				
				}

				
			    public String EDAD_MESTRUACION;

				public String getEDAD_MESTRUACION () {
					return this.EDAD_MESTRUACION;
				}

				public Boolean EDAD_MESTRUACIONIsNullable(){
				    return true;
				}
				public Boolean EDAD_MESTRUACIONIsKey(){
				    return false;
				}
				public Integer EDAD_MESTRUACIONLength(){
				    return 1;
				}
				public Integer EDAD_MESTRUACIONPrecision(){
				    return 0;
				}
				public String EDAD_MESTRUACIONDefault(){
				
					return null;
				
				}
				public String EDAD_MESTRUACIONComment(){
				
				    return "";
				
				}
				public String EDAD_MESTRUACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EDAD_MESTRUACIONOriginalDbColumnName(){
				
					return "EDAD_MESTRUACION";
				
				}

				
			    public String FECHA_REGLA;

				public String getFECHA_REGLA () {
					return this.FECHA_REGLA;
				}

				public Boolean FECHA_REGLAIsNullable(){
				    return true;
				}
				public Boolean FECHA_REGLAIsKey(){
				    return false;
				}
				public Integer FECHA_REGLALength(){
				    return 1;
				}
				public Integer FECHA_REGLAPrecision(){
				    return 0;
				}
				public String FECHA_REGLADefault(){
				
					return null;
				
				}
				public String FECHA_REGLAComment(){
				
				    return "";
				
				}
				public String FECHA_REGLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_REGLAOriginalDbColumnName(){
				
					return "FECHA_REGLA";
				
				}

				
			    public String PARACLINICOS;

				public String getPARACLINICOS () {
					return this.PARACLINICOS;
				}

				public Boolean PARACLINICOSIsNullable(){
				    return true;
				}
				public Boolean PARACLINICOSIsKey(){
				    return false;
				}
				public Integer PARACLINICOSLength(){
				    return 1;
				}
				public Integer PARACLINICOSPrecision(){
				    return 0;
				}
				public String PARACLINICOSDefault(){
				
					return null;
				
				}
				public String PARACLINICOSComment(){
				
				    return "";
				
				}
				public String PARACLINICOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PARACLINICOSOriginalDbColumnName(){
				
					return "PARACLINICOS";
				
				}

				
			    public String CITOLOGIA;

				public String getCITOLOGIA () {
					return this.CITOLOGIA;
				}

				public Boolean CITOLOGIAIsNullable(){
				    return true;
				}
				public Boolean CITOLOGIAIsKey(){
				    return false;
				}
				public Integer CITOLOGIALength(){
				    return 1;
				}
				public Integer CITOLOGIAPrecision(){
				    return 0;
				}
				public String CITOLOGIADefault(){
				
					return null;
				
				}
				public String CITOLOGIAComment(){
				
				    return "";
				
				}
				public String CITOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CITOLOGIAOriginalDbColumnName(){
				
					return "CITOLOGIA";
				
				}

				
			    public String FECHA_CITOLOGIA;

				public String getFECHA_CITOLOGIA () {
					return this.FECHA_CITOLOGIA;
				}

				public Boolean FECHA_CITOLOGIAIsNullable(){
				    return true;
				}
				public Boolean FECHA_CITOLOGIAIsKey(){
				    return false;
				}
				public Integer FECHA_CITOLOGIALength(){
				    return 1;
				}
				public Integer FECHA_CITOLOGIAPrecision(){
				    return 0;
				}
				public String FECHA_CITOLOGIADefault(){
				
					return null;
				
				}
				public String FECHA_CITOLOGIAComment(){
				
				    return "";
				
				}
				public String FECHA_CITOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CITOLOGIAOriginalDbColumnName(){
				
					return "FECHA_CITOLOGIA";
				
				}

				
			    public String EXAMEN_SENO;

				public String getEXAMEN_SENO () {
					return this.EXAMEN_SENO;
				}

				public Boolean EXAMEN_SENOIsNullable(){
				    return true;
				}
				public Boolean EXAMEN_SENOIsKey(){
				    return false;
				}
				public Integer EXAMEN_SENOLength(){
				    return 1;
				}
				public Integer EXAMEN_SENOPrecision(){
				    return 0;
				}
				public String EXAMEN_SENODefault(){
				
					return null;
				
				}
				public String EXAMEN_SENOComment(){
				
				    return "";
				
				}
				public String EXAMEN_SENOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXAMEN_SENOOriginalDbColumnName(){
				
					return "EXAMEN_SENO";
				
				}

				
			    public String PLAN_FAMILIAR;

				public String getPLAN_FAMILIAR () {
					return this.PLAN_FAMILIAR;
				}

				public Boolean PLAN_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean PLAN_FAMILIARIsKey(){
				    return false;
				}
				public Integer PLAN_FAMILIARLength(){
				    return 1;
				}
				public Integer PLAN_FAMILIARPrecision(){
				    return 0;
				}
				public String PLAN_FAMILIARDefault(){
				
					return null;
				
				}
				public String PLAN_FAMILIARComment(){
				
				    return "";
				
				}
				public String PLAN_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PLAN_FAMILIAROriginalDbColumnName(){
				
					return "PLAN_FAMILIAR";
				
				}

				
			    public String METODO_PLANF;

				public String getMETODO_PLANF () {
					return this.METODO_PLANF;
				}

				public Boolean METODO_PLANFIsNullable(){
				    return true;
				}
				public Boolean METODO_PLANFIsKey(){
				    return false;
				}
				public Integer METODO_PLANFLength(){
				    return 1;
				}
				public Integer METODO_PLANFPrecision(){
				    return 0;
				}
				public String METODO_PLANFDefault(){
				
					return null;
				
				}
				public String METODO_PLANFComment(){
				
				    return "";
				
				}
				public String METODO_PLANFPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String METODO_PLANFOriginalDbColumnName(){
				
					return "METODO_PLANF";
				
				}

				
			    public String TIEMPO_MET_ANIOS;

				public String getTIEMPO_MET_ANIOS () {
					return this.TIEMPO_MET_ANIOS;
				}

				public Boolean TIEMPO_MET_ANIOSIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_ANIOSIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_ANIOSLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_ANIOSPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_ANIOSDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_ANIOSComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_ANIOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_ANIOSOriginalDbColumnName(){
				
					return "TIEMPO_MET_ANIOS";
				
				}

				
			    public String TIEMPO_MET_MESES;

				public String getTIEMPO_MET_MESES () {
					return this.TIEMPO_MET_MESES;
				}

				public Boolean TIEMPO_MET_MESESIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_MESESIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_MESESLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_MESESPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_MESESDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_MESESComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_MESESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_MESESOriginalDbColumnName(){
				
					return "TIEMPO_MET_MESES";
				
				}

				
			    public String TIEMPO_MET_DIAS;

				public String getTIEMPO_MET_DIAS () {
					return this.TIEMPO_MET_DIAS;
				}

				public Boolean TIEMPO_MET_DIASIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_MET_DIASIsKey(){
				    return false;
				}
				public Integer TIEMPO_MET_DIASLength(){
				    return 1;
				}
				public Integer TIEMPO_MET_DIASPrecision(){
				    return 0;
				}
				public String TIEMPO_MET_DIASDefault(){
				
					return null;
				
				}
				public String TIEMPO_MET_DIASComment(){
				
				    return "";
				
				}
				public String TIEMPO_MET_DIASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_MET_DIASOriginalDbColumnName(){
				
					return "TIEMPO_MET_DIAS";
				
				}

				
			    public String CONTR_PLANF_FAMILIAR;

				public String getCONTR_PLANF_FAMILIAR () {
					return this.CONTR_PLANF_FAMILIAR;
				}

				public Boolean CONTR_PLANF_FAMILIARIsNullable(){
				    return true;
				}
				public Boolean CONTR_PLANF_FAMILIARIsKey(){
				    return false;
				}
				public Integer CONTR_PLANF_FAMILIARLength(){
				    return 1;
				}
				public Integer CONTR_PLANF_FAMILIARPrecision(){
				    return 0;
				}
				public String CONTR_PLANF_FAMILIARDefault(){
				
					return null;
				
				}
				public String CONTR_PLANF_FAMILIARComment(){
				
				    return "";
				
				}
				public String CONTR_PLANF_FAMILIARPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTR_PLANF_FAMILIAROriginalDbColumnName(){
				
					return "CONTR_PLANF_FAMILIAR";
				
				}

				
			    public String EXAMEN_PROSTATA;

				public String getEXAMEN_PROSTATA () {
					return this.EXAMEN_PROSTATA;
				}

				public Boolean EXAMEN_PROSTATAIsNullable(){
				    return true;
				}
				public Boolean EXAMEN_PROSTATAIsKey(){
				    return false;
				}
				public Integer EXAMEN_PROSTATALength(){
				    return 4;
				}
				public Integer EXAMEN_PROSTATAPrecision(){
				    return 0;
				}
				public String EXAMEN_PROSTATADefault(){
				
					return null;
				
				}
				public String EXAMEN_PROSTATAComment(){
				
				    return "";
				
				}
				public String EXAMEN_PROSTATAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EXAMEN_PROSTATAOriginalDbColumnName(){
				
					return "EXAMEN_PROSTATA";
				
				}

				
			    public String PSA;

				public String getPSA () {
					return this.PSA;
				}

				public Boolean PSAIsNullable(){
				    return true;
				}
				public Boolean PSAIsKey(){
				    return false;
				}
				public Integer PSALength(){
				    return 4;
				}
				public Integer PSAPrecision(){
				    return 0;
				}
				public String PSADefault(){
				
					return null;
				
				}
				public String PSAComment(){
				
				    return "";
				
				}
				public String PSAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PSAOriginalDbColumnName(){
				
					return "PSA";
				
				}

				
			    public String FECHA_EXAMEN;

				public String getFECHA_EXAMEN () {
					return this.FECHA_EXAMEN;
				}

				public Boolean FECHA_EXAMENIsNullable(){
				    return true;
				}
				public Boolean FECHA_EXAMENIsKey(){
				    return false;
				}
				public Integer FECHA_EXAMENLength(){
				    return 1;
				}
				public Integer FECHA_EXAMENPrecision(){
				    return 0;
				}
				public String FECHA_EXAMENDefault(){
				
					return null;
				
				}
				public String FECHA_EXAMENComment(){
				
				    return "";
				
				}
				public String FECHA_EXAMENPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_EXAMENOriginalDbColumnName(){
				
					return "FECHA_EXAMEN";
				
				}

				
			    public String GESTA_CONFIRMADA;

				public String getGESTA_CONFIRMADA () {
					return this.GESTA_CONFIRMADA;
				}

				public Boolean GESTA_CONFIRMADAIsNullable(){
				    return true;
				}
				public Boolean GESTA_CONFIRMADAIsKey(){
				    return false;
				}
				public Integer GESTA_CONFIRMADALength(){
				    return 1;
				}
				public Integer GESTA_CONFIRMADAPrecision(){
				    return 0;
				}
				public String GESTA_CONFIRMADADefault(){
				
					return null;
				
				}
				public String GESTA_CONFIRMADAComment(){
				
				    return "";
				
				}
				public String GESTA_CONFIRMADAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GESTA_CONFIRMADAOriginalDbColumnName(){
				
					return "GESTA_CONFIRMADA";
				
				}

				
			    public String GESTA_PLANEADA;

				public String getGESTA_PLANEADA () {
					return this.GESTA_PLANEADA;
				}

				public Boolean GESTA_PLANEADAIsNullable(){
				    return true;
				}
				public Boolean GESTA_PLANEADAIsKey(){
				    return false;
				}
				public Integer GESTA_PLANEADALength(){
				    return 1;
				}
				public Integer GESTA_PLANEADAPrecision(){
				    return 0;
				}
				public String GESTA_PLANEADADefault(){
				
					return null;
				
				}
				public String GESTA_PLANEADAComment(){
				
				    return "";
				
				}
				public String GESTA_PLANEADAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GESTA_PLANEADAOriginalDbColumnName(){
				
					return "GESTA_PLANEADA";
				
				}

				
			    public String CONVIVENCIA_PAREJA;

				public String getCONVIVENCIA_PAREJA () {
					return this.CONVIVENCIA_PAREJA;
				}

				public Boolean CONVIVENCIA_PAREJAIsNullable(){
				    return true;
				}
				public Boolean CONVIVENCIA_PAREJAIsKey(){
				    return false;
				}
				public Integer CONVIVENCIA_PAREJALength(){
				    return 1;
				}
				public Integer CONVIVENCIA_PAREJAPrecision(){
				    return 0;
				}
				public String CONVIVENCIA_PAREJADefault(){
				
					return null;
				
				}
				public String CONVIVENCIA_PAREJAComment(){
				
				    return "";
				
				}
				public String CONVIVENCIA_PAREJAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONVIVENCIA_PAREJAOriginalDbColumnName(){
				
					return "CONVIVENCIA_PAREJA";
				
				}

				
			    public String FUR;

				public String getFUR () {
					return this.FUR;
				}

				public Boolean FURIsNullable(){
				    return true;
				}
				public Boolean FURIsKey(){
				    return false;
				}
				public Integer FURLength(){
				    return 1;
				}
				public Integer FURPrecision(){
				    return 0;
				}
				public String FURDefault(){
				
					return null;
				
				}
				public String FURComment(){
				
				    return "";
				
				}
				public String FURPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FUROriginalDbColumnName(){
				
					return "FUR";
				
				}

				
			    public String SEMANAS;

				public String getSEMANAS () {
					return this.SEMANAS;
				}

				public Boolean SEMANASIsNullable(){
				    return true;
				}
				public Boolean SEMANASIsKey(){
				    return false;
				}
				public Integer SEMANASLength(){
				    return 1;
				}
				public Integer SEMANASPrecision(){
				    return 0;
				}
				public String SEMANASDefault(){
				
					return null;
				
				}
				public String SEMANASComment(){
				
				    return "";
				
				}
				public String SEMANASPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEMANASOriginalDbColumnName(){
				
					return "SEMANAS";
				
				}

				
			    public String FECHA_PARTO;

				public String getFECHA_PARTO () {
					return this.FECHA_PARTO;
				}

				public Boolean FECHA_PARTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_PARTOIsKey(){
				    return false;
				}
				public Integer FECHA_PARTOLength(){
				    return 1;
				}
				public Integer FECHA_PARTOPrecision(){
				    return 0;
				}
				public String FECHA_PARTODefault(){
				
					return null;
				
				}
				public String FECHA_PARTOComment(){
				
				    return "";
				
				}
				public String FECHA_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_PARTOOriginalDbColumnName(){
				
					return "FECHA_PARTO";
				
				}

				
			    public String GANANCIA_PESP;

				public String getGANANCIA_PESP () {
					return this.GANANCIA_PESP;
				}

				public Boolean GANANCIA_PESPIsNullable(){
				    return true;
				}
				public Boolean GANANCIA_PESPIsKey(){
				    return false;
				}
				public Integer GANANCIA_PESPLength(){
				    return 1;
				}
				public Integer GANANCIA_PESPPrecision(){
				    return 0;
				}
				public String GANANCIA_PESPDefault(){
				
					return null;
				
				}
				public String GANANCIA_PESPComment(){
				
				    return "";
				
				}
				public String GANANCIA_PESPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GANANCIA_PESPOriginalDbColumnName(){
				
					return "GANANCIA_PESP";
				
				}

				
			    public String CARNE_EMB;

				public String getCARNE_EMB () {
					return this.CARNE_EMB;
				}

				public Boolean CARNE_EMBIsNullable(){
				    return true;
				}
				public Boolean CARNE_EMBIsKey(){
				    return false;
				}
				public Integer CARNE_EMBLength(){
				    return 1;
				}
				public Integer CARNE_EMBPrecision(){
				    return 0;
				}
				public String CARNE_EMBDefault(){
				
					return null;
				
				}
				public String CARNE_EMBComment(){
				
				    return "";
				
				}
				public String CARNE_EMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CARNE_EMBOriginalDbColumnName(){
				
					return "CARNE_EMB";
				
				}

				
			    public String CONTROL_PRENATAL;

				public String getCONTROL_PRENATAL () {
					return this.CONTROL_PRENATAL;
				}

				public Boolean CONTROL_PRENATALIsNullable(){
				    return true;
				}
				public Boolean CONTROL_PRENATALIsKey(){
				    return false;
				}
				public Integer CONTROL_PRENATALLength(){
				    return 1;
				}
				public Integer CONTROL_PRENATALPrecision(){
				    return 0;
				}
				public String CONTROL_PRENATALDefault(){
				
					return null;
				
				}
				public String CONTROL_PRENATALComment(){
				
				    return "";
				
				}
				public String CONTROL_PRENATALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTROL_PRENATALOriginalDbColumnName(){
				
					return "CONTROL_PRENATAL";
				
				}

				
			    public String QUIEN_CONTROL;

				public String getQUIEN_CONTROL () {
					return this.QUIEN_CONTROL;
				}

				public Boolean QUIEN_CONTROLIsNullable(){
				    return true;
				}
				public Boolean QUIEN_CONTROLIsKey(){
				    return false;
				}
				public Integer QUIEN_CONTROLLength(){
				    return 1;
				}
				public Integer QUIEN_CONTROLPrecision(){
				    return 0;
				}
				public String QUIEN_CONTROLDefault(){
				
					return null;
				
				}
				public String QUIEN_CONTROLComment(){
				
				    return "";
				
				}
				public String QUIEN_CONTROLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_CONTROLOriginalDbColumnName(){
				
					return "QUIEN_CONTROL";
				
				}

				
			    public String TRIMESTRE_ING_CONTROL;

				public String getTRIMESTRE_ING_CONTROL () {
					return this.TRIMESTRE_ING_CONTROL;
				}

				public Boolean TRIMESTRE_ING_CONTROLIsNullable(){
				    return true;
				}
				public Boolean TRIMESTRE_ING_CONTROLIsKey(){
				    return false;
				}
				public Integer TRIMESTRE_ING_CONTROLLength(){
				    return 1;
				}
				public Integer TRIMESTRE_ING_CONTROLPrecision(){
				    return 0;
				}
				public String TRIMESTRE_ING_CONTROLDefault(){
				
					return null;
				
				}
				public String TRIMESTRE_ING_CONTROLComment(){
				
				    return "";
				
				}
				public String TRIMESTRE_ING_CONTROLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRIMESTRE_ING_CONTROLOriginalDbColumnName(){
				
					return "TRIMESTRE_ING_CONTROL";
				
				}

				
			    public String FECHA_CONTROL_INI;

				public String getFECHA_CONTROL_INI () {
					return this.FECHA_CONTROL_INI;
				}

				public Boolean FECHA_CONTROL_INIIsNullable(){
				    return true;
				}
				public Boolean FECHA_CONTROL_INIIsKey(){
				    return false;
				}
				public Integer FECHA_CONTROL_INILength(){
				    return 1;
				}
				public Integer FECHA_CONTROL_INIPrecision(){
				    return 0;
				}
				public String FECHA_CONTROL_INIDefault(){
				
					return null;
				
				}
				public String FECHA_CONTROL_INIComment(){
				
				    return "";
				
				}
				public String FECHA_CONTROL_INIPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_CONTROL_INIOriginalDbColumnName(){
				
					return "FECHA_CONTROL_INI";
				
				}

				
			    public String VAL_ODONTOLOGIA;

				public String getVAL_ODONTOLOGIA () {
					return this.VAL_ODONTOLOGIA;
				}

				public Boolean VAL_ODONTOLOGIAIsNullable(){
				    return true;
				}
				public Boolean VAL_ODONTOLOGIAIsKey(){
				    return false;
				}
				public Integer VAL_ODONTOLOGIALength(){
				    return 1;
				}
				public Integer VAL_ODONTOLOGIAPrecision(){
				    return 0;
				}
				public String VAL_ODONTOLOGIADefault(){
				
					return null;
				
				}
				public String VAL_ODONTOLOGIAComment(){
				
				    return "";
				
				}
				public String VAL_ODONTOLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VAL_ODONTOLOGIAOriginalDbColumnName(){
				
					return "VAL_ODONTOLOGIA";
				
				}

				
			    public String VAC_GESTANTE;

				public String getVAC_GESTANTE () {
					return this.VAC_GESTANTE;
				}

				public Boolean VAC_GESTANTEIsNullable(){
				    return true;
				}
				public Boolean VAC_GESTANTEIsKey(){
				    return false;
				}
				public Integer VAC_GESTANTELength(){
				    return 1;
				}
				public Integer VAC_GESTANTEPrecision(){
				    return 0;
				}
				public String VAC_GESTANTEDefault(){
				
					return null;
				
				}
				public String VAC_GESTANTEComment(){
				
				    return "";
				
				}
				public String VAC_GESTANTEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VAC_GESTANTEOriginalDbColumnName(){
				
					return "VAC_GESTANTE";
				
				}

				
			    public String NUM_GESTACIONES;

				public String getNUM_GESTACIONES () {
					return this.NUM_GESTACIONES;
				}

				public Boolean NUM_GESTACIONESIsNullable(){
				    return true;
				}
				public Boolean NUM_GESTACIONESIsKey(){
				    return false;
				}
				public Integer NUM_GESTACIONESLength(){
				    return 1;
				}
				public Integer NUM_GESTACIONESPrecision(){
				    return 0;
				}
				public String NUM_GESTACIONESDefault(){
				
					return null;
				
				}
				public String NUM_GESTACIONESComment(){
				
				    return "";
				
				}
				public String NUM_GESTACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_GESTACIONESOriginalDbColumnName(){
				
					return "NUM_GESTACIONES";
				
				}

				
			    public String NUM_PARTOS;

				public String getNUM_PARTOS () {
					return this.NUM_PARTOS;
				}

				public Boolean NUM_PARTOSIsNullable(){
				    return true;
				}
				public Boolean NUM_PARTOSIsKey(){
				    return false;
				}
				public Integer NUM_PARTOSLength(){
				    return 1;
				}
				public Integer NUM_PARTOSPrecision(){
				    return 0;
				}
				public String NUM_PARTOSDefault(){
				
					return null;
				
				}
				public String NUM_PARTOSComment(){
				
				    return "";
				
				}
				public String NUM_PARTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_PARTOSOriginalDbColumnName(){
				
					return "NUM_PARTOS";
				
				}

				
			    public String NUM_ABORTOS;

				public String getNUM_ABORTOS () {
					return this.NUM_ABORTOS;
				}

				public Boolean NUM_ABORTOSIsNullable(){
				    return true;
				}
				public Boolean NUM_ABORTOSIsKey(){
				    return false;
				}
				public Integer NUM_ABORTOSLength(){
				    return 1;
				}
				public Integer NUM_ABORTOSPrecision(){
				    return 0;
				}
				public String NUM_ABORTOSDefault(){
				
					return null;
				
				}
				public String NUM_ABORTOSComment(){
				
				    return "";
				
				}
				public String NUM_ABORTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_ABORTOSOriginalDbColumnName(){
				
					return "NUM_ABORTOS";
				
				}

				
			    public String NUM_CESAREA;

				public String getNUM_CESAREA () {
					return this.NUM_CESAREA;
				}

				public Boolean NUM_CESAREAIsNullable(){
				    return true;
				}
				public Boolean NUM_CESAREAIsKey(){
				    return false;
				}
				public Integer NUM_CESAREALength(){
				    return 1;
				}
				public Integer NUM_CESAREAPrecision(){
				    return 0;
				}
				public String NUM_CESAREADefault(){
				
					return null;
				
				}
				public String NUM_CESAREAComment(){
				
				    return "";
				
				}
				public String NUM_CESAREAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CESAREAOriginalDbColumnName(){
				
					return "NUM_CESAREA";
				
				}

				
			    public String NUM_IVE;

				public String getNUM_IVE () {
					return this.NUM_IVE;
				}

				public Boolean NUM_IVEIsNullable(){
				    return true;
				}
				public Boolean NUM_IVEIsKey(){
				    return false;
				}
				public Integer NUM_IVELength(){
				    return 1;
				}
				public Integer NUM_IVEPrecision(){
				    return 0;
				}
				public String NUM_IVEDefault(){
				
					return null;
				
				}
				public String NUM_IVEComment(){
				
				    return "";
				
				}
				public String NUM_IVEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_IVEOriginalDbColumnName(){
				
					return "NUM_IVE";
				
				}

				
			    public String CAUSA_IVE;

				public String getCAUSA_IVE () {
					return this.CAUSA_IVE;
				}

				public Boolean CAUSA_IVEIsNullable(){
				    return true;
				}
				public Boolean CAUSA_IVEIsKey(){
				    return false;
				}
				public Integer CAUSA_IVELength(){
				    return 1;
				}
				public Integer CAUSA_IVEPrecision(){
				    return 0;
				}
				public String CAUSA_IVEDefault(){
				
					return null;
				
				}
				public String CAUSA_IVEComment(){
				
				    return "";
				
				}
				public String CAUSA_IVEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CAUSA_IVEOriginalDbColumnName(){
				
					return "CAUSA_IVE";
				
				}

				
			    public String EMB_ECTOPICO;

				public String getEMB_ECTOPICO () {
					return this.EMB_ECTOPICO;
				}

				public Boolean EMB_ECTOPICOIsNullable(){
				    return true;
				}
				public Boolean EMB_ECTOPICOIsKey(){
				    return false;
				}
				public Integer EMB_ECTOPICOLength(){
				    return 1;
				}
				public Integer EMB_ECTOPICOPrecision(){
				    return 0;
				}
				public String EMB_ECTOPICODefault(){
				
					return null;
				
				}
				public String EMB_ECTOPICOComment(){
				
				    return "";
				
				}
				public String EMB_ECTOPICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String EMB_ECTOPICOOriginalDbColumnName(){
				
					return "EMB_ECTOPICO";
				
				}

				
			    public String NUM_NACIDOS_VIVOS;

				public String getNUM_NACIDOS_VIVOS () {
					return this.NUM_NACIDOS_VIVOS;
				}

				public Boolean NUM_NACIDOS_VIVOSIsNullable(){
				    return true;
				}
				public Boolean NUM_NACIDOS_VIVOSIsKey(){
				    return false;
				}
				public Integer NUM_NACIDOS_VIVOSLength(){
				    return 1;
				}
				public Integer NUM_NACIDOS_VIVOSPrecision(){
				    return 0;
				}
				public String NUM_NACIDOS_VIVOSDefault(){
				
					return null;
				
				}
				public String NUM_NACIDOS_VIVOSComment(){
				
				    return "";
				
				}
				public String NUM_NACIDOS_VIVOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_NACIDOS_VIVOSOriginalDbColumnName(){
				
					return "NUM_NACIDOS_VIVOS";
				
				}

				
			    public String FECHA_ULT_PARTO;

				public String getFECHA_ULT_PARTO () {
					return this.FECHA_ULT_PARTO;
				}

				public Boolean FECHA_ULT_PARTOIsNullable(){
				    return true;
				}
				public Boolean FECHA_ULT_PARTOIsKey(){
				    return false;
				}
				public Integer FECHA_ULT_PARTOLength(){
				    return 1;
				}
				public Integer FECHA_ULT_PARTOPrecision(){
				    return 0;
				}
				public String FECHA_ULT_PARTODefault(){
				
					return null;
				
				}
				public String FECHA_ULT_PARTOComment(){
				
				    return "";
				
				}
				public String FECHA_ULT_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_ULT_PARTOOriginalDbColumnName(){
				
					return "FECHA_ULT_PARTO";
				
				}

				
			    public String RIESGO_OBSTETRICO;

				public String getRIESGO_OBSTETRICO () {
					return this.RIESGO_OBSTETRICO;
				}

				public Boolean RIESGO_OBSTETRICOIsNullable(){
				    return true;
				}
				public Boolean RIESGO_OBSTETRICOIsKey(){
				    return false;
				}
				public Integer RIESGO_OBSTETRICOLength(){
				    return 1;
				}
				public Integer RIESGO_OBSTETRICOPrecision(){
				    return 0;
				}
				public String RIESGO_OBSTETRICODefault(){
				
					return null;
				
				}
				public String RIESGO_OBSTETRICOComment(){
				
				    return "";
				
				}
				public String RIESGO_OBSTETRICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RIESGO_OBSTETRICOOriginalDbColumnName(){
				
					return "RIESGO_OBSTETRICO";
				
				}

				
			    public String HEMOGLOBINA;

				public String getHEMOGLOBINA () {
					return this.HEMOGLOBINA;
				}

				public Boolean HEMOGLOBINAIsNullable(){
				    return true;
				}
				public Boolean HEMOGLOBINAIsKey(){
				    return false;
				}
				public Integer HEMOGLOBINALength(){
				    return 1;
				}
				public Integer HEMOGLOBINAPrecision(){
				    return 0;
				}
				public String HEMOGLOBINADefault(){
				
					return null;
				
				}
				public String HEMOGLOBINAComment(){
				
				    return "";
				
				}
				public String HEMOGLOBINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEMOGLOBINAOriginalDbColumnName(){
				
					return "HEMOGLOBINA";
				
				}

				
			    public String SEROLOGIA;

				public String getSEROLOGIA () {
					return this.SEROLOGIA;
				}

				public Boolean SEROLOGIAIsNullable(){
				    return true;
				}
				public Boolean SEROLOGIAIsKey(){
				    return false;
				}
				public Integer SEROLOGIALength(){
				    return 1;
				}
				public Integer SEROLOGIAPrecision(){
				    return 0;
				}
				public String SEROLOGIADefault(){
				
					return null;
				
				}
				public String SEROLOGIAComment(){
				
				    return "";
				
				}
				public String SEROLOGIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEROLOGIAOriginalDbColumnName(){
				
					return "SEROLOGIA";
				
				}

				
			    public String VIH;

				public String getVIH () {
					return this.VIH;
				}

				public Boolean VIHIsNullable(){
				    return true;
				}
				public Boolean VIHIsKey(){
				    return false;
				}
				public Integer VIHLength(){
				    return 1;
				}
				public Integer VIHPrecision(){
				    return 0;
				}
				public String VIHDefault(){
				
					return null;
				
				}
				public String VIHComment(){
				
				    return "";
				
				}
				public String VIHPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIHOriginalDbColumnName(){
				
					return "VIH";
				
				}

				
			    public String SUPLEMENTACION;

				public String getSUPLEMENTACION () {
					return this.SUPLEMENTACION;
				}

				public Boolean SUPLEMENTACIONIsNullable(){
				    return true;
				}
				public Boolean SUPLEMENTACIONIsKey(){
				    return false;
				}
				public Integer SUPLEMENTACIONLength(){
				    return 1;
				}
				public Integer SUPLEMENTACIONPrecision(){
				    return 0;
				}
				public String SUPLEMENTACIONDefault(){
				
					return null;
				
				}
				public String SUPLEMENTACIONComment(){
				
				    return "";
				
				}
				public String SUPLEMENTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SUPLEMENTACIONOriginalDbColumnName(){
				
					return "SUPLEMENTACION";
				
				}

				
			    public String PERCENTIL_NUTRICIONAL;

				public String getPERCENTIL_NUTRICIONAL () {
					return this.PERCENTIL_NUTRICIONAL;
				}

				public Boolean PERCENTIL_NUTRICIONALIsNullable(){
				    return true;
				}
				public Boolean PERCENTIL_NUTRICIONALIsKey(){
				    return false;
				}
				public Integer PERCENTIL_NUTRICIONALLength(){
				    return 1;
				}
				public Integer PERCENTIL_NUTRICIONALPrecision(){
				    return 0;
				}
				public String PERCENTIL_NUTRICIONALDefault(){
				
					return null;
				
				}
				public String PERCENTIL_NUTRICIONALComment(){
				
				    return "";
				
				}
				public String PERCENTIL_NUTRICIONALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERCENTIL_NUTRICIONALOriginalDbColumnName(){
				
					return "PERCENTIL_NUTRICIONAL";
				
				}

				
			    public String TABAQUISMO;

				public String getTABAQUISMO () {
					return this.TABAQUISMO;
				}

				public Boolean TABAQUISMOIsNullable(){
				    return true;
				}
				public Boolean TABAQUISMOIsKey(){
				    return false;
				}
				public Integer TABAQUISMOLength(){
				    return 1;
				}
				public Integer TABAQUISMOPrecision(){
				    return 0;
				}
				public String TABAQUISMODefault(){
				
					return null;
				
				}
				public String TABAQUISMOComment(){
				
				    return "";
				
				}
				public String TABAQUISMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TABAQUISMOOriginalDbColumnName(){
				
					return "TABAQUISMO";
				
				}

				
			    public String NUM_CIGARRILLOS;

				public String getNUM_CIGARRILLOS () {
					return this.NUM_CIGARRILLOS;
				}

				public Boolean NUM_CIGARRILLOSIsNullable(){
				    return true;
				}
				public Boolean NUM_CIGARRILLOSIsKey(){
				    return false;
				}
				public Integer NUM_CIGARRILLOSLength(){
				    return 1;
				}
				public Integer NUM_CIGARRILLOSPrecision(){
				    return 0;
				}
				public String NUM_CIGARRILLOSDefault(){
				
					return null;
				
				}
				public String NUM_CIGARRILLOSComment(){
				
				    return "";
				
				}
				public String NUM_CIGARRILLOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NUM_CIGARRILLOSOriginalDbColumnName(){
				
					return "NUM_CIGARRILLOS";
				
				}

				
			    public String ALCOHOL;

				public String getALCOHOL () {
					return this.ALCOHOL;
				}

				public Boolean ALCOHOLIsNullable(){
				    return true;
				}
				public Boolean ALCOHOLIsKey(){
				    return false;
				}
				public Integer ALCOHOLLength(){
				    return 1;
				}
				public Integer ALCOHOLPrecision(){
				    return 0;
				}
				public String ALCOHOLDefault(){
				
					return null;
				
				}
				public String ALCOHOLComment(){
				
				    return "";
				
				}
				public String ALCOHOLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ALCOHOLOriginalDbColumnName(){
				
					return "ALCOHOL";
				
				}

				
			    public String FREC_ALCOHOL;

				public String getFREC_ALCOHOL () {
					return this.FREC_ALCOHOL;
				}

				public Boolean FREC_ALCOHOLIsNullable(){
				    return true;
				}
				public Boolean FREC_ALCOHOLIsKey(){
				    return false;
				}
				public Integer FREC_ALCOHOLLength(){
				    return 1;
				}
				public Integer FREC_ALCOHOLPrecision(){
				    return 0;
				}
				public String FREC_ALCOHOLDefault(){
				
					return null;
				
				}
				public String FREC_ALCOHOLComment(){
				
				    return "";
				
				}
				public String FREC_ALCOHOLPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FREC_ALCOHOLOriginalDbColumnName(){
				
					return "FREC_ALCOHOL";
				
				}

				
			    public String ALT_UTERINA;

				public String getALT_UTERINA () {
					return this.ALT_UTERINA;
				}

				public Boolean ALT_UTERINAIsNullable(){
				    return true;
				}
				public Boolean ALT_UTERINAIsKey(){
				    return false;
				}
				public Integer ALT_UTERINALength(){
				    return 1;
				}
				public Integer ALT_UTERINAPrecision(){
				    return 0;
				}
				public String ALT_UTERINADefault(){
				
					return null;
				
				}
				public String ALT_UTERINAComment(){
				
				    return "";
				
				}
				public String ALT_UTERINAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ALT_UTERINAOriginalDbColumnName(){
				
					return "ALT_UTERINA";
				
				}

				
			    public String SEDENTARISMO;

				public String getSEDENTARISMO () {
					return this.SEDENTARISMO;
				}

				public Boolean SEDENTARISMOIsNullable(){
				    return true;
				}
				public Boolean SEDENTARISMOIsKey(){
				    return false;
				}
				public Integer SEDENTARISMOLength(){
				    return 1;
				}
				public Integer SEDENTARISMOPrecision(){
				    return 0;
				}
				public String SEDENTARISMODefault(){
				
					return null;
				
				}
				public String SEDENTARISMOComment(){
				
				    return "";
				
				}
				public String SEDENTARISMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEDENTARISMOOriginalDbColumnName(){
				
					return "SEDENTARISMO";
				
				}

				
			    public String PARTO;

				public String getPARTO () {
					return this.PARTO;
				}

				public Boolean PARTOIsNullable(){
				    return true;
				}
				public Boolean PARTOIsKey(){
				    return false;
				}
				public Integer PARTOLength(){
				    return 1;
				}
				public Integer PARTOPrecision(){
				    return 0;
				}
				public String PARTODefault(){
				
					return null;
				
				}
				public String PARTOComment(){
				
				    return "";
				
				}
				public String PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PARTOOriginalDbColumnName(){
				
					return "PARTO";
				
				}

				
			    public String QUIEN_PARTO;

				public String getQUIEN_PARTO () {
					return this.QUIEN_PARTO;
				}

				public Boolean QUIEN_PARTOIsNullable(){
				    return true;
				}
				public Boolean QUIEN_PARTOIsKey(){
				    return false;
				}
				public Integer QUIEN_PARTOLength(){
				    return 1;
				}
				public Integer QUIEN_PARTOPrecision(){
				    return 0;
				}
				public String QUIEN_PARTODefault(){
				
					return null;
				
				}
				public String QUIEN_PARTOComment(){
				
				    return "";
				
				}
				public String QUIEN_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_PARTOOriginalDbColumnName(){
				
					return "QUIEN_PARTO";
				
				}

				
			    public String COMPLICACIONES;

				public String getCOMPLICACIONES () {
					return this.COMPLICACIONES;
				}

				public Boolean COMPLICACIONESIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONESIsKey(){
				    return false;
				}
				public Integer COMPLICACIONESLength(){
				    return 1;
				}
				public Integer COMPLICACIONESPrecision(){
				    return 0;
				}
				public String COMPLICACIONESDefault(){
				
					return null;
				
				}
				public String COMPLICACIONESComment(){
				
				    return "";
				
				}
				public String COMPLICACIONESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONESOriginalDbColumnName(){
				
					return "COMPLICACIONES";
				
				}

				
			    public String ATENCION_PARTO;

				public String getATENCION_PARTO () {
					return this.ATENCION_PARTO;
				}

				public Boolean ATENCION_PARTOIsNullable(){
				    return true;
				}
				public Boolean ATENCION_PARTOIsKey(){
				    return false;
				}
				public Integer ATENCION_PARTOLength(){
				    return 1;
				}
				public Integer ATENCION_PARTOPrecision(){
				    return 0;
				}
				public String ATENCION_PARTODefault(){
				
					return null;
				
				}
				public String ATENCION_PARTOComment(){
				
				    return "";
				
				}
				public String ATENCION_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ATENCION_PARTOOriginalDbColumnName(){
				
					return "ATENCION_PARTO";
				
				}

				
			    public String TIEMPO_GESTACION;

				public String getTIEMPO_GESTACION () {
					return this.TIEMPO_GESTACION;
				}

				public Boolean TIEMPO_GESTACIONIsNullable(){
				    return true;
				}
				public Boolean TIEMPO_GESTACIONIsKey(){
				    return false;
				}
				public Integer TIEMPO_GESTACIONLength(){
				    return 1;
				}
				public Integer TIEMPO_GESTACIONPrecision(){
				    return 0;
				}
				public String TIEMPO_GESTACIONDefault(){
				
					return null;
				
				}
				public String TIEMPO_GESTACIONComment(){
				
				    return "";
				
				}
				public String TIEMPO_GESTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TIEMPO_GESTACIONOriginalDbColumnName(){
				
					return "TIEMPO_GESTACION";
				
				}

				
			    public String ATENCION_INSTITUCIONAL;

				public String getATENCION_INSTITUCIONAL () {
					return this.ATENCION_INSTITUCIONAL;
				}

				public Boolean ATENCION_INSTITUCIONALIsNullable(){
				    return true;
				}
				public Boolean ATENCION_INSTITUCIONALIsKey(){
				    return false;
				}
				public Integer ATENCION_INSTITUCIONALLength(){
				    return 1;
				}
				public Integer ATENCION_INSTITUCIONALPrecision(){
				    return 0;
				}
				public String ATENCION_INSTITUCIONALDefault(){
				
					return null;
				
				}
				public String ATENCION_INSTITUCIONALComment(){
				
				    return "";
				
				}
				public String ATENCION_INSTITUCIONALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ATENCION_INSTITUCIONALOriginalDbColumnName(){
				
					return "ATENCION_INSTITUCIONAL";
				
				}

				
			    public String COMPLICACIONES_POSTPARTO;

				public String getCOMPLICACIONES_POSTPARTO () {
					return this.COMPLICACIONES_POSTPARTO;
				}

				public Boolean COMPLICACIONES_POSTPARTOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_POSTPARTOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_POSTPARTOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_POSTPARTOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_POSTPARTODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_POSTPARTOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_POSTPARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_POSTPARTOOriginalDbColumnName(){
				
					return "COMPLICACIONES_POSTPARTO";
				
				}

				
			    public String COMPLICACIONES_PARTO;

				public String getCOMPLICACIONES_PARTO () {
					return this.COMPLICACIONES_PARTO;
				}

				public Boolean COMPLICACIONES_PARTOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_PARTOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_PARTOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_PARTOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_PARTODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_PARTOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_PARTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_PARTOOriginalDbColumnName(){
				
					return "COMPLICACIONES_PARTO";
				
				}

				
			    public String COMPLICACIONES_EMBARAZO;

				public String getCOMPLICACIONES_EMBARAZO () {
					return this.COMPLICACIONES_EMBARAZO;
				}

				public Boolean COMPLICACIONES_EMBARAZOIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_EMBARAZOIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_EMBARAZOLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_EMBARAZOPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_EMBARAZODefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_EMBARAZOComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_EMBARAZOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_EMBARAZOOriginalDbColumnName(){
				
					return "COMPLICACIONES_EMBARAZO";
				
				}

				
			    public String PLANIFICACION;

				public String getPLANIFICACION () {
					return this.PLANIFICACION;
				}

				public Boolean PLANIFICACIONIsNullable(){
				    return true;
				}
				public Boolean PLANIFICACIONIsKey(){
				    return false;
				}
				public Integer PLANIFICACIONLength(){
				    return 1;
				}
				public Integer PLANIFICACIONPrecision(){
				    return 0;
				}
				public String PLANIFICACIONDefault(){
				
					return null;
				
				}
				public String PLANIFICACIONComment(){
				
				    return "";
				
				}
				public String PLANIFICACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PLANIFICACIONOriginalDbColumnName(){
				
					return "PLANIFICACION";
				
				}

				
			    public String CONSUME_MEDICAMENTO;

				public String getCONSUME_MEDICAMENTO () {
					return this.CONSUME_MEDICAMENTO;
				}

				public Boolean CONSUME_MEDICAMENTOIsNullable(){
				    return true;
				}
				public Boolean CONSUME_MEDICAMENTOIsKey(){
				    return false;
				}
				public Integer CONSUME_MEDICAMENTOLength(){
				    return 1;
				}
				public Integer CONSUME_MEDICAMENTOPrecision(){
				    return 0;
				}
				public String CONSUME_MEDICAMENTODefault(){
				
					return null;
				
				}
				public String CONSUME_MEDICAMENTOComment(){
				
				    return "";
				
				}
				public String CONSUME_MEDICAMENTOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSUME_MEDICAMENTOOriginalDbColumnName(){
				
					return "CONSUME_MEDICAMENTO";
				
				}

				
			    public String PESO_NACER;

				public String getPESO_NACER () {
					return this.PESO_NACER;
				}

				public Boolean PESO_NACERIsNullable(){
				    return true;
				}
				public Boolean PESO_NACERIsKey(){
				    return false;
				}
				public Integer PESO_NACERLength(){
				    return 1;
				}
				public Integer PESO_NACERPrecision(){
				    return 0;
				}
				public String PESO_NACERDefault(){
				
					return null;
				
				}
				public String PESO_NACERComment(){
				
				    return "";
				
				}
				public String PESO_NACERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PESO_NACEROriginalDbColumnName(){
				
					return "PESO_NACER";
				
				}

				
			    public String TALLA_NACER;

				public String getTALLA_NACER () {
					return this.TALLA_NACER;
				}

				public Boolean TALLA_NACERIsNullable(){
				    return true;
				}
				public Boolean TALLA_NACERIsKey(){
				    return false;
				}
				public Integer TALLA_NACERLength(){
				    return 1;
				}
				public Integer TALLA_NACERPrecision(){
				    return 0;
				}
				public String TALLA_NACERDefault(){
				
					return null;
				
				}
				public String TALLA_NACERComment(){
				
				    return "";
				
				}
				public String TALLA_NACERPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TALLA_NACEROriginalDbColumnName(){
				
					return "TALLA_NACER";
				
				}

				
			    public String PERIMETRO_CEFALICO;

				public String getPERIMETRO_CEFALICO () {
					return this.PERIMETRO_CEFALICO;
				}

				public Boolean PERIMETRO_CEFALICOIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_CEFALICOIsKey(){
				    return false;
				}
				public Integer PERIMETRO_CEFALICOLength(){
				    return 1;
				}
				public Integer PERIMETRO_CEFALICOPrecision(){
				    return 0;
				}
				public String PERIMETRO_CEFALICODefault(){
				
					return null;
				
				}
				public String PERIMETRO_CEFALICOComment(){
				
				    return "";
				
				}
				public String PERIMETRO_CEFALICOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_CEFALICOOriginalDbColumnName(){
				
					return "PERIMETRO_CEFALICO";
				
				}

				
			    public String PREMATUREZ;

				public String getPREMATUREZ () {
					return this.PREMATUREZ;
				}

				public Boolean PREMATUREZIsNullable(){
				    return true;
				}
				public Boolean PREMATUREZIsKey(){
				    return false;
				}
				public Integer PREMATUREZLength(){
				    return 1;
				}
				public Integer PREMATUREZPrecision(){
				    return 0;
				}
				public String PREMATUREZDefault(){
				
					return null;
				
				}
				public String PREMATUREZComment(){
				
				    return "";
				
				}
				public String PREMATUREZPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PREMATUREZOriginalDbColumnName(){
				
					return "PREMATUREZ";
				
				}

				
			    public String COMPLICACIONES_EMB;

				public String getCOMPLICACIONES_EMB () {
					return this.COMPLICACIONES_EMB;
				}

				public Boolean COMPLICACIONES_EMBIsNullable(){
				    return true;
				}
				public Boolean COMPLICACIONES_EMBIsKey(){
				    return false;
				}
				public Integer COMPLICACIONES_EMBLength(){
				    return 1;
				}
				public Integer COMPLICACIONES_EMBPrecision(){
				    return 0;
				}
				public String COMPLICACIONES_EMBDefault(){
				
					return null;
				
				}
				public String COMPLICACIONES_EMBComment(){
				
				    return "";
				
				}
				public String COMPLICACIONES_EMBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String COMPLICACIONES_EMBOriginalDbColumnName(){
				
					return "COMPLICACIONES_EMB";
				
				}

				
			    public String RECIBE_MED;

				public String getRECIBE_MED () {
					return this.RECIBE_MED;
				}

				public Boolean RECIBE_MEDIsNullable(){
				    return true;
				}
				public Boolean RECIBE_MEDIsKey(){
				    return false;
				}
				public Integer RECIBE_MEDLength(){
				    return 1;
				}
				public Integer RECIBE_MEDPrecision(){
				    return 0;
				}
				public String RECIBE_MEDDefault(){
				
					return null;
				
				}
				public String RECIBE_MEDComment(){
				
				    return "";
				
				}
				public String RECIBE_MEDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBE_MEDOriginalDbColumnName(){
				
					return "RECIBE_MED";
				
				}

				
			    public String REGISTRADO;

				public String getREGISTRADO () {
					return this.REGISTRADO;
				}

				public Boolean REGISTRADOIsNullable(){
				    return true;
				}
				public Boolean REGISTRADOIsKey(){
				    return false;
				}
				public Integer REGISTRADOLength(){
				    return 1;
				}
				public Integer REGISTRADOPrecision(){
				    return 0;
				}
				public String REGISTRADODefault(){
				
					return null;
				
				}
				public String REGISTRADOComment(){
				
				    return "";
				
				}
				public String REGISTRADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String REGISTRADOOriginalDbColumnName(){
				
					return "REGISTRADO";
				
				}

				
			    public String ANTECEDENTES_PERINATALES;

				public String getANTECEDENTES_PERINATALES () {
					return this.ANTECEDENTES_PERINATALES;
				}

				public Boolean ANTECEDENTES_PERINATALESIsNullable(){
				    return true;
				}
				public Boolean ANTECEDENTES_PERINATALESIsKey(){
				    return false;
				}
				public Integer ANTECEDENTES_PERINATALESLength(){
				    return 1;
				}
				public Integer ANTECEDENTES_PERINATALESPrecision(){
				    return 0;
				}
				public String ANTECEDENTES_PERINATALESDefault(){
				
					return null;
				
				}
				public String ANTECEDENTES_PERINATALESComment(){
				
				    return "";
				
				}
				public String ANTECEDENTES_PERINATALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ANTECEDENTES_PERINATALESOriginalDbColumnName(){
				
					return "ANTECEDENTES_PERINATALES";
				
				}

				
			    public String PESO_KG;

				public String getPESO_KG () {
					return this.PESO_KG;
				}

				public Boolean PESO_KGIsNullable(){
				    return true;
				}
				public Boolean PESO_KGIsKey(){
				    return false;
				}
				public Integer PESO_KGLength(){
				    return 4;
				}
				public Integer PESO_KGPrecision(){
				    return 0;
				}
				public String PESO_KGDefault(){
				
					return null;
				
				}
				public String PESO_KGComment(){
				
				    return "";
				
				}
				public String PESO_KGPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PESO_KGOriginalDbColumnName(){
				
					return "PESO_KG";
				
				}

				
			    public String TALLA;

				public String getTALLA () {
					return this.TALLA;
				}

				public Boolean TALLAIsNullable(){
				    return true;
				}
				public Boolean TALLAIsKey(){
				    return false;
				}
				public Integer TALLALength(){
				    return 5;
				}
				public Integer TALLAPrecision(){
				    return 0;
				}
				public String TALLADefault(){
				
					return null;
				
				}
				public String TALLAComment(){
				
				    return "";
				
				}
				public String TALLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TALLAOriginalDbColumnName(){
				
					return "TALLA";
				
				}

				
			    public String CONTROL_CYD;

				public String getCONTROL_CYD () {
					return this.CONTROL_CYD;
				}

				public Boolean CONTROL_CYDIsNullable(){
				    return true;
				}
				public Boolean CONTROL_CYDIsKey(){
				    return false;
				}
				public Integer CONTROL_CYDLength(){
				    return 1;
				}
				public Integer CONTROL_CYDPrecision(){
				    return 0;
				}
				public String CONTROL_CYDDefault(){
				
					return null;
				
				}
				public String CONTROL_CYDComment(){
				
				    return "";
				
				}
				public String CONTROL_CYDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTROL_CYDOriginalDbColumnName(){
				
					return "CONTROL_CYD";
				
				}

				
			    public String IMC;

				public String getIMC () {
					return this.IMC;
				}

				public Boolean IMCIsNullable(){
				    return true;
				}
				public Boolean IMCIsKey(){
				    return false;
				}
				public Integer IMCLength(){
				    return 7;
				}
				public Integer IMCPrecision(){
				    return 0;
				}
				public String IMCDefault(){
				
					return null;
				
				}
				public String IMCComment(){
				
				    return "";
				
				}
				public String IMCPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String IMCOriginalDbColumnName(){
				
					return "IMC";
				
				}

				
			    public String ESTADO_NUTRICION;

				public String getESTADO_NUTRICION () {
					return this.ESTADO_NUTRICION;
				}

				public Boolean ESTADO_NUTRICIONIsNullable(){
				    return true;
				}
				public Boolean ESTADO_NUTRICIONIsKey(){
				    return false;
				}
				public Integer ESTADO_NUTRICIONLength(){
				    return 13;
				}
				public Integer ESTADO_NUTRICIONPrecision(){
				    return 0;
				}
				public String ESTADO_NUTRICIONDefault(){
				
					return null;
				
				}
				public String ESTADO_NUTRICIONComment(){
				
				    return "";
				
				}
				public String ESTADO_NUTRICIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ESTADO_NUTRICIONOriginalDbColumnName(){
				
					return "ESTADO_NUTRICION";
				
				}

				
			    public String VALORACION_DESARROLLO;

				public String getVALORACION_DESARROLLO () {
					return this.VALORACION_DESARROLLO;
				}

				public Boolean VALORACION_DESARROLLOIsNullable(){
				    return true;
				}
				public Boolean VALORACION_DESARROLLOIsKey(){
				    return false;
				}
				public Integer VALORACION_DESARROLLOLength(){
				    return 1;
				}
				public Integer VALORACION_DESARROLLOPrecision(){
				    return 0;
				}
				public String VALORACION_DESARROLLODefault(){
				
					return null;
				
				}
				public String VALORACION_DESARROLLOComment(){
				
				    return "";
				
				}
				public String VALORACION_DESARROLLOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VALORACION_DESARROLLOOriginalDbColumnName(){
				
					return "VALORACION_DESARROLLO";
				
				}

				
			    public String LACTANCIA_6MESES;

				public String getLACTANCIA_6MESES () {
					return this.LACTANCIA_6MESES;
				}

				public Boolean LACTANCIA_6MESESIsNullable(){
				    return true;
				}
				public Boolean LACTANCIA_6MESESIsKey(){
				    return false;
				}
				public Integer LACTANCIA_6MESESLength(){
				    return 1;
				}
				public Integer LACTANCIA_6MESESPrecision(){
				    return 0;
				}
				public String LACTANCIA_6MESESDefault(){
				
					return null;
				
				}
				public String LACTANCIA_6MESESComment(){
				
				    return "";
				
				}
				public String LACTANCIA_6MESESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String LACTANCIA_6MESESOriginalDbColumnName(){
				
					return "LACTANCIA_6MESES";
				
				}

				
			    public String TOMADO_MED_HIPERTENSION;

				public String getTOMADO_MED_HIPERTENSION () {
					return this.TOMADO_MED_HIPERTENSION;
				}

				public Boolean TOMADO_MED_HIPERTENSIONIsNullable(){
				    return true;
				}
				public Boolean TOMADO_MED_HIPERTENSIONIsKey(){
				    return false;
				}
				public Integer TOMADO_MED_HIPERTENSIONLength(){
				    return 4;
				}
				public Integer TOMADO_MED_HIPERTENSIONPrecision(){
				    return 0;
				}
				public String TOMADO_MED_HIPERTENSIONDefault(){
				
					return null;
				
				}
				public String TOMADO_MED_HIPERTENSIONComment(){
				
				    return "";
				
				}
				public String TOMADO_MED_HIPERTENSIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TOMADO_MED_HIPERTENSIONOriginalDbColumnName(){
				
					return "TOMADO_MED_HIPERTENSION";
				
				}

				
			    public String PERIMETRO_ABD;

				public String getPERIMETRO_ABD () {
					return this.PERIMETRO_ABD;
				}

				public Boolean PERIMETRO_ABDIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_ABDIsKey(){
				    return false;
				}
				public Integer PERIMETRO_ABDLength(){
				    return 4;
				}
				public Integer PERIMETRO_ABDPrecision(){
				    return 0;
				}
				public String PERIMETRO_ABDDefault(){
				
					return null;
				
				}
				public String PERIMETRO_ABDComment(){
				
				    return "";
				
				}
				public String PERIMETRO_ABDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_ABDOriginalDbColumnName(){
				
					return "PERIMETRO_ABD";
				
				}

				
			    public String GLUCOSA_EMBARAZO;

				public String getGLUCOSA_EMBARAZO () {
					return this.GLUCOSA_EMBARAZO;
				}

				public Boolean GLUCOSA_EMBARAZOIsNullable(){
				    return true;
				}
				public Boolean GLUCOSA_EMBARAZOIsKey(){
				    return false;
				}
				public Integer GLUCOSA_EMBARAZOLength(){
				    return 4;
				}
				public Integer GLUCOSA_EMBARAZOPrecision(){
				    return 0;
				}
				public String GLUCOSA_EMBARAZODefault(){
				
					return null;
				
				}
				public String GLUCOSA_EMBARAZOComment(){
				
				    return "";
				
				}
				public String GLUCOSA_EMBARAZOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String GLUCOSA_EMBARAZOOriginalDbColumnName(){
				
					return "GLUCOSA_EMBARAZO";
				
				}

				
			    public String CONSUMO_VEGETALES;

				public String getCONSUMO_VEGETALES () {
					return this.CONSUMO_VEGETALES;
				}

				public Boolean CONSUMO_VEGETALESIsNullable(){
				    return true;
				}
				public Boolean CONSUMO_VEGETALESIsKey(){
				    return false;
				}
				public Integer CONSUMO_VEGETALESLength(){
				    return 4;
				}
				public Integer CONSUMO_VEGETALESPrecision(){
				    return 0;
				}
				public String CONSUMO_VEGETALESDefault(){
				
					return null;
				
				}
				public String CONSUMO_VEGETALESComment(){
				
				    return "";
				
				}
				public String CONSUMO_VEGETALESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSUMO_VEGETALESOriginalDbColumnName(){
				
					return "CONSUMO_VEGETALES";
				
				}

				
			    public String SEGURIDAD_ALIMENTARIA;

				public String getSEGURIDAD_ALIMENTARIA () {
					return this.SEGURIDAD_ALIMENTARIA;
				}

				public Boolean SEGURIDAD_ALIMENTARIAIsNullable(){
				    return true;
				}
				public Boolean SEGURIDAD_ALIMENTARIAIsKey(){
				    return false;
				}
				public Integer SEGURIDAD_ALIMENTARIALength(){
				    return 1;
				}
				public Integer SEGURIDAD_ALIMENTARIAPrecision(){
				    return 0;
				}
				public String SEGURIDAD_ALIMENTARIADefault(){
				
					return null;
				
				}
				public String SEGURIDAD_ALIMENTARIAComment(){
				
				    return "";
				
				}
				public String SEGURIDAD_ALIMENTARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SEGURIDAD_ALIMENTARIAOriginalDbColumnName(){
				
					return "SEGURIDAD_ALIMENTARIA";
				
				}

				
			    public String DESPARACITADO;

				public String getDESPARACITADO () {
					return this.DESPARACITADO;
				}

				public Boolean DESPARACITADOIsNullable(){
				    return true;
				}
				public Boolean DESPARACITADOIsKey(){
				    return false;
				}
				public Integer DESPARACITADOLength(){
				    return 1;
				}
				public Integer DESPARACITADOPrecision(){
				    return 0;
				}
				public String DESPARACITADODefault(){
				
					return null;
				
				}
				public String DESPARACITADOComment(){
				
				    return "";
				
				}
				public String DESPARACITADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DESPARACITADOOriginalDbColumnName(){
				
					return "DESPARACITADO";
				
				}

				
			    public String FECHA_DESPARACITADO;

				public String getFECHA_DESPARACITADO () {
					return this.FECHA_DESPARACITADO;
				}

				public Boolean FECHA_DESPARACITADOIsNullable(){
				    return true;
				}
				public Boolean FECHA_DESPARACITADOIsKey(){
				    return false;
				}
				public Integer FECHA_DESPARACITADOLength(){
				    return 1;
				}
				public Integer FECHA_DESPARACITADOPrecision(){
				    return 0;
				}
				public String FECHA_DESPARACITADODefault(){
				
					return null;
				
				}
				public String FECHA_DESPARACITADOComment(){
				
				    return "";
				
				}
				public String FECHA_DESPARACITADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FECHA_DESPARACITADOOriginalDbColumnName(){
				
					return "FECHA_DESPARACITADO";
				
				}

				
			    public String PROGRAMAS_INSCRITO;

				public String getPROGRAMAS_INSCRITO () {
					return this.PROGRAMAS_INSCRITO;
				}

				public Boolean PROGRAMAS_INSCRITOIsNullable(){
				    return true;
				}
				public Boolean PROGRAMAS_INSCRITOIsKey(){
				    return false;
				}
				public Integer PROGRAMAS_INSCRITOLength(){
				    return 76;
				}
				public Integer PROGRAMAS_INSCRITOPrecision(){
				    return 0;
				}
				public String PROGRAMAS_INSCRITODefault(){
				
					return null;
				
				}
				public String PROGRAMAS_INSCRITOComment(){
				
				    return "";
				
				}
				public String PROGRAMAS_INSCRITOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROGRAMAS_INSCRITOOriginalDbColumnName(){
				
					return "PROGRAMAS_INSCRITO";
				
				}

				
			    public String TRANSTORNO_ALIMENTACION;

				public String getTRANSTORNO_ALIMENTACION () {
					return this.TRANSTORNO_ALIMENTACION;
				}

				public Boolean TRANSTORNO_ALIMENTACIONIsNullable(){
				    return true;
				}
				public Boolean TRANSTORNO_ALIMENTACIONIsKey(){
				    return false;
				}
				public Integer TRANSTORNO_ALIMENTACIONLength(){
				    return 4;
				}
				public Integer TRANSTORNO_ALIMENTACIONPrecision(){
				    return 0;
				}
				public String TRANSTORNO_ALIMENTACIONDefault(){
				
					return null;
				
				}
				public String TRANSTORNO_ALIMENTACIONComment(){
				
				    return "";
				
				}
				public String TRANSTORNO_ALIMENTACIONPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TRANSTORNO_ALIMENTACIONOriginalDbColumnName(){
				
					return "TRANSTORNO_ALIMENTACION";
				
				}

				
			    public String MORB_CRONICA;

				public String getMORB_CRONICA () {
					return this.MORB_CRONICA;
				}

				public Boolean MORB_CRONICAIsNullable(){
				    return true;
				}
				public Boolean MORB_CRONICAIsKey(){
				    return false;
				}
				public Integer MORB_CRONICALength(){
				    return 39;
				}
				public Integer MORB_CRONICAPrecision(){
				    return 0;
				}
				public String MORB_CRONICADefault(){
				
					return null;
				
				}
				public String MORB_CRONICAComment(){
				
				    return "";
				
				}
				public String MORB_CRONICAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORB_CRONICAOriginalDbColumnName(){
				
					return "MORB_CRONICA";
				
				}

				
			    public String PERIMETRO_PANTORRILLA;

				public String getPERIMETRO_PANTORRILLA () {
					return this.PERIMETRO_PANTORRILLA;
				}

				public Boolean PERIMETRO_PANTORRILLAIsNullable(){
				    return true;
				}
				public Boolean PERIMETRO_PANTORRILLAIsKey(){
				    return false;
				}
				public Integer PERIMETRO_PANTORRILLALength(){
				    return 4;
				}
				public Integer PERIMETRO_PANTORRILLAPrecision(){
				    return 0;
				}
				public String PERIMETRO_PANTORRILLADefault(){
				
					return null;
				
				}
				public String PERIMETRO_PANTORRILLAComment(){
				
				    return "";
				
				}
				public String PERIMETRO_PANTORRILLAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PERIMETRO_PANTORRILLAOriginalDbColumnName(){
				
					return "PERIMETRO_PANTORRILLA";
				
				}

				
			    public String MORBILIDAD_AGUDA;

				public String getMORBILIDAD_AGUDA () {
					return this.MORBILIDAD_AGUDA;
				}

				public Boolean MORBILIDAD_AGUDAIsNullable(){
				    return true;
				}
				public Boolean MORBILIDAD_AGUDAIsKey(){
				    return false;
				}
				public Integer MORBILIDAD_AGUDALength(){
				    return 9;
				}
				public Integer MORBILIDAD_AGUDAPrecision(){
				    return 0;
				}
				public String MORBILIDAD_AGUDADefault(){
				
					return null;
				
				}
				public String MORBILIDAD_AGUDAComment(){
				
				    return "";
				
				}
				public String MORBILIDAD_AGUDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MORBILIDAD_AGUDAOriginalDbColumnName(){
				
					return "MORBILIDAD_AGUDA";
				
				}

				
			    public String BUSCA_AYUDA;

				public String getBUSCA_AYUDA () {
					return this.BUSCA_AYUDA;
				}

				public Boolean BUSCA_AYUDAIsNullable(){
				    return true;
				}
				public Boolean BUSCA_AYUDAIsKey(){
				    return false;
				}
				public Integer BUSCA_AYUDALength(){
				    return 13;
				}
				public Integer BUSCA_AYUDAPrecision(){
				    return 0;
				}
				public String BUSCA_AYUDADefault(){
				
					return null;
				
				}
				public String BUSCA_AYUDAComment(){
				
				    return "";
				
				}
				public String BUSCA_AYUDAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BUSCA_AYUDAOriginalDbColumnName(){
				
					return "BUSCA_AYUDA";
				
				}

				
			    public String PORQUE;

				public String getPORQUE () {
					return this.PORQUE;
				}

				public Boolean PORQUEIsNullable(){
				    return true;
				}
				public Boolean PORQUEIsKey(){
				    return false;
				}
				public Integer PORQUELength(){
				    return 6;
				}
				public Integer PORQUEPrecision(){
				    return 0;
				}
				public String PORQUEDefault(){
				
					return null;
				
				}
				public String PORQUEComment(){
				
				    return "";
				
				}
				public String PORQUEPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PORQUEOriginalDbColumnName(){
				
					return "PORQUE";
				
				}

				
			    public String RECIBE_MANEJO;

				public String getRECIBE_MANEJO () {
					return this.RECIBE_MANEJO;
				}

				public Boolean RECIBE_MANEJOIsNullable(){
				    return true;
				}
				public Boolean RECIBE_MANEJOIsKey(){
				    return false;
				}
				public Integer RECIBE_MANEJOLength(){
				    return 4;
				}
				public Integer RECIBE_MANEJOPrecision(){
				    return 0;
				}
				public String RECIBE_MANEJODefault(){
				
					return null;
				
				}
				public String RECIBE_MANEJOComment(){
				
				    return "";
				
				}
				public String RECIBE_MANEJOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBE_MANEJOOriginalDbColumnName(){
				
					return "RECIBE_MANEJO";
				
				}

				
			    public String QUIEN_FORMULA;

				public String getQUIEN_FORMULA () {
					return this.QUIEN_FORMULA;
				}

				public Boolean QUIEN_FORMULAIsNullable(){
				    return true;
				}
				public Boolean QUIEN_FORMULAIsKey(){
				    return false;
				}
				public Integer QUIEN_FORMULALength(){
				    return 1;
				}
				public Integer QUIEN_FORMULAPrecision(){
				    return 0;
				}
				public String QUIEN_FORMULADefault(){
				
					return null;
				
				}
				public String QUIEN_FORMULAComment(){
				
				    return "";
				
				}
				public String QUIEN_FORMULAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String QUIEN_FORMULAOriginalDbColumnName(){
				
					return "QUIEN_FORMULA";
				
				}

				
			    public String CONSULTA_SIQUIATRIA;

				public String getCONSULTA_SIQUIATRIA () {
					return this.CONSULTA_SIQUIATRIA;
				}

				public Boolean CONSULTA_SIQUIATRIAIsNullable(){
				    return true;
				}
				public Boolean CONSULTA_SIQUIATRIAIsKey(){
				    return false;
				}
				public Integer CONSULTA_SIQUIATRIALength(){
				    return 4;
				}
				public Integer CONSULTA_SIQUIATRIAPrecision(){
				    return 0;
				}
				public String CONSULTA_SIQUIATRIADefault(){
				
					return null;
				
				}
				public String CONSULTA_SIQUIATRIAComment(){
				
				    return "";
				
				}
				public String CONSULTA_SIQUIATRIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONSULTA_SIQUIATRIAOriginalDbColumnName(){
				
					return "CONSULTA_SIQUIATRIA";
				
				}

				
			    public String FORMULADO_MED_PSIQUIATRICOS;

				public String getFORMULADO_MED_PSIQUIATRICOS () {
					return this.FORMULADO_MED_PSIQUIATRICOS;
				}

				public Boolean FORMULADO_MED_PSIQUIATRICOSIsNullable(){
				    return true;
				}
				public Boolean FORMULADO_MED_PSIQUIATRICOSIsKey(){
				    return false;
				}
				public Integer FORMULADO_MED_PSIQUIATRICOSLength(){
				    return 4;
				}
				public Integer FORMULADO_MED_PSIQUIATRICOSPrecision(){
				    return 0;
				}
				public String FORMULADO_MED_PSIQUIATRICOSDefault(){
				
					return null;
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSComment(){
				
				    return "";
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FORMULADO_MED_PSIQUIATRICOSOriginalDbColumnName(){
				
					return "FORMULADO_MED_PSIQUIATRICOS";
				
				}

				
			    public String FACTORES_RIESGO;

				public String getFACTORES_RIESGO () {
					return this.FACTORES_RIESGO;
				}

				public Boolean FACTORES_RIESGOIsNullable(){
				    return true;
				}
				public Boolean FACTORES_RIESGOIsKey(){
				    return false;
				}
				public Integer FACTORES_RIESGOLength(){
				    return 37;
				}
				public Integer FACTORES_RIESGOPrecision(){
				    return 0;
				}
				public String FACTORES_RIESGODefault(){
				
					return null;
				
				}
				public String FACTORES_RIESGOComment(){
				
				    return "";
				
				}
				public String FACTORES_RIESGOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FACTORES_RIESGOOriginalDbColumnName(){
				
					return "FACTORES_RIESGO";
				
				}

				
			    public String SITUACION_ESTRES;

				public String getSITUACION_ESTRES () {
					return this.SITUACION_ESTRES;
				}

				public Boolean SITUACION_ESTRESIsNullable(){
				    return true;
				}
				public Boolean SITUACION_ESTRESIsKey(){
				    return false;
				}
				public Integer SITUACION_ESTRESLength(){
				    return 32;
				}
				public Integer SITUACION_ESTRESPrecision(){
				    return 0;
				}
				public String SITUACION_ESTRESDefault(){
				
					return null;
				
				}
				public String SITUACION_ESTRESComment(){
				
				    return "";
				
				}
				public String SITUACION_ESTRESPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SITUACION_ESTRESOriginalDbColumnName(){
				
					return "SITUACION_ESTRES";
				
				}

				
			    public String VIOLENCIA;

				public String getVIOLENCIA () {
					return this.VIOLENCIA;
				}

				public Boolean VIOLENCIAIsNullable(){
				    return true;
				}
				public Boolean VIOLENCIAIsKey(){
				    return false;
				}
				public Integer VIOLENCIALength(){
				    return 48;
				}
				public Integer VIOLENCIAPrecision(){
				    return 0;
				}
				public String VIOLENCIADefault(){
				
					return null;
				
				}
				public String VIOLENCIAComment(){
				
				    return "";
				
				}
				public String VIOLENCIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VIOLENCIAOriginalDbColumnName(){
				
					return "VIOLENCIA";
				
				}

				
			    public String ANT_CONSUMO;

				public String getANT_CONSUMO () {
					return this.ANT_CONSUMO;
				}

				public Boolean ANT_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean ANT_CONSUMOIsKey(){
				    return false;
				}
				public Integer ANT_CONSUMOLength(){
				    return 4;
				}
				public Integer ANT_CONSUMOPrecision(){
				    return 0;
				}
				public String ANT_CONSUMODefault(){
				
					return null;
				
				}
				public String ANT_CONSUMOComment(){
				
				    return "";
				
				}
				public String ANT_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ANT_CONSUMOOriginalDbColumnName(){
				
					return "ANT_CONSUMO";
				
				}

				
			    public String CUAL_ANT_CONSUMO;

				public String getCUAL_ANT_CONSUMO () {
					return this.CUAL_ANT_CONSUMO;
				}

				public Boolean CUAL_ANT_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CUAL_ANT_CONSUMOIsKey(){
				    return false;
				}
				public Integer CUAL_ANT_CONSUMOLength(){
				    return 1;
				}
				public Integer CUAL_ANT_CONSUMOPrecision(){
				    return 0;
				}
				public String CUAL_ANT_CONSUMODefault(){
				
					return null;
				
				}
				public String CUAL_ANT_CONSUMOComment(){
				
				    return "";
				
				}
				public String CUAL_ANT_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUAL_ANT_CONSUMOOriginalDbColumnName(){
				
					return "CUAL_ANT_CONSUMO";
				
				}

				
			    public String CONTINUA_CONSUMO;

				public String getCONTINUA_CONSUMO () {
					return this.CONTINUA_CONSUMO;
				}

				public Boolean CONTINUA_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CONTINUA_CONSUMOIsKey(){
				    return false;
				}
				public Integer CONTINUA_CONSUMOLength(){
				    return 1;
				}
				public Integer CONTINUA_CONSUMOPrecision(){
				    return 0;
				}
				public String CONTINUA_CONSUMODefault(){
				
					return null;
				
				}
				public String CONTINUA_CONSUMOComment(){
				
				    return "";
				
				}
				public String CONTINUA_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CONTINUA_CONSUMOOriginalDbColumnName(){
				
					return "CONTINUA_CONSUMO";
				
				}

				
			    public String CUAL_CONTINUA_CONSUMO;

				public String getCUAL_CONTINUA_CONSUMO () {
					return this.CUAL_CONTINUA_CONSUMO;
				}

				public Boolean CUAL_CONTINUA_CONSUMOIsNullable(){
				    return true;
				}
				public Boolean CUAL_CONTINUA_CONSUMOIsKey(){
				    return false;
				}
				public Integer CUAL_CONTINUA_CONSUMOLength(){
				    return 1;
				}
				public Integer CUAL_CONTINUA_CONSUMOPrecision(){
				    return 0;
				}
				public String CUAL_CONTINUA_CONSUMODefault(){
				
					return null;
				
				}
				public String CUAL_CONTINUA_CONSUMOComment(){
				
				    return "";
				
				}
				public String CUAL_CONTINUA_CONSUMOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String CUAL_CONTINUA_CONSUMOOriginalDbColumnName(){
				
					return "CUAL_CONTINUA_CONSUMO";
				
				}

				
			    public String BCG;

				public String getBCG () {
					return this.BCG;
				}

				public Boolean BCGIsNullable(){
				    return true;
				}
				public Boolean BCGIsKey(){
				    return false;
				}
				public Integer BCGLength(){
				    return 1;
				}
				public Integer BCGPrecision(){
				    return 0;
				}
				public String BCGDefault(){
				
					return null;
				
				}
				public String BCGComment(){
				
				    return "";
				
				}
				public String BCGPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String BCGOriginalDbColumnName(){
				
					return "BCG";
				
				}

				
			    public String HEPATITIS_B;

				public String getHEPATITIS_B () {
					return this.HEPATITIS_B;
				}

				public Boolean HEPATITIS_BIsNullable(){
				    return true;
				}
				public Boolean HEPATITIS_BIsKey(){
				    return false;
				}
				public Integer HEPATITIS_BLength(){
				    return 1;
				}
				public Integer HEPATITIS_BPrecision(){
				    return 0;
				}
				public String HEPATITIS_BDefault(){
				
					return null;
				
				}
				public String HEPATITIS_BComment(){
				
				    return "";
				
				}
				public String HEPATITIS_BPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEPATITIS_BOriginalDbColumnName(){
				
					return "HEPATITIS_B";
				
				}

				
			    public String POLIO;

				public String getPOLIO () {
					return this.POLIO;
				}

				public Boolean POLIOIsNullable(){
				    return true;
				}
				public Boolean POLIOIsKey(){
				    return false;
				}
				public Integer POLIOLength(){
				    return 1;
				}
				public Integer POLIOPrecision(){
				    return 0;
				}
				public String POLIODefault(){
				
					return null;
				
				}
				public String POLIOComment(){
				
				    return "";
				
				}
				public String POLIOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String POLIOOriginalDbColumnName(){
				
					return "POLIO";
				
				}

				
			    public String HIB;

				public String getHIB () {
					return this.HIB;
				}

				public Boolean HIBIsNullable(){
				    return true;
				}
				public Boolean HIBIsKey(){
				    return false;
				}
				public Integer HIBLength(){
				    return 1;
				}
				public Integer HIBPrecision(){
				    return 0;
				}
				public String HIBDefault(){
				
					return null;
				
				}
				public String HIBComment(){
				
				    return "";
				
				}
				public String HIBPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HIBOriginalDbColumnName(){
				
					return "HIB";
				
				}

				
			    public String NEUMOCOCO;

				public String getNEUMOCOCO () {
					return this.NEUMOCOCO;
				}

				public Boolean NEUMOCOCOIsNullable(){
				    return true;
				}
				public Boolean NEUMOCOCOIsKey(){
				    return false;
				}
				public Integer NEUMOCOCOLength(){
				    return 1;
				}
				public Integer NEUMOCOCOPrecision(){
				    return 0;
				}
				public String NEUMOCOCODefault(){
				
					return null;
				
				}
				public String NEUMOCOCOComment(){
				
				    return "";
				
				}
				public String NEUMOCOCOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String NEUMOCOCOOriginalDbColumnName(){
				
					return "NEUMOCOCO";
				
				}

				
			    public String ROTAVIRUS;

				public String getROTAVIRUS () {
					return this.ROTAVIRUS;
				}

				public Boolean ROTAVIRUSIsNullable(){
				    return true;
				}
				public Boolean ROTAVIRUSIsKey(){
				    return false;
				}
				public Integer ROTAVIRUSLength(){
				    return 1;
				}
				public Integer ROTAVIRUSPrecision(){
				    return 0;
				}
				public String ROTAVIRUSDefault(){
				
					return null;
				
				}
				public String ROTAVIRUSComment(){
				
				    return "";
				
				}
				public String ROTAVIRUSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ROTAVIRUSOriginalDbColumnName(){
				
					return "ROTAVIRUS";
				
				}

				
			    public String INFLUENCIA_EST;

				public String getINFLUENCIA_EST () {
					return this.INFLUENCIA_EST;
				}

				public Boolean INFLUENCIA_ESTIsNullable(){
				    return true;
				}
				public Boolean INFLUENCIA_ESTIsKey(){
				    return false;
				}
				public Integer INFLUENCIA_ESTLength(){
				    return 1;
				}
				public Integer INFLUENCIA_ESTPrecision(){
				    return 0;
				}
				public String INFLUENCIA_ESTDefault(){
				
					return null;
				
				}
				public String INFLUENCIA_ESTComment(){
				
				    return "";
				
				}
				public String INFLUENCIA_ESTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String INFLUENCIA_ESTOriginalDbColumnName(){
				
					return "INFLUENCIA_EST";
				
				}

				
			    public String SRP;

				public String getSRP () {
					return this.SRP;
				}

				public Boolean SRPIsNullable(){
				    return true;
				}
				public Boolean SRPIsKey(){
				    return false;
				}
				public Integer SRPLength(){
				    return 1;
				}
				public Integer SRPPrecision(){
				    return 0;
				}
				public String SRPDefault(){
				
					return null;
				
				}
				public String SRPComment(){
				
				    return "";
				
				}
				public String SRPPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SRPOriginalDbColumnName(){
				
					return "SRP";
				
				}

				
			    public String VARICELA;

				public String getVARICELA () {
					return this.VARICELA;
				}

				public Boolean VARICELAIsNullable(){
				    return true;
				}
				public Boolean VARICELAIsKey(){
				    return false;
				}
				public Integer VARICELALength(){
				    return 1;
				}
				public Integer VARICELAPrecision(){
				    return 0;
				}
				public String VARICELADefault(){
				
					return null;
				
				}
				public String VARICELAComment(){
				
				    return "";
				
				}
				public String VARICELAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VARICELAOriginalDbColumnName(){
				
					return "VARICELA";
				
				}

				
			    public String HEPATITIS_A;

				public String getHEPATITIS_A () {
					return this.HEPATITIS_A;
				}

				public Boolean HEPATITIS_AIsNullable(){
				    return true;
				}
				public Boolean HEPATITIS_AIsKey(){
				    return false;
				}
				public Integer HEPATITIS_ALength(){
				    return 1;
				}
				public Integer HEPATITIS_APrecision(){
				    return 0;
				}
				public String HEPATITIS_ADefault(){
				
					return null;
				
				}
				public String HEPATITIS_AComment(){
				
				    return "";
				
				}
				public String HEPATITIS_APattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HEPATITIS_AOriginalDbColumnName(){
				
					return "HEPATITIS_A";
				
				}

				
			    public String FA;

				public String getFA () {
					return this.FA;
				}

				public Boolean FAIsNullable(){
				    return true;
				}
				public Boolean FAIsKey(){
				    return false;
				}
				public Integer FALength(){
				    return 1;
				}
				public Integer FAPrecision(){
				    return 0;
				}
				public String FADefault(){
				
					return null;
				
				}
				public String FAComment(){
				
				    return "";
				
				}
				public String FAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String FAOriginalDbColumnName(){
				
					return "FA";
				
				}

				
			    public String DPT;

				public String getDPT () {
					return this.DPT;
				}

				public Boolean DPTIsNullable(){
				    return true;
				}
				public Boolean DPTIsKey(){
				    return false;
				}
				public Integer DPTLength(){
				    return 1;
				}
				public Integer DPTPrecision(){
				    return 0;
				}
				public String DPTDefault(){
				
					return null;
				
				}
				public String DPTComment(){
				
				    return "";
				
				}
				public String DPTPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String DPTOriginalDbColumnName(){
				
					return "DPT";
				
				}

				
			    public String VPH;

				public String getVPH () {
					return this.VPH;
				}

				public Boolean VPHIsNullable(){
				    return true;
				}
				public Boolean VPHIsKey(){
				    return false;
				}
				public Integer VPHLength(){
				    return 1;
				}
				public Integer VPHPrecision(){
				    return 0;
				}
				public String VPHDefault(){
				
					return null;
				
				}
				public String VPHComment(){
				
				    return "";
				
				}
				public String VPHPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VPHOriginalDbColumnName(){
				
					return "VPH";
				
				}

				
			    public String TD;

				public String getTD () {
					return this.TD;
				}

				public Boolean TDIsNullable(){
				    return true;
				}
				public Boolean TDIsKey(){
				    return false;
				}
				public Integer TDLength(){
				    return 1;
				}
				public Integer TDPrecision(){
				    return 0;
				}
				public String TDDefault(){
				
					return null;
				
				}
				public String TDComment(){
				
				    return "";
				
				}
				public String TDPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String TDOriginalDbColumnName(){
				
					return "TD";
				
				}

				
			    public String MAMOGRAFIA;

				public String getMAMOGRAFIA () {
					return this.MAMOGRAFIA;
				}

				public Boolean MAMOGRAFIAIsNullable(){
				    return true;
				}
				public Boolean MAMOGRAFIAIsKey(){
				    return false;
				}
				public Integer MAMOGRAFIALength(){
				    return 1;
				}
				public Integer MAMOGRAFIAPrecision(){
				    return 0;
				}
				public String MAMOGRAFIADefault(){
				
					return null;
				
				}
				public String MAMOGRAFIAComment(){
				
				    return "";
				
				}
				public String MAMOGRAFIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String MAMOGRAFIAOriginalDbColumnName(){
				
					return "MAMOGRAFIA";
				
				}

				
			    public String PROTESIS_DENTAL;

				public String getPROTESIS_DENTAL () {
					return this.PROTESIS_DENTAL;
				}

				public Boolean PROTESIS_DENTALIsNullable(){
				    return true;
				}
				public Boolean PROTESIS_DENTALIsKey(){
				    return false;
				}
				public Integer PROTESIS_DENTALLength(){
				    return 1;
				}
				public Integer PROTESIS_DENTALPrecision(){
				    return 0;
				}
				public String PROTESIS_DENTALDefault(){
				
					return null;
				
				}
				public String PROTESIS_DENTALComment(){
				
				    return "";
				
				}
				public String PROTESIS_DENTALPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PROTESIS_DENTALOriginalDbColumnName(){
				
					return "PROTESIS_DENTAL";
				
				}

				
			    public String RECIBIO_MEDICAMENTOS;

				public String getRECIBIO_MEDICAMENTOS () {
					return this.RECIBIO_MEDICAMENTOS;
				}

				public Boolean RECIBIO_MEDICAMENTOSIsNullable(){
				    return true;
				}
				public Boolean RECIBIO_MEDICAMENTOSIsKey(){
				    return false;
				}
				public Integer RECIBIO_MEDICAMENTOSLength(){
				    return 1;
				}
				public Integer RECIBIO_MEDICAMENTOSPrecision(){
				    return 0;
				}
				public String RECIBIO_MEDICAMENTOSDefault(){
				
					return null;
				
				}
				public String RECIBIO_MEDICAMENTOSComment(){
				
				    return "";
				
				}
				public String RECIBIO_MEDICAMENTOSPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String RECIBIO_MEDICAMENTOSOriginalDbColumnName(){
				
					return "RECIBIO_MEDICAMENTOS";
				
				}

				
			    public String VALIDADO;

				public String getVALIDADO () {
					return this.VALIDADO;
				}

				public Boolean VALIDADOIsNullable(){
				    return true;
				}
				public Boolean VALIDADOIsKey(){
				    return false;
				}
				public Integer VALIDADOLength(){
				    return 8;
				}
				public Integer VALIDADOPrecision(){
				    return 0;
				}
				public String VALIDADODefault(){
				
					return null;
				
				}
				public String VALIDADOComment(){
				
				    return "";
				
				}
				public String VALIDADOPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String VALIDADOOriginalDbColumnName(){
				
					return "VALIDADO";
				
				}

				
			    public String ECOGRAFIA_MAMARIA;

				public String getECOGRAFIA_MAMARIA () {
					return this.ECOGRAFIA_MAMARIA;
				}

				public Boolean ECOGRAFIA_MAMARIAIsNullable(){
				    return true;
				}
				public Boolean ECOGRAFIA_MAMARIAIsKey(){
				    return false;
				}
				public Integer ECOGRAFIA_MAMARIALength(){
				    return 1;
				}
				public Integer ECOGRAFIA_MAMARIAPrecision(){
				    return 0;
				}
				public String ECOGRAFIA_MAMARIADefault(){
				
					return null;
				
				}
				public String ECOGRAFIA_MAMARIAComment(){
				
				    return "";
				
				}
				public String ECOGRAFIA_MAMARIAPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ECOGRAFIA_MAMARIAOriginalDbColumnName(){
				
					return "ECOGRAFIA_MAMARIA";
				
				}

				
			    public String INF_SUM_USUARIO;

				public String getINF_SUM_USUARIO () {
					return this.INF_SUM_USUARIO;
				}

				public Boolean INF_SUM_USUARIOIsNullable(){
				    return true;
				}
				public Boolean INF_SUM_USUARIOIsKey(){
				    return false;
				}
				public Integer INF_SUM_USUARIOLength(){
				    return null;
				}
				public Integer INF_SUM_USUARIOPrecision(){
				    return null;
				}
				public String INF_SUM_USUARIODefault(){
				
					return null;
				
				}
				public String INF_SUM_USUARIOComment(){
				
				    return "";
				
				}
				public String INF_SUM_USUARIOPattern(){
				
					return "";
				
				}
				public String INF_SUM_USUARIOOriginalDbColumnName(){
				
					return "INF_SUM_USUARIO";
				
				}

				
			    public String NIVEL_INGRESO;

				public String getNIVEL_INGRESO () {
					return this.NIVEL_INGRESO;
				}

				public Boolean NIVEL_INGRESOIsNullable(){
				    return true;
				}
				public Boolean NIVEL_INGRESOIsKey(){
				    return false;
				}
				public Integer NIVEL_INGRESOLength(){
				    return null;
				}
				public Integer NIVEL_INGRESOPrecision(){
				    return null;
				}
				public String NIVEL_INGRESODefault(){
				
					return null;
				
				}
				public String NIVEL_INGRESOComment(){
				
				    return "";
				
				}
				public String NIVEL_INGRESOPattern(){
				
					return "";
				
				}
				public String NIVEL_INGRESOOriginalDbColumnName(){
				
					return "NIVEL_INGRESO";
				
				}

				
			    public String DIFTERIA2;

				public String getDIFTERIA2 () {
					return this.DIFTERIA2;
				}

				public Boolean DIFTERIA2IsNullable(){
				    return true;
				}
				public Boolean DIFTERIA2IsKey(){
				    return false;
				}
				public Integer DIFTERIA2Length(){
				    return null;
				}
				public Integer DIFTERIA2Precision(){
				    return null;
				}
				public String DIFTERIA2Default(){
				
					return null;
				
				}
				public String DIFTERIA2Comment(){
				
				    return "";
				
				}
				public String DIFTERIA2Pattern(){
				
					return "";
				
				}
				public String DIFTERIA2OriginalDbColumnName(){
				
					return "DIFTERIA2";
				
				}

				
			    public String DIFTERIA3;

				public String getDIFTERIA3 () {
					return this.DIFTERIA3;
				}

				public Boolean DIFTERIA3IsNullable(){
				    return true;
				}
				public Boolean DIFTERIA3IsKey(){
				    return false;
				}
				public Integer DIFTERIA3Length(){
				    return null;
				}
				public Integer DIFTERIA3Precision(){
				    return null;
				}
				public String DIFTERIA3Default(){
				
					return null;
				
				}
				public String DIFTERIA3Comment(){
				
				    return "";
				
				}
				public String DIFTERIA3Pattern(){
				
					return "";
				
				}
				public String DIFTERIA3OriginalDbColumnName(){
				
					return "DIFTERIA3";
				
				}

				
			    public String POLIO2;

				public String getPOLIO2 () {
					return this.POLIO2;
				}

				public Boolean POLIO2IsNullable(){
				    return true;
				}
				public Boolean POLIO2IsKey(){
				    return false;
				}
				public Integer POLIO2Length(){
				    return null;
				}
				public Integer POLIO2Precision(){
				    return null;
				}
				public String POLIO2Default(){
				
					return null;
				
				}
				public String POLIO2Comment(){
				
				    return "";
				
				}
				public String POLIO2Pattern(){
				
					return "";
				
				}
				public String POLIO2OriginalDbColumnName(){
				
					return "POLIO2";
				
				}

				
			    public String POLIO3;

				public String getPOLIO3 () {
					return this.POLIO3;
				}

				public Boolean POLIO3IsNullable(){
				    return true;
				}
				public Boolean POLIO3IsKey(){
				    return false;
				}
				public Integer POLIO3Length(){
				    return null;
				}
				public Integer POLIO3Precision(){
				    return null;
				}
				public String POLIO3Default(){
				
					return null;
				
				}
				public String POLIO3Comment(){
				
				    return "";
				
				}
				public String POLIO3Pattern(){
				
					return "";
				
				}
				public String POLIO3OriginalDbColumnName(){
				
					return "POLIO3";
				
				}

				
			    public String SARAMPION2;

				public String getSARAMPION2 () {
					return this.SARAMPION2;
				}

				public Boolean SARAMPION2IsNullable(){
				    return true;
				}
				public Boolean SARAMPION2IsKey(){
				    return false;
				}
				public Integer SARAMPION2Length(){
				    return null;
				}
				public Integer SARAMPION2Precision(){
				    return null;
				}
				public String SARAMPION2Default(){
				
					return null;
				
				}
				public String SARAMPION2Comment(){
				
				    return "";
				
				}
				public String SARAMPION2Pattern(){
				
					return "";
				
				}
				public String SARAMPION2OriginalDbColumnName(){
				
					return "SARAMPION2";
				
				}

				
			    public String INFLUENZA2;

				public String getINFLUENZA2 () {
					return this.INFLUENZA2;
				}

				public Boolean INFLUENZA2IsNullable(){
				    return true;
				}
				public Boolean INFLUENZA2IsKey(){
				    return false;
				}
				public Integer INFLUENZA2Length(){
				    return null;
				}
				public Integer INFLUENZA2Precision(){
				    return null;
				}
				public String INFLUENZA2Default(){
				
					return null;
				
				}
				public String INFLUENZA2Comment(){
				
				    return "";
				
				}
				public String INFLUENZA2Pattern(){
				
					return "";
				
				}
				public String INFLUENZA2OriginalDbColumnName(){
				
					return "INFLUENZA2";
				
				}

				
			    public String VACUNACION_NOPAI;

				public String getVACUNACION_NOPAI () {
					return this.VACUNACION_NOPAI;
				}

				public Boolean VACUNACION_NOPAIIsNullable(){
				    return true;
				}
				public Boolean VACUNACION_NOPAIIsKey(){
				    return false;
				}
				public Integer VACUNACION_NOPAILength(){
				    return null;
				}
				public Integer VACUNACION_NOPAIPrecision(){
				    return null;
				}
				public String VACUNACION_NOPAIDefault(){
				
					return null;
				
				}
				public String VACUNACION_NOPAIComment(){
				
				    return "";
				
				}
				public String VACUNACION_NOPAIPattern(){
				
					return "";
				
				}
				public String VACUNACION_NOPAIOriginalDbColumnName(){
				
					return "VACUNACION_NOPAI";
				
				}

				
			    public String OBSERVACIONES;

				public String getOBSERVACIONES () {
					return this.OBSERVACIONES;
				}

				public Boolean OBSERVACIONESIsNullable(){
				    return true;
				}
				public Boolean OBSERVACIONESIsKey(){
				    return false;
				}
				public Integer OBSERVACIONESLength(){
				    return null;
				}
				public Integer OBSERVACIONESPrecision(){
				    return null;
				}
				public String OBSERVACIONESDefault(){
				
					return null;
				
				}
				public String OBSERVACIONESComment(){
				
				    return "";
				
				}
				public String OBSERVACIONESPattern(){
				
					return "";
				
				}
				public String OBSERVACIONESOriginalDbColumnName(){
				
					return "OBSERVACIONES";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.PERSONA_ID;
						
							result = prime * result + (int) this.FICHA_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tFileInputDelimited_1Struct other = (after_tFileInputDelimited_1Struct) obj;
		
						if (this.PERSONA_ID != other.PERSONA_ID)
							return false;
					
						if (this.FICHA_ID != other.FICHA_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tFileInputDelimited_1Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            other.FICHA_ID = this.FICHA_ID;
	            other.TREGIMEN_SALUD = this.TREGIMEN_SALUD;
	            other.EPS = this.EPS;
	            other.FREGISTRO = this.FREGISTRO;
	            other.RECOMENDACIONES = this.RECOMENDACIONES;
	            other.FORMACION = this.FORMACION;
	            other.EXPANSION = this.EXPANSION;
	            other.CONSOLIDACION = this.CONSOLIDACION;
	            other.APERTURA = this.APERTURA;
	            other.POSPARENTAL = this.POSPARENTAL;
	            other.DISOLUCION = this.DISOLUCION;
	            other.ESTFAMILIAR = this.ESTFAMILIAR;
	            other.TIPO_VIVIENDA = this.TIPO_VIVIENDA;
	            other.CUARTOS = this.CUARTOS;
	            other.UBICACION = this.UBICACION;
	            other.BANOS = this.BANOS;
	            other.TENENCIA = this.TENENCIA;
	            other.TRESPORCUARTO = this.TRESPORCUARTO;
	            other.TIPOHAB = this.TIPOHAB;
	            other.ACT_PRODUCTIVA = this.ACT_PRODUCTIVA;
	            other.MAQUINARIA = this.MAQUINARIA;
	            other.EXCRETAS = this.EXCRETAS;
	            other.MEDIOS_COMUNICACION = this.MEDIOS_COMUNICACION;
	            other.TIPO_ALUMBRADO = this.TIPO_ALUMBRADO;
	            other.MASCOTAS = this.MASCOTAS;
	            other.MASCOTAS_VAC = this.MASCOTAS_VAC;
	            other.DISP_BASURAS = this.DISP_BASURAS;
	            other.VECTORES = this.VECTORES;
	            other.PROB_ACCIDENTE = this.PROB_ACCIDENTE;
	            other.CONT_AMB = this.CONT_AMB;
	            other.ABAST_AGUA = this.ABAST_AGUA;
	            other.TRATA_CASA_AGUA = this.TRATA_CASA_AGUA;
	            other.TRATA_AGUA_FUENTE = this.TRATA_AGUA_FUENTE;
	            other.TIPO_COCINA = this.TIPO_COCINA;
	            other.HUMO_VIVIENDA = this.HUMO_VIVIENDA;
	            other.COCINA_CONSTRU_MATERIAL = this.COCINA_CONSTRU_MATERIAL;
	            other.COCINA_VIVIENDA = this.COCINA_VIVIENDA;
	            other.COMBUSTIBLE_COCINA = this.COMBUSTIBLE_COCINA;
	            other.COCINA_DORMITORIO = this.COCINA_DORMITORIO;
	            other.TIPO_PISOS = this.TIPO_PISOS;
	            other.TIPO_TECHOS = this.TIPO_TECHOS;
	            other.TIPO_PAREDES = this.TIPO_PAREDES;
	            other.VIVIENDA_2KM = this.VIVIENDA_2KM;
	            other.BARRERAS_ACCESOS = this.BARRERAS_ACCESOS;
	            other.DIST_SALUD_CERCANO = this.DIST_SALUD_CERCANO;
	            other.MEDIO_TRANSPORTE = this.MEDIO_TRANSPORTE;
	            other.VIA_ACCESO = this.VIA_ACCESO;
	            other.NACIDOS_VIVOS = this.NACIDOS_VIVOS;
	            other.MORTALIDAD = this.MORTALIDAD;
	            other.HIPERTENSION = this.HIPERTENSION;
	            other.DIABETES = this.DIABETES;
	            other.ENF_CARDIACAS = this.ENF_CARDIACAS;
	            other.CANCER = this.CANCER;
	            other.ENF_RENAL = this.ENF_RENAL;
	            other.ENF_CONGENITA = this.ENF_CONGENITA;
	            other.MENTALES = this.MENTALES;
	            other.AYUDA_FAMI_NECES = this.AYUDA_FAMI_NECES;
	            other.AYUDA_FAMI_PROYEC = this.AYUDA_FAMI_PROYEC;
	            other.APOYO_FAMI_SENTIM = this.APOYO_FAMI_SENTIM;
	            other.DECISIONES_HOGAR = this.DECISIONES_HOGAR;
	            other.COM_INTRAFAMILIAR = this.COM_INTRAFAMILIAR;
	            other.ACT_FAMILIAR = this.ACT_FAMILIAR;
	            other.DISFRUTA_ACTIVIDADES = this.DISFRUTA_ACTIVIDADES;
	            other.CEPILLADO = this.CEPILLADO;
	            other.NUM_CEPILLADO = this.NUM_CEPILLADO;
	            other.CARIES = this.CARIES;
	            other.ODONTOLOGO = this.ODONTOLOGO;
	            other.FREC_ODONTOLOGO = this.FREC_ODONTOLOGO;
	            other.FULTIMA_ODONTOLOGIA = this.FULTIMA_ODONTOLOGIA;
	            other.TOP_FLUOR = this.TOP_FLUOR;
	            other.SEDA_DENTAL = this.SEDA_DENTAL;
	            other.SELLANTE = this.SELLANTE;
	            other.PERDIDA_DIENTES = this.PERDIDA_DIENTES;
	            other.CARNE = this.CARNE;
	            other.ESQUEMA_EDAD = this.ESQUEMA_EDAD;
	            other.ENF_TROPICAL = this.ENF_TROPICAL;
	            other.ENF_TRANSMISION = this.ENF_TRANSMISION;
	            other.TRATAMIENTO_ETS = this.TRATAMIENTO_ETS;
	            other.PROBLEMAS_VISUALES = this.PROBLEMAS_VISUALES;
	            other.PROBLEMAS_AUDITIVOS = this.PROBLEMAS_AUDITIVOS;
	            other.RENDIMIENTO_ESTUDIOS = this.RENDIMIENTO_ESTUDIOS;
	            other.ACT_EXTRACURRICULAR = this.ACT_EXTRACURRICULAR;
	            other.PRESION_SISTOLICA = this.PRESION_SISTOLICA;
	            other.PRESION_DIASTOLICA = this.PRESION_DIASTOLICA;
	            other.ACT_FISICA = this.ACT_FISICA;
	            other.FREC_ACT_FISICA = this.FREC_ACT_FISICA;
	            other.DURACION_ACT_FISICA = this.DURACION_ACT_FISICA;
	            other.INT_ACT_FISICA = this.INT_ACT_FISICA;
	            other.CAIDAS = this.CAIDAS;
	            other.DISC_FISICA = this.DISC_FISICA;
	            other.DISC_MENTAL = this.DISC_MENTAL;
	            other.EDAD_MESTRUACION = this.EDAD_MESTRUACION;
	            other.FECHA_REGLA = this.FECHA_REGLA;
	            other.PARACLINICOS = this.PARACLINICOS;
	            other.CITOLOGIA = this.CITOLOGIA;
	            other.FECHA_CITOLOGIA = this.FECHA_CITOLOGIA;
	            other.EXAMEN_SENO = this.EXAMEN_SENO;
	            other.PLAN_FAMILIAR = this.PLAN_FAMILIAR;
	            other.METODO_PLANF = this.METODO_PLANF;
	            other.TIEMPO_MET_ANIOS = this.TIEMPO_MET_ANIOS;
	            other.TIEMPO_MET_MESES = this.TIEMPO_MET_MESES;
	            other.TIEMPO_MET_DIAS = this.TIEMPO_MET_DIAS;
	            other.CONTR_PLANF_FAMILIAR = this.CONTR_PLANF_FAMILIAR;
	            other.EXAMEN_PROSTATA = this.EXAMEN_PROSTATA;
	            other.PSA = this.PSA;
	            other.FECHA_EXAMEN = this.FECHA_EXAMEN;
	            other.GESTA_CONFIRMADA = this.GESTA_CONFIRMADA;
	            other.GESTA_PLANEADA = this.GESTA_PLANEADA;
	            other.CONVIVENCIA_PAREJA = this.CONVIVENCIA_PAREJA;
	            other.FUR = this.FUR;
	            other.SEMANAS = this.SEMANAS;
	            other.FECHA_PARTO = this.FECHA_PARTO;
	            other.GANANCIA_PESP = this.GANANCIA_PESP;
	            other.CARNE_EMB = this.CARNE_EMB;
	            other.CONTROL_PRENATAL = this.CONTROL_PRENATAL;
	            other.QUIEN_CONTROL = this.QUIEN_CONTROL;
	            other.TRIMESTRE_ING_CONTROL = this.TRIMESTRE_ING_CONTROL;
	            other.FECHA_CONTROL_INI = this.FECHA_CONTROL_INI;
	            other.VAL_ODONTOLOGIA = this.VAL_ODONTOLOGIA;
	            other.VAC_GESTANTE = this.VAC_GESTANTE;
	            other.NUM_GESTACIONES = this.NUM_GESTACIONES;
	            other.NUM_PARTOS = this.NUM_PARTOS;
	            other.NUM_ABORTOS = this.NUM_ABORTOS;
	            other.NUM_CESAREA = this.NUM_CESAREA;
	            other.NUM_IVE = this.NUM_IVE;
	            other.CAUSA_IVE = this.CAUSA_IVE;
	            other.EMB_ECTOPICO = this.EMB_ECTOPICO;
	            other.NUM_NACIDOS_VIVOS = this.NUM_NACIDOS_VIVOS;
	            other.FECHA_ULT_PARTO = this.FECHA_ULT_PARTO;
	            other.RIESGO_OBSTETRICO = this.RIESGO_OBSTETRICO;
	            other.HEMOGLOBINA = this.HEMOGLOBINA;
	            other.SEROLOGIA = this.SEROLOGIA;
	            other.VIH = this.VIH;
	            other.SUPLEMENTACION = this.SUPLEMENTACION;
	            other.PERCENTIL_NUTRICIONAL = this.PERCENTIL_NUTRICIONAL;
	            other.TABAQUISMO = this.TABAQUISMO;
	            other.NUM_CIGARRILLOS = this.NUM_CIGARRILLOS;
	            other.ALCOHOL = this.ALCOHOL;
	            other.FREC_ALCOHOL = this.FREC_ALCOHOL;
	            other.ALT_UTERINA = this.ALT_UTERINA;
	            other.SEDENTARISMO = this.SEDENTARISMO;
	            other.PARTO = this.PARTO;
	            other.QUIEN_PARTO = this.QUIEN_PARTO;
	            other.COMPLICACIONES = this.COMPLICACIONES;
	            other.ATENCION_PARTO = this.ATENCION_PARTO;
	            other.TIEMPO_GESTACION = this.TIEMPO_GESTACION;
	            other.ATENCION_INSTITUCIONAL = this.ATENCION_INSTITUCIONAL;
	            other.COMPLICACIONES_POSTPARTO = this.COMPLICACIONES_POSTPARTO;
	            other.COMPLICACIONES_PARTO = this.COMPLICACIONES_PARTO;
	            other.COMPLICACIONES_EMBARAZO = this.COMPLICACIONES_EMBARAZO;
	            other.PLANIFICACION = this.PLANIFICACION;
	            other.CONSUME_MEDICAMENTO = this.CONSUME_MEDICAMENTO;
	            other.PESO_NACER = this.PESO_NACER;
	            other.TALLA_NACER = this.TALLA_NACER;
	            other.PERIMETRO_CEFALICO = this.PERIMETRO_CEFALICO;
	            other.PREMATUREZ = this.PREMATUREZ;
	            other.COMPLICACIONES_EMB = this.COMPLICACIONES_EMB;
	            other.RECIBE_MED = this.RECIBE_MED;
	            other.REGISTRADO = this.REGISTRADO;
	            other.ANTECEDENTES_PERINATALES = this.ANTECEDENTES_PERINATALES;
	            other.PESO_KG = this.PESO_KG;
	            other.TALLA = this.TALLA;
	            other.CONTROL_CYD = this.CONTROL_CYD;
	            other.IMC = this.IMC;
	            other.ESTADO_NUTRICION = this.ESTADO_NUTRICION;
	            other.VALORACION_DESARROLLO = this.VALORACION_DESARROLLO;
	            other.LACTANCIA_6MESES = this.LACTANCIA_6MESES;
	            other.TOMADO_MED_HIPERTENSION = this.TOMADO_MED_HIPERTENSION;
	            other.PERIMETRO_ABD = this.PERIMETRO_ABD;
	            other.GLUCOSA_EMBARAZO = this.GLUCOSA_EMBARAZO;
	            other.CONSUMO_VEGETALES = this.CONSUMO_VEGETALES;
	            other.SEGURIDAD_ALIMENTARIA = this.SEGURIDAD_ALIMENTARIA;
	            other.DESPARACITADO = this.DESPARACITADO;
	            other.FECHA_DESPARACITADO = this.FECHA_DESPARACITADO;
	            other.PROGRAMAS_INSCRITO = this.PROGRAMAS_INSCRITO;
	            other.TRANSTORNO_ALIMENTACION = this.TRANSTORNO_ALIMENTACION;
	            other.MORB_CRONICA = this.MORB_CRONICA;
	            other.PERIMETRO_PANTORRILLA = this.PERIMETRO_PANTORRILLA;
	            other.MORBILIDAD_AGUDA = this.MORBILIDAD_AGUDA;
	            other.BUSCA_AYUDA = this.BUSCA_AYUDA;
	            other.PORQUE = this.PORQUE;
	            other.RECIBE_MANEJO = this.RECIBE_MANEJO;
	            other.QUIEN_FORMULA = this.QUIEN_FORMULA;
	            other.CONSULTA_SIQUIATRIA = this.CONSULTA_SIQUIATRIA;
	            other.FORMULADO_MED_PSIQUIATRICOS = this.FORMULADO_MED_PSIQUIATRICOS;
	            other.FACTORES_RIESGO = this.FACTORES_RIESGO;
	            other.SITUACION_ESTRES = this.SITUACION_ESTRES;
	            other.VIOLENCIA = this.VIOLENCIA;
	            other.ANT_CONSUMO = this.ANT_CONSUMO;
	            other.CUAL_ANT_CONSUMO = this.CUAL_ANT_CONSUMO;
	            other.CONTINUA_CONSUMO = this.CONTINUA_CONSUMO;
	            other.CUAL_CONTINUA_CONSUMO = this.CUAL_CONTINUA_CONSUMO;
	            other.BCG = this.BCG;
	            other.HEPATITIS_B = this.HEPATITIS_B;
	            other.POLIO = this.POLIO;
	            other.HIB = this.HIB;
	            other.NEUMOCOCO = this.NEUMOCOCO;
	            other.ROTAVIRUS = this.ROTAVIRUS;
	            other.INFLUENCIA_EST = this.INFLUENCIA_EST;
	            other.SRP = this.SRP;
	            other.VARICELA = this.VARICELA;
	            other.HEPATITIS_A = this.HEPATITIS_A;
	            other.FA = this.FA;
	            other.DPT = this.DPT;
	            other.VPH = this.VPH;
	            other.TD = this.TD;
	            other.MAMOGRAFIA = this.MAMOGRAFIA;
	            other.PROTESIS_DENTAL = this.PROTESIS_DENTAL;
	            other.RECIBIO_MEDICAMENTOS = this.RECIBIO_MEDICAMENTOS;
	            other.VALIDADO = this.VALIDADO;
	            other.ECOGRAFIA_MAMARIA = this.ECOGRAFIA_MAMARIA;
	            other.INF_SUM_USUARIO = this.INF_SUM_USUARIO;
	            other.NIVEL_INGRESO = this.NIVEL_INGRESO;
	            other.DIFTERIA2 = this.DIFTERIA2;
	            other.DIFTERIA3 = this.DIFTERIA3;
	            other.POLIO2 = this.POLIO2;
	            other.POLIO3 = this.POLIO3;
	            other.SARAMPION2 = this.SARAMPION2;
	            other.INFLUENZA2 = this.INFLUENZA2;
	            other.VACUNACION_NOPAI = this.VACUNACION_NOPAI;
	            other.OBSERVACIONES = this.OBSERVACIONES;
	            
	}

	public void copyKeysDataTo(after_tFileInputDelimited_1Struct other) {

		other.PERSONA_ID = this.PERSONA_ID;
	            	other.FICHA_ID = this.FICHA_ID;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.PERSONA_ID = dis.readInt();
					
			        this.FICHA_ID = dis.readInt();
					
					this.TREGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.FORMACION = readString(dis);
					
					this.EXPANSION = readString(dis);
					
					this.CONSOLIDACION = readString(dis);
					
					this.APERTURA = readString(dis);
					
					this.POSPARENTAL = readString(dis);
					
					this.DISOLUCION = readString(dis);
					
					this.ESTFAMILIAR = readString(dis);
					
					this.TIPO_VIVIENDA = readString(dis);
					
					this.CUARTOS = readString(dis);
					
					this.UBICACION = readString(dis);
					
					this.BANOS = readString(dis);
					
					this.TENENCIA = readString(dis);
					
					this.TRESPORCUARTO = readString(dis);
					
					this.TIPOHAB = readString(dis);
					
					this.ACT_PRODUCTIVA = readString(dis);
					
					this.MAQUINARIA = readString(dis);
					
					this.EXCRETAS = readString(dis);
					
					this.MEDIOS_COMUNICACION = readString(dis);
					
					this.TIPO_ALUMBRADO = readString(dis);
					
					this.MASCOTAS = readString(dis);
					
					this.MASCOTAS_VAC = readString(dis);
					
					this.DISP_BASURAS = readString(dis);
					
					this.VECTORES = readString(dis);
					
					this.PROB_ACCIDENTE = readString(dis);
					
					this.CONT_AMB = readString(dis);
					
					this.ABAST_AGUA = readString(dis);
					
					this.TRATA_CASA_AGUA = readString(dis);
					
					this.TRATA_AGUA_FUENTE = readString(dis);
					
					this.TIPO_COCINA = readString(dis);
					
					this.HUMO_VIVIENDA = readString(dis);
					
					this.COCINA_CONSTRU_MATERIAL = readString(dis);
					
					this.COCINA_VIVIENDA = readString(dis);
					
					this.COMBUSTIBLE_COCINA = readString(dis);
					
					this.COCINA_DORMITORIO = readString(dis);
					
					this.TIPO_PISOS = readString(dis);
					
					this.TIPO_TECHOS = readString(dis);
					
					this.TIPO_PAREDES = readString(dis);
					
					this.VIVIENDA_2KM = readString(dis);
					
					this.BARRERAS_ACCESOS = readString(dis);
					
					this.DIST_SALUD_CERCANO = readString(dis);
					
					this.MEDIO_TRANSPORTE = readString(dis);
					
					this.VIA_ACCESO = readString(dis);
					
					this.NACIDOS_VIVOS = readString(dis);
					
					this.MORTALIDAD = readString(dis);
					
					this.HIPERTENSION = readString(dis);
					
					this.DIABETES = readString(dis);
					
					this.ENF_CARDIACAS = readString(dis);
					
					this.CANCER = readString(dis);
					
					this.ENF_RENAL = readString(dis);
					
					this.ENF_CONGENITA = readString(dis);
					
					this.MENTALES = readString(dis);
					
					this.AYUDA_FAMI_NECES = readString(dis);
					
					this.AYUDA_FAMI_PROYEC = readString(dis);
					
					this.APOYO_FAMI_SENTIM = readString(dis);
					
					this.DECISIONES_HOGAR = readString(dis);
					
					this.COM_INTRAFAMILIAR = readString(dis);
					
					this.ACT_FAMILIAR = readString(dis);
					
					this.DISFRUTA_ACTIVIDADES = readString(dis);
					
					this.CEPILLADO = readString(dis);
					
					this.NUM_CEPILLADO = readString(dis);
					
					this.CARIES = readString(dis);
					
					this.ODONTOLOGO = readString(dis);
					
					this.FREC_ODONTOLOGO = readString(dis);
					
					this.FULTIMA_ODONTOLOGIA = readString(dis);
					
					this.TOP_FLUOR = readString(dis);
					
					this.SEDA_DENTAL = readString(dis);
					
					this.SELLANTE = readString(dis);
					
					this.PERDIDA_DIENTES = readString(dis);
					
					this.CARNE = readString(dis);
					
					this.ESQUEMA_EDAD = readString(dis);
					
					this.ENF_TROPICAL = readString(dis);
					
					this.ENF_TRANSMISION = readString(dis);
					
					this.TRATAMIENTO_ETS = readString(dis);
					
					this.PROBLEMAS_VISUALES = readString(dis);
					
					this.PROBLEMAS_AUDITIVOS = readString(dis);
					
					this.RENDIMIENTO_ESTUDIOS = readString(dis);
					
					this.ACT_EXTRACURRICULAR = readString(dis);
					
					this.PRESION_SISTOLICA = readString(dis);
					
					this.PRESION_DIASTOLICA = readString(dis);
					
					this.ACT_FISICA = readString(dis);
					
					this.FREC_ACT_FISICA = readString(dis);
					
					this.DURACION_ACT_FISICA = readString(dis);
					
					this.INT_ACT_FISICA = readString(dis);
					
					this.CAIDAS = readString(dis);
					
					this.DISC_FISICA = readString(dis);
					
					this.DISC_MENTAL = readString(dis);
					
					this.EDAD_MESTRUACION = readString(dis);
					
					this.FECHA_REGLA = readString(dis);
					
					this.PARACLINICOS = readString(dis);
					
					this.CITOLOGIA = readString(dis);
					
					this.FECHA_CITOLOGIA = readString(dis);
					
					this.EXAMEN_SENO = readString(dis);
					
					this.PLAN_FAMILIAR = readString(dis);
					
					this.METODO_PLANF = readString(dis);
					
					this.TIEMPO_MET_ANIOS = readString(dis);
					
					this.TIEMPO_MET_MESES = readString(dis);
					
					this.TIEMPO_MET_DIAS = readString(dis);
					
					this.CONTR_PLANF_FAMILIAR = readString(dis);
					
					this.EXAMEN_PROSTATA = readString(dis);
					
					this.PSA = readString(dis);
					
					this.FECHA_EXAMEN = readString(dis);
					
					this.GESTA_CONFIRMADA = readString(dis);
					
					this.GESTA_PLANEADA = readString(dis);
					
					this.CONVIVENCIA_PAREJA = readString(dis);
					
					this.FUR = readString(dis);
					
					this.SEMANAS = readString(dis);
					
					this.FECHA_PARTO = readString(dis);
					
					this.GANANCIA_PESP = readString(dis);
					
					this.CARNE_EMB = readString(dis);
					
					this.CONTROL_PRENATAL = readString(dis);
					
					this.QUIEN_CONTROL = readString(dis);
					
					this.TRIMESTRE_ING_CONTROL = readString(dis);
					
					this.FECHA_CONTROL_INI = readString(dis);
					
					this.VAL_ODONTOLOGIA = readString(dis);
					
					this.VAC_GESTANTE = readString(dis);
					
					this.NUM_GESTACIONES = readString(dis);
					
					this.NUM_PARTOS = readString(dis);
					
					this.NUM_ABORTOS = readString(dis);
					
					this.NUM_CESAREA = readString(dis);
					
					this.NUM_IVE = readString(dis);
					
					this.CAUSA_IVE = readString(dis);
					
					this.EMB_ECTOPICO = readString(dis);
					
					this.NUM_NACIDOS_VIVOS = readString(dis);
					
					this.FECHA_ULT_PARTO = readString(dis);
					
					this.RIESGO_OBSTETRICO = readString(dis);
					
					this.HEMOGLOBINA = readString(dis);
					
					this.SEROLOGIA = readString(dis);
					
					this.VIH = readString(dis);
					
					this.SUPLEMENTACION = readString(dis);
					
					this.PERCENTIL_NUTRICIONAL = readString(dis);
					
					this.TABAQUISMO = readString(dis);
					
					this.NUM_CIGARRILLOS = readString(dis);
					
					this.ALCOHOL = readString(dis);
					
					this.FREC_ALCOHOL = readString(dis);
					
					this.ALT_UTERINA = readString(dis);
					
					this.SEDENTARISMO = readString(dis);
					
					this.PARTO = readString(dis);
					
					this.QUIEN_PARTO = readString(dis);
					
					this.COMPLICACIONES = readString(dis);
					
					this.ATENCION_PARTO = readString(dis);
					
					this.TIEMPO_GESTACION = readString(dis);
					
					this.ATENCION_INSTITUCIONAL = readString(dis);
					
					this.COMPLICACIONES_POSTPARTO = readString(dis);
					
					this.COMPLICACIONES_PARTO = readString(dis);
					
					this.COMPLICACIONES_EMBARAZO = readString(dis);
					
					this.PLANIFICACION = readString(dis);
					
					this.CONSUME_MEDICAMENTO = readString(dis);
					
					this.PESO_NACER = readString(dis);
					
					this.TALLA_NACER = readString(dis);
					
					this.PERIMETRO_CEFALICO = readString(dis);
					
					this.PREMATUREZ = readString(dis);
					
					this.COMPLICACIONES_EMB = readString(dis);
					
					this.RECIBE_MED = readString(dis);
					
					this.REGISTRADO = readString(dis);
					
					this.ANTECEDENTES_PERINATALES = readString(dis);
					
					this.PESO_KG = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.CONTROL_CYD = readString(dis);
					
					this.IMC = readString(dis);
					
					this.ESTADO_NUTRICION = readString(dis);
					
					this.VALORACION_DESARROLLO = readString(dis);
					
					this.LACTANCIA_6MESES = readString(dis);
					
					this.TOMADO_MED_HIPERTENSION = readString(dis);
					
					this.PERIMETRO_ABD = readString(dis);
					
					this.GLUCOSA_EMBARAZO = readString(dis);
					
					this.CONSUMO_VEGETALES = readString(dis);
					
					this.SEGURIDAD_ALIMENTARIA = readString(dis);
					
					this.DESPARACITADO = readString(dis);
					
					this.FECHA_DESPARACITADO = readString(dis);
					
					this.PROGRAMAS_INSCRITO = readString(dis);
					
					this.TRANSTORNO_ALIMENTACION = readString(dis);
					
					this.MORB_CRONICA = readString(dis);
					
					this.PERIMETRO_PANTORRILLA = readString(dis);
					
					this.MORBILIDAD_AGUDA = readString(dis);
					
					this.BUSCA_AYUDA = readString(dis);
					
					this.PORQUE = readString(dis);
					
					this.RECIBE_MANEJO = readString(dis);
					
					this.QUIEN_FORMULA = readString(dis);
					
					this.CONSULTA_SIQUIATRIA = readString(dis);
					
					this.FORMULADO_MED_PSIQUIATRICOS = readString(dis);
					
					this.FACTORES_RIESGO = readString(dis);
					
					this.SITUACION_ESTRES = readString(dis);
					
					this.VIOLENCIA = readString(dis);
					
					this.ANT_CONSUMO = readString(dis);
					
					this.CUAL_ANT_CONSUMO = readString(dis);
					
					this.CONTINUA_CONSUMO = readString(dis);
					
					this.CUAL_CONTINUA_CONSUMO = readString(dis);
					
					this.BCG = readString(dis);
					
					this.HEPATITIS_B = readString(dis);
					
					this.POLIO = readString(dis);
					
					this.HIB = readString(dis);
					
					this.NEUMOCOCO = readString(dis);
					
					this.ROTAVIRUS = readString(dis);
					
					this.INFLUENCIA_EST = readString(dis);
					
					this.SRP = readString(dis);
					
					this.VARICELA = readString(dis);
					
					this.HEPATITIS_A = readString(dis);
					
					this.FA = readString(dis);
					
					this.DPT = readString(dis);
					
					this.VPH = readString(dis);
					
					this.TD = readString(dis);
					
					this.MAMOGRAFIA = readString(dis);
					
					this.PROTESIS_DENTAL = readString(dis);
					
					this.RECIBIO_MEDICAMENTOS = readString(dis);
					
					this.VALIDADO = readString(dis);
					
					this.ECOGRAFIA_MAMARIA = readString(dis);
					
					this.INF_SUM_USUARIO = readString(dis);
					
					this.NIVEL_INGRESO = readString(dis);
					
					this.DIFTERIA2 = readString(dis);
					
					this.DIFTERIA3 = readString(dis);
					
					this.POLIO2 = readString(dis);
					
					this.POLIO3 = readString(dis);
					
					this.SARAMPION2 = readString(dis);
					
					this.INFLUENZA2 = readString(dis);
					
					this.VACUNACION_NOPAI = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.PERSONA_ID = dis.readInt();
					
			        this.FICHA_ID = dis.readInt();
					
					this.TREGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
					this.FORMACION = readString(dis);
					
					this.EXPANSION = readString(dis);
					
					this.CONSOLIDACION = readString(dis);
					
					this.APERTURA = readString(dis);
					
					this.POSPARENTAL = readString(dis);
					
					this.DISOLUCION = readString(dis);
					
					this.ESTFAMILIAR = readString(dis);
					
					this.TIPO_VIVIENDA = readString(dis);
					
					this.CUARTOS = readString(dis);
					
					this.UBICACION = readString(dis);
					
					this.BANOS = readString(dis);
					
					this.TENENCIA = readString(dis);
					
					this.TRESPORCUARTO = readString(dis);
					
					this.TIPOHAB = readString(dis);
					
					this.ACT_PRODUCTIVA = readString(dis);
					
					this.MAQUINARIA = readString(dis);
					
					this.EXCRETAS = readString(dis);
					
					this.MEDIOS_COMUNICACION = readString(dis);
					
					this.TIPO_ALUMBRADO = readString(dis);
					
					this.MASCOTAS = readString(dis);
					
					this.MASCOTAS_VAC = readString(dis);
					
					this.DISP_BASURAS = readString(dis);
					
					this.VECTORES = readString(dis);
					
					this.PROB_ACCIDENTE = readString(dis);
					
					this.CONT_AMB = readString(dis);
					
					this.ABAST_AGUA = readString(dis);
					
					this.TRATA_CASA_AGUA = readString(dis);
					
					this.TRATA_AGUA_FUENTE = readString(dis);
					
					this.TIPO_COCINA = readString(dis);
					
					this.HUMO_VIVIENDA = readString(dis);
					
					this.COCINA_CONSTRU_MATERIAL = readString(dis);
					
					this.COCINA_VIVIENDA = readString(dis);
					
					this.COMBUSTIBLE_COCINA = readString(dis);
					
					this.COCINA_DORMITORIO = readString(dis);
					
					this.TIPO_PISOS = readString(dis);
					
					this.TIPO_TECHOS = readString(dis);
					
					this.TIPO_PAREDES = readString(dis);
					
					this.VIVIENDA_2KM = readString(dis);
					
					this.BARRERAS_ACCESOS = readString(dis);
					
					this.DIST_SALUD_CERCANO = readString(dis);
					
					this.MEDIO_TRANSPORTE = readString(dis);
					
					this.VIA_ACCESO = readString(dis);
					
					this.NACIDOS_VIVOS = readString(dis);
					
					this.MORTALIDAD = readString(dis);
					
					this.HIPERTENSION = readString(dis);
					
					this.DIABETES = readString(dis);
					
					this.ENF_CARDIACAS = readString(dis);
					
					this.CANCER = readString(dis);
					
					this.ENF_RENAL = readString(dis);
					
					this.ENF_CONGENITA = readString(dis);
					
					this.MENTALES = readString(dis);
					
					this.AYUDA_FAMI_NECES = readString(dis);
					
					this.AYUDA_FAMI_PROYEC = readString(dis);
					
					this.APOYO_FAMI_SENTIM = readString(dis);
					
					this.DECISIONES_HOGAR = readString(dis);
					
					this.COM_INTRAFAMILIAR = readString(dis);
					
					this.ACT_FAMILIAR = readString(dis);
					
					this.DISFRUTA_ACTIVIDADES = readString(dis);
					
					this.CEPILLADO = readString(dis);
					
					this.NUM_CEPILLADO = readString(dis);
					
					this.CARIES = readString(dis);
					
					this.ODONTOLOGO = readString(dis);
					
					this.FREC_ODONTOLOGO = readString(dis);
					
					this.FULTIMA_ODONTOLOGIA = readString(dis);
					
					this.TOP_FLUOR = readString(dis);
					
					this.SEDA_DENTAL = readString(dis);
					
					this.SELLANTE = readString(dis);
					
					this.PERDIDA_DIENTES = readString(dis);
					
					this.CARNE = readString(dis);
					
					this.ESQUEMA_EDAD = readString(dis);
					
					this.ENF_TROPICAL = readString(dis);
					
					this.ENF_TRANSMISION = readString(dis);
					
					this.TRATAMIENTO_ETS = readString(dis);
					
					this.PROBLEMAS_VISUALES = readString(dis);
					
					this.PROBLEMAS_AUDITIVOS = readString(dis);
					
					this.RENDIMIENTO_ESTUDIOS = readString(dis);
					
					this.ACT_EXTRACURRICULAR = readString(dis);
					
					this.PRESION_SISTOLICA = readString(dis);
					
					this.PRESION_DIASTOLICA = readString(dis);
					
					this.ACT_FISICA = readString(dis);
					
					this.FREC_ACT_FISICA = readString(dis);
					
					this.DURACION_ACT_FISICA = readString(dis);
					
					this.INT_ACT_FISICA = readString(dis);
					
					this.CAIDAS = readString(dis);
					
					this.DISC_FISICA = readString(dis);
					
					this.DISC_MENTAL = readString(dis);
					
					this.EDAD_MESTRUACION = readString(dis);
					
					this.FECHA_REGLA = readString(dis);
					
					this.PARACLINICOS = readString(dis);
					
					this.CITOLOGIA = readString(dis);
					
					this.FECHA_CITOLOGIA = readString(dis);
					
					this.EXAMEN_SENO = readString(dis);
					
					this.PLAN_FAMILIAR = readString(dis);
					
					this.METODO_PLANF = readString(dis);
					
					this.TIEMPO_MET_ANIOS = readString(dis);
					
					this.TIEMPO_MET_MESES = readString(dis);
					
					this.TIEMPO_MET_DIAS = readString(dis);
					
					this.CONTR_PLANF_FAMILIAR = readString(dis);
					
					this.EXAMEN_PROSTATA = readString(dis);
					
					this.PSA = readString(dis);
					
					this.FECHA_EXAMEN = readString(dis);
					
					this.GESTA_CONFIRMADA = readString(dis);
					
					this.GESTA_PLANEADA = readString(dis);
					
					this.CONVIVENCIA_PAREJA = readString(dis);
					
					this.FUR = readString(dis);
					
					this.SEMANAS = readString(dis);
					
					this.FECHA_PARTO = readString(dis);
					
					this.GANANCIA_PESP = readString(dis);
					
					this.CARNE_EMB = readString(dis);
					
					this.CONTROL_PRENATAL = readString(dis);
					
					this.QUIEN_CONTROL = readString(dis);
					
					this.TRIMESTRE_ING_CONTROL = readString(dis);
					
					this.FECHA_CONTROL_INI = readString(dis);
					
					this.VAL_ODONTOLOGIA = readString(dis);
					
					this.VAC_GESTANTE = readString(dis);
					
					this.NUM_GESTACIONES = readString(dis);
					
					this.NUM_PARTOS = readString(dis);
					
					this.NUM_ABORTOS = readString(dis);
					
					this.NUM_CESAREA = readString(dis);
					
					this.NUM_IVE = readString(dis);
					
					this.CAUSA_IVE = readString(dis);
					
					this.EMB_ECTOPICO = readString(dis);
					
					this.NUM_NACIDOS_VIVOS = readString(dis);
					
					this.FECHA_ULT_PARTO = readString(dis);
					
					this.RIESGO_OBSTETRICO = readString(dis);
					
					this.HEMOGLOBINA = readString(dis);
					
					this.SEROLOGIA = readString(dis);
					
					this.VIH = readString(dis);
					
					this.SUPLEMENTACION = readString(dis);
					
					this.PERCENTIL_NUTRICIONAL = readString(dis);
					
					this.TABAQUISMO = readString(dis);
					
					this.NUM_CIGARRILLOS = readString(dis);
					
					this.ALCOHOL = readString(dis);
					
					this.FREC_ALCOHOL = readString(dis);
					
					this.ALT_UTERINA = readString(dis);
					
					this.SEDENTARISMO = readString(dis);
					
					this.PARTO = readString(dis);
					
					this.QUIEN_PARTO = readString(dis);
					
					this.COMPLICACIONES = readString(dis);
					
					this.ATENCION_PARTO = readString(dis);
					
					this.TIEMPO_GESTACION = readString(dis);
					
					this.ATENCION_INSTITUCIONAL = readString(dis);
					
					this.COMPLICACIONES_POSTPARTO = readString(dis);
					
					this.COMPLICACIONES_PARTO = readString(dis);
					
					this.COMPLICACIONES_EMBARAZO = readString(dis);
					
					this.PLANIFICACION = readString(dis);
					
					this.CONSUME_MEDICAMENTO = readString(dis);
					
					this.PESO_NACER = readString(dis);
					
					this.TALLA_NACER = readString(dis);
					
					this.PERIMETRO_CEFALICO = readString(dis);
					
					this.PREMATUREZ = readString(dis);
					
					this.COMPLICACIONES_EMB = readString(dis);
					
					this.RECIBE_MED = readString(dis);
					
					this.REGISTRADO = readString(dis);
					
					this.ANTECEDENTES_PERINATALES = readString(dis);
					
					this.PESO_KG = readString(dis);
					
					this.TALLA = readString(dis);
					
					this.CONTROL_CYD = readString(dis);
					
					this.IMC = readString(dis);
					
					this.ESTADO_NUTRICION = readString(dis);
					
					this.VALORACION_DESARROLLO = readString(dis);
					
					this.LACTANCIA_6MESES = readString(dis);
					
					this.TOMADO_MED_HIPERTENSION = readString(dis);
					
					this.PERIMETRO_ABD = readString(dis);
					
					this.GLUCOSA_EMBARAZO = readString(dis);
					
					this.CONSUMO_VEGETALES = readString(dis);
					
					this.SEGURIDAD_ALIMENTARIA = readString(dis);
					
					this.DESPARACITADO = readString(dis);
					
					this.FECHA_DESPARACITADO = readString(dis);
					
					this.PROGRAMAS_INSCRITO = readString(dis);
					
					this.TRANSTORNO_ALIMENTACION = readString(dis);
					
					this.MORB_CRONICA = readString(dis);
					
					this.PERIMETRO_PANTORRILLA = readString(dis);
					
					this.MORBILIDAD_AGUDA = readString(dis);
					
					this.BUSCA_AYUDA = readString(dis);
					
					this.PORQUE = readString(dis);
					
					this.RECIBE_MANEJO = readString(dis);
					
					this.QUIEN_FORMULA = readString(dis);
					
					this.CONSULTA_SIQUIATRIA = readString(dis);
					
					this.FORMULADO_MED_PSIQUIATRICOS = readString(dis);
					
					this.FACTORES_RIESGO = readString(dis);
					
					this.SITUACION_ESTRES = readString(dis);
					
					this.VIOLENCIA = readString(dis);
					
					this.ANT_CONSUMO = readString(dis);
					
					this.CUAL_ANT_CONSUMO = readString(dis);
					
					this.CONTINUA_CONSUMO = readString(dis);
					
					this.CUAL_CONTINUA_CONSUMO = readString(dis);
					
					this.BCG = readString(dis);
					
					this.HEPATITIS_B = readString(dis);
					
					this.POLIO = readString(dis);
					
					this.HIB = readString(dis);
					
					this.NEUMOCOCO = readString(dis);
					
					this.ROTAVIRUS = readString(dis);
					
					this.INFLUENCIA_EST = readString(dis);
					
					this.SRP = readString(dis);
					
					this.VARICELA = readString(dis);
					
					this.HEPATITIS_A = readString(dis);
					
					this.FA = readString(dis);
					
					this.DPT = readString(dis);
					
					this.VPH = readString(dis);
					
					this.TD = readString(dis);
					
					this.MAMOGRAFIA = readString(dis);
					
					this.PROTESIS_DENTAL = readString(dis);
					
					this.RECIBIO_MEDICAMENTOS = readString(dis);
					
					this.VALIDADO = readString(dis);
					
					this.ECOGRAFIA_MAMARIA = readString(dis);
					
					this.INF_SUM_USUARIO = readString(dis);
					
					this.NIVEL_INGRESO = readString(dis);
					
					this.DIFTERIA2 = readString(dis);
					
					this.DIFTERIA3 = readString(dis);
					
					this.POLIO2 = readString(dis);
					
					this.POLIO3 = readString(dis);
					
					this.SARAMPION2 = readString(dis);
					
					this.INFLUENZA2 = readString(dis);
					
					this.VACUNACION_NOPAI = readString(dis);
					
					this.OBSERVACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.FORMACION,dos);
					
					// String
				
						writeString(this.EXPANSION,dos);
					
					// String
				
						writeString(this.CONSOLIDACION,dos);
					
					// String
				
						writeString(this.APERTURA,dos);
					
					// String
				
						writeString(this.POSPARENTAL,dos);
					
					// String
				
						writeString(this.DISOLUCION,dos);
					
					// String
				
						writeString(this.ESTFAMILIAR,dos);
					
					// String
				
						writeString(this.TIPO_VIVIENDA,dos);
					
					// String
				
						writeString(this.CUARTOS,dos);
					
					// String
				
						writeString(this.UBICACION,dos);
					
					// String
				
						writeString(this.BANOS,dos);
					
					// String
				
						writeString(this.TENENCIA,dos);
					
					// String
				
						writeString(this.TRESPORCUARTO,dos);
					
					// String
				
						writeString(this.TIPOHAB,dos);
					
					// String
				
						writeString(this.ACT_PRODUCTIVA,dos);
					
					// String
				
						writeString(this.MAQUINARIA,dos);
					
					// String
				
						writeString(this.EXCRETAS,dos);
					
					// String
				
						writeString(this.MEDIOS_COMUNICACION,dos);
					
					// String
				
						writeString(this.TIPO_ALUMBRADO,dos);
					
					// String
				
						writeString(this.MASCOTAS,dos);
					
					// String
				
						writeString(this.MASCOTAS_VAC,dos);
					
					// String
				
						writeString(this.DISP_BASURAS,dos);
					
					// String
				
						writeString(this.VECTORES,dos);
					
					// String
				
						writeString(this.PROB_ACCIDENTE,dos);
					
					// String
				
						writeString(this.CONT_AMB,dos);
					
					// String
				
						writeString(this.ABAST_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_CASA_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_AGUA_FUENTE,dos);
					
					// String
				
						writeString(this.TIPO_COCINA,dos);
					
					// String
				
						writeString(this.HUMO_VIVIENDA,dos);
					
					// String
				
						writeString(this.COCINA_CONSTRU_MATERIAL,dos);
					
					// String
				
						writeString(this.COCINA_VIVIENDA,dos);
					
					// String
				
						writeString(this.COMBUSTIBLE_COCINA,dos);
					
					// String
				
						writeString(this.COCINA_DORMITORIO,dos);
					
					// String
				
						writeString(this.TIPO_PISOS,dos);
					
					// String
				
						writeString(this.TIPO_TECHOS,dos);
					
					// String
				
						writeString(this.TIPO_PAREDES,dos);
					
					// String
				
						writeString(this.VIVIENDA_2KM,dos);
					
					// String
				
						writeString(this.BARRERAS_ACCESOS,dos);
					
					// String
				
						writeString(this.DIST_SALUD_CERCANO,dos);
					
					// String
				
						writeString(this.MEDIO_TRANSPORTE,dos);
					
					// String
				
						writeString(this.VIA_ACCESO,dos);
					
					// String
				
						writeString(this.NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.MORTALIDAD,dos);
					
					// String
				
						writeString(this.HIPERTENSION,dos);
					
					// String
				
						writeString(this.DIABETES,dos);
					
					// String
				
						writeString(this.ENF_CARDIACAS,dos);
					
					// String
				
						writeString(this.CANCER,dos);
					
					// String
				
						writeString(this.ENF_RENAL,dos);
					
					// String
				
						writeString(this.ENF_CONGENITA,dos);
					
					// String
				
						writeString(this.MENTALES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_NECES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_PROYEC,dos);
					
					// String
				
						writeString(this.APOYO_FAMI_SENTIM,dos);
					
					// String
				
						writeString(this.DECISIONES_HOGAR,dos);
					
					// String
				
						writeString(this.COM_INTRAFAMILIAR,dos);
					
					// String
				
						writeString(this.ACT_FAMILIAR,dos);
					
					// String
				
						writeString(this.DISFRUTA_ACTIVIDADES,dos);
					
					// String
				
						writeString(this.CEPILLADO,dos);
					
					// String
				
						writeString(this.NUM_CEPILLADO,dos);
					
					// String
				
						writeString(this.CARIES,dos);
					
					// String
				
						writeString(this.ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FREC_ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FULTIMA_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.TOP_FLUOR,dos);
					
					// String
				
						writeString(this.SEDA_DENTAL,dos);
					
					// String
				
						writeString(this.SELLANTE,dos);
					
					// String
				
						writeString(this.PERDIDA_DIENTES,dos);
					
					// String
				
						writeString(this.CARNE,dos);
					
					// String
				
						writeString(this.ESQUEMA_EDAD,dos);
					
					// String
				
						writeString(this.ENF_TROPICAL,dos);
					
					// String
				
						writeString(this.ENF_TRANSMISION,dos);
					
					// String
				
						writeString(this.TRATAMIENTO_ETS,dos);
					
					// String
				
						writeString(this.PROBLEMAS_VISUALES,dos);
					
					// String
				
						writeString(this.PROBLEMAS_AUDITIVOS,dos);
					
					// String
				
						writeString(this.RENDIMIENTO_ESTUDIOS,dos);
					
					// String
				
						writeString(this.ACT_EXTRACURRICULAR,dos);
					
					// String
				
						writeString(this.PRESION_SISTOLICA,dos);
					
					// String
				
						writeString(this.PRESION_DIASTOLICA,dos);
					
					// String
				
						writeString(this.ACT_FISICA,dos);
					
					// String
				
						writeString(this.FREC_ACT_FISICA,dos);
					
					// String
				
						writeString(this.DURACION_ACT_FISICA,dos);
					
					// String
				
						writeString(this.INT_ACT_FISICA,dos);
					
					// String
				
						writeString(this.CAIDAS,dos);
					
					// String
				
						writeString(this.DISC_FISICA,dos);
					
					// String
				
						writeString(this.DISC_MENTAL,dos);
					
					// String
				
						writeString(this.EDAD_MESTRUACION,dos);
					
					// String
				
						writeString(this.FECHA_REGLA,dos);
					
					// String
				
						writeString(this.PARACLINICOS,dos);
					
					// String
				
						writeString(this.CITOLOGIA,dos);
					
					// String
				
						writeString(this.FECHA_CITOLOGIA,dos);
					
					// String
				
						writeString(this.EXAMEN_SENO,dos);
					
					// String
				
						writeString(this.PLAN_FAMILIAR,dos);
					
					// String
				
						writeString(this.METODO_PLANF,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_ANIOS,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_MESES,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_DIAS,dos);
					
					// String
				
						writeString(this.CONTR_PLANF_FAMILIAR,dos);
					
					// String
				
						writeString(this.EXAMEN_PROSTATA,dos);
					
					// String
				
						writeString(this.PSA,dos);
					
					// String
				
						writeString(this.FECHA_EXAMEN,dos);
					
					// String
				
						writeString(this.GESTA_CONFIRMADA,dos);
					
					// String
				
						writeString(this.GESTA_PLANEADA,dos);
					
					// String
				
						writeString(this.CONVIVENCIA_PAREJA,dos);
					
					// String
				
						writeString(this.FUR,dos);
					
					// String
				
						writeString(this.SEMANAS,dos);
					
					// String
				
						writeString(this.FECHA_PARTO,dos);
					
					// String
				
						writeString(this.GANANCIA_PESP,dos);
					
					// String
				
						writeString(this.CARNE_EMB,dos);
					
					// String
				
						writeString(this.CONTROL_PRENATAL,dos);
					
					// String
				
						writeString(this.QUIEN_CONTROL,dos);
					
					// String
				
						writeString(this.TRIMESTRE_ING_CONTROL,dos);
					
					// String
				
						writeString(this.FECHA_CONTROL_INI,dos);
					
					// String
				
						writeString(this.VAL_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.VAC_GESTANTE,dos);
					
					// String
				
						writeString(this.NUM_GESTACIONES,dos);
					
					// String
				
						writeString(this.NUM_PARTOS,dos);
					
					// String
				
						writeString(this.NUM_ABORTOS,dos);
					
					// String
				
						writeString(this.NUM_CESAREA,dos);
					
					// String
				
						writeString(this.NUM_IVE,dos);
					
					// String
				
						writeString(this.CAUSA_IVE,dos);
					
					// String
				
						writeString(this.EMB_ECTOPICO,dos);
					
					// String
				
						writeString(this.NUM_NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.FECHA_ULT_PARTO,dos);
					
					// String
				
						writeString(this.RIESGO_OBSTETRICO,dos);
					
					// String
				
						writeString(this.HEMOGLOBINA,dos);
					
					// String
				
						writeString(this.SEROLOGIA,dos);
					
					// String
				
						writeString(this.VIH,dos);
					
					// String
				
						writeString(this.SUPLEMENTACION,dos);
					
					// String
				
						writeString(this.PERCENTIL_NUTRICIONAL,dos);
					
					// String
				
						writeString(this.TABAQUISMO,dos);
					
					// String
				
						writeString(this.NUM_CIGARRILLOS,dos);
					
					// String
				
						writeString(this.ALCOHOL,dos);
					
					// String
				
						writeString(this.FREC_ALCOHOL,dos);
					
					// String
				
						writeString(this.ALT_UTERINA,dos);
					
					// String
				
						writeString(this.SEDENTARISMO,dos);
					
					// String
				
						writeString(this.PARTO,dos);
					
					// String
				
						writeString(this.QUIEN_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES,dos);
					
					// String
				
						writeString(this.ATENCION_PARTO,dos);
					
					// String
				
						writeString(this.TIEMPO_GESTACION,dos);
					
					// String
				
						writeString(this.ATENCION_INSTITUCIONAL,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_POSTPARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMBARAZO,dos);
					
					// String
				
						writeString(this.PLANIFICACION,dos);
					
					// String
				
						writeString(this.CONSUME_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.PESO_NACER,dos);
					
					// String
				
						writeString(this.TALLA_NACER,dos);
					
					// String
				
						writeString(this.PERIMETRO_CEFALICO,dos);
					
					// String
				
						writeString(this.PREMATUREZ,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMB,dos);
					
					// String
				
						writeString(this.RECIBE_MED,dos);
					
					// String
				
						writeString(this.REGISTRADO,dos);
					
					// String
				
						writeString(this.ANTECEDENTES_PERINATALES,dos);
					
					// String
				
						writeString(this.PESO_KG,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.CONTROL_CYD,dos);
					
					// String
				
						writeString(this.IMC,dos);
					
					// String
				
						writeString(this.ESTADO_NUTRICION,dos);
					
					// String
				
						writeString(this.VALORACION_DESARROLLO,dos);
					
					// String
				
						writeString(this.LACTANCIA_6MESES,dos);
					
					// String
				
						writeString(this.TOMADO_MED_HIPERTENSION,dos);
					
					// String
				
						writeString(this.PERIMETRO_ABD,dos);
					
					// String
				
						writeString(this.GLUCOSA_EMBARAZO,dos);
					
					// String
				
						writeString(this.CONSUMO_VEGETALES,dos);
					
					// String
				
						writeString(this.SEGURIDAD_ALIMENTARIA,dos);
					
					// String
				
						writeString(this.DESPARACITADO,dos);
					
					// String
				
						writeString(this.FECHA_DESPARACITADO,dos);
					
					// String
				
						writeString(this.PROGRAMAS_INSCRITO,dos);
					
					// String
				
						writeString(this.TRANSTORNO_ALIMENTACION,dos);
					
					// String
				
						writeString(this.MORB_CRONICA,dos);
					
					// String
				
						writeString(this.PERIMETRO_PANTORRILLA,dos);
					
					// String
				
						writeString(this.MORBILIDAD_AGUDA,dos);
					
					// String
				
						writeString(this.BUSCA_AYUDA,dos);
					
					// String
				
						writeString(this.PORQUE,dos);
					
					// String
				
						writeString(this.RECIBE_MANEJO,dos);
					
					// String
				
						writeString(this.QUIEN_FORMULA,dos);
					
					// String
				
						writeString(this.CONSULTA_SIQUIATRIA,dos);
					
					// String
				
						writeString(this.FORMULADO_MED_PSIQUIATRICOS,dos);
					
					// String
				
						writeString(this.FACTORES_RIESGO,dos);
					
					// String
				
						writeString(this.SITUACION_ESTRES,dos);
					
					// String
				
						writeString(this.VIOLENCIA,dos);
					
					// String
				
						writeString(this.ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.BCG,dos);
					
					// String
				
						writeString(this.HEPATITIS_B,dos);
					
					// String
				
						writeString(this.POLIO,dos);
					
					// String
				
						writeString(this.HIB,dos);
					
					// String
				
						writeString(this.NEUMOCOCO,dos);
					
					// String
				
						writeString(this.ROTAVIRUS,dos);
					
					// String
				
						writeString(this.INFLUENCIA_EST,dos);
					
					// String
				
						writeString(this.SRP,dos);
					
					// String
				
						writeString(this.VARICELA,dos);
					
					// String
				
						writeString(this.HEPATITIS_A,dos);
					
					// String
				
						writeString(this.FA,dos);
					
					// String
				
						writeString(this.DPT,dos);
					
					// String
				
						writeString(this.VPH,dos);
					
					// String
				
						writeString(this.TD,dos);
					
					// String
				
						writeString(this.MAMOGRAFIA,dos);
					
					// String
				
						writeString(this.PROTESIS_DENTAL,dos);
					
					// String
				
						writeString(this.RECIBIO_MEDICAMENTOS,dos);
					
					// String
				
						writeString(this.VALIDADO,dos);
					
					// String
				
						writeString(this.ECOGRAFIA_MAMARIA,dos);
					
					// String
				
						writeString(this.INF_SUM_USUARIO,dos);
					
					// String
				
						writeString(this.NIVEL_INGRESO,dos);
					
					// String
				
						writeString(this.DIFTERIA2,dos);
					
					// String
				
						writeString(this.DIFTERIA3,dos);
					
					// String
				
						writeString(this.POLIO2,dos);
					
					// String
				
						writeString(this.POLIO3,dos);
					
					// String
				
						writeString(this.SARAMPION2,dos);
					
					// String
				
						writeString(this.INFLUENZA2,dos);
					
					// String
				
						writeString(this.VACUNACION_NOPAI,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// String
				
						writeString(this.TREGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
					// String
				
						writeString(this.FORMACION,dos);
					
					// String
				
						writeString(this.EXPANSION,dos);
					
					// String
				
						writeString(this.CONSOLIDACION,dos);
					
					// String
				
						writeString(this.APERTURA,dos);
					
					// String
				
						writeString(this.POSPARENTAL,dos);
					
					// String
				
						writeString(this.DISOLUCION,dos);
					
					// String
				
						writeString(this.ESTFAMILIAR,dos);
					
					// String
				
						writeString(this.TIPO_VIVIENDA,dos);
					
					// String
				
						writeString(this.CUARTOS,dos);
					
					// String
				
						writeString(this.UBICACION,dos);
					
					// String
				
						writeString(this.BANOS,dos);
					
					// String
				
						writeString(this.TENENCIA,dos);
					
					// String
				
						writeString(this.TRESPORCUARTO,dos);
					
					// String
				
						writeString(this.TIPOHAB,dos);
					
					// String
				
						writeString(this.ACT_PRODUCTIVA,dos);
					
					// String
				
						writeString(this.MAQUINARIA,dos);
					
					// String
				
						writeString(this.EXCRETAS,dos);
					
					// String
				
						writeString(this.MEDIOS_COMUNICACION,dos);
					
					// String
				
						writeString(this.TIPO_ALUMBRADO,dos);
					
					// String
				
						writeString(this.MASCOTAS,dos);
					
					// String
				
						writeString(this.MASCOTAS_VAC,dos);
					
					// String
				
						writeString(this.DISP_BASURAS,dos);
					
					// String
				
						writeString(this.VECTORES,dos);
					
					// String
				
						writeString(this.PROB_ACCIDENTE,dos);
					
					// String
				
						writeString(this.CONT_AMB,dos);
					
					// String
				
						writeString(this.ABAST_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_CASA_AGUA,dos);
					
					// String
				
						writeString(this.TRATA_AGUA_FUENTE,dos);
					
					// String
				
						writeString(this.TIPO_COCINA,dos);
					
					// String
				
						writeString(this.HUMO_VIVIENDA,dos);
					
					// String
				
						writeString(this.COCINA_CONSTRU_MATERIAL,dos);
					
					// String
				
						writeString(this.COCINA_VIVIENDA,dos);
					
					// String
				
						writeString(this.COMBUSTIBLE_COCINA,dos);
					
					// String
				
						writeString(this.COCINA_DORMITORIO,dos);
					
					// String
				
						writeString(this.TIPO_PISOS,dos);
					
					// String
				
						writeString(this.TIPO_TECHOS,dos);
					
					// String
				
						writeString(this.TIPO_PAREDES,dos);
					
					// String
				
						writeString(this.VIVIENDA_2KM,dos);
					
					// String
				
						writeString(this.BARRERAS_ACCESOS,dos);
					
					// String
				
						writeString(this.DIST_SALUD_CERCANO,dos);
					
					// String
				
						writeString(this.MEDIO_TRANSPORTE,dos);
					
					// String
				
						writeString(this.VIA_ACCESO,dos);
					
					// String
				
						writeString(this.NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.MORTALIDAD,dos);
					
					// String
				
						writeString(this.HIPERTENSION,dos);
					
					// String
				
						writeString(this.DIABETES,dos);
					
					// String
				
						writeString(this.ENF_CARDIACAS,dos);
					
					// String
				
						writeString(this.CANCER,dos);
					
					// String
				
						writeString(this.ENF_RENAL,dos);
					
					// String
				
						writeString(this.ENF_CONGENITA,dos);
					
					// String
				
						writeString(this.MENTALES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_NECES,dos);
					
					// String
				
						writeString(this.AYUDA_FAMI_PROYEC,dos);
					
					// String
				
						writeString(this.APOYO_FAMI_SENTIM,dos);
					
					// String
				
						writeString(this.DECISIONES_HOGAR,dos);
					
					// String
				
						writeString(this.COM_INTRAFAMILIAR,dos);
					
					// String
				
						writeString(this.ACT_FAMILIAR,dos);
					
					// String
				
						writeString(this.DISFRUTA_ACTIVIDADES,dos);
					
					// String
				
						writeString(this.CEPILLADO,dos);
					
					// String
				
						writeString(this.NUM_CEPILLADO,dos);
					
					// String
				
						writeString(this.CARIES,dos);
					
					// String
				
						writeString(this.ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FREC_ODONTOLOGO,dos);
					
					// String
				
						writeString(this.FULTIMA_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.TOP_FLUOR,dos);
					
					// String
				
						writeString(this.SEDA_DENTAL,dos);
					
					// String
				
						writeString(this.SELLANTE,dos);
					
					// String
				
						writeString(this.PERDIDA_DIENTES,dos);
					
					// String
				
						writeString(this.CARNE,dos);
					
					// String
				
						writeString(this.ESQUEMA_EDAD,dos);
					
					// String
				
						writeString(this.ENF_TROPICAL,dos);
					
					// String
				
						writeString(this.ENF_TRANSMISION,dos);
					
					// String
				
						writeString(this.TRATAMIENTO_ETS,dos);
					
					// String
				
						writeString(this.PROBLEMAS_VISUALES,dos);
					
					// String
				
						writeString(this.PROBLEMAS_AUDITIVOS,dos);
					
					// String
				
						writeString(this.RENDIMIENTO_ESTUDIOS,dos);
					
					// String
				
						writeString(this.ACT_EXTRACURRICULAR,dos);
					
					// String
				
						writeString(this.PRESION_SISTOLICA,dos);
					
					// String
				
						writeString(this.PRESION_DIASTOLICA,dos);
					
					// String
				
						writeString(this.ACT_FISICA,dos);
					
					// String
				
						writeString(this.FREC_ACT_FISICA,dos);
					
					// String
				
						writeString(this.DURACION_ACT_FISICA,dos);
					
					// String
				
						writeString(this.INT_ACT_FISICA,dos);
					
					// String
				
						writeString(this.CAIDAS,dos);
					
					// String
				
						writeString(this.DISC_FISICA,dos);
					
					// String
				
						writeString(this.DISC_MENTAL,dos);
					
					// String
				
						writeString(this.EDAD_MESTRUACION,dos);
					
					// String
				
						writeString(this.FECHA_REGLA,dos);
					
					// String
				
						writeString(this.PARACLINICOS,dos);
					
					// String
				
						writeString(this.CITOLOGIA,dos);
					
					// String
				
						writeString(this.FECHA_CITOLOGIA,dos);
					
					// String
				
						writeString(this.EXAMEN_SENO,dos);
					
					// String
				
						writeString(this.PLAN_FAMILIAR,dos);
					
					// String
				
						writeString(this.METODO_PLANF,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_ANIOS,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_MESES,dos);
					
					// String
				
						writeString(this.TIEMPO_MET_DIAS,dos);
					
					// String
				
						writeString(this.CONTR_PLANF_FAMILIAR,dos);
					
					// String
				
						writeString(this.EXAMEN_PROSTATA,dos);
					
					// String
				
						writeString(this.PSA,dos);
					
					// String
				
						writeString(this.FECHA_EXAMEN,dos);
					
					// String
				
						writeString(this.GESTA_CONFIRMADA,dos);
					
					// String
				
						writeString(this.GESTA_PLANEADA,dos);
					
					// String
				
						writeString(this.CONVIVENCIA_PAREJA,dos);
					
					// String
				
						writeString(this.FUR,dos);
					
					// String
				
						writeString(this.SEMANAS,dos);
					
					// String
				
						writeString(this.FECHA_PARTO,dos);
					
					// String
				
						writeString(this.GANANCIA_PESP,dos);
					
					// String
				
						writeString(this.CARNE_EMB,dos);
					
					// String
				
						writeString(this.CONTROL_PRENATAL,dos);
					
					// String
				
						writeString(this.QUIEN_CONTROL,dos);
					
					// String
				
						writeString(this.TRIMESTRE_ING_CONTROL,dos);
					
					// String
				
						writeString(this.FECHA_CONTROL_INI,dos);
					
					// String
				
						writeString(this.VAL_ODONTOLOGIA,dos);
					
					// String
				
						writeString(this.VAC_GESTANTE,dos);
					
					// String
				
						writeString(this.NUM_GESTACIONES,dos);
					
					// String
				
						writeString(this.NUM_PARTOS,dos);
					
					// String
				
						writeString(this.NUM_ABORTOS,dos);
					
					// String
				
						writeString(this.NUM_CESAREA,dos);
					
					// String
				
						writeString(this.NUM_IVE,dos);
					
					// String
				
						writeString(this.CAUSA_IVE,dos);
					
					// String
				
						writeString(this.EMB_ECTOPICO,dos);
					
					// String
				
						writeString(this.NUM_NACIDOS_VIVOS,dos);
					
					// String
				
						writeString(this.FECHA_ULT_PARTO,dos);
					
					// String
				
						writeString(this.RIESGO_OBSTETRICO,dos);
					
					// String
				
						writeString(this.HEMOGLOBINA,dos);
					
					// String
				
						writeString(this.SEROLOGIA,dos);
					
					// String
				
						writeString(this.VIH,dos);
					
					// String
				
						writeString(this.SUPLEMENTACION,dos);
					
					// String
				
						writeString(this.PERCENTIL_NUTRICIONAL,dos);
					
					// String
				
						writeString(this.TABAQUISMO,dos);
					
					// String
				
						writeString(this.NUM_CIGARRILLOS,dos);
					
					// String
				
						writeString(this.ALCOHOL,dos);
					
					// String
				
						writeString(this.FREC_ALCOHOL,dos);
					
					// String
				
						writeString(this.ALT_UTERINA,dos);
					
					// String
				
						writeString(this.SEDENTARISMO,dos);
					
					// String
				
						writeString(this.PARTO,dos);
					
					// String
				
						writeString(this.QUIEN_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES,dos);
					
					// String
				
						writeString(this.ATENCION_PARTO,dos);
					
					// String
				
						writeString(this.TIEMPO_GESTACION,dos);
					
					// String
				
						writeString(this.ATENCION_INSTITUCIONAL,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_POSTPARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_PARTO,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMBARAZO,dos);
					
					// String
				
						writeString(this.PLANIFICACION,dos);
					
					// String
				
						writeString(this.CONSUME_MEDICAMENTO,dos);
					
					// String
				
						writeString(this.PESO_NACER,dos);
					
					// String
				
						writeString(this.TALLA_NACER,dos);
					
					// String
				
						writeString(this.PERIMETRO_CEFALICO,dos);
					
					// String
				
						writeString(this.PREMATUREZ,dos);
					
					// String
				
						writeString(this.COMPLICACIONES_EMB,dos);
					
					// String
				
						writeString(this.RECIBE_MED,dos);
					
					// String
				
						writeString(this.REGISTRADO,dos);
					
					// String
				
						writeString(this.ANTECEDENTES_PERINATALES,dos);
					
					// String
				
						writeString(this.PESO_KG,dos);
					
					// String
				
						writeString(this.TALLA,dos);
					
					// String
				
						writeString(this.CONTROL_CYD,dos);
					
					// String
				
						writeString(this.IMC,dos);
					
					// String
				
						writeString(this.ESTADO_NUTRICION,dos);
					
					// String
				
						writeString(this.VALORACION_DESARROLLO,dos);
					
					// String
				
						writeString(this.LACTANCIA_6MESES,dos);
					
					// String
				
						writeString(this.TOMADO_MED_HIPERTENSION,dos);
					
					// String
				
						writeString(this.PERIMETRO_ABD,dos);
					
					// String
				
						writeString(this.GLUCOSA_EMBARAZO,dos);
					
					// String
				
						writeString(this.CONSUMO_VEGETALES,dos);
					
					// String
				
						writeString(this.SEGURIDAD_ALIMENTARIA,dos);
					
					// String
				
						writeString(this.DESPARACITADO,dos);
					
					// String
				
						writeString(this.FECHA_DESPARACITADO,dos);
					
					// String
				
						writeString(this.PROGRAMAS_INSCRITO,dos);
					
					// String
				
						writeString(this.TRANSTORNO_ALIMENTACION,dos);
					
					// String
				
						writeString(this.MORB_CRONICA,dos);
					
					// String
				
						writeString(this.PERIMETRO_PANTORRILLA,dos);
					
					// String
				
						writeString(this.MORBILIDAD_AGUDA,dos);
					
					// String
				
						writeString(this.BUSCA_AYUDA,dos);
					
					// String
				
						writeString(this.PORQUE,dos);
					
					// String
				
						writeString(this.RECIBE_MANEJO,dos);
					
					// String
				
						writeString(this.QUIEN_FORMULA,dos);
					
					// String
				
						writeString(this.CONSULTA_SIQUIATRIA,dos);
					
					// String
				
						writeString(this.FORMULADO_MED_PSIQUIATRICOS,dos);
					
					// String
				
						writeString(this.FACTORES_RIESGO,dos);
					
					// String
				
						writeString(this.SITUACION_ESTRES,dos);
					
					// String
				
						writeString(this.VIOLENCIA,dos);
					
					// String
				
						writeString(this.ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_ANT_CONSUMO,dos);
					
					// String
				
						writeString(this.CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.CUAL_CONTINUA_CONSUMO,dos);
					
					// String
				
						writeString(this.BCG,dos);
					
					// String
				
						writeString(this.HEPATITIS_B,dos);
					
					// String
				
						writeString(this.POLIO,dos);
					
					// String
				
						writeString(this.HIB,dos);
					
					// String
				
						writeString(this.NEUMOCOCO,dos);
					
					// String
				
						writeString(this.ROTAVIRUS,dos);
					
					// String
				
						writeString(this.INFLUENCIA_EST,dos);
					
					// String
				
						writeString(this.SRP,dos);
					
					// String
				
						writeString(this.VARICELA,dos);
					
					// String
				
						writeString(this.HEPATITIS_A,dos);
					
					// String
				
						writeString(this.FA,dos);
					
					// String
				
						writeString(this.DPT,dos);
					
					// String
				
						writeString(this.VPH,dos);
					
					// String
				
						writeString(this.TD,dos);
					
					// String
				
						writeString(this.MAMOGRAFIA,dos);
					
					// String
				
						writeString(this.PROTESIS_DENTAL,dos);
					
					// String
				
						writeString(this.RECIBIO_MEDICAMENTOS,dos);
					
					// String
				
						writeString(this.VALIDADO,dos);
					
					// String
				
						writeString(this.ECOGRAFIA_MAMARIA,dos);
					
					// String
				
						writeString(this.INF_SUM_USUARIO,dos);
					
					// String
				
						writeString(this.NIVEL_INGRESO,dos);
					
					// String
				
						writeString(this.DIFTERIA2,dos);
					
					// String
				
						writeString(this.DIFTERIA3,dos);
					
					// String
				
						writeString(this.POLIO2,dos);
					
					// String
				
						writeString(this.POLIO3,dos);
					
					// String
				
						writeString(this.SARAMPION2,dos);
					
					// String
				
						writeString(this.INFLUENZA2,dos);
					
					// String
				
						writeString(this.VACUNACION_NOPAI,dos);
					
					// String
				
						writeString(this.OBSERVACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMEN_SALUD="+TREGIMEN_SALUD);
		sb.append(",EPS="+EPS);
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
		sb.append(",FORMACION="+FORMACION);
		sb.append(",EXPANSION="+EXPANSION);
		sb.append(",CONSOLIDACION="+CONSOLIDACION);
		sb.append(",APERTURA="+APERTURA);
		sb.append(",POSPARENTAL="+POSPARENTAL);
		sb.append(",DISOLUCION="+DISOLUCION);
		sb.append(",ESTFAMILIAR="+ESTFAMILIAR);
		sb.append(",TIPO_VIVIENDA="+TIPO_VIVIENDA);
		sb.append(",CUARTOS="+CUARTOS);
		sb.append(",UBICACION="+UBICACION);
		sb.append(",BANOS="+BANOS);
		sb.append(",TENENCIA="+TENENCIA);
		sb.append(",TRESPORCUARTO="+TRESPORCUARTO);
		sb.append(",TIPOHAB="+TIPOHAB);
		sb.append(",ACT_PRODUCTIVA="+ACT_PRODUCTIVA);
		sb.append(",MAQUINARIA="+MAQUINARIA);
		sb.append(",EXCRETAS="+EXCRETAS);
		sb.append(",MEDIOS_COMUNICACION="+MEDIOS_COMUNICACION);
		sb.append(",TIPO_ALUMBRADO="+TIPO_ALUMBRADO);
		sb.append(",MASCOTAS="+MASCOTAS);
		sb.append(",MASCOTAS_VAC="+MASCOTAS_VAC);
		sb.append(",DISP_BASURAS="+DISP_BASURAS);
		sb.append(",VECTORES="+VECTORES);
		sb.append(",PROB_ACCIDENTE="+PROB_ACCIDENTE);
		sb.append(",CONT_AMB="+CONT_AMB);
		sb.append(",ABAST_AGUA="+ABAST_AGUA);
		sb.append(",TRATA_CASA_AGUA="+TRATA_CASA_AGUA);
		sb.append(",TRATA_AGUA_FUENTE="+TRATA_AGUA_FUENTE);
		sb.append(",TIPO_COCINA="+TIPO_COCINA);
		sb.append(",HUMO_VIVIENDA="+HUMO_VIVIENDA);
		sb.append(",COCINA_CONSTRU_MATERIAL="+COCINA_CONSTRU_MATERIAL);
		sb.append(",COCINA_VIVIENDA="+COCINA_VIVIENDA);
		sb.append(",COMBUSTIBLE_COCINA="+COMBUSTIBLE_COCINA);
		sb.append(",COCINA_DORMITORIO="+COCINA_DORMITORIO);
		sb.append(",TIPO_PISOS="+TIPO_PISOS);
		sb.append(",TIPO_TECHOS="+TIPO_TECHOS);
		sb.append(",TIPO_PAREDES="+TIPO_PAREDES);
		sb.append(",VIVIENDA_2KM="+VIVIENDA_2KM);
		sb.append(",BARRERAS_ACCESOS="+BARRERAS_ACCESOS);
		sb.append(",DIST_SALUD_CERCANO="+DIST_SALUD_CERCANO);
		sb.append(",MEDIO_TRANSPORTE="+MEDIO_TRANSPORTE);
		sb.append(",VIA_ACCESO="+VIA_ACCESO);
		sb.append(",NACIDOS_VIVOS="+NACIDOS_VIVOS);
		sb.append(",MORTALIDAD="+MORTALIDAD);
		sb.append(",HIPERTENSION="+HIPERTENSION);
		sb.append(",DIABETES="+DIABETES);
		sb.append(",ENF_CARDIACAS="+ENF_CARDIACAS);
		sb.append(",CANCER="+CANCER);
		sb.append(",ENF_RENAL="+ENF_RENAL);
		sb.append(",ENF_CONGENITA="+ENF_CONGENITA);
		sb.append(",MENTALES="+MENTALES);
		sb.append(",AYUDA_FAMI_NECES="+AYUDA_FAMI_NECES);
		sb.append(",AYUDA_FAMI_PROYEC="+AYUDA_FAMI_PROYEC);
		sb.append(",APOYO_FAMI_SENTIM="+APOYO_FAMI_SENTIM);
		sb.append(",DECISIONES_HOGAR="+DECISIONES_HOGAR);
		sb.append(",COM_INTRAFAMILIAR="+COM_INTRAFAMILIAR);
		sb.append(",ACT_FAMILIAR="+ACT_FAMILIAR);
		sb.append(",DISFRUTA_ACTIVIDADES="+DISFRUTA_ACTIVIDADES);
		sb.append(",CEPILLADO="+CEPILLADO);
		sb.append(",NUM_CEPILLADO="+NUM_CEPILLADO);
		sb.append(",CARIES="+CARIES);
		sb.append(",ODONTOLOGO="+ODONTOLOGO);
		sb.append(",FREC_ODONTOLOGO="+FREC_ODONTOLOGO);
		sb.append(",FULTIMA_ODONTOLOGIA="+FULTIMA_ODONTOLOGIA);
		sb.append(",TOP_FLUOR="+TOP_FLUOR);
		sb.append(",SEDA_DENTAL="+SEDA_DENTAL);
		sb.append(",SELLANTE="+SELLANTE);
		sb.append(",PERDIDA_DIENTES="+PERDIDA_DIENTES);
		sb.append(",CARNE="+CARNE);
		sb.append(",ESQUEMA_EDAD="+ESQUEMA_EDAD);
		sb.append(",ENF_TROPICAL="+ENF_TROPICAL);
		sb.append(",ENF_TRANSMISION="+ENF_TRANSMISION);
		sb.append(",TRATAMIENTO_ETS="+TRATAMIENTO_ETS);
		sb.append(",PROBLEMAS_VISUALES="+PROBLEMAS_VISUALES);
		sb.append(",PROBLEMAS_AUDITIVOS="+PROBLEMAS_AUDITIVOS);
		sb.append(",RENDIMIENTO_ESTUDIOS="+RENDIMIENTO_ESTUDIOS);
		sb.append(",ACT_EXTRACURRICULAR="+ACT_EXTRACURRICULAR);
		sb.append(",PRESION_SISTOLICA="+PRESION_SISTOLICA);
		sb.append(",PRESION_DIASTOLICA="+PRESION_DIASTOLICA);
		sb.append(",ACT_FISICA="+ACT_FISICA);
		sb.append(",FREC_ACT_FISICA="+FREC_ACT_FISICA);
		sb.append(",DURACION_ACT_FISICA="+DURACION_ACT_FISICA);
		sb.append(",INT_ACT_FISICA="+INT_ACT_FISICA);
		sb.append(",CAIDAS="+CAIDAS);
		sb.append(",DISC_FISICA="+DISC_FISICA);
		sb.append(",DISC_MENTAL="+DISC_MENTAL);
		sb.append(",EDAD_MESTRUACION="+EDAD_MESTRUACION);
		sb.append(",FECHA_REGLA="+FECHA_REGLA);
		sb.append(",PARACLINICOS="+PARACLINICOS);
		sb.append(",CITOLOGIA="+CITOLOGIA);
		sb.append(",FECHA_CITOLOGIA="+FECHA_CITOLOGIA);
		sb.append(",EXAMEN_SENO="+EXAMEN_SENO);
		sb.append(",PLAN_FAMILIAR="+PLAN_FAMILIAR);
		sb.append(",METODO_PLANF="+METODO_PLANF);
		sb.append(",TIEMPO_MET_ANIOS="+TIEMPO_MET_ANIOS);
		sb.append(",TIEMPO_MET_MESES="+TIEMPO_MET_MESES);
		sb.append(",TIEMPO_MET_DIAS="+TIEMPO_MET_DIAS);
		sb.append(",CONTR_PLANF_FAMILIAR="+CONTR_PLANF_FAMILIAR);
		sb.append(",EXAMEN_PROSTATA="+EXAMEN_PROSTATA);
		sb.append(",PSA="+PSA);
		sb.append(",FECHA_EXAMEN="+FECHA_EXAMEN);
		sb.append(",GESTA_CONFIRMADA="+GESTA_CONFIRMADA);
		sb.append(",GESTA_PLANEADA="+GESTA_PLANEADA);
		sb.append(",CONVIVENCIA_PAREJA="+CONVIVENCIA_PAREJA);
		sb.append(",FUR="+FUR);
		sb.append(",SEMANAS="+SEMANAS);
		sb.append(",FECHA_PARTO="+FECHA_PARTO);
		sb.append(",GANANCIA_PESP="+GANANCIA_PESP);
		sb.append(",CARNE_EMB="+CARNE_EMB);
		sb.append(",CONTROL_PRENATAL="+CONTROL_PRENATAL);
		sb.append(",QUIEN_CONTROL="+QUIEN_CONTROL);
		sb.append(",TRIMESTRE_ING_CONTROL="+TRIMESTRE_ING_CONTROL);
		sb.append(",FECHA_CONTROL_INI="+FECHA_CONTROL_INI);
		sb.append(",VAL_ODONTOLOGIA="+VAL_ODONTOLOGIA);
		sb.append(",VAC_GESTANTE="+VAC_GESTANTE);
		sb.append(",NUM_GESTACIONES="+NUM_GESTACIONES);
		sb.append(",NUM_PARTOS="+NUM_PARTOS);
		sb.append(",NUM_ABORTOS="+NUM_ABORTOS);
		sb.append(",NUM_CESAREA="+NUM_CESAREA);
		sb.append(",NUM_IVE="+NUM_IVE);
		sb.append(",CAUSA_IVE="+CAUSA_IVE);
		sb.append(",EMB_ECTOPICO="+EMB_ECTOPICO);
		sb.append(",NUM_NACIDOS_VIVOS="+NUM_NACIDOS_VIVOS);
		sb.append(",FECHA_ULT_PARTO="+FECHA_ULT_PARTO);
		sb.append(",RIESGO_OBSTETRICO="+RIESGO_OBSTETRICO);
		sb.append(",HEMOGLOBINA="+HEMOGLOBINA);
		sb.append(",SEROLOGIA="+SEROLOGIA);
		sb.append(",VIH="+VIH);
		sb.append(",SUPLEMENTACION="+SUPLEMENTACION);
		sb.append(",PERCENTIL_NUTRICIONAL="+PERCENTIL_NUTRICIONAL);
		sb.append(",TABAQUISMO="+TABAQUISMO);
		sb.append(",NUM_CIGARRILLOS="+NUM_CIGARRILLOS);
		sb.append(",ALCOHOL="+ALCOHOL);
		sb.append(",FREC_ALCOHOL="+FREC_ALCOHOL);
		sb.append(",ALT_UTERINA="+ALT_UTERINA);
		sb.append(",SEDENTARISMO="+SEDENTARISMO);
		sb.append(",PARTO="+PARTO);
		sb.append(",QUIEN_PARTO="+QUIEN_PARTO);
		sb.append(",COMPLICACIONES="+COMPLICACIONES);
		sb.append(",ATENCION_PARTO="+ATENCION_PARTO);
		sb.append(",TIEMPO_GESTACION="+TIEMPO_GESTACION);
		sb.append(",ATENCION_INSTITUCIONAL="+ATENCION_INSTITUCIONAL);
		sb.append(",COMPLICACIONES_POSTPARTO="+COMPLICACIONES_POSTPARTO);
		sb.append(",COMPLICACIONES_PARTO="+COMPLICACIONES_PARTO);
		sb.append(",COMPLICACIONES_EMBARAZO="+COMPLICACIONES_EMBARAZO);
		sb.append(",PLANIFICACION="+PLANIFICACION);
		sb.append(",CONSUME_MEDICAMENTO="+CONSUME_MEDICAMENTO);
		sb.append(",PESO_NACER="+PESO_NACER);
		sb.append(",TALLA_NACER="+TALLA_NACER);
		sb.append(",PERIMETRO_CEFALICO="+PERIMETRO_CEFALICO);
		sb.append(",PREMATUREZ="+PREMATUREZ);
		sb.append(",COMPLICACIONES_EMB="+COMPLICACIONES_EMB);
		sb.append(",RECIBE_MED="+RECIBE_MED);
		sb.append(",REGISTRADO="+REGISTRADO);
		sb.append(",ANTECEDENTES_PERINATALES="+ANTECEDENTES_PERINATALES);
		sb.append(",PESO_KG="+PESO_KG);
		sb.append(",TALLA="+TALLA);
		sb.append(",CONTROL_CYD="+CONTROL_CYD);
		sb.append(",IMC="+IMC);
		sb.append(",ESTADO_NUTRICION="+ESTADO_NUTRICION);
		sb.append(",VALORACION_DESARROLLO="+VALORACION_DESARROLLO);
		sb.append(",LACTANCIA_6MESES="+LACTANCIA_6MESES);
		sb.append(",TOMADO_MED_HIPERTENSION="+TOMADO_MED_HIPERTENSION);
		sb.append(",PERIMETRO_ABD="+PERIMETRO_ABD);
		sb.append(",GLUCOSA_EMBARAZO="+GLUCOSA_EMBARAZO);
		sb.append(",CONSUMO_VEGETALES="+CONSUMO_VEGETALES);
		sb.append(",SEGURIDAD_ALIMENTARIA="+SEGURIDAD_ALIMENTARIA);
		sb.append(",DESPARACITADO="+DESPARACITADO);
		sb.append(",FECHA_DESPARACITADO="+FECHA_DESPARACITADO);
		sb.append(",PROGRAMAS_INSCRITO="+PROGRAMAS_INSCRITO);
		sb.append(",TRANSTORNO_ALIMENTACION="+TRANSTORNO_ALIMENTACION);
		sb.append(",MORB_CRONICA="+MORB_CRONICA);
		sb.append(",PERIMETRO_PANTORRILLA="+PERIMETRO_PANTORRILLA);
		sb.append(",MORBILIDAD_AGUDA="+MORBILIDAD_AGUDA);
		sb.append(",BUSCA_AYUDA="+BUSCA_AYUDA);
		sb.append(",PORQUE="+PORQUE);
		sb.append(",RECIBE_MANEJO="+RECIBE_MANEJO);
		sb.append(",QUIEN_FORMULA="+QUIEN_FORMULA);
		sb.append(",CONSULTA_SIQUIATRIA="+CONSULTA_SIQUIATRIA);
		sb.append(",FORMULADO_MED_PSIQUIATRICOS="+FORMULADO_MED_PSIQUIATRICOS);
		sb.append(",FACTORES_RIESGO="+FACTORES_RIESGO);
		sb.append(",SITUACION_ESTRES="+SITUACION_ESTRES);
		sb.append(",VIOLENCIA="+VIOLENCIA);
		sb.append(",ANT_CONSUMO="+ANT_CONSUMO);
		sb.append(",CUAL_ANT_CONSUMO="+CUAL_ANT_CONSUMO);
		sb.append(",CONTINUA_CONSUMO="+CONTINUA_CONSUMO);
		sb.append(",CUAL_CONTINUA_CONSUMO="+CUAL_CONTINUA_CONSUMO);
		sb.append(",BCG="+BCG);
		sb.append(",HEPATITIS_B="+HEPATITIS_B);
		sb.append(",POLIO="+POLIO);
		sb.append(",HIB="+HIB);
		sb.append(",NEUMOCOCO="+NEUMOCOCO);
		sb.append(",ROTAVIRUS="+ROTAVIRUS);
		sb.append(",INFLUENCIA_EST="+INFLUENCIA_EST);
		sb.append(",SRP="+SRP);
		sb.append(",VARICELA="+VARICELA);
		sb.append(",HEPATITIS_A="+HEPATITIS_A);
		sb.append(",FA="+FA);
		sb.append(",DPT="+DPT);
		sb.append(",VPH="+VPH);
		sb.append(",TD="+TD);
		sb.append(",MAMOGRAFIA="+MAMOGRAFIA);
		sb.append(",PROTESIS_DENTAL="+PROTESIS_DENTAL);
		sb.append(",RECIBIO_MEDICAMENTOS="+RECIBIO_MEDICAMENTOS);
		sb.append(",VALIDADO="+VALIDADO);
		sb.append(",ECOGRAFIA_MAMARIA="+ECOGRAFIA_MAMARIA);
		sb.append(",INF_SUM_USUARIO="+INF_SUM_USUARIO);
		sb.append(",NIVEL_INGRESO="+NIVEL_INGRESO);
		sb.append(",DIFTERIA2="+DIFTERIA2);
		sb.append(",DIFTERIA3="+DIFTERIA3);
		sb.append(",POLIO2="+POLIO2);
		sb.append(",POLIO3="+POLIO3);
		sb.append(",SARAMPION2="+SARAMPION2);
		sb.append(",INFLUENZA2="+INFLUENZA2);
		sb.append(",VACUNACION_NOPAI="+VACUNACION_NOPAI);
		sb.append(",OBSERVACIONES="+OBSERVACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tFileInputDelimited_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.FICHA_ID, other.FICHA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputDelimited_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_12Process(globalMap);
		tOracleInput_13Process(globalMap);

		row18Struct row18 = new row18Struct();
out4Struct out4 = new out4Struct();






	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"meterRowout4");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 2;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 223 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
        dbschema_tOracleOutput_1 = (String)globalMap.get("dbschema_tOracleConnection_2");
		
        conn_tOracleOutput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BFFA_FFAMILIAR");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BFFA_FFAMILIAR");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_1 + " WHERE PERSONA_ID = ? AND FICHA_ID = ?");
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (PERSONA_ID,FICHA_ID,TREGIMEN_SALUD,EPS,FREGISTRO,RECOMENDACIONES,FORMACION,EXPANSION,CONSOLIDACION,APERTURA,POSPARENTAL,DISOLUCION,ESTFAMILIAR,TIPO_VIVIENDA,CUARTOS,UBICACION,BANOS,TENENCIA,TRESPORCUARTO,TIPOHAB,ACT_PRODUCTIVA,MAQUINARIA,EXCRETAS,MEDIOS_COMUNICACION,TIPO_ALUMBRADO,MASCOTAS,MASCOTAS_VAC,DISP_BASURAS,VECTORES,PROB_ACCIDENTE,CONT_AMB,ABAST_AGUA,TRATA_CASA_AGUA,TRATA_AGUA_FUENTE,TIPO_COCINA,HUMO_VIVIENDA,COCINA_CONSTRU_MATERIAL,COCINA_VIVIENDA,COMBUSTIBLE_COCINA,COCINA_DORMITORIO,TIPO_PISOS,TIPO_TECHOS,TIPO_PAREDES,VIVIENDA_2KM,BARRERAS_ACCESOS,DIST_SALUD_CERCANO,MEDIO_TRANSPORTE,VIA_ACCESO,NACIDOS_VIVOS,MORTALIDAD,HIPERTENSION,DIABETES,ENF_CARDIACAS,CANCER,ENF_RENAL,ENF_CONGENITA,AYUDA_FAMI_NECES,AYUDA_FAMI_PROYEC,APOYO_FAMI_SENTIM,DECISIONES_HOGAR,COM_INTRAFAMILIAR,ACT_FAMILIAR,DISFRUTA_ACTIVIDADES,CEPILLADO,NUM_CEPILLADO,CARIES,ODONTOLOGO,FREC_ODONTOLOGO,FULTIMA_ODONTOLOGIA,TOP_FLUOR,SEDA_DENTAL,SELLANTE,PERDIDA_DIENTES,CARNE,ESQUEMA_EDAD,ENF_TROPICAL,ENF_TRANSMISION,TRATAMIENTO_ETS,PROBLEMAS_VISUALES,PROBLEMAS_AUDITIVOS,RENDIMIENTO_ESTUDIOS,ACT_EXTRACURRICULAR,PRESION_SISTOLICA,PRESION_DIASTOLICA,ACT_FISICA,FREC_ACT_FISICA,DURACION_ACT_FISICA,INT_ACT_FISICA,CAIDAS,DISC_FISICA,DISC_MENTAL,EDAD_MESTRUACION,FECHA_REGLA,PARACLINICOS,CITOLOGIA,FECHA_CITOLOGIA,EXAMEN_SENO,PLAN_FAMILIAR,METODO_PLANF,TIEMPO_MET_ANIOS,TIEMPO_MET_MESES,TIEMPO_MET_DIAS,CONTR_PLANF_FAMILIAR,EXAMEN_PROSTATA,PSA,FECHA_EXAMEN,GESTA_CONFIRMADA,GESTA_PLANEADA,CONVIVENCIA_PAREJA,FUR,SEMANAS,FECHA_PARTO,GANANCIA_PESP,CARNE_EMB,CONTROL_PRENATAL,QUIEN_CONTROL,TRIMESTRE_ING_CONTROL,FECHA_CONTROL_INI,VAL_ODONTOLOGIA,VAC_GESTANTE,NUM_GESTACIONES,NUM_PARTOS,NUM_ABORTOS,NUM_CESAREA,NUM_IVE,CAUSA_IVE,EMB_ECTOPICO,NUM_NACIDOS_VIVOS,FECHA_ULT_PARTO,RIESGO_OBSTETRICO,HEMOGLOBINA,SEROLOGIA,VIH,SUPLEMENTACION,PERCENTIL_NUTRICIONAL,TABAQUISMO,NUM_CIGARRILLOS,ALCOHOL,FREC_ALCOHOL,ALT_UTERINA,SEDENTARISMO,PARTO,QUIEN_PARTO,COMPLICACIONES,ATENCION_PARTO,TIEMPO_GESTACION,ATENCION_INSTITUCIONAL,COMPLICACIONES_POSTPARTO,COMPLICACIONES_PARTO,COMPLICACIONES_EMBARAZO,PLANIFICACION,CONSUME_MEDICAMENTO,PESO_NACER,TALLA_NACER,PERIMETRO_CEFALICO,PREMATUREZ,COMPLICACIONES_EMB,RECIBE_MED,REGISTRADO,ANTECEDENTES_PERINATALES,PESO_KG,TALLA,CONTROL_CYD,IMC,ESTADO_NUTRICION,VALORACION_DESARROLLO,LACTANCIA_6MESES,TOMADO_MED_HIPERTENSION,PERIMETRO_ABD,GLUCOSA_EMBARAZO,CONSUMO_VEGETALES,SEGURIDAD_ALIMENTARIA,DESPARACITADO,FECHA_DESPARACITADO,PROGRAMAS_INSCRITO,TRANSTORNO_ALIMENTACION,MORB_CRONICA,PERIMETRO_PANTORRILLA,MORBILIDAD_AGUDA,BUSCA_AYUDA,PORQUE,RECIBE_MANEJO,QUIEN_FORMULA,CONSULTA_SIQUIATRIA,FORMULADO_MED_PSIQUIATRICOS,FACTORES_RIESGO,SITUACION_ESTRES,VIOLENCIA,ANT_CONSUMO,CUAL_ANT_CONSUMO,CONTINUA_CONSUMO,CUAL_CONTINUA_CONSUMO,BCG,HEPATITIS_B,POLIO,HIB,NEUMOCOCO,ROTAVIRUS,INFLUENCIA_EST,SRP,VARICELA,HEPATITIS_A,FA,DPT,VPH,TD,MAMOGRAFIA,PROTESIS_DENTAL,RECIBIO_MEDICAMENTOS,VALIDADO,ECOGRAFIA_MAMARIA,MENTALES,INF_SUM_USUARIO,NIVEL_INGRESO,VACUNACION_NOPAI,OBSERVACIONES,GESTOR,FFINALIZACION,FINDRISK_VALOR,FINDRISK_CATEGORIA,UORG_EBAS,PREPAGADA,TIPO_REGISTRO) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                resourceMap.put("pstmtInsert_tOracleOutput_1", pstmtInsert_tOracleOutput_1);
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET TREGIMEN_SALUD = ?,EPS = ?,FREGISTRO = ?,RECOMENDACIONES = ?,FORMACION = ?,EXPANSION = ?,CONSOLIDACION = ?,APERTURA = ?,POSPARENTAL = ?,DISOLUCION = ?,ESTFAMILIAR = ?,TIPO_VIVIENDA = ?,CUARTOS = ?,UBICACION = ?,BANOS = ?,TENENCIA = ?,TRESPORCUARTO = ?,TIPOHAB = ?,ACT_PRODUCTIVA = ?,MAQUINARIA = ?,EXCRETAS = ?,MEDIOS_COMUNICACION = ?,TIPO_ALUMBRADO = ?,MASCOTAS = ?,MASCOTAS_VAC = ?,DISP_BASURAS = ?,VECTORES = ?,PROB_ACCIDENTE = ?,CONT_AMB = ?,ABAST_AGUA = ?,TRATA_CASA_AGUA = ?,TRATA_AGUA_FUENTE = ?,TIPO_COCINA = ?,HUMO_VIVIENDA = ?,COCINA_CONSTRU_MATERIAL = ?,COCINA_VIVIENDA = ?,COMBUSTIBLE_COCINA = ?,COCINA_DORMITORIO = ?,TIPO_PISOS = ?,TIPO_TECHOS = ?,TIPO_PAREDES = ?,VIVIENDA_2KM = ?,BARRERAS_ACCESOS = ?,DIST_SALUD_CERCANO = ?,MEDIO_TRANSPORTE = ?,VIA_ACCESO = ?,NACIDOS_VIVOS = ?,MORTALIDAD = ?,HIPERTENSION = ?,DIABETES = ?,ENF_CARDIACAS = ?,CANCER = ?,ENF_RENAL = ?,ENF_CONGENITA = ?,AYUDA_FAMI_NECES = ?,AYUDA_FAMI_PROYEC = ?,APOYO_FAMI_SENTIM = ?,DECISIONES_HOGAR = ?,COM_INTRAFAMILIAR = ?,ACT_FAMILIAR = ?,DISFRUTA_ACTIVIDADES = ?,CEPILLADO = ?,NUM_CEPILLADO = ?,CARIES = ?,ODONTOLOGO = ?,FREC_ODONTOLOGO = ?,FULTIMA_ODONTOLOGIA = ?,TOP_FLUOR = ?,SEDA_DENTAL = ?,SELLANTE = ?,PERDIDA_DIENTES = ?,CARNE = ?,ESQUEMA_EDAD = ?,ENF_TROPICAL = ?,ENF_TRANSMISION = ?,TRATAMIENTO_ETS = ?,PROBLEMAS_VISUALES = ?,PROBLEMAS_AUDITIVOS = ?,RENDIMIENTO_ESTUDIOS = ?,ACT_EXTRACURRICULAR = ?,PRESION_SISTOLICA = ?,PRESION_DIASTOLICA = ?,ACT_FISICA = ?,FREC_ACT_FISICA = ?,DURACION_ACT_FISICA = ?,INT_ACT_FISICA = ?,CAIDAS = ?,DISC_FISICA = ?,DISC_MENTAL = ?,EDAD_MESTRUACION = ?,FECHA_REGLA = ?,PARACLINICOS = ?,CITOLOGIA = ?,FECHA_CITOLOGIA = ?,EXAMEN_SENO = ?,PLAN_FAMILIAR = ?,METODO_PLANF = ?,TIEMPO_MET_ANIOS = ?,TIEMPO_MET_MESES = ?,TIEMPO_MET_DIAS = ?,CONTR_PLANF_FAMILIAR = ?,EXAMEN_PROSTATA = ?,PSA = ?,FECHA_EXAMEN = ?,GESTA_CONFIRMADA = ?,GESTA_PLANEADA = ?,CONVIVENCIA_PAREJA = ?,FUR = ?,SEMANAS = ?,FECHA_PARTO = ?,GANANCIA_PESP = ?,CARNE_EMB = ?,CONTROL_PRENATAL = ?,QUIEN_CONTROL = ?,TRIMESTRE_ING_CONTROL = ?,FECHA_CONTROL_INI = ?,VAL_ODONTOLOGIA = ?,VAC_GESTANTE = ?,NUM_GESTACIONES = ?,NUM_PARTOS = ?,NUM_ABORTOS = ?,NUM_CESAREA = ?,NUM_IVE = ?,CAUSA_IVE = ?,EMB_ECTOPICO = ?,NUM_NACIDOS_VIVOS = ?,FECHA_ULT_PARTO = ?,RIESGO_OBSTETRICO = ?,HEMOGLOBINA = ?,SEROLOGIA = ?,VIH = ?,SUPLEMENTACION = ?,PERCENTIL_NUTRICIONAL = ?,TABAQUISMO = ?,NUM_CIGARRILLOS = ?,ALCOHOL = ?,FREC_ALCOHOL = ?,ALT_UTERINA = ?,SEDENTARISMO = ?,PARTO = ?,QUIEN_PARTO = ?,COMPLICACIONES = ?,ATENCION_PARTO = ?,TIEMPO_GESTACION = ?,ATENCION_INSTITUCIONAL = ?,COMPLICACIONES_POSTPARTO = ?,COMPLICACIONES_PARTO = ?,COMPLICACIONES_EMBARAZO = ?,PLANIFICACION = ?,CONSUME_MEDICAMENTO = ?,PESO_NACER = ?,TALLA_NACER = ?,PERIMETRO_CEFALICO = ?,PREMATUREZ = ?,COMPLICACIONES_EMB = ?,RECIBE_MED = ?,REGISTRADO = ?,ANTECEDENTES_PERINATALES = ?,PESO_KG = ?,TALLA = ?,CONTROL_CYD = ?,IMC = ?,ESTADO_NUTRICION = ?,VALORACION_DESARROLLO = ?,LACTANCIA_6MESES = ?,TOMADO_MED_HIPERTENSION = ?,PERIMETRO_ABD = ?,GLUCOSA_EMBARAZO = ?,CONSUMO_VEGETALES = ?,SEGURIDAD_ALIMENTARIA = ?,DESPARACITADO = ?,FECHA_DESPARACITADO = ?,PROGRAMAS_INSCRITO = ?,TRANSTORNO_ALIMENTACION = ?,MORB_CRONICA = ?,PERIMETRO_PANTORRILLA = ?,MORBILIDAD_AGUDA = ?,BUSCA_AYUDA = ?,PORQUE = ?,RECIBE_MANEJO = ?,QUIEN_FORMULA = ?,CONSULTA_SIQUIATRIA = ?,FORMULADO_MED_PSIQUIATRICOS = ?,FACTORES_RIESGO = ?,SITUACION_ESTRES = ?,VIOLENCIA = ?,ANT_CONSUMO = ?,CUAL_ANT_CONSUMO = ?,CONTINUA_CONSUMO = ?,CUAL_CONTINUA_CONSUMO = ?,BCG = ?,HEPATITIS_B = ?,POLIO = ?,HIB = ?,NEUMOCOCO = ?,ROTAVIRUS = ?,INFLUENCIA_EST = ?,SRP = ?,VARICELA = ?,HEPATITIS_A = ?,FA = ?,DPT = ?,VPH = ?,TD = ?,MAMOGRAFIA = ?,PROTESIS_DENTAL = ?,RECIBIO_MEDICAMENTOS = ?,VALIDADO = ?,ECOGRAFIA_MAMARIA = ?,MENTALES = ?,INF_SUM_USUARIO = ?,NIVEL_INGRESO = ?,VACUNACION_NOPAI = ?,OBSERVACIONES = ?,GESTOR = ?,FFINALIZACION = ?,FINDRISK_VALOR = ?,FINDRISK_CATEGORIA = ?,UORG_EBAS = ?,PREPAGADA = ?,TIPO_REGISTRO = ? WHERE PERSONA_ID = ? AND FICHA_ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmtUpdate_tOracleOutput_1", pstmtUpdate_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [vFlowMeter_out4 begin ] start
	 */

	

	
		
		ok_Hash.put("vFlowMeter_out4", false);
		start_Hash.put("vFlowMeter_out4", System.currentTimeMillis());
		
	
	currentComponent="vFlowMeter_out4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_vFlowMeter_out4 = 0;
		

    int count_vFlowMeter_out4 = 0; 
 



/**
 * [vFlowMeter_out4 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct>) 
					globalMap.get( "tHash_Lookup_row33" ))
					;					
					
	

row33Struct row33HashKey = new row33Struct();
row33Struct row33Default = new row33Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct>) 
					globalMap.get( "tHash_Lookup_row1" ))
					;					
					
	

row1Struct row1HashKey = new row1Struct();
row1Struct row1Default = new row1Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tFileInputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputDelimited_1", false);
		start_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputDelimited_1";
	
	
		int tos_count_tFileInputDelimited_1 = 0;
		
	
	
	
 
	
	
	final routines.system.RowState rowstate_tFileInputDelimited_1 = new routines.system.RowState();
	
	
				class RowHelper_tFileInputDelimited_1{
				
					public void valueToConn_0(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row18Struct row18 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 0;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row18.PERSONA_ID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"PERSONA_ID", "row18", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'PERSONA_ID' in 'row18' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 1;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    								row18.FICHA_ID = ParserUtils.parseTo_int(temp);
    							
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"FICHA_ID", "row18", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								rowstate_tFileInputDelimited_1.setException(new RuntimeException("Value is empty for column : 'FICHA_ID' in 'row18' connection, value is invalid or this column should be nullable or have a default value."));
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 2;
					
							row18.TREGIMEN_SALUD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 3;
					
							row18.EPS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 4;
					
						temp = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						if(temp.length() > 0) {
							
								try {
								
    									row18.FREGISTRO = ParserUtils.parseTo_Date(temp, "dd-MM-yyyy");
    								
    							} catch(java.lang.Exception ex_tFileInputDelimited_1) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",ex_tFileInputDelimited_1.getMessage());
									rowstate_tFileInputDelimited_1.setException(new RuntimeException(String.format("Couldn't parse value for column '%s' in '%s', value is '%s'. Details: %s",
										"FREGISTRO", "row18", temp, ex_tFileInputDelimited_1), ex_tFileInputDelimited_1));
								}
    							
						} else {						
							
								
									row18.FREGISTRO = null;
								
							
						}
					
				
					columnIndexWithD_tFileInputDelimited_1 = 5;
					
							row18.RECOMENDACIONES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 6;
					
							row18.FORMACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 7;
					
							row18.EXPANSION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 8;
					
							row18.CONSOLIDACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 9;
					
							row18.APERTURA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 10;
					
							row18.POSPARENTAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 11;
					
							row18.DISOLUCION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 12;
					
							row18.ESTFAMILIAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 13;
					
							row18.TIPO_VIVIENDA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 14;
					
							row18.CUARTOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 15;
					
							row18.UBICACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 16;
					
							row18.BANOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 17;
					
							row18.TENENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 18;
					
							row18.TRESPORCUARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 19;
					
							row18.TIPOHAB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 20;
					
							row18.ACT_PRODUCTIVA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 21;
					
							row18.MAQUINARIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 22;
					
							row18.EXCRETAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 23;
					
							row18.MEDIOS_COMUNICACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 24;
					
							row18.TIPO_ALUMBRADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 25;
					
							row18.MASCOTAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 26;
					
							row18.MASCOTAS_VAC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 27;
					
							row18.DISP_BASURAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 28;
					
							row18.VECTORES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 29;
					
							row18.PROB_ACCIDENTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 30;
					
							row18.CONT_AMB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 31;
					
							row18.ABAST_AGUA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 32;
					
							row18.TRATA_CASA_AGUA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 33;
					
							row18.TRATA_AGUA_FUENTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 34;
					
							row18.TIPO_COCINA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 35;
					
							row18.HUMO_VIVIENDA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 36;
					
							row18.COCINA_CONSTRU_MATERIAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 37;
					
							row18.COCINA_VIVIENDA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 38;
					
							row18.COMBUSTIBLE_COCINA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 39;
					
							row18.COCINA_DORMITORIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 40;
					
							row18.TIPO_PISOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 41;
					
							row18.TIPO_TECHOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 42;
					
							row18.TIPO_PAREDES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 43;
					
							row18.VIVIENDA_2KM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 44;
					
							row18.BARRERAS_ACCESOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 45;
					
							row18.DIST_SALUD_CERCANO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 46;
					
							row18.MEDIO_TRANSPORTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 47;
					
							row18.VIA_ACCESO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 48;
					
							row18.NACIDOS_VIVOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 49;
					
							row18.MORTALIDAD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 50;
					
							row18.HIPERTENSION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 51;
					
							row18.DIABETES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 52;
					
							row18.ENF_CARDIACAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 53;
					
							row18.CANCER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 54;
					
							row18.ENF_RENAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 55;
					
							row18.ENF_CONGENITA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 56;
					
							row18.MENTALES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 57;
					
							row18.AYUDA_FAMI_NECES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 58;
					
							row18.AYUDA_FAMI_PROYEC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 59;
					
							row18.APOYO_FAMI_SENTIM = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 60;
					
							row18.DECISIONES_HOGAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 61;
					
							row18.COM_INTRAFAMILIAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 62;
					
							row18.ACT_FAMILIAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 63;
					
							row18.DISFRUTA_ACTIVIDADES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 64;
					
							row18.CEPILLADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 65;
					
							row18.NUM_CEPILLADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 66;
					
							row18.CARIES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 67;
					
							row18.ODONTOLOGO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 68;
					
							row18.FREC_ODONTOLOGO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 69;
					
							row18.FULTIMA_ODONTOLOGIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 70;
					
							row18.TOP_FLUOR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 71;
					
							row18.SEDA_DENTAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 72;
					
							row18.SELLANTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 73;
					
							row18.PERDIDA_DIENTES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 74;
					
							row18.CARNE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 75;
					
							row18.ESQUEMA_EDAD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 76;
					
							row18.ENF_TROPICAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 77;
					
							row18.ENF_TRANSMISION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 78;
					
							row18.TRATAMIENTO_ETS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 79;
					
							row18.PROBLEMAS_VISUALES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 80;
					
							row18.PROBLEMAS_AUDITIVOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 81;
					
							row18.RENDIMIENTO_ESTUDIOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 82;
					
							row18.ACT_EXTRACURRICULAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 83;
					
							row18.PRESION_SISTOLICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 84;
					
							row18.PRESION_DIASTOLICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 85;
					
							row18.ACT_FISICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 86;
					
							row18.FREC_ACT_FISICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 87;
					
							row18.DURACION_ACT_FISICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 88;
					
							row18.INT_ACT_FISICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 89;
					
							row18.CAIDAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 90;
					
							row18.DISC_FISICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 91;
					
							row18.DISC_MENTAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 92;
					
							row18.EDAD_MESTRUACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 93;
					
							row18.FECHA_REGLA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 94;
					
							row18.PARACLINICOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 95;
					
							row18.CITOLOGIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 96;
					
							row18.FECHA_CITOLOGIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 97;
					
							row18.EXAMEN_SENO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 98;
					
							row18.PLAN_FAMILIAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 99;
					
							row18.METODO_PLANF = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn_1(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row18Struct row18 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 100;
					
							row18.TIEMPO_MET_ANIOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 101;
					
							row18.TIEMPO_MET_MESES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 102;
					
							row18.TIEMPO_MET_DIAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 103;
					
							row18.CONTR_PLANF_FAMILIAR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 104;
					
							row18.EXAMEN_PROSTATA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 105;
					
							row18.PSA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 106;
					
							row18.FECHA_EXAMEN = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 107;
					
							row18.GESTA_CONFIRMADA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 108;
					
							row18.GESTA_PLANEADA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 109;
					
							row18.CONVIVENCIA_PAREJA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 110;
					
							row18.FUR = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 111;
					
							row18.SEMANAS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 112;
					
							row18.FECHA_PARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 113;
					
							row18.GANANCIA_PESP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 114;
					
							row18.CARNE_EMB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 115;
					
							row18.CONTROL_PRENATAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 116;
					
							row18.QUIEN_CONTROL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 117;
					
							row18.TRIMESTRE_ING_CONTROL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 118;
					
							row18.FECHA_CONTROL_INI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 119;
					
							row18.VAL_ODONTOLOGIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 120;
					
							row18.VAC_GESTANTE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 121;
					
							row18.NUM_GESTACIONES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 122;
					
							row18.NUM_PARTOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 123;
					
							row18.NUM_ABORTOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 124;
					
							row18.NUM_CESAREA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 125;
					
							row18.NUM_IVE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 126;
					
							row18.CAUSA_IVE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 127;
					
							row18.EMB_ECTOPICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 128;
					
							row18.NUM_NACIDOS_VIVOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 129;
					
							row18.FECHA_ULT_PARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 130;
					
							row18.RIESGO_OBSTETRICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 131;
					
							row18.HEMOGLOBINA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 132;
					
							row18.SEROLOGIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 133;
					
							row18.VIH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 134;
					
							row18.SUPLEMENTACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 135;
					
							row18.PERCENTIL_NUTRICIONAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 136;
					
							row18.TABAQUISMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 137;
					
							row18.NUM_CIGARRILLOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 138;
					
							row18.ALCOHOL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 139;
					
							row18.FREC_ALCOHOL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 140;
					
							row18.ALT_UTERINA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 141;
					
							row18.SEDENTARISMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 142;
					
							row18.PARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 143;
					
							row18.QUIEN_PARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 144;
					
							row18.COMPLICACIONES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 145;
					
							row18.ATENCION_PARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 146;
					
							row18.TIEMPO_GESTACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 147;
					
							row18.ATENCION_INSTITUCIONAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 148;
					
							row18.COMPLICACIONES_POSTPARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 149;
					
							row18.COMPLICACIONES_PARTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 150;
					
							row18.COMPLICACIONES_EMBARAZO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 151;
					
							row18.PLANIFICACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 152;
					
							row18.CONSUME_MEDICAMENTO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 153;
					
							row18.PESO_NACER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 154;
					
							row18.TALLA_NACER = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 155;
					
							row18.PERIMETRO_CEFALICO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 156;
					
							row18.PREMATUREZ = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 157;
					
							row18.COMPLICACIONES_EMB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 158;
					
							row18.RECIBE_MED = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 159;
					
							row18.REGISTRADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 160;
					
							row18.ANTECEDENTES_PERINATALES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 161;
					
							row18.PESO_KG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 162;
					
							row18.TALLA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 163;
					
							row18.CONTROL_CYD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 164;
					
							row18.IMC = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 165;
					
							row18.ESTADO_NUTRICION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 166;
					
							row18.VALORACION_DESARROLLO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 167;
					
							row18.LACTANCIA_6MESES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 168;
					
							row18.TOMADO_MED_HIPERTENSION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 169;
					
							row18.PERIMETRO_ABD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 170;
					
							row18.GLUCOSA_EMBARAZO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 171;
					
							row18.CONSUMO_VEGETALES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 172;
					
							row18.SEGURIDAD_ALIMENTARIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 173;
					
							row18.DESPARACITADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 174;
					
							row18.FECHA_DESPARACITADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 175;
					
							row18.PROGRAMAS_INSCRITO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 176;
					
							row18.TRANSTORNO_ALIMENTACION = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 177;
					
							row18.MORB_CRONICA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 178;
					
							row18.PERIMETRO_PANTORRILLA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 179;
					
							row18.MORBILIDAD_AGUDA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 180;
					
							row18.BUSCA_AYUDA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 181;
					
							row18.PORQUE = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 182;
					
							row18.RECIBE_MANEJO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 183;
					
							row18.QUIEN_FORMULA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 184;
					
							row18.CONSULTA_SIQUIATRIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 185;
					
							row18.FORMULADO_MED_PSIQUIATRICOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 186;
					
							row18.FACTORES_RIESGO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 187;
					
							row18.SITUACION_ESTRES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 188;
					
							row18.VIOLENCIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 189;
					
							row18.ANT_CONSUMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 190;
					
							row18.CUAL_ANT_CONSUMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 191;
					
							row18.CONTINUA_CONSUMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 192;
					
							row18.CUAL_CONTINUA_CONSUMO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 193;
					
							row18.BCG = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 194;
					
							row18.HEPATITIS_B = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 195;
					
							row18.POLIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 196;
					
							row18.HIB = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 197;
					
							row18.NEUMOCOCO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 198;
					
							row18.ROTAVIRUS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 199;
					
							row18.INFLUENCIA_EST = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn_2(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row18Struct row18 ) throws java.lang.Exception{
						
				int columnIndexWithD_tFileInputDelimited_1 = 0;
				
					String temp = ""; 
				
					columnIndexWithD_tFileInputDelimited_1 = 200;
					
							row18.SRP = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 201;
					
							row18.VARICELA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 202;
					
							row18.HEPATITIS_A = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 203;
					
							row18.FA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 204;
					
							row18.DPT = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 205;
					
							row18.VPH = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 206;
					
							row18.TD = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 207;
					
							row18.MAMOGRAFIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 208;
					
							row18.PROTESIS_DENTAL = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 209;
					
							row18.RECIBIO_MEDICAMENTOS = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 210;
					
							row18.VALIDADO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 211;
					
							row18.ECOGRAFIA_MAMARIA = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 212;
					
							row18.INF_SUM_USUARIO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 213;
					
							row18.NIVEL_INGRESO = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 214;
					
							row18.DIFTERIA2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 215;
					
							row18.DIFTERIA3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 216;
					
							row18.POLIO2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 217;
					
							row18.POLIO3 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 218;
					
							row18.SARAMPION2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 219;
					
							row18.INFLUENZA2 = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 220;
					
							row18.VACUNACION_NOPAI = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
					columnIndexWithD_tFileInputDelimited_1 = 221;
					
							row18.OBSERVACIONES = fid_tFileInputDelimited_1.get(columnIndexWithD_tFileInputDelimited_1);
						
				
				
					}
					
					public void valueToConn(org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1,row18Struct row18 ) throws java.lang.Exception{
				
						valueToConn_0(fid_tFileInputDelimited_1,row18 );
					
						valueToConn_1(fid_tFileInputDelimited_1,row18 );
					
						valueToConn_2(fid_tFileInputDelimited_1,row18 );
					
					}
				
				}
				RowHelper_tFileInputDelimited_1 rowHelper_tFileInputDelimited_1  = new RowHelper_tFileInputDelimited_1();
			
				int nb_line_tFileInputDelimited_1 = 0;
				org.talend.fileprocess.FileInputDelimited fid_tFileInputDelimited_1 = null;
				int limit_tFileInputDelimited_1 = -1;
				try{
					
						Object filename_tFileInputDelimited_1 = context.RutaSistema+"/FFA/tempFFA.csv";
						if(filename_tFileInputDelimited_1 instanceof java.io.InputStream){
							
			int footer_value_tFileInputDelimited_1 = 0, random_value_tFileInputDelimited_1 = -1;
			if(footer_value_tFileInputDelimited_1 >0 || random_value_tFileInputDelimited_1 > 0){
				throw new java.lang.Exception("When the input source is a stream,footer and random shouldn't be bigger than 0.");				
			}
		
						}
						try {
							fid_tFileInputDelimited_1 = new org.talend.fileprocess.FileInputDelimited(context.RutaSistema+"/FFA/tempFFA.csv", "UTF-8",";","\n",false,1,0,
									limit_tFileInputDelimited_1
								,-1, false);
						} catch(java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
							
								
								System.err.println(e.getMessage());
							
						}
					
				    
					while (fid_tFileInputDelimited_1!=null && fid_tFileInputDelimited_1.nextRecord()) {
						rowstate_tFileInputDelimited_1.reset();
						
			    						row18 = null;			
												
									boolean whetherReject_tFileInputDelimited_1 = false;
									row18 = new row18Struct();
									try {
										
			rowHelper_tFileInputDelimited_1.valueToConn(fid_tFileInputDelimited_1, row18 );
		
										
										if(rowstate_tFileInputDelimited_1.getException()!=null) {
											throw rowstate_tFileInputDelimited_1.getException();
										}
										
										
							
			    					} catch (java.lang.Exception e) {
globalMap.put("tFileInputDelimited_1_ERROR_MESSAGE",e.getMessage());
			        					whetherReject_tFileInputDelimited_1 = true;
			        					
			                					System.err.println(e.getMessage());
			                					row18 = null;
			                				
										
			    					}
								

 



/**
 * [tFileInputDelimited_1 begin ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 


	tos_count_tFileInputDelimited_1++;

/**
 * [tFileInputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_begin ] stop
 */
// Start of branch "row18"
if(row18 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row33Struct row33 = null;
					
						row1Struct row1 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row33" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow33 = false;
       		  	    	
       		  	    	
 							row33Struct row33ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
	                        		    	Object exprKeyValue_row33__FI_ID = row18.FICHA_ID;
	                        		    	if(exprKeyValue_row33__FI_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_4 = true;
	                        		    	} else {
                        		    			row33HashKey.FI_ID = (int)(Integer) exprKeyValue_row33__FI_ID;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_row33__PERSONA_ID = row18.PERSONA_ID;
	                        		    	if(exprKeyValue_row33__PERSONA_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_4 = true;
	                        		    	} else {
                        		    			row33HashKey.PERSONA_ID = (int)(Integer) exprKeyValue_row33__PERSONA_ID;
                        		    		}
                        		    		

								
		                        	row33HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row33.lookup( row33HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row33Struct fromLookup_row33 = null;
							row33 = row33Default;
										 
							
								 
							
							
								if (tHash_Lookup_row33 !=null && tHash_Lookup_row33.hasNext()) { // G 099
								
							
								
								fromLookup_row33 = tHash_Lookup_row33.next();

							
							
								} // G 099
							
							

							if(fromLookup_row33 != null) {
								row33 = fromLookup_row33;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row1" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow1 = false;
       		  	    	
       		  	    	
 							row1Struct row1ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
	                        		    	Object exprKeyValue_row1__FICHA_ID = row18.FICHA_ID;
	                        		    	if(exprKeyValue_row1__FICHA_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_4 = true;
	                        		    	} else {
                        		    			row1HashKey.FICHA_ID = (int)(Integer) exprKeyValue_row1__FICHA_ID;
                        		    		}
                        		    		
	                        		    	Object exprKeyValue_row1__PERSONA_ID = row18.PERSONA_ID;
	                        		    	if(exprKeyValue_row1__PERSONA_ID == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_4 = true;
	                        		    	} else {
                        		    			row1HashKey.PERSONA_ID = (int)(Integer) exprKeyValue_row1__PERSONA_ID;
                        		    		}
                        		    		

								
		                        	row1HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_4) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row1.lookup( row1HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row1 != null && tHash_Lookup_row1.getCount(row1HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row1' and it contains more one result from keys :  row1.FICHA_ID = '" + row1HashKey.FICHA_ID + "', row1.PERSONA_ID = '" + row1HashKey.PERSONA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row1Struct fromLookup_row1 = null;
							row1 = row1Default;
										 
							
								 
							
							
								if (tHash_Lookup_row1 !=null && tHash_Lookup_row1.hasNext()) { // G 099
								
							
								
								fromLookup_row1 = tHash_Lookup_row1.next();

							
							
								} // G 099
							
							

							if(fromLookup_row1 != null) {
								row1 = fromLookup_row1;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.PERSONA_ID = row18.PERSONA_ID ;
out4_tmp.FICHA_ID = row18.FICHA_ID ;
out4_tmp.TREGIMEN_SALUD = row18.TREGIMEN_SALUD ;
out4_tmp.EPS = row18.EPS ;
out4_tmp.FREGISTRO = row18.FREGISTRO ;
out4_tmp.RECOMENDACIONES = row18.RECOMENDACIONES ;
out4_tmp.FORMACION = row18.FORMACION ;
out4_tmp.EXPANSION = row18.EXPANSION ;
out4_tmp.CONSOLIDACION = row18.CONSOLIDACION ;
out4_tmp.APERTURA = row18.APERTURA ;
out4_tmp.POSPARENTAL = row18.POSPARENTAL ;
out4_tmp.DISOLUCION = row18.DISOLUCION ;
out4_tmp.ESTFAMILIAR = row18.ESTFAMILIAR ;
out4_tmp.TIPO_VIVIENDA = row18.TIPO_VIVIENDA ;
out4_tmp.CUARTOS = row18.CUARTOS ;
out4_tmp.UBICACION = row18.UBICACION ;
out4_tmp.BANOS = row18.BANOS ;
out4_tmp.TENENCIA = row18.TENENCIA ;
out4_tmp.TRESPORCUARTO = row18.TRESPORCUARTO ;
out4_tmp.TIPOHAB = row18.TIPOHAB ;
out4_tmp.ACT_PRODUCTIVA = row18.ACT_PRODUCTIVA ;
out4_tmp.MAQUINARIA = row18.MAQUINARIA ;
out4_tmp.EXCRETAS = row18.EXCRETAS ;
out4_tmp.MEDIOS_COMUNICACION = row18.MEDIOS_COMUNICACION ;
out4_tmp.TIPO_ALUMBRADO = row18.TIPO_ALUMBRADO ;
out4_tmp.MASCOTAS = row18.MASCOTAS ;
out4_tmp.MASCOTAS_VAC = row18.MASCOTAS_VAC ;
out4_tmp.DISP_BASURAS = row18.DISP_BASURAS ;
out4_tmp.VECTORES = row18.VECTORES ;
out4_tmp.PROB_ACCIDENTE = row18.PROB_ACCIDENTE ;
out4_tmp.CONT_AMB = row18.CONT_AMB ;
out4_tmp.ABAST_AGUA = row18.ABAST_AGUA ;
out4_tmp.TRATA_CASA_AGUA = row18.TRATA_CASA_AGUA ;
out4_tmp.TRATA_AGUA_FUENTE = row18.TRATA_AGUA_FUENTE ;
out4_tmp.TIPO_COCINA = row18.TIPO_COCINA ;
out4_tmp.HUMO_VIVIENDA = row18.HUMO_VIVIENDA ;
out4_tmp.COCINA_CONSTRU_MATERIAL = row18.COCINA_CONSTRU_MATERIAL ;
out4_tmp.COCINA_VIVIENDA = row18.COCINA_VIVIENDA ;
out4_tmp.COMBUSTIBLE_COCINA = row18.COMBUSTIBLE_COCINA ;
out4_tmp.COCINA_DORMITORIO = row18.COCINA_DORMITORIO ;
out4_tmp.TIPO_PISOS = row18.TIPO_PISOS ;
out4_tmp.TIPO_TECHOS = row18.TIPO_TECHOS ;
out4_tmp.TIPO_PAREDES = row18.TIPO_PAREDES ;
out4_tmp.VIVIENDA_2KM = row18.VIVIENDA_2KM ;
out4_tmp.BARRERAS_ACCESOS = row18.BARRERAS_ACCESOS ;
out4_tmp.DIST_SALUD_CERCANO = row18.DIST_SALUD_CERCANO ;
out4_tmp.MEDIO_TRANSPORTE = row18.MEDIO_TRANSPORTE ;
out4_tmp.VIA_ACCESO = row18.VIA_ACCESO ;
out4_tmp.NACIDOS_VIVOS = row18.NACIDOS_VIVOS ;
out4_tmp.MORTALIDAD = row18.MORTALIDAD ;
out4_tmp.HIPERTENSION = row18.HIPERTENSION ;
out4_tmp.DIABETES = row18.DIABETES ;
out4_tmp.ENF_CARDIACAS = row18.ENF_CARDIACAS ;
out4_tmp.CANCER = row18.CANCER ;
out4_tmp.ENF_RENAL = row18.ENF_RENAL ;
out4_tmp.ENF_CONGENITA = row18.ENF_CONGENITA ;
out4_tmp.AYUDA_FAMI_NECES = row18.AYUDA_FAMI_NECES ;
out4_tmp.AYUDA_FAMI_PROYEC = row18.AYUDA_FAMI_PROYEC ;
out4_tmp.APOYO_FAMI_SENTIM = row18.APOYO_FAMI_SENTIM ;
out4_tmp.DECISIONES_HOGAR = row18.DECISIONES_HOGAR ;
out4_tmp.COM_INTRAFAMILIAR = row18.COM_INTRAFAMILIAR ;
out4_tmp.ACT_FAMILIAR = row18.ACT_FAMILIAR ;
out4_tmp.DISFRUTA_ACTIVIDADES = row18.DISFRUTA_ACTIVIDADES ;
out4_tmp.CEPILLADO = row18.CEPILLADO ;
out4_tmp.NUM_CEPILLADO = row18.NUM_CEPILLADO ;
out4_tmp.CARIES = row18.CARIES ;
out4_tmp.ODONTOLOGO = row18.ODONTOLOGO ;
out4_tmp.FREC_ODONTOLOGO = row18.FREC_ODONTOLOGO ;
out4_tmp.FULTIMA_ODONTOLOGIA = row18.FULTIMA_ODONTOLOGIA ;
out4_tmp.TOP_FLUOR = row18.TOP_FLUOR ;
out4_tmp.SEDA_DENTAL = row18.SEDA_DENTAL ;
out4_tmp.SELLANTE = row18.SELLANTE ;
out4_tmp.PERDIDA_DIENTES = row18.PERDIDA_DIENTES ;
out4_tmp.CARNE = row18.CARNE ;
out4_tmp.ESQUEMA_EDAD = row18.ESQUEMA_EDAD ;
out4_tmp.ENF_TROPICAL = row18.ENF_TROPICAL ;
out4_tmp.ENF_TRANSMISION = row18.ENF_TRANSMISION ;
out4_tmp.TRATAMIENTO_ETS = row18.TRATAMIENTO_ETS ;
out4_tmp.PROBLEMAS_VISUALES = row18.PROBLEMAS_VISUALES ;
out4_tmp.PROBLEMAS_AUDITIVOS = row18.PROBLEMAS_AUDITIVOS ;
out4_tmp.RENDIMIENTO_ESTUDIOS = row18.RENDIMIENTO_ESTUDIOS ;
out4_tmp.ACT_EXTRACURRICULAR = row18.ACT_EXTRACURRICULAR ;
out4_tmp.PRESION_SISTOLICA = row18.PRESION_SISTOLICA ;
out4_tmp.PRESION_DIASTOLICA = row18.PRESION_DIASTOLICA ;
out4_tmp.ACT_FISICA = row18.ACT_FISICA ;
out4_tmp.FREC_ACT_FISICA = row18.FREC_ACT_FISICA ;
out4_tmp.DURACION_ACT_FISICA = row18.DURACION_ACT_FISICA ;
out4_tmp.INT_ACT_FISICA = row18.INT_ACT_FISICA ;
out4_tmp.CAIDAS = row18.CAIDAS ;
out4_tmp.DISC_FISICA = row18.DISC_FISICA ;
out4_tmp.DISC_MENTAL = row18.DISC_MENTAL ;
out4_tmp.EDAD_MESTRUACION = row18.EDAD_MESTRUACION ;
out4_tmp.FECHA_REGLA = row18.FECHA_REGLA ;
out4_tmp.PARACLINICOS = row18.PARACLINICOS ;
out4_tmp.CITOLOGIA = row18.CITOLOGIA ;
out4_tmp.FECHA_CITOLOGIA = row18.FECHA_CITOLOGIA ;
out4_tmp.EXAMEN_SENO = row18.EXAMEN_SENO ;
out4_tmp.PLAN_FAMILIAR = row18.PLAN_FAMILIAR ;
out4_tmp.METODO_PLANF = row18.METODO_PLANF ;
out4_tmp.TIEMPO_MET_ANIOS = row18.TIEMPO_MET_ANIOS ;
out4_tmp.TIEMPO_MET_MESES = row18.TIEMPO_MET_MESES ;
out4_tmp.TIEMPO_MET_DIAS = row18.TIEMPO_MET_DIAS ;
out4_tmp.CONTR_PLANF_FAMILIAR = row18.CONTR_PLANF_FAMILIAR ;
out4_tmp.EXAMEN_PROSTATA = row18.EXAMEN_PROSTATA ;
out4_tmp.PSA = row18.PSA ;
out4_tmp.FECHA_EXAMEN = row18.FECHA_EXAMEN ;
out4_tmp.GESTA_CONFIRMADA = row18.GESTA_CONFIRMADA ;
out4_tmp.GESTA_PLANEADA = row18.GESTA_PLANEADA ;
out4_tmp.CONVIVENCIA_PAREJA = row18.CONVIVENCIA_PAREJA ;
out4_tmp.FUR = row18.FUR ;
out4_tmp.SEMANAS = row18.SEMANAS ;
out4_tmp.FECHA_PARTO = row18.FECHA_PARTO ;
out4_tmp.GANANCIA_PESP = row18.GANANCIA_PESP ;
out4_tmp.CARNE_EMB = row18.CARNE_EMB ;
out4_tmp.CONTROL_PRENATAL = row18.CONTROL_PRENATAL ;
out4_tmp.QUIEN_CONTROL = row18.QUIEN_CONTROL ;
out4_tmp.TRIMESTRE_ING_CONTROL = row18.TRIMESTRE_ING_CONTROL ;
out4_tmp.FECHA_CONTROL_INI = row18.FECHA_CONTROL_INI ;
out4_tmp.VAL_ODONTOLOGIA = row18.VAL_ODONTOLOGIA ;
out4_tmp.VAC_GESTANTE = row18.VAC_GESTANTE ;
out4_tmp.NUM_GESTACIONES = row18.NUM_GESTACIONES ;
out4_tmp.NUM_PARTOS = row18.NUM_PARTOS ;
out4_tmp.NUM_ABORTOS = row18.NUM_ABORTOS ;
out4_tmp.NUM_CESAREA = row18.NUM_CESAREA ;
out4_tmp.NUM_IVE = row18.NUM_IVE ;
out4_tmp.CAUSA_IVE = row18.CAUSA_IVE ;
out4_tmp.EMB_ECTOPICO = row18.EMB_ECTOPICO ;
out4_tmp.NUM_NACIDOS_VIVOS = row18.NUM_NACIDOS_VIVOS ;
out4_tmp.FECHA_ULT_PARTO = row18.FECHA_ULT_PARTO ;
out4_tmp.RIESGO_OBSTETRICO = row18.RIESGO_OBSTETRICO ;
out4_tmp.HEMOGLOBINA = row18.HEMOGLOBINA ;
out4_tmp.SEROLOGIA = row18.SEROLOGIA ;
out4_tmp.VIH = row18.VIH ;
out4_tmp.SUPLEMENTACION = row18.SUPLEMENTACION ;
out4_tmp.PERCENTIL_NUTRICIONAL = row18.PERCENTIL_NUTRICIONAL ;
out4_tmp.TABAQUISMO = row18.TABAQUISMO ;
out4_tmp.NUM_CIGARRILLOS = row18.NUM_CIGARRILLOS ;
out4_tmp.ALCOHOL = row18.ALCOHOL ;
out4_tmp.FREC_ALCOHOL = row18.FREC_ALCOHOL ;
out4_tmp.ALT_UTERINA = row18.ALT_UTERINA ;
out4_tmp.SEDENTARISMO = row18.SEDENTARISMO ;
out4_tmp.PARTO = row18.PARTO ;
out4_tmp.QUIEN_PARTO = row18.QUIEN_PARTO ;
out4_tmp.COMPLICACIONES = row18.COMPLICACIONES ;
out4_tmp.ATENCION_PARTO = row18.ATENCION_PARTO ;
out4_tmp.TIEMPO_GESTACION = row18.TIEMPO_GESTACION ;
out4_tmp.ATENCION_INSTITUCIONAL = row18.ATENCION_INSTITUCIONAL ;
out4_tmp.COMPLICACIONES_POSTPARTO = row18.COMPLICACIONES_POSTPARTO ;
out4_tmp.COMPLICACIONES_PARTO = row18.COMPLICACIONES_PARTO ;
out4_tmp.COMPLICACIONES_EMBARAZO = row18.COMPLICACIONES_EMBARAZO ;
out4_tmp.PLANIFICACION = row18.PLANIFICACION ;
out4_tmp.CONSUME_MEDICAMENTO = row18.CONSUME_MEDICAMENTO ;
out4_tmp.PESO_NACER = row18.PESO_NACER ;
out4_tmp.TALLA_NACER = row18.TALLA_NACER ;
out4_tmp.PERIMETRO_CEFALICO = row18.PERIMETRO_CEFALICO ;
out4_tmp.PREMATUREZ = row18.PREMATUREZ ;
out4_tmp.COMPLICACIONES_EMB = row18.COMPLICACIONES_EMB ;
out4_tmp.RECIBE_MED = row18.RECIBE_MED ;
out4_tmp.REGISTRADO = row18.REGISTRADO ;
out4_tmp.ANTECEDENTES_PERINATALES = row18.ANTECEDENTES_PERINATALES ;
out4_tmp.PESO_KG = row18.PESO_KG ;
out4_tmp.TALLA = row18.TALLA ;
out4_tmp.CONTROL_CYD = row18.CONTROL_CYD ;
out4_tmp.IMC = row18.IMC ;
out4_tmp.ESTADO_NUTRICION = row18.ESTADO_NUTRICION ;
out4_tmp.VALORACION_DESARROLLO = row18.VALORACION_DESARROLLO ;
out4_tmp.LACTANCIA_6MESES = row18.LACTANCIA_6MESES ;
out4_tmp.TOMADO_MED_HIPERTENSION = row18.TOMADO_MED_HIPERTENSION ;
out4_tmp.PERIMETRO_ABD = row18.PERIMETRO_ABD ;
out4_tmp.GLUCOSA_EMBARAZO = row18.GLUCOSA_EMBARAZO ;
out4_tmp.CONSUMO_VEGETALES = row18.CONSUMO_VEGETALES ;
out4_tmp.SEGURIDAD_ALIMENTARIA = row18.SEGURIDAD_ALIMENTARIA ;
out4_tmp.DESPARACITADO = row18.DESPARACITADO ;
out4_tmp.FECHA_DESPARACITADO = row18.FECHA_DESPARACITADO ;
out4_tmp.PROGRAMAS_INSCRITO = row18.PROGRAMAS_INSCRITO ;
out4_tmp.TRANSTORNO_ALIMENTACION = row18.TRANSTORNO_ALIMENTACION ;
out4_tmp.MORB_CRONICA = row18.MORB_CRONICA ;
out4_tmp.PERIMETRO_PANTORRILLA = row18.PERIMETRO_PANTORRILLA ;
out4_tmp.MORBILIDAD_AGUDA = row18.MORBILIDAD_AGUDA ;
out4_tmp.BUSCA_AYUDA = row18.BUSCA_AYUDA ;
out4_tmp.PORQUE = row18.PORQUE ;
out4_tmp.RECIBE_MANEJO = row18.RECIBE_MANEJO ;
out4_tmp.QUIEN_FORMULA = row18.QUIEN_FORMULA ;
out4_tmp.CONSULTA_SIQUIATRIA = row18.CONSULTA_SIQUIATRIA ;
out4_tmp.FORMULADO_MED_PSIQUIATRICOS = row18.FORMULADO_MED_PSIQUIATRICOS ;
out4_tmp.FACTORES_RIESGO = row18.FACTORES_RIESGO ;
out4_tmp.SITUACION_ESTRES = row18.SITUACION_ESTRES ;
out4_tmp.VIOLENCIA = row18.VIOLENCIA ;
out4_tmp.ANT_CONSUMO = row18.ANT_CONSUMO ;
out4_tmp.CUAL_ANT_CONSUMO = row18.CUAL_ANT_CONSUMO ;
out4_tmp.CONTINUA_CONSUMO = row18.CONTINUA_CONSUMO ;
out4_tmp.CUAL_CONTINUA_CONSUMO = row18.CUAL_CONTINUA_CONSUMO ;
out4_tmp.BCG = row18.BCG ;
out4_tmp.HEPATITIS_B = row18.HEPATITIS_B ;
out4_tmp.POLIO = row18.POLIO.length() == 0 ? row18.POLIO2.length() == 0 ? row18.POLIO3: row18.POLIO2: row18.POLIO ;
out4_tmp.HIB = row18.HIB ;
out4_tmp.NEUMOCOCO = row18.NEUMOCOCO ;
out4_tmp.ROTAVIRUS = row18.ROTAVIRUS ;
out4_tmp.INFLUENCIA_EST = row18.INFLUENCIA_EST.length() == 0 ? row18.INFLUENZA2 : row18.INFLUENCIA_EST ;
out4_tmp.SRP = row18.SRP.length() == 0 ? row18.SARAMPION2 : row18.SRP ;
out4_tmp.VARICELA = row18.VARICELA ;
out4_tmp.HEPATITIS_A = row18.HEPATITIS_A ;
out4_tmp.FA = row18.FA ;
out4_tmp.DPT = row18.DPT.length() == 0 ? row18.DIFTERIA2.length() == 0 ? row18.DIFTERIA3: row18.DIFTERIA2: row18.DPT ;
out4_tmp.VPH = row18.VPH ;
out4_tmp.TD = row18.TD ;
out4_tmp.MAMOGRAFIA = row18.MAMOGRAFIA ;
out4_tmp.PROTESIS_DENTAL = row18.PROTESIS_DENTAL ;
out4_tmp.RECIBIO_MEDICAMENTOS = row18.RECIBIO_MEDICAMENTOS ;
out4_tmp.VALIDADO = row18.VALIDADO ;
out4_tmp.ECOGRAFIA_MAMARIA = row18.ECOGRAFIA_MAMARIA ;
out4_tmp.MENTALES = row18.MENTALES;
out4_tmp.INF_SUM_USUARIO = row18.INF_SUM_USUARIO ;
out4_tmp.NIVEL_INGRESO = row18.NIVEL_INGRESO ;
out4_tmp.VACUNACION_NOPAI = row18.VACUNACION_NOPAI ;
out4_tmp.OBSERVACIONES = row18.OBSERVACIONES ;
out4_tmp.GESTOR = row33.GESTOR ;
out4_tmp.FFINALIZACION = row33.FFINALIZACION ;
out4_tmp.FINDRISK_VALOR = row33.VALOR_FINDRISK ;
out4_tmp.FINDRISK_CATEGORIA = row33.CATEGORIA_FINDRISK ;
out4_tmp.UORG_EBAS = row33.UORG_EBAS ;
out4_tmp.PREPAGADA = row33.PREPAGADA ;
out4_tmp.TIPO_REGISTRO = row1.TIPO_REGISTRO ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [vFlowMeter_out4 main ] start
	 */

	

	
	
	currentComponent="vFlowMeter_out4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					

    count_vFlowMeter_out4++; 
 


	tos_count_vFlowMeter_out4++;

/**
 * [vFlowMeter_out4 main ] stop
 */
	
	/**
	 * [vFlowMeter_out4 process_data_begin ] start
	 */

	

	
	
	currentComponent="vFlowMeter_out4";
	
	

 



/**
 * [vFlowMeter_out4 process_data_begin ] stop
 */

	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"meterRowout4"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setInt(1, out4.PERSONA_ID);

                    pstmt_tOracleOutput_1.setInt(2, out4.FICHA_ID);

            int checkCount_tOracleOutput_1 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_1 = pstmt_tOracleOutput_1.executeQuery()) {
                while(rs_tOracleOutput_1.next()) {
                    checkCount_tOracleOutput_1 = rs_tOracleOutput_1.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_1 > 0) {
                        if(out4.TREGIMEN_SALUD == null) {
pstmtUpdate_tOracleOutput_1.setNull(1, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(1, out4.TREGIMEN_SALUD);
}

                        if(out4.EPS == null) {
pstmtUpdate_tOracleOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(2, out4.EPS);
}

                        if(out4.FREGISTRO != null) {
pstmtUpdate_tOracleOutput_1.setObject(3, new java.sql.Timestamp(out4.FREGISTRO.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(3, java.sql.Types.DATE);
}

                        if(out4.RECOMENDACIONES == null) {
pstmtUpdate_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(4, out4.RECOMENDACIONES);
}

                        if(out4.FORMACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(5, out4.FORMACION);
}

                        if(out4.EXPANSION == null) {
pstmtUpdate_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(6, out4.EXPANSION);
}

                        if(out4.CONSOLIDACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(7, out4.CONSOLIDACION);
}

                        if(out4.APERTURA == null) {
pstmtUpdate_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(8, out4.APERTURA);
}

                        if(out4.POSPARENTAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(9, out4.POSPARENTAL);
}

                        if(out4.DISOLUCION == null) {
pstmtUpdate_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(10, out4.DISOLUCION);
}

                        if(out4.ESTFAMILIAR == null) {
pstmtUpdate_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(11, out4.ESTFAMILIAR);
}

                        if(out4.TIPO_VIVIENDA == null) {
pstmtUpdate_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(12, out4.TIPO_VIVIENDA);
}

                        if(out4.CUARTOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(13, out4.CUARTOS);
}

                        if(out4.UBICACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(14, out4.UBICACION);
}

                        if(out4.BANOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(15, out4.BANOS);
}

                        if(out4.TENENCIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(16, out4.TENENCIA);
}

                        if(out4.TRESPORCUARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(17, out4.TRESPORCUARTO);
}

                        if(out4.TIPOHAB == null) {
pstmtUpdate_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(18, out4.TIPOHAB);
}

                        if(out4.ACT_PRODUCTIVA == null) {
pstmtUpdate_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(19, out4.ACT_PRODUCTIVA);
}

                        if(out4.MAQUINARIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(20, out4.MAQUINARIA);
}

                        if(out4.EXCRETAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(21, out4.EXCRETAS);
}

                        if(out4.MEDIOS_COMUNICACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(22, out4.MEDIOS_COMUNICACION);
}

                        if(out4.TIPO_ALUMBRADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(23, out4.TIPO_ALUMBRADO);
}

                        if(out4.MASCOTAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(24, out4.MASCOTAS);
}

                        if(out4.MASCOTAS_VAC == null) {
pstmtUpdate_tOracleOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(25, out4.MASCOTAS_VAC);
}

                        if(out4.DISP_BASURAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(26, out4.DISP_BASURAS);
}

                        if(out4.VECTORES == null) {
pstmtUpdate_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(27, out4.VECTORES);
}

                        if(out4.PROB_ACCIDENTE == null) {
pstmtUpdate_tOracleOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(28, out4.PROB_ACCIDENTE);
}

                        if(out4.CONT_AMB == null) {
pstmtUpdate_tOracleOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(29, out4.CONT_AMB);
}

                        if(out4.ABAST_AGUA == null) {
pstmtUpdate_tOracleOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(30, out4.ABAST_AGUA);
}

                        if(out4.TRATA_CASA_AGUA == null) {
pstmtUpdate_tOracleOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(31, out4.TRATA_CASA_AGUA);
}

                        if(out4.TRATA_AGUA_FUENTE == null) {
pstmtUpdate_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(32, out4.TRATA_AGUA_FUENTE);
}

                        if(out4.TIPO_COCINA == null) {
pstmtUpdate_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(33, out4.TIPO_COCINA);
}

                        if(out4.HUMO_VIVIENDA == null) {
pstmtUpdate_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(34, out4.HUMO_VIVIENDA);
}

                        if(out4.COCINA_CONSTRU_MATERIAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(35, out4.COCINA_CONSTRU_MATERIAL);
}

                        if(out4.COCINA_VIVIENDA == null) {
pstmtUpdate_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(36, out4.COCINA_VIVIENDA);
}

                        if(out4.COMBUSTIBLE_COCINA == null) {
pstmtUpdate_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(37, out4.COMBUSTIBLE_COCINA);
}

                        if(out4.COCINA_DORMITORIO == null) {
pstmtUpdate_tOracleOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(38, out4.COCINA_DORMITORIO);
}

                        if(out4.TIPO_PISOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(39, out4.TIPO_PISOS);
}

                        if(out4.TIPO_TECHOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(40, out4.TIPO_TECHOS);
}

                        if(out4.TIPO_PAREDES == null) {
pstmtUpdate_tOracleOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(41, out4.TIPO_PAREDES);
}

                        if(out4.VIVIENDA_2KM == null) {
pstmtUpdate_tOracleOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(42, out4.VIVIENDA_2KM);
}

                        if(out4.BARRERAS_ACCESOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(43, out4.BARRERAS_ACCESOS);
}

                        if(out4.DIST_SALUD_CERCANO == null) {
pstmtUpdate_tOracleOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(44, out4.DIST_SALUD_CERCANO);
}

                        if(out4.MEDIO_TRANSPORTE == null) {
pstmtUpdate_tOracleOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(45, out4.MEDIO_TRANSPORTE);
}

                        if(out4.VIA_ACCESO == null) {
pstmtUpdate_tOracleOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(46, out4.VIA_ACCESO);
}

                        if(out4.NACIDOS_VIVOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(47, out4.NACIDOS_VIVOS);
}

                        if(out4.MORTALIDAD == null) {
pstmtUpdate_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(48, out4.MORTALIDAD);
}

                        if(out4.HIPERTENSION == null) {
pstmtUpdate_tOracleOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(49, out4.HIPERTENSION);
}

                        if(out4.DIABETES == null) {
pstmtUpdate_tOracleOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(50, out4.DIABETES);
}

                        if(out4.ENF_CARDIACAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(51, out4.ENF_CARDIACAS);
}

                        if(out4.CANCER == null) {
pstmtUpdate_tOracleOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(52, out4.CANCER);
}

                        if(out4.ENF_RENAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(53, out4.ENF_RENAL);
}

                        if(out4.ENF_CONGENITA == null) {
pstmtUpdate_tOracleOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(54, out4.ENF_CONGENITA);
}

                        if(out4.AYUDA_FAMI_NECES == null) {
pstmtUpdate_tOracleOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(55, out4.AYUDA_FAMI_NECES);
}

                        if(out4.AYUDA_FAMI_PROYEC == null) {
pstmtUpdate_tOracleOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(56, out4.AYUDA_FAMI_PROYEC);
}

                        if(out4.APOYO_FAMI_SENTIM == null) {
pstmtUpdate_tOracleOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(57, out4.APOYO_FAMI_SENTIM);
}

                        if(out4.DECISIONES_HOGAR == null) {
pstmtUpdate_tOracleOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(58, out4.DECISIONES_HOGAR);
}

                        if(out4.COM_INTRAFAMILIAR == null) {
pstmtUpdate_tOracleOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(59, out4.COM_INTRAFAMILIAR);
}

                        if(out4.ACT_FAMILIAR == null) {
pstmtUpdate_tOracleOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(60, out4.ACT_FAMILIAR);
}

                        if(out4.DISFRUTA_ACTIVIDADES == null) {
pstmtUpdate_tOracleOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(61, out4.DISFRUTA_ACTIVIDADES);
}

                        if(out4.CEPILLADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(62, out4.CEPILLADO);
}

                        if(out4.NUM_CEPILLADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(63, out4.NUM_CEPILLADO);
}

                        if(out4.CARIES == null) {
pstmtUpdate_tOracleOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(64, out4.CARIES);
}

                        if(out4.ODONTOLOGO == null) {
pstmtUpdate_tOracleOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(65, out4.ODONTOLOGO);
}

                        if(out4.FREC_ODONTOLOGO == null) {
pstmtUpdate_tOracleOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(66, out4.FREC_ODONTOLOGO);
}

                        if(out4.FULTIMA_ODONTOLOGIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(67, out4.FULTIMA_ODONTOLOGIA);
}

                        if(out4.TOP_FLUOR == null) {
pstmtUpdate_tOracleOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(68, out4.TOP_FLUOR);
}

                        if(out4.SEDA_DENTAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(69, out4.SEDA_DENTAL);
}

                        if(out4.SELLANTE == null) {
pstmtUpdate_tOracleOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(70, out4.SELLANTE);
}

                        if(out4.PERDIDA_DIENTES == null) {
pstmtUpdate_tOracleOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(71, out4.PERDIDA_DIENTES);
}

                        if(out4.CARNE == null) {
pstmtUpdate_tOracleOutput_1.setNull(72, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(72, out4.CARNE);
}

                        if(out4.ESQUEMA_EDAD == null) {
pstmtUpdate_tOracleOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(73, out4.ESQUEMA_EDAD);
}

                        if(out4.ENF_TROPICAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(74, out4.ENF_TROPICAL);
}

                        if(out4.ENF_TRANSMISION == null) {
pstmtUpdate_tOracleOutput_1.setNull(75, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(75, out4.ENF_TRANSMISION);
}

                        if(out4.TRATAMIENTO_ETS == null) {
pstmtUpdate_tOracleOutput_1.setNull(76, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(76, out4.TRATAMIENTO_ETS);
}

                        if(out4.PROBLEMAS_VISUALES == null) {
pstmtUpdate_tOracleOutput_1.setNull(77, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(77, out4.PROBLEMAS_VISUALES);
}

                        if(out4.PROBLEMAS_AUDITIVOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(78, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(78, out4.PROBLEMAS_AUDITIVOS);
}

                        if(out4.RENDIMIENTO_ESTUDIOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(79, out4.RENDIMIENTO_ESTUDIOS);
}

                        if(out4.ACT_EXTRACURRICULAR == null) {
pstmtUpdate_tOracleOutput_1.setNull(80, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(80, out4.ACT_EXTRACURRICULAR);
}

                        if(out4.PRESION_SISTOLICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(81, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(81, out4.PRESION_SISTOLICA);
}

                        if(out4.PRESION_DIASTOLICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(82, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(82, out4.PRESION_DIASTOLICA);
}

                        if(out4.ACT_FISICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(83, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(83, out4.ACT_FISICA);
}

                        if(out4.FREC_ACT_FISICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(84, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(84, out4.FREC_ACT_FISICA);
}

                        if(out4.DURACION_ACT_FISICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(85, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(85, out4.DURACION_ACT_FISICA);
}

                        if(out4.INT_ACT_FISICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(86, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(86, out4.INT_ACT_FISICA);
}

                        if(out4.CAIDAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(87, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(87, out4.CAIDAS);
}

                        if(out4.DISC_FISICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(88, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(88, out4.DISC_FISICA);
}

                        if(out4.DISC_MENTAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(89, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(89, out4.DISC_MENTAL);
}

                        if(out4.EDAD_MESTRUACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(90, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(90, out4.EDAD_MESTRUACION);
}

                        if(out4.FECHA_REGLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(91, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(91, out4.FECHA_REGLA);
}

                        if(out4.PARACLINICOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(92, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(92, out4.PARACLINICOS);
}

                        if(out4.CITOLOGIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(93, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(93, out4.CITOLOGIA);
}

                        if(out4.FECHA_CITOLOGIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(94, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(94, out4.FECHA_CITOLOGIA);
}

                        if(out4.EXAMEN_SENO == null) {
pstmtUpdate_tOracleOutput_1.setNull(95, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(95, out4.EXAMEN_SENO);
}

                        if(out4.PLAN_FAMILIAR == null) {
pstmtUpdate_tOracleOutput_1.setNull(96, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(96, out4.PLAN_FAMILIAR);
}

                        if(out4.METODO_PLANF == null) {
pstmtUpdate_tOracleOutput_1.setNull(97, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(97, out4.METODO_PLANF);
}

                        if(out4.TIEMPO_MET_ANIOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(98, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(98, out4.TIEMPO_MET_ANIOS);
}

                        if(out4.TIEMPO_MET_MESES == null) {
pstmtUpdate_tOracleOutput_1.setNull(99, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(99, out4.TIEMPO_MET_MESES);
}

                        if(out4.TIEMPO_MET_DIAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(100, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(100, out4.TIEMPO_MET_DIAS);
}

                        if(out4.CONTR_PLANF_FAMILIAR == null) {
pstmtUpdate_tOracleOutput_1.setNull(101, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(101, out4.CONTR_PLANF_FAMILIAR);
}

                        if(out4.EXAMEN_PROSTATA == null) {
pstmtUpdate_tOracleOutput_1.setNull(102, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(102, out4.EXAMEN_PROSTATA);
}

                        if(out4.PSA == null) {
pstmtUpdate_tOracleOutput_1.setNull(103, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(103, out4.PSA);
}

                        if(out4.FECHA_EXAMEN == null) {
pstmtUpdate_tOracleOutput_1.setNull(104, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(104, out4.FECHA_EXAMEN);
}

                        if(out4.GESTA_CONFIRMADA == null) {
pstmtUpdate_tOracleOutput_1.setNull(105, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(105, out4.GESTA_CONFIRMADA);
}

                        if(out4.GESTA_PLANEADA == null) {
pstmtUpdate_tOracleOutput_1.setNull(106, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(106, out4.GESTA_PLANEADA);
}

                        if(out4.CONVIVENCIA_PAREJA == null) {
pstmtUpdate_tOracleOutput_1.setNull(107, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(107, out4.CONVIVENCIA_PAREJA);
}

                        if(out4.FUR == null) {
pstmtUpdate_tOracleOutput_1.setNull(108, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(108, out4.FUR);
}

                        if(out4.SEMANAS == null) {
pstmtUpdate_tOracleOutput_1.setNull(109, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(109, out4.SEMANAS);
}

                        if(out4.FECHA_PARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(110, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(110, out4.FECHA_PARTO);
}

                        if(out4.GANANCIA_PESP == null) {
pstmtUpdate_tOracleOutput_1.setNull(111, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(111, out4.GANANCIA_PESP);
}

                        if(out4.CARNE_EMB == null) {
pstmtUpdate_tOracleOutput_1.setNull(112, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(112, out4.CARNE_EMB);
}

                        if(out4.CONTROL_PRENATAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(113, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(113, out4.CONTROL_PRENATAL);
}

                        if(out4.QUIEN_CONTROL == null) {
pstmtUpdate_tOracleOutput_1.setNull(114, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(114, out4.QUIEN_CONTROL);
}

                        if(out4.TRIMESTRE_ING_CONTROL == null) {
pstmtUpdate_tOracleOutput_1.setNull(115, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(115, out4.TRIMESTRE_ING_CONTROL);
}

                        if(out4.FECHA_CONTROL_INI == null) {
pstmtUpdate_tOracleOutput_1.setNull(116, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(116, out4.FECHA_CONTROL_INI);
}

                        if(out4.VAL_ODONTOLOGIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(117, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(117, out4.VAL_ODONTOLOGIA);
}

                        if(out4.VAC_GESTANTE == null) {
pstmtUpdate_tOracleOutput_1.setNull(118, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(118, out4.VAC_GESTANTE);
}

                        if(out4.NUM_GESTACIONES == null) {
pstmtUpdate_tOracleOutput_1.setNull(119, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(119, out4.NUM_GESTACIONES);
}

                        if(out4.NUM_PARTOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(120, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(120, out4.NUM_PARTOS);
}

                        if(out4.NUM_ABORTOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(121, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(121, out4.NUM_ABORTOS);
}

                        if(out4.NUM_CESAREA == null) {
pstmtUpdate_tOracleOutput_1.setNull(122, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(122, out4.NUM_CESAREA);
}

                        if(out4.NUM_IVE == null) {
pstmtUpdate_tOracleOutput_1.setNull(123, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(123, out4.NUM_IVE);
}

                        if(out4.CAUSA_IVE == null) {
pstmtUpdate_tOracleOutput_1.setNull(124, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(124, out4.CAUSA_IVE);
}

                        if(out4.EMB_ECTOPICO == null) {
pstmtUpdate_tOracleOutput_1.setNull(125, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(125, out4.EMB_ECTOPICO);
}

                        if(out4.NUM_NACIDOS_VIVOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(126, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(126, out4.NUM_NACIDOS_VIVOS);
}

                        if(out4.FECHA_ULT_PARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(127, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(127, out4.FECHA_ULT_PARTO);
}

                        if(out4.RIESGO_OBSTETRICO == null) {
pstmtUpdate_tOracleOutput_1.setNull(128, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(128, out4.RIESGO_OBSTETRICO);
}

                        if(out4.HEMOGLOBINA == null) {
pstmtUpdate_tOracleOutput_1.setNull(129, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(129, out4.HEMOGLOBINA);
}

                        if(out4.SEROLOGIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(130, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(130, out4.SEROLOGIA);
}

                        if(out4.VIH == null) {
pstmtUpdate_tOracleOutput_1.setNull(131, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(131, out4.VIH);
}

                        if(out4.SUPLEMENTACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(132, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(132, out4.SUPLEMENTACION);
}

                        if(out4.PERCENTIL_NUTRICIONAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(133, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(133, out4.PERCENTIL_NUTRICIONAL);
}

                        if(out4.TABAQUISMO == null) {
pstmtUpdate_tOracleOutput_1.setNull(134, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(134, out4.TABAQUISMO);
}

                        if(out4.NUM_CIGARRILLOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(135, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(135, out4.NUM_CIGARRILLOS);
}

                        if(out4.ALCOHOL == null) {
pstmtUpdate_tOracleOutput_1.setNull(136, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(136, out4.ALCOHOL);
}

                        if(out4.FREC_ALCOHOL == null) {
pstmtUpdate_tOracleOutput_1.setNull(137, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(137, out4.FREC_ALCOHOL);
}

                        if(out4.ALT_UTERINA == null) {
pstmtUpdate_tOracleOutput_1.setNull(138, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(138, out4.ALT_UTERINA);
}

                        if(out4.SEDENTARISMO == null) {
pstmtUpdate_tOracleOutput_1.setNull(139, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(139, out4.SEDENTARISMO);
}

                        if(out4.PARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(140, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(140, out4.PARTO);
}

                        if(out4.QUIEN_PARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(141, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(141, out4.QUIEN_PARTO);
}

                        if(out4.COMPLICACIONES == null) {
pstmtUpdate_tOracleOutput_1.setNull(142, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(142, out4.COMPLICACIONES);
}

                        if(out4.ATENCION_PARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(143, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(143, out4.ATENCION_PARTO);
}

                        if(out4.TIEMPO_GESTACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(144, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(144, out4.TIEMPO_GESTACION);
}

                        if(out4.ATENCION_INSTITUCIONAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(145, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(145, out4.ATENCION_INSTITUCIONAL);
}

                        if(out4.COMPLICACIONES_POSTPARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(146, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(146, out4.COMPLICACIONES_POSTPARTO);
}

                        if(out4.COMPLICACIONES_PARTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(147, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(147, out4.COMPLICACIONES_PARTO);
}

                        if(out4.COMPLICACIONES_EMBARAZO == null) {
pstmtUpdate_tOracleOutput_1.setNull(148, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(148, out4.COMPLICACIONES_EMBARAZO);
}

                        if(out4.PLANIFICACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(149, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(149, out4.PLANIFICACION);
}

                        if(out4.CONSUME_MEDICAMENTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(150, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(150, out4.CONSUME_MEDICAMENTO);
}

                        if(out4.PESO_NACER == null) {
pstmtUpdate_tOracleOutput_1.setNull(151, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(151, out4.PESO_NACER);
}

                        if(out4.TALLA_NACER == null) {
pstmtUpdate_tOracleOutput_1.setNull(152, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(152, out4.TALLA_NACER);
}

                        if(out4.PERIMETRO_CEFALICO == null) {
pstmtUpdate_tOracleOutput_1.setNull(153, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(153, out4.PERIMETRO_CEFALICO);
}

                        if(out4.PREMATUREZ == null) {
pstmtUpdate_tOracleOutput_1.setNull(154, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(154, out4.PREMATUREZ);
}

                        if(out4.COMPLICACIONES_EMB == null) {
pstmtUpdate_tOracleOutput_1.setNull(155, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(155, out4.COMPLICACIONES_EMB);
}

                        if(out4.RECIBE_MED == null) {
pstmtUpdate_tOracleOutput_1.setNull(156, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(156, out4.RECIBE_MED);
}

                        if(out4.REGISTRADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(157, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(157, out4.REGISTRADO);
}

                        if(out4.ANTECEDENTES_PERINATALES == null) {
pstmtUpdate_tOracleOutput_1.setNull(158, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(158, out4.ANTECEDENTES_PERINATALES);
}

                        if(out4.PESO_KG == null) {
pstmtUpdate_tOracleOutput_1.setNull(159, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(159, out4.PESO_KG);
}

                        if(out4.TALLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(160, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(160, out4.TALLA);
}

                        if(out4.CONTROL_CYD == null) {
pstmtUpdate_tOracleOutput_1.setNull(161, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(161, out4.CONTROL_CYD);
}

                        if(out4.IMC == null) {
pstmtUpdate_tOracleOutput_1.setNull(162, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(162, out4.IMC);
}

                        if(out4.ESTADO_NUTRICION == null) {
pstmtUpdate_tOracleOutput_1.setNull(163, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(163, out4.ESTADO_NUTRICION);
}

                        if(out4.VALORACION_DESARROLLO == null) {
pstmtUpdate_tOracleOutput_1.setNull(164, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(164, out4.VALORACION_DESARROLLO);
}

                        if(out4.LACTANCIA_6MESES == null) {
pstmtUpdate_tOracleOutput_1.setNull(165, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(165, out4.LACTANCIA_6MESES);
}

                        if(out4.TOMADO_MED_HIPERTENSION == null) {
pstmtUpdate_tOracleOutput_1.setNull(166, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(166, out4.TOMADO_MED_HIPERTENSION);
}

                        if(out4.PERIMETRO_ABD == null) {
pstmtUpdate_tOracleOutput_1.setNull(167, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(167, out4.PERIMETRO_ABD);
}

                        if(out4.GLUCOSA_EMBARAZO == null) {
pstmtUpdate_tOracleOutput_1.setNull(168, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(168, out4.GLUCOSA_EMBARAZO);
}

                        if(out4.CONSUMO_VEGETALES == null) {
pstmtUpdate_tOracleOutput_1.setNull(169, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(169, out4.CONSUMO_VEGETALES);
}

                        if(out4.SEGURIDAD_ALIMENTARIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(170, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(170, out4.SEGURIDAD_ALIMENTARIA);
}

                        if(out4.DESPARACITADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(171, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(171, out4.DESPARACITADO);
}

                        if(out4.FECHA_DESPARACITADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(172, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(172, out4.FECHA_DESPARACITADO);
}

                        if(out4.PROGRAMAS_INSCRITO == null) {
pstmtUpdate_tOracleOutput_1.setNull(173, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(173, out4.PROGRAMAS_INSCRITO);
}

                        if(out4.TRANSTORNO_ALIMENTACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(174, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(174, out4.TRANSTORNO_ALIMENTACION);
}

                        if(out4.MORB_CRONICA == null) {
pstmtUpdate_tOracleOutput_1.setNull(175, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(175, out4.MORB_CRONICA);
}

                        if(out4.PERIMETRO_PANTORRILLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(176, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(176, out4.PERIMETRO_PANTORRILLA);
}

                        if(out4.MORBILIDAD_AGUDA == null) {
pstmtUpdate_tOracleOutput_1.setNull(177, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(177, out4.MORBILIDAD_AGUDA);
}

                        if(out4.BUSCA_AYUDA == null) {
pstmtUpdate_tOracleOutput_1.setNull(178, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(178, out4.BUSCA_AYUDA);
}

                        if(out4.PORQUE == null) {
pstmtUpdate_tOracleOutput_1.setNull(179, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(179, out4.PORQUE);
}

                        if(out4.RECIBE_MANEJO == null) {
pstmtUpdate_tOracleOutput_1.setNull(180, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(180, out4.RECIBE_MANEJO);
}

                        if(out4.QUIEN_FORMULA == null) {
pstmtUpdate_tOracleOutput_1.setNull(181, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(181, out4.QUIEN_FORMULA);
}

                        if(out4.CONSULTA_SIQUIATRIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(182, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(182, out4.CONSULTA_SIQUIATRIA);
}

                        if(out4.FORMULADO_MED_PSIQUIATRICOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(183, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(183, out4.FORMULADO_MED_PSIQUIATRICOS);
}

                        if(out4.FACTORES_RIESGO == null) {
pstmtUpdate_tOracleOutput_1.setNull(184, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(184, out4.FACTORES_RIESGO);
}

                        if(out4.SITUACION_ESTRES == null) {
pstmtUpdate_tOracleOutput_1.setNull(185, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(185, out4.SITUACION_ESTRES);
}

                        if(out4.VIOLENCIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(186, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(186, out4.VIOLENCIA);
}

                        if(out4.ANT_CONSUMO == null) {
pstmtUpdate_tOracleOutput_1.setNull(187, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(187, out4.ANT_CONSUMO);
}

                        if(out4.CUAL_ANT_CONSUMO == null) {
pstmtUpdate_tOracleOutput_1.setNull(188, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(188, out4.CUAL_ANT_CONSUMO);
}

                        if(out4.CONTINUA_CONSUMO == null) {
pstmtUpdate_tOracleOutput_1.setNull(189, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(189, out4.CONTINUA_CONSUMO);
}

                        if(out4.CUAL_CONTINUA_CONSUMO == null) {
pstmtUpdate_tOracleOutput_1.setNull(190, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(190, out4.CUAL_CONTINUA_CONSUMO);
}

                        if(out4.BCG == null) {
pstmtUpdate_tOracleOutput_1.setNull(191, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(191, out4.BCG);
}

                        if(out4.HEPATITIS_B == null) {
pstmtUpdate_tOracleOutput_1.setNull(192, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(192, out4.HEPATITIS_B);
}

                        if(out4.POLIO == null) {
pstmtUpdate_tOracleOutput_1.setNull(193, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(193, out4.POLIO);
}

                        if(out4.HIB == null) {
pstmtUpdate_tOracleOutput_1.setNull(194, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(194, out4.HIB);
}

                        if(out4.NEUMOCOCO == null) {
pstmtUpdate_tOracleOutput_1.setNull(195, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(195, out4.NEUMOCOCO);
}

                        if(out4.ROTAVIRUS == null) {
pstmtUpdate_tOracleOutput_1.setNull(196, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(196, out4.ROTAVIRUS);
}

                        if(out4.INFLUENCIA_EST == null) {
pstmtUpdate_tOracleOutput_1.setNull(197, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(197, out4.INFLUENCIA_EST);
}

                        if(out4.SRP == null) {
pstmtUpdate_tOracleOutput_1.setNull(198, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(198, out4.SRP);
}

                        if(out4.VARICELA == null) {
pstmtUpdate_tOracleOutput_1.setNull(199, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(199, out4.VARICELA);
}

                        if(out4.HEPATITIS_A == null) {
pstmtUpdate_tOracleOutput_1.setNull(200, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(200, out4.HEPATITIS_A);
}

                        if(out4.FA == null) {
pstmtUpdate_tOracleOutput_1.setNull(201, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(201, out4.FA);
}

                        if(out4.DPT == null) {
pstmtUpdate_tOracleOutput_1.setNull(202, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(202, out4.DPT);
}

                        if(out4.VPH == null) {
pstmtUpdate_tOracleOutput_1.setNull(203, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(203, out4.VPH);
}

                        if(out4.TD == null) {
pstmtUpdate_tOracleOutput_1.setNull(204, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(204, out4.TD);
}

                        if(out4.MAMOGRAFIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(205, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(205, out4.MAMOGRAFIA);
}

                        if(out4.PROTESIS_DENTAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(206, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(206, out4.PROTESIS_DENTAL);
}

                        if(out4.RECIBIO_MEDICAMENTOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(207, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(207, out4.RECIBIO_MEDICAMENTOS);
}

                        if(out4.VALIDADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(208, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(208, out4.VALIDADO);
}

                        if(out4.ECOGRAFIA_MAMARIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(209, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(209, out4.ECOGRAFIA_MAMARIA);
}

                        if(out4.MENTALES == null) {
pstmtUpdate_tOracleOutput_1.setNull(210, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(210, out4.MENTALES);
}

                        if(out4.INF_SUM_USUARIO == null) {
pstmtUpdate_tOracleOutput_1.setNull(211, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(211, out4.INF_SUM_USUARIO);
}

                        if(out4.NIVEL_INGRESO == null) {
pstmtUpdate_tOracleOutput_1.setNull(212, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(212, out4.NIVEL_INGRESO);
}

                        if(out4.VACUNACION_NOPAI == null) {
pstmtUpdate_tOracleOutput_1.setNull(213, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(213, out4.VACUNACION_NOPAI);
}

                        if(out4.OBSERVACIONES == null) {
pstmtUpdate_tOracleOutput_1.setNull(214, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(214, out4.OBSERVACIONES);
}

                        if(out4.GESTOR == null) {
pstmtUpdate_tOracleOutput_1.setNull(215, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(215, out4.GESTOR);
}

                        if(out4.FFINALIZACION != null) {
pstmtUpdate_tOracleOutput_1.setObject(216, new java.sql.Timestamp(out4.FFINALIZACION.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(216, java.sql.Types.DATE);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(217, out4.FINDRISK_VALOR);

                        if(out4.FINDRISK_CATEGORIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(218, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(218, out4.FINDRISK_CATEGORIA);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(219, out4.UORG_EBAS);

                        if(out4.PREPAGADA == null) {
pstmtUpdate_tOracleOutput_1.setNull(220, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(220, out4.PREPAGADA);
}

                        if(out4.TIPO_REGISTRO == null) {
pstmtUpdate_tOracleOutput_1.setNull(221, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(221, out4.TIPO_REGISTRO);
}

                        pstmtUpdate_tOracleOutput_1.setInt(222 + count_tOracleOutput_1, out4.PERSONA_ID);

                        pstmtUpdate_tOracleOutput_1.setInt(223 + count_tOracleOutput_1, out4.FICHA_ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtUpdate_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_1.setInt(1, out4.PERSONA_ID);

                        pstmtInsert_tOracleOutput_1.setInt(2, out4.FICHA_ID);

                        if(out4.TREGIMEN_SALUD == null) {
pstmtInsert_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(3, out4.TREGIMEN_SALUD);
}

                        if(out4.EPS == null) {
pstmtInsert_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(4, out4.EPS);
}

                        if(out4.FREGISTRO != null) {
pstmtInsert_tOracleOutput_1.setObject(5, new java.sql.Timestamp(out4.FREGISTRO.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(5, java.sql.Types.DATE);
}

                        if(out4.RECOMENDACIONES == null) {
pstmtInsert_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(6, out4.RECOMENDACIONES);
}

                        if(out4.FORMACION == null) {
pstmtInsert_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(7, out4.FORMACION);
}

                        if(out4.EXPANSION == null) {
pstmtInsert_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(8, out4.EXPANSION);
}

                        if(out4.CONSOLIDACION == null) {
pstmtInsert_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(9, out4.CONSOLIDACION);
}

                        if(out4.APERTURA == null) {
pstmtInsert_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(10, out4.APERTURA);
}

                        if(out4.POSPARENTAL == null) {
pstmtInsert_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(11, out4.POSPARENTAL);
}

                        if(out4.DISOLUCION == null) {
pstmtInsert_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(12, out4.DISOLUCION);
}

                        if(out4.ESTFAMILIAR == null) {
pstmtInsert_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(13, out4.ESTFAMILIAR);
}

                        if(out4.TIPO_VIVIENDA == null) {
pstmtInsert_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(14, out4.TIPO_VIVIENDA);
}

                        if(out4.CUARTOS == null) {
pstmtInsert_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(15, out4.CUARTOS);
}

                        if(out4.UBICACION == null) {
pstmtInsert_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(16, out4.UBICACION);
}

                        if(out4.BANOS == null) {
pstmtInsert_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(17, out4.BANOS);
}

                        if(out4.TENENCIA == null) {
pstmtInsert_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(18, out4.TENENCIA);
}

                        if(out4.TRESPORCUARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(19, out4.TRESPORCUARTO);
}

                        if(out4.TIPOHAB == null) {
pstmtInsert_tOracleOutput_1.setNull(20, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(20, out4.TIPOHAB);
}

                        if(out4.ACT_PRODUCTIVA == null) {
pstmtInsert_tOracleOutput_1.setNull(21, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(21, out4.ACT_PRODUCTIVA);
}

                        if(out4.MAQUINARIA == null) {
pstmtInsert_tOracleOutput_1.setNull(22, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(22, out4.MAQUINARIA);
}

                        if(out4.EXCRETAS == null) {
pstmtInsert_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(23, out4.EXCRETAS);
}

                        if(out4.MEDIOS_COMUNICACION == null) {
pstmtInsert_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(24, out4.MEDIOS_COMUNICACION);
}

                        if(out4.TIPO_ALUMBRADO == null) {
pstmtInsert_tOracleOutput_1.setNull(25, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(25, out4.TIPO_ALUMBRADO);
}

                        if(out4.MASCOTAS == null) {
pstmtInsert_tOracleOutput_1.setNull(26, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(26, out4.MASCOTAS);
}

                        if(out4.MASCOTAS_VAC == null) {
pstmtInsert_tOracleOutput_1.setNull(27, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(27, out4.MASCOTAS_VAC);
}

                        if(out4.DISP_BASURAS == null) {
pstmtInsert_tOracleOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(28, out4.DISP_BASURAS);
}

                        if(out4.VECTORES == null) {
pstmtInsert_tOracleOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(29, out4.VECTORES);
}

                        if(out4.PROB_ACCIDENTE == null) {
pstmtInsert_tOracleOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(30, out4.PROB_ACCIDENTE);
}

                        if(out4.CONT_AMB == null) {
pstmtInsert_tOracleOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(31, out4.CONT_AMB);
}

                        if(out4.ABAST_AGUA == null) {
pstmtInsert_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(32, out4.ABAST_AGUA);
}

                        if(out4.TRATA_CASA_AGUA == null) {
pstmtInsert_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(33, out4.TRATA_CASA_AGUA);
}

                        if(out4.TRATA_AGUA_FUENTE == null) {
pstmtInsert_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(34, out4.TRATA_AGUA_FUENTE);
}

                        if(out4.TIPO_COCINA == null) {
pstmtInsert_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(35, out4.TIPO_COCINA);
}

                        if(out4.HUMO_VIVIENDA == null) {
pstmtInsert_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(36, out4.HUMO_VIVIENDA);
}

                        if(out4.COCINA_CONSTRU_MATERIAL == null) {
pstmtInsert_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(37, out4.COCINA_CONSTRU_MATERIAL);
}

                        if(out4.COCINA_VIVIENDA == null) {
pstmtInsert_tOracleOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(38, out4.COCINA_VIVIENDA);
}

                        if(out4.COMBUSTIBLE_COCINA == null) {
pstmtInsert_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(39, out4.COMBUSTIBLE_COCINA);
}

                        if(out4.COCINA_DORMITORIO == null) {
pstmtInsert_tOracleOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(40, out4.COCINA_DORMITORIO);
}

                        if(out4.TIPO_PISOS == null) {
pstmtInsert_tOracleOutput_1.setNull(41, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(41, out4.TIPO_PISOS);
}

                        if(out4.TIPO_TECHOS == null) {
pstmtInsert_tOracleOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(42, out4.TIPO_TECHOS);
}

                        if(out4.TIPO_PAREDES == null) {
pstmtInsert_tOracleOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(43, out4.TIPO_PAREDES);
}

                        if(out4.VIVIENDA_2KM == null) {
pstmtInsert_tOracleOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(44, out4.VIVIENDA_2KM);
}

                        if(out4.BARRERAS_ACCESOS == null) {
pstmtInsert_tOracleOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(45, out4.BARRERAS_ACCESOS);
}

                        if(out4.DIST_SALUD_CERCANO == null) {
pstmtInsert_tOracleOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(46, out4.DIST_SALUD_CERCANO);
}

                        if(out4.MEDIO_TRANSPORTE == null) {
pstmtInsert_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(47, out4.MEDIO_TRANSPORTE);
}

                        if(out4.VIA_ACCESO == null) {
pstmtInsert_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(48, out4.VIA_ACCESO);
}

                        if(out4.NACIDOS_VIVOS == null) {
pstmtInsert_tOracleOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(49, out4.NACIDOS_VIVOS);
}

                        if(out4.MORTALIDAD == null) {
pstmtInsert_tOracleOutput_1.setNull(50, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(50, out4.MORTALIDAD);
}

                        if(out4.HIPERTENSION == null) {
pstmtInsert_tOracleOutput_1.setNull(51, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(51, out4.HIPERTENSION);
}

                        if(out4.DIABETES == null) {
pstmtInsert_tOracleOutput_1.setNull(52, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(52, out4.DIABETES);
}

                        if(out4.ENF_CARDIACAS == null) {
pstmtInsert_tOracleOutput_1.setNull(53, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(53, out4.ENF_CARDIACAS);
}

                        if(out4.CANCER == null) {
pstmtInsert_tOracleOutput_1.setNull(54, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(54, out4.CANCER);
}

                        if(out4.ENF_RENAL == null) {
pstmtInsert_tOracleOutput_1.setNull(55, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(55, out4.ENF_RENAL);
}

                        if(out4.ENF_CONGENITA == null) {
pstmtInsert_tOracleOutput_1.setNull(56, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(56, out4.ENF_CONGENITA);
}

                        if(out4.AYUDA_FAMI_NECES == null) {
pstmtInsert_tOracleOutput_1.setNull(57, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(57, out4.AYUDA_FAMI_NECES);
}

                        if(out4.AYUDA_FAMI_PROYEC == null) {
pstmtInsert_tOracleOutput_1.setNull(58, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(58, out4.AYUDA_FAMI_PROYEC);
}

                        if(out4.APOYO_FAMI_SENTIM == null) {
pstmtInsert_tOracleOutput_1.setNull(59, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(59, out4.APOYO_FAMI_SENTIM);
}

                        if(out4.DECISIONES_HOGAR == null) {
pstmtInsert_tOracleOutput_1.setNull(60, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(60, out4.DECISIONES_HOGAR);
}

                        if(out4.COM_INTRAFAMILIAR == null) {
pstmtInsert_tOracleOutput_1.setNull(61, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(61, out4.COM_INTRAFAMILIAR);
}

                        if(out4.ACT_FAMILIAR == null) {
pstmtInsert_tOracleOutput_1.setNull(62, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(62, out4.ACT_FAMILIAR);
}

                        if(out4.DISFRUTA_ACTIVIDADES == null) {
pstmtInsert_tOracleOutput_1.setNull(63, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(63, out4.DISFRUTA_ACTIVIDADES);
}

                        if(out4.CEPILLADO == null) {
pstmtInsert_tOracleOutput_1.setNull(64, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(64, out4.CEPILLADO);
}

                        if(out4.NUM_CEPILLADO == null) {
pstmtInsert_tOracleOutput_1.setNull(65, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(65, out4.NUM_CEPILLADO);
}

                        if(out4.CARIES == null) {
pstmtInsert_tOracleOutput_1.setNull(66, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(66, out4.CARIES);
}

                        if(out4.ODONTOLOGO == null) {
pstmtInsert_tOracleOutput_1.setNull(67, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(67, out4.ODONTOLOGO);
}

                        if(out4.FREC_ODONTOLOGO == null) {
pstmtInsert_tOracleOutput_1.setNull(68, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(68, out4.FREC_ODONTOLOGO);
}

                        if(out4.FULTIMA_ODONTOLOGIA == null) {
pstmtInsert_tOracleOutput_1.setNull(69, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(69, out4.FULTIMA_ODONTOLOGIA);
}

                        if(out4.TOP_FLUOR == null) {
pstmtInsert_tOracleOutput_1.setNull(70, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(70, out4.TOP_FLUOR);
}

                        if(out4.SEDA_DENTAL == null) {
pstmtInsert_tOracleOutput_1.setNull(71, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(71, out4.SEDA_DENTAL);
}

                        if(out4.SELLANTE == null) {
pstmtInsert_tOracleOutput_1.setNull(72, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(72, out4.SELLANTE);
}

                        if(out4.PERDIDA_DIENTES == null) {
pstmtInsert_tOracleOutput_1.setNull(73, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(73, out4.PERDIDA_DIENTES);
}

                        if(out4.CARNE == null) {
pstmtInsert_tOracleOutput_1.setNull(74, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(74, out4.CARNE);
}

                        if(out4.ESQUEMA_EDAD == null) {
pstmtInsert_tOracleOutput_1.setNull(75, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(75, out4.ESQUEMA_EDAD);
}

                        if(out4.ENF_TROPICAL == null) {
pstmtInsert_tOracleOutput_1.setNull(76, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(76, out4.ENF_TROPICAL);
}

                        if(out4.ENF_TRANSMISION == null) {
pstmtInsert_tOracleOutput_1.setNull(77, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(77, out4.ENF_TRANSMISION);
}

                        if(out4.TRATAMIENTO_ETS == null) {
pstmtInsert_tOracleOutput_1.setNull(78, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(78, out4.TRATAMIENTO_ETS);
}

                        if(out4.PROBLEMAS_VISUALES == null) {
pstmtInsert_tOracleOutput_1.setNull(79, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(79, out4.PROBLEMAS_VISUALES);
}

                        if(out4.PROBLEMAS_AUDITIVOS == null) {
pstmtInsert_tOracleOutput_1.setNull(80, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(80, out4.PROBLEMAS_AUDITIVOS);
}

                        if(out4.RENDIMIENTO_ESTUDIOS == null) {
pstmtInsert_tOracleOutput_1.setNull(81, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(81, out4.RENDIMIENTO_ESTUDIOS);
}

                        if(out4.ACT_EXTRACURRICULAR == null) {
pstmtInsert_tOracleOutput_1.setNull(82, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(82, out4.ACT_EXTRACURRICULAR);
}

                        if(out4.PRESION_SISTOLICA == null) {
pstmtInsert_tOracleOutput_1.setNull(83, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(83, out4.PRESION_SISTOLICA);
}

                        if(out4.PRESION_DIASTOLICA == null) {
pstmtInsert_tOracleOutput_1.setNull(84, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(84, out4.PRESION_DIASTOLICA);
}

                        if(out4.ACT_FISICA == null) {
pstmtInsert_tOracleOutput_1.setNull(85, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(85, out4.ACT_FISICA);
}

                        if(out4.FREC_ACT_FISICA == null) {
pstmtInsert_tOracleOutput_1.setNull(86, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(86, out4.FREC_ACT_FISICA);
}

                        if(out4.DURACION_ACT_FISICA == null) {
pstmtInsert_tOracleOutput_1.setNull(87, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(87, out4.DURACION_ACT_FISICA);
}

                        if(out4.INT_ACT_FISICA == null) {
pstmtInsert_tOracleOutput_1.setNull(88, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(88, out4.INT_ACT_FISICA);
}

                        if(out4.CAIDAS == null) {
pstmtInsert_tOracleOutput_1.setNull(89, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(89, out4.CAIDAS);
}

                        if(out4.DISC_FISICA == null) {
pstmtInsert_tOracleOutput_1.setNull(90, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(90, out4.DISC_FISICA);
}

                        if(out4.DISC_MENTAL == null) {
pstmtInsert_tOracleOutput_1.setNull(91, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(91, out4.DISC_MENTAL);
}

                        if(out4.EDAD_MESTRUACION == null) {
pstmtInsert_tOracleOutput_1.setNull(92, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(92, out4.EDAD_MESTRUACION);
}

                        if(out4.FECHA_REGLA == null) {
pstmtInsert_tOracleOutput_1.setNull(93, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(93, out4.FECHA_REGLA);
}

                        if(out4.PARACLINICOS == null) {
pstmtInsert_tOracleOutput_1.setNull(94, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(94, out4.PARACLINICOS);
}

                        if(out4.CITOLOGIA == null) {
pstmtInsert_tOracleOutput_1.setNull(95, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(95, out4.CITOLOGIA);
}

                        if(out4.FECHA_CITOLOGIA == null) {
pstmtInsert_tOracleOutput_1.setNull(96, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(96, out4.FECHA_CITOLOGIA);
}

                        if(out4.EXAMEN_SENO == null) {
pstmtInsert_tOracleOutput_1.setNull(97, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(97, out4.EXAMEN_SENO);
}

                        if(out4.PLAN_FAMILIAR == null) {
pstmtInsert_tOracleOutput_1.setNull(98, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(98, out4.PLAN_FAMILIAR);
}

                        if(out4.METODO_PLANF == null) {
pstmtInsert_tOracleOutput_1.setNull(99, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(99, out4.METODO_PLANF);
}

                        if(out4.TIEMPO_MET_ANIOS == null) {
pstmtInsert_tOracleOutput_1.setNull(100, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(100, out4.TIEMPO_MET_ANIOS);
}

                        if(out4.TIEMPO_MET_MESES == null) {
pstmtInsert_tOracleOutput_1.setNull(101, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(101, out4.TIEMPO_MET_MESES);
}

                        if(out4.TIEMPO_MET_DIAS == null) {
pstmtInsert_tOracleOutput_1.setNull(102, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(102, out4.TIEMPO_MET_DIAS);
}

                        if(out4.CONTR_PLANF_FAMILIAR == null) {
pstmtInsert_tOracleOutput_1.setNull(103, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(103, out4.CONTR_PLANF_FAMILIAR);
}

                        if(out4.EXAMEN_PROSTATA == null) {
pstmtInsert_tOracleOutput_1.setNull(104, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(104, out4.EXAMEN_PROSTATA);
}

                        if(out4.PSA == null) {
pstmtInsert_tOracleOutput_1.setNull(105, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(105, out4.PSA);
}

                        if(out4.FECHA_EXAMEN == null) {
pstmtInsert_tOracleOutput_1.setNull(106, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(106, out4.FECHA_EXAMEN);
}

                        if(out4.GESTA_CONFIRMADA == null) {
pstmtInsert_tOracleOutput_1.setNull(107, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(107, out4.GESTA_CONFIRMADA);
}

                        if(out4.GESTA_PLANEADA == null) {
pstmtInsert_tOracleOutput_1.setNull(108, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(108, out4.GESTA_PLANEADA);
}

                        if(out4.CONVIVENCIA_PAREJA == null) {
pstmtInsert_tOracleOutput_1.setNull(109, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(109, out4.CONVIVENCIA_PAREJA);
}

                        if(out4.FUR == null) {
pstmtInsert_tOracleOutput_1.setNull(110, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(110, out4.FUR);
}

                        if(out4.SEMANAS == null) {
pstmtInsert_tOracleOutput_1.setNull(111, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(111, out4.SEMANAS);
}

                        if(out4.FECHA_PARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(112, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(112, out4.FECHA_PARTO);
}

                        if(out4.GANANCIA_PESP == null) {
pstmtInsert_tOracleOutput_1.setNull(113, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(113, out4.GANANCIA_PESP);
}

                        if(out4.CARNE_EMB == null) {
pstmtInsert_tOracleOutput_1.setNull(114, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(114, out4.CARNE_EMB);
}

                        if(out4.CONTROL_PRENATAL == null) {
pstmtInsert_tOracleOutput_1.setNull(115, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(115, out4.CONTROL_PRENATAL);
}

                        if(out4.QUIEN_CONTROL == null) {
pstmtInsert_tOracleOutput_1.setNull(116, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(116, out4.QUIEN_CONTROL);
}

                        if(out4.TRIMESTRE_ING_CONTROL == null) {
pstmtInsert_tOracleOutput_1.setNull(117, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(117, out4.TRIMESTRE_ING_CONTROL);
}

                        if(out4.FECHA_CONTROL_INI == null) {
pstmtInsert_tOracleOutput_1.setNull(118, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(118, out4.FECHA_CONTROL_INI);
}

                        if(out4.VAL_ODONTOLOGIA == null) {
pstmtInsert_tOracleOutput_1.setNull(119, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(119, out4.VAL_ODONTOLOGIA);
}

                        if(out4.VAC_GESTANTE == null) {
pstmtInsert_tOracleOutput_1.setNull(120, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(120, out4.VAC_GESTANTE);
}

                        if(out4.NUM_GESTACIONES == null) {
pstmtInsert_tOracleOutput_1.setNull(121, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(121, out4.NUM_GESTACIONES);
}

                        if(out4.NUM_PARTOS == null) {
pstmtInsert_tOracleOutput_1.setNull(122, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(122, out4.NUM_PARTOS);
}

                        if(out4.NUM_ABORTOS == null) {
pstmtInsert_tOracleOutput_1.setNull(123, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(123, out4.NUM_ABORTOS);
}

                        if(out4.NUM_CESAREA == null) {
pstmtInsert_tOracleOutput_1.setNull(124, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(124, out4.NUM_CESAREA);
}

                        if(out4.NUM_IVE == null) {
pstmtInsert_tOracleOutput_1.setNull(125, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(125, out4.NUM_IVE);
}

                        if(out4.CAUSA_IVE == null) {
pstmtInsert_tOracleOutput_1.setNull(126, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(126, out4.CAUSA_IVE);
}

                        if(out4.EMB_ECTOPICO == null) {
pstmtInsert_tOracleOutput_1.setNull(127, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(127, out4.EMB_ECTOPICO);
}

                        if(out4.NUM_NACIDOS_VIVOS == null) {
pstmtInsert_tOracleOutput_1.setNull(128, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(128, out4.NUM_NACIDOS_VIVOS);
}

                        if(out4.FECHA_ULT_PARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(129, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(129, out4.FECHA_ULT_PARTO);
}

                        if(out4.RIESGO_OBSTETRICO == null) {
pstmtInsert_tOracleOutput_1.setNull(130, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(130, out4.RIESGO_OBSTETRICO);
}

                        if(out4.HEMOGLOBINA == null) {
pstmtInsert_tOracleOutput_1.setNull(131, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(131, out4.HEMOGLOBINA);
}

                        if(out4.SEROLOGIA == null) {
pstmtInsert_tOracleOutput_1.setNull(132, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(132, out4.SEROLOGIA);
}

                        if(out4.VIH == null) {
pstmtInsert_tOracleOutput_1.setNull(133, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(133, out4.VIH);
}

                        if(out4.SUPLEMENTACION == null) {
pstmtInsert_tOracleOutput_1.setNull(134, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(134, out4.SUPLEMENTACION);
}

                        if(out4.PERCENTIL_NUTRICIONAL == null) {
pstmtInsert_tOracleOutput_1.setNull(135, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(135, out4.PERCENTIL_NUTRICIONAL);
}

                        if(out4.TABAQUISMO == null) {
pstmtInsert_tOracleOutput_1.setNull(136, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(136, out4.TABAQUISMO);
}

                        if(out4.NUM_CIGARRILLOS == null) {
pstmtInsert_tOracleOutput_1.setNull(137, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(137, out4.NUM_CIGARRILLOS);
}

                        if(out4.ALCOHOL == null) {
pstmtInsert_tOracleOutput_1.setNull(138, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(138, out4.ALCOHOL);
}

                        if(out4.FREC_ALCOHOL == null) {
pstmtInsert_tOracleOutput_1.setNull(139, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(139, out4.FREC_ALCOHOL);
}

                        if(out4.ALT_UTERINA == null) {
pstmtInsert_tOracleOutput_1.setNull(140, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(140, out4.ALT_UTERINA);
}

                        if(out4.SEDENTARISMO == null) {
pstmtInsert_tOracleOutput_1.setNull(141, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(141, out4.SEDENTARISMO);
}

                        if(out4.PARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(142, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(142, out4.PARTO);
}

                        if(out4.QUIEN_PARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(143, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(143, out4.QUIEN_PARTO);
}

                        if(out4.COMPLICACIONES == null) {
pstmtInsert_tOracleOutput_1.setNull(144, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(144, out4.COMPLICACIONES);
}

                        if(out4.ATENCION_PARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(145, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(145, out4.ATENCION_PARTO);
}

                        if(out4.TIEMPO_GESTACION == null) {
pstmtInsert_tOracleOutput_1.setNull(146, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(146, out4.TIEMPO_GESTACION);
}

                        if(out4.ATENCION_INSTITUCIONAL == null) {
pstmtInsert_tOracleOutput_1.setNull(147, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(147, out4.ATENCION_INSTITUCIONAL);
}

                        if(out4.COMPLICACIONES_POSTPARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(148, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(148, out4.COMPLICACIONES_POSTPARTO);
}

                        if(out4.COMPLICACIONES_PARTO == null) {
pstmtInsert_tOracleOutput_1.setNull(149, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(149, out4.COMPLICACIONES_PARTO);
}

                        if(out4.COMPLICACIONES_EMBARAZO == null) {
pstmtInsert_tOracleOutput_1.setNull(150, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(150, out4.COMPLICACIONES_EMBARAZO);
}

                        if(out4.PLANIFICACION == null) {
pstmtInsert_tOracleOutput_1.setNull(151, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(151, out4.PLANIFICACION);
}

                        if(out4.CONSUME_MEDICAMENTO == null) {
pstmtInsert_tOracleOutput_1.setNull(152, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(152, out4.CONSUME_MEDICAMENTO);
}

                        if(out4.PESO_NACER == null) {
pstmtInsert_tOracleOutput_1.setNull(153, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(153, out4.PESO_NACER);
}

                        if(out4.TALLA_NACER == null) {
pstmtInsert_tOracleOutput_1.setNull(154, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(154, out4.TALLA_NACER);
}

                        if(out4.PERIMETRO_CEFALICO == null) {
pstmtInsert_tOracleOutput_1.setNull(155, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(155, out4.PERIMETRO_CEFALICO);
}

                        if(out4.PREMATUREZ == null) {
pstmtInsert_tOracleOutput_1.setNull(156, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(156, out4.PREMATUREZ);
}

                        if(out4.COMPLICACIONES_EMB == null) {
pstmtInsert_tOracleOutput_1.setNull(157, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(157, out4.COMPLICACIONES_EMB);
}

                        if(out4.RECIBE_MED == null) {
pstmtInsert_tOracleOutput_1.setNull(158, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(158, out4.RECIBE_MED);
}

                        if(out4.REGISTRADO == null) {
pstmtInsert_tOracleOutput_1.setNull(159, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(159, out4.REGISTRADO);
}

                        if(out4.ANTECEDENTES_PERINATALES == null) {
pstmtInsert_tOracleOutput_1.setNull(160, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(160, out4.ANTECEDENTES_PERINATALES);
}

                        if(out4.PESO_KG == null) {
pstmtInsert_tOracleOutput_1.setNull(161, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(161, out4.PESO_KG);
}

                        if(out4.TALLA == null) {
pstmtInsert_tOracleOutput_1.setNull(162, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(162, out4.TALLA);
}

                        if(out4.CONTROL_CYD == null) {
pstmtInsert_tOracleOutput_1.setNull(163, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(163, out4.CONTROL_CYD);
}

                        if(out4.IMC == null) {
pstmtInsert_tOracleOutput_1.setNull(164, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(164, out4.IMC);
}

                        if(out4.ESTADO_NUTRICION == null) {
pstmtInsert_tOracleOutput_1.setNull(165, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(165, out4.ESTADO_NUTRICION);
}

                        if(out4.VALORACION_DESARROLLO == null) {
pstmtInsert_tOracleOutput_1.setNull(166, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(166, out4.VALORACION_DESARROLLO);
}

                        if(out4.LACTANCIA_6MESES == null) {
pstmtInsert_tOracleOutput_1.setNull(167, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(167, out4.LACTANCIA_6MESES);
}

                        if(out4.TOMADO_MED_HIPERTENSION == null) {
pstmtInsert_tOracleOutput_1.setNull(168, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(168, out4.TOMADO_MED_HIPERTENSION);
}

                        if(out4.PERIMETRO_ABD == null) {
pstmtInsert_tOracleOutput_1.setNull(169, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(169, out4.PERIMETRO_ABD);
}

                        if(out4.GLUCOSA_EMBARAZO == null) {
pstmtInsert_tOracleOutput_1.setNull(170, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(170, out4.GLUCOSA_EMBARAZO);
}

                        if(out4.CONSUMO_VEGETALES == null) {
pstmtInsert_tOracleOutput_1.setNull(171, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(171, out4.CONSUMO_VEGETALES);
}

                        if(out4.SEGURIDAD_ALIMENTARIA == null) {
pstmtInsert_tOracleOutput_1.setNull(172, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(172, out4.SEGURIDAD_ALIMENTARIA);
}

                        if(out4.DESPARACITADO == null) {
pstmtInsert_tOracleOutput_1.setNull(173, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(173, out4.DESPARACITADO);
}

                        if(out4.FECHA_DESPARACITADO == null) {
pstmtInsert_tOracleOutput_1.setNull(174, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(174, out4.FECHA_DESPARACITADO);
}

                        if(out4.PROGRAMAS_INSCRITO == null) {
pstmtInsert_tOracleOutput_1.setNull(175, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(175, out4.PROGRAMAS_INSCRITO);
}

                        if(out4.TRANSTORNO_ALIMENTACION == null) {
pstmtInsert_tOracleOutput_1.setNull(176, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(176, out4.TRANSTORNO_ALIMENTACION);
}

                        if(out4.MORB_CRONICA == null) {
pstmtInsert_tOracleOutput_1.setNull(177, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(177, out4.MORB_CRONICA);
}

                        if(out4.PERIMETRO_PANTORRILLA == null) {
pstmtInsert_tOracleOutput_1.setNull(178, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(178, out4.PERIMETRO_PANTORRILLA);
}

                        if(out4.MORBILIDAD_AGUDA == null) {
pstmtInsert_tOracleOutput_1.setNull(179, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(179, out4.MORBILIDAD_AGUDA);
}

                        if(out4.BUSCA_AYUDA == null) {
pstmtInsert_tOracleOutput_1.setNull(180, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(180, out4.BUSCA_AYUDA);
}

                        if(out4.PORQUE == null) {
pstmtInsert_tOracleOutput_1.setNull(181, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(181, out4.PORQUE);
}

                        if(out4.RECIBE_MANEJO == null) {
pstmtInsert_tOracleOutput_1.setNull(182, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(182, out4.RECIBE_MANEJO);
}

                        if(out4.QUIEN_FORMULA == null) {
pstmtInsert_tOracleOutput_1.setNull(183, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(183, out4.QUIEN_FORMULA);
}

                        if(out4.CONSULTA_SIQUIATRIA == null) {
pstmtInsert_tOracleOutput_1.setNull(184, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(184, out4.CONSULTA_SIQUIATRIA);
}

                        if(out4.FORMULADO_MED_PSIQUIATRICOS == null) {
pstmtInsert_tOracleOutput_1.setNull(185, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(185, out4.FORMULADO_MED_PSIQUIATRICOS);
}

                        if(out4.FACTORES_RIESGO == null) {
pstmtInsert_tOracleOutput_1.setNull(186, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(186, out4.FACTORES_RIESGO);
}

                        if(out4.SITUACION_ESTRES == null) {
pstmtInsert_tOracleOutput_1.setNull(187, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(187, out4.SITUACION_ESTRES);
}

                        if(out4.VIOLENCIA == null) {
pstmtInsert_tOracleOutput_1.setNull(188, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(188, out4.VIOLENCIA);
}

                        if(out4.ANT_CONSUMO == null) {
pstmtInsert_tOracleOutput_1.setNull(189, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(189, out4.ANT_CONSUMO);
}

                        if(out4.CUAL_ANT_CONSUMO == null) {
pstmtInsert_tOracleOutput_1.setNull(190, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(190, out4.CUAL_ANT_CONSUMO);
}

                        if(out4.CONTINUA_CONSUMO == null) {
pstmtInsert_tOracleOutput_1.setNull(191, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(191, out4.CONTINUA_CONSUMO);
}

                        if(out4.CUAL_CONTINUA_CONSUMO == null) {
pstmtInsert_tOracleOutput_1.setNull(192, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(192, out4.CUAL_CONTINUA_CONSUMO);
}

                        if(out4.BCG == null) {
pstmtInsert_tOracleOutput_1.setNull(193, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(193, out4.BCG);
}

                        if(out4.HEPATITIS_B == null) {
pstmtInsert_tOracleOutput_1.setNull(194, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(194, out4.HEPATITIS_B);
}

                        if(out4.POLIO == null) {
pstmtInsert_tOracleOutput_1.setNull(195, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(195, out4.POLIO);
}

                        if(out4.HIB == null) {
pstmtInsert_tOracleOutput_1.setNull(196, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(196, out4.HIB);
}

                        if(out4.NEUMOCOCO == null) {
pstmtInsert_tOracleOutput_1.setNull(197, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(197, out4.NEUMOCOCO);
}

                        if(out4.ROTAVIRUS == null) {
pstmtInsert_tOracleOutput_1.setNull(198, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(198, out4.ROTAVIRUS);
}

                        if(out4.INFLUENCIA_EST == null) {
pstmtInsert_tOracleOutput_1.setNull(199, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(199, out4.INFLUENCIA_EST);
}

                        if(out4.SRP == null) {
pstmtInsert_tOracleOutput_1.setNull(200, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(200, out4.SRP);
}

                        if(out4.VARICELA == null) {
pstmtInsert_tOracleOutput_1.setNull(201, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(201, out4.VARICELA);
}

                        if(out4.HEPATITIS_A == null) {
pstmtInsert_tOracleOutput_1.setNull(202, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(202, out4.HEPATITIS_A);
}

                        if(out4.FA == null) {
pstmtInsert_tOracleOutput_1.setNull(203, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(203, out4.FA);
}

                        if(out4.DPT == null) {
pstmtInsert_tOracleOutput_1.setNull(204, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(204, out4.DPT);
}

                        if(out4.VPH == null) {
pstmtInsert_tOracleOutput_1.setNull(205, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(205, out4.VPH);
}

                        if(out4.TD == null) {
pstmtInsert_tOracleOutput_1.setNull(206, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(206, out4.TD);
}

                        if(out4.MAMOGRAFIA == null) {
pstmtInsert_tOracleOutput_1.setNull(207, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(207, out4.MAMOGRAFIA);
}

                        if(out4.PROTESIS_DENTAL == null) {
pstmtInsert_tOracleOutput_1.setNull(208, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(208, out4.PROTESIS_DENTAL);
}

                        if(out4.RECIBIO_MEDICAMENTOS == null) {
pstmtInsert_tOracleOutput_1.setNull(209, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(209, out4.RECIBIO_MEDICAMENTOS);
}

                        if(out4.VALIDADO == null) {
pstmtInsert_tOracleOutput_1.setNull(210, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(210, out4.VALIDADO);
}

                        if(out4.ECOGRAFIA_MAMARIA == null) {
pstmtInsert_tOracleOutput_1.setNull(211, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(211, out4.ECOGRAFIA_MAMARIA);
}

                        if(out4.MENTALES == null) {
pstmtInsert_tOracleOutput_1.setNull(212, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(212, out4.MENTALES);
}

                        if(out4.INF_SUM_USUARIO == null) {
pstmtInsert_tOracleOutput_1.setNull(213, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(213, out4.INF_SUM_USUARIO);
}

                        if(out4.NIVEL_INGRESO == null) {
pstmtInsert_tOracleOutput_1.setNull(214, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(214, out4.NIVEL_INGRESO);
}

                        if(out4.VACUNACION_NOPAI == null) {
pstmtInsert_tOracleOutput_1.setNull(215, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(215, out4.VACUNACION_NOPAI);
}

                        if(out4.OBSERVACIONES == null) {
pstmtInsert_tOracleOutput_1.setNull(216, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(216, out4.OBSERVACIONES);
}

                        if(out4.GESTOR == null) {
pstmtInsert_tOracleOutput_1.setNull(217, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(217, out4.GESTOR);
}

                        if(out4.FFINALIZACION != null) {
pstmtInsert_tOracleOutput_1.setObject(218, new java.sql.Timestamp(out4.FFINALIZACION.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(218, java.sql.Types.DATE);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(219, out4.FINDRISK_VALOR);

                        if(out4.FINDRISK_CATEGORIA == null) {
pstmtInsert_tOracleOutput_1.setNull(220, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(220, out4.FINDRISK_CATEGORIA);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(221, out4.UORG_EBAS);

                        if(out4.PREPAGADA == null) {
pstmtInsert_tOracleOutput_1.setNull(222, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(222, out4.PREPAGADA);
}

                        if(out4.TIPO_REGISTRO == null) {
pstmtInsert_tOracleOutput_1.setNull(223, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(223, out4.TIPO_REGISTRO);
}

                try {
                    int processedCount_tOracleOutput_1 = pstmtInsert_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            }
            if(!whetherReject_tOracleOutput_1) {
            }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */



	
	/**
	 * [vFlowMeter_out4 process_data_end ] start
	 */

	

	
	
	currentComponent="vFlowMeter_out4";
	
	

 



/**
 * [vFlowMeter_out4 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "row18"




	
	/**
	 * [tFileInputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	



            }
            }finally{
                if(!((Object)(context.RutaSistema+"/FFA/tempFFA.csv") instanceof java.io.InputStream)){
                	if(fid_tFileInputDelimited_1!=null){
                		fid_tFileInputDelimited_1.close();
                	}
                }
                if(fid_tFileInputDelimited_1!=null){
                	globalMap.put("tFileInputDelimited_1_NB_LINE", fid_tFileInputDelimited_1.getRowNumber());
					
                }
			}
			  

 

ok_Hash.put("tFileInputDelimited_1", true);
end_Hash.put("tFileInputDelimited_1", System.currentTimeMillis());




/**
 * [tFileInputDelimited_1 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row33 != null) {
						tHash_Lookup_row33.endGet();
					}
					globalMap.remove( "tHash_Lookup_row33" );

					
					
				
					if(tHash_Lookup_row1 != null) {
						tHash_Lookup_row1.endGet();
					}
					globalMap.remove( "tHash_Lookup_row1" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [vFlowMeter_out4 end ] start
	 */

	

	
	
	currentComponent="vFlowMeter_out4";
	
	


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("vFlowMeter_out4", true);
end_Hash.put("vFlowMeter_out4", System.currentTimeMillis());




/**
 * [vFlowMeter_out4 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_1 != null){
            pstmtUpdate_tOracleOutput_1.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_1");
        }
        if(pstmtInsert_tOracleOutput_1 != null){
            pstmtInsert_tOracleOutput_1.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_1");
        }
        if(pstmt_tOracleOutput_1 != null) {
            pstmt_tOracleOutput_1.close();
            resourceMap.remove("pstmt_tOracleOutput_1");
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"meterRowout4");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk19", 0, "ok");
				}
				tJava_19Process(globalMap);



/**
 * [tOracleOutput_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row33"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row1"); 
				     			
				try{
					
	
	/**
	 * [tFileInputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputDelimited_1";
	
	

 



/**
 * [tFileInputDelimited_1 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [vFlowMeter_out4 finally ] start
	 */

	

	
	
	currentComponent="vFlowMeter_out4";
	
	

 



/**
 * [vFlowMeter_out4 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_1 = null;
                if ((pstmtUpdateToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_1")) != null) {
                    pstmtUpdateToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_1 = null;
                if ((pstmtInsertToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_1")) != null) {
                    pstmtInsertToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputDelimited_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_19", false);
		start_Hash.put("tJava_19", System.currentTimeMillis());
		
	
	currentComponent="tJava_19";
	
	
		int tos_count_tJava_19 = 0;
		


System.out.println("Terminó exitosamente el ETL de ficha familiar");
 



/**
 * [tJava_19 begin ] stop
 */
	
	/**
	 * [tJava_19 main ] start
	 */

	

	
	
	currentComponent="tJava_19";
	
	

 


	tos_count_tJava_19++;

/**
 * [tJava_19 main ] stop
 */
	
	/**
	 * [tJava_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_19";
	
	

 



/**
 * [tJava_19 process_data_begin ] stop
 */
	
	/**
	 * [tJava_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_19";
	
	

 



/**
 * [tJava_19 process_data_end ] stop
 */
	
	/**
	 * [tJava_19 end ] start
	 */

	

	
	
	currentComponent="tJava_19";
	
	

 

ok_Hash.put("tJava_19", true);
end_Hash.put("tJava_19", System.currentTimeMillis());




/**
 * [tJava_19 end ] stop
 */
				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tJava_19:OnSubjobOk", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk8", 0, "ok");
								} 
							
							tFileDelete_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_19 finally ] start
	 */

	

	
	
	currentComponent="tJava_19";
	
	

 



/**
 * [tJava_19 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_19_SUBPROCESS_STATE", 1);
	}
	


public void tFileDelete_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tFileDelete_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileDelete_1", false);
		start_Hash.put("tFileDelete_1", System.currentTimeMillis());
		
	
	currentComponent="tFileDelete_1";
	
	
		int tos_count_tFileDelete_1 = 0;
		

 



/**
 * [tFileDelete_1 begin ] stop
 */
	
	/**
	 * [tFileDelete_1 main ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

class DeleteFoldertFileDelete_1{
	 /**
     * delete all the sub-files in 'file'
     * 
     * @param file
     */
	public boolean delete(java.io.File file) {
        java.io.File[] files = file.listFiles();
        for (int i = 0; i < files.length; i++) {
            if (files[i].isFile()) {
                files[i].delete();
            } else if (files[i].isDirectory()) {
                if (!files[i].delete()) {
                    delete(files[i]);
                }
            }
        }
        deleteDirectory(file);
        return file.delete();
    }

    /**
     * delete all the sub-folders in 'file'
     * 
     * @param file
     */
    private void deleteDirectory(java.io.File file) {
        java.io.File[] filed = file.listFiles();
        for (int i = 0; i < filed.length; i++) {
        	if(filed[i].isDirectory()) {
            	deleteDirectory(filed[i]);
            }
            filed[i].delete();
        }
    }

}
	java.io.File path_tFileDelete_1=new java.io.File(context.RutaSistema+"/FFA/tempFFA.csv");
	if(path_tFileDelete_1.exists()){
		if(path_tFileDelete_1.isFile()){
	    	if(path_tFileDelete_1.delete()){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No file deleted.");
	    	}
		}else if(path_tFileDelete_1.isDirectory()){ 
	    	DeleteFoldertFileDelete_1 dftFileDelete_1 = new DeleteFoldertFileDelete_1();
	    	if(dftFileDelete_1.delete(path_tFileDelete_1)){
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "Path deleted.");
	    	}else{
	    		globalMap.put("tFileDelete_1_CURRENT_STATUS", "No path deleted.");
	    	}
		}
	}else{
		globalMap.put("tFileDelete_1_CURRENT_STATUS", "File or path does not exist or is invalid.");
    }
    globalMap.put("tFileDelete_1_DELETE_PATH",context.RutaSistema+"/FFA/tempFFA.csv");
 


	tos_count_tFileDelete_1++;

/**
 * [tFileDelete_1 main ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileDelete_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 process_data_end ] stop
 */
	
	/**
	 * [tFileDelete_1 end ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 

ok_Hash.put("tFileDelete_1", true);
end_Hash.put("tFileDelete_1", System.currentTimeMillis());




/**
 * [tFileDelete_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileDelete_1 finally ] start
	 */

	

	
	
	currentComponent="tFileDelete_1";
	
	

 



/**
 * [tFileDelete_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileDelete_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_20Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_20_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_20", false);
		start_Hash.put("tJava_20", System.currentTimeMillis());
		
	
	currentComponent="tJava_20";
	
	
		int tos_count_tJava_20 = 0;
		


System.out.println("Error en el insert de ficha familiar");
 



/**
 * [tJava_20 begin ] stop
 */
	
	/**
	 * [tJava_20 main ] start
	 */

	

	
	
	currentComponent="tJava_20";
	
	

 


	tos_count_tJava_20++;

/**
 * [tJava_20 main ] stop
 */
	
	/**
	 * [tJava_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_20";
	
	

 



/**
 * [tJava_20 process_data_begin ] stop
 */
	
	/**
	 * [tJava_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_20";
	
	

 



/**
 * [tJava_20 process_data_end ] stop
 */
	
	/**
	 * [tJava_20 end ] start
	 */

	

	
	
	currentComponent="tJava_20";
	
	

 

ok_Hash.put("tJava_20", true);
end_Hash.put("tJava_20", System.currentTimeMillis());




/**
 * [tJava_20 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_20 finally ] start
	 */

	

	
	
	currentComponent="tJava_20";
	
	

 



/**
 * [tJava_20 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_20_SUBPROCESS_STATE", 1);
	}
	


public static class row28Struct implements routines.system.IPersistableComparableLookupRow<row28Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String NOMBRE;

				public String getNOMBRE () {
					return this.NOMBRE;
				}

				public Boolean NOMBREIsNullable(){
				    return false;
				}
				public Boolean NOMBREIsKey(){
				    return false;
				}
				public Integer NOMBRELength(){
				    return 150;
				}
				public Integer NOMBREPrecision(){
				    return 0;
				}
				public String NOMBREDefault(){
				
					return null;
				
				}
				public String NOMBREComment(){
				
				    return "";
				
				}
				public String NOMBREPattern(){
				
					return "";
				
				}
				public String NOMBREOriginalDbColumnName(){
				
					return "NOMBRE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row28Struct other = (row28Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row28Struct other) {

		other.ID = this.ID;
	            other.NOMBRE = this.NOMBRE;
	            
	}

	public void copyKeysDataTo(row28Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.NOMBRE = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.NOMBRE = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.NOMBRE, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.NOMBRE, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",NOMBRE="+NOMBRE);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row28Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row28Struct row28 = new row28Struct();




	
	/**
	 * [tAdvancedHash_row28 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row28", false);
		start_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row28";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row28");
					}
				
		int tos_count_tAdvancedHash_row28 = 0;
		

			   		// connection name:row28
			   		// source node:tHashInput_7 - inputs:(after_tHashInput_5) outputs:(row28,row28) | target node:tAdvancedHash_row28 - inputs:(row28) outputs:()
			   		// linked node: tMap_3 - inputs:(row27,row28,row29) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row28 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row28Struct>getLookup(matchingModeEnum_row28);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row28", tHash_Lookup_row28);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row28 begin ] stop
 */



	
	/**
	 * [tHashInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_7", false);
		start_Hash.put("tHashInput_7", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_7";
	
	
		int tos_count_tHashInput_7 = 0;
		


int nb_line_tHashInput_7 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_7=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row3Struct> tHashFile_tHashInput_7 = mf_tHashInput_7.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_1");
if(tHashFile_tHashInput_7==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row3Struct> iterator_tHashInput_7 = tHashFile_tHashInput_7.iterator();
while (iterator_tHashInput_7.hasNext()) {
    row3Struct next_tHashInput_7 = iterator_tHashInput_7.next();

	row28.ID = next_tHashInput_7.ID;
	row28.NOMBRE = next_tHashInput_7.NOMBRE;

 



/**
 * [tHashInput_7 begin ] stop
 */
	
	/**
	 * [tHashInput_7 main ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 


	tos_count_tHashInput_7++;

/**
 * [tHashInput_7 main ] stop
 */
	
	/**
	 * [tHashInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row28"
						
						);
					}
					


			   
			   

					row28Struct row28_HashRow = new row28Struct();
		   	   	   
				
				row28_HashRow.ID = row28.ID;
				
				row28_HashRow.NOMBRE = row28.NOMBRE;
				
			tHash_Lookup_row28.put(row28_HashRow);
			
            




 


	tos_count_tAdvancedHash_row28++;

/**
 * [tAdvancedHash_row28 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

 



/**
 * [tAdvancedHash_row28 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row28 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

 



/**
 * [tAdvancedHash_row28 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_7 end ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	
    

		
			nb_line_tHashInput_7++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_1");
	


	globalMap.put("tHashInput_7_NB_LINE", nb_line_tHashInput_7);       

 

ok_Hash.put("tHashInput_7", true);
end_Hash.put("tHashInput_7", System.currentTimeMillis());




/**
 * [tHashInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

tHash_Lookup_row28.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row28");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row28", true);
end_Hash.put("tAdvancedHash_row28", System.currentTimeMillis());




/**
 * [tAdvancedHash_row28 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_7 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_7";
	
	

 



/**
 * [tHashInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row28 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row28";
	
	

 



/**
 * [tAdvancedHash_row28 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row29Struct implements routines.system.IPersistableComparableLookupRow<row29Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String DESCRIPCION;

				public String getDESCRIPCION () {
					return this.DESCRIPCION;
				}

				public Boolean DESCRIPCIONIsNullable(){
				    return true;
				}
				public Boolean DESCRIPCIONIsKey(){
				    return false;
				}
				public Integer DESCRIPCIONLength(){
				    return 500;
				}
				public Integer DESCRIPCIONPrecision(){
				    return 0;
				}
				public String DESCRIPCIONDefault(){
				
					return null;
				
				}
				public String DESCRIPCIONComment(){
				
				    return "";
				
				}
				public String DESCRIPCIONPattern(){
				
					return "";
				
				}
				public String DESCRIPCIONOriginalDbColumnName(){
				
					return "DESCRIPCION";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row29Struct other = (row29Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row29Struct other) {

		other.ID = this.ID;
	            other.DESCRIPCION = this.DESCRIPCION;
	            
	}

	public void copyKeysDataTo(row29Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.DESCRIPCION = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.DESCRIPCION = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.DESCRIPCION, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.DESCRIPCION, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",DESCRIPCION="+DESCRIPCION);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row29Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row29Struct row29 = new row29Struct();




	
	/**
	 * [tAdvancedHash_row29 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row29", false);
		start_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row29";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row29");
					}
				
		int tos_count_tAdvancedHash_row29 = 0;
		

			   		// connection name:row29
			   		// source node:tHashInput_8 - inputs:(after_tHashInput_5) outputs:(row29,row29) | target node:tAdvancedHash_row29 - inputs:(row29) outputs:()
			   		// linked node: tMap_3 - inputs:(row27,row28,row29) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row29 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
					org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct> tHash_Lookup_row29 = 
	   					new org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct>(matchingModeEnum_row29, "D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/workspace/REP_INICIO/temp" + "/"+ jobName +"_tMapData_" + pid +"_Lookup_row29_"
	   					, new org.talend.designer.components.persistent.IRowCreator() {
	   						public row29Struct createRowInstance() {
	   							return new row29Struct();
	   						}
	   					}
	   					
	   						, 2000000
	   					
	   					); 

	   				tHash_Lookup_row29.initPut();

		   	   	   globalMap.put("tHash_Lookup_row29", tHash_Lookup_row29);
		   	   	   
	   			
           

 



/**
 * [tAdvancedHash_row29 begin ] stop
 */



	
	/**
	 * [tHashInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_8", false);
		start_Hash.put("tHashInput_8", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_8";
	
	
		int tos_count_tHashInput_8 = 0;
		


int nb_line_tHashInput_8 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_8=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row4Struct> tHashFile_tHashInput_8 = mf_tHashInput_8.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_8==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row4Struct> iterator_tHashInput_8 = tHashFile_tHashInput_8.iterator();
while (iterator_tHashInput_8.hasNext()) {
    row4Struct next_tHashInput_8 = iterator_tHashInput_8.next();

	row29.ID = next_tHashInput_8.ID;
	row29.DESCRIPCION = next_tHashInput_8.DESCRIPCION;

 



/**
 * [tHashInput_8 begin ] stop
 */
	
	/**
	 * [tHashInput_8 main ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 


	tos_count_tHashInput_8++;

/**
 * [tHashInput_8 main ] stop
 */
	
	/**
	 * [tHashInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row29"
						
						);
					}
					


			   
			   

					row29Struct row29_HashRow = tHash_Lookup_row29.getNextFreeRow();

	   			
				row29_HashRow.ID = row29.ID;
				
				row29_HashRow.DESCRIPCION = row29.DESCRIPCION;
				
			tHash_Lookup_row29.put(row29_HashRow);
			
            




 


	tos_count_tAdvancedHash_row29++;

/**
 * [tAdvancedHash_row29 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row29 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_8 end ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	
    

		
			nb_line_tHashInput_8++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_8_NB_LINE", nb_line_tHashInput_8);       

 

ok_Hash.put("tHashInput_8", true);
end_Hash.put("tHashInput_8", System.currentTimeMillis());




/**
 * [tHashInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

tHash_Lookup_row29.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row29");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row29", true);
end_Hash.put("tAdvancedHash_row29", System.currentTimeMillis());




/**
 * [tAdvancedHash_row29 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_8 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_8";
	
	

 



/**
 * [tHashInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row29 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row29";
	
	

 



/**
 * [tAdvancedHash_row29 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal TPREGUNTAS_ID;

				public BigDecimal getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.ID = this.ID;
	            other.SIGLA = this.SIGLA;
	            other.TPREGUNTAS_ID = this.TPREGUNTAS_ID;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
       			    	this.TPREGUNTAS_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
       			    	this.TPREGUNTAS_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
       			    	oos.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tHashInput_2 - inputs:(after_tOracleInput_7) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_1 - inputs:(row8,row9,row10) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tHashInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_2", false);
		start_Hash.put("tHashInput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_2";
	
	
		int tos_count_tHashInput_2 = 0;
		


int nb_line_tHashInput_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row5Struct> tHashFile_tHashInput_2 = mf_tHashInput_2.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_3");
if(tHashFile_tHashInput_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row5Struct> iterator_tHashInput_2 = tHashFile_tHashInput_2.iterator();
while (iterator_tHashInput_2.hasNext()) {
    row5Struct next_tHashInput_2 = iterator_tHashInput_2.next();

	row9.ID = next_tHashInput_2.ID;
	row9.SIGLA = next_tHashInput_2.SIGLA;
	row9.TPREGUNTAS_ID = next_tHashInput_2.TPREGUNTAS_ID;

 



/**
 * [tHashInput_2 begin ] stop
 */
	
	/**
	 * [tHashInput_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 


	tos_count_tHashInput_2++;

/**
 * [tHashInput_2 main ] stop
 */
	
	/**
	 * [tHashInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.ID = row9.ID;
				
				row9_HashRow.SIGLA = row9.SIGLA;
				
				row9_HashRow.TPREGUNTAS_ID = row9.TPREGUNTAS_ID;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	
    

		
			nb_line_tHashInput_2++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_3");
	


	globalMap.put("tHashInput_2_NB_LINE", nb_line_tHashInput_2);       

 

ok_Hash.put("tHashInput_2", true);
end_Hash.put("tHashInput_2", System.currentTimeMillis());




/**
 * [tHashInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_2";
	
	

 



/**
 * [tHashInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String VPREDETERMINADO;

				public String getVPREDETERMINADO () {
					return this.VPREDETERMINADO;
				}

				public Boolean VPREDETERMINADOIsNullable(){
				    return false;
				}
				public Boolean VPREDETERMINADOIsKey(){
				    return false;
				}
				public Integer VPREDETERMINADOLength(){
				    return 100;
				}
				public Integer VPREDETERMINADOPrecision(){
				    return 0;
				}
				public String VPREDETERMINADODefault(){
				
					return null;
				
				}
				public String VPREDETERMINADOComment(){
				
				    return "";
				
				}
				public String VPREDETERMINADOPattern(){
				
					return "";
				
				}
				public String VPREDETERMINADOOriginalDbColumnName(){
				
					return "VPREDETERMINADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.ID = this.ID;
	            other.VPREDETERMINADO = this.VPREDETERMINADO;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VPREDETERMINADO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.VPREDETERMINADO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VPREDETERMINADO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.VPREDETERMINADO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VPREDETERMINADO="+VPREDETERMINADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_7) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_1 - inputs:(row8,row9,row10) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row6Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row6Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row10.ID = next_tHashInput_1.ID;
	row10.VPREDETERMINADO = next_tHashInput_1.VPREDETERMINADO;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.ID = row10.ID;
				
				row10_HashRow.VPREDETERMINADO = row10.VPREDETERMINADO;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public BigDecimal TPREGUNTAS_ID;

				public BigDecimal getTPREGUNTAS_ID () {
					return this.TPREGUNTAS_ID;
				}

				public Boolean TPREGUNTAS_IDIsNullable(){
				    return false;
				}
				public Boolean TPREGUNTAS_IDIsKey(){
				    return false;
				}
				public Integer TPREGUNTAS_IDLength(){
				    return 0;
				}
				public Integer TPREGUNTAS_IDPrecision(){
				    return 0;
				}
				public String TPREGUNTAS_IDDefault(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDComment(){
				
				    return "";
				
				}
				public String TPREGUNTAS_IDPattern(){
				
					return "";
				
				}
				public String TPREGUNTAS_IDOriginalDbColumnName(){
				
					return "TPREGUNTAS_ID";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.ID = this.ID;
	            other.SIGLA = this.SIGLA;
	            other.TPREGUNTAS_ID = this.TPREGUNTAS_ID;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SIGLA = readString(dis,ois);
					
       			    	this.TPREGUNTAS_ID = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SIGLA = readString(dis,objectIn);
					
       			    	this.TPREGUNTAS_ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.SIGLA, dos, oos);
					
       			    	oos.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.SIGLA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.TPREGUNTAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",TPREGUNTAS_ID="+String.valueOf(TPREGUNTAS_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tHashInput_3 - inputs:(after_tOracleInput_6) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_2 - inputs:(row13,row14,row15) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tHashInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_3", false);
		start_Hash.put("tHashInput_3", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_3";
	
	
		int tos_count_tHashInput_3 = 0;
		


int nb_line_tHashInput_3 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_3=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row25Struct> tHashFile_tHashInput_3 = mf_tHashInput_3.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_7");
if(tHashFile_tHashInput_3==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row25Struct> iterator_tHashInput_3 = tHashFile_tHashInput_3.iterator();
while (iterator_tHashInput_3.hasNext()) {
    row25Struct next_tHashInput_3 = iterator_tHashInput_3.next();

	row14.ID = next_tHashInput_3.ID;
	row14.SIGLA = next_tHashInput_3.SIGLA;
	row14.TPREGUNTAS_ID = next_tHashInput_3.TPREGUNTAS_ID;

 



/**
 * [tHashInput_3 begin ] stop
 */
	
	/**
	 * [tHashInput_3 main ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 


	tos_count_tHashInput_3++;

/**
 * [tHashInput_3 main ] stop
 */
	
	/**
	 * [tHashInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.ID = row14.ID;
				
				row14_HashRow.SIGLA = row14.SIGLA;
				
				row14_HashRow.TPREGUNTAS_ID = row14.TPREGUNTAS_ID;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_3 end ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	
    

		
			nb_line_tHashInput_3++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_7");
	


	globalMap.put("tHashInput_3_NB_LINE", nb_line_tHashInput_3);       

 

ok_Hash.put("tHashInput_3", true);
end_Hash.put("tHashInput_3", System.currentTimeMillis());




/**
 * [tHashInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_3 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_3";
	
	

 



/**
 * [tHashInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return 0;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String VPREDETERMINADO;

				public String getVPREDETERMINADO () {
					return this.VPREDETERMINADO;
				}

				public Boolean VPREDETERMINADOIsNullable(){
				    return false;
				}
				public Boolean VPREDETERMINADOIsKey(){
				    return false;
				}
				public Integer VPREDETERMINADOLength(){
				    return 100;
				}
				public Integer VPREDETERMINADOPrecision(){
				    return 0;
				}
				public String VPREDETERMINADODefault(){
				
					return null;
				
				}
				public String VPREDETERMINADOComment(){
				
				    return "";
				
				}
				public String VPREDETERMINADOPattern(){
				
					return "";
				
				}
				public String VPREDETERMINADOOriginalDbColumnName(){
				
					return "VPREDETERMINADO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.ID = this.ID;
	            other.VPREDETERMINADO = this.VPREDETERMINADO;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.VPREDETERMINADO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.VPREDETERMINADO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.VPREDETERMINADO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.VPREDETERMINADO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",VPREDETERMINADO="+VPREDETERMINADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tHashInput_4 - inputs:(after_tOracleInput_6) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_2 - inputs:(row13,row14,row15) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tHashInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_4", false);
		start_Hash.put("tHashInput_4", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_4";
	
	
		int tos_count_tHashInput_4 = 0;
		


int nb_line_tHashInput_4 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_4=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row6Struct> tHashFile_tHashInput_4 = mf_tHashInput_4.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_4");
if(tHashFile_tHashInput_4==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row6Struct> iterator_tHashInput_4 = tHashFile_tHashInput_4.iterator();
while (iterator_tHashInput_4.hasNext()) {
    row6Struct next_tHashInput_4 = iterator_tHashInput_4.next();

	row15.ID = next_tHashInput_4.ID;
	row15.VPREDETERMINADO = next_tHashInput_4.VPREDETERMINADO;

 



/**
 * [tHashInput_4 begin ] stop
 */
	
	/**
	 * [tHashInput_4 main ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 


	tos_count_tHashInput_4++;

/**
 * [tHashInput_4 main ] stop
 */
	
	/**
	 * [tHashInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.ID = row15.ID;
				
				row15_HashRow.VPREDETERMINADO = row15.VPREDETERMINADO;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_4 end ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	
    

		
			nb_line_tHashInput_4++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_4");
	


	globalMap.put("tHashInput_4_NB_LINE", nb_line_tHashInput_4);       

 

ok_Hash.put("tHashInput_4", true);
end_Hash.put("tHashInput_4", System.currentTimeMillis());




/**
 * [tHashInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_4 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_4";
	
	

 



/**
 * [tHashInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row33Struct implements routines.system.IPersistableComparableLookupRow<row33Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int FI_ID;

				public int getFI_ID () {
					return this.FI_ID;
				}

				public Boolean FI_IDIsNullable(){
				    return false;
				}
				public Boolean FI_IDIsKey(){
				    return false;
				}
				public Integer FI_IDLength(){
				    return 0;
				}
				public Integer FI_IDPrecision(){
				    return null;
				}
				public String FI_IDDefault(){
				
					return "";
				
				}
				public String FI_IDComment(){
				
				    return "";
				
				}
				public String FI_IDPattern(){
				
					return "";
				
				}
				public String FI_IDOriginalDbColumnName(){
				
					return "FI_ID";
				
				}

				
			    public int PERSONA_ID;

				public int getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public java.util.Date FFINALIZACION;

				public java.util.Date getFFINALIZACION () {
					return this.FFINALIZACION;
				}

				public Boolean FFINALIZACIONIsNullable(){
				    return true;
				}
				public Boolean FFINALIZACIONIsKey(){
				    return false;
				}
				public Integer FFINALIZACIONLength(){
				    return 0;
				}
				public Integer FFINALIZACIONPrecision(){
				    return 0;
				}
				public String FFINALIZACIONDefault(){
				
					return null;
				
				}
				public String FFINALIZACIONComment(){
				
				    return "";
				
				}
				public String FFINALIZACIONPattern(){
				
					return "";
				
				}
				public String FFINALIZACIONOriginalDbColumnName(){
				
					return "FFINALIZACION";
				
				}

				
			    public BigDecimal UORG_EBAS;

				public BigDecimal getUORG_EBAS () {
					return this.UORG_EBAS;
				}

				public Boolean UORG_EBASIsNullable(){
				    return true;
				}
				public Boolean UORG_EBASIsKey(){
				    return false;
				}
				public Integer UORG_EBASLength(){
				    return 0;
				}
				public Integer UORG_EBASPrecision(){
				    return null;
				}
				public String UORG_EBASDefault(){
				
					return "";
				
				}
				public String UORG_EBASComment(){
				
				    return "";
				
				}
				public String UORG_EBASPattern(){
				
					return "";
				
				}
				public String UORG_EBASOriginalDbColumnName(){
				
					return "UORG_EBAS";
				
				}

				
			    public String GESTOR;

				public String getGESTOR () {
					return this.GESTOR;
				}

				public Boolean GESTORIsNullable(){
				    return true;
				}
				public Boolean GESTORIsKey(){
				    return false;
				}
				public Integer GESTORLength(){
				    return 403;
				}
				public Integer GESTORPrecision(){
				    return 0;
				}
				public String GESTORDefault(){
				
					return null;
				
				}
				public String GESTORComment(){
				
				    return "";
				
				}
				public String GESTORPattern(){
				
					return "";
				
				}
				public String GESTOROriginalDbColumnName(){
				
					return "GESTOR";
				
				}

				
			    public BigDecimal VALOR_FINDRISK;

				public BigDecimal getVALOR_FINDRISK () {
					return this.VALOR_FINDRISK;
				}

				public Boolean VALOR_FINDRISKIsNullable(){
				    return true;
				}
				public Boolean VALOR_FINDRISKIsKey(){
				    return false;
				}
				public Integer VALOR_FINDRISKLength(){
				    return 0;
				}
				public Integer VALOR_FINDRISKPrecision(){
				    return null;
				}
				public String VALOR_FINDRISKDefault(){
				
					return "";
				
				}
				public String VALOR_FINDRISKComment(){
				
				    return "";
				
				}
				public String VALOR_FINDRISKPattern(){
				
					return "";
				
				}
				public String VALOR_FINDRISKOriginalDbColumnName(){
				
					return "VALOR_FINDRISK";
				
				}

				
			    public String CATEGORIA_FINDRISK;

				public String getCATEGORIA_FINDRISK () {
					return this.CATEGORIA_FINDRISK;
				}

				public Boolean CATEGORIA_FINDRISKIsNullable(){
				    return true;
				}
				public Boolean CATEGORIA_FINDRISKIsKey(){
				    return false;
				}
				public Integer CATEGORIA_FINDRISKLength(){
				    return 21;
				}
				public Integer CATEGORIA_FINDRISKPrecision(){
				    return 0;
				}
				public String CATEGORIA_FINDRISKDefault(){
				
					return null;
				
				}
				public String CATEGORIA_FINDRISKComment(){
				
				    return "";
				
				}
				public String CATEGORIA_FINDRISKPattern(){
				
					return "";
				
				}
				public String CATEGORIA_FINDRISKOriginalDbColumnName(){
				
					return "CATEGORIA_FINDRISK";
				
				}

				
			    public String PREPAGADA;

				public String getPREPAGADA () {
					return this.PREPAGADA;
				}

				public Boolean PREPAGADAIsNullable(){
				    return true;
				}
				public Boolean PREPAGADAIsKey(){
				    return false;
				}
				public Integer PREPAGADALength(){
				    return 500;
				}
				public Integer PREPAGADAPrecision(){
				    return 0;
				}
				public String PREPAGADADefault(){
				
					return null;
				
				}
				public String PREPAGADAComment(){
				
				    return "";
				
				}
				public String PREPAGADAPattern(){
				
					return "";
				
				}
				public String PREPAGADAOriginalDbColumnName(){
				
					return "PREPAGADA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.FI_ID;
						
							result = prime * result + (int) this.PERSONA_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row33Struct other = (row33Struct) obj;
		
						if (this.FI_ID != other.FI_ID)
							return false;
					
						if (this.PERSONA_ID != other.PERSONA_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row33Struct other) {

		other.FI_ID = this.FI_ID;
	            other.PERSONA_ID = this.PERSONA_ID;
	            other.FFINALIZACION = this.FFINALIZACION;
	            other.UORG_EBAS = this.UORG_EBAS;
	            other.GESTOR = this.GESTOR;
	            other.VALOR_FINDRISK = this.VALOR_FINDRISK;
	            other.CATEGORIA_FINDRISK = this.CATEGORIA_FINDRISK;
	            other.PREPAGADA = this.PREPAGADA;
	            
	}

	public void copyKeysDataTo(row33Struct other) {

		other.FI_ID = this.FI_ID;
	            	other.PERSONA_ID = this.PERSONA_ID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}
	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.FI_ID = dis.readInt();
					
			        this.PERSONA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.FI_ID = dis.readInt();
					
			        this.PERSONA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FI_ID);
					
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FI_ID);
					
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FFINALIZACION = readDate(dis,ois);
					
       			    	this.UORG_EBAS = (BigDecimal) ois.readObject();
					
						this.GESTOR = readString(dis,ois);
					
       			    	this.VALOR_FINDRISK = (BigDecimal) ois.readObject();
					
						this.CATEGORIA_FINDRISK = readString(dis,ois);
					
						this.PREPAGADA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FFINALIZACION = readDate(dis,objectIn);
					
       			    	this.UORG_EBAS = (BigDecimal) objectIn.readObject();
					
						this.GESTOR = readString(dis,objectIn);
					
       			    	this.VALOR_FINDRISK = (BigDecimal) objectIn.readObject();
					
						this.CATEGORIA_FINDRISK = readString(dis,objectIn);
					
						this.PREPAGADA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.FFINALIZACION, dos, oos);
					
       			    	oos.writeObject(this.UORG_EBAS);
					
						writeString(this.GESTOR, dos, oos);
					
       			    	oos.writeObject(this.VALOR_FINDRISK);
					
						writeString(this.CATEGORIA_FINDRISK, dos, oos);
					
						writeString(this.PREPAGADA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeDate(this.FFINALIZACION, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.UORG_EBAS);
					
						writeString(this.GESTOR, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VALOR_FINDRISK);
					
						writeString(this.CATEGORIA_FINDRISK, dos, objectOut);
					
						writeString(this.PREPAGADA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FI_ID="+String.valueOf(FI_ID));
		sb.append(",PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FFINALIZACION="+String.valueOf(FFINALIZACION));
		sb.append(",UORG_EBAS="+String.valueOf(UORG_EBAS));
		sb.append(",GESTOR="+GESTOR);
		sb.append(",VALOR_FINDRISK="+String.valueOf(VALOR_FINDRISK));
		sb.append(",CATEGORIA_FINDRISK="+CATEGORIA_FINDRISK);
		sb.append(",PREPAGADA="+PREPAGADA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row33Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FI_ID, other.FI_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row33Struct row33 = new row33Struct();




	
	/**
	 * [tAdvancedHash_row33 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row33", false);
		start_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row33");
					}
				
		int tos_count_tAdvancedHash_row33 = 0;
		

			   		// connection name:row33
			   		// source node:tOracleInput_12 - inputs:(after_tFileInputDelimited_1) outputs:(row33,row33) | target node:tAdvancedHash_row33 - inputs:(row33) outputs:()
			   		// linked node: tMap_4 - inputs:(row18,row33,row1) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row33 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.FIRST_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row33Struct> tHash_Lookup_row33 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row33Struct>getLookup(matchingModeEnum_row33);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row33", tHash_Lookup_row33);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row33 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_12.setFetchSize(1000);


		    String dbquery_tOracleInput_12 = "SELECT \nDISTINCT \nFI.ID AS FI_ID,\nCF.PERSONA_ID,\nFI.HFINALIZACION AS FFINALIZACION,\nFI.UORG_ID AS UORG_EBAS,\nTRIM"
+"( GP.PRIMER_NOMBRE ) || ' ' ||\nTRIM( GP.SEGUNDO_NOMBRE ) || ' ' ||\nTRIM( GP.PRIMER_APELLIDO ) || ' ' ||\nTRIM( GP.SEGU"
+"NDO_APELLIDO ) AS GESTOR,\nFR2.FINDRISK AS VALOR_FINDRISK,  \nCASE \n WHEN FR2.FINDRISK >= 12 THEN 'Riesgo alto'  \n WHE"
+"N FR2.FINDRISK BETWEEN 7 AND 11 THEN 'Riesgo moderado'\n WHEN FR2.FINDRISK < 7 THEN 'Riesgo bajo'\n ELSE ' ' \nEND AS CA"
+"TEGORIA_FINDRISK,\nNVL( EPS.DESCRIPCION, ' ') AS PREPAGADA\nFROM FFA_IDENTIFICACION FI \nINNER JOIN GEN_USUARIOS US ON U"
+"S.ID = FI.GESTOR\nINNER JOIN GEN_PERSONAS GP ON GP.ID = US.PERSONAS_ID\nINNER JOIN FFA_COMPOSICION_FAMILIAR CF ON CF.IDE"
+"NTIFICACION_ID = FI.ID \nLEFT JOIN AFI_EPS EPS ON EPS.ID = CF.PREPAGADA \nLEFT  JOIN \n( select max (FR.FREGISTRO) AS FR"
+"EGISTRO ,  FR.PERSONAS_ID, FR.IDENTIFICACION_ID  FROM \nGEN_HRIESGOSCV FR WHERE FR.ESTREGISTRO_ID = 1 GROUP BY  FR.PERSO"
+"NAS_ID, FR.IDENTIFICACION_ID) FR ON FR.PERSONAS_ID = CF.PERSONA_ID AND FR.IDENTIFICACION_ID = FI.ID \nLEFT JOIN GEN_HRIE"
+"SGOSCV FR2 ON FR2.PERSONAS_ID = FR.PERSONAS_ID AND FR2.IDENTIFICACION_ID = FR.IDENTIFICACION_ID AND FR2.FREGISTRO = FR.F"
+"REGISTRO\n"+context.CONDITION
;
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row33.FI_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row33.FI_ID = rs_tOracleInput_12.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 2) {
								row33.PERSONA_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(2) != null) {
						row33.PERSONA_ID = rs_tOracleInput_12.getInt(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 3) {
								row33.FFINALIZACION = null;
							} else {
										
			row33.FFINALIZACION = routines.system.JDBCUtil.getDate(rs_tOracleInput_12, 3);
		                    }
							if(colQtyInRs_tOracleInput_12 < 4) {
								row33.UORG_EBAS = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(4) != null) {
						row33.UORG_EBAS = rs_tOracleInput_12.getBigDecimal(4);
					} else {
				
						row33.UORG_EBAS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 5) {
								row33.GESTOR = null;
							} else {
	                         		
        	row33.GESTOR = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 6) {
								row33.VALOR_FINDRISK = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(6) != null) {
						row33.VALOR_FINDRISK = rs_tOracleInput_12.getBigDecimal(6);
					} else {
				
						row33.VALOR_FINDRISK = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_12 < 7) {
								row33.CATEGORIA_FINDRISK = null;
							} else {
	                         		
        	row33.CATEGORIA_FINDRISK = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_12 < 8) {
								row33.PREPAGADA = null;
							} else {
	                         		
        	row33.PREPAGADA = routines.system.JDBCUtil.getString(rs_tOracleInput_12, 8, false);
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row33"
						
						);
					}
					


			   
			   

					row33Struct row33_HashRow = new row33Struct();
		   	   	   
				
				row33_HashRow.FI_ID = row33.FI_ID;
				
				row33_HashRow.PERSONA_ID = row33.PERSONA_ID;
				
				row33_HashRow.FFINALIZACION = row33.FFINALIZACION;
				
				row33_HashRow.UORG_EBAS = row33.UORG_EBAS;
				
				row33_HashRow.GESTOR = row33.GESTOR;
				
				row33_HashRow.VALOR_FINDRISK = row33.VALOR_FINDRISK;
				
				row33_HashRow.CATEGORIA_FINDRISK = row33.CATEGORIA_FINDRISK;
				
				row33_HashRow.PREPAGADA = row33.PREPAGADA;
				
			tHash_Lookup_row33.put(row33_HashRow);
			
            




 


	tos_count_tAdvancedHash_row33++;

/**
 * [tAdvancedHash_row33 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row33 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

tHash_Lookup_row33.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row33");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row33", true);
end_Hash.put("tAdvancedHash_row33", System.currentTimeMillis());




/**
 * [tAdvancedHash_row33 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row33 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row33";
	
	

 



/**
 * [tAdvancedHash_row33 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class row1Struct implements routines.system.IPersistableComparableLookupRow<row1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public int FICHA_ID;

				public int getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return null;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public int PERSONA_ID;

				public int getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return null;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public String TIPO_REGISTRO;

				public String getTIPO_REGISTRO () {
					return this.TIPO_REGISTRO;
				}

				public Boolean TIPO_REGISTROIsNullable(){
				    return true;
				}
				public Boolean TIPO_REGISTROIsKey(){
				    return false;
				}
				public Integer TIPO_REGISTROLength(){
				    return 11;
				}
				public Integer TIPO_REGISTROPrecision(){
				    return 0;
				}
				public String TIPO_REGISTRODefault(){
				
					return null;
				
				}
				public String TIPO_REGISTROComment(){
				
				    return "";
				
				}
				public String TIPO_REGISTROPattern(){
				
					return "";
				
				}
				public String TIPO_REGISTROOriginalDbColumnName(){
				
					return "TIPO_REGISTRO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.FICHA_ID;
						
							result = prime * result + (int) this.PERSONA_ID;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row1Struct other = (row1Struct) obj;
		
						if (this.FICHA_ID != other.FICHA_ID)
							return false;
					
						if (this.PERSONA_ID != other.PERSONA_ID)
							return false;
					

		return true;
    }

	public void copyDataTo(row1Struct other) {

		other.FICHA_ID = this.FICHA_ID;
	            other.PERSONA_ID = this.PERSONA_ID;
	            other.TIPO_REGISTRO = this.TIPO_REGISTRO;
	            
	}

	public void copyKeysDataTo(row1Struct other) {

		other.FICHA_ID = this.FICHA_ID;
	            	other.PERSONA_ID = this.PERSONA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.FICHA_ID = dis.readInt();
					
			        this.PERSONA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
			        this.FICHA_ID = dis.readInt();
					
			        this.PERSONA_ID = dis.readInt();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// int
				
		            	dos.writeInt(this.FICHA_ID);
					
					// int
				
		            	dos.writeInt(this.PERSONA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TIPO_REGISTRO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.TIPO_REGISTRO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.TIPO_REGISTRO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.TIPO_REGISTRO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",TIPO_REGISTRO="+TIPO_REGISTRO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.FICHA_ID, other.FICHA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
						returnValue = checkNullsAndCompare(this.PERSONA_ID, other.PERSONA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();




	
	/**
	 * [tAdvancedHash_row1 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row1", false);
		start_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row1");
					}
				
		int tos_count_tAdvancedHash_row1 = 0;
		

			   		// connection name:row1
			   		// source node:tOracleInput_13 - inputs:(after_tFileInputDelimited_1) outputs:(row1,row1) | target node:tAdvancedHash_row1 - inputs:(row1) outputs:()
			   		// linked node: tMap_4 - inputs:(row18,row33,row1) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row1 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row1Struct> tHash_Lookup_row1 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row1Struct>getLookup(matchingModeEnum_row1);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row1", tHash_Lookup_row1);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row1 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_13.setFetchSize(1000);


		    String dbquery_tOracleInput_13 = " SELECT FI.ID AS FICHA_ID, CF.PERSONA_ID, \n    CASE \n      WHEN COUNT(CF.ID) > 1 THEN 'ACTUALIZADO'\n      ELSE 'NUEV"
+"O'\n    END AS TIPO_REGISTRO\n    FROM FFA_IDENTIFICACION FI \n    INNER JOIN FFA_COMPOSICION_FAMILIAR CF ON CF.IDENTIFI"
+"CACION_ID = FI.ID AND FI.ESTREGISTRO_ID = 1   \n	"+context.CONDITION+"\n    GROUP BY FI.ID, CF.PERSONA_ID";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row1.FICHA_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row1.FICHA_ID = rs_tOracleInput_13.getInt(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row1.PERSONA_ID = 0;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row1.PERSONA_ID = rs_tOracleInput_13.getInt(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row1.TIPO_REGISTRO = null;
							} else {
	                         		
        	row1.TIPO_REGISTRO = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 3, false);
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row1"
						
						);
					}
					


			   
			   

					row1Struct row1_HashRow = new row1Struct();
		   	   	   
				
				row1_HashRow.FICHA_ID = row1.FICHA_ID;
				
				row1_HashRow.PERSONA_ID = row1.PERSONA_ID;
				
				row1_HashRow.TIPO_REGISTRO = row1.TIPO_REGISTRO;
				
			tHash_Lookup_row1.put(row1_HashRow);
			
            




 


	tos_count_tAdvancedHash_row1++;

/**
 * [tAdvancedHash_row1 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";
	
	

 



/**
 * [tAdvancedHash_row1 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row1 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";
	
	

 



/**
 * [tAdvancedHash_row1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";
	
	

tHash_Lookup_row1.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row1");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row1", true);
end_Hash.put("tAdvancedHash_row1", System.currentTimeMillis());




/**
 * [tAdvancedHash_row1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row1 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row1";
	
	

 



/**
 * [tAdvancedHash_row1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();
row30Struct row31 = row30;
row32Struct row32 = new row32Struct();






	
	/**
	 * [tRunJob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_2", false);
		start_Hash.put("tRunJob_2", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tRunJob_2 = 0;
		
class DealChildJobLibrary_tRunJob_2 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_2 dealChildJobLibrary_tRunJob_2 = new DealChildJobLibrary_tRunJob_2();

	class JVMArgumentHelper_tRunJob_2 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_2 jvm_argument_helper_tRunJob_2 = new JVMArgumentHelper_tRunJob_2();
	
	String audit_jar_path_tRunJob_2 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_7", false);
		start_Hash.put("tJavaRow_7", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tJavaRow_7 = 0;
		

int nb_line_tJavaRow_7 = 0;

 



/**
 * [tJavaRow_7 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                        synchronized (multiThreadLockWrite) {
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("priority");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("code");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }
                        }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_2", false);
		start_Hash.put("tLogCatcher_2", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_2";
	
	
		int tos_count_tLogCatcher_2 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_2.getMessages()) {
		row30.type = lcm.getType();
		row30.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row30.priority = lcm.getPriority();
		row30.message = lcm.getMessage();
		row30.code = lcm.getCode();
		
		row30.moment = java.util.Calendar.getInstance().getTime();
	
    	row30.pid = pid;
		row30.root_pid = rootPid;
		row30.father_pid = fatherPid;
	
    	row30.project = projectName;
    	row30.job = jobName;
    	row30.context = contextStr;
    		
 



/**
 * [tLogCatcher_2 begin ] stop
 */
	
	/**
	 * [tLogCatcher_2 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 


	tos_count_tLogCatcher_2++;

/**
 * [tLogCatcher_2 main ] stop
 */
	
	/**
	 * [tLogCatcher_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 



/**
 * [tLogCatcher_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row30.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row30.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    synchronized (multiThreadLockWrite) {
                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());

                    }



 
     row31 = row30;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_7 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

    //Code generate according to input schema and output schema
row32.moment = row31.moment;
row32.pid = row31.pid;
row32.root_pid = row31.root_pid;
row32.father_pid = row31.father_pid;
row32.project = row31.project;
row32.job = row31.job;
row32.context = row31.context;
row32.priority = row31.priority;
row32.type = row31.type;
row32.origin = row31.origin;
row32.message = row31.message;
row32.code = row31.code;

/*System.out.println("Error");
System.out.println("Fecha: "+row31.moment);
System.out.println("pid: "+ row31.pid );
System.out.println("root_pid: "+ row31.root_pid);
System.out.println("father_pid: "+ row31.father_pid);
System.out.println("project " + row31.project);
System.out.println("job: "+ row31.job);
System.out.println("context: "+ row31.context);
System.out.println("priority: "+ row31.priority);
System.out.println("type: "+ row31.type);
System.out.println("origin: "+ row31.origin);
System.out.println("message: "+ row31.message);
System.out.println("code: "+ row31.code);*/

context.ESTADO_EXEC = "Fail";
    nb_line_tJavaRow_7++;   

 


	tos_count_tJavaRow_7++;

/**
 * [tJavaRow_7 main ] stop
 */
	
	/**
	 * [tJavaRow_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_2 main ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_2 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_2 = System.getProperty("os.name");
			if (osName_tRunJob_2 != null && osName_tRunJob_2.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_2.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
							}
							String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
							}
							if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
								paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
              					String classpath_tRunJob_2_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_2!=null && !audit_jar_path_tRunJob_2.isEmpty()) {
		      						classpath_tRunJob_2_5 += audit_jar_path_tRunJob_2;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_5), true);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "rep_inicio.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_2.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_2.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_2 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_2);
							}
							String log4j2_config_tRunJob_2 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_2 != null){
								paraList_tRunJob_2.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_2);
							}
							if (log4j1_config_tRunJob_2 != null || log4j2_config_tRunJob_2 != null) {
								paraList_tRunJob_2.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_2.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "-cp");
		      				
		      					String classpath_tRunJob_2_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_2!=null && !audit_jar_path_tRunJob_2.isEmpty()) {
		      						classpath_tRunJob_2_5 += audit_jar_path_tRunJob_2;
		      					}
		      					
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, dealChildJobLibrary_tRunJob_2.replaceJarPathsFromCrcMap(classpath_tRunJob_2_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "rep_inicio.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--father_node=tRunJob_2");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_2.addArgumentsTo(paraList_tRunJob_2, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_2.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_2.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_2.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_2 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_2 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_2".equals(tRunJobName_tRunJob_2) && childResumePath_tRunJob_2 != null){
		paraList_tRunJob_2.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_2.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_2");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_2 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_2 = null;

	
		obj_tRunJob_2 = row32.moment;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("moment", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.project;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param project=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("project", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.job;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param job=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("job", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.context;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param context=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("context", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.origin;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("origin", obj_tRunJob_2);
	
		obj_tRunJob_2 = row32.message;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param message=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("message", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Server;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("server_origen", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_ServiceName;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param service_name_origen=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param service_name_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param service_name_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("service_name_origen", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Login;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("user_origen", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Server;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("server_destino", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_destino_ServiceName;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param service_name_destino=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param service_name_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param service_name_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("service_name_destino", obj_tRunJob_2);
	
		obj_tRunJob_2 = context.db_origen_Login;
		if(obj_tRunJob_2!=null) {
			if (obj_tRunJob_2.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_2.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_2).getTime());
			} else {
				
					paraList_tRunJob_2.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_2));
					
				
			}
		} else {
			paraList_tRunJob_2.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_2.put("user_destino", obj_tRunJob_2);
	
	
				class ConsoleHelper_tRunJob_2 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_2_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_2_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_2 consoleHelper_tRunJob_2 = new ConsoleHelper_tRunJob_2();

		Runtime runtime_tRunJob_2 = Runtime.getRuntime();
		Process ps_tRunJob_2 = null;
		
		//0 indicates normal termination
        int result_tRunJob_2;
        StringBuffer errorMsg_tRunJob_2 = new StringBuffer();
        try {
            ps_tRunJob_2 = runtime_tRunJob_2.exec((String[])paraList_tRunJob_2.toArray(new String[paraList_tRunJob_2.size()]));

            Thread normal_tRunJob_2 = consoleHelper_tRunJob_2.getNormalThread(ps_tRunJob_2);
            normal_tRunJob_2.start();

            Thread error_tRunJob_2 = consoleHelper_tRunJob_2.getErrorThread(ps_tRunJob_2, errorMsg_tRunJob_2);
            error_tRunJob_2.start();

            result_tRunJob_2 = ps_tRunJob_2.waitFor();
            normal_tRunJob_2.join();
            error_tRunJob_2.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_2_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_2.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_2_CHILD_RETURN_CODE",result_tRunJob_2);
		if(result_tRunJob_2 != 0){
   			globalMap.put("tRunJob_2_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_2.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_2 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_2.toString());
			
  		}

		

 


	tos_count_tRunJob_2++;

/**
 * [tRunJob_2 main ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

 



/**
 * [tRunJob_2 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 



/**
 * [tLogCatcher_2 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_2 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	
	}
} catch (Exception e_tLogCatcher_2) {
globalMap.put("tLogCatcher_2_ERROR_MESSAGE",e_tLogCatcher_2.getMessage());
	logIgnoredError(String.format("tLogCatcher_2 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_2), e_tLogCatcher_2);
}

 

ok_Hash.put("tLogCatcher_2", true);
end_Hash.put("tLogCatcher_2", System.currentTimeMillis());




/**
 * [tLogCatcher_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
	   		synchronized (multiThreadLockWrite) {
		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
			}
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */

	
	/**
	 * [tJavaRow_7 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

globalMap.put("tJavaRow_7_NB_LINE",nb_line_tJavaRow_7);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tJavaRow_7", true);
end_Hash.put("tJavaRow_7", System.currentTimeMillis());




/**
 * [tJavaRow_7 end ] stop
 */

	
	/**
	 * [tRunJob_2 end ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tRunJob_2", true);
end_Hash.put("tRunJob_2", System.currentTimeMillis());




/**
 * [tRunJob_2 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_2 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_2";
	
	

 



/**
 * [tLogCatcher_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
		   		synchronized (multiThreadLockWrite) {
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
				}
			
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_7 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_7";
	
	

 



/**
 * [tJavaRow_7 finally ] stop
 */

	
	/**
	 * [tRunJob_2 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_2";
	
	
	
 



/**
 * [tRunJob_2 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_2_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_2", false);
		start_Hash.put("tPrejob_2", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_2";
	
	
		int tos_count_tPrejob_2 = 0;
		

 



/**
 * [tPrejob_2 begin ] stop
 */
	
	/**
	 * [tPrejob_2 main ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 


	tos_count_tPrejob_2++;

/**
 * [tPrejob_2 main ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_2 end ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 

ok_Hash.put("tPrejob_2", true);
end_Hash.put("tPrejob_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk24", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_2 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_2";
	
	

 



/**
 * [tPrejob_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_2_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row34 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row34 = new row34Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Host =null;
									}else{
		row34.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Port =null;
									}else{
		row34.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Sid =null;
									}else{
		row34.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.ServiceName =null;
									}else{
		row34.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Schema =null;
									}else{
		row34.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.User =null;
									}else{
		row34.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Password =null;
									}else{
		row34.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PathStorage =null;
									}else{
		row34.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPHost =null;
									}else{
		row34.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPPort =null;
									}else{
		row34.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.UsernameMail =null;
									}else{
		row34.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PasswordMail =null;
									}else{
		row34.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row34 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row34.Host;
context.db_origen_Port = row34.Port;
context.db_origen_ServiceName = row34.ServiceName;
context.db_origen_Schema = row34.Schema;
context.db_origen_Login = row34.User;
context.db_origen_Password = row34.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "FFA";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk25", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_3 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk26", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tJavaRow_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_4", false);
		start_Hash.put("tJavaRow_4", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tJavaRow_4 = 0;
		

int nb_line_tJavaRow_4 = 0;

 



/**
 * [tJavaRow_4 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_2 = false;
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row35 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row35 = new row35Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Host =null;
									}else{
		row35.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Port =null;
									}else{
		row35.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Sid =null;
									}else{
		row35.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.ServiceName =null;
									}else{
		row35.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Schema =null;
									}else{
		row35.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.User =null;
									}else{
		row35.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Password =null;
									}else{
		row35.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row35 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tJavaRow_4 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

    //Guarda en variables de contexto los parametros para la conexión a la bodega 
context.db_destino_Server = row35.Host;
context.db_destino_Port = row35.Port;
context.db_destino_ServiceName = row35.ServiceName;
context.db_destino_Schema = row35.Schema;
context.db_destino_Login = row35.User;
context.db_destino_Password = row35.Password;

    nb_line_tJavaRow_4++;   

 


	tos_count_tJavaRow_4++;

/**
 * [tJavaRow_4 main ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_4 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

globalMap.put("tJavaRow_4_NB_LINE",nb_line_tJavaRow_4);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tJavaRow_4", true);
end_Hash.put("tJavaRow_4", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk27", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_4 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_4";
	
	

 



/**
 * [tJavaRow_4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class tHashInput_tUnite_2_row22Struct implements routines.system.IPersistableRow<tHashInput_tUnite_2_row22Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tHashInput_tUnite_2_row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row23Struct implements routines.system.IPersistableRow<row23Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_2 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_2> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_2 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row21Struct implements routines.system.IPersistableRow<row21Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class tHashInput_tUnite_1_RunAfterStruct implements routines.system.IPersistableRow<tHashInput_tUnite_1_RunAfterStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tHashInput_tUnite_1_RunAfterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row26Struct implements routines.system.IPersistableRow<row26Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 10;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTA;

				public String getRESPUESTA () {
					return this.RESPUESTA;
				}

				public Boolean RESPUESTAIsNullable(){
				    return true;
				}
				public Boolean RESPUESTAIsKey(){
				    return false;
				}
				public Integer RESPUESTALength(){
				    return 1;
				}
				public Integer RESPUESTAPrecision(){
				    return 0;
				}
				public String RESPUESTADefault(){
				
					return null;
				
				}
				public String RESPUESTAComment(){
				
				    return "";
				
				}
				public String RESPUESTAPattern(){
				
					return "";
				
				}
				public String RESPUESTAOriginalDbColumnName(){
				
					return "RESPUESTA";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 1;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTA = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTA,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTA="+RESPUESTA);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row26Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_tUnite_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_5Process(globalMap);

		row21Struct row21 = new row21Struct();
row23Struct row23 = new row23Struct();

		row26Struct row26 = new row26Struct();

			tHashInput_tUnite_2_row22Struct tHashInput_tUnite_2_row22 = new tHashInput_tUnite_2_row22Struct();




	
	/**
	 * [tHashOutput_tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_tUnite_2", false);
		start_Hash.put("tHashOutput_tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_tUnite_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"tHashInput_tUnite_2_tHashInput_tUnite_2_row22");
					}
				
		int tos_count_tHashOutput_tUnite_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_tUnite_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row22Struct> tHashFile_tHashOutput_tUnite_2 = null;
		String hashKey_tHashOutput_tUnite_2 = "tHashFile_FichaFamiliar_" + pid + "_tHashOutput_tUnite_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_tUnite_2)){
			    if(mf_tHashOutput_tUnite_2.getResourceMap().get(hashKey_tHashOutput_tUnite_2) == null){
	      		    mf_tHashOutput_tUnite_2.getResourceMap().put(hashKey_tHashOutput_tUnite_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row22Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_tUnite_2 = mf_tHashOutput_tUnite_2.getResourceMap().get(hashKey_tHashOutput_tUnite_2);
			    }else{
			    	tHashFile_tHashOutput_tUnite_2 = mf_tHashOutput_tUnite_2.getResourceMap().get(hashKey_tHashOutput_tUnite_2);
			    }
			}
        int nb_line_tHashOutput_tUnite_2 = 0;

 



/**
 * [tHashOutput_tUnite_2 begin ] stop
 */



	
	/**
	 * [tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tUnite_2", false);
		start_Hash.put("tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tUnite_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23","row26");
					}
				
		int tos_count_tUnite_2 = 0;
		

int nb_line_tUnite_2 = 0;

 



/**
 * [tUnite_2 begin ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_DenormalizeOut", false);
		start_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tDenormalize_2_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_2_DenormalizeOut {
java.util.List<String> RESPUESTAS = new java.util.ArrayList<String>();
}
DenormalizeStructtDenormalize_2_DenormalizeOut denormalize_result_tDenormalize_2_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>>>>> hash_PERSONA_ID_tDenormalize_2_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>>>>>();java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>>>> hash_FICHA_ID_tDenormalize_2_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>>> hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>> hash_EPS_ID_tDenormalize_2_DenormalizeOut = null;java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>> hash_FREGISTRO_tDenormalize_2_DenormalizeOut = null;java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>> hash_SIGLA_tDenormalize_2_DenormalizeOut = null;
java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut> hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut = null;

 



/**
 * [tDenormalize_2_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tHashInput_tUnite_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_tUnite_1", false);
		start_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_tUnite_1";
	
	
		int tos_count_tHashInput_tUnite_1 = 0;
		


int nb_line_tHashInput_tUnite_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_1_row21Struct> tHashFile_tHashInput_tUnite_1 = mf_tHashInput_tUnite_1.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_tUnite_1");
if(tHashFile_tHashInput_tUnite_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<tHashInput_tUnite_1_row21Struct> iterator_tHashInput_tUnite_1 = tHashFile_tHashInput_tUnite_1.iterator();
while (iterator_tHashInput_tUnite_1.hasNext()) {
    tHashInput_tUnite_1_row21Struct next_tHashInput_tUnite_1 = iterator_tHashInput_tUnite_1.next();

	row21.PERSONA_ID = next_tHashInput_tUnite_1.PERSONA_ID;
	row21.FICHA_ID = next_tHashInput_tUnite_1.FICHA_ID;
	row21.TREGIMENSALUD_ID = next_tHashInput_tUnite_1.TREGIMENSALUD_ID;
	row21.EPS_ID = next_tHashInput_tUnite_1.EPS_ID;
	row21.FREGISTRO = next_tHashInput_tUnite_1.FREGISTRO;
	row21.SIGLA = next_tHashInput_tUnite_1.SIGLA;
	row21.RESPUESTAS = next_tHashInput_tUnite_1.RESPUESTAS;
	row21.RECOMENDACIONES = next_tHashInput_tUnite_1.RECOMENDACIONES;

 



/**
 * [tHashInput_tUnite_1 begin ] stop
 */
	
	/**
	 * [tHashInput_tUnite_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_1";
	
	

 


	tos_count_tHashInput_tUnite_1++;

/**
 * [tHashInput_tUnite_1 main ] stop
 */
	
	/**
	 * [tHashInput_tUnite_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_1";
	
	

 



/**
 * [tHashInput_tUnite_1 process_data_begin ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					

if(hash_PERSONA_ID_tDenormalize_2_DenormalizeOut.containsKey(row21.PERSONA_ID)){
	hash_FICHA_ID_tDenormalize_2_DenormalizeOut = hash_PERSONA_ID_tDenormalize_2_DenormalizeOut.get(row21.PERSONA_ID);                    
}else{
	hash_FICHA_ID_tDenormalize_2_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>>>>();
	hash_PERSONA_ID_tDenormalize_2_DenormalizeOut.put(row21.PERSONA_ID,hash_FICHA_ID_tDenormalize_2_DenormalizeOut);
}
if(hash_FICHA_ID_tDenormalize_2_DenormalizeOut.containsKey(row21.FICHA_ID)){
	hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut = hash_FICHA_ID_tDenormalize_2_DenormalizeOut.get(row21.FICHA_ID);                    
}else{
	hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>>>();
	hash_FICHA_ID_tDenormalize_2_DenormalizeOut.put(row21.FICHA_ID,hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut);
}
if(hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut.containsKey(row21.TREGIMENSALUD_ID)){
	hash_EPS_ID_tDenormalize_2_DenormalizeOut = hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut.get(row21.TREGIMENSALUD_ID);                    
}else{
	hash_EPS_ID_tDenormalize_2_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>>();
	hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut.put(row21.TREGIMENSALUD_ID,hash_EPS_ID_tDenormalize_2_DenormalizeOut);
}
if(hash_EPS_ID_tDenormalize_2_DenormalizeOut.containsKey(row21.EPS_ID)){
	hash_FREGISTRO_tDenormalize_2_DenormalizeOut = hash_EPS_ID_tDenormalize_2_DenormalizeOut.get(row21.EPS_ID);                    
}else{
	hash_FREGISTRO_tDenormalize_2_DenormalizeOut = new java.util.HashMap<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>>();
	hash_EPS_ID_tDenormalize_2_DenormalizeOut.put(row21.EPS_ID,hash_FREGISTRO_tDenormalize_2_DenormalizeOut);
}
if(hash_FREGISTRO_tDenormalize_2_DenormalizeOut.containsKey(row21.FREGISTRO)){
	hash_SIGLA_tDenormalize_2_DenormalizeOut = hash_FREGISTRO_tDenormalize_2_DenormalizeOut.get(row21.FREGISTRO);                    
}else{
	hash_SIGLA_tDenormalize_2_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String, DenormalizeStructtDenormalize_2_DenormalizeOut>>();
	hash_FREGISTRO_tDenormalize_2_DenormalizeOut.put(row21.FREGISTRO,hash_SIGLA_tDenormalize_2_DenormalizeOut);
}
if(hash_SIGLA_tDenormalize_2_DenormalizeOut.containsKey(row21.SIGLA)){
	hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut = hash_SIGLA_tDenormalize_2_DenormalizeOut.get(row21.SIGLA);                    
}else{
	hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut = new java.util.HashMap<String, DenormalizeStructtDenormalize_2_DenormalizeOut>();
	hash_SIGLA_tDenormalize_2_DenormalizeOut.put(row21.SIGLA,hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut);
}
if(hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut.containsKey(row21.RECOMENDACIONES)){
	denormalize_result_tDenormalize_2_DenormalizeOut = hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut.get(row21.RECOMENDACIONES);
	if(!denormalize_result_tDenormalize_2_DenormalizeOut.RESPUESTAS.contains(row21.RESPUESTAS)){
		denormalize_result_tDenormalize_2_DenormalizeOut.RESPUESTAS.add(row21.RESPUESTAS);
	}                  
}else{
	denormalize_result_tDenormalize_2_DenormalizeOut = new DenormalizeStructtDenormalize_2_DenormalizeOut();
	if(!denormalize_result_tDenormalize_2_DenormalizeOut.RESPUESTAS.contains(row21.RESPUESTAS)){
		denormalize_result_tDenormalize_2_DenormalizeOut.RESPUESTAS.add(row21.RESPUESTAS);
	}
	hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut.put(row21.RECOMENDACIONES, denormalize_result_tDenormalize_2_DenormalizeOut);
}

 


	tos_count_tDenormalize_2_DenormalizeOut++;

/**
 * [tDenormalize_2_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_2_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut process_data_end ] stop
 */



	
	/**
	 * [tHashInput_tUnite_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_1";
	
	

 



/**
 * [tHashInput_tUnite_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_tUnite_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_1";
	
	
    

		
			nb_line_tHashInput_tUnite_1++;
		}	
    		
    		mf_tHashInput_tUnite_1.clearCache("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_tUnite_1");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_tUnite_1");
	


	globalMap.put("tHashInput_tUnite_1_NB_LINE", nb_line_tHashInput_tUnite_1);       

 

ok_Hash.put("tHashInput_tUnite_1", true);
end_Hash.put("tHashInput_tUnite_1", System.currentTimeMillis());




/**
 * [tHashInput_tUnite_1 end ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_2> result_list_tDenormalize_2_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
if (denormalize_result_tDenormalize_2_DenormalizeOut != null) {
StringBuilder sb_tDenormalize_2_DenormalizeOut = null;

//generate result begin
java.util.Iterator<BigDecimal> PERSONA_ID_iterator_tDenormalize_2_DenormalizeOut = hash_PERSONA_ID_tDenormalize_2_DenormalizeOut.keySet().iterator();

while(PERSONA_ID_iterator_tDenormalize_2_DenormalizeOut.hasNext()){

	BigDecimal key_PERSONA_ID_tDenormalize_2_DenormalizeOut = PERSONA_ID_iterator_tDenormalize_2_DenormalizeOut.next();
	
	hash_FICHA_ID_tDenormalize_2_DenormalizeOut = hash_PERSONA_ID_tDenormalize_2_DenormalizeOut.get(key_PERSONA_ID_tDenormalize_2_DenormalizeOut);

java.util.Iterator<BigDecimal> FICHA_ID_iterator_tDenormalize_2_DenormalizeOut = hash_FICHA_ID_tDenormalize_2_DenormalizeOut.keySet().iterator();

while(FICHA_ID_iterator_tDenormalize_2_DenormalizeOut.hasNext()){

	BigDecimal key_FICHA_ID_tDenormalize_2_DenormalizeOut = FICHA_ID_iterator_tDenormalize_2_DenormalizeOut.next();
	
	hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut = hash_FICHA_ID_tDenormalize_2_DenormalizeOut.get(key_FICHA_ID_tDenormalize_2_DenormalizeOut);

java.util.Iterator<BigDecimal> TREGIMENSALUD_ID_iterator_tDenormalize_2_DenormalizeOut = hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut.keySet().iterator();

while(TREGIMENSALUD_ID_iterator_tDenormalize_2_DenormalizeOut.hasNext()){

	BigDecimal key_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut = TREGIMENSALUD_ID_iterator_tDenormalize_2_DenormalizeOut.next();
	
	hash_EPS_ID_tDenormalize_2_DenormalizeOut = hash_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut.get(key_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut);

java.util.Iterator<BigDecimal> EPS_ID_iterator_tDenormalize_2_DenormalizeOut = hash_EPS_ID_tDenormalize_2_DenormalizeOut.keySet().iterator();

while(EPS_ID_iterator_tDenormalize_2_DenormalizeOut.hasNext()){

	BigDecimal key_EPS_ID_tDenormalize_2_DenormalizeOut = EPS_ID_iterator_tDenormalize_2_DenormalizeOut.next();
	
	hash_FREGISTRO_tDenormalize_2_DenormalizeOut = hash_EPS_ID_tDenormalize_2_DenormalizeOut.get(key_EPS_ID_tDenormalize_2_DenormalizeOut);

java.util.Iterator<java.util.Date> FREGISTRO_iterator_tDenormalize_2_DenormalizeOut = hash_FREGISTRO_tDenormalize_2_DenormalizeOut.keySet().iterator();

while(FREGISTRO_iterator_tDenormalize_2_DenormalizeOut.hasNext()){

	java.util.Date key_FREGISTRO_tDenormalize_2_DenormalizeOut = FREGISTRO_iterator_tDenormalize_2_DenormalizeOut.next();
	
	hash_SIGLA_tDenormalize_2_DenormalizeOut = hash_FREGISTRO_tDenormalize_2_DenormalizeOut.get(key_FREGISTRO_tDenormalize_2_DenormalizeOut);

java.util.Iterator<String> SIGLA_iterator_tDenormalize_2_DenormalizeOut = hash_SIGLA_tDenormalize_2_DenormalizeOut.keySet().iterator();

while(SIGLA_iterator_tDenormalize_2_DenormalizeOut.hasNext()){

	String key_SIGLA_tDenormalize_2_DenormalizeOut = SIGLA_iterator_tDenormalize_2_DenormalizeOut.next();
	
	hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut = hash_SIGLA_tDenormalize_2_DenormalizeOut.get(key_SIGLA_tDenormalize_2_DenormalizeOut);

java.util.Iterator<String> RECOMENDACIONES_iterator_tDenormalize_2_DenormalizeOut = hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut.keySet().iterator();

while(RECOMENDACIONES_iterator_tDenormalize_2_DenormalizeOut.hasNext()){

	String key_RECOMENDACIONES_tDenormalize_2_DenormalizeOut = RECOMENDACIONES_iterator_tDenormalize_2_DenormalizeOut.next();
	
	denormalize_result_tDenormalize_2_DenormalizeOut = hash_RECOMENDACIONES_tDenormalize_2_DenormalizeOut.get(key_RECOMENDACIONES_tDenormalize_2_DenormalizeOut);

	OnRowsEndStructtDenormalize_2 denormalize_row_tDenormalize_2_DenormalizeOut = new OnRowsEndStructtDenormalize_2();
                
	denormalize_row_tDenormalize_2_DenormalizeOut.PERSONA_ID = key_PERSONA_ID_tDenormalize_2_DenormalizeOut;
	denormalize_row_tDenormalize_2_DenormalizeOut.FICHA_ID = key_FICHA_ID_tDenormalize_2_DenormalizeOut;
	denormalize_row_tDenormalize_2_DenormalizeOut.TREGIMENSALUD_ID = key_TREGIMENSALUD_ID_tDenormalize_2_DenormalizeOut;
	denormalize_row_tDenormalize_2_DenormalizeOut.EPS_ID = key_EPS_ID_tDenormalize_2_DenormalizeOut;
	denormalize_row_tDenormalize_2_DenormalizeOut.FREGISTRO = key_FREGISTRO_tDenormalize_2_DenormalizeOut;
	denormalize_row_tDenormalize_2_DenormalizeOut.SIGLA = key_SIGLA_tDenormalize_2_DenormalizeOut;
	denormalize_row_tDenormalize_2_DenormalizeOut.RECOMENDACIONES = key_RECOMENDACIONES_tDenormalize_2_DenormalizeOut;
	for(String temp_tDenormalize_2_DenormalizeOut : denormalize_result_tDenormalize_2_DenormalizeOut.RESPUESTAS){
	
		if(sb_tDenormalize_2_DenormalizeOut == null){
		
			sb_tDenormalize_2_DenormalizeOut = new StringBuilder();		
			sb_tDenormalize_2_DenormalizeOut.append(temp_tDenormalize_2_DenormalizeOut);
			
			
		}else{		
			sb_tDenormalize_2_DenormalizeOut.append("  ").append(temp_tDenormalize_2_DenormalizeOut);
			
		}
		
	}
	if (sb_tDenormalize_2_DenormalizeOut != null)
		denormalize_row_tDenormalize_2_DenormalizeOut.RESPUESTAS = sb_tDenormalize_2_DenormalizeOut.toString();
	
	sb_tDenormalize_2_DenormalizeOut = null;
	
	//in the deepest end
	
	result_list_tDenormalize_2_DenormalizeOut.add(denormalize_row_tDenormalize_2_DenormalizeOut);

}

}

}

}

}

}

}

}
//generate result end
globalMap.put("tDenormalize_2", result_list_tDenormalize_2_DenormalizeOut);
globalMap.put("tDenormalize_2_DenormalizeOut_NB_LINE", result_list_tDenormalize_2_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tDenormalize_2_DenormalizeOut", true);
end_Hash.put("tDenormalize_2_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_2_DenormalizeOut end ] stop
 */

	
	/**
	 * [tDenormalize_2_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_2_ArrayIn", false);
		start_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	
		int tos_count_tDenormalize_2_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_2_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_2> list_tDenormalize_2_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_2>)globalMap.get("tDenormalize_2");
        if(list_tDenormalize_2_ArrayIn == null) {
            list_tDenormalize_2_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_2>();
        }        
        for(OnRowsEndStructtDenormalize_2 row_tDenormalize_2_ArrayIn : list_tDenormalize_2_ArrayIn){
        					
    						row23.PERSONA_ID = row_tDenormalize_2_ArrayIn.PERSONA_ID;
    											
    						row23.FICHA_ID = row_tDenormalize_2_ArrayIn.FICHA_ID;
    											
    						row23.TREGIMENSALUD_ID = row_tDenormalize_2_ArrayIn.TREGIMENSALUD_ID;
    											
    						row23.EPS_ID = row_tDenormalize_2_ArrayIn.EPS_ID;
    											
    						row23.FREGISTRO = row_tDenormalize_2_ArrayIn.FREGISTRO;
    											
    						row23.SIGLA = row_tDenormalize_2_ArrayIn.SIGLA;
    											
    						row23.RESPUESTAS = row_tDenormalize_2_ArrayIn.RESPUESTAS;
    											
    						row23.RECOMENDACIONES = row_tDenormalize_2_ArrayIn.RECOMENDACIONES;
    						

 



/**
 * [tDenormalize_2_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 


	tos_count_tDenormalize_2_ArrayIn++;

/**
 * [tDenormalize_2_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row23"
									
							);
						}
						
//////////
 

// for output
			tHashInput_tUnite_2_row22 = new tHashInput_tUnite_2_row22Struct();
								
			tHashInput_tUnite_2_row22.PERSONA_ID = row23.PERSONA_ID;								
			tHashInput_tUnite_2_row22.FICHA_ID = row23.FICHA_ID;								
			tHashInput_tUnite_2_row22.TREGIMENSALUD_ID = row23.TREGIMENSALUD_ID;								
			tHashInput_tUnite_2_row22.EPS_ID = row23.EPS_ID;								
			tHashInput_tUnite_2_row22.FREGISTRO = row23.FREGISTRO;								
			tHashInput_tUnite_2_row22.SIGLA = row23.SIGLA;								
			tHashInput_tUnite_2_row22.RESPUESTAS = row23.RESPUESTAS;								
			tHashInput_tUnite_2_row22.RECOMENDACIONES = row23.RECOMENDACIONES;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"tHashInput_tUnite_2_tHashInput_tUnite_2_row22"
						
						);
					}
					



    
		tHashInput_tUnite_2_row22Struct oneRow_tHashOutput_tUnite_2 = new tHashInput_tUnite_2_row22Struct();
				
					oneRow_tHashOutput_tUnite_2.PERSONA_ID = tHashInput_tUnite_2_row22.PERSONA_ID;
					oneRow_tHashOutput_tUnite_2.FICHA_ID = tHashInput_tUnite_2_row22.FICHA_ID;
					oneRow_tHashOutput_tUnite_2.TREGIMENSALUD_ID = tHashInput_tUnite_2_row22.TREGIMENSALUD_ID;
					oneRow_tHashOutput_tUnite_2.EPS_ID = tHashInput_tUnite_2_row22.EPS_ID;
					oneRow_tHashOutput_tUnite_2.FREGISTRO = tHashInput_tUnite_2_row22.FREGISTRO;
					oneRow_tHashOutput_tUnite_2.SIGLA = tHashInput_tUnite_2_row22.SIGLA;
					oneRow_tHashOutput_tUnite_2.RESPUESTAS = tHashInput_tUnite_2_row22.RESPUESTAS;
					oneRow_tHashOutput_tUnite_2.RECOMENDACIONES = tHashInput_tUnite_2_row22.RECOMENDACIONES;
		
        tHashFile_tHashOutput_tUnite_2.put(oneRow_tHashOutput_tUnite_2);
        nb_line_tHashOutput_tUnite_2 ++;

 


	tos_count_tHashOutput_tUnite_2++;

/**
 * [tHashOutput_tUnite_2 main ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	

 



/**
 * [tHashOutput_tUnite_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	

 



/**
 * [tHashOutput_tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_2_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_2_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	
	nb_line_tDenormalize_2_ArrayIn++;
}
globalMap.put("tDenormalize_2_ArrayIn_NB_LINE",nb_line_tDenormalize_2_ArrayIn);
 

ok_Hash.put("tDenormalize_2_ArrayIn", true);
end_Hash.put("tDenormalize_2_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_2_ArrayIn end ] stop
 */






	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_10.setFetchSize(1000);


		    String dbquery_tOracleInput_10 = "SELECT \n      DISTINCT \n       GP.ID AS PERSONA_ID, \n       FI.ID AS FICHA_ID,\n       CF.TREGIMENSALUD_ID,\n       "
+"CF.EPS_ID, \n       FI.FREGISTRO AS FREGISTRO,\n       GPR.SIGLA, \n       ' '  AS RESPUESTA,\n	   NVL ( CF.RECOMENDACIO"
+"NES, ' ') AS RECOMENDACIONES	 \n     FROM GEN_PERSONAS GP \n     INNER  JOIN FFA_COMPOSICION_FAMILIAR CF ON CF.PERSONA_I"
+"D = GP.ID AND CF.ESTREGISTRO_ID = 1\n     INNER JOIN FFA_IDENTIFICACION FI ON FI.ID = CF.IDENTIFICACION_ID AND FI.ESTREG"
+"ISTRO_ID = 1\n     LEFT JOIN (select ID, SIGLA  from gen_preguntas GPR WHERE  GPR.SIGLA LIKE 'FF%' AND ESTREGISTRO_ID =1"
+") GPR ON 1 = 1 \n	"+context.CONDITION+" \n     ORDER BY GP.ID, FI.ID, GPR.SIGLA";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row26.PERSONA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row26.PERSONA_ID = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row26.FICHA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row26.FICHA_ID = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row26.TREGIMENSALUD_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row26.TREGIMENSALUD_ID = rs_tOracleInput_10.getBigDecimal(3);
					} else {
				
						row26.TREGIMENSALUD_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row26.EPS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(4) != null) {
						row26.EPS_ID = rs_tOracleInput_10.getBigDecimal(4);
					} else {
				
						row26.EPS_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row26.FREGISTRO = null;
							} else {
										
			row26.FREGISTRO = routines.system.JDBCUtil.getDate(rs_tOracleInput_10, 5);
		                    }
							if(colQtyInRs_tOracleInput_10 < 6) {
								row26.SIGLA = null;
							} else {
	                         		
        	row26.SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 6, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 7) {
								row26.RESPUESTA = null;
							} else {
	                         		
        	row26.RESPUESTA = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_10 < 8) {
								row26.RECOMENDACIONES = null;
							} else {
	                         		
        	row26.RECOMENDACIONES = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 8, false);
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	
						if(execStat){
							runStat.updateStatOnConnection(iterateId,1,1
								
									,"row26"
									
							);
						}
						
//////////
 

// for output
			tHashInput_tUnite_2_row22 = new tHashInput_tUnite_2_row22Struct();
								
			tHashInput_tUnite_2_row22.PERSONA_ID = row26.PERSONA_ID;								
			tHashInput_tUnite_2_row22.FICHA_ID = row26.FICHA_ID;								
			tHashInput_tUnite_2_row22.TREGIMENSALUD_ID = row26.TREGIMENSALUD_ID;								
			tHashInput_tUnite_2_row22.EPS_ID = row26.EPS_ID;								
			tHashInput_tUnite_2_row22.FREGISTRO = row26.FREGISTRO;								
			tHashInput_tUnite_2_row22.SIGLA = row26.SIGLA;								
			tHashInput_tUnite_2_row22.RESPUESTAS = row26.RESPUESTA;								
			tHashInput_tUnite_2_row22.RECOMENDACIONES = row26.RECOMENDACIONES;			

			nb_line_tUnite_2++;

//////////
 


	tos_count_tUnite_2++;

/**
 * [tUnite_2 main ] stop
 */
	
	/**
	 * [tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"tHashInput_tUnite_2_tHashInput_tUnite_2_row22"
						
						);
					}
					



    
		tHashInput_tUnite_2_row22Struct oneRow_tHashOutput_tUnite_2 = new tHashInput_tUnite_2_row22Struct();
				
					oneRow_tHashOutput_tUnite_2.PERSONA_ID = tHashInput_tUnite_2_row22.PERSONA_ID;
					oneRow_tHashOutput_tUnite_2.FICHA_ID = tHashInput_tUnite_2_row22.FICHA_ID;
					oneRow_tHashOutput_tUnite_2.TREGIMENSALUD_ID = tHashInput_tUnite_2_row22.TREGIMENSALUD_ID;
					oneRow_tHashOutput_tUnite_2.EPS_ID = tHashInput_tUnite_2_row22.EPS_ID;
					oneRow_tHashOutput_tUnite_2.FREGISTRO = tHashInput_tUnite_2_row22.FREGISTRO;
					oneRow_tHashOutput_tUnite_2.SIGLA = tHashInput_tUnite_2_row22.SIGLA;
					oneRow_tHashOutput_tUnite_2.RESPUESTAS = tHashInput_tUnite_2_row22.RESPUESTAS;
					oneRow_tHashOutput_tUnite_2.RECOMENDACIONES = tHashInput_tUnite_2_row22.RECOMENDACIONES;
		
        tHashFile_tHashOutput_tUnite_2.put(oneRow_tHashOutput_tUnite_2);
        nb_line_tHashOutput_tUnite_2 ++;

 


	tos_count_tHashOutput_tUnite_2++;

/**
 * [tHashOutput_tUnite_2 main ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	

 



/**
 * [tHashOutput_tUnite_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	

 



/**
 * [tHashOutput_tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */
	
	/**
	 * [tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

globalMap.put("tUnite_2_NB_LINE", nb_line_tUnite_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23","row26");
			  	}
			  	
 

ok_Hash.put("tUnite_2", true);
end_Hash.put("tUnite_2", System.currentTimeMillis());




/**
 * [tUnite_2 end ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	
globalMap.put("tHashOutput_tUnite_2_NB_LINE", nb_line_tHashOutput_tUnite_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"tHashInput_tUnite_2_tHashInput_tUnite_2_row22");
			  	}
			  	
 

ok_Hash.put("tHashOutput_tUnite_2", true);
end_Hash.put("tHashOutput_tUnite_2", System.currentTimeMillis());




/**
 * [tHashOutput_tUnite_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tDenormalize_2_ArrayIn"
							globalMap.remove("tDenormalize_2");
						
				try{
					
	
	/**
	 * [tHashInput_tUnite_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_1";
	
	

 



/**
 * [tHashInput_tUnite_1 finally ] stop
 */

	
	/**
	 * [tDenormalize_2_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_2_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_2_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_2";
	
	currentComponent="tDenormalize_2_ArrayIn";
	
	

 



/**
 * [tDenormalize_2_ArrayIn finally ] stop
 */






	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */
	
	/**
	 * [tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tUnite_2";
	
	

 



/**
 * [tUnite_2 finally ] stop
 */

	
	/**
	 * [tHashOutput_tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_tUnite_2";
	
	

 



/**
 * [tHashOutput_tUnite_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_tUnite_1_SUBPROCESS_STATE", 1);
	}
	


public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public String REGIMEN_SALUD;

				public String getREGIMEN_SALUD () {
					return this.REGIMEN_SALUD;
				}

				public Boolean REGIMEN_SALUDIsNullable(){
				    return false;
				}
				public Boolean REGIMEN_SALUDIsKey(){
				    return false;
				}
				public Integer REGIMEN_SALUDLength(){
				    return 150;
				}
				public Integer REGIMEN_SALUDPrecision(){
				    return 0;
				}
				public String REGIMEN_SALUDDefault(){
				
					return null;
				
				}
				public String REGIMEN_SALUDComment(){
				
				    return "";
				
				}
				public String REGIMEN_SALUDPattern(){
				
					return "";
				
				}
				public String REGIMEN_SALUDOriginalDbColumnName(){
				
					return "REGIMEN_SALUD";
				
				}

				
			    public String EPS;

				public String getEPS () {
					return this.EPS;
				}

				public Boolean EPSIsNullable(){
				    return true;
				}
				public Boolean EPSIsKey(){
				    return false;
				}
				public Integer EPSLength(){
				    return 500;
				}
				public Integer EPSPrecision(){
				    return 0;
				}
				public String EPSDefault(){
				
					return null;
				
				}
				public String EPSComment(){
				
				    return "";
				
				}
				public String EPSPattern(){
				
					return "";
				
				}
				public String EPSOriginalDbColumnName(){
				
					return "EPS";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
					this.REGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
					this.REGIMEN_SALUD = readString(dis);
					
					this.EPS = readString(dis);
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// String
				
						writeString(this.REGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// String
				
						writeString(this.REGIMEN_SALUD,dos);
					
					// String
				
						writeString(this.EPS,dos);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",REGIMEN_SALUD="+REGIMEN_SALUD);
		sb.append(",EPS="+EPS);
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row27Struct implements routines.system.IPersistableRow<row27Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row27Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtSortRow_1 implements routines.system.IPersistableRow<OnRowsEndStructtSortRow_1> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtSortRow_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class OnRowsEndStructtDenormalize_1 implements routines.system.IPersistableRow<OnRowsEndStructtDenormalize_1> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(OnRowsEndStructtDenormalize_1 other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row22Struct implements routines.system.IPersistableRow<row22Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tHashInput_5Struct implements routines.system.IPersistableRow<after_tHashInput_5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	
			    public BigDecimal PERSONA_ID;

				public BigDecimal getPERSONA_ID () {
					return this.PERSONA_ID;
				}

				public Boolean PERSONA_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONA_IDIsKey(){
				    return false;
				}
				public Integer PERSONA_IDLength(){
				    return 0;
				}
				public Integer PERSONA_IDPrecision(){
				    return 0;
				}
				public String PERSONA_IDDefault(){
				
					return "";
				
				}
				public String PERSONA_IDComment(){
				
				    return "";
				
				}
				public String PERSONA_IDPattern(){
				
					return "";
				
				}
				public String PERSONA_IDOriginalDbColumnName(){
				
					return "PERSONA_ID";
				
				}

				
			    public BigDecimal FICHA_ID;

				public BigDecimal getFICHA_ID () {
					return this.FICHA_ID;
				}

				public Boolean FICHA_IDIsNullable(){
				    return false;
				}
				public Boolean FICHA_IDIsKey(){
				    return false;
				}
				public Integer FICHA_IDLength(){
				    return 0;
				}
				public Integer FICHA_IDPrecision(){
				    return 0;
				}
				public String FICHA_IDDefault(){
				
					return "";
				
				}
				public String FICHA_IDComment(){
				
				    return "";
				
				}
				public String FICHA_IDPattern(){
				
					return "";
				
				}
				public String FICHA_IDOriginalDbColumnName(){
				
					return "FICHA_ID";
				
				}

				
			    public BigDecimal TREGIMENSALUD_ID;

				public BigDecimal getTREGIMENSALUD_ID () {
					return this.TREGIMENSALUD_ID;
				}

				public Boolean TREGIMENSALUD_IDIsNullable(){
				    return true;
				}
				public Boolean TREGIMENSALUD_IDIsKey(){
				    return false;
				}
				public Integer TREGIMENSALUD_IDLength(){
				    return 0;
				}
				public Integer TREGIMENSALUD_IDPrecision(){
				    return 0;
				}
				public String TREGIMENSALUD_IDDefault(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDComment(){
				
				    return "";
				
				}
				public String TREGIMENSALUD_IDPattern(){
				
					return "";
				
				}
				public String TREGIMENSALUD_IDOriginalDbColumnName(){
				
					return "TREGIMENSALUD_ID";
				
				}

				
			    public BigDecimal EPS_ID;

				public BigDecimal getEPS_ID () {
					return this.EPS_ID;
				}

				public Boolean EPS_IDIsNullable(){
				    return true;
				}
				public Boolean EPS_IDIsKey(){
				    return false;
				}
				public Integer EPS_IDLength(){
				    return 0;
				}
				public Integer EPS_IDPrecision(){
				    return 0;
				}
				public String EPS_IDDefault(){
				
					return "";
				
				}
				public String EPS_IDComment(){
				
				    return "";
				
				}
				public String EPS_IDPattern(){
				
					return "";
				
				}
				public String EPS_IDOriginalDbColumnName(){
				
					return "EPS_ID";
				
				}

				
			    public java.util.Date FREGISTRO;

				public java.util.Date getFREGISTRO () {
					return this.FREGISTRO;
				}

				public Boolean FREGISTROIsNullable(){
				    return false;
				}
				public Boolean FREGISTROIsKey(){
				    return false;
				}
				public Integer FREGISTROLength(){
				    return 0;
				}
				public Integer FREGISTROPrecision(){
				    return 0;
				}
				public String FREGISTRODefault(){
				
					return null;
				
				}
				public String FREGISTROComment(){
				
				    return "";
				
				}
				public String FREGISTROPattern(){
				
					return "";
				
				}
				public String FREGISTROOriginalDbColumnName(){
				
					return "FREGISTRO";
				
				}

				
			    public String SIGLA;

				public String getSIGLA () {
					return this.SIGLA;
				}

				public Boolean SIGLAIsNullable(){
				    return true;
				}
				public Boolean SIGLAIsKey(){
				    return false;
				}
				public Integer SIGLALength(){
				    return 0;
				}
				public Integer SIGLAPrecision(){
				    return 0;
				}
				public String SIGLADefault(){
				
					return null;
				
				}
				public String SIGLAComment(){
				
				    return "";
				
				}
				public String SIGLAPattern(){
				
					return "";
				
				}
				public String SIGLAOriginalDbColumnName(){
				
					return "SIGLA";
				
				}

				
			    public String RESPUESTAS;

				public String getRESPUESTAS () {
					return this.RESPUESTAS;
				}

				public Boolean RESPUESTASIsNullable(){
				    return true;
				}
				public Boolean RESPUESTASIsKey(){
				    return false;
				}
				public Integer RESPUESTASLength(){
				    return 0;
				}
				public Integer RESPUESTASPrecision(){
				    return 0;
				}
				public String RESPUESTASDefault(){
				
					return null;
				
				}
				public String RESPUESTASComment(){
				
				    return "";
				
				}
				public String RESPUESTASPattern(){
				
					return "";
				
				}
				public String RESPUESTASOriginalDbColumnName(){
				
					return "RESPUESTAS";
				
				}

				
			    public String RECOMENDACIONES;

				public String getRECOMENDACIONES () {
					return this.RECOMENDACIONES;
				}

				public Boolean RECOMENDACIONESIsNullable(){
				    return true;
				}
				public Boolean RECOMENDACIONESIsKey(){
				    return false;
				}
				public Integer RECOMENDACIONESLength(){
				    return 0;
				}
				public Integer RECOMENDACIONESPrecision(){
				    return 0;
				}
				public String RECOMENDACIONESDefault(){
				
					return null;
				
				}
				public String RECOMENDACIONESComment(){
				
				    return "";
				
				}
				public String RECOMENDACIONESPattern(){
				
					return "";
				
				}
				public String RECOMENDACIONESOriginalDbColumnName(){
				
					return "RECOMENDACIONES";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_FichaFamiliar.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		
						this.PERSONA_ID = (BigDecimal) dis.readObject();
					
						this.FICHA_ID = (BigDecimal) dis.readObject();
					
						this.TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
						this.EPS_ID = (BigDecimal) dis.readObject();
					
					this.FREGISTRO = readDate(dis);
					
					this.SIGLA = readString(dis);
					
					this.RESPUESTAS = readString(dis);
					
					this.RECOMENDACIONES = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FICHA_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.TREGIMENSALUD_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.EPS_ID);
					
					// java.util.Date
				
						writeDate(this.FREGISTRO,dos);
					
					// String
				
						writeString(this.SIGLA,dos);
					
					// String
				
						writeString(this.RESPUESTAS,dos);
					
					// String
				
						writeString(this.RECOMENDACIONES,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONA_ID="+String.valueOf(PERSONA_ID));
		sb.append(",FICHA_ID="+String.valueOf(FICHA_ID));
		sb.append(",TREGIMENSALUD_ID="+String.valueOf(TREGIMENSALUD_ID));
		sb.append(",EPS_ID="+String.valueOf(EPS_ID));
		sb.append(",FREGISTRO="+String.valueOf(FREGISTRO));
		sb.append(",SIGLA="+SIGLA);
		sb.append(",RESPUESTAS="+RESPUESTAS);
		sb.append(",RECOMENDACIONES="+RECOMENDACIONES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tHashInput_5Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class tHashInput_tUnite_2_RunAfterStruct implements routines.system.IPersistableRow<tHashInput_tUnite_2_RunAfterStruct> {
    final static byte[] commonByteArrayLock_REP_INICIO_FichaFamiliar = new byte[0];
    static byte[] commonByteArray_REP_INICIO_FichaFamiliar = new byte[0];

	



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_FichaFamiliar) {

        	try {

        		int length = 0;
		

		

        }

		
			finally {}
		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
        }

			finally {}
		

    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
        }

			finally {}
		

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(tHashInput_tUnite_2_RunAfterStruct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_tUnite_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_tUnite_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

		String currentVirtualComponent = null;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tHashInput_7Process(globalMap);
		tHashInput_8Process(globalMap);
		tHashInput_tUnite_1Process(globalMap);

		row22Struct row22 = new row22Struct();
row24Struct row24 = new row24Struct();
row27Struct row27 = new row27Struct();
out3Struct out3 = new out3Struct();




	
	/**
	 * [tDenormalize_1_DenormalizeOut begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_DenormalizeOut", false);
		start_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tDenormalize_1_DenormalizeOut = 0;
		

class DenormalizeStructtDenormalize_1_DenormalizeOut {
java.util.List<String> RESPUESTAS = new java.util.ArrayList<String>();
}
DenormalizeStructtDenormalize_1_DenormalizeOut denormalize_result_tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>> hash_PERSONA_ID_tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>>();java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>> hash_FICHA_ID_tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>> hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut = null;java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>> hash_EPS_ID_tDenormalize_1_DenormalizeOut = null;java.util.Map<java.util.Date,java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>> hash_FREGISTRO_tDenormalize_1_DenormalizeOut = null;java.util.Map<String,
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>> hash_SIGLA_tDenormalize_1_DenormalizeOut = null;
java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut> hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut = null;

 



/**
 * [tDenormalize_1_DenormalizeOut begin ] stop
 */



	
	/**
	 * [tHashInput_tUnite_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_tUnite_2", false);
		start_Hash.put("tHashInput_tUnite_2", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_tUnite_2";
	
	
		int tos_count_tHashInput_tUnite_2 = 0;
		


int nb_line_tHashInput_tUnite_2 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_tUnite_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<tHashInput_tUnite_2_row22Struct> tHashFile_tHashInput_tUnite_2 = mf_tHashInput_tUnite_2.getAdvancedMemoryHashFile("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_tUnite_2");
if(tHashFile_tHashInput_tUnite_2==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<tHashInput_tUnite_2_row22Struct> iterator_tHashInput_tUnite_2 = tHashFile_tHashInput_tUnite_2.iterator();
while (iterator_tHashInput_tUnite_2.hasNext()) {
    tHashInput_tUnite_2_row22Struct next_tHashInput_tUnite_2 = iterator_tHashInput_tUnite_2.next();

	row22.PERSONA_ID = next_tHashInput_tUnite_2.PERSONA_ID;
	row22.FICHA_ID = next_tHashInput_tUnite_2.FICHA_ID;
	row22.TREGIMENSALUD_ID = next_tHashInput_tUnite_2.TREGIMENSALUD_ID;
	row22.EPS_ID = next_tHashInput_tUnite_2.EPS_ID;
	row22.FREGISTRO = next_tHashInput_tUnite_2.FREGISTRO;
	row22.SIGLA = next_tHashInput_tUnite_2.SIGLA;
	row22.RESPUESTAS = next_tHashInput_tUnite_2.RESPUESTAS;
	row22.RECOMENDACIONES = next_tHashInput_tUnite_2.RECOMENDACIONES;

 



/**
 * [tHashInput_tUnite_2 begin ] stop
 */
	
	/**
	 * [tHashInput_tUnite_2 main ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_2";
	
	

 


	tos_count_tHashInput_tUnite_2++;

/**
 * [tHashInput_tUnite_2 main ] stop
 */
	
	/**
	 * [tHashInput_tUnite_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_2";
	
	

 



/**
 * [tHashInput_tUnite_2 process_data_begin ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					

if(hash_PERSONA_ID_tDenormalize_1_DenormalizeOut.containsKey(row22.PERSONA_ID)){
	hash_FICHA_ID_tDenormalize_1_DenormalizeOut = hash_PERSONA_ID_tDenormalize_1_DenormalizeOut.get(row22.PERSONA_ID);                    
}else{
	hash_FICHA_ID_tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>>();
	hash_PERSONA_ID_tDenormalize_1_DenormalizeOut.put(row22.PERSONA_ID,hash_FICHA_ID_tDenormalize_1_DenormalizeOut);
}
if(hash_FICHA_ID_tDenormalize_1_DenormalizeOut.containsKey(row22.FICHA_ID)){
	hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut = hash_FICHA_ID_tDenormalize_1_DenormalizeOut.get(row22.FICHA_ID);                    
}else{
	hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>>();
	hash_FICHA_ID_tDenormalize_1_DenormalizeOut.put(row22.FICHA_ID,hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut);
}
if(hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut.containsKey(row22.TREGIMENSALUD_ID)){
	hash_EPS_ID_tDenormalize_1_DenormalizeOut = hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut.get(row22.TREGIMENSALUD_ID);                    
}else{
	hash_EPS_ID_tDenormalize_1_DenormalizeOut = new java.util.HashMap<BigDecimal,java.util.Map<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>>();
	hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut.put(row22.TREGIMENSALUD_ID,hash_EPS_ID_tDenormalize_1_DenormalizeOut);
}
if(hash_EPS_ID_tDenormalize_1_DenormalizeOut.containsKey(row22.EPS_ID)){
	hash_FREGISTRO_tDenormalize_1_DenormalizeOut = hash_EPS_ID_tDenormalize_1_DenormalizeOut.get(row22.EPS_ID);                    
}else{
	hash_FREGISTRO_tDenormalize_1_DenormalizeOut = new java.util.HashMap<java.util.Date,java.util.Map<String,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>>();
	hash_EPS_ID_tDenormalize_1_DenormalizeOut.put(row22.EPS_ID,hash_FREGISTRO_tDenormalize_1_DenormalizeOut);
}
if(hash_FREGISTRO_tDenormalize_1_DenormalizeOut.containsKey(row22.FREGISTRO)){
	hash_SIGLA_tDenormalize_1_DenormalizeOut = hash_FREGISTRO_tDenormalize_1_DenormalizeOut.get(row22.FREGISTRO);                    
}else{
	hash_SIGLA_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String,java.util.Map<String, DenormalizeStructtDenormalize_1_DenormalizeOut>>();
	hash_FREGISTRO_tDenormalize_1_DenormalizeOut.put(row22.FREGISTRO,hash_SIGLA_tDenormalize_1_DenormalizeOut);
}
if(hash_SIGLA_tDenormalize_1_DenormalizeOut.containsKey(row22.SIGLA)){
	hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut = hash_SIGLA_tDenormalize_1_DenormalizeOut.get(row22.SIGLA);                    
}else{
	hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut = new java.util.HashMap<String, DenormalizeStructtDenormalize_1_DenormalizeOut>();
	hash_SIGLA_tDenormalize_1_DenormalizeOut.put(row22.SIGLA,hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut);
}
if(hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut.containsKey(row22.RECOMENDACIONES)){
	denormalize_result_tDenormalize_1_DenormalizeOut = hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut.get(row22.RECOMENDACIONES);
	if(!denormalize_result_tDenormalize_1_DenormalizeOut.RESPUESTAS.contains(row22.RESPUESTAS)){
		denormalize_result_tDenormalize_1_DenormalizeOut.RESPUESTAS.add(row22.RESPUESTAS);
	}                  
}else{
	denormalize_result_tDenormalize_1_DenormalizeOut = new DenormalizeStructtDenormalize_1_DenormalizeOut();
	if(!denormalize_result_tDenormalize_1_DenormalizeOut.RESPUESTAS.contains(row22.RESPUESTAS)){
		denormalize_result_tDenormalize_1_DenormalizeOut.RESPUESTAS.add(row22.RESPUESTAS);
	}
	hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut.put(row22.RECOMENDACIONES, denormalize_result_tDenormalize_1_DenormalizeOut);
}

 


	tos_count_tDenormalize_1_DenormalizeOut++;

/**
 * [tDenormalize_1_DenormalizeOut main ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_begin ] stop
 */
	
	/**
	 * [tDenormalize_1_DenormalizeOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut process_data_end ] stop
 */



	
	/**
	 * [tHashInput_tUnite_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_2";
	
	

 



/**
 * [tHashInput_tUnite_2 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_tUnite_2 end ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_2";
	
	
    

		
			nb_line_tHashInput_tUnite_2++;
		}	
    		
    		mf_tHashInput_tUnite_2.clearCache("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_tUnite_2");
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_FichaFamiliar_" + pid +"_tHashOutput_tUnite_2");
	


	globalMap.put("tHashInput_tUnite_2_NB_LINE", nb_line_tHashInput_tUnite_2);       

 

ok_Hash.put("tHashInput_tUnite_2", true);
end_Hash.put("tHashInput_tUnite_2", System.currentTimeMillis());




/**
 * [tHashInput_tUnite_2 end ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	
java.util.List<OnRowsEndStructtDenormalize_1> result_list_tDenormalize_1_DenormalizeOut = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
if (denormalize_result_tDenormalize_1_DenormalizeOut != null) {
StringBuilder sb_tDenormalize_1_DenormalizeOut = null;

//generate result begin
java.util.Iterator<BigDecimal> PERSONA_ID_iterator_tDenormalize_1_DenormalizeOut = hash_PERSONA_ID_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(PERSONA_ID_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_PERSONA_ID_tDenormalize_1_DenormalizeOut = PERSONA_ID_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_FICHA_ID_tDenormalize_1_DenormalizeOut = hash_PERSONA_ID_tDenormalize_1_DenormalizeOut.get(key_PERSONA_ID_tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> FICHA_ID_iterator_tDenormalize_1_DenormalizeOut = hash_FICHA_ID_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(FICHA_ID_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_FICHA_ID_tDenormalize_1_DenormalizeOut = FICHA_ID_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut = hash_FICHA_ID_tDenormalize_1_DenormalizeOut.get(key_FICHA_ID_tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> TREGIMENSALUD_ID_iterator_tDenormalize_1_DenormalizeOut = hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(TREGIMENSALUD_ID_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut = TREGIMENSALUD_ID_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_EPS_ID_tDenormalize_1_DenormalizeOut = hash_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut.get(key_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut);

java.util.Iterator<BigDecimal> EPS_ID_iterator_tDenormalize_1_DenormalizeOut = hash_EPS_ID_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(EPS_ID_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	BigDecimal key_EPS_ID_tDenormalize_1_DenormalizeOut = EPS_ID_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_FREGISTRO_tDenormalize_1_DenormalizeOut = hash_EPS_ID_tDenormalize_1_DenormalizeOut.get(key_EPS_ID_tDenormalize_1_DenormalizeOut);

java.util.Iterator<java.util.Date> FREGISTRO_iterator_tDenormalize_1_DenormalizeOut = hash_FREGISTRO_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(FREGISTRO_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	java.util.Date key_FREGISTRO_tDenormalize_1_DenormalizeOut = FREGISTRO_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_SIGLA_tDenormalize_1_DenormalizeOut = hash_FREGISTRO_tDenormalize_1_DenormalizeOut.get(key_FREGISTRO_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> SIGLA_iterator_tDenormalize_1_DenormalizeOut = hash_SIGLA_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(SIGLA_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_SIGLA_tDenormalize_1_DenormalizeOut = SIGLA_iterator_tDenormalize_1_DenormalizeOut.next();
	
	hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut = hash_SIGLA_tDenormalize_1_DenormalizeOut.get(key_SIGLA_tDenormalize_1_DenormalizeOut);

java.util.Iterator<String> RECOMENDACIONES_iterator_tDenormalize_1_DenormalizeOut = hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut.keySet().iterator();

while(RECOMENDACIONES_iterator_tDenormalize_1_DenormalizeOut.hasNext()){

	String key_RECOMENDACIONES_tDenormalize_1_DenormalizeOut = RECOMENDACIONES_iterator_tDenormalize_1_DenormalizeOut.next();
	
	denormalize_result_tDenormalize_1_DenormalizeOut = hash_RECOMENDACIONES_tDenormalize_1_DenormalizeOut.get(key_RECOMENDACIONES_tDenormalize_1_DenormalizeOut);

	OnRowsEndStructtDenormalize_1 denormalize_row_tDenormalize_1_DenormalizeOut = new OnRowsEndStructtDenormalize_1();
                
	denormalize_row_tDenormalize_1_DenormalizeOut.PERSONA_ID = key_PERSONA_ID_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.FICHA_ID = key_FICHA_ID_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.TREGIMENSALUD_ID = key_TREGIMENSALUD_ID_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.EPS_ID = key_EPS_ID_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.FREGISTRO = key_FREGISTRO_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.SIGLA = key_SIGLA_tDenormalize_1_DenormalizeOut;
	denormalize_row_tDenormalize_1_DenormalizeOut.RECOMENDACIONES = key_RECOMENDACIONES_tDenormalize_1_DenormalizeOut;
	for(String temp_tDenormalize_1_DenormalizeOut : denormalize_result_tDenormalize_1_DenormalizeOut.RESPUESTAS){
	
		if(sb_tDenormalize_1_DenormalizeOut == null){
		
			sb_tDenormalize_1_DenormalizeOut = new StringBuilder();		
			sb_tDenormalize_1_DenormalizeOut.append(temp_tDenormalize_1_DenormalizeOut);
			
			
		}else{		
			sb_tDenormalize_1_DenormalizeOut.append(" ").append(temp_tDenormalize_1_DenormalizeOut);
			
		}
		
	}
	if (sb_tDenormalize_1_DenormalizeOut != null)
		denormalize_row_tDenormalize_1_DenormalizeOut.RESPUESTAS = sb_tDenormalize_1_DenormalizeOut.toString();
	
	sb_tDenormalize_1_DenormalizeOut = null;
	
	//in the deepest end
	
	result_list_tDenormalize_1_DenormalizeOut.add(denormalize_row_tDenormalize_1_DenormalizeOut);

}

}

}

}

}

}

}

}
//generate result end
globalMap.put("tDenormalize_1", result_list_tDenormalize_1_DenormalizeOut);
globalMap.put("tDenormalize_1_DenormalizeOut_NB_LINE", result_list_tDenormalize_1_DenormalizeOut.size()); 

        


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tDenormalize_1_DenormalizeOut", true);
end_Hash.put("tDenormalize_1_DenormalizeOut", System.currentTimeMillis());




/**
 * [tDenormalize_1_DenormalizeOut end ] stop
 */


	
	/**
	 * [tSortRow_1_SortOut begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortOut", false);
		start_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tSortRow_1_SortOut = 0;
		


class Comparablerow24Struct extends row24Struct implements Comparable<Comparablerow24Struct> {
	
	public int compareTo(Comparablerow24Struct other) {

		if(this.PERSONA_ID == null && other.PERSONA_ID != null){
			return -1;
						
		}else if(this.PERSONA_ID != null && other.PERSONA_ID == null){
			return 1;
						
		}else if(this.PERSONA_ID != null && other.PERSONA_ID != null){
			if(!this.PERSONA_ID.equals(other.PERSONA_ID)){
				return this.PERSONA_ID.compareTo(other.PERSONA_ID);
			}
		}
		if(this.FICHA_ID == null && other.FICHA_ID != null){
			return -1;
						
		}else if(this.FICHA_ID != null && other.FICHA_ID == null){
			return 1;
						
		}else if(this.FICHA_ID != null && other.FICHA_ID != null){
			if(!this.FICHA_ID.equals(other.FICHA_ID)){
				return this.FICHA_ID.compareTo(other.FICHA_ID);
			}
		}
		if(this.SIGLA == null && other.SIGLA != null){
			return -1;
						
		}else if(this.SIGLA != null && other.SIGLA == null){
			return 1;
						
		}else if(this.SIGLA != null && other.SIGLA != null){
			if(!this.SIGLA.equals(other.SIGLA)){
				return this.SIGLA.compareTo(other.SIGLA);
			}
		}
		return 0;
	}
}

java.util.List<Comparablerow24Struct> list_tSortRow_1_SortOut = new java.util.ArrayList<Comparablerow24Struct>();


 



/**
 * [tSortRow_1_SortOut begin ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn begin ] start
	 */

	

	
		
		ok_Hash.put("tDenormalize_1_ArrayIn", false);
		start_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
		int tos_count_tDenormalize_1_ArrayIn = 0;
		

        
        int nb_line_tDenormalize_1_ArrayIn = 0;
        java.util.List<OnRowsEndStructtDenormalize_1> list_tDenormalize_1_ArrayIn = (java.util.List<OnRowsEndStructtDenormalize_1>)globalMap.get("tDenormalize_1");
        if(list_tDenormalize_1_ArrayIn == null) {
            list_tDenormalize_1_ArrayIn = new java.util.ArrayList<OnRowsEndStructtDenormalize_1>();
        }        
        for(OnRowsEndStructtDenormalize_1 row_tDenormalize_1_ArrayIn : list_tDenormalize_1_ArrayIn){
        					
    						row24.PERSONA_ID = row_tDenormalize_1_ArrayIn.PERSONA_ID;
    											
    						row24.FICHA_ID = row_tDenormalize_1_ArrayIn.FICHA_ID;
    											
    						row24.TREGIMENSALUD_ID = row_tDenormalize_1_ArrayIn.TREGIMENSALUD_ID;
    											
    						row24.EPS_ID = row_tDenormalize_1_ArrayIn.EPS_ID;
    											
    						row24.FREGISTRO = row_tDenormalize_1_ArrayIn.FREGISTRO;
    											
    						row24.SIGLA = row_tDenormalize_1_ArrayIn.SIGLA;
    											
    						row24.RESPUESTAS = row_tDenormalize_1_ArrayIn.RESPUESTAS;
    											
    						row24.RECOMENDACIONES = row_tDenormalize_1_ArrayIn.RECOMENDACIONES;
    						

 



/**
 * [tDenormalize_1_ArrayIn begin ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 


	tos_count_tDenormalize_1_ArrayIn++;

/**
 * [tDenormalize_1_ArrayIn main ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_begin ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					



	Comparablerow24Struct arrayRowtSortRow_1_SortOut = new Comparablerow24Struct();

	arrayRowtSortRow_1_SortOut.PERSONA_ID = row24.PERSONA_ID;
	arrayRowtSortRow_1_SortOut.FICHA_ID = row24.FICHA_ID;
	arrayRowtSortRow_1_SortOut.TREGIMENSALUD_ID = row24.TREGIMENSALUD_ID;
	arrayRowtSortRow_1_SortOut.EPS_ID = row24.EPS_ID;
	arrayRowtSortRow_1_SortOut.FREGISTRO = row24.FREGISTRO;
	arrayRowtSortRow_1_SortOut.SIGLA = row24.SIGLA;
	arrayRowtSortRow_1_SortOut.RESPUESTAS = row24.RESPUESTAS;
	arrayRowtSortRow_1_SortOut.RECOMENDACIONES = row24.RECOMENDACIONES;	
	list_tSortRow_1_SortOut.add(arrayRowtSortRow_1_SortOut);

 


	tos_count_tSortRow_1_SortOut++;

/**
 * [tSortRow_1_SortOut main ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortOut process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut process_data_end ] stop
 */



	
	/**
	 * [tDenormalize_1_ArrayIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn process_data_end ] stop
 */
	
	/**
	 * [tDenormalize_1_ArrayIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	
	nb_line_tDenormalize_1_ArrayIn++;
}
globalMap.put("tDenormalize_1_ArrayIn_NB_LINE",nb_line_tDenormalize_1_ArrayIn);
 

ok_Hash.put("tDenormalize_1_ArrayIn", true);
end_Hash.put("tDenormalize_1_ArrayIn", System.currentTimeMillis());




/**
 * [tDenormalize_1_ArrayIn end ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

row24Struct[] array_tSortRow_1_SortOut = list_tSortRow_1_SortOut.toArray(new Comparablerow24Struct[0]);

java.util.Arrays.sort(array_tSortRow_1_SortOut);

globalMap.put("tSortRow_1",array_tSortRow_1_SortOut);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tSortRow_1_SortOut", true);
end_Hash.put("tSortRow_1_SortOut", System.currentTimeMillis());




/**
 * [tSortRow_1_SortOut end ] stop
 */


	
	/**
	 * [tMap_3_TMAP_OUT begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3_TMAP_OUT", false);
		start_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_OUT";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row27");
					}
				
		int tos_count_tMap_3_TMAP_OUT = 0;
		





// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct> tHash_Lookup_row28 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row28Struct>) 
					globalMap.get( "tHash_Lookup_row28" ))
					;					
					
	

row28Struct row28HashKey = new row28Struct();
row28Struct row28Default = new row28Struct();

		org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct> tHash_Lookup_row29 = 
			(org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct>) 
				((org.talend.designer.components.lookup.persistent.PersistentSortedLookupManager<row29Struct>) 
					 globalMap.get( "tHash_Lookup_row29" ))
					;
	

row29Struct row29HashKey = new row29Struct();
row29Struct row29Default = new row29Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3_TMAP_OUT__Struct  {
}
Var__tMap_3_TMAP_OUT__Struct Var__tMap_3_TMAP_OUT = new Var__tMap_3_TMAP_OUT__Struct();
// ###############################

// ###############################
// # Outputs initialization
// ###############################


	
		class SortableRow_tMap_3_2 implements Comparable<SortableRow_tMap_3_2>, routines.system.IPersistableRow<SortableRow_tMap_3_2> { // G_TM_B_001 

			boolean is__rejectedInnerJoin;

		BigDecimal exprKey_row29__ID;
                            	
			//row28
			BigDecimal row27__PERSONA_ID;BigDecimal row27__FICHA_ID;BigDecimal row27__TREGIMENSALUD_ID;BigDecimal row27__EPS_ID;java.util.Date row27__FREGISTRO;String row27__SIGLA;String row27__RESPUESTAS;String row27__RECOMENDACIONES;BigDecimal row28__ID;String row28__NOMBRE;
		
		
		
		         public void fillFrom( row27Struct row27,  row28Struct row28,  BigDecimal exprKey_row29__ID) {

					
	                			this.row27__PERSONA_ID = row27.PERSONA_ID;
	                		
	                			this.row27__FICHA_ID = row27.FICHA_ID;
	                		
	                			this.row27__TREGIMENSALUD_ID = row27.TREGIMENSALUD_ID;
	                		
	                			this.row27__EPS_ID = row27.EPS_ID;
	                		
	                			this.row27__FREGISTRO = row27.FREGISTRO;
	                		
	                			this.row27__SIGLA = row27.SIGLA;
	                		
	                			this.row27__RESPUESTAS = row27.RESPUESTAS;
	                		
	                			this.row27__RECOMENDACIONES = row27.RECOMENDACIONES;
	                		
	                			this.row28__ID = row28.ID;
	                		
	                			this.row28__NOMBRE = row28.NOMBRE;
	                		
							this.exprKey_row29__ID = exprKey_row29__ID;
						
                }

                public void copyDataTo(row27Struct row27, row28Struct row28) {

					row27.PERSONA_ID = this.row27__PERSONA_ID;
	                	row27.FICHA_ID = this.row27__FICHA_ID;
	                	row27.TREGIMENSALUD_ID = this.row27__TREGIMENSALUD_ID;
	                	row27.EPS_ID = this.row27__EPS_ID;
	                	row27.FREGISTRO = this.row27__FREGISTRO;
	                	row27.SIGLA = this.row27__SIGLA;
	                	row27.RESPUESTAS = this.row27__RESPUESTAS;
	                	row27.RECOMENDACIONES = this.row27__RECOMENDACIONES;
	                	row28.ID = this.row28__ID;
	                	row28.NOMBRE = this.row28__NOMBRE;
	                	
                }

		
    public String toString() {
		
		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		
						sb.append("row27__PERSONA_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row27__PERSONA_ID));
					
							sb.append(", ");
						
						sb.append("row27__FICHA_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row27__FICHA_ID));
					
							sb.append(", ");
						
						sb.append("row27__TREGIMENSALUD_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row27__TREGIMENSALUD_ID));
					
							sb.append(", ");
						
						sb.append("row27__EPS_ID");
						sb.append("=");
						sb.append(String.valueOf(this.row27__EPS_ID));
					
							sb.append(", ");
						
						sb.append("row27__FREGISTRO");
						sb.append("=");
						sb.append(String.valueOf(this.row27__FREGISTRO));
					
							sb.append(", ");
						
						sb.append("row27__SIGLA");
						sb.append("=");
						sb.append(String.valueOf(this.row27__SIGLA));
					
							sb.append(", ");
						
						sb.append("row27__RESPUESTAS");
						sb.append("=");
						sb.append(String.valueOf(this.row27__RESPUESTAS));
					
							sb.append(", ");
						
						sb.append("row27__RECOMENDACIONES");
						sb.append("=");
						sb.append(String.valueOf(this.row27__RECOMENDACIONES));
					
							sb.append(", ");
						
						sb.append("row28__ID");
						sb.append("=");
						sb.append(String.valueOf(this.row28__ID));
					
							sb.append(", ");
						
						sb.append("row28__NOMBRE");
						sb.append("=");
						sb.append(String.valueOf(this.row28__NOMBRE));
					
	    sb.append("]");
	    
	    return sb.toString();
    }

		
		
		
		        public int compareTo(SortableRow_tMap_3_2 other) {

                    int returnValue = 0;
                    
                    
                    	returnValue = checkNullsAndCompare(this.exprKey_row29__ID, other.exprKey_row29__ID);
                    	if (returnValue != 0) {
	                        return returnValue;
                    	}
                    

                    return returnValue;
                }

                private int checkNullsAndCompare(Object object1, Object object2) {
                    int returnValue = 0;
                    if (object1 instanceof Comparable && object2 instanceof Comparable) {
                        returnValue = ((Comparable) object1).compareTo(object2);
                    } else if (object1 != null && object2 != null) {
                        returnValue = compareStrings(object1.toString(), object2
                                .toString());
                    } else if (object1 == null && object2 != null) {
                        returnValue = 1;
                    } else if (object1 != null && object2 == null) {
                        returnValue = -1;
                    } else {
                        returnValue = 0;
                    }

                    return returnValue;
                }

                private int compareStrings(String string1, String string2) {
                    return string1.compareTo(string2);
                }


		
    public void readData(ObjectInputStream dis) {

		synchronized(row28Struct.commonByteArrayLock_REP_INICIO_FichaFamiliar) {

	        try {
            
				int length = 0;
			
				this.is__rejectedInnerJoin = dis.readBoolean();
			
		
						this.row27__PERSONA_ID = (BigDecimal) dis.readObject();
					
					
						this.row27__FICHA_ID = (BigDecimal) dis.readObject();
					
					
						this.row27__TREGIMENSALUD_ID = (BigDecimal) dis.readObject();
					
					
						this.row27__EPS_ID = (BigDecimal) dis.readObject();
					
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.row27__FREGISTRO = null;
           				} else {
           			    	this.row27__FREGISTRO = new Date(dis.readLong());
           				}
					
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.row27__SIGLA = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				dis.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row27__SIGLA = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.row27__RESPUESTAS = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				dis.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row27__RESPUESTAS = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.row27__RECOMENDACIONES = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				dis.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row27__RECOMENDACIONES = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
						this.row28__ID = (BigDecimal) dis.readObject();
					
					
			            length = dis.readInt();
           				if (length == -1) {
           	    			this.row28__NOMBRE = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				dis.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row28__NOMBRE = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
           				this.exprKey_row29__ID = (BigDecimal) dis.readObject();
					
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }
        
      } 
    }
    
    
    public void readData(org.jboss.marshalling.Unmarshaller objectIn) {

		synchronized(row28Struct.commonByteArrayLock_REP_INICIO_FichaFamiliar) {

	        try {
            
				int length = 0;
			
				this.is__rejectedInnerJoin = objectIn.readBoolean();
			
		
						this.row27__PERSONA_ID = (BigDecimal) objectIn.readObject();
					
						this.row27__FICHA_ID = (BigDecimal) objectIn.readObject();
					
						this.row27__TREGIMENSALUD_ID = (BigDecimal) objectIn.readObject();
					
						this.row27__EPS_ID = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readByte();
           				if (length == -1) {
           	    			this.row27__FREGISTRO = null;
           				} else {
           			    	this.row27__FREGISTRO = new Date(objectIn.readLong());
           				}
					
			            length = objectIn.readInt();
           				if (length == -1) {
           	    			this.row27__SIGLA = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				objectIn.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row27__SIGLA = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
			            length = objectIn.readInt();
           				if (length == -1) {
           	    			this.row27__RESPUESTAS = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				objectIn.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row27__RESPUESTAS = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
			            length = objectIn.readInt();
           				if (length == -1) {
           	    			this.row27__RECOMENDACIONES = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				objectIn.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row27__RECOMENDACIONES = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
						this.row28__ID = (BigDecimal) objectIn.readObject();
					
			            length = objectIn.readInt();
           				if (length == -1) {
           	    			this.row28__NOMBRE = null;
           				} else {
           					if(length > row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length) {
           						if(length < 1024 && row28Struct.commonByteArray_REP_INICIO_FichaFamiliar.length == 0) {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[1024];
           						} else {
	               					row28Struct.commonByteArray_REP_INICIO_FichaFamiliar = new byte[2 * length];
	               				}
           					}
               				objectIn.readFully(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length);
               				this.row28__NOMBRE = new String(row28Struct.commonByteArray_REP_INICIO_FichaFamiliar, 0, length, utf8Charset);
           				}
					
           				this.exprKey_row29__ID = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }
        
      } 
    }

    public void writeData(ObjectOutputStream dos) {
        try {

           	dos.writeBoolean(this.is__rejectedInnerJoin);

		
       			    	dos.writeObject(this.row27__PERSONA_ID);
					
       			    	dos.writeObject(this.row27__FICHA_ID);
					
       			    	dos.writeObject(this.row27__TREGIMENSALUD_ID);
					
       			    	dos.writeObject(this.row27__EPS_ID);
					
						if(this.row27__FREGISTRO == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.row27__FREGISTRO.getTime());
		            	}
					
						if(this.row27__SIGLA == null) {
			                dos.writeInt(-1);
						} else {
			                byte[] byteArray = this.row27__SIGLA.getBytes(utf8Charset);
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					
						if(this.row27__RESPUESTAS == null) {
			                dos.writeInt(-1);
						} else {
			                byte[] byteArray = this.row27__RESPUESTAS.getBytes(utf8Charset);
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					
						if(this.row27__RECOMENDACIONES == null) {
			                dos.writeInt(-1);
						} else {
			                byte[] byteArray = this.row27__RECOMENDACIONES.getBytes(utf8Charset);
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					
       			    	dos.writeObject(this.row28__ID);
					
						if(this.row28__NOMBRE == null) {
			                dos.writeInt(-1);
						} else {
			                byte[] byteArray = this.row28__NOMBRE.getBytes(utf8Charset);
           			    	dos.writeInt(byteArray.length);
               				dos.write(byteArray);
		            	}
					
       			    	dos.writeObject(this.exprKey_row29__ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }
    }
    
    public void writeData(org.jboss.marshalling.Marshaller objectOut) {
        try {

           	objectOut.writeBoolean(this.is__rejectedInnerJoin);

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.row27__PERSONA_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.row27__FICHA_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.row27__TREGIMENSALUD_ID);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.row27__EPS_ID);
					
						if(this.row27__FREGISTRO == null) {
			                objectOut.writeByte(-1);
						} else {
               				objectOut.writeByte(0);
           			    	objectOut.writeLong(this.row27__FREGISTRO.getTime());
		            	}
					
						if(this.row27__SIGLA == null) {
			                objectOut.writeInt(-1);
						} else {
			                byte[] byteArray = this.row27__SIGLA.getBytes(utf8Charset);
           			    	objectOut.writeInt(byteArray.length);
               				objectOut.write(byteArray);
		            	}
					
						if(this.row27__RESPUESTAS == null) {
			                objectOut.writeInt(-1);
						} else {
			                byte[] byteArray = this.row27__RESPUESTAS.getBytes(utf8Charset);
           			    	objectOut.writeInt(byteArray.length);
               				objectOut.write(byteArray);
		            	}
					
						if(this.row27__RECOMENDACIONES == null) {
			                objectOut.writeInt(-1);
						} else {
			                byte[] byteArray = this.row27__RECOMENDACIONES.getBytes(utf8Charset);
           			    	objectOut.writeInt(byteArray.length);
               				objectOut.write(byteArray);
		            	}
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.row28__ID);
					
						if(this.row28__NOMBRE == null) {
			                objectOut.writeInt(-1);
						} else {
			                byte[] byteArray = this.row28__NOMBRE.getBytes(utf8Charset);
           			    	objectOut.writeInt(byteArray.length);
               				objectOut.write(byteArray);
		            	}
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.exprKey_row29__ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }
    }
    
    public boolean supportJboss(){
    	return true;
    }
		
		
		
		} // G_TM_B_001
	
	
	

	org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_2> fsi_tMap_3_2 = 
		new org.talend.designer.components.lookup.persistent.PersistentRowSorterIterator<SortableRow_tMap_3_2>(
			"D:/ETL/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/TOS_ESB-Studio-20240722_1936-V8.8.8SNAPSHOT/workspace/REP_INICIO/temp" + "/"+ jobName +"_tMapData_" + Thread.currentThread().getId() + "_" + pid +"_tMap_3_2", 2000000) {
			public SortableRow_tMap_3_2 createRowInstance() {
				return new SortableRow_tMap_3_2();
			}
		};
	
	fsi_tMap_3_2.initPut();

		
		        
        



        




 



/**
 * [tMap_3_TMAP_OUT begin ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn begin ] start
	 */

	

	
		
		ok_Hash.put("tSortRow_1_SortIn", false);
		start_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	
		int tos_count_tSortRow_1_SortIn = 0;
		


row24Struct[] array_tSortRow_1_SortIn = (row24Struct[]) globalMap.remove("tSortRow_1");

int nb_line_tSortRow_1_SortIn = 0;

row24Struct current_tSortRow_1_SortIn = null;

for(int i_tSortRow_1_SortIn = 0; i_tSortRow_1_SortIn < array_tSortRow_1_SortIn.length; i_tSortRow_1_SortIn++){
	current_tSortRow_1_SortIn = array_tSortRow_1_SortIn[i_tSortRow_1_SortIn];
	row27.PERSONA_ID = current_tSortRow_1_SortIn.PERSONA_ID;
	row27.FICHA_ID = current_tSortRow_1_SortIn.FICHA_ID;
	row27.TREGIMENSALUD_ID = current_tSortRow_1_SortIn.TREGIMENSALUD_ID;
	row27.EPS_ID = current_tSortRow_1_SortIn.EPS_ID;
	row27.FREGISTRO = current_tSortRow_1_SortIn.FREGISTRO;
	row27.SIGLA = current_tSortRow_1_SortIn.SIGLA;
	row27.RESPUESTAS = current_tSortRow_1_SortIn.RESPUESTAS;
	row27.RECOMENDACIONES = current_tSortRow_1_SortIn.RECOMENDACIONES;
	// increase number of line sorted
	nb_line_tSortRow_1_SortIn++;

 



/**
 * [tSortRow_1_SortIn begin ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn main ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 


	tos_count_tSortRow_1_SortIn++;

/**
 * [tSortRow_1_SortIn main ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_begin ] stop
 */

	
	/**
	 * [tMap_3_TMAP_OUT main ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_OUT";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row27"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;
		
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3_TMAP_OUT = false;
		boolean mainRowRejected_tMap_3_TMAP_OUT = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow28 = false;
       		  	    	
       		  	    	
 							row28Struct row28ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3_TMAP_OUT) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3_TMAP_OUT = false;
								
                        		    		    row28HashKey.ID = row27.TREGIMENSALUD_ID ;
                        		    		

								
		                        	row28HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row28.lookup( row28HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row28.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3_TMAP_OUT = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row28 != null && tHash_Lookup_row28.getCount(row28HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row28' and it contains more one result from keys :  row28.ID = '" + row28HashKey.ID + "'");
								} // G 071
							

							
							row28Struct row28 = null;
							
                    		  	 
							   
                    		  	 
	       		  	    	row28Struct fromLookup_row28 = null;
							row28 = row28Default;
										 
							
								 
							
							
								if (tHash_Lookup_row28 !=null && tHash_Lookup_row28.hasNext()) { // G 099
								
							
								
								fromLookup_row28 = tHash_Lookup_row28.next();

							
							
								} // G 099
							
							

							if(fromLookup_row28 != null) {
								row28 = fromLookup_row28;
							}
							
							
							
			  							
								
	                    		  	
		                    
								
												BigDecimal exprKey_row29__ID = null;
								
											
		            					if(!rejectedInnerJoin_tMap_3_TMAP_OUT) { // G_TM_M_255
		            				
					            					exprKey_row29__ID = row27.EPS_ID ;
            										
                    					} // G_TM_M_255
                    				

								SortableRow_tMap_3_2 rsc_tMap_3_2 = new SortableRow_tMap_3_2();

								rsc_tMap_3_2.fillFrom( row27,  row28,  exprKey_row29__ID);

								rsc_tMap_3_2.is__rejectedInnerJoin = rejectedInnerJoin_tMap_3_TMAP_OUT;
						
								rejectedInnerJoin_tMap_3_TMAP_OUT = false;

								// Sort and store in KeyFile(s) and DataFile(s)
								fsi_tMap_3_2.put(rsc_tMap_3_2);
					
								
	            	
	           	
	            	
	            // ###############################





 


	tos_count_tMap_3_TMAP_OUT++;

/**
 * [tMap_3_TMAP_OUT main ] stop
 */
	
	/**
	 * [tMap_3_TMAP_OUT process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_OUT";
	
	

 



/**
 * [tMap_3_TMAP_OUT process_data_begin ] stop
 */
	
	/**
	 * [tMap_3_TMAP_OUT process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_OUT";
	
	

 



/**
 * [tMap_3_TMAP_OUT process_data_end ] stop
 */



	
	/**
	 * [tSortRow_1_SortIn process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn process_data_end ] stop
 */
	
	/**
	 * [tSortRow_1_SortIn end ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	


}

globalMap.put("tSortRow_1_SortIn_NB_LINE",nb_line_tSortRow_1_SortIn);

 

ok_Hash.put("tSortRow_1_SortIn", true);
end_Hash.put("tSortRow_1_SortIn", System.currentTimeMillis());




/**
 * [tSortRow_1_SortIn end ] stop
 */

	
	/**
	 * [tMap_3_TMAP_OUT end ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_OUT";
	
	



// ###############################
// # Lookup hashes releasing
// ###############################      
	
	
	
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row27");
			  	}
			  	
 

ok_Hash.put("tMap_3_TMAP_OUT", true);
end_Hash.put("tMap_3_TMAP_OUT", System.currentTimeMillis());




/**
 * [tMap_3_TMAP_OUT end ] stop
 */


	
	/**
	 * [tPivotToColumnsDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPivotToColumnsDelimited_1", false);
		start_Hash.put("tPivotToColumnsDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tPivotToColumnsDelimited_1 = 0;
		


int nb_line_tPivotToColumnsDelimited_1 = 0;
resourceMap.put("nb_line_tPivotToColumnsDelimited_1", nb_line_tPivotToColumnsDelimited_1); 
int nb_line_out_tPivotToColumnsDelimited_1 = 0;

String fileName_tPivotToColumnsDelimited_1 = (new java.io.File(context.RutaSistema+"/FFA/tempFFA.csv")).getAbsolutePath().replace("\\","/");
resourceMap.put("fileName_tPivotToColumnsDelimited_1", fileName_tPivotToColumnsDelimited_1); 
String fullName_tPivotToColumnsDelimited_1 = null;
String extension_tPivotToColumnsDelimited_1 = null;
String directory_tPivotToColumnsDelimited_1 = null;
if((fileName_tPivotToColumnsDelimited_1.indexOf("/") != -1)) {
    if(fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") < fileName_tPivotToColumnsDelimited_1.lastIndexOf("/")) {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
        extension_tPivotToColumnsDelimited_1 = "";
    } else {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0, fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
        extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
    }           
    directory_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0, fileName_tPivotToColumnsDelimited_1.lastIndexOf("/"));            
} else {
    if(fileName_tPivotToColumnsDelimited_1.lastIndexOf(".") != -1) {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(0, fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
        extension_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1.substring(fileName_tPivotToColumnsDelimited_1.lastIndexOf("."));
    } else {
        fullName_tPivotToColumnsDelimited_1 = fileName_tPivotToColumnsDelimited_1;
        extension_tPivotToColumnsDelimited_1 = "";
    }
    directory_tPivotToColumnsDelimited_1 = "";
}
	 //create directory only if not exists
	if(directory_tPivotToColumnsDelimited_1 != null && directory_tPivotToColumnsDelimited_1.trim().length() != 0) {
	    java.io.File dir_tPivotToColumnsDelimited_1 = new java.io.File(directory_tPivotToColumnsDelimited_1);
	    if(!dir_tPivotToColumnsDelimited_1.exists()) {
		dir_tPivotToColumnsDelimited_1.mkdirs();
	    }
	}
	java.io.FileOutputStream fos_tPivotToColumnsDelimited_1 = null;
    java.io.OutputStreamWriter osw_tPivotToColumnsDelimited_1 = null;
    java.io.BufferedWriter outtPivotToColumnsDelimited_1 = null;
	outtPivotToColumnsDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(new java.io.FileOutputStream(fileName_tPivotToColumnsDelimited_1, false),"UTF-8"));
	resourceMap.put("outtPivotToColumnsDelimited_1", outtPivotToColumnsDelimited_1);


java.io.File filetPivotToColumnsDelimited_1 = new java.io.File(fileName_tPivotToColumnsDelimited_1);

boolean pivot_ExiststPivotToColumnsDelimited_1 = false;

StringBuilder pivot_KeytPivotToColumnsDelimited_1 = new StringBuilder();

java.util.List<String> pivot_KeystPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();

boolean group_ExiststPivotToColumnsDelimited_1 = false;

StringBuilder group_KeytPivotToColumnsDelimited_1 = new StringBuilder();

java.util.Set<java.util.List<String>> group_KeystPivotToColumnsDelimited_1 = new java.util.LinkedHashSet<java.util.List<String>>();

java.util.List<String> gKvaluetPivotToColumnsDelimited_1 = null;

java.util.List<String> aggValuestPivotToColumnsDelimited_1 = null;

java.util.Map<java.util.List<String>,java.util.List<String>> aggregationtPivotToColumnsDelimited_1 = new java.util.HashMap<java.util.List<String>,java.util.List<String>>();


 



/**
 * [tPivotToColumnsDelimited_1 begin ] stop
 */



	
	/**
	 * [tMap_3_TMAP_IN begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_3_TMAP_IN", false);
		start_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());
		
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_IN";
	
	
		int tos_count_tMap_3_TMAP_IN = 0;
		




// ###############################
// # Lookup's keys initialization
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_3_TMAP_IN__Struct  {
}
Var__tMap_3_TMAP_IN__Struct Var__tMap_3_TMAP_IN = new Var__tMap_3_TMAP_IN__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        




 



/**
 * [tMap_3_TMAP_IN begin ] stop
 */
	
	/**
	 * [tMap_3_TMAP_IN main ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_IN";
	
	


		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;
		
			if(row27 == null) {
				row27 = new row27Struct();
			}
			
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_3_TMAP_IN = false;
		boolean mainRowRejected_tMap_3_TMAP_IN = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row28" 
				///////////////////////////////////////////////


				
				 
	            	
	            	fsi_tMap_3_2.endPut();
	            	
				

				///////////////////////////////////////////////
				// Starting Lookup Table "row29" 
				///////////////////////////////////////////////


				
								
				SortableRow_tMap_3_2 rsc_tMap_3_2;
			
				
					tHash_Lookup_row29.initGet();
				
				

				fsi_tMap_3_2.initGet();

				

	       			//row28Struct row28 = new row28Struct();

	       			 row28Struct row28 = new row28Struct();
	       			
					

				//TEST firstLookupIsPersistentSorted=false isFirstPersistentSortedTable=true

				rejectedInnerJoin_tMap_3_TMAP_IN = false;
			
	           	while (fsi_tMap_3_2.hasNext()) { // G_TM_M_250 loop "2"
				

								
									 // CALL close loop of lookup '2'
									

					
				
				
					rsc_tMap_3_2 = (SortableRow_tMap_3_2) fsi_tMap_3_2.next();
               		rsc_tMap_3_2.copyDataTo( row27,  row28);
               		
               		rejectedInnerJoin_tMap_3_TMAP_IN = rsc_tMap_3_2.is__rejectedInnerJoin;
               		
			
                            
 					    boolean forceLooprow29 = false;
       		  	    	
       		  	    	
 							row29Struct row29ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_3_TMAP_IN) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_3_TMAP_IN = false;
								
                        		    		    row29HashKey.ID = rsc_tMap_3_2.exprKey_row29__ID;
                        		    		

								
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row29.lookup( row29HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row29.hasNext()) { // G_TM_M_090

  								
		  				
	  								
			  							rejectedInnerJoin_tMap_3_TMAP_IN = true;
	  								
						
									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							

							
							row29Struct row29 = null;
							
                    		  	 
							   
                    		  	 
	       		  	    	row29Struct fromLookup_row29 = null;
							row29 = row29Default;
										 
							
								 
							
							
								if (tHash_Lookup_row29 !=null && tHash_Lookup_row29.hasNext()) { // G 099
								
							
								
								fromLookup_row29 = tHash_Lookup_row29.next();

							
							
								} // G 099
							
							

							if(fromLookup_row29 != null) {
								row29 = fromLookup_row29;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_3_TMAP_IN__Struct Var = Var__tMap_3_TMAP_IN;// ###############################
        // ###############################
        // # Output tables

out3 = null;

if(!rejectedInnerJoin_tMap_3_TMAP_IN ) {

// # Output table : 'out3'
out3_tmp.PERSONA_ID = row27.PERSONA_ID ;
out3_tmp.FICHA_ID = row27.FICHA_ID ;
out3_tmp.REGIMEN_SALUD = row28.NOMBRE ;
out3_tmp.EPS = row29.DESCRIPCION ;
out3_tmp.FREGISTRO = row27.FREGISTRO ;
out3_tmp.SIGLA = row27.SIGLA ;
out3_tmp.RESPUESTAS = row27.RESPUESTAS ;
out3_tmp.RECOMENDACIONES = row27.RECOMENDACIONES ;
out3 = out3_tmp;
}  // closing inner join bracket (2)
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_3_TMAP_IN = false;







 


	tos_count_tMap_3_TMAP_IN++;

/**
 * [tMap_3_TMAP_IN main ] stop
 */
	
	/**
	 * [tMap_3_TMAP_IN process_data_begin ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_IN";
	
	

 



/**
 * [tMap_3_TMAP_IN process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tPivotToColumnsDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					
                   
    //pivot key  
    pivot_ExiststPivotToColumnsDelimited_1 = false;
    
    int pivotNumtPivotToColumnsDelimited_1 = 0;
    
    for(int i = 0;i<pivot_KeystPivotToColumnsDelimited_1.size();i++){

	 		if(pivot_KeystPivotToColumnsDelimited_1.get(i).equals(out3.SIGLA)){
	            pivot_ExiststPivotToColumnsDelimited_1 = true;
	            
	            pivotNumtPivotToColumnsDelimited_1 = i + 1;
	            
	            break;
            
        	 }
    }
    
    if(!pivot_ExiststPivotToColumnsDelimited_1){
        
        pivot_KeytPivotToColumnsDelimited_1.delete(0, pivot_KeytPivotToColumnsDelimited_1.length()); 
            pivot_KeystPivotToColumnsDelimited_1.add(pivot_KeytPivotToColumnsDelimited_1.append(out3.SIGLA).toString());  

        pivotNumtPivotToColumnsDelimited_1 = pivot_KeystPivotToColumnsDelimited_1.size();
        
    }

    
    //group key
    group_ExiststPivotToColumnsDelimited_1 = false;
    
    gKvaluetPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();
    
    group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
        
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(out3.PERSONA_ID).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(out3.FICHA_ID).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(out3.REGIMEN_SALUD).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(out3.EPS).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
			
				gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(FormatterUtils.format_Date(out3.FREGISTRO, null)).toString());
			
		
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
					
        		gKvaluetPivotToColumnsDelimited_1.add(group_KeytPivotToColumnsDelimited_1.append(out3.RECOMENDACIONES).toString());
        
        
        group_KeytPivotToColumnsDelimited_1.delete(0,group_KeytPivotToColumnsDelimited_1.length());
    
	if (group_KeystPivotToColumnsDelimited_1.contains(gKvaluetPivotToColumnsDelimited_1)) {
                     group_ExiststPivotToColumnsDelimited_1 = true;
	}
	

    if(!group_ExiststPivotToColumnsDelimited_1){
        
        group_KeytPivotToColumnsDelimited_1.delete(0, group_KeytPivotToColumnsDelimited_1.length());
        
        group_KeystPivotToColumnsDelimited_1.add(gKvaluetPivotToColumnsDelimited_1);
        
		aggValuestPivotToColumnsDelimited_1 = new java.util.ArrayList<String>();
        
        for(int i = 0; i<pivotNumtPivotToColumnsDelimited_1-1; i++)
            
            aggValuestPivotToColumnsDelimited_1.add("");
        
        
        		aggValuestPivotToColumnsDelimited_1.add(String.valueOf(out3.RESPUESTAS));
        		aggregationtPivotToColumnsDelimited_1.put(gKvaluetPivotToColumnsDelimited_1,aggValuestPivotToColumnsDelimited_1);
        	
    }else{

        java.util.List<String> aggStrtPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1.get(gKvaluetPivotToColumnsDelimited_1);
        
        int aggSizetPivotToColumnsDelimited_1 = aggStrtPivotToColumnsDelimited_1.size();
        if(aggSizetPivotToColumnsDelimited_1 < pivotNumtPivotToColumnsDelimited_1){
            

    		for(int i = 0 ; i<pivotNumtPivotToColumnsDelimited_1 - aggSizetPivotToColumnsDelimited_1-1; i++){
                    
				aggStrtPivotToColumnsDelimited_1.add("");
            
            }    
               
            
			aggStrtPivotToColumnsDelimited_1.add(String.valueOf(out3.RESPUESTAS));
            
  
        }else{
            
            //step1: get the index of the pivot
            int pivotIndextPivotToColumnsDelimited_1 = 0 ;
            
            for(int i = 0; i<pivot_KeystPivotToColumnsDelimited_1.size(); i++){

	 		if(pivot_KeystPivotToColumnsDelimited_1.get(i).equals(out3.SIGLA)){
                    pivotIndextPivotToColumnsDelimited_1 = i;
                    
                    break;
                    
                }
                
            }
            
            //step2: process the splitted data according to function
            
 				if (!("").equals(aggStrtPivotToColumnsDelimited_1.get(pivotIndextPivotToColumnsDelimited_1))) {
 			
	            
	                if(Float.parseFloat(String.valueOf(out3.RESPUESTAS))>Float.parseFloat(aggStrtPivotToColumnsDelimited_1.get(pivotIndextPivotToColumnsDelimited_1)))
	                    aggStrtPivotToColumnsDelimited_1.set(pivotIndextPivotToColumnsDelimited_1, String.valueOf(out3.RESPUESTAS));
            
            	} else {
            		aggStrtPivotToColumnsDelimited_1.set(pivotIndextPivotToColumnsDelimited_1, String.valueOf(out3.RESPUESTAS));
            	} 
            
        }
        
        } 

    nb_line_tPivotToColumnsDelimited_1++;
    resourceMap.put("nb_line_tPivotToColumnsDelimited_1", nb_line_tPivotToColumnsDelimited_1); 
   

 


	tos_count_tPivotToColumnsDelimited_1++;

/**
 * [tPivotToColumnsDelimited_1 main ] stop
 */
	
	/**
	 * [tPivotToColumnsDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	

 



/**
 * [tPivotToColumnsDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tPivotToColumnsDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	

 



/**
 * [tPivotToColumnsDelimited_1 process_data_end ] stop
 */

} // End of branch "out3"



	
		} // G_TM_M_250 close loop read file data '2'
	
	
	/**
	 * [tMap_3_TMAP_IN process_data_end ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_IN";
	
	

 



/**
 * [tMap_3_TMAP_IN process_data_end ] stop
 */
	
	/**
	 * [tMap_3_TMAP_IN end ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_IN";
	
	



// ###############################
// # Lookup hashes releasing
					fsi_tMap_3_2.endGet();
				
					if(tHash_Lookup_row28 != null) {
						tHash_Lookup_row28.endGet();
					}
					globalMap.remove( "tHash_Lookup_row28" );

					
					
				
					if(tHash_Lookup_row29 != null) {
						tHash_Lookup_row29.endGet();
					}
					globalMap.remove( "tHash_Lookup_row29" );

					
					
				
// ###############################      


 

ok_Hash.put("tMap_3_TMAP_IN", true);
end_Hash.put("tMap_3_TMAP_IN", System.currentTimeMillis());




/**
 * [tMap_3_TMAP_IN end ] stop
 */

	
	/**
	 * [tPivotToColumnsDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	


		nb_line_out_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1.size();

		
  			////////////////////////////////  Delimited  /////////  
			
			    outtPivotToColumnsDelimited_1.write("PERSONA_ID");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("FICHA_ID");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("REGIMEN_SALUD");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("EPS");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("FREGISTRO");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
			    outtPivotToColumnsDelimited_1.write("RECOMENDACIONES");
			    
			    outtPivotToColumnsDelimited_1.write(";");
			
    
			for(int i = 0; i < pivot_KeystPivotToColumnsDelimited_1.size(); i++) {
				outtPivotToColumnsDelimited_1.write(pivot_KeystPivotToColumnsDelimited_1.get(i));
				if(i == pivot_KeystPivotToColumnsDelimited_1.size()-1) {
					break;
				}
				outtPivotToColumnsDelimited_1.write(";");
			}
    
		    outtPivotToColumnsDelimited_1.write("\n");
		
			java.util.Iterator<List<String>> iterator_tPivotToColumnsDelimited_1 = group_KeystPivotToColumnsDelimited_1.iterator();
		    
			
		    while(iterator_tPivotToColumnsDelimited_1.hasNext()) {
				List<String> next = iterator_tPivotToColumnsDelimited_1.next();
		        for(int j = 0; j < next.size(); j++) {
					outtPivotToColumnsDelimited_1.write(next.get(j));
					outtPivotToColumnsDelimited_1.write(";");
				}
		        
		        java.util.List<String> aggOuttPivotToColumnsDelimited_1 = aggregationtPivotToColumnsDelimited_1.get(next);
		
		        int gaptPivotToColumnsDelimited_1 = aggOuttPivotToColumnsDelimited_1.size() - pivot_KeystPivotToColumnsDelimited_1.size();
		        
		        if(gaptPivotToColumnsDelimited_1 < 0){
		        
		        	for(int k=0;k<-gaptPivotToColumnsDelimited_1;k++)
						aggOuttPivotToColumnsDelimited_1.add("");
			
		        }
		
				for(int j = 0; j < aggOuttPivotToColumnsDelimited_1.size(); j++) {
					outtPivotToColumnsDelimited_1.write(aggOuttPivotToColumnsDelimited_1.get(j));
					if(j == aggOuttPivotToColumnsDelimited_1.size()-1) {
						break;
					}
					outtPivotToColumnsDelimited_1.write(";");
				}
		        
		        outtPivotToColumnsDelimited_1.write("\n");
		
		    }
    

    	
		
			if(outtPivotToColumnsDelimited_1!=null){
			 	outtPivotToColumnsDelimited_1.flush();
			 	outtPivotToColumnsDelimited_1.close();
			}
		
		resourceMap.put("finish_tPivotToColumnsDelimited_1", true);
	

globalMap.put("tPivotToColumnsDelimited_1_NB_LINE", nb_line_tPivotToColumnsDelimited_1);
globalMap.put("tPivotToColumnsDelimited_1_NB_LINE_OUT", nb_line_out_tPivotToColumnsDelimited_1);


				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tPivotToColumnsDelimited_1", true);
end_Hash.put("tPivotToColumnsDelimited_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk17", 0, "ok");
				}
				tJava_21Process(globalMap);



/**
 * [tPivotToColumnsDelimited_1 end ] stop
 */





















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
					te.setVirtualComponentName(currentVirtualComponent);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
							//free memory for "tSortRow_1_SortIn"
							globalMap.remove("tSortRow_1");
						
							//free memory for "tDenormalize_1_ArrayIn"
							globalMap.remove("tDenormalize_1");
						
				try{
					
	
	/**
	 * [tHashInput_tUnite_2 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_tUnite_2";
	
	

 



/**
 * [tHashInput_tUnite_2 finally ] stop
 */

	
	/**
	 * [tDenormalize_1_DenormalizeOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_DenormalizeOut";
	
	

 



/**
 * [tDenormalize_1_DenormalizeOut finally ] stop
 */

	
	/**
	 * [tDenormalize_1_ArrayIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tDenormalize_1";
	
	currentComponent="tDenormalize_1_ArrayIn";
	
	

 



/**
 * [tDenormalize_1_ArrayIn finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortOut finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortOut";
	
	

 



/**
 * [tSortRow_1_SortOut finally ] stop
 */

	
	/**
	 * [tSortRow_1_SortIn finally ] start
	 */

	

	
	
		currentVirtualComponent = "tSortRow_1";
	
	currentComponent="tSortRow_1_SortIn";
	
	

 



/**
 * [tSortRow_1_SortIn finally ] stop
 */

	
	/**
	 * [tMap_3_TMAP_OUT finally ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_OUT";
	
	

 



/**
 * [tMap_3_TMAP_OUT finally ] stop
 */

	
	/**
	 * [tMap_3_TMAP_IN finally ] start
	 */

	

	
	
		currentVirtualComponent = "tMap_3";
	
	currentComponent="tMap_3_TMAP_IN";
	
	

 



/**
 * [tMap_3_TMAP_IN finally ] stop
 */

	
	/**
	 * [tPivotToColumnsDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tPivotToColumnsDelimited_1";
	
	

		if(resourceMap.get("finish_tPivotToColumnsDelimited_1") == null){
			
				if(resourceMap.get("outtPivotToColumnsDelimited_1") != null){
				 	((java.io.BufferedWriter)resourceMap.get("outtPivotToColumnsDelimited_1")).flush();
				 	((java.io.BufferedWriter)resourceMap.get("outtPivotToColumnsDelimited_1")).close();
				}
			
		}
	

 



/**
 * [tPivotToColumnsDelimited_1 finally ] stop
 */





















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_tUnite_2_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };

    private SyncInt runningThreadCount =new SyncInt();

    private class SyncInt
    {
        private int count = 0;
        public synchronized void add(int i)
        {
            count +=i;
        }

        public synchronized int getCount()
        {
            return count;
        }
    }

    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final FichaFamiliar FichaFamiliarClass = new FichaFamiliar();

        int exitCode = FichaFamiliarClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = FichaFamiliar.class.getClassLoader().getResourceAsStream("rep_inicio/fichafamiliar_1_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = FichaFamiliar.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("COM_EPS_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_EPS_ID") == null) {
                            context.COM_EPS_ID = null;
                        } else {
                            try{
                                context.COM_EPS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_EPS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_EPS_ID", e.getMessage()));
                                context.COM_EPS_ID=null;
                            }
                        }
                        context.setContextType("COM_FICHA_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_FICHA_ID") == null) {
                            context.COM_FICHA_ID = null;
                        } else {
                            try{
                                context.COM_FICHA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_FICHA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_FICHA_ID", e.getMessage()));
                                context.COM_FICHA_ID=null;
                            }
                        }
                        context.setContextType("COM_FREGISTRO", "id_Date");
                        if(context.getStringValue("COM_FREGISTRO") == null) {
                            context.COM_FREGISTRO = null;
                        } else {
                            String context_COM_FREGISTRO_value = context.getProperty("COM_FREGISTRO");
                            try{
                                if (context_COM_FREGISTRO_value == null){
                                    context_COM_FREGISTRO_value = "";
                                }
                                int context_COM_FREGISTRO_pos = context_COM_FREGISTRO_value.indexOf(";");
                                String context_COM_FREGISTRO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_COM_FREGISTRO_pos > -1){
                                    context_COM_FREGISTRO_pattern = context_COM_FREGISTRO_value.substring(0, context_COM_FREGISTRO_pos);
                                    context_COM_FREGISTRO_value = context_COM_FREGISTRO_value.substring(context_COM_FREGISTRO_pos + 1);
                                }

                                context.COM_FREGISTRO=(java.util.Date)(new java.text.SimpleDateFormat(context_COM_FREGISTRO_pattern).parse(context_COM_FREGISTRO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_COM_FREGISTRO_longValue = Long.valueOf(context_COM_FREGISTRO_value);
                                    context.COM_FREGISTRO = new java.util.Date(context_COM_FREGISTRO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_FREGISTRO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.COM_FREGISTRO=null;
                                }
                            }
                        }
                        context.setContextType("COM_OPCION1", "id_String");
                        if(context.getStringValue("COM_OPCION1") == null) {
                            context.COM_OPCION1 = null;
                        } else {
                            context.COM_OPCION1=(String) context.getProperty("COM_OPCION1");
                        }
                        context.setContextType("COM_OPCION2", "id_Date");
                        if(context.getStringValue("COM_OPCION2") == null) {
                            context.COM_OPCION2 = null;
                        } else {
                            String context_COM_OPCION2_value = context.getProperty("COM_OPCION2");
                            try{
                                if (context_COM_OPCION2_value == null){
                                    context_COM_OPCION2_value = "";
                                }
                                int context_COM_OPCION2_pos = context_COM_OPCION2_value.indexOf(";");
                                String context_COM_OPCION2_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_COM_OPCION2_pos > -1){
                                    context_COM_OPCION2_pattern = context_COM_OPCION2_value.substring(0, context_COM_OPCION2_pos);
                                    context_COM_OPCION2_value = context_COM_OPCION2_value.substring(context_COM_OPCION2_pos + 1);
                                }

                                context.COM_OPCION2=(java.util.Date)(new java.text.SimpleDateFormat(context_COM_OPCION2_pattern).parse(context_COM_OPCION2_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_COM_OPCION2_longValue = Long.valueOf(context_COM_OPCION2_value);
                                    context.COM_OPCION2 = new java.util.Date(context_COM_OPCION2_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_OPCION2", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.COM_OPCION2=null;
                                }
                            }
                        }
                        context.setContextType("COM_PERSONA_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_PERSONA_ID") == null) {
                            context.COM_PERSONA_ID = null;
                        } else {
                            try{
                                context.COM_PERSONA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_PERSONA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_PERSONA_ID", e.getMessage()));
                                context.COM_PERSONA_ID=null;
                            }
                        }
                        context.setContextType("COM_RECOMENDACIONES", "id_String");
                        if(context.getStringValue("COM_RECOMENDACIONES") == null) {
                            context.COM_RECOMENDACIONES = null;
                        } else {
                            context.COM_RECOMENDACIONES=(String) context.getProperty("COM_RECOMENDACIONES");
                        }
                        context.setContextType("COM_RESPUESTA", "id_String");
                        if(context.getStringValue("COM_RESPUESTA") == null) {
                            context.COM_RESPUESTA = null;
                        } else {
                            context.COM_RESPUESTA=(String) context.getProperty("COM_RESPUESTA");
                        }
                        context.setContextType("COM_SIGLA", "id_String");
                        if(context.getStringValue("COM_SIGLA") == null) {
                            context.COM_SIGLA = null;
                        } else {
                            context.COM_SIGLA=(String) context.getProperty("COM_SIGLA");
                        }
                        context.setContextType("COM_TPREGUNTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_TPREGUNTAS_ID") == null) {
                            context.COM_TPREGUNTAS_ID = null;
                        } else {
                            try{
                                context.COM_TPREGUNTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_TPREGUNTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_TPREGUNTAS_ID", e.getMessage()));
                                context.COM_TPREGUNTAS_ID=null;
                            }
                        }
                        context.setContextType("COM_TREGIMENSALUD_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_TREGIMENSALUD_ID") == null) {
                            context.COM_TREGIMENSALUD_ID = null;
                        } else {
                            try{
                                context.COM_TREGIMENSALUD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_TREGIMENSALUD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_TREGIMENSALUD_ID", e.getMessage()));
                                context.COM_TREGIMENSALUD_ID=null;
                            }
                        }
                        context.setContextType("COM_TRESPUESTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("COM_TRESPUESTAS_ID") == null) {
                            context.COM_TRESPUESTAS_ID = null;
                        } else {
                            try{
                                context.COM_TRESPUESTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COM_TRESPUESTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COM_TRESPUESTAS_ID", e.getMessage()));
                                context.COM_TRESPUESTAS_ID=null;
                            }
                        }
                        context.setContextType("COM_VPREDETERMINADO", "id_String");
                        if(context.getStringValue("COM_VPREDETERMINADO") == null) {
                            context.COM_VPREDETERMINADO = null;
                        } else {
                            context.COM_VPREDETERMINADO=(String) context.getProperty("COM_VPREDETERMINADO");
                        }
                        context.setContextType("PER_EPS_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_EPS_ID") == null) {
                            context.PER_EPS_ID = null;
                        } else {
                            try{
                                context.PER_EPS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_EPS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_EPS_ID", e.getMessage()));
                                context.PER_EPS_ID=null;
                            }
                        }
                        context.setContextType("PER_FICHA_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_FICHA_ID") == null) {
                            context.PER_FICHA_ID = null;
                        } else {
                            try{
                                context.PER_FICHA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_FICHA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_FICHA_ID", e.getMessage()));
                                context.PER_FICHA_ID=null;
                            }
                        }
                        context.setContextType("PER_FREGISTRO", "id_Date");
                        if(context.getStringValue("PER_FREGISTRO") == null) {
                            context.PER_FREGISTRO = null;
                        } else {
                            String context_PER_FREGISTRO_value = context.getProperty("PER_FREGISTRO");
                            try{
                                if (context_PER_FREGISTRO_value == null){
                                    context_PER_FREGISTRO_value = "";
                                }
                                int context_PER_FREGISTRO_pos = context_PER_FREGISTRO_value.indexOf(";");
                                String context_PER_FREGISTRO_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_PER_FREGISTRO_pos > -1){
                                    context_PER_FREGISTRO_pattern = context_PER_FREGISTRO_value.substring(0, context_PER_FREGISTRO_pos);
                                    context_PER_FREGISTRO_value = context_PER_FREGISTRO_value.substring(context_PER_FREGISTRO_pos + 1);
                                }

                                context.PER_FREGISTRO=(java.util.Date)(new java.text.SimpleDateFormat(context_PER_FREGISTRO_pattern).parse(context_PER_FREGISTRO_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_PER_FREGISTRO_longValue = Long.valueOf(context_PER_FREGISTRO_value);
                                    context.PER_FREGISTRO = new java.util.Date(context_PER_FREGISTRO_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_FREGISTRO", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.PER_FREGISTRO=null;
                                }
                            }
                        }
                        context.setContextType("PER_OPCION1", "id_String");
                        if(context.getStringValue("PER_OPCION1") == null) {
                            context.PER_OPCION1 = null;
                        } else {
                            context.PER_OPCION1=(String) context.getProperty("PER_OPCION1");
                        }
                        context.setContextType("PER_OPCION2", "id_Date");
                        if(context.getStringValue("PER_OPCION2") == null) {
                            context.PER_OPCION2 = null;
                        } else {
                            String context_PER_OPCION2_value = context.getProperty("PER_OPCION2");
                            try{
                                if (context_PER_OPCION2_value == null){
                                    context_PER_OPCION2_value = "";
                                }
                                int context_PER_OPCION2_pos = context_PER_OPCION2_value.indexOf(";");
                                String context_PER_OPCION2_pattern =  "yyyy-MM-dd HH:mm:ss";
                                if(context_PER_OPCION2_pos > -1){
                                    context_PER_OPCION2_pattern = context_PER_OPCION2_value.substring(0, context_PER_OPCION2_pos);
                                    context_PER_OPCION2_value = context_PER_OPCION2_value.substring(context_PER_OPCION2_pos + 1);
                                }

                                context.PER_OPCION2=(java.util.Date)(new java.text.SimpleDateFormat(context_PER_OPCION2_pattern).parse(context_PER_OPCION2_value));

                            } catch(ParseException e) {
                                try { 
                                    long context_PER_OPCION2_longValue = Long.valueOf(context_PER_OPCION2_value);
                                    context.PER_OPCION2 = new java.util.Date(context_PER_OPCION2_longValue);
                                } catch (NumberFormatException cantParseToLongException) {
                                        System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_OPCION2", "Can't parse date string: " + e.getMessage() + " and long: " + cantParseToLongException.getMessage()));
                                    context.PER_OPCION2=null;
                                }
                            }
                        }
                        context.setContextType("PER_PERSONA_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_PERSONA_ID") == null) {
                            context.PER_PERSONA_ID = null;
                        } else {
                            try{
                                context.PER_PERSONA_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_PERSONA_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_PERSONA_ID", e.getMessage()));
                                context.PER_PERSONA_ID=null;
                            }
                        }
                        context.setContextType("PER_RECOMENDACIONES", "id_String");
                        if(context.getStringValue("PER_RECOMENDACIONES") == null) {
                            context.PER_RECOMENDACIONES = null;
                        } else {
                            context.PER_RECOMENDACIONES=(String) context.getProperty("PER_RECOMENDACIONES");
                        }
                        context.setContextType("PER_RESPUESTA", "id_String");
                        if(context.getStringValue("PER_RESPUESTA") == null) {
                            context.PER_RESPUESTA = null;
                        } else {
                            context.PER_RESPUESTA=(String) context.getProperty("PER_RESPUESTA");
                        }
                        context.setContextType("PER_SIGLA", "id_String");
                        if(context.getStringValue("PER_SIGLA") == null) {
                            context.PER_SIGLA = null;
                        } else {
                            context.PER_SIGLA=(String) context.getProperty("PER_SIGLA");
                        }
                        context.setContextType("PER_TPREGUNTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_TPREGUNTAS_ID") == null) {
                            context.PER_TPREGUNTAS_ID = null;
                        } else {
                            try{
                                context.PER_TPREGUNTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_TPREGUNTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_TPREGUNTAS_ID", e.getMessage()));
                                context.PER_TPREGUNTAS_ID=null;
                            }
                        }
                        context.setContextType("PER_TREGIMENSALUD_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_TREGIMENSALUD_ID") == null) {
                            context.PER_TREGIMENSALUD_ID = null;
                        } else {
                            try{
                                context.PER_TREGIMENSALUD_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_TREGIMENSALUD_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_TREGIMENSALUD_ID", e.getMessage()));
                                context.PER_TREGIMENSALUD_ID=null;
                            }
                        }
                        context.setContextType("PER_TRESPUESTAS_ID", "id_BigDecimal");
                        if(context.getStringValue("PER_TRESPUESTAS_ID") == null) {
                            context.PER_TRESPUESTAS_ID = null;
                        } else {
                            try{
                                context.PER_TRESPUESTAS_ID=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("PER_TRESPUESTAS_ID"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "PER_TRESPUESTAS_ID", e.getMessage()));
                                context.PER_TRESPUESTAS_ID=null;
                            }
                        }
                        context.setContextType("PER_VPREDETERMINADO", "id_String");
                        if(context.getStringValue("PER_VPREDETERMINADO") == null) {
                            context.PER_VPREDETERMINADO = null;
                        } else {
                            context.PER_VPREDETERMINADO=(String) context.getProperty("PER_VPREDETERMINADO");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("CONDITION_PRINCIPAL", "id_String");
                        if(context.getStringValue("CONDITION_PRINCIPAL") == null) {
                            context.CONDITION_PRINCIPAL = null;
                        } else {
                            context.CONDITION_PRINCIPAL=(String) context.getProperty("CONDITION_PRINCIPAL");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("LOGS_STAT", "id_String");
                        if(context.getStringValue("LOGS_STAT") == null) {
                            context.LOGS_STAT = null;
                        } else {
                            context.LOGS_STAT=(String) context.getProperty("LOGS_STAT");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                        context.setContextType("ABIERTA", "id_BigDecimal");
                        if(context.getStringValue("ABIERTA") == null) {
                            context.ABIERTA = null;
                        } else {
                            try{
                                context.ABIERTA=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("ABIERTA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ABIERTA", e.getMessage()));
                                context.ABIERTA=null;
                            }
                        }
                        context.setContextType("AREA", "id_BigDecimal");
                        if(context.getStringValue("AREA") == null) {
                            context.AREA = null;
                        } else {
                            try{
                                context.AREA=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("AREA"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "AREA", e.getMessage()));
                                context.AREA=null;
                            }
                        }
                        context.setContextType("COMBO", "id_BigDecimal");
                        if(context.getStringValue("COMBO") == null) {
                            context.COMBO = null;
                        } else {
                            try{
                                context.COMBO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO", e.getMessage()));
                                context.COMBO=null;
                            }
                        }
                        context.setContextType("COMBO_COMBO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_COMBO") == null) {
                            context.COMBO_COMBO = null;
                        } else {
                            try{
                                context.COMBO_COMBO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_COMBO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_COMBO", e.getMessage()));
                                context.COMBO_COMBO=null;
                            }
                        }
                        context.setContextType("COMBO_NUMERICO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_NUMERICO") == null) {
                            context.COMBO_NUMERICO = null;
                        } else {
                            try{
                                context.COMBO_NUMERICO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_NUMERICO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_NUMERICO", e.getMessage()));
                                context.COMBO_NUMERICO=null;
                            }
                        }
                        context.setContextType("COMBO_OTRO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_OTRO") == null) {
                            context.COMBO_OTRO = null;
                        } else {
                            try{
                                context.COMBO_OTRO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_OTRO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_OTRO", e.getMessage()));
                                context.COMBO_OTRO=null;
                            }
                        }
                        context.setContextType("COMBO_TEXTO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_TEXTO") == null) {
                            context.COMBO_TEXTO = null;
                        } else {
                            try{
                                context.COMBO_TEXTO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_TEXTO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_TEXTO", e.getMessage()));
                                context.COMBO_TEXTO=null;
                            }
                        }
                        context.setContextType("COMBO_TEXTO_FIJO", "id_BigDecimal");
                        if(context.getStringValue("COMBO_TEXTO_FIJO") == null) {
                            context.COMBO_TEXTO_FIJO = null;
                        } else {
                            try{
                                context.COMBO_TEXTO_FIJO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("COMBO_TEXTO_FIJO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "COMBO_TEXTO_FIJO", e.getMessage()));
                                context.COMBO_TEXTO_FIJO=null;
                            }
                        }
                        context.setContextType("FECHA_NORMAL", "id_BigDecimal");
                        if(context.getStringValue("FECHA_NORMAL") == null) {
                            context.FECHA_NORMAL = null;
                        } else {
                            try{
                                context.FECHA_NORMAL=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("FECHA_NORMAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "FECHA_NORMAL", e.getMessage()));
                                context.FECHA_NORMAL=null;
                            }
                        }
                        context.setContextType("MULTISELECT", "id_BigDecimal");
                        if(context.getStringValue("MULTISELECT") == null) {
                            context.MULTISELECT = null;
                        } else {
                            try{
                                context.MULTISELECT=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("MULTISELECT"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "MULTISELECT", e.getMessage()));
                                context.MULTISELECT=null;
                            }
                        }
                        context.setContextType("RANGO_NUMERICO", "id_BigDecimal");
                        if(context.getStringValue("RANGO_NUMERICO") == null) {
                            context.RANGO_NUMERICO = null;
                        } else {
                            try{
                                context.RANGO_NUMERICO=routines.system.ParserUtils.parseTo_BigDecimal (context.getProperty("RANGO_NUMERICO"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "RANGO_NUMERICO", e.getMessage()));
                                context.RANGO_NUMERICO=null;
                            }
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("COM_EPS_ID")) {
                context.COM_EPS_ID = (BigDecimal) parentContextMap.get("COM_EPS_ID");
            }if (parentContextMap.containsKey("COM_FICHA_ID")) {
                context.COM_FICHA_ID = (BigDecimal) parentContextMap.get("COM_FICHA_ID");
            }if (parentContextMap.containsKey("COM_FREGISTRO")) {
                context.COM_FREGISTRO = (java.util.Date) parentContextMap.get("COM_FREGISTRO");
            }if (parentContextMap.containsKey("COM_OPCION1")) {
                context.COM_OPCION1 = (String) parentContextMap.get("COM_OPCION1");
            }if (parentContextMap.containsKey("COM_OPCION2")) {
                context.COM_OPCION2 = (java.util.Date) parentContextMap.get("COM_OPCION2");
            }if (parentContextMap.containsKey("COM_PERSONA_ID")) {
                context.COM_PERSONA_ID = (BigDecimal) parentContextMap.get("COM_PERSONA_ID");
            }if (parentContextMap.containsKey("COM_RECOMENDACIONES")) {
                context.COM_RECOMENDACIONES = (String) parentContextMap.get("COM_RECOMENDACIONES");
            }if (parentContextMap.containsKey("COM_RESPUESTA")) {
                context.COM_RESPUESTA = (String) parentContextMap.get("COM_RESPUESTA");
            }if (parentContextMap.containsKey("COM_SIGLA")) {
                context.COM_SIGLA = (String) parentContextMap.get("COM_SIGLA");
            }if (parentContextMap.containsKey("COM_TPREGUNTAS_ID")) {
                context.COM_TPREGUNTAS_ID = (BigDecimal) parentContextMap.get("COM_TPREGUNTAS_ID");
            }if (parentContextMap.containsKey("COM_TREGIMENSALUD_ID")) {
                context.COM_TREGIMENSALUD_ID = (BigDecimal) parentContextMap.get("COM_TREGIMENSALUD_ID");
            }if (parentContextMap.containsKey("COM_TRESPUESTAS_ID")) {
                context.COM_TRESPUESTAS_ID = (BigDecimal) parentContextMap.get("COM_TRESPUESTAS_ID");
            }if (parentContextMap.containsKey("COM_VPREDETERMINADO")) {
                context.COM_VPREDETERMINADO = (String) parentContextMap.get("COM_VPREDETERMINADO");
            }if (parentContextMap.containsKey("PER_EPS_ID")) {
                context.PER_EPS_ID = (BigDecimal) parentContextMap.get("PER_EPS_ID");
            }if (parentContextMap.containsKey("PER_FICHA_ID")) {
                context.PER_FICHA_ID = (BigDecimal) parentContextMap.get("PER_FICHA_ID");
            }if (parentContextMap.containsKey("PER_FREGISTRO")) {
                context.PER_FREGISTRO = (java.util.Date) parentContextMap.get("PER_FREGISTRO");
            }if (parentContextMap.containsKey("PER_OPCION1")) {
                context.PER_OPCION1 = (String) parentContextMap.get("PER_OPCION1");
            }if (parentContextMap.containsKey("PER_OPCION2")) {
                context.PER_OPCION2 = (java.util.Date) parentContextMap.get("PER_OPCION2");
            }if (parentContextMap.containsKey("PER_PERSONA_ID")) {
                context.PER_PERSONA_ID = (BigDecimal) parentContextMap.get("PER_PERSONA_ID");
            }if (parentContextMap.containsKey("PER_RECOMENDACIONES")) {
                context.PER_RECOMENDACIONES = (String) parentContextMap.get("PER_RECOMENDACIONES");
            }if (parentContextMap.containsKey("PER_RESPUESTA")) {
                context.PER_RESPUESTA = (String) parentContextMap.get("PER_RESPUESTA");
            }if (parentContextMap.containsKey("PER_SIGLA")) {
                context.PER_SIGLA = (String) parentContextMap.get("PER_SIGLA");
            }if (parentContextMap.containsKey("PER_TPREGUNTAS_ID")) {
                context.PER_TPREGUNTAS_ID = (BigDecimal) parentContextMap.get("PER_TPREGUNTAS_ID");
            }if (parentContextMap.containsKey("PER_TREGIMENSALUD_ID")) {
                context.PER_TREGIMENSALUD_ID = (BigDecimal) parentContextMap.get("PER_TREGIMENSALUD_ID");
            }if (parentContextMap.containsKey("PER_TRESPUESTAS_ID")) {
                context.PER_TRESPUESTAS_ID = (BigDecimal) parentContextMap.get("PER_TRESPUESTAS_ID");
            }if (parentContextMap.containsKey("PER_VPREDETERMINADO")) {
                context.PER_VPREDETERMINADO = (String) parentContextMap.get("PER_VPREDETERMINADO");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("CONDITION_PRINCIPAL")) {
                context.CONDITION_PRINCIPAL = (String) parentContextMap.get("CONDITION_PRINCIPAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("LOGS_STAT")) {
                context.LOGS_STAT = (String) parentContextMap.get("LOGS_STAT");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }if (parentContextMap.containsKey("ABIERTA")) {
                context.ABIERTA = (BigDecimal) parentContextMap.get("ABIERTA");
            }if (parentContextMap.containsKey("AREA")) {
                context.AREA = (BigDecimal) parentContextMap.get("AREA");
            }if (parentContextMap.containsKey("COMBO")) {
                context.COMBO = (BigDecimal) parentContextMap.get("COMBO");
            }if (parentContextMap.containsKey("COMBO_COMBO")) {
                context.COMBO_COMBO = (BigDecimal) parentContextMap.get("COMBO_COMBO");
            }if (parentContextMap.containsKey("COMBO_NUMERICO")) {
                context.COMBO_NUMERICO = (BigDecimal) parentContextMap.get("COMBO_NUMERICO");
            }if (parentContextMap.containsKey("COMBO_OTRO")) {
                context.COMBO_OTRO = (BigDecimal) parentContextMap.get("COMBO_OTRO");
            }if (parentContextMap.containsKey("COMBO_TEXTO")) {
                context.COMBO_TEXTO = (BigDecimal) parentContextMap.get("COMBO_TEXTO");
            }if (parentContextMap.containsKey("COMBO_TEXTO_FIJO")) {
                context.COMBO_TEXTO_FIJO = (BigDecimal) parentContextMap.get("COMBO_TEXTO_FIJO");
            }if (parentContextMap.containsKey("FECHA_NORMAL")) {
                context.FECHA_NORMAL = (BigDecimal) parentContextMap.get("FECHA_NORMAL");
            }if (parentContextMap.containsKey("MULTISELECT")) {
                context.MULTISELECT = (BigDecimal) parentContextMap.get("MULTISELECT");
            }if (parentContextMap.containsKey("RANGO_NUMERICO")) {
                context.RANGO_NUMERICO = (BigDecimal) parentContextMap.get("RANGO_NUMERICO");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_2Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_2) {
globalMap.put("tPrejob_2_SUBPROCESS_STATE", -1);

e_tPrejob_2.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs
final Thread launchingThread = Thread.currentThread();
        runningThreadCount.add(1);
        new Thread(){
            public void run() {

                java.util.Map threadRunResultMap = new java.util.HashMap();
                threadRunResultMap.put("errorCode", null);
                threadRunResultMap.put("status", "");
                threadLocal.set(threadRunResultMap);

                try {
((java.util.Map) threadLocal.get()).put("errorCode", null);tOracleInput_1Process(globalMap);
if ( !"failure".equals(((java.util.Map)threadLocal.get()).get("status")) ) {
((java.util.Map) threadLocal.get()).put("status", "end");
}
}catch (TalendException e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);

e_tOracleInput_1.printStackTrace();

}catch (java.lang.Error e_tOracleInput_1) {
globalMap.put("tOracleInput_1_SUBPROCESS_STATE", -1);
((java.util.Map) threadLocal.get()).put("status", "failure");throw e_tOracleInput_1;

}
                finally {
                    Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
                    String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
                    if (localErrorCode != null) {
                        if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                           errorCode = localErrorCode;
                        }
                    }
                    if (!status.equals("failure")){
                        status = localStatus;
                    }

                    if ("true".equals(((java.util.Map) threadLocal.get()).get("JobInterrupted"))) {
                        launchingThread.interrupt();
                    }

                    runningThreadCount.add(-1);
                }
            }
        }.start();

    boolean interrupted = false;
    while (runningThreadCount.getCount() > 0) {
        try {
            Thread.sleep(10);
        } catch (java.lang.InterruptedException e) {
            interrupted = true;
        } catch (java.lang.Exception e) {
            e.printStackTrace();
        }
    }

    if (interrupted) {
        Thread.currentThread().interrupt();
    }



this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : FichaFamiliar");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;

        Integer localErrorCode = (Integer)(((java.util.Map)threadLocal.get()).get("errorCode"));
        String localStatus = (String)(((java.util.Map)threadLocal.get()).get("status"));
        if (localErrorCode != null) {
            if (errorCode == null || localErrorCode.compareTo(errorCode) > 0) {
                   errorCode = localErrorCode;
            }
        }
        if (localStatus != null && !status.equals("failure")){
            status = localStatus;
        }

    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     2216057 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:47:17 AM COT
 ************************************************************************************************/