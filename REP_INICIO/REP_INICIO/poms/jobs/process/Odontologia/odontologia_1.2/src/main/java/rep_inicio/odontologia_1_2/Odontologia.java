// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for ESB
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package rep_inicio.odontologia_1_2;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.Utils;
import routines.getEdad;
import routines.StringHandling;
import routines.ArrayFromFile;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJava_1
	//import java.util.List;

	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJavaRow_2
	//import java.util.List;

	//the import part of tJavaRow_3
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: Odontologia Purpose: Transferir datos de odontología y pso a la bodega<br>
 * Description: Fecha 			Quién 				Que 
06/09/2018		Roger Prieto		cambia los joblets por incompatibilidad con la versión comunity <br>
 * @author jorgejlhc@gmail.com
 * @version 8.8.8.20240722_1936-SNAPSHOT
 * @status 
 */
public class Odontologia implements TalendJob {

protected static void logIgnoredError(String message, Throwable cause) {
       System.err.println(message);
       if (cause != null) {
               cause.printStackTrace();
       }

}


	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	

	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
		

	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(db_origen_AdditionalParams != null){
				
					this.setProperty("db_origen_AdditionalParams", db_origen_AdditionalParams.toString());
				
			}
			
			if(db_origen_Login != null){
				
					this.setProperty("db_origen_Login", db_origen_Login.toString());
				
			}
			
			if(db_origen_Password != null){
				
					this.setProperty("db_origen_Password", db_origen_Password.toString());
				
			}
			
			if(db_origen_Port != null){
				
					this.setProperty("db_origen_Port", db_origen_Port.toString());
				
			}
			
			if(db_origen_Schema != null){
				
					this.setProperty("db_origen_Schema", db_origen_Schema.toString());
				
			}
			
			if(db_origen_Server != null){
				
					this.setProperty("db_origen_Server", db_origen_Server.toString());
				
			}
			
			if(db_origen_ServiceName != null){
				
					this.setProperty("db_origen_ServiceName", db_origen_ServiceName.toString());
				
			}
			
			if(db_destino_AdditionalParams != null){
				
					this.setProperty("db_destino_AdditionalParams", db_destino_AdditionalParams.toString());
				
			}
			
			if(db_destino_Login != null){
				
					this.setProperty("db_destino_Login", db_destino_Login.toString());
				
			}
			
			if(db_destino_Password != null){
				
					this.setProperty("db_destino_Password", db_destino_Password.toString());
				
			}
			
			if(db_destino_Port != null){
				
					this.setProperty("db_destino_Port", db_destino_Port.toString());
				
			}
			
			if(db_destino_Schema != null){
				
					this.setProperty("db_destino_Schema", db_destino_Schema.toString());
				
			}
			
			if(db_destino_Server != null){
				
					this.setProperty("db_destino_Server", db_destino_Server.toString());
				
			}
			
			if(db_destino_ServiceName != null){
				
					this.setProperty("db_destino_ServiceName", db_destino_ServiceName.toString());
				
			}
			
			if(ACTUALIZACION_TOTAL != null){
				
					this.setProperty("ACTUALIZACION_TOTAL", ACTUALIZACION_TOTAL.toString());
				
			}
			
			if(BODEGA != null){
				
					this.setProperty("BODEGA", BODEGA.toString());
				
			}
			
			if(CONDITION != null){
				
					this.setProperty("CONDITION", CONDITION.toString());
				
			}
			
			if(CONDITION_PRINCIPAL != null){
				
					this.setProperty("CONDITION_PRINCIPAL", CONDITION_PRINCIPAL.toString());
				
			}
			
			if(ERROR != null){
				
					this.setProperty("ERROR", ERROR.toString());
				
			}
			
			if(ESTADO != null){
				
					this.setProperty("ESTADO", ESTADO.toString());
				
			}
			
			if(ESTADO_EXEC != null){
				
					this.setProperty("ESTADO_EXEC", ESTADO_EXEC.toString());
				
			}
			
			if(FANTERIOR != null){
				
					this.setProperty("FANTERIOR", FANTERIOR.toString());
				
			}
			
			if(FECHA_EJECUCION != null){
				
					this.setProperty("FECHA_EJECUCION", FECHA_EJECUCION.toString());
				
			}
			
			if(FECHA_TERMINACION != null){
				
					this.setProperty("FECHA_TERMINACION", FECHA_TERMINACION.toString());
				
			}
			
			if(HORA_FINAL != null){
				
					this.setProperty("HORA_FINAL", HORA_FINAL.toString());
				
			}
			
			if(HORA_INICIO != null){
				
					this.setProperty("HORA_INICIO", HORA_INICIO.toString());
				
			}
			
			if(ID_SOLICITUD != null){
				
					this.setProperty("ID_SOLICITUD", ID_SOLICITUD.toString());
				
			}
			
			if(JOB != null){
				
					this.setProperty("JOB", JOB.toString());
				
			}
			
			if(LAST_DAYS != null){
				
					this.setProperty("LAST_DAYS", LAST_DAYS.toString());
				
			}
			
			if(LOGS_ERROR != null){
				
					this.setProperty("LOGS_ERROR", LOGS_ERROR.toString());
				
			}
			
			if(LOGS_EXECUTION != null){
				
					this.setProperty("LOGS_EXECUTION", LOGS_EXECUTION.toString());
				
			}
			
			if(LOGS_STAT != null){
				
					this.setProperty("LOGS_STAT", LOGS_STAT.toString());
				
			}
			
			if(ORIGEN != null){
				
					this.setProperty("ORIGEN", ORIGEN.toString());
				
			}
			
			if(RutaSistema != null){
				
					this.setProperty("RutaSistema", RutaSistema.toString());
				
			}
			
		}
		
		//if the stored or passed value is "<TALEND_NULL>" string, it mean null
		public String getStringValue(String key) {
			String origin_value = this.getProperty(key);
			if(NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY.equals(origin_value)) {
				return null;
			}
			return origin_value;
		}

public String db_origen_AdditionalParams;
public String getDb_origen_AdditionalParams(){
	return this.db_origen_AdditionalParams;
}
public String db_origen_Login;
public String getDb_origen_Login(){
	return this.db_origen_Login;
}
public java.lang.String db_origen_Password;
public java.lang.String getDb_origen_Password(){
	return this.db_origen_Password;
}
public String db_origen_Port;
public String getDb_origen_Port(){
	return this.db_origen_Port;
}
public String db_origen_Schema;
public String getDb_origen_Schema(){
	return this.db_origen_Schema;
}
public String db_origen_Server;
public String getDb_origen_Server(){
	return this.db_origen_Server;
}
public String db_origen_ServiceName;
public String getDb_origen_ServiceName(){
	return this.db_origen_ServiceName;
}
public String db_destino_AdditionalParams;
public String getDb_destino_AdditionalParams(){
	return this.db_destino_AdditionalParams;
}
public String db_destino_Login;
public String getDb_destino_Login(){
	return this.db_destino_Login;
}
public java.lang.String db_destino_Password;
public java.lang.String getDb_destino_Password(){
	return this.db_destino_Password;
}
public String db_destino_Port;
public String getDb_destino_Port(){
	return this.db_destino_Port;
}
public String db_destino_Schema;
public String getDb_destino_Schema(){
	return this.db_destino_Schema;
}
public String db_destino_Server;
public String getDb_destino_Server(){
	return this.db_destino_Server;
}
public String db_destino_ServiceName;
public String getDb_destino_ServiceName(){
	return this.db_destino_ServiceName;
}
public Boolean ACTUALIZACION_TOTAL;
public Boolean getACTUALIZACION_TOTAL(){
	return this.ACTUALIZACION_TOTAL;
}
public String BODEGA;
public String getBODEGA(){
	return this.BODEGA;
}
public String CONDITION;
public String getCONDITION(){
	return this.CONDITION;
}
public String CONDITION_PRINCIPAL;
public String getCONDITION_PRINCIPAL(){
	return this.CONDITION_PRINCIPAL;
}
public String ERROR;
public String getERROR(){
	return this.ERROR;
}
public String ESTADO;
public String getESTADO(){
	return this.ESTADO;
}
public String ESTADO_EXEC;
public String getESTADO_EXEC(){
	return this.ESTADO_EXEC;
}
public String FANTERIOR;
public String getFANTERIOR(){
	return this.FANTERIOR;
}
public String FECHA_EJECUCION;
public String getFECHA_EJECUCION(){
	return this.FECHA_EJECUCION;
}
public String FECHA_TERMINACION;
public String getFECHA_TERMINACION(){
	return this.FECHA_TERMINACION;
}
public String HORA_FINAL;
public String getHORA_FINAL(){
	return this.HORA_FINAL;
}
public String HORA_INICIO;
public String getHORA_INICIO(){
	return this.HORA_INICIO;
}
public Integer ID_SOLICITUD;
public Integer getID_SOLICITUD(){
	return this.ID_SOLICITUD;
}
public String JOB;
public String getJOB(){
	return this.JOB;
}
public Integer LAST_DAYS;
public Integer getLAST_DAYS(){
	return this.LAST_DAYS;
}
public String LOGS_ERROR;
public String getLOGS_ERROR(){
	return this.LOGS_ERROR;
}
public String LOGS_EXECUTION;
public String getLOGS_EXECUTION(){
	return this.LOGS_EXECUTION;
}
public String LOGS_STAT;
public String getLOGS_STAT(){
	return this.LOGS_STAT;
}
public String ORIGEN;
public String getORIGEN(){
	return this.ORIGEN;
}
public String RutaSistema;
public String getRutaSistema(){
	return this.RutaSistema;
}
	}
			
	protected ContextProperties context = new ContextProperties(); // will be instanciated by MS.
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "1.2";
	private final String jobName = "Odontologia";
	private final String projectName = "REP_INICIO";
	public Integer errorCode = null;
	private String currentComponent = "";
	
	private String cLabel =  null;
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";
	
	private final static String KEY_DB_DATASOURCES_RAW = "KEY_DB_DATASOURCES_RAW";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}
	
	public void setDataSourceReferences(List serviceReferences) throws Exception{
		
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		java.util.Map<String, javax.sql.DataSource> dataSources = new java.util.HashMap<String, javax.sql.DataSource>();
		
		for (java.util.Map.Entry<String, javax.sql.DataSource> entry : BundleUtils.getServices(serviceReferences,  javax.sql.DataSource.class).entrySet()) {
                    dataSources.put(entry.getKey(), entry.getValue());
                    talendDataSources.put(entry.getKey(), new routines.system.TalendDataSource(entry.getValue()));
		}

		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
		globalMap.put(KEY_DB_DATASOURCES_RAW, new java.util.HashMap<String, javax.sql.DataSource>(dataSources));
	}

	LogCatcherUtils tLogCatcher_1 = new LogCatcherUtils();

private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	
	private String currentComponent = null;
	private String cLabel =  null;
	
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}
	
	private TalendException(Exception e, String errorComponent, String errorComponentLabel, final java.util.Map<String, Object> globalMap) {
		this(e, errorComponent, globalMap);
		this.cLabel = errorComponentLabel;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Odontologia.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Odontologia.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
				tLogCatcher_1.addMessage("Java Exception", currentComponent, 6, e.getClass().getName() + ":" + e.getMessage(), 1);
				tLogCatcher_1Process(globalMap);
			}
			} catch (TalendException e) {
				// do nothing
			
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tPostjob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPostjob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFixedFlowInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFixedFlowInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleClose_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleClose_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_21_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_12_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFlowToIterate_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_12_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_19_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleInput_18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tHashInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPrejob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tPrejob_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileInputXML_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tFileInputXML_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tOracleConnection_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleConnection_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogCatcher_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tFileOutputDelimited_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tRunJob_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tLogCatcher_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row5_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row6_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row7_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row8_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row9_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row10_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row11_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row13_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row14_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row15_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row16_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row17_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row18_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row20_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row21_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row22_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row23_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tOracleInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tPostjob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFixedFlowInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleClose_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_21_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_12_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tPrejob_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tFileInputXML_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tOracleConnection_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tLogCatcher_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
	









public void tPostjob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPostjob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPostjob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPostjob_1", false);
		start_Hash.put("tPostjob_1", System.currentTimeMillis());
		
	
	currentComponent="tPostjob_1";
	
	
		int tos_count_tPostjob_1 = 0;
		

 



/**
 * [tPostjob_1 begin ] stop
 */
	
	/**
	 * [tPostjob_1 main ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 


	tos_count_tPostjob_1++;

/**
 * [tPostjob_1 main ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPostjob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 process_data_end ] stop
 */
	
	/**
	 * [tPostjob_1 end ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 

ok_Hash.put("tPostjob_1", true);
end_Hash.put("tPostjob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tPostjob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPostjob_1 finally ] start
	 */

	

	
	
	currentComponent="tPostjob_1";
	
	

 



/**
 * [tPostjob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPostjob_1_SUBPROCESS_STATE", 1);
	}
	


public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";
	
	
		int tos_count_tJava_1 = 0;
		


context.FECHA_TERMINACION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_FINAL = TalendDate.getDate("HH:mm:ss");
context.ESTADO_EXEC = "Success";

System.out.println("  - End: " + TalendDate.getDate("DD/MM/YYYY") + " "  + TalendDate.getDate("HH:mm:ss") );
System.out.println("+ Job " + context.ESTADO_EXEC);
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_begin ] stop
 */
	
	/**
	 * [tJava_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 process_data_end ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk5", 0, "ok");
				}
				tFixedFlowInput_2Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tOracleClose_1Process(globalMap);
				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk4", 0, "ok");
				}
				tOracleClose_2Process(globalMap);



/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";
	
	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	


public static class row41Struct implements routines.system.IPersistableRow<row41Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public String FECHA_EJECUCION;

				public String getFECHA_EJECUCION () {
					return this.FECHA_EJECUCION;
				}

				public Boolean FECHA_EJECUCIONIsNullable(){
				    return true;
				}
				public Boolean FECHA_EJECUCIONIsKey(){
				    return false;
				}
				public Integer FECHA_EJECUCIONLength(){
				    return null;
				}
				public Integer FECHA_EJECUCIONPrecision(){
				    return null;
				}
				public String FECHA_EJECUCIONDefault(){
				
					return null;
				
				}
				public String FECHA_EJECUCIONComment(){
				
				    return "";
				
				}
				public String FECHA_EJECUCIONPattern(){
				
					return "";
				
				}
				public String FECHA_EJECUCIONOriginalDbColumnName(){
				
					return "FECHA_EJECUCION";
				
				}

				
			    public String HORA_INICIO;

				public String getHORA_INICIO () {
					return this.HORA_INICIO;
				}

				public Boolean HORA_INICIOIsNullable(){
				    return true;
				}
				public Boolean HORA_INICIOIsKey(){
				    return false;
				}
				public Integer HORA_INICIOLength(){
				    return null;
				}
				public Integer HORA_INICIOPrecision(){
				    return null;
				}
				public String HORA_INICIODefault(){
				
					return null;
				
				}
				public String HORA_INICIOComment(){
				
				    return "";
				
				}
				public String HORA_INICIOPattern(){
				
					return "";
				
				}
				public String HORA_INICIOOriginalDbColumnName(){
				
					return "HORA_INICIO";
				
				}

				
			    public String HORA_FINAL;

				public String getHORA_FINAL () {
					return this.HORA_FINAL;
				}

				public Boolean HORA_FINALIsNullable(){
				    return true;
				}
				public Boolean HORA_FINALIsKey(){
				    return false;
				}
				public Integer HORA_FINALLength(){
				    return null;
				}
				public Integer HORA_FINALPrecision(){
				    return null;
				}
				public String HORA_FINALDefault(){
				
					return null;
				
				}
				public String HORA_FINALComment(){
				
				    return "";
				
				}
				public String HORA_FINALPattern(){
				
					return "";
				
				}
				public String HORA_FINALOriginalDbColumnName(){
				
					return "HORA_FINAL";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String JOBS;

				public String getJOBS () {
					return this.JOBS;
				}

				public Boolean JOBSIsNullable(){
				    return true;
				}
				public Boolean JOBSIsKey(){
				    return false;
				}
				public Integer JOBSLength(){
				    return null;
				}
				public Integer JOBSPrecision(){
				    return null;
				}
				public String JOBSDefault(){
				
					return null;
				
				}
				public String JOBSComment(){
				
				    return "";
				
				}
				public String JOBSPattern(){
				
					return "";
				
				}
				public String JOBSOriginalDbColumnName(){
				
					return "JOBS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.FECHA_EJECUCION = readString(dis);
					
					this.HORA_INICIO = readString(dis);
					
					this.HORA_FINAL = readString(dis);
					
					this.ESTADO = readString(dis);
					
					this.JOBS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.FECHA_EJECUCION,dos);
					
					// String
				
						writeString(this.HORA_INICIO,dos);
					
					// String
				
						writeString(this.HORA_FINAL,dos);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.JOBS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("FECHA_EJECUCION="+FECHA_EJECUCION);
		sb.append(",HORA_INICIO="+HORA_INICIO);
		sb.append(",HORA_FINAL="+HORA_FINAL);
		sb.append(",ESTADO="+ESTADO);
		sb.append(",JOBS="+JOBS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row41Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFixedFlowInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row41Struct row41 = new row41Struct();




	
	/**
	 * [tFileOutputDelimited_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_1", false);
		start_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row41");
					}
				
		int tos_count_tFileOutputDelimited_1 = 0;
		

String fileName_tFileOutputDelimited_1 = "";
    fileName_tFileOutputDelimited_1 = (new java.io.File(context.LOGS_EXECUTION)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_1 = null;
    String extension_tFileOutputDelimited_1 = null;
    String directory_tFileOutputDelimited_1 = null;
    if((fileName_tFileOutputDelimited_1.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") < fileName_tFileOutputDelimited_1.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_1.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(0, fileName_tFileOutputDelimited_1.lastIndexOf("."));
            extension_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1.substring(fileName_tFileOutputDelimited_1.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_1 = fileName_tFileOutputDelimited_1;
            extension_tFileOutputDelimited_1 = "";
        }
        directory_tFileOutputDelimited_1 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_1 = true;
    java.io.File filetFileOutputDelimited_1 = new java.io.File(fileName_tFileOutputDelimited_1);
    globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
        if(filetFileOutputDelimited_1.exists()){
            isFileGenerated_tFileOutputDelimited_1 = false;
        }
            int nb_line_tFileOutputDelimited_1 = 0;
            int splitedFileNo_tFileOutputDelimited_1 = 0;
            int currentRow_tFileOutputDelimited_1 = 0;

            final String OUT_DELIM_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_1:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_1 = /** Start field tFileOutputDelimited_1:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_1:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_1 != null && directory_tFileOutputDelimited_1.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_1 = new java.io.File(directory_tFileOutputDelimited_1);
                        if(!dir_tFileOutputDelimited_1.exists()) {
                            dir_tFileOutputDelimited_1.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_1 = null;

                        outtFileOutputDelimited_1 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_1, true),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_1", outtFileOutputDelimited_1);
                                    if(filetFileOutputDelimited_1.length()==0){
                                        outtFileOutputDelimited_1.write("FECHA_EJECUCION");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_INICIO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("HORA_FINAL");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("ESTADO");
                                            outtFileOutputDelimited_1.write(OUT_DELIM_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.write("JOBS");
                                        outtFileOutputDelimited_1.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);
                                        outtFileOutputDelimited_1.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

 



/**
 * [tFileOutputDelimited_1 begin ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFixedFlowInput_2", false);
		start_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());
		
	
	currentComponent="tFixedFlowInput_2";
	
	
		int tos_count_tFixedFlowInput_2 = 0;
		

	    for (int i_tFixedFlowInput_2 = 0 ; i_tFixedFlowInput_2 < 1 ; i_tFixedFlowInput_2++) {
	                	            	
    	            		row41.FECHA_EJECUCION = context.FECHA_EJECUCION;
    	            	        	            	
    	            		row41.HORA_INICIO = context.HORA_INICIO;
    	            	        	            	
    	            		row41.HORA_FINAL = context.HORA_FINAL;
    	            	        	            	
    	            		row41.ESTADO = context.ESTADO_EXEC;
    	            	        	            	
    	            		row41.JOBS = "INSERT_FFA";
    	            	

 



/**
 * [tFixedFlowInput_2 begin ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 main ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 


	tos_count_tFixedFlowInput_2++;

/**
 * [tFixedFlowInput_2 main ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row41"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_1 = new StringBuilder();
                            if(row41.FECHA_EJECUCION != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.FECHA_EJECUCION
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_INICIO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_INICIO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.HORA_FINAL != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.HORA_FINAL
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.ESTADO != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.ESTADO
                        );
                            }
                            sb_tFileOutputDelimited_1.append(OUT_DELIM_tFileOutputDelimited_1);
                            if(row41.JOBS != null) {
                        sb_tFileOutputDelimited_1.append(
                            row41.JOBS
                        );
                            }
                    sb_tFileOutputDelimited_1.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_1);


                    nb_line_tFileOutputDelimited_1++;
                    resourceMap.put("nb_line_tFileOutputDelimited_1", nb_line_tFileOutputDelimited_1);

                        outtFileOutputDelimited_1.write(sb_tFileOutputDelimited_1.toString());




 


	tos_count_tFileOutputDelimited_1++;

/**
 * [tFileOutputDelimited_1 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_begin ] stop
 */
	
	/**
	 * [tFileOutputDelimited_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	

 



/**
 * [tFileOutputDelimited_1 process_data_end ] stop
 */



	
	/**
	 * [tFixedFlowInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 process_data_end ] stop
 */
	
	/**
	 * [tFixedFlowInput_2 end ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

        }
        globalMap.put("tFixedFlowInput_2_NB_LINE", 1);        

 

ok_Hash.put("tFixedFlowInput_2", true);
end_Hash.put("tFixedFlowInput_2", System.currentTimeMillis());




/**
 * [tFixedFlowInput_2 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	



		
			
					if(outtFileOutputDelimited_1!=null) {
						outtFileOutputDelimited_1.flush();
						outtFileOutputDelimited_1.close();
					}
				
				globalMap.put("tFileOutputDelimited_1_NB_LINE",nb_line_tFileOutputDelimited_1);
				globalMap.put("tFileOutputDelimited_1_FILE_NAME",fileName_tFileOutputDelimited_1);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_1", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row41");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_1", true);
end_Hash.put("tFileOutputDelimited_1", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFixedFlowInput_2 finally ] start
	 */

	

	
	
	currentComponent="tFixedFlowInput_2";
	
	

 



/**
 * [tFixedFlowInput_2 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_1 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_1";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_1") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_1 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_1");
						if(outtFileOutputDelimited_1!=null) {
							outtFileOutputDelimited_1.flush();
							outtFileOutputDelimited_1.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFixedFlowInput_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_1", false);
		start_Hash.put("tOracleClose_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_1";
	
	
		int tos_count_tOracleClose_1 = 0;
		

 



/**
 * [tOracleClose_1 begin ] stop
 */
	
	/**
	 * [tOracleClose_1 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

	java.sql.Connection conn_tOracleClose_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
	
	if(conn_tOracleClose_1 != null && !conn_tOracleClose_1.isClosed())
	{
		
			conn_tOracleClose_1.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_1"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_1++;

/**
 * [tOracleClose_1 main ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_1 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 

ok_Hash.put("tOracleClose_1", true);
end_Hash.put("tOracleClose_1", System.currentTimeMillis());




/**
 * [tOracleClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_1";
	
	

 



/**
 * [tOracleClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleClose_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleClose_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleClose_2", false);
		start_Hash.put("tOracleClose_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleClose_2";
	
	
		int tos_count_tOracleClose_2 = 0;
		

 



/**
 * [tOracleClose_2 begin ] stop
 */
	
	/**
	 * [tOracleClose_2 main ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

	java.sql.Connection conn_tOracleClose_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_2");
	
	if(conn_tOracleClose_2 != null && !conn_tOracleClose_2.isClosed())
	{
		
			conn_tOracleClose_2.close();
			
			if("com.mysql.cj.jdbc.Driver".equals((String)globalMap.get("driverClass_tOracleConnection_2"))
			    && routines.system.BundleUtils.inOSGi()) {
			        Class.forName("com.mysql.cj.jdbc.AbandonedConnectionCleanupThread").
			            getMethod("checkedShutdown").invoke(null, (Object[]) null);
			}
			
	}

 


	tos_count_tOracleClose_2++;

/**
 * [tOracleClose_2 main ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleClose_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleClose_2 end ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 

ok_Hash.put("tOracleClose_2", true);
end_Hash.put("tOracleClose_2", System.currentTimeMillis());




/**
 * [tOracleClose_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleClose_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleClose_2";
	
	

 



/**
 * [tOracleClose_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleClose_2_SUBPROCESS_STATE", 1);
	}
	


public static class row24Struct implements routines.system.IPersistableRow<row24Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return 0;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public String FLUOROSIS;

				public String getFLUOROSIS () {
					return this.FLUOROSIS;
				}

				public Boolean FLUOROSISIsNullable(){
				    return true;
				}
				public Boolean FLUOROSISIsKey(){
				    return false;
				}
				public Integer FLUOROSISLength(){
				    return 0;
				}
				public Integer FLUOROSISPrecision(){
				    return 0;
				}
				public String FLUOROSISDefault(){
				
					return null;
				
				}
				public String FLUOROSISComment(){
				
				    return "";
				
				}
				public String FLUOROSISPattern(){
				
					return "";
				
				}
				public String FLUOROSISOriginalDbColumnName(){
				
					return "FLUOROSIS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.FLUOROSIS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.FLUOROSIS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",FLUOROSIS="+FLUOROSIS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row24Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_21Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row24Struct row24 = new row24Struct();




	
	/**
	 * [tHashOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_2", false);
		start_Hash.put("tHashOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row24");
					}
				
		int tos_count_tHashOutput_2 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_2=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();    
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashOutput_2 = null;
		String hashKey_tHashOutput_2 = "tHashFile_Odontologia_" + pid + "_tHashOutput_2";
			synchronized(org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.get(hashKey_tHashOutput_2)){
			    if(mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2) == null){
	      		    mf_tHashOutput_2.getResourceMap().put(hashKey_tHashOutput_2, new org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct>(org.talend.designer.components.hashfile.common.MATCHING_MODE.KEEP_ALL));
	      		    tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }else{
			    	tHashFile_tHashOutput_2 = mf_tHashOutput_2.getResourceMap().get(hashKey_tHashOutput_2);
			    }
			}
        int nb_line_tHashOutput_2 = 0;

 



/**
 * [tHashOutput_2 begin ] stop
 */



	
	/**
	 * [tOracleInput_21 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_21", false);
		start_Hash.put("tOracleInput_21", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_21";
	
	
		int tos_count_tOracleInput_21 = 0;
		
	


	
		    int nb_line_tOracleInput_21 = 0;
		    java.sql.Connection conn_tOracleInput_21 = null;
				conn_tOracleInput_21 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_21 = false;
				boolean isConnectionWrapped_tOracleInput_21 = !(conn_tOracleInput_21 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_21.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_21 = null;
                if (isConnectionWrapped_tOracleInput_21) {
					unwrappedOraConn_tOracleInput_21 = conn_tOracleInput_21.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_21 != null) {
                        isTimeZoneNull_tOracleInput_21 = (unwrappedOraConn_tOracleInput_21.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_21 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_21).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_21) {
					java.sql.Statement stmtGetTZ_tOracleInput_21 = conn_tOracleInput_21.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_21 = stmtGetTZ_tOracleInput_21.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_21 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_21.next()) {
						sessionTimezone_tOracleInput_21 = rsGetTZ_tOracleInput_21.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_21 && unwrappedOraConn_tOracleInput_21 != null) {
                        unwrappedOraConn_tOracleInput_21.setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_21).setSessionTimeZone(sessionTimezone_tOracleInput_21);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_21 = conn_tOracleInput_21.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_21.setFetchSize(1000);


		    String dbquery_tOracleInput_21 = "SELECT \n NULL AS PROCESOASISTENCIAL_ID\n,'' AS FLUOROSIS\nFROM  DUAL ";
		    

		    globalMap.put("tOracleInput_21_QUERY",dbquery_tOracleInput_21);

		    java.sql.ResultSet rs_tOracleInput_21 = null;

		    try {
		    	rs_tOracleInput_21 = stmt_tOracleInput_21.executeQuery(dbquery_tOracleInput_21);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_21 = rs_tOracleInput_21.getMetaData();
		    	int colQtyInRs_tOracleInput_21 = rsmd_tOracleInput_21.getColumnCount();

		    String tmpContent_tOracleInput_21 = null;
		    
		    
		    while (rs_tOracleInput_21.next()) {
		        nb_line_tOracleInput_21++;
		        
							if(colQtyInRs_tOracleInput_21 < 1) {
								row24.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_21.getObject(1) != null) {
						row24.PROCESOASISTENCIAL_ID = rs_tOracleInput_21.getBigDecimal(1);
					} else {
				
						row24.PROCESOASISTENCIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_21 < 2) {
								row24.FLUOROSIS = null;
							} else {
	                         		
        	row24.FLUOROSIS = routines.system.JDBCUtil.getString(rs_tOracleInput_21, 2, false);
		                    }
					




 



/**
 * [tOracleInput_21 begin ] stop
 */
	
	/**
	 * [tOracleInput_21 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 


	tos_count_tOracleInput_21++;

/**
 * [tOracleInput_21 main ] stop
 */
	
	/**
	 * [tOracleInput_21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_2 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row24"
						
						);
					}
					



    
		row24Struct oneRow_tHashOutput_2 = new row24Struct();
				
					oneRow_tHashOutput_2.PROCESOASISTENCIAL_ID = row24.PROCESOASISTENCIAL_ID;
					oneRow_tHashOutput_2.FLUOROSIS = row24.FLUOROSIS;
		
        tHashFile_tHashOutput_2.put(oneRow_tHashOutput_2);
        nb_line_tHashOutput_2 ++;

 


	tos_count_tHashOutput_2++;

/**
 * [tHashOutput_2 main ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_21 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_21 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

}
}finally{
	if (rs_tOracleInput_21 != null) {
		rs_tOracleInput_21.close();
	}
	if (stmt_tOracleInput_21 != null) {
		stmt_tOracleInput_21.close();
	}
}

globalMap.put("tOracleInput_21_NB_LINE",nb_line_tOracleInput_21);
 

ok_Hash.put("tOracleInput_21", true);
end_Hash.put("tOracleInput_21", System.currentTimeMillis());




/**
 * [tOracleInput_21 end ] stop
 */

	
	/**
	 * [tHashOutput_2 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	
globalMap.put("tHashOutput_2_NB_LINE", nb_line_tHashOutput_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row24");
			  	}
			  	
 

ok_Hash.put("tHashOutput_2", true);
end_Hash.put("tHashOutput_2", System.currentTimeMillis());




/**
 * [tHashOutput_2 end ] stop
 */



				}//end the resume

				
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_21:OnSubjobOk1", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk1", 0, "ok");
								} 
							
							tOracleInput_12Process(globalMap); 
						
				    			if(resumeEntryMethodName == null || globalResumeTicket){
				    				resumeUtil.addLog("CHECKPOINT", "CONNECTION:SUBJOB_OK:tOracleInput_21:OnSubjobOk2", "", Thread.currentThread().getId() + "", "", "", "", "", "");
								}	    				    			
					    	
								if(execStat){    	
									runStat.updateStatOnConnection("OnSubjobOk2", 0, "ok");
								} 
							
							tOracleInput_1Process(globalMap); 
						



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_21 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_21";
	
	

 



/**
 * [tOracleInput_21 finally ] stop
 */

	
	/**
	 * [tHashOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_2";
	
	

 



/**
 * [tHashOutput_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_21_SUBPROCESS_STATE", 1);
	}
	


public static class row19Struct implements routines.system.IPersistableRow<row19Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public String FLUOROSIS;

				public String getFLUOROSIS () {
					return this.FLUOROSIS;
				}

				public Boolean FLUOROSISIsNullable(){
				    return false;
				}
				public Boolean FLUOROSISIsKey(){
				    return false;
				}
				public Integer FLUOROSISLength(){
				    return 200;
				}
				public Integer FLUOROSISPrecision(){
				    return 0;
				}
				public String FLUOROSISDefault(){
				
					return null;
				
				}
				public String FLUOROSISComment(){
				
				    return "";
				
				}
				public String FLUOROSISPattern(){
				
					return "";
				
				}
				public String FLUOROSISOriginalDbColumnName(){
				
					return "FLUOROSIS";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.FLUOROSIS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
					this.FLUOROSIS = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",FLUOROSIS="+FLUOROSIS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row19Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row12Struct implements routines.system.IPersistableRow<row12Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PA_ID;

				public BigDecimal getPA_ID () {
					return this.PA_ID;
				}

				public Boolean PA_IDIsNullable(){
				    return true;
				}
				public Boolean PA_IDIsKey(){
				    return false;
				}
				public Integer PA_IDLength(){
				    return 0;
				}
				public Integer PA_IDPrecision(){
				    return null;
				}
				public String PA_IDDefault(){
				
					return "";
				
				}
				public String PA_IDComment(){
				
				    return "";
				
				}
				public String PA_IDPattern(){
				
					return "";
				
				}
				public String PA_IDOriginalDbColumnName(){
				
					return "PA_ID";
				
				}

				



    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PA_ID="+String.valueOf(PA_ID));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row12Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_12Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row12Struct row12 = new row12Struct();
row19Struct row19 = new row19Struct();




	
	/**
	 * [tFlowToIterate_1 begin ] start
	 */

				
			int NB_ITERATE_tOracleInput_20 = 0; //for statistics
			

	
		
		ok_Hash.put("tFlowToIterate_1", false);
		start_Hash.put("tFlowToIterate_1", System.currentTimeMillis());
		
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row12");
					}
				
		int tos_count_tFlowToIterate_1 = 0;
		

int nb_line_tFlowToIterate_1 = 0;
int counter_tFlowToIterate_1 = 0;

 



/**
 * [tFlowToIterate_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_12 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_12", false);
		start_Hash.put("tOracleInput_12", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_12";
	
	
		int tos_count_tOracleInput_12 = 0;
		
	


	
		    int nb_line_tOracleInput_12 = 0;
		    java.sql.Connection conn_tOracleInput_12 = null;
				conn_tOracleInput_12 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_12 = false;
				boolean isConnectionWrapped_tOracleInput_12 = !(conn_tOracleInput_12 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_12.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_12 = null;
                if (isConnectionWrapped_tOracleInput_12) {
					unwrappedOraConn_tOracleInput_12 = conn_tOracleInput_12.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_12 != null) {
                        isTimeZoneNull_tOracleInput_12 = (unwrappedOraConn_tOracleInput_12.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_12 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_12).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_12) {
					java.sql.Statement stmtGetTZ_tOracleInput_12 = conn_tOracleInput_12.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_12 = stmtGetTZ_tOracleInput_12.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_12 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_12.next()) {
						sessionTimezone_tOracleInput_12 = rsGetTZ_tOracleInput_12.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_12 && unwrappedOraConn_tOracleInput_12 != null) {
                        unwrappedOraConn_tOracleInput_12.setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_12).setSessionTimeZone(sessionTimezone_tOracleInput_12);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_12 = conn_tOracleInput_12.createStatement();

		    String dbquery_tOracleInput_12 = "SELECT \nDISTINCT\nDIAG.PROCESOSASISTENCIALES_ID AS PA_ID\nFROM HCL_DIAGNOSTICOS DIAG\nINNER JOIN GEN_CIE10 CI ON CI.ID"
+" = DIAG.CIE10_ID\nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = DIAG.PROCESOSASISTENCIALES_ID\nINNER JOIN ODO_HPLAN"
+"TRATAMIENTO ODHP ON ODHP.PROCESOSASISTENCIALES_ID = PA.ID\nINNER JOIN ODO_TFLUOROSIS ODTF ON ODTF.ID = ODHP.TFLUOROSIS_I"
+"D\nwhere \n"+context.CONDITION+"  \nCI.CODIGO = 'K003' \nAND ( DIAG.TDIAGNOSTICO = 'Confirmado Repetido' OR DIAG.TDIAGNOSTICO = 'Confirmado Nuevo' ) ";
		    

		    globalMap.put("tOracleInput_12_QUERY",dbquery_tOracleInput_12);

		    java.sql.ResultSet rs_tOracleInput_12 = null;

		    try {
		    	rs_tOracleInput_12 = stmt_tOracleInput_12.executeQuery(dbquery_tOracleInput_12);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_12 = rs_tOracleInput_12.getMetaData();
		    	int colQtyInRs_tOracleInput_12 = rsmd_tOracleInput_12.getColumnCount();

		    String tmpContent_tOracleInput_12 = null;
		    
		    
		    while (rs_tOracleInput_12.next()) {
		        nb_line_tOracleInput_12++;
		        
							if(colQtyInRs_tOracleInput_12 < 1) {
								row12.PA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_12.getObject(1) != null) {
						row12.PA_ID = rs_tOracleInput_12.getBigDecimal(1);
					} else {
				
						row12.PA_ID = null;
					}
		                    }
					




 



/**
 * [tOracleInput_12 begin ] stop
 */
	
	/**
	 * [tOracleInput_12 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 


	tos_count_tOracleInput_12++;

/**
 * [tOracleInput_12 main ] stop
 */
	
	/**
	 * [tOracleInput_12 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_begin ] stop
 */

	
	/**
	 * [tFlowToIterate_1 main ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row12"
						
						);
					}
					


    	            
            globalMap.put("row12.PA_ID", row12.PA_ID);
    	
 
	   nb_line_tFlowToIterate_1++;  
       counter_tFlowToIterate_1++;
       globalMap.put("tFlowToIterate_1_CURRENT_ITERATION", counter_tFlowToIterate_1);
 


	tos_count_tFlowToIterate_1++;

/**
 * [tFlowToIterate_1 main ] stop
 */
	
	/**
	 * [tFlowToIterate_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_begin ] stop
 */
	NB_ITERATE_tOracleInput_20++;
	
	
					if(execStat){				
	       				runStat.updateStatOnConnection("row19", 3, 0);
					}           			
				
				if(execStat){
					runStat.updateStatOnConnection("iterate1", 1, "exec" + NB_ITERATE_tOracleInput_20);
					//Thread.sleep(1000);
				}				
			


	
	/**
	 * [tHashOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashOutput_1", false);
		start_Hash.put("tHashOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row19");
					}
				
		int tos_count_tHashOutput_1 = 0;
		



org.talend.designer.components.hashfile.common.MapHashFile mf_tHashOutput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
		org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashOutput_1 = null; 
		//use this map to keep the present key and the previous key of AdvancedMemoryHashFile
		mf_tHashOutput_1.getKeyMap().put("tHashFile_Odontologia_" +pid + "_tHashOutput_1", "tHashFile_Odontologia_" + pid + "_tHashOutput_2");
        int nb_line_tHashOutput_1 = 0;

 



/**
 * [tHashOutput_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_20 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_20", false);
		start_Hash.put("tOracleInput_20", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_20";
	
	
		int tos_count_tOracleInput_20 = 0;
		
	


	
		    int nb_line_tOracleInput_20 = 0;
		    java.sql.Connection conn_tOracleInput_20 = null;
				conn_tOracleInput_20 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_20 = false;
				boolean isConnectionWrapped_tOracleInput_20 = !(conn_tOracleInput_20 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_20.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_20 = null;
                if (isConnectionWrapped_tOracleInput_20) {
					unwrappedOraConn_tOracleInput_20 = conn_tOracleInput_20.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_20 != null) {
                        isTimeZoneNull_tOracleInput_20 = (unwrappedOraConn_tOracleInput_20.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_20 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_20).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_20) {
					java.sql.Statement stmtGetTZ_tOracleInput_20 = conn_tOracleInput_20.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_20 = stmtGetTZ_tOracleInput_20.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_20 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_20.next()) {
						sessionTimezone_tOracleInput_20 = rsGetTZ_tOracleInput_20.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_20 && unwrappedOraConn_tOracleInput_20 != null) {
                        unwrappedOraConn_tOracleInput_20.setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_20).setSessionTimeZone(sessionTimezone_tOracleInput_20);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_20 = conn_tOracleInput_20.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_20.setFetchSize(1000);


		    String dbquery_tOracleInput_20 = "SELECT \nPROCESOASISTENCIAL_ID\n,FLUOROSIS\nFROM (\nSELECT \nODHP.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID\n,O"
+"DTF.NOMBRE AS FLUOROSIS\n,ODTF.valor\nFROM  ODO_HPLANTRATAMIENTO ODHP \nINNER JOIN ODO_TFLUOROSIS ODTF ON ODTF.ID = ODHP"
+".TFLUOROSIS_ID\nwhere \nODHP.PROCESOSASISTENCIALES_ID = "+row12.PA_ID+" \norder by odtf.valor desc\n) OFFSET 1 ROWS FETCH NEXT 1 ROWS ONLY";
		    

		    globalMap.put("tOracleInput_20_QUERY",dbquery_tOracleInput_20);

		    java.sql.ResultSet rs_tOracleInput_20 = null;

		    try {
		    	rs_tOracleInput_20 = stmt_tOracleInput_20.executeQuery(dbquery_tOracleInput_20);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_20 = rs_tOracleInput_20.getMetaData();
		    	int colQtyInRs_tOracleInput_20 = rsmd_tOracleInput_20.getColumnCount();

		    String tmpContent_tOracleInput_20 = null;
		    
		    
		    while (rs_tOracleInput_20.next()) {
		        nb_line_tOracleInput_20++;
		        
							if(colQtyInRs_tOracleInput_20 < 1) {
								row19.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_20.getObject(1) != null) {
						row19.PROCESOASISTENCIAL_ID = rs_tOracleInput_20.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_20 < 2) {
								row19.FLUOROSIS = null;
							} else {
	                         		
        	row19.FLUOROSIS = routines.system.JDBCUtil.getString(rs_tOracleInput_20, 2, false);
		                    }
					




 



/**
 * [tOracleInput_20 begin ] stop
 */
	
	/**
	 * [tOracleInput_20 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 


	tos_count_tOracleInput_20++;

/**
 * [tOracleInput_20 main ] stop
 */
	
	/**
	 * [tOracleInput_20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_begin ] stop
 */

	
	/**
	 * [tHashOutput_1 main ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row19"
						
						);
					}
					




		if(tHashFile_tHashOutput_1 == null){
			tHashFile_tHashOutput_1 = mf_tHashOutput_1.getAdvancedMemoryHashFile("tHashFile_Odontologia_" + pid +"_tHashOutput_2");
			mf_tHashOutput_1.getResourceMap().put("tHashFile_Odontologia_" + pid +"_tHashOutput_1", tHashFile_tHashOutput_1);
		}
		row24Struct oneRow_tHashOutput_1 = new row24Struct();
			oneRow_tHashOutput_1.PROCESOASISTENCIAL_ID = row19.PROCESOASISTENCIAL_ID;
			oneRow_tHashOutput_1.FLUOROSIS = row19.FLUOROSIS;
        tHashFile_tHashOutput_1.put(oneRow_tHashOutput_1);
        nb_line_tHashOutput_1 ++;	

 


	tos_count_tHashOutput_1++;

/**
 * [tHashOutput_1 main ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tHashOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_20 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_20 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

}
}finally{
	if (rs_tOracleInput_20 != null) {
		rs_tOracleInput_20.close();
	}
	if (stmt_tOracleInput_20 != null) {
		stmt_tOracleInput_20.close();
	}
}

globalMap.put("tOracleInput_20_NB_LINE",nb_line_tOracleInput_20);
 

ok_Hash.put("tOracleInput_20", true);
end_Hash.put("tOracleInput_20", System.currentTimeMillis());




/**
 * [tOracleInput_20 end ] stop
 */

	
	/**
	 * [tHashOutput_1 end ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	
globalMap.put("tHashOutput_1_NB_LINE", nb_line_tHashOutput_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row19");
			  	}
			  	
 

ok_Hash.put("tHashOutput_1", true);
end_Hash.put("tHashOutput_1", System.currentTimeMillis());




/**
 * [tHashOutput_1 end ] stop
 */



						if(execStat){
							runStat.updateStatOnConnection("iterate1", 2, "exec" + NB_ITERATE_tOracleInput_20);
						}				
					




	
	/**
	 * [tFlowToIterate_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_12 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_12 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

}
}finally{
	if (rs_tOracleInput_12 != null) {
		rs_tOracleInput_12.close();
	}
	if (stmt_tOracleInput_12 != null) {
		stmt_tOracleInput_12.close();
	}
}

globalMap.put("tOracleInput_12_NB_LINE",nb_line_tOracleInput_12);
 

ok_Hash.put("tOracleInput_12", true);
end_Hash.put("tOracleInput_12", System.currentTimeMillis());




/**
 * [tOracleInput_12 end ] stop
 */

	
	/**
	 * [tFlowToIterate_1 end ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

globalMap.put("tFlowToIterate_1_NB_LINE",nb_line_tFlowToIterate_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row12");
			  	}
			  	
 

ok_Hash.put("tFlowToIterate_1", true);
end_Hash.put("tFlowToIterate_1", System.currentTimeMillis());




/**
 * [tFlowToIterate_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_12 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_12";
	
	

 



/**
 * [tOracleInput_12 finally ] stop
 */

	
	/**
	 * [tFlowToIterate_1 finally ] start
	 */

	

	
	
	currentComponent="tFlowToIterate_1";
	
	

 



/**
 * [tFlowToIterate_1 finally ] stop
 */

	
	/**
	 * [tOracleInput_20 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_20";
	
	

 



/**
 * [tOracleInput_20 finally ] stop
 */

	
	/**
	 * [tHashOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashOutput_1";
	
	

 



/**
 * [tHashOutput_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_12_SUBPROCESS_STATE", 1);
	}
	


public static class out5Struct implements routines.system.IPersistableRow<out5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return true;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return null;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String SEXO_SIGLA;

				public String getSEXO_SIGLA () {
					return this.SEXO_SIGLA;
				}

				public Boolean SEXO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean SEXO_SIGLAIsKey(){
				    return false;
				}
				public Integer SEXO_SIGLALength(){
				    return 2;
				}
				public Integer SEXO_SIGLAPrecision(){
				    return 0;
				}
				public String SEXO_SIGLADefault(){
				
					return null;
				
				}
				public String SEXO_SIGLAComment(){
				
				    return "";
				
				}
				public String SEXO_SIGLAPattern(){
				
					return "";
				
				}
				public String SEXO_SIGLAOriginalDbColumnName(){
				
					return "SEXO_SIGLA";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return null;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return 100;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return 0;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public BigDecimal VALOR_MENOR;

				public BigDecimal getVALOR_MENOR () {
					return this.VALOR_MENOR;
				}

				public Boolean VALOR_MENORIsNullable(){
				    return true;
				}
				public Boolean VALOR_MENORIsKey(){
				    return false;
				}
				public Integer VALOR_MENORLength(){
				    return null;
				}
				public Integer VALOR_MENORPrecision(){
				    return null;
				}
				public String VALOR_MENORDefault(){
				
					return "";
				
				}
				public String VALOR_MENORComment(){
				
				    return "";
				
				}
				public String VALOR_MENORPattern(){
				
					return "";
				
				}
				public String VALOR_MENOROriginalDbColumnName(){
				
					return "VALOR_MENOR";
				
				}

				
			    public String RANGO_EDAD;

				public String getRANGO_EDAD () {
					return this.RANGO_EDAD;
				}

				public Boolean RANGO_EDADIsNullable(){
				    return true;
				}
				public Boolean RANGO_EDADIsKey(){
				    return false;
				}
				public Integer RANGO_EDADLength(){
				    return 4000;
				}
				public Integer RANGO_EDADPrecision(){
				    return 0;
				}
				public String RANGO_EDADDefault(){
				
					return null;
				
				}
				public String RANGO_EDADComment(){
				
				    return "";
				
				}
				public String RANGO_EDADPattern(){
				
					return "";
				
				}
				public String RANGO_EDADOriginalDbColumnName(){
				
					return "RANGO_EDAD";
				
				}

				
			    public String TIPO_VALORACION;

				public String getTIPO_VALORACION () {
					return this.TIPO_VALORACION;
				}

				public Boolean TIPO_VALORACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_VALORACIONIsKey(){
				    return false;
				}
				public Integer TIPO_VALORACIONLength(){
				    return 2;
				}
				public Integer TIPO_VALORACIONPrecision(){
				    return 0;
				}
				public String TIPO_VALORACIONDefault(){
				
					return null;
				
				}
				public String TIPO_VALORACIONComment(){
				
				    return "";
				
				}
				public String TIPO_VALORACIONPattern(){
				
					return "";
				
				}
				public String TIPO_VALORACIONOriginalDbColumnName(){
				
					return "TIPO_VALORACION";
				
				}

				
			    public String MORBILIDAD;

				public String getMORBILIDAD () {
					return this.MORBILIDAD;
				}

				public Boolean MORBILIDADIsNullable(){
				    return true;
				}
				public Boolean MORBILIDADIsKey(){
				    return false;
				}
				public Integer MORBILIDADLength(){
				    return 50;
				}
				public Integer MORBILIDADPrecision(){
				    return null;
				}
				public String MORBILIDADDefault(){
				
					return null;
				
				}
				public String MORBILIDADComment(){
				
				    return "";
				
				}
				public String MORBILIDADPattern(){
				
					return "";
				
				}
				public String MORBILIDADOriginalDbColumnName(){
				
					return "MORBILIDAD";
				
				}

				
			    public BigDecimal OLEARY_VALOR;

				public BigDecimal getOLEARY_VALOR () {
					return this.OLEARY_VALOR;
				}

				public Boolean OLEARY_VALORIsNullable(){
				    return true;
				}
				public Boolean OLEARY_VALORIsKey(){
				    return false;
				}
				public Integer OLEARY_VALORLength(){
				    return null;
				}
				public Integer OLEARY_VALORPrecision(){
				    return null;
				}
				public String OLEARY_VALORDefault(){
				
					return "";
				
				}
				public String OLEARY_VALORComment(){
				
				    return "";
				
				}
				public String OLEARY_VALORPattern(){
				
					return "";
				
				}
				public String OLEARY_VALOROriginalDbColumnName(){
				
					return "OLEARY_VALOR";
				
				}

				
			    public String OLEARY;

				public String getOLEARY () {
					return this.OLEARY;
				}

				public Boolean OLEARYIsNullable(){
				    return true;
				}
				public Boolean OLEARYIsKey(){
				    return false;
				}
				public Integer OLEARYLength(){
				    return 100;
				}
				public Integer OLEARYPrecision(){
				    return 0;
				}
				public String OLEARYDefault(){
				
					return null;
				
				}
				public String OLEARYComment(){
				
				    return "";
				
				}
				public String OLEARYPattern(){
				
					return "";
				
				}
				public String OLEARYOriginalDbColumnName(){
				
					return "OLEARY";
				
				}

				
			    public String BRUXISMO;

				public String getBRUXISMO () {
					return this.BRUXISMO;
				}

				public Boolean BRUXISMOIsNullable(){
				    return true;
				}
				public Boolean BRUXISMOIsKey(){
				    return false;
				}
				public Integer BRUXISMOLength(){
				    return 100;
				}
				public Integer BRUXISMOPrecision(){
				    return 0;
				}
				public String BRUXISMODefault(){
				
					return null;
				
				}
				public String BRUXISMOComment(){
				
				    return "";
				
				}
				public String BRUXISMOPattern(){
				
					return "";
				
				}
				public String BRUXISMOOriginalDbColumnName(){
				
					return "BRUXISMO";
				
				}

				
			    public String MUERDE_OBJETOS;

				public String getMUERDE_OBJETOS () {
					return this.MUERDE_OBJETOS;
				}

				public Boolean MUERDE_OBJETOSIsNullable(){
				    return true;
				}
				public Boolean MUERDE_OBJETOSIsKey(){
				    return false;
				}
				public Integer MUERDE_OBJETOSLength(){
				    return 100;
				}
				public Integer MUERDE_OBJETOSPrecision(){
				    return 0;
				}
				public String MUERDE_OBJETOSDefault(){
				
					return null;
				
				}
				public String MUERDE_OBJETOSComment(){
				
				    return "";
				
				}
				public String MUERDE_OBJETOSPattern(){
				
					return "";
				
				}
				public String MUERDE_OBJETOSOriginalDbColumnName(){
				
					return "MUERDE_OBJETOS";
				
				}

				
			    public String RESPIRADOR_NASAL;

				public String getRESPIRADOR_NASAL () {
					return this.RESPIRADOR_NASAL;
				}

				public Boolean RESPIRADOR_NASALIsNullable(){
				    return true;
				}
				public Boolean RESPIRADOR_NASALIsKey(){
				    return false;
				}
				public Integer RESPIRADOR_NASALLength(){
				    return 100;
				}
				public Integer RESPIRADOR_NASALPrecision(){
				    return 0;
				}
				public String RESPIRADOR_NASALDefault(){
				
					return null;
				
				}
				public String RESPIRADOR_NASALComment(){
				
				    return "";
				
				}
				public String RESPIRADOR_NASALPattern(){
				
					return "";
				
				}
				public String RESPIRADOR_NASALOriginalDbColumnName(){
				
					return "RESPIRADOR_NASAL";
				
				}

				
			    public String SUCCION_DIGITAL;

				public String getSUCCION_DIGITAL () {
					return this.SUCCION_DIGITAL;
				}

				public Boolean SUCCION_DIGITALIsNullable(){
				    return true;
				}
				public Boolean SUCCION_DIGITALIsKey(){
				    return false;
				}
				public Integer SUCCION_DIGITALLength(){
				    return 100;
				}
				public Integer SUCCION_DIGITALPrecision(){
				    return 0;
				}
				public String SUCCION_DIGITALDefault(){
				
					return null;
				
				}
				public String SUCCION_DIGITALComment(){
				
				    return "";
				
				}
				public String SUCCION_DIGITALPattern(){
				
					return "";
				
				}
				public String SUCCION_DIGITALOriginalDbColumnName(){
				
					return "SUCCION_DIGITAL";
				
				}

				
			    public String ONICOFAGIA;

				public String getONICOFAGIA () {
					return this.ONICOFAGIA;
				}

				public Boolean ONICOFAGIAIsNullable(){
				    return true;
				}
				public Boolean ONICOFAGIAIsKey(){
				    return false;
				}
				public Integer ONICOFAGIALength(){
				    return 100;
				}
				public Integer ONICOFAGIAPrecision(){
				    return 0;
				}
				public String ONICOFAGIADefault(){
				
					return null;
				
				}
				public String ONICOFAGIAComment(){
				
				    return "";
				
				}
				public String ONICOFAGIAPattern(){
				
					return "";
				
				}
				public String ONICOFAGIAOriginalDbColumnName(){
				
					return "ONICOFAGIA";
				
				}

				
			    public BigDecimal COP_CEOD;

				public BigDecimal getCOP_CEOD () {
					return this.COP_CEOD;
				}

				public Boolean COP_CEODIsNullable(){
				    return true;
				}
				public Boolean COP_CEODIsKey(){
				    return false;
				}
				public Integer COP_CEODLength(){
				    return null;
				}
				public Integer COP_CEODPrecision(){
				    return null;
				}
				public String COP_CEODDefault(){
				
					return "";
				
				}
				public String COP_CEODComment(){
				
				    return "";
				
				}
				public String COP_CEODPattern(){
				
					return "";
				
				}
				public String COP_CEODOriginalDbColumnName(){
				
					return "COP_CEOD";
				
				}

				
			    public BigDecimal CARIADOS;

				public BigDecimal getCARIADOS () {
					return this.CARIADOS;
				}

				public Boolean CARIADOSIsNullable(){
				    return true;
				}
				public Boolean CARIADOSIsKey(){
				    return false;
				}
				public Integer CARIADOSLength(){
				    return null;
				}
				public Integer CARIADOSPrecision(){
				    return null;
				}
				public String CARIADOSDefault(){
				
					return "";
				
				}
				public String CARIADOSComment(){
				
				    return "";
				
				}
				public String CARIADOSPattern(){
				
					return "";
				
				}
				public String CARIADOSOriginalDbColumnName(){
				
					return "CARIADOS";
				
				}

				
			    public BigDecimal OBTURADOS;

				public BigDecimal getOBTURADOS () {
					return this.OBTURADOS;
				}

				public Boolean OBTURADOSIsNullable(){
				    return true;
				}
				public Boolean OBTURADOSIsKey(){
				    return false;
				}
				public Integer OBTURADOSLength(){
				    return null;
				}
				public Integer OBTURADOSPrecision(){
				    return null;
				}
				public String OBTURADOSDefault(){
				
					return "";
				
				}
				public String OBTURADOSComment(){
				
				    return "";
				
				}
				public String OBTURADOSPattern(){
				
					return "";
				
				}
				public String OBTURADOSOriginalDbColumnName(){
				
					return "OBTURADOS";
				
				}

				
			    public BigDecimal PERDIDOS_EXTRAIDOS;

				public BigDecimal getPERDIDOS_EXTRAIDOS () {
					return this.PERDIDOS_EXTRAIDOS;
				}

				public Boolean PERDIDOS_EXTRAIDOSIsNullable(){
				    return true;
				}
				public Boolean PERDIDOS_EXTRAIDOSIsKey(){
				    return false;
				}
				public Integer PERDIDOS_EXTRAIDOSLength(){
				    return null;
				}
				public Integer PERDIDOS_EXTRAIDOSPrecision(){
				    return null;
				}
				public String PERDIDOS_EXTRAIDOSDefault(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSComment(){
				
				    return "";
				
				}
				public String PERDIDOS_EXTRAIDOSPattern(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSOriginalDbColumnName(){
				
					return "PERDIDOS_EXTRAIDOS";
				
				}

				
			    public String INTCP;

				public String getINTCP () {
					return this.INTCP;
				}

				public Boolean INTCPIsNullable(){
				    return true;
				}
				public Boolean INTCPIsKey(){
				    return false;
				}
				public Integer INTCPLength(){
				    return 100;
				}
				public Integer INTCPPrecision(){
				    return 0;
				}
				public String INTCPDefault(){
				
					return null;
				
				}
				public String INTCPComment(){
				
				    return "";
				
				}
				public String INTCPPattern(){
				
					return "";
				
				}
				public String INTCPOriginalDbColumnName(){
				
					return "INTCP";
				
				}

				
			    public BigDecimal DIENTES_TEMPORALES;

				public BigDecimal getDIENTES_TEMPORALES () {
					return this.DIENTES_TEMPORALES;
				}

				public Boolean DIENTES_TEMPORALESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_TEMPORALESIsKey(){
				    return false;
				}
				public Integer DIENTES_TEMPORALESLength(){
				    return null;
				}
				public Integer DIENTES_TEMPORALESPrecision(){
				    return null;
				}
				public String DIENTES_TEMPORALESDefault(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESComment(){
				
				    return "";
				
				}
				public String DIENTES_TEMPORALESPattern(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESOriginalDbColumnName(){
				
					return "DIENTES_TEMPORALES";
				
				}

				
			    public BigDecimal DIENTES_PERMANENTES;

				public BigDecimal getDIENTES_PERMANENTES () {
					return this.DIENTES_PERMANENTES;
				}

				public Boolean DIENTES_PERMANENTESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_PERMANENTESIsKey(){
				    return false;
				}
				public Integer DIENTES_PERMANENTESLength(){
				    return null;
				}
				public Integer DIENTES_PERMANENTESPrecision(){
				    return null;
				}
				public String DIENTES_PERMANENTESDefault(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESComment(){
				
				    return "";
				
				}
				public String DIENTES_PERMANENTESPattern(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESOriginalDbColumnName(){
				
					return "DIENTES_PERMANENTES";
				
				}

				
			    public BigDecimal PROTESIS;

				public BigDecimal getPROTESIS () {
					return this.PROTESIS;
				}

				public Boolean PROTESISIsNullable(){
				    return true;
				}
				public Boolean PROTESISIsKey(){
				    return false;
				}
				public Integer PROTESISLength(){
				    return 3;
				}
				public Integer PROTESISPrecision(){
				    return 0;
				}
				public String PROTESISDefault(){
				
					return null;
				
				}
				public String PROTESISComment(){
				
				    return "";
				
				}
				public String PROTESISPattern(){
				
					return "";
				
				}
				public String PROTESISOriginalDbColumnName(){
				
					return "PROTESIS";
				
				}

				
			    public BigDecimal PLACA_DENTAL;

				public BigDecimal getPLACA_DENTAL () {
					return this.PLACA_DENTAL;
				}

				public Boolean PLACA_DENTALIsNullable(){
				    return true;
				}
				public Boolean PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer PLACA_DENTALLength(){
				    return null;
				}
				public Integer PLACA_DENTALPrecision(){
				    return null;
				}
				public String PLACA_DENTALDefault(){
				
					return "";
				
				}
				public String PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String PLACA_DENTALOriginalDbColumnName(){
				
					return "PLACA_DENTAL";
				
				}

				
			    public String ESTADO_PLACA_DENTAL;

				public String getESTADO_PLACA_DENTAL () {
					return this.ESTADO_PLACA_DENTAL;
				}

				public Boolean ESTADO_PLACA_DENTALIsNullable(){
				    return true;
				}
				public Boolean ESTADO_PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer ESTADO_PLACA_DENTALLength(){
				    return 50;
				}
				public Integer ESTADO_PLACA_DENTALPrecision(){
				    return null;
				}
				public String ESTADO_PLACA_DENTALDefault(){
				
					return null;
				
				}
				public String ESTADO_PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String ESTADO_PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String ESTADO_PLACA_DENTALOriginalDbColumnName(){
				
					return "ESTADO_PLACA_DENTAL";
				
				}

				
			    public BigDecimal DETARTRAJE_SUPRAGINGIVAL;

				public BigDecimal getDETARTRAJE_SUPRAGINGIVAL () {
					return this.DETARTRAJE_SUPRAGINGIVAL;
				}

				public Boolean DETARTRAJE_SUPRAGINGIVALIsNullable(){
				    return true;
				}
				public Boolean DETARTRAJE_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALLength(){
				    return null;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String DETARTRAJE_SUPRAGINGIVALDefault(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "DETARTRAJE_SUPRAGINGIVAL";
				
				}

				
			    public String ESTADO_SUPRAGINGIVAL;

				public String getESTADO_SUPRAGINGIVAL () {
					return this.ESTADO_SUPRAGINGIVAL;
				}

				public Boolean ESTADO_SUPRAGINGIVALIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer ESTADO_SUPRAGINGIVALLength(){
				    return 50;
				}
				public Integer ESTADO_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String ESTADO_SUPRAGINGIVALDefault(){
				
					return null;
				
				}
				public String ESTADO_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String ESTADO_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String ESTADO_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "ESTADO_SUPRAGINGIVAL";
				
				}

				
			    public BigDecimal FLUOR;

				public BigDecimal getFLUOR () {
					return this.FLUOR;
				}

				public Boolean FLUORIsNullable(){
				    return true;
				}
				public Boolean FLUORIsKey(){
				    return false;
				}
				public Integer FLUORLength(){
				    return null;
				}
				public Integer FLUORPrecision(){
				    return null;
				}
				public String FLUORDefault(){
				
					return "";
				
				}
				public String FLUORComment(){
				
				    return "";
				
				}
				public String FLUORPattern(){
				
					return "";
				
				}
				public String FLUOROriginalDbColumnName(){
				
					return "FLUOR";
				
				}

				
			    public String ESTADO_FLUOR;

				public String getESTADO_FLUOR () {
					return this.ESTADO_FLUOR;
				}

				public Boolean ESTADO_FLUORIsNullable(){
				    return true;
				}
				public Boolean ESTADO_FLUORIsKey(){
				    return false;
				}
				public Integer ESTADO_FLUORLength(){
				    return 50;
				}
				public Integer ESTADO_FLUORPrecision(){
				    return null;
				}
				public String ESTADO_FLUORDefault(){
				
					return null;
				
				}
				public String ESTADO_FLUORComment(){
				
				    return "";
				
				}
				public String ESTADO_FLUORPattern(){
				
					return "";
				
				}
				public String ESTADO_FLUOROriginalDbColumnName(){
				
					return "ESTADO_FLUOR";
				
				}

				
			    public BigDecimal RESINA;

				public BigDecimal getRESINA () {
					return this.RESINA;
				}

				public Boolean RESINAIsNullable(){
				    return true;
				}
				public Boolean RESINAIsKey(){
				    return false;
				}
				public Integer RESINALength(){
				    return null;
				}
				public Integer RESINAPrecision(){
				    return null;
				}
				public String RESINADefault(){
				
					return "";
				
				}
				public String RESINAComment(){
				
				    return "";
				
				}
				public String RESINAPattern(){
				
					return "";
				
				}
				public String RESINAOriginalDbColumnName(){
				
					return "RESINA";
				
				}

				
			    public String ESTADO_RESINA;

				public String getESTADO_RESINA () {
					return this.ESTADO_RESINA;
				}

				public Boolean ESTADO_RESINAIsNullable(){
				    return true;
				}
				public Boolean ESTADO_RESINAIsKey(){
				    return false;
				}
				public Integer ESTADO_RESINALength(){
				    return 50;
				}
				public Integer ESTADO_RESINAPrecision(){
				    return null;
				}
				public String ESTADO_RESINADefault(){
				
					return null;
				
				}
				public String ESTADO_RESINAComment(){
				
				    return "";
				
				}
				public String ESTADO_RESINAPattern(){
				
					return "";
				
				}
				public String ESTADO_RESINAOriginalDbColumnName(){
				
					return "ESTADO_RESINA";
				
				}

				
			    public BigDecimal PROFILAXIS;

				public BigDecimal getPROFILAXIS () {
					return this.PROFILAXIS;
				}

				public Boolean PROFILAXISIsNullable(){
				    return true;
				}
				public Boolean PROFILAXISIsKey(){
				    return false;
				}
				public Integer PROFILAXISLength(){
				    return null;
				}
				public Integer PROFILAXISPrecision(){
				    return null;
				}
				public String PROFILAXISDefault(){
				
					return "";
				
				}
				public String PROFILAXISComment(){
				
				    return "";
				
				}
				public String PROFILAXISPattern(){
				
					return "";
				
				}
				public String PROFILAXISOriginalDbColumnName(){
				
					return "PROFILAXIS";
				
				}

				
			    public String ESTADO_PROFILAXIS;

				public String getESTADO_PROFILAXIS () {
					return this.ESTADO_PROFILAXIS;
				}

				public Boolean ESTADO_PROFILAXISIsNullable(){
				    return true;
				}
				public Boolean ESTADO_PROFILAXISIsKey(){
				    return false;
				}
				public Integer ESTADO_PROFILAXISLength(){
				    return 50;
				}
				public Integer ESTADO_PROFILAXISPrecision(){
				    return null;
				}
				public String ESTADO_PROFILAXISDefault(){
				
					return null;
				
				}
				public String ESTADO_PROFILAXISComment(){
				
				    return "";
				
				}
				public String ESTADO_PROFILAXISPattern(){
				
					return "";
				
				}
				public String ESTADO_PROFILAXISOriginalDbColumnName(){
				
					return "ESTADO_PROFILAXIS";
				
				}

				
			    public BigDecimal SELLANTES;

				public BigDecimal getSELLANTES () {
					return this.SELLANTES;
				}

				public Boolean SELLANTESIsNullable(){
				    return true;
				}
				public Boolean SELLANTESIsKey(){
				    return false;
				}
				public Integer SELLANTESLength(){
				    return null;
				}
				public Integer SELLANTESPrecision(){
				    return null;
				}
				public String SELLANTESDefault(){
				
					return "";
				
				}
				public String SELLANTESComment(){
				
				    return "";
				
				}
				public String SELLANTESPattern(){
				
					return "";
				
				}
				public String SELLANTESOriginalDbColumnName(){
				
					return "SELLANTES";
				
				}

				
			    public String ESTADO_SELLANTES;

				public String getESTADO_SELLANTES () {
					return this.ESTADO_SELLANTES;
				}

				public Boolean ESTADO_SELLANTESIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SELLANTESIsKey(){
				    return false;
				}
				public Integer ESTADO_SELLANTESLength(){
				    return 50;
				}
				public Integer ESTADO_SELLANTESPrecision(){
				    return null;
				}
				public String ESTADO_SELLANTESDefault(){
				
					return null;
				
				}
				public String ESTADO_SELLANTESComment(){
				
				    return "";
				
				}
				public String ESTADO_SELLANTESPattern(){
				
					return "";
				
				}
				public String ESTADO_SELLANTESOriginalDbColumnName(){
				
					return "ESTADO_SELLANTES";
				
				}

				
			    public String FLUOROSIS;

				public String getFLUOROSIS () {
					return this.FLUOROSIS;
				}

				public Boolean FLUOROSISIsNullable(){
				    return true;
				}
				public Boolean FLUOROSISIsKey(){
				    return false;
				}
				public Integer FLUOROSISLength(){
				    return 12;
				}
				public Integer FLUOROSISPrecision(){
				    return 0;
				}
				public String FLUOROSISDefault(){
				
					return null;
				
				}
				public String FLUOROSISComment(){
				
				    return "";
				
				}
				public String FLUOROSISPattern(){
				
					return "";
				
				}
				public String FLUOROSISOriginalDbColumnName(){
				
					return "FLUOROSIS";
				
				}

				
			    public BigDecimal GESTANTE;

				public BigDecimal getGESTANTE () {
					return this.GESTANTE;
				}

				public Boolean GESTANTEIsNullable(){
				    return true;
				}
				public Boolean GESTANTEIsKey(){
				    return false;
				}
				public Integer GESTANTELength(){
				    return null;
				}
				public Integer GESTANTEPrecision(){
				    return null;
				}
				public String GESTANTEDefault(){
				
					return "";
				
				}
				public String GESTANTEComment(){
				
				    return "";
				
				}
				public String GESTANTEPattern(){
				
					return "";
				
				}
				public String GESTANTEOriginalDbColumnName(){
				
					return "GESTANTE";
				
				}

				
			    public BigDecimal VIH;

				public BigDecimal getVIH () {
					return this.VIH;
				}

				public Boolean VIHIsNullable(){
				    return true;
				}
				public Boolean VIHIsKey(){
				    return false;
				}
				public Integer VIHLength(){
				    return null;
				}
				public Integer VIHPrecision(){
				    return null;
				}
				public String VIHDefault(){
				
					return "";
				
				}
				public String VIHComment(){
				
				    return "";
				
				}
				public String VIHPattern(){
				
					return "";
				
				}
				public String VIHOriginalDbColumnName(){
				
					return "VIH";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				
			    public String CLASE_GRADO;

				public String getCLASE_GRADO () {
					return this.CLASE_GRADO;
				}

				public Boolean CLASE_GRADOIsNullable(){
				    return true;
				}
				public Boolean CLASE_GRADOIsKey(){
				    return false;
				}
				public Integer CLASE_GRADOLength(){
				    return 100;
				}
				public Integer CLASE_GRADOPrecision(){
				    return 0;
				}
				public String CLASE_GRADODefault(){
				
					return null;
				
				}
				public String CLASE_GRADOComment(){
				
				    return "";
				
				}
				public String CLASE_GRADOPattern(){
				
					return "";
				
				}
				public String CLASE_GRADOOriginalDbColumnName(){
				
					return "CLASE_GRADO";
				
				}

				
			    public BigDecimal CODIGO_CLAGRADO;

				public BigDecimal getCODIGO_CLAGRADO () {
					return this.CODIGO_CLAGRADO;
				}

				public Boolean CODIGO_CLAGRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CLAGRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_CLAGRADOLength(){
				    return 6;
				}
				public Integer CODIGO_CLAGRADOPrecision(){
				    return 0;
				}
				public String CODIGO_CLAGRADODefault(){
				
					return null;
				
				}
				public String CODIGO_CLAGRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_CLAGRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOOriginalDbColumnName(){
				
					return "CODIGO_CLAGRADO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String ESTPTRATAMIENTO;

				public String getESTPTRATAMIENTO () {
					return this.ESTPTRATAMIENTO;
				}

				public Boolean ESTPTRATAMIENTOIsNullable(){
				    return true;
				}
				public Boolean ESTPTRATAMIENTOIsKey(){
				    return false;
				}
				public Integer ESTPTRATAMIENTOLength(){
				    return null;
				}
				public Integer ESTPTRATAMIENTOPrecision(){
				    return null;
				}
				public String ESTPTRATAMIENTODefault(){
				
					return null;
				
				}
				public String ESTPTRATAMIENTOComment(){
				
				    return "";
				
				}
				public String ESTPTRATAMIENTOPattern(){
				
					return "";
				
				}
				public String ESTPTRATAMIENTOOriginalDbColumnName(){
				
					return "ESTPTRATAMIENTO";
				
				}

				
			    public String TIPO_COPCEOP;

				public String getTIPO_COPCEOP () {
					return this.TIPO_COPCEOP;
				}

				public Boolean TIPO_COPCEOPIsNullable(){
				    return true;
				}
				public Boolean TIPO_COPCEOPIsKey(){
				    return false;
				}
				public Integer TIPO_COPCEOPLength(){
				    return 5;
				}
				public Integer TIPO_COPCEOPPrecision(){
				    return 0;
				}
				public String TIPO_COPCEOPDefault(){
				
					return null;
				
				}
				public String TIPO_COPCEOPComment(){
				
				    return "";
				
				}
				public String TIPO_COPCEOPPattern(){
				
					return "";
				
				}
				public String TIPO_COPCEOPOriginalDbColumnName(){
				
					return "TIPO_COPCEOP";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final out5Struct other = (out5Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(out5Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.PERSONAS_ID = this.PERSONAS_ID;
	            other.FECHA = this.FECHA;
	            other.SEXO_SIGLA = this.SEXO_SIGLA;
	            other.PYP_SIGLA = this.PYP_SIGLA;
	            other.UORG_ID = this.UORG_ID;
	            other.GRADO_CODIGO = this.GRADO_CODIGO;
	            other.FUERZA_SIGLA = this.FUERZA_SIGLA;
	            other.VALOR_MENOR = this.VALOR_MENOR;
	            other.RANGO_EDAD = this.RANGO_EDAD;
	            other.TIPO_VALORACION = this.TIPO_VALORACION;
	            other.MORBILIDAD = this.MORBILIDAD;
	            other.OLEARY_VALOR = this.OLEARY_VALOR;
	            other.OLEARY = this.OLEARY;
	            other.BRUXISMO = this.BRUXISMO;
	            other.MUERDE_OBJETOS = this.MUERDE_OBJETOS;
	            other.RESPIRADOR_NASAL = this.RESPIRADOR_NASAL;
	            other.SUCCION_DIGITAL = this.SUCCION_DIGITAL;
	            other.ONICOFAGIA = this.ONICOFAGIA;
	            other.COP_CEOD = this.COP_CEOD;
	            other.CARIADOS = this.CARIADOS;
	            other.OBTURADOS = this.OBTURADOS;
	            other.PERDIDOS_EXTRAIDOS = this.PERDIDOS_EXTRAIDOS;
	            other.INTCP = this.INTCP;
	            other.DIENTES_TEMPORALES = this.DIENTES_TEMPORALES;
	            other.DIENTES_PERMANENTES = this.DIENTES_PERMANENTES;
	            other.PROTESIS = this.PROTESIS;
	            other.PLACA_DENTAL = this.PLACA_DENTAL;
	            other.ESTADO_PLACA_DENTAL = this.ESTADO_PLACA_DENTAL;
	            other.DETARTRAJE_SUPRAGINGIVAL = this.DETARTRAJE_SUPRAGINGIVAL;
	            other.ESTADO_SUPRAGINGIVAL = this.ESTADO_SUPRAGINGIVAL;
	            other.FLUOR = this.FLUOR;
	            other.ESTADO_FLUOR = this.ESTADO_FLUOR;
	            other.RESINA = this.RESINA;
	            other.ESTADO_RESINA = this.ESTADO_RESINA;
	            other.PROFILAXIS = this.PROFILAXIS;
	            other.ESTADO_PROFILAXIS = this.ESTADO_PROFILAXIS;
	            other.SELLANTES = this.SELLANTES;
	            other.ESTADO_SELLANTES = this.ESTADO_SELLANTES;
	            other.FLUOROSIS = this.FLUOROSIS;
	            other.GESTANTE = this.GESTANTE;
	            other.VIH = this.VIH;
	            other.TIPO_USUARIO = this.TIPO_USUARIO;
	            other.CLASE_GRADO = this.CLASE_GRADO;
	            other.CODIGO_CLAGRADO = this.CODIGO_CLAGRADO;
	            other.GRADO = this.GRADO;
	            other.PROFESIONAL_ID = this.PROFESIONAL_ID;
	            other.ESTPTRATAMIENTO = this.ESTPTRATAMIENTO;
	            other.TIPO_COPCEOP = this.TIPO_COPCEOP;
	            
	}

	public void copyKeysDataTo(out5Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
						this.PLACA_DENTAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_PLACA_DENTAL = readString(dis);
					
						this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_SUPRAGINGIVAL = readString(dis);
					
						this.FLUOR = (BigDecimal) dis.readObject();
					
					this.ESTADO_FLUOR = readString(dis);
					
						this.RESINA = (BigDecimal) dis.readObject();
					
					this.ESTADO_RESINA = readString(dis);
					
						this.PROFILAXIS = (BigDecimal) dis.readObject();
					
					this.ESTADO_PROFILAXIS = readString(dis);
					
						this.SELLANTES = (BigDecimal) dis.readObject();
					
					this.ESTADO_SELLANTES = readString(dis);
					
					this.FLUOROSIS = readString(dis);
					
						this.GESTANTE = (BigDecimal) dis.readObject();
					
						this.VIH = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTPTRATAMIENTO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
						this.PLACA_DENTAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_PLACA_DENTAL = readString(dis);
					
						this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_SUPRAGINGIVAL = readString(dis);
					
						this.FLUOR = (BigDecimal) dis.readObject();
					
					this.ESTADO_FLUOR = readString(dis);
					
						this.RESINA = (BigDecimal) dis.readObject();
					
					this.ESTADO_RESINA = readString(dis);
					
						this.PROFILAXIS = (BigDecimal) dis.readObject();
					
					this.ESTADO_PROFILAXIS = readString(dis);
					
						this.SELLANTES = (BigDecimal) dis.readObject();
					
					this.ESTADO_SELLANTES = readString(dis);
					
					this.FLUOROSIS = readString(dis);
					
						this.GESTANTE = (BigDecimal) dis.readObject();
					
						this.VIH = (BigDecimal) dis.readObject();
					
					this.TIPO_USUARIO = readString(dis);
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTPTRATAMIENTO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROTESIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PLACA_DENTAL);
					
					// String
				
						writeString(this.ESTADO_PLACA_DENTAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
					// String
				
						writeString(this.ESTADO_SUPRAGINGIVAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FLUOR);
					
					// String
				
						writeString(this.ESTADO_FLUOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESINA);
					
					// String
				
						writeString(this.ESTADO_RESINA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFILAXIS);
					
					// String
				
						writeString(this.ESTADO_PROFILAXIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SELLANTES);
					
					// String
				
						writeString(this.ESTADO_SELLANTES,dos);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.GESTANTE);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VIH);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTPTRATAMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROTESIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PLACA_DENTAL);
					
					// String
				
						writeString(this.ESTADO_PLACA_DENTAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
					// String
				
						writeString(this.ESTADO_SUPRAGINGIVAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FLUOR);
					
					// String
				
						writeString(this.ESTADO_FLUOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESINA);
					
					// String
				
						writeString(this.ESTADO_RESINA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFILAXIS);
					
					// String
				
						writeString(this.ESTADO_PROFILAXIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SELLANTES);
					
					// String
				
						writeString(this.ESTADO_SELLANTES,dos);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.GESTANTE);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VIH);
					
					// String
				
						writeString(this.TIPO_USUARIO,dos);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTPTRATAMIENTO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",SEXO_SIGLA="+SEXO_SIGLA);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",VALOR_MENOR="+String.valueOf(VALOR_MENOR));
		sb.append(",RANGO_EDAD="+RANGO_EDAD);
		sb.append(",TIPO_VALORACION="+TIPO_VALORACION);
		sb.append(",MORBILIDAD="+MORBILIDAD);
		sb.append(",OLEARY_VALOR="+String.valueOf(OLEARY_VALOR));
		sb.append(",OLEARY="+OLEARY);
		sb.append(",BRUXISMO="+BRUXISMO);
		sb.append(",MUERDE_OBJETOS="+MUERDE_OBJETOS);
		sb.append(",RESPIRADOR_NASAL="+RESPIRADOR_NASAL);
		sb.append(",SUCCION_DIGITAL="+SUCCION_DIGITAL);
		sb.append(",ONICOFAGIA="+ONICOFAGIA);
		sb.append(",COP_CEOD="+String.valueOf(COP_CEOD));
		sb.append(",CARIADOS="+String.valueOf(CARIADOS));
		sb.append(",OBTURADOS="+String.valueOf(OBTURADOS));
		sb.append(",PERDIDOS_EXTRAIDOS="+String.valueOf(PERDIDOS_EXTRAIDOS));
		sb.append(",INTCP="+INTCP);
		sb.append(",DIENTES_TEMPORALES="+String.valueOf(DIENTES_TEMPORALES));
		sb.append(",DIENTES_PERMANENTES="+String.valueOf(DIENTES_PERMANENTES));
		sb.append(",PROTESIS="+String.valueOf(PROTESIS));
		sb.append(",PLACA_DENTAL="+String.valueOf(PLACA_DENTAL));
		sb.append(",ESTADO_PLACA_DENTAL="+ESTADO_PLACA_DENTAL);
		sb.append(",DETARTRAJE_SUPRAGINGIVAL="+String.valueOf(DETARTRAJE_SUPRAGINGIVAL));
		sb.append(",ESTADO_SUPRAGINGIVAL="+ESTADO_SUPRAGINGIVAL);
		sb.append(",FLUOR="+String.valueOf(FLUOR));
		sb.append(",ESTADO_FLUOR="+ESTADO_FLUOR);
		sb.append(",RESINA="+String.valueOf(RESINA));
		sb.append(",ESTADO_RESINA="+ESTADO_RESINA);
		sb.append(",PROFILAXIS="+String.valueOf(PROFILAXIS));
		sb.append(",ESTADO_PROFILAXIS="+ESTADO_PROFILAXIS);
		sb.append(",SELLANTES="+String.valueOf(SELLANTES));
		sb.append(",ESTADO_SELLANTES="+ESTADO_SELLANTES);
		sb.append(",FLUOROSIS="+FLUOROSIS);
		sb.append(",GESTANTE="+String.valueOf(GESTANTE));
		sb.append(",VIH="+String.valueOf(VIH));
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
		sb.append(",CLASE_GRADO="+CLASE_GRADO);
		sb.append(",CODIGO_CLAGRADO="+String.valueOf(CODIGO_CLAGRADO));
		sb.append(",GRADO="+GRADO);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",ESTPTRATAMIENTO="+ESTPTRATAMIENTO);
		sb.append(",TIPO_COPCEOP="+TIPO_COPCEOP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out4Struct implements routines.system.IPersistableRow<out4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return null;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String SEXO_SIGLA;

				public String getSEXO_SIGLA () {
					return this.SEXO_SIGLA;
				}

				public Boolean SEXO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean SEXO_SIGLAIsKey(){
				    return false;
				}
				public Integer SEXO_SIGLALength(){
				    return 1;
				}
				public Integer SEXO_SIGLAPrecision(){
				    return 0;
				}
				public String SEXO_SIGLADefault(){
				
					return null;
				
				}
				public String SEXO_SIGLAComment(){
				
				    return "";
				
				}
				public String SEXO_SIGLAPattern(){
				
					return "";
				
				}
				public String SEXO_SIGLAOriginalDbColumnName(){
				
					return "SEXO_SIGLA";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return 100;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return 0;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public BigDecimal VALOR_MENOR;

				public BigDecimal getVALOR_MENOR () {
					return this.VALOR_MENOR;
				}

				public Boolean VALOR_MENORIsNullable(){
				    return true;
				}
				public Boolean VALOR_MENORIsKey(){
				    return false;
				}
				public Integer VALOR_MENORLength(){
				    return 0;
				}
				public Integer VALOR_MENORPrecision(){
				    return null;
				}
				public String VALOR_MENORDefault(){
				
					return "";
				
				}
				public String VALOR_MENORComment(){
				
				    return "";
				
				}
				public String VALOR_MENORPattern(){
				
					return "";
				
				}
				public String VALOR_MENOROriginalDbColumnName(){
				
					return "VALOR_MENOR";
				
				}

				
			    public String RANGO_EDAD;

				public String getRANGO_EDAD () {
					return this.RANGO_EDAD;
				}

				public Boolean RANGO_EDADIsNullable(){
				    return true;
				}
				public Boolean RANGO_EDADIsKey(){
				    return false;
				}
				public Integer RANGO_EDADLength(){
				    return 4000;
				}
				public Integer RANGO_EDADPrecision(){
				    return 0;
				}
				public String RANGO_EDADDefault(){
				
					return null;
				
				}
				public String RANGO_EDADComment(){
				
				    return "";
				
				}
				public String RANGO_EDADPattern(){
				
					return "";
				
				}
				public String RANGO_EDADOriginalDbColumnName(){
				
					return "RANGO_EDAD";
				
				}

				
			    public String TIPO_VALORACION;

				public String getTIPO_VALORACION () {
					return this.TIPO_VALORACION;
				}

				public Boolean TIPO_VALORACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_VALORACIONIsKey(){
				    return false;
				}
				public Integer TIPO_VALORACIONLength(){
				    return 2;
				}
				public Integer TIPO_VALORACIONPrecision(){
				    return 0;
				}
				public String TIPO_VALORACIONDefault(){
				
					return null;
				
				}
				public String TIPO_VALORACIONComment(){
				
				    return "";
				
				}
				public String TIPO_VALORACIONPattern(){
				
					return "";
				
				}
				public String TIPO_VALORACIONOriginalDbColumnName(){
				
					return "TIPO_VALORACION";
				
				}

				
			    public String MORBILIDAD;

				public String getMORBILIDAD () {
					return this.MORBILIDAD;
				}

				public Boolean MORBILIDADIsNullable(){
				    return true;
				}
				public Boolean MORBILIDADIsKey(){
				    return false;
				}
				public Integer MORBILIDADLength(){
				    return null;
				}
				public Integer MORBILIDADPrecision(){
				    return null;
				}
				public String MORBILIDADDefault(){
				
					return null;
				
				}
				public String MORBILIDADComment(){
				
				    return "";
				
				}
				public String MORBILIDADPattern(){
				
					return "";
				
				}
				public String MORBILIDADOriginalDbColumnName(){
				
					return "MORBILIDAD";
				
				}

				
			    public BigDecimal OLEARY_VALOR;

				public BigDecimal getOLEARY_VALOR () {
					return this.OLEARY_VALOR;
				}

				public Boolean OLEARY_VALORIsNullable(){
				    return true;
				}
				public Boolean OLEARY_VALORIsKey(){
				    return false;
				}
				public Integer OLEARY_VALORLength(){
				    return 0;
				}
				public Integer OLEARY_VALORPrecision(){
				    return null;
				}
				public String OLEARY_VALORDefault(){
				
					return "";
				
				}
				public String OLEARY_VALORComment(){
				
				    return "";
				
				}
				public String OLEARY_VALORPattern(){
				
					return "";
				
				}
				public String OLEARY_VALOROriginalDbColumnName(){
				
					return "OLEARY_VALOR";
				
				}

				
			    public String OLEARY;

				public String getOLEARY () {
					return this.OLEARY;
				}

				public Boolean OLEARYIsNullable(){
				    return true;
				}
				public Boolean OLEARYIsKey(){
				    return false;
				}
				public Integer OLEARYLength(){
				    return 100;
				}
				public Integer OLEARYPrecision(){
				    return 0;
				}
				public String OLEARYDefault(){
				
					return null;
				
				}
				public String OLEARYComment(){
				
				    return "";
				
				}
				public String OLEARYPattern(){
				
					return "";
				
				}
				public String OLEARYOriginalDbColumnName(){
				
					return "OLEARY";
				
				}

				
			    public String BRUXISMO;

				public String getBRUXISMO () {
					return this.BRUXISMO;
				}

				public Boolean BRUXISMOIsNullable(){
				    return true;
				}
				public Boolean BRUXISMOIsKey(){
				    return false;
				}
				public Integer BRUXISMOLength(){
				    return 100;
				}
				public Integer BRUXISMOPrecision(){
				    return 0;
				}
				public String BRUXISMODefault(){
				
					return null;
				
				}
				public String BRUXISMOComment(){
				
				    return "";
				
				}
				public String BRUXISMOPattern(){
				
					return "";
				
				}
				public String BRUXISMOOriginalDbColumnName(){
				
					return "BRUXISMO";
				
				}

				
			    public String MUERDE_OBJETOS;

				public String getMUERDE_OBJETOS () {
					return this.MUERDE_OBJETOS;
				}

				public Boolean MUERDE_OBJETOSIsNullable(){
				    return true;
				}
				public Boolean MUERDE_OBJETOSIsKey(){
				    return false;
				}
				public Integer MUERDE_OBJETOSLength(){
				    return 100;
				}
				public Integer MUERDE_OBJETOSPrecision(){
				    return 0;
				}
				public String MUERDE_OBJETOSDefault(){
				
					return null;
				
				}
				public String MUERDE_OBJETOSComment(){
				
				    return "";
				
				}
				public String MUERDE_OBJETOSPattern(){
				
					return "";
				
				}
				public String MUERDE_OBJETOSOriginalDbColumnName(){
				
					return "MUERDE_OBJETOS";
				
				}

				
			    public String RESPIRADOR_NASAL;

				public String getRESPIRADOR_NASAL () {
					return this.RESPIRADOR_NASAL;
				}

				public Boolean RESPIRADOR_NASALIsNullable(){
				    return true;
				}
				public Boolean RESPIRADOR_NASALIsKey(){
				    return false;
				}
				public Integer RESPIRADOR_NASALLength(){
				    return 100;
				}
				public Integer RESPIRADOR_NASALPrecision(){
				    return 0;
				}
				public String RESPIRADOR_NASALDefault(){
				
					return null;
				
				}
				public String RESPIRADOR_NASALComment(){
				
				    return "";
				
				}
				public String RESPIRADOR_NASALPattern(){
				
					return "";
				
				}
				public String RESPIRADOR_NASALOriginalDbColumnName(){
				
					return "RESPIRADOR_NASAL";
				
				}

				
			    public String SUCCION_DIGITAL;

				public String getSUCCION_DIGITAL () {
					return this.SUCCION_DIGITAL;
				}

				public Boolean SUCCION_DIGITALIsNullable(){
				    return true;
				}
				public Boolean SUCCION_DIGITALIsKey(){
				    return false;
				}
				public Integer SUCCION_DIGITALLength(){
				    return 100;
				}
				public Integer SUCCION_DIGITALPrecision(){
				    return 0;
				}
				public String SUCCION_DIGITALDefault(){
				
					return null;
				
				}
				public String SUCCION_DIGITALComment(){
				
				    return "";
				
				}
				public String SUCCION_DIGITALPattern(){
				
					return "";
				
				}
				public String SUCCION_DIGITALOriginalDbColumnName(){
				
					return "SUCCION_DIGITAL";
				
				}

				
			    public String ONICOFAGIA;

				public String getONICOFAGIA () {
					return this.ONICOFAGIA;
				}

				public Boolean ONICOFAGIAIsNullable(){
				    return true;
				}
				public Boolean ONICOFAGIAIsKey(){
				    return false;
				}
				public Integer ONICOFAGIALength(){
				    return 100;
				}
				public Integer ONICOFAGIAPrecision(){
				    return 0;
				}
				public String ONICOFAGIADefault(){
				
					return null;
				
				}
				public String ONICOFAGIAComment(){
				
				    return "";
				
				}
				public String ONICOFAGIAPattern(){
				
					return "";
				
				}
				public String ONICOFAGIAOriginalDbColumnName(){
				
					return "ONICOFAGIA";
				
				}

				
			    public BigDecimal COP_CEOD;

				public BigDecimal getCOP_CEOD () {
					return this.COP_CEOD;
				}

				public Boolean COP_CEODIsNullable(){
				    return true;
				}
				public Boolean COP_CEODIsKey(){
				    return false;
				}
				public Integer COP_CEODLength(){
				    return 0;
				}
				public Integer COP_CEODPrecision(){
				    return null;
				}
				public String COP_CEODDefault(){
				
					return "";
				
				}
				public String COP_CEODComment(){
				
				    return "";
				
				}
				public String COP_CEODPattern(){
				
					return "";
				
				}
				public String COP_CEODOriginalDbColumnName(){
				
					return "COP_CEOD";
				
				}

				
			    public BigDecimal CARIADOS;

				public BigDecimal getCARIADOS () {
					return this.CARIADOS;
				}

				public Boolean CARIADOSIsNullable(){
				    return true;
				}
				public Boolean CARIADOSIsKey(){
				    return false;
				}
				public Integer CARIADOSLength(){
				    return 0;
				}
				public Integer CARIADOSPrecision(){
				    return null;
				}
				public String CARIADOSDefault(){
				
					return "";
				
				}
				public String CARIADOSComment(){
				
				    return "";
				
				}
				public String CARIADOSPattern(){
				
					return "";
				
				}
				public String CARIADOSOriginalDbColumnName(){
				
					return "CARIADOS";
				
				}

				
			    public BigDecimal OBTURADOS;

				public BigDecimal getOBTURADOS () {
					return this.OBTURADOS;
				}

				public Boolean OBTURADOSIsNullable(){
				    return true;
				}
				public Boolean OBTURADOSIsKey(){
				    return false;
				}
				public Integer OBTURADOSLength(){
				    return 0;
				}
				public Integer OBTURADOSPrecision(){
				    return null;
				}
				public String OBTURADOSDefault(){
				
					return "";
				
				}
				public String OBTURADOSComment(){
				
				    return "";
				
				}
				public String OBTURADOSPattern(){
				
					return "";
				
				}
				public String OBTURADOSOriginalDbColumnName(){
				
					return "OBTURADOS";
				
				}

				
			    public BigDecimal PERDIDOS_EXTRAIDOS;

				public BigDecimal getPERDIDOS_EXTRAIDOS () {
					return this.PERDIDOS_EXTRAIDOS;
				}

				public Boolean PERDIDOS_EXTRAIDOSIsNullable(){
				    return true;
				}
				public Boolean PERDIDOS_EXTRAIDOSIsKey(){
				    return false;
				}
				public Integer PERDIDOS_EXTRAIDOSLength(){
				    return 0;
				}
				public Integer PERDIDOS_EXTRAIDOSPrecision(){
				    return null;
				}
				public String PERDIDOS_EXTRAIDOSDefault(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSComment(){
				
				    return "";
				
				}
				public String PERDIDOS_EXTRAIDOSPattern(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSOriginalDbColumnName(){
				
					return "PERDIDOS_EXTRAIDOS";
				
				}

				
			    public String INTCP;

				public String getINTCP () {
					return this.INTCP;
				}

				public Boolean INTCPIsNullable(){
				    return true;
				}
				public Boolean INTCPIsKey(){
				    return false;
				}
				public Integer INTCPLength(){
				    return 100;
				}
				public Integer INTCPPrecision(){
				    return 0;
				}
				public String INTCPDefault(){
				
					return null;
				
				}
				public String INTCPComment(){
				
				    return "";
				
				}
				public String INTCPPattern(){
				
					return "";
				
				}
				public String INTCPOriginalDbColumnName(){
				
					return "INTCP";
				
				}

				
			    public BigDecimal DIENTES_TEMPORALES;

				public BigDecimal getDIENTES_TEMPORALES () {
					return this.DIENTES_TEMPORALES;
				}

				public Boolean DIENTES_TEMPORALESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_TEMPORALESIsKey(){
				    return false;
				}
				public Integer DIENTES_TEMPORALESLength(){
				    return 0;
				}
				public Integer DIENTES_TEMPORALESPrecision(){
				    return null;
				}
				public String DIENTES_TEMPORALESDefault(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESComment(){
				
				    return "";
				
				}
				public String DIENTES_TEMPORALESPattern(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESOriginalDbColumnName(){
				
					return "DIENTES_TEMPORALES";
				
				}

				
			    public BigDecimal DIENTES_PERMANENTES;

				public BigDecimal getDIENTES_PERMANENTES () {
					return this.DIENTES_PERMANENTES;
				}

				public Boolean DIENTES_PERMANENTESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_PERMANENTESIsKey(){
				    return false;
				}
				public Integer DIENTES_PERMANENTESLength(){
				    return 0;
				}
				public Integer DIENTES_PERMANENTESPrecision(){
				    return null;
				}
				public String DIENTES_PERMANENTESDefault(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESComment(){
				
				    return "";
				
				}
				public String DIENTES_PERMANENTESPattern(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESOriginalDbColumnName(){
				
					return "DIENTES_PERMANENTES";
				
				}

				
			    public BigDecimal PROTESIS;

				public BigDecimal getPROTESIS () {
					return this.PROTESIS;
				}

				public Boolean PROTESISIsNullable(){
				    return true;
				}
				public Boolean PROTESISIsKey(){
				    return false;
				}
				public Integer PROTESISLength(){
				    return 3;
				}
				public Integer PROTESISPrecision(){
				    return 0;
				}
				public String PROTESISDefault(){
				
					return null;
				
				}
				public String PROTESISComment(){
				
				    return "";
				
				}
				public String PROTESISPattern(){
				
					return "";
				
				}
				public String PROTESISOriginalDbColumnName(){
				
					return "PROTESIS";
				
				}

				
			    public BigDecimal PLACA_DENTAL;

				public BigDecimal getPLACA_DENTAL () {
					return this.PLACA_DENTAL;
				}

				public Boolean PLACA_DENTALIsNullable(){
				    return true;
				}
				public Boolean PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer PLACA_DENTALLength(){
				    return null;
				}
				public Integer PLACA_DENTALPrecision(){
				    return null;
				}
				public String PLACA_DENTALDefault(){
				
					return "";
				
				}
				public String PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String PLACA_DENTALOriginalDbColumnName(){
				
					return "PLACA_DENTAL";
				
				}

				
			    public String ESTADO_PLACA_DENTAL;

				public String getESTADO_PLACA_DENTAL () {
					return this.ESTADO_PLACA_DENTAL;
				}

				public Boolean ESTADO_PLACA_DENTALIsNullable(){
				    return true;
				}
				public Boolean ESTADO_PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer ESTADO_PLACA_DENTALLength(){
				    return null;
				}
				public Integer ESTADO_PLACA_DENTALPrecision(){
				    return null;
				}
				public String ESTADO_PLACA_DENTALDefault(){
				
					return null;
				
				}
				public String ESTADO_PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String ESTADO_PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String ESTADO_PLACA_DENTALOriginalDbColumnName(){
				
					return "ESTADO_PLACA_DENTAL";
				
				}

				
			    public BigDecimal DETARTRAJE_SUPRAGINGIVAL;

				public BigDecimal getDETARTRAJE_SUPRAGINGIVAL () {
					return this.DETARTRAJE_SUPRAGINGIVAL;
				}

				public Boolean DETARTRAJE_SUPRAGINGIVALIsNullable(){
				    return true;
				}
				public Boolean DETARTRAJE_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALLength(){
				    return null;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String DETARTRAJE_SUPRAGINGIVALDefault(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "DETARTRAJE_SUPRAGINGIVAL";
				
				}

				
			    public String ESTADO_SUPRAGINGIVAL;

				public String getESTADO_SUPRAGINGIVAL () {
					return this.ESTADO_SUPRAGINGIVAL;
				}

				public Boolean ESTADO_SUPRAGINGIVALIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer ESTADO_SUPRAGINGIVALLength(){
				    return null;
				}
				public Integer ESTADO_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String ESTADO_SUPRAGINGIVALDefault(){
				
					return null;
				
				}
				public String ESTADO_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String ESTADO_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String ESTADO_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "ESTADO_SUPRAGINGIVAL";
				
				}

				
			    public BigDecimal FLUOR;

				public BigDecimal getFLUOR () {
					return this.FLUOR;
				}

				public Boolean FLUORIsNullable(){
				    return true;
				}
				public Boolean FLUORIsKey(){
				    return false;
				}
				public Integer FLUORLength(){
				    return null;
				}
				public Integer FLUORPrecision(){
				    return null;
				}
				public String FLUORDefault(){
				
					return "";
				
				}
				public String FLUORComment(){
				
				    return "";
				
				}
				public String FLUORPattern(){
				
					return "";
				
				}
				public String FLUOROriginalDbColumnName(){
				
					return "FLUOR";
				
				}

				
			    public String ESTADO_FLUOR;

				public String getESTADO_FLUOR () {
					return this.ESTADO_FLUOR;
				}

				public Boolean ESTADO_FLUORIsNullable(){
				    return true;
				}
				public Boolean ESTADO_FLUORIsKey(){
				    return false;
				}
				public Integer ESTADO_FLUORLength(){
				    return null;
				}
				public Integer ESTADO_FLUORPrecision(){
				    return null;
				}
				public String ESTADO_FLUORDefault(){
				
					return null;
				
				}
				public String ESTADO_FLUORComment(){
				
				    return "";
				
				}
				public String ESTADO_FLUORPattern(){
				
					return "";
				
				}
				public String ESTADO_FLUOROriginalDbColumnName(){
				
					return "ESTADO_FLUOR";
				
				}

				
			    public BigDecimal RESINA;

				public BigDecimal getRESINA () {
					return this.RESINA;
				}

				public Boolean RESINAIsNullable(){
				    return true;
				}
				public Boolean RESINAIsKey(){
				    return false;
				}
				public Integer RESINALength(){
				    return null;
				}
				public Integer RESINAPrecision(){
				    return null;
				}
				public String RESINADefault(){
				
					return "";
				
				}
				public String RESINAComment(){
				
				    return "";
				
				}
				public String RESINAPattern(){
				
					return "";
				
				}
				public String RESINAOriginalDbColumnName(){
				
					return "RESINA";
				
				}

				
			    public String ESTADO_RESINA;

				public String getESTADO_RESINA () {
					return this.ESTADO_RESINA;
				}

				public Boolean ESTADO_RESINAIsNullable(){
				    return false;
				}
				public Boolean ESTADO_RESINAIsKey(){
				    return false;
				}
				public Integer ESTADO_RESINALength(){
				    return null;
				}
				public Integer ESTADO_RESINAPrecision(){
				    return null;
				}
				public String ESTADO_RESINADefault(){
				
					return null;
				
				}
				public String ESTADO_RESINAComment(){
				
				    return "";
				
				}
				public String ESTADO_RESINAPattern(){
				
					return "";
				
				}
				public String ESTADO_RESINAOriginalDbColumnName(){
				
					return "ESTADO_RESINA";
				
				}

				
			    public BigDecimal PROFILAXIS;

				public BigDecimal getPROFILAXIS () {
					return this.PROFILAXIS;
				}

				public Boolean PROFILAXISIsNullable(){
				    return true;
				}
				public Boolean PROFILAXISIsKey(){
				    return false;
				}
				public Integer PROFILAXISLength(){
				    return null;
				}
				public Integer PROFILAXISPrecision(){
				    return null;
				}
				public String PROFILAXISDefault(){
				
					return "";
				
				}
				public String PROFILAXISComment(){
				
				    return "";
				
				}
				public String PROFILAXISPattern(){
				
					return "";
				
				}
				public String PROFILAXISOriginalDbColumnName(){
				
					return "PROFILAXIS";
				
				}

				
			    public String ESTADO_PROFILAXIS;

				public String getESTADO_PROFILAXIS () {
					return this.ESTADO_PROFILAXIS;
				}

				public Boolean ESTADO_PROFILAXISIsNullable(){
				    return false;
				}
				public Boolean ESTADO_PROFILAXISIsKey(){
				    return false;
				}
				public Integer ESTADO_PROFILAXISLength(){
				    return null;
				}
				public Integer ESTADO_PROFILAXISPrecision(){
				    return null;
				}
				public String ESTADO_PROFILAXISDefault(){
				
					return null;
				
				}
				public String ESTADO_PROFILAXISComment(){
				
				    return "";
				
				}
				public String ESTADO_PROFILAXISPattern(){
				
					return "";
				
				}
				public String ESTADO_PROFILAXISOriginalDbColumnName(){
				
					return "ESTADO_PROFILAXIS";
				
				}

				
			    public BigDecimal SELLANTES;

				public BigDecimal getSELLANTES () {
					return this.SELLANTES;
				}

				public Boolean SELLANTESIsNullable(){
				    return true;
				}
				public Boolean SELLANTESIsKey(){
				    return false;
				}
				public Integer SELLANTESLength(){
				    return null;
				}
				public Integer SELLANTESPrecision(){
				    return null;
				}
				public String SELLANTESDefault(){
				
					return "";
				
				}
				public String SELLANTESComment(){
				
				    return "";
				
				}
				public String SELLANTESPattern(){
				
					return "";
				
				}
				public String SELLANTESOriginalDbColumnName(){
				
					return "SELLANTES";
				
				}

				
			    public String ESTADO_SELLANTES;

				public String getESTADO_SELLANTES () {
					return this.ESTADO_SELLANTES;
				}

				public Boolean ESTADO_SELLANTESIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SELLANTESIsKey(){
				    return false;
				}
				public Integer ESTADO_SELLANTESLength(){
				    return null;
				}
				public Integer ESTADO_SELLANTESPrecision(){
				    return null;
				}
				public String ESTADO_SELLANTESDefault(){
				
					return null;
				
				}
				public String ESTADO_SELLANTESComment(){
				
				    return "";
				
				}
				public String ESTADO_SELLANTESPattern(){
				
					return "";
				
				}
				public String ESTADO_SELLANTESOriginalDbColumnName(){
				
					return "ESTADO_SELLANTES";
				
				}

				
			    public String FLUOROSIS;

				public String getFLUOROSIS () {
					return this.FLUOROSIS;
				}

				public Boolean FLUOROSISIsNullable(){
				    return true;
				}
				public Boolean FLUOROSISIsKey(){
				    return false;
				}
				public Integer FLUOROSISLength(){
				    return 12;
				}
				public Integer FLUOROSISPrecision(){
				    return 0;
				}
				public String FLUOROSISDefault(){
				
					return null;
				
				}
				public String FLUOROSISComment(){
				
				    return "";
				
				}
				public String FLUOROSISPattern(){
				
					return "";
				
				}
				public String FLUOROSISOriginalDbColumnName(){
				
					return "FLUOROSIS";
				
				}

				
			    public String CLASE_GRADO;

				public String getCLASE_GRADO () {
					return this.CLASE_GRADO;
				}

				public Boolean CLASE_GRADOIsNullable(){
				    return true;
				}
				public Boolean CLASE_GRADOIsKey(){
				    return false;
				}
				public Integer CLASE_GRADOLength(){
				    return 100;
				}
				public Integer CLASE_GRADOPrecision(){
				    return 0;
				}
				public String CLASE_GRADODefault(){
				
					return null;
				
				}
				public String CLASE_GRADOComment(){
				
				    return "";
				
				}
				public String CLASE_GRADOPattern(){
				
					return "";
				
				}
				public String CLASE_GRADOOriginalDbColumnName(){
				
					return "CLASE_GRADO";
				
				}

				
			    public BigDecimal CODIGO_CLAGRADO;

				public BigDecimal getCODIGO_CLAGRADO () {
					return this.CODIGO_CLAGRADO;
				}

				public Boolean CODIGO_CLAGRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CLAGRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_CLAGRADOLength(){
				    return 6;
				}
				public Integer CODIGO_CLAGRADOPrecision(){
				    return 0;
				}
				public String CODIGO_CLAGRADODefault(){
				
					return null;
				
				}
				public String CODIGO_CLAGRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_CLAGRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOOriginalDbColumnName(){
				
					return "CODIGO_CLAGRADO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String TIPO_COPCEOP;

				public String getTIPO_COPCEOP () {
					return this.TIPO_COPCEOP;
				}

				public Boolean TIPO_COPCEOPIsNullable(){
				    return true;
				}
				public Boolean TIPO_COPCEOPIsKey(){
				    return false;
				}
				public Integer TIPO_COPCEOPLength(){
				    return 5;
				}
				public Integer TIPO_COPCEOPPrecision(){
				    return 0;
				}
				public String TIPO_COPCEOPDefault(){
				
					return null;
				
				}
				public String TIPO_COPCEOPComment(){
				
				    return "";
				
				}
				public String TIPO_COPCEOPPattern(){
				
					return "";
				
				}
				public String TIPO_COPCEOPOriginalDbColumnName(){
				
					return "TIPO_COPCEOP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
						this.PLACA_DENTAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_PLACA_DENTAL = readString(dis);
					
						this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_SUPRAGINGIVAL = readString(dis);
					
						this.FLUOR = (BigDecimal) dis.readObject();
					
					this.ESTADO_FLUOR = readString(dis);
					
						this.RESINA = (BigDecimal) dis.readObject();
					
					this.ESTADO_RESINA = readString(dis);
					
						this.PROFILAXIS = (BigDecimal) dis.readObject();
					
					this.ESTADO_PROFILAXIS = readString(dis);
					
						this.SELLANTES = (BigDecimal) dis.readObject();
					
					this.ESTADO_SELLANTES = readString(dis);
					
					this.FLUOROSIS = readString(dis);
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
						this.PLACA_DENTAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_PLACA_DENTAL = readString(dis);
					
						this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_SUPRAGINGIVAL = readString(dis);
					
						this.FLUOR = (BigDecimal) dis.readObject();
					
					this.ESTADO_FLUOR = readString(dis);
					
						this.RESINA = (BigDecimal) dis.readObject();
					
					this.ESTADO_RESINA = readString(dis);
					
						this.PROFILAXIS = (BigDecimal) dis.readObject();
					
					this.ESTADO_PROFILAXIS = readString(dis);
					
						this.SELLANTES = (BigDecimal) dis.readObject();
					
					this.ESTADO_SELLANTES = readString(dis);
					
					this.FLUOROSIS = readString(dis);
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROTESIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PLACA_DENTAL);
					
					// String
				
						writeString(this.ESTADO_PLACA_DENTAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
					// String
				
						writeString(this.ESTADO_SUPRAGINGIVAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FLUOR);
					
					// String
				
						writeString(this.ESTADO_FLUOR,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.RESINA);
					
					// String
				
						writeString(this.ESTADO_RESINA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFILAXIS);
					
					// String
				
						writeString(this.ESTADO_PROFILAXIS,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.SELLANTES);
					
					// String
				
						writeString(this.ESTADO_SELLANTES,dos);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROTESIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PLACA_DENTAL);
					
					// String
				
						writeString(this.ESTADO_PLACA_DENTAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
					// String
				
						writeString(this.ESTADO_SUPRAGINGIVAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FLUOR);
					
					// String
				
						writeString(this.ESTADO_FLUOR,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.RESINA);
					
					// String
				
						writeString(this.ESTADO_RESINA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFILAXIS);
					
					// String
				
						writeString(this.ESTADO_PROFILAXIS,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.SELLANTES);
					
					// String
				
						writeString(this.ESTADO_SELLANTES,dos);
					
					// String
				
						writeString(this.FLUOROSIS,dos);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",SEXO_SIGLA="+SEXO_SIGLA);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",VALOR_MENOR="+String.valueOf(VALOR_MENOR));
		sb.append(",RANGO_EDAD="+RANGO_EDAD);
		sb.append(",TIPO_VALORACION="+TIPO_VALORACION);
		sb.append(",MORBILIDAD="+MORBILIDAD);
		sb.append(",OLEARY_VALOR="+String.valueOf(OLEARY_VALOR));
		sb.append(",OLEARY="+OLEARY);
		sb.append(",BRUXISMO="+BRUXISMO);
		sb.append(",MUERDE_OBJETOS="+MUERDE_OBJETOS);
		sb.append(",RESPIRADOR_NASAL="+RESPIRADOR_NASAL);
		sb.append(",SUCCION_DIGITAL="+SUCCION_DIGITAL);
		sb.append(",ONICOFAGIA="+ONICOFAGIA);
		sb.append(",COP_CEOD="+String.valueOf(COP_CEOD));
		sb.append(",CARIADOS="+String.valueOf(CARIADOS));
		sb.append(",OBTURADOS="+String.valueOf(OBTURADOS));
		sb.append(",PERDIDOS_EXTRAIDOS="+String.valueOf(PERDIDOS_EXTRAIDOS));
		sb.append(",INTCP="+INTCP);
		sb.append(",DIENTES_TEMPORALES="+String.valueOf(DIENTES_TEMPORALES));
		sb.append(",DIENTES_PERMANENTES="+String.valueOf(DIENTES_PERMANENTES));
		sb.append(",PROTESIS="+String.valueOf(PROTESIS));
		sb.append(",PLACA_DENTAL="+String.valueOf(PLACA_DENTAL));
		sb.append(",ESTADO_PLACA_DENTAL="+ESTADO_PLACA_DENTAL);
		sb.append(",DETARTRAJE_SUPRAGINGIVAL="+String.valueOf(DETARTRAJE_SUPRAGINGIVAL));
		sb.append(",ESTADO_SUPRAGINGIVAL="+ESTADO_SUPRAGINGIVAL);
		sb.append(",FLUOR="+String.valueOf(FLUOR));
		sb.append(",ESTADO_FLUOR="+ESTADO_FLUOR);
		sb.append(",RESINA="+String.valueOf(RESINA));
		sb.append(",ESTADO_RESINA="+ESTADO_RESINA);
		sb.append(",PROFILAXIS="+String.valueOf(PROFILAXIS));
		sb.append(",ESTADO_PROFILAXIS="+ESTADO_PROFILAXIS);
		sb.append(",SELLANTES="+String.valueOf(SELLANTES));
		sb.append(",ESTADO_SELLANTES="+ESTADO_SELLANTES);
		sb.append(",FLUOROSIS="+FLUOROSIS);
		sb.append(",CLASE_GRADO="+CLASE_GRADO);
		sb.append(",CODIGO_CLAGRADO="+String.valueOf(CODIGO_CLAGRADO));
		sb.append(",GRADO="+GRADO);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TIPO_COPCEOP="+TIPO_COPCEOP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out3Struct implements routines.system.IPersistableRow<out3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return null;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return null;
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String SEXO_SIGLA;

				public String getSEXO_SIGLA () {
					return this.SEXO_SIGLA;
				}

				public Boolean SEXO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean SEXO_SIGLAIsKey(){
				    return false;
				}
				public Integer SEXO_SIGLALength(){
				    return 1;
				}
				public Integer SEXO_SIGLAPrecision(){
				    return 0;
				}
				public String SEXO_SIGLADefault(){
				
					return null;
				
				}
				public String SEXO_SIGLAComment(){
				
				    return "";
				
				}
				public String SEXO_SIGLAPattern(){
				
					return "";
				
				}
				public String SEXO_SIGLAOriginalDbColumnName(){
				
					return "SEXO_SIGLA";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return 100;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return 0;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public BigDecimal VALOR_MENOR;

				public BigDecimal getVALOR_MENOR () {
					return this.VALOR_MENOR;
				}

				public Boolean VALOR_MENORIsNullable(){
				    return true;
				}
				public Boolean VALOR_MENORIsKey(){
				    return false;
				}
				public Integer VALOR_MENORLength(){
				    return 0;
				}
				public Integer VALOR_MENORPrecision(){
				    return null;
				}
				public String VALOR_MENORDefault(){
				
					return "";
				
				}
				public String VALOR_MENORComment(){
				
				    return "";
				
				}
				public String VALOR_MENORPattern(){
				
					return "";
				
				}
				public String VALOR_MENOROriginalDbColumnName(){
				
					return "VALOR_MENOR";
				
				}

				
			    public String RANGO_EDAD;

				public String getRANGO_EDAD () {
					return this.RANGO_EDAD;
				}

				public Boolean RANGO_EDADIsNullable(){
				    return true;
				}
				public Boolean RANGO_EDADIsKey(){
				    return false;
				}
				public Integer RANGO_EDADLength(){
				    return 4000;
				}
				public Integer RANGO_EDADPrecision(){
				    return 0;
				}
				public String RANGO_EDADDefault(){
				
					return null;
				
				}
				public String RANGO_EDADComment(){
				
				    return "";
				
				}
				public String RANGO_EDADPattern(){
				
					return "";
				
				}
				public String RANGO_EDADOriginalDbColumnName(){
				
					return "RANGO_EDAD";
				
				}

				
			    public String TIPO_VALORACION;

				public String getTIPO_VALORACION () {
					return this.TIPO_VALORACION;
				}

				public Boolean TIPO_VALORACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_VALORACIONIsKey(){
				    return false;
				}
				public Integer TIPO_VALORACIONLength(){
				    return 2;
				}
				public Integer TIPO_VALORACIONPrecision(){
				    return 0;
				}
				public String TIPO_VALORACIONDefault(){
				
					return null;
				
				}
				public String TIPO_VALORACIONComment(){
				
				    return "";
				
				}
				public String TIPO_VALORACIONPattern(){
				
					return "";
				
				}
				public String TIPO_VALORACIONOriginalDbColumnName(){
				
					return "TIPO_VALORACION";
				
				}

				
			    public String MORBILIDAD;

				public String getMORBILIDAD () {
					return this.MORBILIDAD;
				}

				public Boolean MORBILIDADIsNullable(){
				    return true;
				}
				public Boolean MORBILIDADIsKey(){
				    return false;
				}
				public Integer MORBILIDADLength(){
				    return null;
				}
				public Integer MORBILIDADPrecision(){
				    return null;
				}
				public String MORBILIDADDefault(){
				
					return null;
				
				}
				public String MORBILIDADComment(){
				
				    return "";
				
				}
				public String MORBILIDADPattern(){
				
					return "";
				
				}
				public String MORBILIDADOriginalDbColumnName(){
				
					return "MORBILIDAD";
				
				}

				
			    public BigDecimal OLEARY_VALOR;

				public BigDecimal getOLEARY_VALOR () {
					return this.OLEARY_VALOR;
				}

				public Boolean OLEARY_VALORIsNullable(){
				    return true;
				}
				public Boolean OLEARY_VALORIsKey(){
				    return false;
				}
				public Integer OLEARY_VALORLength(){
				    return 0;
				}
				public Integer OLEARY_VALORPrecision(){
				    return null;
				}
				public String OLEARY_VALORDefault(){
				
					return "";
				
				}
				public String OLEARY_VALORComment(){
				
				    return "";
				
				}
				public String OLEARY_VALORPattern(){
				
					return "";
				
				}
				public String OLEARY_VALOROriginalDbColumnName(){
				
					return "OLEARY_VALOR";
				
				}

				
			    public String OLEARY;

				public String getOLEARY () {
					return this.OLEARY;
				}

				public Boolean OLEARYIsNullable(){
				    return true;
				}
				public Boolean OLEARYIsKey(){
				    return false;
				}
				public Integer OLEARYLength(){
				    return 100;
				}
				public Integer OLEARYPrecision(){
				    return 0;
				}
				public String OLEARYDefault(){
				
					return null;
				
				}
				public String OLEARYComment(){
				
				    return "";
				
				}
				public String OLEARYPattern(){
				
					return "";
				
				}
				public String OLEARYOriginalDbColumnName(){
				
					return "OLEARY";
				
				}

				
			    public String BRUXISMO;

				public String getBRUXISMO () {
					return this.BRUXISMO;
				}

				public Boolean BRUXISMOIsNullable(){
				    return true;
				}
				public Boolean BRUXISMOIsKey(){
				    return false;
				}
				public Integer BRUXISMOLength(){
				    return 100;
				}
				public Integer BRUXISMOPrecision(){
				    return 0;
				}
				public String BRUXISMODefault(){
				
					return null;
				
				}
				public String BRUXISMOComment(){
				
				    return "";
				
				}
				public String BRUXISMOPattern(){
				
					return "";
				
				}
				public String BRUXISMOOriginalDbColumnName(){
				
					return "BRUXISMO";
				
				}

				
			    public String MUERDE_OBJETOS;

				public String getMUERDE_OBJETOS () {
					return this.MUERDE_OBJETOS;
				}

				public Boolean MUERDE_OBJETOSIsNullable(){
				    return true;
				}
				public Boolean MUERDE_OBJETOSIsKey(){
				    return false;
				}
				public Integer MUERDE_OBJETOSLength(){
				    return 100;
				}
				public Integer MUERDE_OBJETOSPrecision(){
				    return 0;
				}
				public String MUERDE_OBJETOSDefault(){
				
					return null;
				
				}
				public String MUERDE_OBJETOSComment(){
				
				    return "";
				
				}
				public String MUERDE_OBJETOSPattern(){
				
					return "";
				
				}
				public String MUERDE_OBJETOSOriginalDbColumnName(){
				
					return "MUERDE_OBJETOS";
				
				}

				
			    public String RESPIRADOR_NASAL;

				public String getRESPIRADOR_NASAL () {
					return this.RESPIRADOR_NASAL;
				}

				public Boolean RESPIRADOR_NASALIsNullable(){
				    return true;
				}
				public Boolean RESPIRADOR_NASALIsKey(){
				    return false;
				}
				public Integer RESPIRADOR_NASALLength(){
				    return 100;
				}
				public Integer RESPIRADOR_NASALPrecision(){
				    return 0;
				}
				public String RESPIRADOR_NASALDefault(){
				
					return null;
				
				}
				public String RESPIRADOR_NASALComment(){
				
				    return "";
				
				}
				public String RESPIRADOR_NASALPattern(){
				
					return "";
				
				}
				public String RESPIRADOR_NASALOriginalDbColumnName(){
				
					return "RESPIRADOR_NASAL";
				
				}

				
			    public String SUCCION_DIGITAL;

				public String getSUCCION_DIGITAL () {
					return this.SUCCION_DIGITAL;
				}

				public Boolean SUCCION_DIGITALIsNullable(){
				    return true;
				}
				public Boolean SUCCION_DIGITALIsKey(){
				    return false;
				}
				public Integer SUCCION_DIGITALLength(){
				    return 100;
				}
				public Integer SUCCION_DIGITALPrecision(){
				    return 0;
				}
				public String SUCCION_DIGITALDefault(){
				
					return null;
				
				}
				public String SUCCION_DIGITALComment(){
				
				    return "";
				
				}
				public String SUCCION_DIGITALPattern(){
				
					return "";
				
				}
				public String SUCCION_DIGITALOriginalDbColumnName(){
				
					return "SUCCION_DIGITAL";
				
				}

				
			    public String ONICOFAGIA;

				public String getONICOFAGIA () {
					return this.ONICOFAGIA;
				}

				public Boolean ONICOFAGIAIsNullable(){
				    return true;
				}
				public Boolean ONICOFAGIAIsKey(){
				    return false;
				}
				public Integer ONICOFAGIALength(){
				    return 100;
				}
				public Integer ONICOFAGIAPrecision(){
				    return 0;
				}
				public String ONICOFAGIADefault(){
				
					return null;
				
				}
				public String ONICOFAGIAComment(){
				
				    return "";
				
				}
				public String ONICOFAGIAPattern(){
				
					return "";
				
				}
				public String ONICOFAGIAOriginalDbColumnName(){
				
					return "ONICOFAGIA";
				
				}

				
			    public BigDecimal COP_CEOD;

				public BigDecimal getCOP_CEOD () {
					return this.COP_CEOD;
				}

				public Boolean COP_CEODIsNullable(){
				    return true;
				}
				public Boolean COP_CEODIsKey(){
				    return false;
				}
				public Integer COP_CEODLength(){
				    return 0;
				}
				public Integer COP_CEODPrecision(){
				    return null;
				}
				public String COP_CEODDefault(){
				
					return "";
				
				}
				public String COP_CEODComment(){
				
				    return "";
				
				}
				public String COP_CEODPattern(){
				
					return "";
				
				}
				public String COP_CEODOriginalDbColumnName(){
				
					return "COP_CEOD";
				
				}

				
			    public BigDecimal CARIADOS;

				public BigDecimal getCARIADOS () {
					return this.CARIADOS;
				}

				public Boolean CARIADOSIsNullable(){
				    return true;
				}
				public Boolean CARIADOSIsKey(){
				    return false;
				}
				public Integer CARIADOSLength(){
				    return 0;
				}
				public Integer CARIADOSPrecision(){
				    return null;
				}
				public String CARIADOSDefault(){
				
					return "";
				
				}
				public String CARIADOSComment(){
				
				    return "";
				
				}
				public String CARIADOSPattern(){
				
					return "";
				
				}
				public String CARIADOSOriginalDbColumnName(){
				
					return "CARIADOS";
				
				}

				
			    public BigDecimal OBTURADOS;

				public BigDecimal getOBTURADOS () {
					return this.OBTURADOS;
				}

				public Boolean OBTURADOSIsNullable(){
				    return true;
				}
				public Boolean OBTURADOSIsKey(){
				    return false;
				}
				public Integer OBTURADOSLength(){
				    return 0;
				}
				public Integer OBTURADOSPrecision(){
				    return null;
				}
				public String OBTURADOSDefault(){
				
					return "";
				
				}
				public String OBTURADOSComment(){
				
				    return "";
				
				}
				public String OBTURADOSPattern(){
				
					return "";
				
				}
				public String OBTURADOSOriginalDbColumnName(){
				
					return "OBTURADOS";
				
				}

				
			    public BigDecimal PERDIDOS_EXTRAIDOS;

				public BigDecimal getPERDIDOS_EXTRAIDOS () {
					return this.PERDIDOS_EXTRAIDOS;
				}

				public Boolean PERDIDOS_EXTRAIDOSIsNullable(){
				    return true;
				}
				public Boolean PERDIDOS_EXTRAIDOSIsKey(){
				    return false;
				}
				public Integer PERDIDOS_EXTRAIDOSLength(){
				    return 0;
				}
				public Integer PERDIDOS_EXTRAIDOSPrecision(){
				    return null;
				}
				public String PERDIDOS_EXTRAIDOSDefault(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSComment(){
				
				    return "";
				
				}
				public String PERDIDOS_EXTRAIDOSPattern(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSOriginalDbColumnName(){
				
					return "PERDIDOS_EXTRAIDOS";
				
				}

				
			    public String INTCP;

				public String getINTCP () {
					return this.INTCP;
				}

				public Boolean INTCPIsNullable(){
				    return true;
				}
				public Boolean INTCPIsKey(){
				    return false;
				}
				public Integer INTCPLength(){
				    return 100;
				}
				public Integer INTCPPrecision(){
				    return 0;
				}
				public String INTCPDefault(){
				
					return null;
				
				}
				public String INTCPComment(){
				
				    return "";
				
				}
				public String INTCPPattern(){
				
					return "";
				
				}
				public String INTCPOriginalDbColumnName(){
				
					return "INTCP";
				
				}

				
			    public BigDecimal DIENTES_TEMPORALES;

				public BigDecimal getDIENTES_TEMPORALES () {
					return this.DIENTES_TEMPORALES;
				}

				public Boolean DIENTES_TEMPORALESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_TEMPORALESIsKey(){
				    return false;
				}
				public Integer DIENTES_TEMPORALESLength(){
				    return 0;
				}
				public Integer DIENTES_TEMPORALESPrecision(){
				    return null;
				}
				public String DIENTES_TEMPORALESDefault(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESComment(){
				
				    return "";
				
				}
				public String DIENTES_TEMPORALESPattern(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESOriginalDbColumnName(){
				
					return "DIENTES_TEMPORALES";
				
				}

				
			    public BigDecimal DIENTES_PERMANENTES;

				public BigDecimal getDIENTES_PERMANENTES () {
					return this.DIENTES_PERMANENTES;
				}

				public Boolean DIENTES_PERMANENTESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_PERMANENTESIsKey(){
				    return false;
				}
				public Integer DIENTES_PERMANENTESLength(){
				    return 0;
				}
				public Integer DIENTES_PERMANENTESPrecision(){
				    return null;
				}
				public String DIENTES_PERMANENTESDefault(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESComment(){
				
				    return "";
				
				}
				public String DIENTES_PERMANENTESPattern(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESOriginalDbColumnName(){
				
					return "DIENTES_PERMANENTES";
				
				}

				
			    public BigDecimal PROTESIS;

				public BigDecimal getPROTESIS () {
					return this.PROTESIS;
				}

				public Boolean PROTESISIsNullable(){
				    return true;
				}
				public Boolean PROTESISIsKey(){
				    return false;
				}
				public Integer PROTESISLength(){
				    return 3;
				}
				public Integer PROTESISPrecision(){
				    return 0;
				}
				public String PROTESISDefault(){
				
					return null;
				
				}
				public String PROTESISComment(){
				
				    return "";
				
				}
				public String PROTESISPattern(){
				
					return "";
				
				}
				public String PROTESISOriginalDbColumnName(){
				
					return "PROTESIS";
				
				}

				
			    public BigDecimal PLACA_DENTAL;

				public BigDecimal getPLACA_DENTAL () {
					return this.PLACA_DENTAL;
				}

				public Boolean PLACA_DENTALIsNullable(){
				    return true;
				}
				public Boolean PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer PLACA_DENTALLength(){
				    return null;
				}
				public Integer PLACA_DENTALPrecision(){
				    return null;
				}
				public String PLACA_DENTALDefault(){
				
					return "";
				
				}
				public String PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String PLACA_DENTALOriginalDbColumnName(){
				
					return "PLACA_DENTAL";
				
				}

				
			    public String ESTADO_PLACA_DENTAL;

				public String getESTADO_PLACA_DENTAL () {
					return this.ESTADO_PLACA_DENTAL;
				}

				public Boolean ESTADO_PLACA_DENTALIsNullable(){
				    return true;
				}
				public Boolean ESTADO_PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer ESTADO_PLACA_DENTALLength(){
				    return null;
				}
				public Integer ESTADO_PLACA_DENTALPrecision(){
				    return null;
				}
				public String ESTADO_PLACA_DENTALDefault(){
				
					return null;
				
				}
				public String ESTADO_PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String ESTADO_PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String ESTADO_PLACA_DENTALOriginalDbColumnName(){
				
					return "ESTADO_PLACA_DENTAL";
				
				}

				
			    public BigDecimal DETARTRAJE_SUPRAGINGIVAL;

				public BigDecimal getDETARTRAJE_SUPRAGINGIVAL () {
					return this.DETARTRAJE_SUPRAGINGIVAL;
				}

				public Boolean DETARTRAJE_SUPRAGINGIVALIsNullable(){
				    return true;
				}
				public Boolean DETARTRAJE_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALLength(){
				    return null;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String DETARTRAJE_SUPRAGINGIVALDefault(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "DETARTRAJE_SUPRAGINGIVAL";
				
				}

				
			    public String ESTADO_SUPRAGINGIVAL;

				public String getESTADO_SUPRAGINGIVAL () {
					return this.ESTADO_SUPRAGINGIVAL;
				}

				public Boolean ESTADO_SUPRAGINGIVALIsNullable(){
				    return true;
				}
				public Boolean ESTADO_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer ESTADO_SUPRAGINGIVALLength(){
				    return null;
				}
				public Integer ESTADO_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String ESTADO_SUPRAGINGIVALDefault(){
				
					return null;
				
				}
				public String ESTADO_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String ESTADO_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String ESTADO_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "ESTADO_SUPRAGINGIVAL";
				
				}

				
			    public BigDecimal FLUOR;

				public BigDecimal getFLUOR () {
					return this.FLUOR;
				}

				public Boolean FLUORIsNullable(){
				    return true;
				}
				public Boolean FLUORIsKey(){
				    return false;
				}
				public Integer FLUORLength(){
				    return null;
				}
				public Integer FLUORPrecision(){
				    return null;
				}
				public String FLUORDefault(){
				
					return "";
				
				}
				public String FLUORComment(){
				
				    return "";
				
				}
				public String FLUORPattern(){
				
					return "";
				
				}
				public String FLUOROriginalDbColumnName(){
				
					return "FLUOR";
				
				}

				
			    public String ESTADO_FLUOR;

				public String getESTADO_FLUOR () {
					return this.ESTADO_FLUOR;
				}

				public Boolean ESTADO_FLUORIsNullable(){
				    return true;
				}
				public Boolean ESTADO_FLUORIsKey(){
				    return false;
				}
				public Integer ESTADO_FLUORLength(){
				    return null;
				}
				public Integer ESTADO_FLUORPrecision(){
				    return null;
				}
				public String ESTADO_FLUORDefault(){
				
					return null;
				
				}
				public String ESTADO_FLUORComment(){
				
				    return "";
				
				}
				public String ESTADO_FLUORPattern(){
				
					return "";
				
				}
				public String ESTADO_FLUOROriginalDbColumnName(){
				
					return "ESTADO_FLUOR";
				
				}

				
			    public String CLASE_GRADO;

				public String getCLASE_GRADO () {
					return this.CLASE_GRADO;
				}

				public Boolean CLASE_GRADOIsNullable(){
				    return true;
				}
				public Boolean CLASE_GRADOIsKey(){
				    return false;
				}
				public Integer CLASE_GRADOLength(){
				    return 100;
				}
				public Integer CLASE_GRADOPrecision(){
				    return 0;
				}
				public String CLASE_GRADODefault(){
				
					return null;
				
				}
				public String CLASE_GRADOComment(){
				
				    return "";
				
				}
				public String CLASE_GRADOPattern(){
				
					return "";
				
				}
				public String CLASE_GRADOOriginalDbColumnName(){
				
					return "CLASE_GRADO";
				
				}

				
			    public BigDecimal CODIGO_CLAGRADO;

				public BigDecimal getCODIGO_CLAGRADO () {
					return this.CODIGO_CLAGRADO;
				}

				public Boolean CODIGO_CLAGRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CLAGRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_CLAGRADOLength(){
				    return 6;
				}
				public Integer CODIGO_CLAGRADOPrecision(){
				    return 0;
				}
				public String CODIGO_CLAGRADODefault(){
				
					return null;
				
				}
				public String CODIGO_CLAGRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_CLAGRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOOriginalDbColumnName(){
				
					return "CODIGO_CLAGRADO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String TIPO_COPCEOP;

				public String getTIPO_COPCEOP () {
					return this.TIPO_COPCEOP;
				}

				public Boolean TIPO_COPCEOPIsNullable(){
				    return true;
				}
				public Boolean TIPO_COPCEOPIsKey(){
				    return false;
				}
				public Integer TIPO_COPCEOPLength(){
				    return 5;
				}
				public Integer TIPO_COPCEOPPrecision(){
				    return 0;
				}
				public String TIPO_COPCEOPDefault(){
				
					return null;
				
				}
				public String TIPO_COPCEOPComment(){
				
				    return "";
				
				}
				public String TIPO_COPCEOPPattern(){
				
					return "";
				
				}
				public String TIPO_COPCEOPOriginalDbColumnName(){
				
					return "TIPO_COPCEOP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
						this.PLACA_DENTAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_PLACA_DENTAL = readString(dis);
					
						this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_SUPRAGINGIVAL = readString(dis);
					
						this.FLUOR = (BigDecimal) dis.readObject();
					
					this.ESTADO_FLUOR = readString(dis);
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
						this.PLACA_DENTAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_PLACA_DENTAL = readString(dis);
					
						this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) dis.readObject();
					
					this.ESTADO_SUPRAGINGIVAL = readString(dis);
					
						this.FLUOR = (BigDecimal) dis.readObject();
					
					this.ESTADO_FLUOR = readString(dis);
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROTESIS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PLACA_DENTAL);
					
					// String
				
						writeString(this.ESTADO_PLACA_DENTAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
					// String
				
						writeString(this.ESTADO_SUPRAGINGIVAL,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.FLUOR);
					
					// String
				
						writeString(this.ESTADO_FLUOR,dos);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROTESIS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PLACA_DENTAL);
					
					// String
				
						writeString(this.ESTADO_PLACA_DENTAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
					// String
				
						writeString(this.ESTADO_SUPRAGINGIVAL,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.FLUOR);
					
					// String
				
						writeString(this.ESTADO_FLUOR,dos);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",SEXO_SIGLA="+SEXO_SIGLA);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",VALOR_MENOR="+String.valueOf(VALOR_MENOR));
		sb.append(",RANGO_EDAD="+RANGO_EDAD);
		sb.append(",TIPO_VALORACION="+TIPO_VALORACION);
		sb.append(",MORBILIDAD="+MORBILIDAD);
		sb.append(",OLEARY_VALOR="+String.valueOf(OLEARY_VALOR));
		sb.append(",OLEARY="+OLEARY);
		sb.append(",BRUXISMO="+BRUXISMO);
		sb.append(",MUERDE_OBJETOS="+MUERDE_OBJETOS);
		sb.append(",RESPIRADOR_NASAL="+RESPIRADOR_NASAL);
		sb.append(",SUCCION_DIGITAL="+SUCCION_DIGITAL);
		sb.append(",ONICOFAGIA="+ONICOFAGIA);
		sb.append(",COP_CEOD="+String.valueOf(COP_CEOD));
		sb.append(",CARIADOS="+String.valueOf(CARIADOS));
		sb.append(",OBTURADOS="+String.valueOf(OBTURADOS));
		sb.append(",PERDIDOS_EXTRAIDOS="+String.valueOf(PERDIDOS_EXTRAIDOS));
		sb.append(",INTCP="+INTCP);
		sb.append(",DIENTES_TEMPORALES="+String.valueOf(DIENTES_TEMPORALES));
		sb.append(",DIENTES_PERMANENTES="+String.valueOf(DIENTES_PERMANENTES));
		sb.append(",PROTESIS="+String.valueOf(PROTESIS));
		sb.append(",PLACA_DENTAL="+String.valueOf(PLACA_DENTAL));
		sb.append(",ESTADO_PLACA_DENTAL="+ESTADO_PLACA_DENTAL);
		sb.append(",DETARTRAJE_SUPRAGINGIVAL="+String.valueOf(DETARTRAJE_SUPRAGINGIVAL));
		sb.append(",ESTADO_SUPRAGINGIVAL="+ESTADO_SUPRAGINGIVAL);
		sb.append(",FLUOR="+String.valueOf(FLUOR));
		sb.append(",ESTADO_FLUOR="+ESTADO_FLUOR);
		sb.append(",CLASE_GRADO="+CLASE_GRADO);
		sb.append(",CODIGO_CLAGRADO="+String.valueOf(CODIGO_CLAGRADO));
		sb.append(",GRADO="+GRADO);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TIPO_COPCEOP="+TIPO_COPCEOP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out2Struct implements routines.system.IPersistableRow<out2Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String SEXO_SIGLA;

				public String getSEXO_SIGLA () {
					return this.SEXO_SIGLA;
				}

				public Boolean SEXO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean SEXO_SIGLAIsKey(){
				    return false;
				}
				public Integer SEXO_SIGLALength(){
				    return 1;
				}
				public Integer SEXO_SIGLAPrecision(){
				    return 0;
				}
				public String SEXO_SIGLADefault(){
				
					return null;
				
				}
				public String SEXO_SIGLAComment(){
				
				    return "";
				
				}
				public String SEXO_SIGLAPattern(){
				
					return "";
				
				}
				public String SEXO_SIGLAOriginalDbColumnName(){
				
					return "SEXO_SIGLA";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return 100;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return 0;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public BigDecimal VALOR_MENOR;

				public BigDecimal getVALOR_MENOR () {
					return this.VALOR_MENOR;
				}

				public Boolean VALOR_MENORIsNullable(){
				    return true;
				}
				public Boolean VALOR_MENORIsKey(){
				    return false;
				}
				public Integer VALOR_MENORLength(){
				    return 0;
				}
				public Integer VALOR_MENORPrecision(){
				    return null;
				}
				public String VALOR_MENORDefault(){
				
					return "";
				
				}
				public String VALOR_MENORComment(){
				
				    return "";
				
				}
				public String VALOR_MENORPattern(){
				
					return "";
				
				}
				public String VALOR_MENOROriginalDbColumnName(){
				
					return "VALOR_MENOR";
				
				}

				
			    public String RANGO_EDAD;

				public String getRANGO_EDAD () {
					return this.RANGO_EDAD;
				}

				public Boolean RANGO_EDADIsNullable(){
				    return true;
				}
				public Boolean RANGO_EDADIsKey(){
				    return false;
				}
				public Integer RANGO_EDADLength(){
				    return 4000;
				}
				public Integer RANGO_EDADPrecision(){
				    return 0;
				}
				public String RANGO_EDADDefault(){
				
					return null;
				
				}
				public String RANGO_EDADComment(){
				
				    return "";
				
				}
				public String RANGO_EDADPattern(){
				
					return "";
				
				}
				public String RANGO_EDADOriginalDbColumnName(){
				
					return "RANGO_EDAD";
				
				}

				
			    public String TIPO_VALORACION;

				public String getTIPO_VALORACION () {
					return this.TIPO_VALORACION;
				}

				public Boolean TIPO_VALORACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_VALORACIONIsKey(){
				    return false;
				}
				public Integer TIPO_VALORACIONLength(){
				    return 2;
				}
				public Integer TIPO_VALORACIONPrecision(){
				    return 0;
				}
				public String TIPO_VALORACIONDefault(){
				
					return null;
				
				}
				public String TIPO_VALORACIONComment(){
				
				    return "";
				
				}
				public String TIPO_VALORACIONPattern(){
				
					return "";
				
				}
				public String TIPO_VALORACIONOriginalDbColumnName(){
				
					return "TIPO_VALORACION";
				
				}

				
			    public String MORBILIDAD;

				public String getMORBILIDAD () {
					return this.MORBILIDAD;
				}

				public Boolean MORBILIDADIsNullable(){
				    return true;
				}
				public Boolean MORBILIDADIsKey(){
				    return false;
				}
				public Integer MORBILIDADLength(){
				    return null;
				}
				public Integer MORBILIDADPrecision(){
				    return null;
				}
				public String MORBILIDADDefault(){
				
					return null;
				
				}
				public String MORBILIDADComment(){
				
				    return "";
				
				}
				public String MORBILIDADPattern(){
				
					return "";
				
				}
				public String MORBILIDADOriginalDbColumnName(){
				
					return "MORBILIDAD";
				
				}

				
			    public BigDecimal OLEARY_VALOR;

				public BigDecimal getOLEARY_VALOR () {
					return this.OLEARY_VALOR;
				}

				public Boolean OLEARY_VALORIsNullable(){
				    return true;
				}
				public Boolean OLEARY_VALORIsKey(){
				    return false;
				}
				public Integer OLEARY_VALORLength(){
				    return 0;
				}
				public Integer OLEARY_VALORPrecision(){
				    return null;
				}
				public String OLEARY_VALORDefault(){
				
					return "";
				
				}
				public String OLEARY_VALORComment(){
				
				    return "";
				
				}
				public String OLEARY_VALORPattern(){
				
					return "";
				
				}
				public String OLEARY_VALOROriginalDbColumnName(){
				
					return "OLEARY_VALOR";
				
				}

				
			    public String OLEARY;

				public String getOLEARY () {
					return this.OLEARY;
				}

				public Boolean OLEARYIsNullable(){
				    return true;
				}
				public Boolean OLEARYIsKey(){
				    return false;
				}
				public Integer OLEARYLength(){
				    return 100;
				}
				public Integer OLEARYPrecision(){
				    return 0;
				}
				public String OLEARYDefault(){
				
					return null;
				
				}
				public String OLEARYComment(){
				
				    return "";
				
				}
				public String OLEARYPattern(){
				
					return "";
				
				}
				public String OLEARYOriginalDbColumnName(){
				
					return "OLEARY";
				
				}

				
			    public String BRUXISMO;

				public String getBRUXISMO () {
					return this.BRUXISMO;
				}

				public Boolean BRUXISMOIsNullable(){
				    return true;
				}
				public Boolean BRUXISMOIsKey(){
				    return false;
				}
				public Integer BRUXISMOLength(){
				    return 100;
				}
				public Integer BRUXISMOPrecision(){
				    return 0;
				}
				public String BRUXISMODefault(){
				
					return null;
				
				}
				public String BRUXISMOComment(){
				
				    return "";
				
				}
				public String BRUXISMOPattern(){
				
					return "";
				
				}
				public String BRUXISMOOriginalDbColumnName(){
				
					return "BRUXISMO";
				
				}

				
			    public String MUERDE_OBJETOS;

				public String getMUERDE_OBJETOS () {
					return this.MUERDE_OBJETOS;
				}

				public Boolean MUERDE_OBJETOSIsNullable(){
				    return true;
				}
				public Boolean MUERDE_OBJETOSIsKey(){
				    return false;
				}
				public Integer MUERDE_OBJETOSLength(){
				    return 100;
				}
				public Integer MUERDE_OBJETOSPrecision(){
				    return 0;
				}
				public String MUERDE_OBJETOSDefault(){
				
					return null;
				
				}
				public String MUERDE_OBJETOSComment(){
				
				    return "";
				
				}
				public String MUERDE_OBJETOSPattern(){
				
					return "";
				
				}
				public String MUERDE_OBJETOSOriginalDbColumnName(){
				
					return "MUERDE_OBJETOS";
				
				}

				
			    public String RESPIRADOR_NASAL;

				public String getRESPIRADOR_NASAL () {
					return this.RESPIRADOR_NASAL;
				}

				public Boolean RESPIRADOR_NASALIsNullable(){
				    return true;
				}
				public Boolean RESPIRADOR_NASALIsKey(){
				    return false;
				}
				public Integer RESPIRADOR_NASALLength(){
				    return 100;
				}
				public Integer RESPIRADOR_NASALPrecision(){
				    return 0;
				}
				public String RESPIRADOR_NASALDefault(){
				
					return null;
				
				}
				public String RESPIRADOR_NASALComment(){
				
				    return "";
				
				}
				public String RESPIRADOR_NASALPattern(){
				
					return "";
				
				}
				public String RESPIRADOR_NASALOriginalDbColumnName(){
				
					return "RESPIRADOR_NASAL";
				
				}

				
			    public String SUCCION_DIGITAL;

				public String getSUCCION_DIGITAL () {
					return this.SUCCION_DIGITAL;
				}

				public Boolean SUCCION_DIGITALIsNullable(){
				    return true;
				}
				public Boolean SUCCION_DIGITALIsKey(){
				    return false;
				}
				public Integer SUCCION_DIGITALLength(){
				    return 100;
				}
				public Integer SUCCION_DIGITALPrecision(){
				    return 0;
				}
				public String SUCCION_DIGITALDefault(){
				
					return null;
				
				}
				public String SUCCION_DIGITALComment(){
				
				    return "";
				
				}
				public String SUCCION_DIGITALPattern(){
				
					return "";
				
				}
				public String SUCCION_DIGITALOriginalDbColumnName(){
				
					return "SUCCION_DIGITAL";
				
				}

				
			    public String ONICOFAGIA;

				public String getONICOFAGIA () {
					return this.ONICOFAGIA;
				}

				public Boolean ONICOFAGIAIsNullable(){
				    return true;
				}
				public Boolean ONICOFAGIAIsKey(){
				    return false;
				}
				public Integer ONICOFAGIALength(){
				    return 100;
				}
				public Integer ONICOFAGIAPrecision(){
				    return 0;
				}
				public String ONICOFAGIADefault(){
				
					return null;
				
				}
				public String ONICOFAGIAComment(){
				
				    return "";
				
				}
				public String ONICOFAGIAPattern(){
				
					return "";
				
				}
				public String ONICOFAGIAOriginalDbColumnName(){
				
					return "ONICOFAGIA";
				
				}

				
			    public BigDecimal COP_CEOD;

				public BigDecimal getCOP_CEOD () {
					return this.COP_CEOD;
				}

				public Boolean COP_CEODIsNullable(){
				    return true;
				}
				public Boolean COP_CEODIsKey(){
				    return false;
				}
				public Integer COP_CEODLength(){
				    return 0;
				}
				public Integer COP_CEODPrecision(){
				    return null;
				}
				public String COP_CEODDefault(){
				
					return "";
				
				}
				public String COP_CEODComment(){
				
				    return "";
				
				}
				public String COP_CEODPattern(){
				
					return "";
				
				}
				public String COP_CEODOriginalDbColumnName(){
				
					return "COP_CEOD";
				
				}

				
			    public BigDecimal CARIADOS;

				public BigDecimal getCARIADOS () {
					return this.CARIADOS;
				}

				public Boolean CARIADOSIsNullable(){
				    return true;
				}
				public Boolean CARIADOSIsKey(){
				    return false;
				}
				public Integer CARIADOSLength(){
				    return 0;
				}
				public Integer CARIADOSPrecision(){
				    return null;
				}
				public String CARIADOSDefault(){
				
					return "";
				
				}
				public String CARIADOSComment(){
				
				    return "";
				
				}
				public String CARIADOSPattern(){
				
					return "";
				
				}
				public String CARIADOSOriginalDbColumnName(){
				
					return "CARIADOS";
				
				}

				
			    public BigDecimal OBTURADOS;

				public BigDecimal getOBTURADOS () {
					return this.OBTURADOS;
				}

				public Boolean OBTURADOSIsNullable(){
				    return true;
				}
				public Boolean OBTURADOSIsKey(){
				    return false;
				}
				public Integer OBTURADOSLength(){
				    return 0;
				}
				public Integer OBTURADOSPrecision(){
				    return null;
				}
				public String OBTURADOSDefault(){
				
					return "";
				
				}
				public String OBTURADOSComment(){
				
				    return "";
				
				}
				public String OBTURADOSPattern(){
				
					return "";
				
				}
				public String OBTURADOSOriginalDbColumnName(){
				
					return "OBTURADOS";
				
				}

				
			    public BigDecimal PERDIDOS_EXTRAIDOS;

				public BigDecimal getPERDIDOS_EXTRAIDOS () {
					return this.PERDIDOS_EXTRAIDOS;
				}

				public Boolean PERDIDOS_EXTRAIDOSIsNullable(){
				    return true;
				}
				public Boolean PERDIDOS_EXTRAIDOSIsKey(){
				    return false;
				}
				public Integer PERDIDOS_EXTRAIDOSLength(){
				    return 0;
				}
				public Integer PERDIDOS_EXTRAIDOSPrecision(){
				    return null;
				}
				public String PERDIDOS_EXTRAIDOSDefault(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSComment(){
				
				    return "";
				
				}
				public String PERDIDOS_EXTRAIDOSPattern(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSOriginalDbColumnName(){
				
					return "PERDIDOS_EXTRAIDOS";
				
				}

				
			    public String INTCP;

				public String getINTCP () {
					return this.INTCP;
				}

				public Boolean INTCPIsNullable(){
				    return true;
				}
				public Boolean INTCPIsKey(){
				    return false;
				}
				public Integer INTCPLength(){
				    return 100;
				}
				public Integer INTCPPrecision(){
				    return 0;
				}
				public String INTCPDefault(){
				
					return null;
				
				}
				public String INTCPComment(){
				
				    return "";
				
				}
				public String INTCPPattern(){
				
					return "";
				
				}
				public String INTCPOriginalDbColumnName(){
				
					return "INTCP";
				
				}

				
			    public BigDecimal DIENTES_PERMANENTES;

				public BigDecimal getDIENTES_PERMANENTES () {
					return this.DIENTES_PERMANENTES;
				}

				public Boolean DIENTES_PERMANENTESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_PERMANENTESIsKey(){
				    return false;
				}
				public Integer DIENTES_PERMANENTESLength(){
				    return 0;
				}
				public Integer DIENTES_PERMANENTESPrecision(){
				    return null;
				}
				public String DIENTES_PERMANENTESDefault(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESComment(){
				
				    return "";
				
				}
				public String DIENTES_PERMANENTESPattern(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESOriginalDbColumnName(){
				
					return "DIENTES_PERMANENTES";
				
				}

				
			    public BigDecimal DIENTES_TEMPORALES;

				public BigDecimal getDIENTES_TEMPORALES () {
					return this.DIENTES_TEMPORALES;
				}

				public Boolean DIENTES_TEMPORALESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_TEMPORALESIsKey(){
				    return false;
				}
				public Integer DIENTES_TEMPORALESLength(){
				    return 0;
				}
				public Integer DIENTES_TEMPORALESPrecision(){
				    return null;
				}
				public String DIENTES_TEMPORALESDefault(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESComment(){
				
				    return "";
				
				}
				public String DIENTES_TEMPORALESPattern(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESOriginalDbColumnName(){
				
					return "DIENTES_TEMPORALES";
				
				}

				
			    public BigDecimal PROTESIS;

				public BigDecimal getPROTESIS () {
					return this.PROTESIS;
				}

				public Boolean PROTESISIsNullable(){
				    return true;
				}
				public Boolean PROTESISIsKey(){
				    return false;
				}
				public Integer PROTESISLength(){
				    return 0;
				}
				public Integer PROTESISPrecision(){
				    return 0;
				}
				public String PROTESISDefault(){
				
					return "";
				
				}
				public String PROTESISComment(){
				
				    return "";
				
				}
				public String PROTESISPattern(){
				
					return "";
				
				}
				public String PROTESISOriginalDbColumnName(){
				
					return "PROTESIS";
				
				}

				
			    public String CLASE_GRADO;

				public String getCLASE_GRADO () {
					return this.CLASE_GRADO;
				}

				public Boolean CLASE_GRADOIsNullable(){
				    return true;
				}
				public Boolean CLASE_GRADOIsKey(){
				    return false;
				}
				public Integer CLASE_GRADOLength(){
				    return 100;
				}
				public Integer CLASE_GRADOPrecision(){
				    return 0;
				}
				public String CLASE_GRADODefault(){
				
					return null;
				
				}
				public String CLASE_GRADOComment(){
				
				    return "";
				
				}
				public String CLASE_GRADOPattern(){
				
					return "";
				
				}
				public String CLASE_GRADOOriginalDbColumnName(){
				
					return "CLASE_GRADO";
				
				}

				
			    public BigDecimal CODIGO_CLAGRADO;

				public BigDecimal getCODIGO_CLAGRADO () {
					return this.CODIGO_CLAGRADO;
				}

				public Boolean CODIGO_CLAGRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CLAGRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_CLAGRADOLength(){
				    return 6;
				}
				public Integer CODIGO_CLAGRADOPrecision(){
				    return 0;
				}
				public String CODIGO_CLAGRADODefault(){
				
					return null;
				
				}
				public String CODIGO_CLAGRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_CLAGRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOOriginalDbColumnName(){
				
					return "CODIGO_CLAGRADO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				
			    public String TIPO_COPCEOP;

				public String getTIPO_COPCEOP () {
					return this.TIPO_COPCEOP;
				}

				public Boolean TIPO_COPCEOPIsNullable(){
				    return true;
				}
				public Boolean TIPO_COPCEOPIsKey(){
				    return false;
				}
				public Integer TIPO_COPCEOPLength(){
				    return 5;
				}
				public Integer TIPO_COPCEOPPrecision(){
				    return 0;
				}
				public String TIPO_COPCEOPDefault(){
				
					return null;
				
				}
				public String TIPO_COPCEOPComment(){
				
				    return "";
				
				}
				public String TIPO_COPCEOPPattern(){
				
					return "";
				
				}
				public String TIPO_COPCEOPOriginalDbColumnName(){
				
					return "TIPO_COPCEOP";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.OLEARY_VALOR = (BigDecimal) dis.readObject();
					
					this.OLEARY = readString(dis);
					
					this.BRUXISMO = readString(dis);
					
					this.MUERDE_OBJETOS = readString(dis);
					
					this.RESPIRADOR_NASAL = readString(dis);
					
					this.SUCCION_DIGITAL = readString(dis);
					
					this.ONICOFAGIA = readString(dis);
					
						this.COP_CEOD = (BigDecimal) dis.readObject();
					
						this.CARIADOS = (BigDecimal) dis.readObject();
					
						this.OBTURADOS = (BigDecimal) dis.readObject();
					
						this.PERDIDOS_EXTRAIDOS = (BigDecimal) dis.readObject();
					
					this.INTCP = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
					this.TIPO_COPCEOP = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OLEARY_VALOR);
					
					// String
				
						writeString(this.OLEARY,dos);
					
					// String
				
						writeString(this.BRUXISMO,dos);
					
					// String
				
						writeString(this.MUERDE_OBJETOS,dos);
					
					// String
				
						writeString(this.RESPIRADOR_NASAL,dos);
					
					// String
				
						writeString(this.SUCCION_DIGITAL,dos);
					
					// String
				
						writeString(this.ONICOFAGIA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.COP_CEOD);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CARIADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.OBTURADOS);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
					// String
				
						writeString(this.INTCP,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
					// String
				
						writeString(this.TIPO_COPCEOP,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",SEXO_SIGLA="+SEXO_SIGLA);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",VALOR_MENOR="+String.valueOf(VALOR_MENOR));
		sb.append(",RANGO_EDAD="+RANGO_EDAD);
		sb.append(",TIPO_VALORACION="+TIPO_VALORACION);
		sb.append(",MORBILIDAD="+MORBILIDAD);
		sb.append(",OLEARY_VALOR="+String.valueOf(OLEARY_VALOR));
		sb.append(",OLEARY="+OLEARY);
		sb.append(",BRUXISMO="+BRUXISMO);
		sb.append(",MUERDE_OBJETOS="+MUERDE_OBJETOS);
		sb.append(",RESPIRADOR_NASAL="+RESPIRADOR_NASAL);
		sb.append(",SUCCION_DIGITAL="+SUCCION_DIGITAL);
		sb.append(",ONICOFAGIA="+ONICOFAGIA);
		sb.append(",COP_CEOD="+String.valueOf(COP_CEOD));
		sb.append(",CARIADOS="+String.valueOf(CARIADOS));
		sb.append(",OBTURADOS="+String.valueOf(OBTURADOS));
		sb.append(",PERDIDOS_EXTRAIDOS="+String.valueOf(PERDIDOS_EXTRAIDOS));
		sb.append(",INTCP="+INTCP);
		sb.append(",DIENTES_PERMANENTES="+String.valueOf(DIENTES_PERMANENTES));
		sb.append(",DIENTES_TEMPORALES="+String.valueOf(DIENTES_TEMPORALES));
		sb.append(",PROTESIS="+String.valueOf(PROTESIS));
		sb.append(",CLASE_GRADO="+CLASE_GRADO);
		sb.append(",CODIGO_CLAGRADO="+String.valueOf(CODIGO_CLAGRADO));
		sb.append(",GRADO="+GRADO);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",ESTADO="+ESTADO);
		sb.append(",TIPO_COPCEOP="+TIPO_COPCEOP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class out1Struct implements routines.system.IPersistableRow<out1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String SEXO_SIGLA;

				public String getSEXO_SIGLA () {
					return this.SEXO_SIGLA;
				}

				public Boolean SEXO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean SEXO_SIGLAIsKey(){
				    return false;
				}
				public Integer SEXO_SIGLALength(){
				    return 1;
				}
				public Integer SEXO_SIGLAPrecision(){
				    return 0;
				}
				public String SEXO_SIGLADefault(){
				
					return null;
				
				}
				public String SEXO_SIGLAComment(){
				
				    return "";
				
				}
				public String SEXO_SIGLAPattern(){
				
					return "";
				
				}
				public String SEXO_SIGLAOriginalDbColumnName(){
				
					return "SEXO_SIGLA";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return true;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return true;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return 100;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return 0;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public BigDecimal VALOR_MENOR;

				public BigDecimal getVALOR_MENOR () {
					return this.VALOR_MENOR;
				}

				public Boolean VALOR_MENORIsNullable(){
				    return true;
				}
				public Boolean VALOR_MENORIsKey(){
				    return false;
				}
				public Integer VALOR_MENORLength(){
				    return 0;
				}
				public Integer VALOR_MENORPrecision(){
				    return null;
				}
				public String VALOR_MENORDefault(){
				
					return "";
				
				}
				public String VALOR_MENORComment(){
				
				    return "";
				
				}
				public String VALOR_MENORPattern(){
				
					return "";
				
				}
				public String VALOR_MENOROriginalDbColumnName(){
				
					return "VALOR_MENOR";
				
				}

				
			    public String RANGO_EDAD;

				public String getRANGO_EDAD () {
					return this.RANGO_EDAD;
				}

				public Boolean RANGO_EDADIsNullable(){
				    return true;
				}
				public Boolean RANGO_EDADIsKey(){
				    return false;
				}
				public Integer RANGO_EDADLength(){
				    return 4000;
				}
				public Integer RANGO_EDADPrecision(){
				    return 0;
				}
				public String RANGO_EDADDefault(){
				
					return null;
				
				}
				public String RANGO_EDADComment(){
				
				    return "";
				
				}
				public String RANGO_EDADPattern(){
				
					return "";
				
				}
				public String RANGO_EDADOriginalDbColumnName(){
				
					return "RANGO_EDAD";
				
				}

				
			    public String TIPO_VALORACION;

				public String getTIPO_VALORACION () {
					return this.TIPO_VALORACION;
				}

				public Boolean TIPO_VALORACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_VALORACIONIsKey(){
				    return false;
				}
				public Integer TIPO_VALORACIONLength(){
				    return 2;
				}
				public Integer TIPO_VALORACIONPrecision(){
				    return 0;
				}
				public String TIPO_VALORACIONDefault(){
				
					return null;
				
				}
				public String TIPO_VALORACIONComment(){
				
				    return "";
				
				}
				public String TIPO_VALORACIONPattern(){
				
					return "";
				
				}
				public String TIPO_VALORACIONOriginalDbColumnName(){
				
					return "TIPO_VALORACION";
				
				}

				
			    public String MORBILIDAD;

				public String getMORBILIDAD () {
					return this.MORBILIDAD;
				}

				public Boolean MORBILIDADIsNullable(){
				    return true;
				}
				public Boolean MORBILIDADIsKey(){
				    return false;
				}
				public Integer MORBILIDADLength(){
				    return null;
				}
				public Integer MORBILIDADPrecision(){
				    return null;
				}
				public String MORBILIDADDefault(){
				
					return null;
				
				}
				public String MORBILIDADComment(){
				
				    return "";
				
				}
				public String MORBILIDADPattern(){
				
					return "";
				
				}
				public String MORBILIDADOriginalDbColumnName(){
				
					return "MORBILIDAD";
				
				}

				
			    public BigDecimal DIENTES_PERMANENTES;

				public BigDecimal getDIENTES_PERMANENTES () {
					return this.DIENTES_PERMANENTES;
				}

				public Boolean DIENTES_PERMANENTESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_PERMANENTESIsKey(){
				    return false;
				}
				public Integer DIENTES_PERMANENTESLength(){
				    return 0;
				}
				public Integer DIENTES_PERMANENTESPrecision(){
				    return null;
				}
				public String DIENTES_PERMANENTESDefault(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESComment(){
				
				    return "";
				
				}
				public String DIENTES_PERMANENTESPattern(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESOriginalDbColumnName(){
				
					return "DIENTES_PERMANENTES";
				
				}

				
			    public BigDecimal DIENTES_TEMPORALES;

				public BigDecimal getDIENTES_TEMPORALES () {
					return this.DIENTES_TEMPORALES;
				}

				public Boolean DIENTES_TEMPORALESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_TEMPORALESIsKey(){
				    return false;
				}
				public Integer DIENTES_TEMPORALESLength(){
				    return 0;
				}
				public Integer DIENTES_TEMPORALESPrecision(){
				    return null;
				}
				public String DIENTES_TEMPORALESDefault(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESComment(){
				
				    return "";
				
				}
				public String DIENTES_TEMPORALESPattern(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESOriginalDbColumnName(){
				
					return "DIENTES_TEMPORALES";
				
				}

				
			    public BigDecimal PROTESIS;

				public BigDecimal getPROTESIS () {
					return this.PROTESIS;
				}

				public Boolean PROTESISIsNullable(){
				    return true;
				}
				public Boolean PROTESISIsKey(){
				    return false;
				}
				public Integer PROTESISLength(){
				    return 0;
				}
				public Integer PROTESISPrecision(){
				    return 0;
				}
				public String PROTESISDefault(){
				
					return "";
				
				}
				public String PROTESISComment(){
				
				    return "";
				
				}
				public String PROTESISPattern(){
				
					return "";
				
				}
				public String PROTESISOriginalDbColumnName(){
				
					return "PROTESIS";
				
				}

				
			    public String CLASE_GRADO;

				public String getCLASE_GRADO () {
					return this.CLASE_GRADO;
				}

				public Boolean CLASE_GRADOIsNullable(){
				    return true;
				}
				public Boolean CLASE_GRADOIsKey(){
				    return false;
				}
				public Integer CLASE_GRADOLength(){
				    return 100;
				}
				public Integer CLASE_GRADOPrecision(){
				    return 0;
				}
				public String CLASE_GRADODefault(){
				
					return null;
				
				}
				public String CLASE_GRADOComment(){
				
				    return "";
				
				}
				public String CLASE_GRADOPattern(){
				
					return "";
				
				}
				public String CLASE_GRADOOriginalDbColumnName(){
				
					return "CLASE_GRADO";
				
				}

				
			    public BigDecimal CODIGO_CLAGRADO;

				public BigDecimal getCODIGO_CLAGRADO () {
					return this.CODIGO_CLAGRADO;
				}

				public Boolean CODIGO_CLAGRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CLAGRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_CLAGRADOLength(){
				    return 6;
				}
				public Integer CODIGO_CLAGRADOPrecision(){
				    return 0;
				}
				public String CODIGO_CLAGRADODefault(){
				
					return null;
				
				}
				public String CODIGO_CLAGRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_CLAGRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOOriginalDbColumnName(){
				
					return "CODIGO_CLAGRADO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
					this.MORBILIDAD = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// String
				
						writeString(this.MORBILIDAD,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",SEXO_SIGLA="+SEXO_SIGLA);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",VALOR_MENOR="+String.valueOf(VALOR_MENOR));
		sb.append(",RANGO_EDAD="+RANGO_EDAD);
		sb.append(",TIPO_VALORACION="+TIPO_VALORACION);
		sb.append(",MORBILIDAD="+MORBILIDAD);
		sb.append(",DIENTES_PERMANENTES="+String.valueOf(DIENTES_PERMANENTES));
		sb.append(",DIENTES_TEMPORALES="+String.valueOf(DIENTES_TEMPORALES));
		sb.append(",PROTESIS="+String.valueOf(PROTESIS));
		sb.append(",CLASE_GRADO="+CLASE_GRADO);
		sb.append(",CODIGO_CLAGRADO="+String.valueOf(CODIGO_CLAGRADO));
		sb.append(",GRADO="+GRADO);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",ESTADO="+ESTADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(out1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String SEXO_SIGLA;

				public String getSEXO_SIGLA () {
					return this.SEXO_SIGLA;
				}

				public Boolean SEXO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean SEXO_SIGLAIsKey(){
				    return false;
				}
				public Integer SEXO_SIGLALength(){
				    return 1;
				}
				public Integer SEXO_SIGLAPrecision(){
				    return 0;
				}
				public String SEXO_SIGLADefault(){
				
					return null;
				
				}
				public String SEXO_SIGLAComment(){
				
				    return "";
				
				}
				public String SEXO_SIGLAPattern(){
				
					return "";
				
				}
				public String SEXO_SIGLAOriginalDbColumnName(){
				
					return "SEXO_SIGLA";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return false;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return 100;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return 0;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public BigDecimal VALOR_MENOR;

				public BigDecimal getVALOR_MENOR () {
					return this.VALOR_MENOR;
				}

				public Boolean VALOR_MENORIsNullable(){
				    return false;
				}
				public Boolean VALOR_MENORIsKey(){
				    return false;
				}
				public Integer VALOR_MENORLength(){
				    return 0;
				}
				public Integer VALOR_MENORPrecision(){
				    return null;
				}
				public String VALOR_MENORDefault(){
				
					return "";
				
				}
				public String VALOR_MENORComment(){
				
				    return "";
				
				}
				public String VALOR_MENORPattern(){
				
					return "";
				
				}
				public String VALOR_MENOROriginalDbColumnName(){
				
					return "VALOR_MENOR";
				
				}

				
			    public String RANGO_EDAD;

				public String getRANGO_EDAD () {
					return this.RANGO_EDAD;
				}

				public Boolean RANGO_EDADIsNullable(){
				    return true;
				}
				public Boolean RANGO_EDADIsKey(){
				    return false;
				}
				public Integer RANGO_EDADLength(){
				    return 4000;
				}
				public Integer RANGO_EDADPrecision(){
				    return 0;
				}
				public String RANGO_EDADDefault(){
				
					return null;
				
				}
				public String RANGO_EDADComment(){
				
				    return "";
				
				}
				public String RANGO_EDADPattern(){
				
					return "";
				
				}
				public String RANGO_EDADOriginalDbColumnName(){
				
					return "RANGO_EDAD";
				
				}

				
			    public String TIPO_VALORACION;

				public String getTIPO_VALORACION () {
					return this.TIPO_VALORACION;
				}

				public Boolean TIPO_VALORACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_VALORACIONIsKey(){
				    return false;
				}
				public Integer TIPO_VALORACIONLength(){
				    return 3;
				}
				public Integer TIPO_VALORACIONPrecision(){
				    return 0;
				}
				public String TIPO_VALORACIONDefault(){
				
					return null;
				
				}
				public String TIPO_VALORACIONComment(){
				
				    return "";
				
				}
				public String TIPO_VALORACIONPattern(){
				
					return "";
				
				}
				public String TIPO_VALORACIONOriginalDbColumnName(){
				
					return "TIPO_VALORACION";
				
				}

				
			    public BigDecimal DIENTES_PERMANENTES;

				public BigDecimal getDIENTES_PERMANENTES () {
					return this.DIENTES_PERMANENTES;
				}

				public Boolean DIENTES_PERMANENTESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_PERMANENTESIsKey(){
				    return false;
				}
				public Integer DIENTES_PERMANENTESLength(){
				    return 0;
				}
				public Integer DIENTES_PERMANENTESPrecision(){
				    return null;
				}
				public String DIENTES_PERMANENTESDefault(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESComment(){
				
				    return "";
				
				}
				public String DIENTES_PERMANENTESPattern(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESOriginalDbColumnName(){
				
					return "DIENTES_PERMANENTES";
				
				}

				
			    public BigDecimal DIENTES_TEMPORALES;

				public BigDecimal getDIENTES_TEMPORALES () {
					return this.DIENTES_TEMPORALES;
				}

				public Boolean DIENTES_TEMPORALESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_TEMPORALESIsKey(){
				    return false;
				}
				public Integer DIENTES_TEMPORALESLength(){
				    return 0;
				}
				public Integer DIENTES_TEMPORALESPrecision(){
				    return null;
				}
				public String DIENTES_TEMPORALESDefault(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESComment(){
				
				    return "";
				
				}
				public String DIENTES_TEMPORALESPattern(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESOriginalDbColumnName(){
				
					return "DIENTES_TEMPORALES";
				
				}

				
			    public BigDecimal PROTESIS;

				public BigDecimal getPROTESIS () {
					return this.PROTESIS;
				}

				public Boolean PROTESISIsNullable(){
				    return true;
				}
				public Boolean PROTESISIsKey(){
				    return false;
				}
				public Integer PROTESISLength(){
				    return 0;
				}
				public Integer PROTESISPrecision(){
				    return 0;
				}
				public String PROTESISDefault(){
				
					return "";
				
				}
				public String PROTESISComment(){
				
				    return "";
				
				}
				public String PROTESISPattern(){
				
					return "";
				
				}
				public String PROTESISOriginalDbColumnName(){
				
					return "PROTESIS";
				
				}

				
			    public String CLASE_GRADO;

				public String getCLASE_GRADO () {
					return this.CLASE_GRADO;
				}

				public Boolean CLASE_GRADOIsNullable(){
				    return true;
				}
				public Boolean CLASE_GRADOIsKey(){
				    return false;
				}
				public Integer CLASE_GRADOLength(){
				    return 100;
				}
				public Integer CLASE_GRADOPrecision(){
				    return 0;
				}
				public String CLASE_GRADODefault(){
				
					return null;
				
				}
				public String CLASE_GRADOComment(){
				
				    return "";
				
				}
				public String CLASE_GRADOPattern(){
				
					return "";
				
				}
				public String CLASE_GRADOOriginalDbColumnName(){
				
					return "CLASE_GRADO";
				
				}

				
			    public BigDecimal CODIGO_CLAGRADO;

				public BigDecimal getCODIGO_CLAGRADO () {
					return this.CODIGO_CLAGRADO;
				}

				public Boolean CODIGO_CLAGRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CLAGRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_CLAGRADOLength(){
				    return 0;
				}
				public Integer CODIGO_CLAGRADOPrecision(){
				    return null;
				}
				public String CODIGO_CLAGRADODefault(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_CLAGRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOOriginalDbColumnName(){
				
					return "CODIGO_CLAGRADO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",SEXO_SIGLA="+SEXO_SIGLA);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",VALOR_MENOR="+String.valueOf(VALOR_MENOR));
		sb.append(",RANGO_EDAD="+RANGO_EDAD);
		sb.append(",TIPO_VALORACION="+TIPO_VALORACION);
		sb.append(",DIENTES_PERMANENTES="+String.valueOf(DIENTES_PERMANENTES));
		sb.append(",DIENTES_TEMPORALES="+String.valueOf(DIENTES_TEMPORALES));
		sb.append(",PROTESIS="+String.valueOf(PROTESIS));
		sb.append(",CLASE_GRADO="+CLASE_GRADO);
		sb.append(",CODIGO_CLAGRADO="+String.valueOf(CODIGO_CLAGRADO));
		sb.append(",GRADO="+GRADO);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",ESTADO="+ESTADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tOracleInput_1Struct implements routines.system.IPersistableRow<after_tOracleInput_1Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return 0;
				}
				public Integer FECHAPrecision(){
				    return 0;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public String SEXO_SIGLA;

				public String getSEXO_SIGLA () {
					return this.SEXO_SIGLA;
				}

				public Boolean SEXO_SIGLAIsNullable(){
				    return true;
				}
				public Boolean SEXO_SIGLAIsKey(){
				    return false;
				}
				public Integer SEXO_SIGLALength(){
				    return 1;
				}
				public Integer SEXO_SIGLAPrecision(){
				    return 0;
				}
				public String SEXO_SIGLADefault(){
				
					return null;
				
				}
				public String SEXO_SIGLAComment(){
				
				    return "";
				
				}
				public String SEXO_SIGLAPattern(){
				
					return "";
				
				}
				public String SEXO_SIGLAOriginalDbColumnName(){
				
					return "SEXO_SIGLA";
				
				}

				
			    public String PYP_SIGLA;

				public String getPYP_SIGLA () {
					return this.PYP_SIGLA;
				}

				public Boolean PYP_SIGLAIsNullable(){
				    return true;
				}
				public Boolean PYP_SIGLAIsKey(){
				    return false;
				}
				public Integer PYP_SIGLALength(){
				    return 20;
				}
				public Integer PYP_SIGLAPrecision(){
				    return 0;
				}
				public String PYP_SIGLADefault(){
				
					return null;
				
				}
				public String PYP_SIGLAComment(){
				
				    return "";
				
				}
				public String PYP_SIGLAPattern(){
				
					return "";
				
				}
				public String PYP_SIGLAOriginalDbColumnName(){
				
					return "PYP_SIGLA";
				
				}

				
			    public BigDecimal UORG_ID;

				public BigDecimal getUORG_ID () {
					return this.UORG_ID;
				}

				public Boolean UORG_IDIsNullable(){
				    return false;
				}
				public Boolean UORG_IDIsKey(){
				    return false;
				}
				public Integer UORG_IDLength(){
				    return 0;
				}
				public Integer UORG_IDPrecision(){
				    return null;
				}
				public String UORG_IDDefault(){
				
					return "";
				
				}
				public String UORG_IDComment(){
				
				    return "";
				
				}
				public String UORG_IDPattern(){
				
					return "";
				
				}
				public String UORG_IDOriginalDbColumnName(){
				
					return "UORG_ID";
				
				}

				
			    public String GRADO_CODIGO;

				public String getGRADO_CODIGO () {
					return this.GRADO_CODIGO;
				}

				public Boolean GRADO_CODIGOIsNullable(){
				    return true;
				}
				public Boolean GRADO_CODIGOIsKey(){
				    return false;
				}
				public Integer GRADO_CODIGOLength(){
				    return 20;
				}
				public Integer GRADO_CODIGOPrecision(){
				    return 0;
				}
				public String GRADO_CODIGODefault(){
				
					return null;
				
				}
				public String GRADO_CODIGOComment(){
				
				    return "";
				
				}
				public String GRADO_CODIGOPattern(){
				
					return "";
				
				}
				public String GRADO_CODIGOOriginalDbColumnName(){
				
					return "GRADO_CODIGO";
				
				}

				
			    public String FUERZA_SIGLA;

				public String getFUERZA_SIGLA () {
					return this.FUERZA_SIGLA;
				}

				public Boolean FUERZA_SIGLAIsNullable(){
				    return false;
				}
				public Boolean FUERZA_SIGLAIsKey(){
				    return false;
				}
				public Integer FUERZA_SIGLALength(){
				    return 100;
				}
				public Integer FUERZA_SIGLAPrecision(){
				    return 0;
				}
				public String FUERZA_SIGLADefault(){
				
					return null;
				
				}
				public String FUERZA_SIGLAComment(){
				
				    return "";
				
				}
				public String FUERZA_SIGLAPattern(){
				
					return "";
				
				}
				public String FUERZA_SIGLAOriginalDbColumnName(){
				
					return "FUERZA_SIGLA";
				
				}

				
			    public BigDecimal VALOR_MENOR;

				public BigDecimal getVALOR_MENOR () {
					return this.VALOR_MENOR;
				}

				public Boolean VALOR_MENORIsNullable(){
				    return false;
				}
				public Boolean VALOR_MENORIsKey(){
				    return false;
				}
				public Integer VALOR_MENORLength(){
				    return 0;
				}
				public Integer VALOR_MENORPrecision(){
				    return null;
				}
				public String VALOR_MENORDefault(){
				
					return "";
				
				}
				public String VALOR_MENORComment(){
				
				    return "";
				
				}
				public String VALOR_MENORPattern(){
				
					return "";
				
				}
				public String VALOR_MENOROriginalDbColumnName(){
				
					return "VALOR_MENOR";
				
				}

				
			    public String RANGO_EDAD;

				public String getRANGO_EDAD () {
					return this.RANGO_EDAD;
				}

				public Boolean RANGO_EDADIsNullable(){
				    return true;
				}
				public Boolean RANGO_EDADIsKey(){
				    return false;
				}
				public Integer RANGO_EDADLength(){
				    return 4000;
				}
				public Integer RANGO_EDADPrecision(){
				    return 0;
				}
				public String RANGO_EDADDefault(){
				
					return null;
				
				}
				public String RANGO_EDADComment(){
				
				    return "";
				
				}
				public String RANGO_EDADPattern(){
				
					return "";
				
				}
				public String RANGO_EDADOriginalDbColumnName(){
				
					return "RANGO_EDAD";
				
				}

				
			    public String TIPO_VALORACION;

				public String getTIPO_VALORACION () {
					return this.TIPO_VALORACION;
				}

				public Boolean TIPO_VALORACIONIsNullable(){
				    return true;
				}
				public Boolean TIPO_VALORACIONIsKey(){
				    return false;
				}
				public Integer TIPO_VALORACIONLength(){
				    return 3;
				}
				public Integer TIPO_VALORACIONPrecision(){
				    return 0;
				}
				public String TIPO_VALORACIONDefault(){
				
					return null;
				
				}
				public String TIPO_VALORACIONComment(){
				
				    return "";
				
				}
				public String TIPO_VALORACIONPattern(){
				
					return "";
				
				}
				public String TIPO_VALORACIONOriginalDbColumnName(){
				
					return "TIPO_VALORACION";
				
				}

				
			    public BigDecimal DIENTES_PERMANENTES;

				public BigDecimal getDIENTES_PERMANENTES () {
					return this.DIENTES_PERMANENTES;
				}

				public Boolean DIENTES_PERMANENTESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_PERMANENTESIsKey(){
				    return false;
				}
				public Integer DIENTES_PERMANENTESLength(){
				    return 0;
				}
				public Integer DIENTES_PERMANENTESPrecision(){
				    return null;
				}
				public String DIENTES_PERMANENTESDefault(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESComment(){
				
				    return "";
				
				}
				public String DIENTES_PERMANENTESPattern(){
				
					return "";
				
				}
				public String DIENTES_PERMANENTESOriginalDbColumnName(){
				
					return "DIENTES_PERMANENTES";
				
				}

				
			    public BigDecimal DIENTES_TEMPORALES;

				public BigDecimal getDIENTES_TEMPORALES () {
					return this.DIENTES_TEMPORALES;
				}

				public Boolean DIENTES_TEMPORALESIsNullable(){
				    return true;
				}
				public Boolean DIENTES_TEMPORALESIsKey(){
				    return false;
				}
				public Integer DIENTES_TEMPORALESLength(){
				    return 0;
				}
				public Integer DIENTES_TEMPORALESPrecision(){
				    return null;
				}
				public String DIENTES_TEMPORALESDefault(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESComment(){
				
				    return "";
				
				}
				public String DIENTES_TEMPORALESPattern(){
				
					return "";
				
				}
				public String DIENTES_TEMPORALESOriginalDbColumnName(){
				
					return "DIENTES_TEMPORALES";
				
				}

				
			    public BigDecimal PROTESIS;

				public BigDecimal getPROTESIS () {
					return this.PROTESIS;
				}

				public Boolean PROTESISIsNullable(){
				    return true;
				}
				public Boolean PROTESISIsKey(){
				    return false;
				}
				public Integer PROTESISLength(){
				    return 0;
				}
				public Integer PROTESISPrecision(){
				    return 0;
				}
				public String PROTESISDefault(){
				
					return "";
				
				}
				public String PROTESISComment(){
				
				    return "";
				
				}
				public String PROTESISPattern(){
				
					return "";
				
				}
				public String PROTESISOriginalDbColumnName(){
				
					return "PROTESIS";
				
				}

				
			    public String CLASE_GRADO;

				public String getCLASE_GRADO () {
					return this.CLASE_GRADO;
				}

				public Boolean CLASE_GRADOIsNullable(){
				    return true;
				}
				public Boolean CLASE_GRADOIsKey(){
				    return false;
				}
				public Integer CLASE_GRADOLength(){
				    return 100;
				}
				public Integer CLASE_GRADOPrecision(){
				    return 0;
				}
				public String CLASE_GRADODefault(){
				
					return null;
				
				}
				public String CLASE_GRADOComment(){
				
				    return "";
				
				}
				public String CLASE_GRADOPattern(){
				
					return "";
				
				}
				public String CLASE_GRADOOriginalDbColumnName(){
				
					return "CLASE_GRADO";
				
				}

				
			    public BigDecimal CODIGO_CLAGRADO;

				public BigDecimal getCODIGO_CLAGRADO () {
					return this.CODIGO_CLAGRADO;
				}

				public Boolean CODIGO_CLAGRADOIsNullable(){
				    return true;
				}
				public Boolean CODIGO_CLAGRADOIsKey(){
				    return false;
				}
				public Integer CODIGO_CLAGRADOLength(){
				    return 0;
				}
				public Integer CODIGO_CLAGRADOPrecision(){
				    return null;
				}
				public String CODIGO_CLAGRADODefault(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOComment(){
				
				    return "";
				
				}
				public String CODIGO_CLAGRADOPattern(){
				
					return "";
				
				}
				public String CODIGO_CLAGRADOOriginalDbColumnName(){
				
					return "CODIGO_CLAGRADO";
				
				}

				
			    public String GRADO;

				public String getGRADO () {
					return this.GRADO;
				}

				public Boolean GRADOIsNullable(){
				    return true;
				}
				public Boolean GRADOIsKey(){
				    return false;
				}
				public Integer GRADOLength(){
				    return 100;
				}
				public Integer GRADOPrecision(){
				    return 0;
				}
				public String GRADODefault(){
				
					return null;
				
				}
				public String GRADOComment(){
				
				    return "";
				
				}
				public String GRADOPattern(){
				
					return "";
				
				}
				public String GRADOOriginalDbColumnName(){
				
					return "GRADO";
				
				}

				
			    public BigDecimal PROFESIONAL_ID;

				public BigDecimal getPROFESIONAL_ID () {
					return this.PROFESIONAL_ID;
				}

				public Boolean PROFESIONAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROFESIONAL_IDIsKey(){
				    return false;
				}
				public Integer PROFESIONAL_IDLength(){
				    return 0;
				}
				public Integer PROFESIONAL_IDPrecision(){
				    return null;
				}
				public String PROFESIONAL_IDDefault(){
				
					return "";
				
				}
				public String PROFESIONAL_IDComment(){
				
				    return "";
				
				}
				public String PROFESIONAL_IDPattern(){
				
					return "";
				
				}
				public String PROFESIONAL_IDOriginalDbColumnName(){
				
					return "PROFESIONAL_ID";
				
				}

				
			    public String ESTADO;

				public String getESTADO () {
					return this.ESTADO;
				}

				public Boolean ESTADOIsNullable(){
				    return true;
				}
				public Boolean ESTADOIsKey(){
				    return false;
				}
				public Integer ESTADOLength(){
				    return null;
				}
				public Integer ESTADOPrecision(){
				    return null;
				}
				public String ESTADODefault(){
				
					return null;
				
				}
				public String ESTADOComment(){
				
				    return "";
				
				}
				public String ESTADOPattern(){
				
					return "";
				
				}
				public String ESTADOOriginalDbColumnName(){
				
					return "ESTADO";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
					this.FECHA = readDate(dis);
					
					this.SEXO_SIGLA = readString(dis);
					
					this.PYP_SIGLA = readString(dis);
					
						this.UORG_ID = (BigDecimal) dis.readObject();
					
					this.GRADO_CODIGO = readString(dis);
					
					this.FUERZA_SIGLA = readString(dis);
					
						this.VALOR_MENOR = (BigDecimal) dis.readObject();
					
					this.RANGO_EDAD = readString(dis);
					
					this.TIPO_VALORACION = readString(dis);
					
						this.DIENTES_PERMANENTES = (BigDecimal) dis.readObject();
					
						this.DIENTES_TEMPORALES = (BigDecimal) dis.readObject();
					
						this.PROTESIS = (BigDecimal) dis.readObject();
					
					this.CLASE_GRADO = readString(dis);
					
						this.CODIGO_CLAGRADO = (BigDecimal) dis.readObject();
					
					this.GRADO = readString(dis);
					
						this.PROFESIONAL_ID = (BigDecimal) dis.readObject();
					
					this.ESTADO = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
       			    	dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
					// java.util.Date
				
						writeDate(this.FECHA,dos);
					
					// String
				
						writeString(this.SEXO_SIGLA,dos);
					
					// String
				
						writeString(this.PYP_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.UORG_ID);
					
					// String
				
						writeString(this.GRADO_CODIGO,dos);
					
					// String
				
						writeString(this.FUERZA_SIGLA,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.VALOR_MENOR);
					
					// String
				
						writeString(this.RANGO_EDAD,dos);
					
					// String
				
						writeString(this.TIPO_VALORACION,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_PERMANENTES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.DIENTES_TEMPORALES);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROTESIS);
					
					// String
				
						writeString(this.CLASE_GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.CODIGO_CLAGRADO);
					
					// String
				
						writeString(this.GRADO,dos);
					
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROFESIONAL_ID);
					
					// String
				
						writeString(this.ESTADO,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",SEXO_SIGLA="+SEXO_SIGLA);
		sb.append(",PYP_SIGLA="+PYP_SIGLA);
		sb.append(",UORG_ID="+String.valueOf(UORG_ID));
		sb.append(",GRADO_CODIGO="+GRADO_CODIGO);
		sb.append(",FUERZA_SIGLA="+FUERZA_SIGLA);
		sb.append(",VALOR_MENOR="+String.valueOf(VALOR_MENOR));
		sb.append(",RANGO_EDAD="+RANGO_EDAD);
		sb.append(",TIPO_VALORACION="+TIPO_VALORACION);
		sb.append(",DIENTES_PERMANENTES="+String.valueOf(DIENTES_PERMANENTES));
		sb.append(",DIENTES_TEMPORALES="+String.valueOf(DIENTES_TEMPORALES));
		sb.append(",PROTESIS="+String.valueOf(PROTESIS));
		sb.append(",CLASE_GRADO="+CLASE_GRADO);
		sb.append(",CODIGO_CLAGRADO="+String.valueOf(CODIGO_CLAGRADO));
		sb.append(",GRADO="+GRADO);
		sb.append(",PROFESIONAL_ID="+String.valueOf(PROFESIONAL_ID));
		sb.append(",ESTADO="+ESTADO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tOracleInput_1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;


		tOracleInput_2Process(globalMap);
		tOracleInput_3Process(globalMap);
		tOracleInput_5Process(globalMap);
		tOracleInput_4Process(globalMap);
		tOracleInput_6Process(globalMap);
		tOracleInput_7Process(globalMap);
		tOracleInput_10Process(globalMap);
		tOracleInput_11Process(globalMap);
		tOracleInput_13Process(globalMap);
		tOracleInput_14Process(globalMap);
		tOracleInput_15Process(globalMap);
		tOracleInput_16Process(globalMap);
		tOracleInput_17Process(globalMap);
		tOracleInput_19Process(globalMap);
		tOracleInput_9Process(globalMap);
		tOracleInput_8Process(globalMap);
		tOracleInput_18Process(globalMap);
		tHashInput_1Process(globalMap);

		row3Struct row3 = new row3Struct();
out1Struct out1 = new out1Struct();
out2Struct out2 = new out2Struct();
out3Struct out3 = new out3Struct();
out4Struct out4 = new out4Struct();
out5Struct out5 = new out5Struct();









	
	/**
	 * [tOracleOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleOutput_1", false);
		start_Hash.put("tOracleOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out5");
					}
				
		int tos_count_tOracleOutput_1 = 0;
		






        int updateKeyCount_tOracleOutput_1 = 1;
        if(updateKeyCount_tOracleOutput_1 < 1) {
            throw new RuntimeException("For update, Schema must have a key");
        } else if (updateKeyCount_tOracleOutput_1 == 49 && true) {
                    System.err.println("For update, every Schema column can not be a key");
        }
    
    int nb_line_tOracleOutput_1 = 0;
    int nb_line_update_tOracleOutput_1 = 0;
    int nb_line_inserted_tOracleOutput_1 = 0;
    int nb_line_deleted_tOracleOutput_1 = 0;
    int nb_line_rejected_tOracleOutput_1 = 0;

    int tmp_batchUpdateCount_tOracleOutput_1 = 0;

    int deletedCount_tOracleOutput_1=0;
    int updatedCount_tOracleOutput_1=0;
    int insertedCount_tOracleOutput_1=0;
    int rowsToCommitCount_tOracleOutput_1=0;
    int rejectedCount_tOracleOutput_1=0;

    boolean whetherReject_tOracleOutput_1 = false;

    java.sql.Connection conn_tOracleOutput_1 = null;

    //optional table
    String dbschema_tOracleOutput_1 = null;
    String tableName_tOracleOutput_1 = null;
                    String driverClass_tOracleOutput_1 = "oracle.jdbc.OracleDriver";


                java.lang.Class.forName(driverClass_tOracleOutput_1);
                String url_tOracleOutput_1 = null;
                    url_tOracleOutput_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
                String dbUser_tOracleOutput_1 = context.db_destino_Login;

	final String decryptedPassword_tOracleOutput_1 = context.db_destino_Password; 

                String dbPwd_tOracleOutput_1 = decryptedPassword_tOracleOutput_1;
                dbschema_tOracleOutput_1 = context.db_destino_Schema;


                    java.util.Properties atnParamsPrope_tOracleOutput_1 = new java.util.Properties();
                    atnParamsPrope_tOracleOutput_1.put("user",dbUser_tOracleOutput_1);
                    atnParamsPrope_tOracleOutput_1.put("password",dbPwd_tOracleOutput_1);
                    if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                        atnParamsPrope_tOracleOutput_1.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
                    }
                    conn_tOracleOutput_1 = java.sql.DriverManager.getConnection(url_tOracleOutput_1, atnParamsPrope_tOracleOutput_1);
        resourceMap.put("conn_tOracleOutput_1", conn_tOracleOutput_1);
            conn_tOracleOutput_1.setAutoCommit(false);
            int commitEvery_tOracleOutput_1 = 2000;
            int commitCounter_tOracleOutput_1 = 0;
        int count_tOracleOutput_1=0;

        if(dbschema_tOracleOutput_1 == null || dbschema_tOracleOutput_1.trim().length() == 0) {
            tableName_tOracleOutput_1 = ("BODO_GENERALIDADES");
        } else {
            tableName_tOracleOutput_1 = dbschema_tOracleOutput_1 + "." + ("BODO_GENERALIDADES");
        }
                java.sql.PreparedStatement pstmt_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement("SELECT COUNT(1) FROM " + tableName_tOracleOutput_1 + " WHERE PROCESOASISTENCIAL_ID = ?");
                resourceMap.put("pstmt_tOracleOutput_1", pstmt_tOracleOutput_1);
                String insert_tOracleOutput_1 = "INSERT INTO " + tableName_tOracleOutput_1 + " (PROCESOASISTENCIAL_ID,PERSONAS_ID,FECHA,SEXO_SIGLA,PYP_SIGLA,UORG_ID,GRADO_CODIGO,FUERZA_SIGLA,VALOR_MENOR,RANGO_EDAD,TIPO_VALORACION,MORBILIDAD,OLEARY_VALOR,OLEARY,BRUXISMO,MUERDE_OBJETOS,RESPIRADOR_NASAL,SUCCION_DIGITAL,ONICOFAGIA,COP_CEOD,CARIADOS,OBTURADOS,PERDIDOS_EXTRAIDOS,INTCP,DIENTES_TEMPORALES,DIENTES_PERMANENTES,PROTESIS,PLACA_DENTAL,ESTADO_PLACA_DENTAL,DETARTRAJE_SUPRAGINGIVAL,ESTADO_SUPRAGINGIVAL,FLUOR,ESTADO_FLUOR,RESINA,ESTADO_RESINA,PROFILAXIS,ESTADO_PROFILAXIS,SELLANTES,ESTADO_SELLANTES,FLUOROSIS,GESTANTE,VIH,TIPO_USUARIO,CLASE_GRADO,CODIGO_CLAGRADO,GRADO,PROFESIONAL_ID,ESTPTRATAMIENTO,TIPO_COPCEOP) VALUES (?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?)";    
                java.sql.PreparedStatement pstmtInsert_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(insert_tOracleOutput_1);
                resourceMap.put("pstmtInsert_tOracleOutput_1", pstmtInsert_tOracleOutput_1);
                String update_tOracleOutput_1 = "UPDATE " + tableName_tOracleOutput_1 + " SET PERSONAS_ID = ?,FECHA = ?,SEXO_SIGLA = ?,PYP_SIGLA = ?,UORG_ID = ?,GRADO_CODIGO = ?,FUERZA_SIGLA = ?,VALOR_MENOR = ?,RANGO_EDAD = ?,TIPO_VALORACION = ?,MORBILIDAD = ?,OLEARY_VALOR = ?,OLEARY = ?,BRUXISMO = ?,MUERDE_OBJETOS = ?,RESPIRADOR_NASAL = ?,SUCCION_DIGITAL = ?,ONICOFAGIA = ?,COP_CEOD = ?,CARIADOS = ?,OBTURADOS = ?,PERDIDOS_EXTRAIDOS = ?,INTCP = ?,DIENTES_TEMPORALES = ?,DIENTES_PERMANENTES = ?,PROTESIS = ?,PLACA_DENTAL = ?,ESTADO_PLACA_DENTAL = ?,DETARTRAJE_SUPRAGINGIVAL = ?,ESTADO_SUPRAGINGIVAL = ?,FLUOR = ?,ESTADO_FLUOR = ?,RESINA = ?,ESTADO_RESINA = ?,PROFILAXIS = ?,ESTADO_PROFILAXIS = ?,SELLANTES = ?,ESTADO_SELLANTES = ?,FLUOROSIS = ?,GESTANTE = ?,VIH = ?,TIPO_USUARIO = ?,CLASE_GRADO = ?,CODIGO_CLAGRADO = ?,GRADO = ?,PROFESIONAL_ID = ?,ESTPTRATAMIENTO = ?,TIPO_COPCEOP = ? WHERE PROCESOASISTENCIAL_ID = ?";
                java.sql.PreparedStatement pstmtUpdate_tOracleOutput_1 = conn_tOracleOutput_1.prepareStatement(update_tOracleOutput_1);
                resourceMap.put("pstmtUpdate_tOracleOutput_1", pstmtUpdate_tOracleOutput_1);





 



/**
 * [tOracleOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_6", false);
		start_Hash.put("tMap_6", System.currentTimeMillis());
		
	
	currentComponent="tMap_6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out4");
					}
				
		int tos_count_tMap_6 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct>) 
					globalMap.get( "tHash_Lookup_row20" ))
					;					
					
	

row20Struct row20HashKey = new row20Struct();
row20Struct row20Default = new row20Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct>) 
					globalMap.get( "tHash_Lookup_row21" ))
					;					
					
	

row21Struct row21HashKey = new row21Struct();
row21Struct row21Default = new row21Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct>) 
					globalMap.get( "tHash_Lookup_row22" ))
					;					
					
	

row22Struct row22HashKey = new row22Struct();
row22Struct row22Default = new row22Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_6__Struct  {
}
Var__tMap_6__Struct Var__tMap_6 = new Var__tMap_6__Struct();
// ###############################

// ###############################
// # Outputs initialization
out5Struct out5_tmp = new out5Struct();
// ###############################

        
        



        









 



/**
 * [tMap_6 begin ] stop
 */



	
	/**
	 * [tMap_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_5", false);
		start_Hash.put("tMap_5", System.currentTimeMillis());
		
	
	currentComponent="tMap_5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out3");
					}
				
		int tos_count_tMap_5 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct>) 
					globalMap.get( "tHash_Lookup_row16" ))
					;					
					
	

row16Struct row16HashKey = new row16Struct();
row16Struct row16Default = new row16Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct>) 
					globalMap.get( "tHash_Lookup_row17" ))
					;					
					
	

row17Struct row17HashKey = new row17Struct();
row17Struct row17Default = new row17Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct>) 
					globalMap.get( "tHash_Lookup_row18" ))
					;					
					
	

row18Struct row18HashKey = new row18Struct();
row18Struct row18Default = new row18Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct>) 
					globalMap.get( "tHash_Lookup_row23" ))
					;					
					
	

row23Struct row23HashKey = new row23Struct();
row23Struct row23Default = new row23Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_5__Struct  {
}
Var__tMap_5__Struct Var__tMap_5 = new Var__tMap_5__Struct();
// ###############################

// ###############################
// # Outputs initialization
out4Struct out4_tmp = new out4Struct();
// ###############################

        
        



        









 



/**
 * [tMap_5 begin ] stop
 */



	
	/**
	 * [tMap_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_4", false);
		start_Hash.put("tMap_4", System.currentTimeMillis());
		
	
	currentComponent="tMap_4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out2");
					}
				
		int tos_count_tMap_4 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct>) 
					globalMap.get( "tHash_Lookup_row13" ))
					;					
					
	

row13Struct row13HashKey = new row13Struct();
row13Struct row13Default = new row13Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct>) 
					globalMap.get( "tHash_Lookup_row14" ))
					;					
					
	

row14Struct row14HashKey = new row14Struct();
row14Struct row14Default = new row14Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct>) 
					globalMap.get( "tHash_Lookup_row15" ))
					;					
					
	

row15Struct row15HashKey = new row15Struct();
row15Struct row15Default = new row15Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_4__Struct  {
}
Var__tMap_4__Struct Var__tMap_4 = new Var__tMap_4__Struct();
// ###############################

// ###############################
// # Outputs initialization
out3Struct out3_tmp = new out3Struct();
// ###############################

        
        



        









 



/**
 * [tMap_4 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"out1");
					}
				
		int tos_count_tMap_2 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct>) 
					globalMap.get( "tHash_Lookup_row8" ))
					;					
					
	

row8Struct row8HashKey = new row8Struct();
row8Struct row8Default = new row8Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct>) 
					globalMap.get( "tHash_Lookup_row9" ))
					;					
					
	

row9Struct row9HashKey = new row9Struct();
row9Struct row9Default = new row9Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct>) 
					globalMap.get( "tHash_Lookup_row10" ))
					;					
					
	

row10Struct row10HashKey = new row10Struct();
row10Struct row10Default = new row10Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct>) 
					globalMap.get( "tHash_Lookup_row11" ))
					;					
					
	

row11Struct row11HashKey = new row11Struct();
row11Struct row11Default = new row11Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
out2Struct out2_tmp = new out2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row3");
					}
				
		int tos_count_tMap_1 = 0;
		




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct>) 
					globalMap.get( "tHash_Lookup_row5" ))
					;					
					
	

row5Struct row5HashKey = new row5Struct();
row5Struct row5Default = new row5Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct>) 
					globalMap.get( "tHash_Lookup_row6" ))
					;					
					
	

row6Struct row6HashKey = new row6Struct();
row6Struct row6Default = new row6Struct();
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct>) 
					globalMap.get( "tHash_Lookup_row7" ))
					;					
					
	

row7Struct row7HashKey = new row7Struct();
row7Struct row7Default = new row7Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
out1Struct out1_tmp = new out1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tOracleInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_1", false);
		start_Hash.put("tOracleInput_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_1";
	
	
		int tos_count_tOracleInput_1 = 0;
		
	


	
		    int nb_line_tOracleInput_1 = 0;
		    java.sql.Connection conn_tOracleInput_1 = null;
				conn_tOracleInput_1 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_1 = false;
				boolean isConnectionWrapped_tOracleInput_1 = !(conn_tOracleInput_1 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_1.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_1 = null;
                if (isConnectionWrapped_tOracleInput_1) {
					unwrappedOraConn_tOracleInput_1 = conn_tOracleInput_1.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_1 != null) {
                        isTimeZoneNull_tOracleInput_1 = (unwrappedOraConn_tOracleInput_1.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_1 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_1).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_1) {
					java.sql.Statement stmtGetTZ_tOracleInput_1 = conn_tOracleInput_1.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_1 = stmtGetTZ_tOracleInput_1.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_1 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_1.next()) {
						sessionTimezone_tOracleInput_1 = rsGetTZ_tOracleInput_1.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_1 && unwrappedOraConn_tOracleInput_1 != null) {
                        unwrappedOraConn_tOracleInput_1.setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_1).setSessionTimeZone(sessionTimezone_tOracleInput_1);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_1 = conn_tOracleInput_1.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_1.setFetchSize(1000);


		    String dbquery_tOracleInput_1 = "SELECT   PA.ID AS PROCESOASISTENCIAL_ID\n					, PA.PERSONAS_ID\n					, PA.FFINAL AS FECHA\n					, GSEX.SIGLA AS SEXO_SI"
+"GLA\n					, PYP.SIGLA AS PYP_SIGLA\n					, PA.UORG_ID \n					, GRA.CODIGO AS GRADO_CODIGO\n					, GF.SIGLA AS FUERZA_SIG"
+"LA\n					, GRC.VALOR_MENOR \n					, GRC.DESCRIPCION AS RANGO_EDAD\n					, VAL.CONTROL AS TIPO_VALORACION\n					, VAL.DIE"
+"NTESPERMANENTES AS DIENTES_PERMANENTES\n					, VAL.DIENTESTEMPORALES AS DIENTES_TEMPORALES \n					, DECODE( VAL.PROTESIS"
+", 'Si', 1, null) AS PROTESIS\n					, CLAGR.DESCRIPCION AS CLASE_GRADO\n					, CLAGR.CODIGO AS CODIGO_CLAGRADO\n					, GR"
+"A.NOMBRE AS GRADO\n					, GUSU.PERSONAS_ID AS PROFESIONAL_ID\n					, tra.ESTADO\nFROM HCL_VALORACIONES VAL \nINNER JOIN "
+"GEN_FINALIDADCONSULTA FIN ON FIN.ID = VAL.FINALIDADCONSULTA_ID\nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = VAL.P"
+"ROCESOSASISTENCIALES_ID \nINNER JOIN GEN_FINALIDADCONSULTA FIN ON FIN.ID = VAL.FINALIDADCONSULTA_ID\nINNER JOIN GEN_USUA"
+"RIOS GUSU ON GUSU.ID = PA.USUARIOS_ID\nINNER JOIN GEN_PERSONAS GP ON GP.ID = PA.PERSONAS_ID \nINNER JOIN GEN_RANGOEDAD G"
+"RC ON GP.FECHA_NACIMIENTO > ADD_MONTHS(PA.FFINAL,-(GRC.VALOR_MAYOR+1)*12) \n				AND GP.FECHA_NACIMIENTO <= ADD_MONTHS(PA"
+".FFINAL,-(GRC.VALOR_MENOR)*12) AND GRC.CLASIFICACION = 'Quinquenios'\nINNER JOIN GEN_AFILIADOS GA ON GA.PERSONAS_ID = GP"
+".ID AND GA.ESTREGISTRO_ID =1 \nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE AEA ON ((AEA.AFILIADOS_ID = GA.ID AND GA.PADRE_ID I"
+"S NULL) OR AEA.AFILIADOS_ID = GA.PADRE_ID) \n				AND AEA.PRINCIPAL = 1 AND AEA.ESTREGISTRO_ID =1 \nINNER JOIN GEN_UORG G"
+"U ON GU.ID = PA.UORG_ID \nINNER JOIN GEN_FUERZAS GF ON GF.ID = GU.FUERZA_ID \nLEFT JOIN GEN_GRDMILITARES GRA ON GRA.ID ="
+" AEA.GRDMILITARES_ID\nLEFT JOIN GEN_CLASEGRD CLAGR ON CLAGR.ID = GRA.CLASEGRD_ID\nLEFT JOIN GEN_SEXOS GSEX ON GSEX.ID = "
+"GP.SEXO_ID\nLEFT JOIN GEN_PYP PYP ON PYP.ID = VAL.PYP_ID AND PYP.SIGLA = 'PSO'\nLEFT JOIN  ODO_PLANTRATAMIENTO TRA ON TR"
+"A.PROCESOSASISTENCIALES_ID = PA.ID\nWHERE \n"+context.CONDITION_PRINCIPAL+" \n VAL.ESTREGISTRO_ID =1 \nAND PA.ESTREGISTRO_ID = 1\nAND VAL.ESTADO = 'Finalizado'\nAND ( VAL.PYP_ID = (SELECT ID FRO"
+"M GEN_PYP WHERE SIGLA = 'PSO')\n      OR VAL.CUPS_ID IN ( SELECT DISTINCT CU.ID FROM GEN_ESPCUPS EC\n                   "
+"       							INNER JOIN GEN_ESPECIALIDADES ESP ON ESP.ID = EC.ESPECIALIDADES_ID\n                          							INNER"
+" JOIN GEN_CUPS CU ON CU.ID = EC.CUPS_ID\n                         							WHERE ESP.CLASIFICACION = 'ODONTOLIGIA' \n     "
+"                       								AND ESP.ESTADO = 'Activo'\n                            								AND CU.TCUPS = 2\n        "
+"                    								AND CU.SIGLA IN ('ODO','ODO-CONT', 'ODO-PRIM') ) )\n";
		    

		    globalMap.put("tOracleInput_1_QUERY",dbquery_tOracleInput_1);

		    java.sql.ResultSet rs_tOracleInput_1 = null;

		    try {
		    	rs_tOracleInput_1 = stmt_tOracleInput_1.executeQuery(dbquery_tOracleInput_1);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_1 = rs_tOracleInput_1.getMetaData();
		    	int colQtyInRs_tOracleInput_1 = rsmd_tOracleInput_1.getColumnCount();

		    String tmpContent_tOracleInput_1 = null;
		    
		    
		    while (rs_tOracleInput_1.next()) {
		        nb_line_tOracleInput_1++;
		        
							if(colQtyInRs_tOracleInput_1 < 1) {
								row3.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(1) != null) {
						row3.PROCESOASISTENCIAL_ID = rs_tOracleInput_1.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 2) {
								row3.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(2) != null) {
						row3.PERSONAS_ID = rs_tOracleInput_1.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 3) {
								row3.FECHA = null;
							} else {
										
			row3.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_1, 3);
		                    }
							if(colQtyInRs_tOracleInput_1 < 4) {
								row3.SEXO_SIGLA = null;
							} else {
	                         		
        	row3.SEXO_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 5) {
								row3.PYP_SIGLA = null;
							} else {
	                         		
        	row3.PYP_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 6) {
								row3.UORG_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(6) != null) {
						row3.UORG_ID = rs_tOracleInput_1.getBigDecimal(6);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 7) {
								row3.GRADO_CODIGO = null;
							} else {
	                         		
        	row3.GRADO_CODIGO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 7, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 8) {
								row3.FUERZA_SIGLA = null;
							} else {
	                         		
        	row3.FUERZA_SIGLA = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 8, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 9) {
								row3.VALOR_MENOR = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(9) != null) {
						row3.VALOR_MENOR = rs_tOracleInput_1.getBigDecimal(9);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 10) {
								row3.RANGO_EDAD = null;
							} else {
	                         		
        	row3.RANGO_EDAD = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 10, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 11) {
								row3.TIPO_VALORACION = null;
							} else {
	                         		
        	row3.TIPO_VALORACION = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 11, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 12) {
								row3.DIENTES_PERMANENTES = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(12) != null) {
						row3.DIENTES_PERMANENTES = rs_tOracleInput_1.getBigDecimal(12);
					} else {
				
						row3.DIENTES_PERMANENTES = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 13) {
								row3.DIENTES_TEMPORALES = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(13) != null) {
						row3.DIENTES_TEMPORALES = rs_tOracleInput_1.getBigDecimal(13);
					} else {
				
						row3.DIENTES_TEMPORALES = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 14) {
								row3.PROTESIS = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(14) != null) {
						row3.PROTESIS = rs_tOracleInput_1.getBigDecimal(14);
					} else {
				
						row3.PROTESIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 15) {
								row3.CLASE_GRADO = null;
							} else {
	                         		
        	row3.CLASE_GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 15, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 16) {
								row3.CODIGO_CLAGRADO = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(16) != null) {
						row3.CODIGO_CLAGRADO = rs_tOracleInput_1.getBigDecimal(16);
					} else {
				
						row3.CODIGO_CLAGRADO = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 17) {
								row3.GRADO = null;
							} else {
	                         		
        	row3.GRADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 17, false);
		                    }
							if(colQtyInRs_tOracleInput_1 < 18) {
								row3.PROFESIONAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_1.getObject(18) != null) {
						row3.PROFESIONAL_ID = rs_tOracleInput_1.getBigDecimal(18);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_1 < 19) {
								row3.ESTADO = null;
							} else {
	                         		
        	row3.ESTADO = routines.system.JDBCUtil.getString(rs_tOracleInput_1, 19, false);
		                    }
					




 



/**
 * [tOracleInput_1 begin ] stop
 */
	
	/**
	 * [tOracleInput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 


	tos_count_tOracleInput_1++;

/**
 * [tOracleInput_1 main ] stop
 */
	
	/**
	 * [tOracleInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
						row4Struct row4 = null;
					
						row5Struct row5 = null;
					
						row6Struct row6 = null;
					
						row7Struct row7 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_1 = false;
		boolean mainRowRejected_tMap_1 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row4HashKey.PROCESOASISTENCIAL_ID = row3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.PROCESOASISTENCIAL_ID = '" + row4HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row5" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow5 = false;
       		  	    	
       		  	    	
 							row5Struct row5ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row5HashKey.PROCESOASISTENCIAL_ID = row3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row5HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row5.lookup( row5HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row5 != null && tHash_Lookup_row5.getCount(row5HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row5' and it contains more one result from keys :  row5.PROCESOASISTENCIAL_ID = '" + row5HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row5Struct fromLookup_row5 = null;
							row5 = row5Default;
										 
							
								 
							
							
								if (tHash_Lookup_row5 !=null && tHash_Lookup_row5.hasNext()) { // G 099
								
							
								
								fromLookup_row5 = tHash_Lookup_row5.next();

							
							
								} // G 099
							
							

							if(fromLookup_row5 != null) {
								row5 = fromLookup_row5;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row6" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow6 = false;
       		  	    	
       		  	    	
 							row6Struct row6ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row6HashKey.PROCESOASISTENCIAL_ID = row3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row6HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row6.lookup( row6HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row6 != null && tHash_Lookup_row6.getCount(row6HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row6' and it contains more one result from keys :  row6.PROCESOASISTENCIAL_ID = '" + row6HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row6Struct fromLookup_row6 = null;
							row6 = row6Default;
										 
							
								 
							
							
								if (tHash_Lookup_row6 !=null && tHash_Lookup_row6.hasNext()) { // G 099
								
							
								
								fromLookup_row6 = tHash_Lookup_row6.next();

							
							
								} // G 099
							
							

							if(fromLookup_row6 != null) {
								row6 = fromLookup_row6;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row7" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow7 = false;
       		  	    	
       		  	    	
 							row7Struct row7ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
                        		    		    row7HashKey.PROCESOASISTENCIAL_ID = row3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row7HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row7.lookup( row7HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row7 != null && tHash_Lookup_row7.getCount(row7HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row7' and it contains more one result from keys :  row7.PROCESOASISTENCIAL_ID = '" + row7HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row7Struct fromLookup_row7 = null;
							row7 = row7Default;
										 
							
								 
							
							
								if (tHash_Lookup_row7 !=null && tHash_Lookup_row7.hasNext()) { // G 099
								
							
								
								fromLookup_row7 = tHash_Lookup_row7.next();

							
							
								} // G 099
							
							

							if(fromLookup_row7 != null) {
								row7 = fromLookup_row7;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;// ###############################
        // ###############################
        // # Output tables

out1 = null;


// # Output table : 'out1'
out1_tmp.PROCESOASISTENCIAL_ID = row3.PROCESOASISTENCIAL_ID ;
out1_tmp.PERSONAS_ID = row3.PERSONAS_ID ;
out1_tmp.FECHA = row3.FECHA ;
out1_tmp.SEXO_SIGLA = row3.SEXO_SIGLA ;
out1_tmp.PYP_SIGLA = row3.PYP_SIGLA ;
out1_tmp.UORG_ID = row3.UORG_ID ;
out1_tmp.GRADO_CODIGO = row3.GRADO_CODIGO ;
out1_tmp.FUERZA_SIGLA = row3.FUERZA_SIGLA ;
out1_tmp.VALOR_MENOR = row3.VALOR_MENOR ;
out1_tmp.RANGO_EDAD = row3.RANGO_EDAD ;
out1_tmp.TIPO_VALORACION = row3.TIPO_VALORACION ;
out1_tmp.MORBILIDAD = row6.PERIODONTAL_CARIES != null ? "ENF. PERIODONTAL Y CARIES": row4.SANO != null ? "SANO": row5.CARIES != null ? "CARIES": row7.PERIODONTAL  != null ? "ENF. PERIODONTAL": "" ;
out1_tmp.DIENTES_PERMANENTES = row3.DIENTES_PERMANENTES ;
out1_tmp.DIENTES_TEMPORALES = row3.DIENTES_TEMPORALES ;
out1_tmp.PROTESIS = row3.PROTESIS ;
out1_tmp.CLASE_GRADO = row3.CLASE_GRADO ;
out1_tmp.CODIGO_CLAGRADO = row3.CODIGO_CLAGRADO ;
out1_tmp.GRADO = row3.GRADO ;
out1_tmp.PROFESIONAL_ID = row3.PROFESIONAL_ID ;
out1_tmp.ESTADO = row3.ESTADO ;
out1 = out1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
	
	/**
	 * [tMap_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_begin ] stop
 */
// Start of branch "out1"
if(out1 != null) { 



	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out1"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
						row8Struct row8 = null;
					
						row9Struct row9 = null;
					
						row10Struct row10 = null;
					
						row11Struct row11 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_2 = false;
		boolean mainRowRejected_tMap_2 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row8" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow8 = false;
       		  	    	
       		  	    	
 							row8Struct row8ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row8HashKey.PROCESOASISTENCIAL_ID = out1.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row8HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row8.lookup( row8HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row8 != null && tHash_Lookup_row8.getCount(row8HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row8' and it contains more one result from keys :  row8.PROCESOASISTENCIAL_ID = '" + row8HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row8Struct fromLookup_row8 = null;
							row8 = row8Default;
										 
							
								 
							
							
								if (tHash_Lookup_row8 !=null && tHash_Lookup_row8.hasNext()) { // G 099
								
							
								
								fromLookup_row8 = tHash_Lookup_row8.next();

							
							
								} // G 099
							
							

							if(fromLookup_row8 != null) {
								row8 = fromLookup_row8;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row9" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow9 = false;
       		  	    	
       		  	    	
 							row9Struct row9ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row9HashKey.PROCESOASISTENCIAL_ID = out1.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row9HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row9.lookup( row9HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row9 != null && tHash_Lookup_row9.getCount(row9HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row9' and it contains more one result from keys :  row9.PROCESOASISTENCIAL_ID = '" + row9HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row9Struct fromLookup_row9 = null;
							row9 = row9Default;
										 
							
								 
							
							
								if (tHash_Lookup_row9 !=null && tHash_Lookup_row9.hasNext()) { // G 099
								
							
								
								fromLookup_row9 = tHash_Lookup_row9.next();

							
							
								} // G 099
							
							

							if(fromLookup_row9 != null) {
								row9 = fromLookup_row9;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row10" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow10 = false;
       		  	    	
       		  	    	
 							row10Struct row10ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row10HashKey.PROCESOSASISTENCIALES_ID = out1.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row10HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row10.lookup( row10HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row10 != null && tHash_Lookup_row10.getCount(row10HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row10' and it contains more one result from keys :  row10.PROCESOSASISTENCIALES_ID = '" + row10HashKey.PROCESOSASISTENCIALES_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row10Struct fromLookup_row10 = null;
							row10 = row10Default;
										 
							
								 
							
							
								if (tHash_Lookup_row10 !=null && tHash_Lookup_row10.hasNext()) { // G 099
								
							
								
								fromLookup_row10 = tHash_Lookup_row10.next();

							
							
								} // G 099
							
							

							if(fromLookup_row10 != null) {
								row10 = fromLookup_row10;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row11" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow11 = false;
       		  	    	
       		  	    	
 							row11Struct row11ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
                        		    		    row11HashKey.PROCESOASISTENCIAL_ID = out1.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row11HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row11.lookup( row11HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row11 != null && tHash_Lookup_row11.getCount(row11HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row11' and it contains more one result from keys :  row11.PROCESOASISTENCIAL_ID = '" + row11HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row11Struct fromLookup_row11 = null;
							row11 = row11Default;
										 
							
								 
							
							
								if (tHash_Lookup_row11 !=null && tHash_Lookup_row11.hasNext()) { // G 099
								
							
								
								fromLookup_row11 = tHash_Lookup_row11.next();

							
							
								} // G 099
							
							

							if(fromLookup_row11 != null) {
								row11 = fromLookup_row11;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;// ###############################
        // ###############################
        // # Output tables

out2 = null;


// # Output table : 'out2'
out2_tmp.PROCESOASISTENCIAL_ID = out1.PROCESOASISTENCIAL_ID ;
out2_tmp.PERSONAS_ID = out1.PERSONAS_ID ;
out2_tmp.FECHA = out1.FECHA ;
out2_tmp.SEXO_SIGLA = out1.SEXO_SIGLA ;
out2_tmp.PYP_SIGLA = out1.PYP_SIGLA ;
out2_tmp.UORG_ID = out1.UORG_ID ;
out2_tmp.GRADO_CODIGO = out1.GRADO_CODIGO ;
out2_tmp.FUERZA_SIGLA = out1.FUERZA_SIGLA ;
out2_tmp.VALOR_MENOR = out1.VALOR_MENOR ;
out2_tmp.RANGO_EDAD = out1.RANGO_EDAD ;
out2_tmp.TIPO_VALORACION = out1.TIPO_VALORACION ;
out2_tmp.MORBILIDAD = out1.MORBILIDAD ;
out2_tmp.OLEARY_VALOR = row8.OLEARY_VALOR ;
out2_tmp.OLEARY = row8.OLEARY ;
out2_tmp.BRUXISMO = row9.BRUXISMO ;
out2_tmp.MUERDE_OBJETOS = row9.MUERDE_OBJETOS ;
out2_tmp.RESPIRADOR_NASAL = row9.RESPIRADOR_NASAL ;
out2_tmp.SUCCION_DIGITAL = row9.SUCCION_DIGITAL ;
out2_tmp.ONICOFAGIA = row9.ONICOFAGIA ;
out2_tmp.COP_CEOD = row10.COP_CEOD ;
out2_tmp.CARIADOS = row10.CARIADOS ;
out2_tmp.OBTURADOS = row10.OBTURADOS ;
out2_tmp.PERDIDOS_EXTRAIDOS = row10.PERDIDOS_EXTRAIDOS ;
out2_tmp.INTCP = row11.INTCP ;
out2_tmp.DIENTES_PERMANENTES = out1.DIENTES_PERMANENTES ;
out2_tmp.DIENTES_TEMPORALES = out1.DIENTES_TEMPORALES ;
out2_tmp.PROTESIS = out1.PROTESIS ;
out2_tmp.CLASE_GRADO = out1.CLASE_GRADO ;
out2_tmp.CODIGO_CLAGRADO = out1.CODIGO_CLAGRADO ;
out2_tmp.GRADO = out1.GRADO ;
out2_tmp.PROFESIONAL_ID = out1.PROFESIONAL_ID ;
out2_tmp.ESTADO = out1.ESTADO ;
out2_tmp.TIPO_COPCEOP = row10.TIPO_COPCEOP ;
out2 = out2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
	
	/**
	 * [tMap_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_begin ] stop
 */
// Start of branch "out2"
if(out2 != null) { 



	
	/**
	 * [tMap_4 main ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out2"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_4 = false;
		
						row13Struct row13 = null;
					
						row14Struct row14 = null;
					
						row15Struct row15 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_4 = false;
		boolean mainRowRejected_tMap_4 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row13" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow13 = false;
       		  	    	
       		  	    	
 							row13Struct row13ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row13HashKey.PA_ID = out2.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row13HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row13.lookup( row13HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row13 != null && tHash_Lookup_row13.getCount(row13HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row13' and it contains more one result from keys :  row13.PA_ID = '" + row13HashKey.PA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row13Struct fromLookup_row13 = null;
							row13 = row13Default;
										 
							
								 
							
							
								if (tHash_Lookup_row13 !=null && tHash_Lookup_row13.hasNext()) { // G 099
								
							
								
								fromLookup_row13 = tHash_Lookup_row13.next();

							
							
								} // G 099
							
							

							if(fromLookup_row13 != null) {
								row13 = fromLookup_row13;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row14" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow14 = false;
       		  	    	
       		  	    	
 							row14Struct row14ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row14HashKey.PA_ID = out2.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row14HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row14.lookup( row14HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row14 != null && tHash_Lookup_row14.getCount(row14HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row14' and it contains more one result from keys :  row14.PA_ID = '" + row14HashKey.PA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row14Struct fromLookup_row14 = null;
							row14 = row14Default;
										 
							
								 
							
							
								if (tHash_Lookup_row14 !=null && tHash_Lookup_row14.hasNext()) { // G 099
								
							
								
								fromLookup_row14 = tHash_Lookup_row14.next();

							
							
								} // G 099
							
							

							if(fromLookup_row14 != null) {
								row14 = fromLookup_row14;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row15" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow15 = false;
       		  	    	
       		  	    	
 							row15Struct row15ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_4) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_4 = false;
								
                        		    		    row15HashKey.PA_ID = out2.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row15HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row15.lookup( row15HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row15 != null && tHash_Lookup_row15.getCount(row15HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row15' and it contains more one result from keys :  row15.PA_ID = '" + row15HashKey.PA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row15Struct fromLookup_row15 = null;
							row15 = row15Default;
										 
							
								 
							
							
								if (tHash_Lookup_row15 !=null && tHash_Lookup_row15.hasNext()) { // G 099
								
							
								
								fromLookup_row15 = tHash_Lookup_row15.next();

							
							
								} // G 099
							
							

							if(fromLookup_row15 != null) {
								row15 = fromLookup_row15;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_4__Struct Var = Var__tMap_4;// ###############################
        // ###############################
        // # Output tables

out3 = null;


// # Output table : 'out3'
out3_tmp.PROCESOASISTENCIAL_ID = out2.PROCESOASISTENCIAL_ID ;
out3_tmp.PERSONAS_ID = out2.PERSONAS_ID ;
out3_tmp.FECHA = out2.FECHA ;
out3_tmp.SEXO_SIGLA = out2.SEXO_SIGLA ;
out3_tmp.PYP_SIGLA = out2.PYP_SIGLA ;
out3_tmp.UORG_ID = out2.UORG_ID ;
out3_tmp.GRADO_CODIGO = out2.GRADO_CODIGO ;
out3_tmp.FUERZA_SIGLA = out2.FUERZA_SIGLA ;
out3_tmp.VALOR_MENOR = out2.VALOR_MENOR ;
out3_tmp.RANGO_EDAD = out2.RANGO_EDAD ;
out3_tmp.TIPO_VALORACION = out2.TIPO_VALORACION ;
out3_tmp.MORBILIDAD = out2.MORBILIDAD ;
out3_tmp.OLEARY_VALOR = out2.OLEARY_VALOR ;
out3_tmp.OLEARY = out2.OLEARY ;
out3_tmp.BRUXISMO = out2.BRUXISMO ;
out3_tmp.MUERDE_OBJETOS = out2.MUERDE_OBJETOS ;
out3_tmp.RESPIRADOR_NASAL = out2.RESPIRADOR_NASAL ;
out3_tmp.SUCCION_DIGITAL = out2.SUCCION_DIGITAL ;
out3_tmp.ONICOFAGIA = out2.ONICOFAGIA ;
out3_tmp.COP_CEOD = out2.COP_CEOD ;
out3_tmp.CARIADOS = out2.CARIADOS ;
out3_tmp.OBTURADOS = out2.OBTURADOS ;
out3_tmp.PERDIDOS_EXTRAIDOS = out2.PERDIDOS_EXTRAIDOS ;
out3_tmp.INTCP = out2.INTCP ;
out3_tmp.DIENTES_TEMPORALES = out2.DIENTES_TEMPORALES ;
out3_tmp.DIENTES_PERMANENTES = out2.DIENTES_PERMANENTES ;
out3_tmp.PROTESIS = out2.PROTESIS ;
out3_tmp.PLACA_DENTAL = row13.PLACA_DENTAL ;
out3_tmp.ESTADO_PLACA_DENTAL = row13.ESTADO_PLACA_DENTAL ;
out3_tmp.DETARTRAJE_SUPRAGINGIVAL = row14.DETARTRAJE_SUPRAGINGIVAL ;
out3_tmp.ESTADO_SUPRAGINGIVAL = row14.ESTADO_SUPRAGINGIVAL ;
out3_tmp.FLUOR = row15.FLUOR ;
out3_tmp.ESTADO_FLUOR = row15.ESTADO_FLUOR ;
out3_tmp.CLASE_GRADO = out2.CLASE_GRADO ;
out3_tmp.CODIGO_CLAGRADO = out2.CODIGO_CLAGRADO ;
out3_tmp.GRADO = out2.GRADO ;
out3_tmp.PROFESIONAL_ID = out2.PROFESIONAL_ID ;
out3_tmp.ESTADO = out2.ESTADO ;
out3_tmp.TIPO_COPCEOP = out2.TIPO_COPCEOP ;
out3 = out3_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_4 = false;










 


	tos_count_tMap_4++;

/**
 * [tMap_4 main ] stop
 */
	
	/**
	 * [tMap_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_begin ] stop
 */
// Start of branch "out3"
if(out3 != null) { 



	
	/**
	 * [tMap_5 main ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out3"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_5 = false;
		
						row16Struct row16 = null;
					
						row17Struct row17 = null;
					
						row18Struct row18 = null;
					
						row23Struct row23 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_5 = false;
		boolean mainRowRejected_tMap_5 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row16" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow16 = false;
       		  	    	
       		  	    	
 							row16Struct row16ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row16HashKey.PA_ID = out3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row16HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row16.lookup( row16HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row16 != null && tHash_Lookup_row16.getCount(row16HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row16' and it contains more one result from keys :  row16.PA_ID = '" + row16HashKey.PA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row16Struct fromLookup_row16 = null;
							row16 = row16Default;
										 
							
								 
							
							
								if (tHash_Lookup_row16 !=null && tHash_Lookup_row16.hasNext()) { // G 099
								
							
								
								fromLookup_row16 = tHash_Lookup_row16.next();

							
							
								} // G 099
							
							

							if(fromLookup_row16 != null) {
								row16 = fromLookup_row16;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row17" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow17 = false;
       		  	    	
       		  	    	
 							row17Struct row17ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row17HashKey.PA_ID = out3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row17HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row17.lookup( row17HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row17 != null && tHash_Lookup_row17.getCount(row17HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row17' and it contains more one result from keys :  row17.PA_ID = '" + row17HashKey.PA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row17Struct fromLookup_row17 = null;
							row17 = row17Default;
										 
							
								 
							
							
								if (tHash_Lookup_row17 !=null && tHash_Lookup_row17.hasNext()) { // G 099
								
							
								
								fromLookup_row17 = tHash_Lookup_row17.next();

							
							
								} // G 099
							
							

							if(fromLookup_row17 != null) {
								row17 = fromLookup_row17;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row18" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow18 = false;
       		  	    	
       		  	    	
 							row18Struct row18ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row18HashKey.PA_ID = out3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row18HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row18.lookup( row18HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row18 != null && tHash_Lookup_row18.getCount(row18HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row18' and it contains more one result from keys :  row18.PA_ID = '" + row18HashKey.PA_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row18Struct fromLookup_row18 = null;
							row18 = row18Default;
										 
							
								 
							
							
								if (tHash_Lookup_row18 !=null && tHash_Lookup_row18.hasNext()) { // G 099
								
							
								
								fromLookup_row18 = tHash_Lookup_row18.next();

							
							
								} // G 099
							
							

							if(fromLookup_row18 != null) {
								row18 = fromLookup_row18;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row23" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow23 = false;
       		  	    	
       		  	    	
 							row23Struct row23ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_5) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_5 = false;
								
                        		    		    row23HashKey.PROCESOASISTENCIAL_ID = out3.PROCESOASISTENCIAL_ID ;
                        		    		

								
		                        	row23HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row23.lookup( row23HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row23 != null && tHash_Lookup_row23.getCount(row23HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row23' and it contains more one result from keys :  row23.PROCESOASISTENCIAL_ID = '" + row23HashKey.PROCESOASISTENCIAL_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row23Struct fromLookup_row23 = null;
							row23 = row23Default;
										 
							
								 
							
							
								if (tHash_Lookup_row23 !=null && tHash_Lookup_row23.hasNext()) { // G 099
								
							
								
								fromLookup_row23 = tHash_Lookup_row23.next();

							
							
								} // G 099
							
							

							if(fromLookup_row23 != null) {
								row23 = fromLookup_row23;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_5__Struct Var = Var__tMap_5;// ###############################
        // ###############################
        // # Output tables

out4 = null;


// # Output table : 'out4'
out4_tmp.PROCESOASISTENCIAL_ID = out3.PROCESOASISTENCIAL_ID ;
out4_tmp.PERSONAS_ID = out3.PERSONAS_ID ;
out4_tmp.FECHA = out3.FECHA ;
out4_tmp.SEXO_SIGLA = out3.SEXO_SIGLA ;
out4_tmp.PYP_SIGLA = out3.PYP_SIGLA ;
out4_tmp.UORG_ID = out3.UORG_ID ;
out4_tmp.GRADO_CODIGO = out3.GRADO_CODIGO ;
out4_tmp.FUERZA_SIGLA = out3.FUERZA_SIGLA ;
out4_tmp.VALOR_MENOR = out3.VALOR_MENOR ;
out4_tmp.RANGO_EDAD = out3.RANGO_EDAD ;
out4_tmp.TIPO_VALORACION = out3.TIPO_VALORACION ;
out4_tmp.MORBILIDAD = out3.MORBILIDAD ;
out4_tmp.OLEARY_VALOR = out3.OLEARY_VALOR ;
out4_tmp.OLEARY = out3.OLEARY ;
out4_tmp.BRUXISMO = out3.BRUXISMO ;
out4_tmp.MUERDE_OBJETOS = out3.MUERDE_OBJETOS ;
out4_tmp.RESPIRADOR_NASAL = out3.RESPIRADOR_NASAL ;
out4_tmp.SUCCION_DIGITAL = out3.SUCCION_DIGITAL ;
out4_tmp.ONICOFAGIA = out3.ONICOFAGIA ;
out4_tmp.COP_CEOD = out3.COP_CEOD ;
out4_tmp.CARIADOS = out3.CARIADOS ;
out4_tmp.OBTURADOS = out3.OBTURADOS ;
out4_tmp.PERDIDOS_EXTRAIDOS = out3.PERDIDOS_EXTRAIDOS ;
out4_tmp.INTCP = out3.INTCP ;
out4_tmp.DIENTES_TEMPORALES = out3.DIENTES_TEMPORALES ;
out4_tmp.DIENTES_PERMANENTES = out3.DIENTES_PERMANENTES ;
out4_tmp.PROTESIS = out3.PROTESIS ;
out4_tmp.PLACA_DENTAL = out3.PLACA_DENTAL ;
out4_tmp.ESTADO_PLACA_DENTAL = out3.ESTADO_PLACA_DENTAL ;
out4_tmp.DETARTRAJE_SUPRAGINGIVAL = out3.DETARTRAJE_SUPRAGINGIVAL ;
out4_tmp.ESTADO_SUPRAGINGIVAL = out3.ESTADO_SUPRAGINGIVAL ;
out4_tmp.FLUOR = out3.FLUOR ;
out4_tmp.ESTADO_FLUOR = out3.ESTADO_FLUOR ;
out4_tmp.RESINA = row16.RESINA ;
out4_tmp.ESTADO_RESINA = row16.ESTADO_RESINA ;
out4_tmp.PROFILAXIS = row17.PROFILAXIS ;
out4_tmp.ESTADO_PROFILAXIS = row17.ESTADO_PROFILAXIS ;
out4_tmp.SELLANTES = row18.SELLANTES ;
out4_tmp.ESTADO_SELLANTES = row18.ESTADO_SELLANTES ;
out4_tmp.FLUOROSIS = row23.FLUOROSIS ;
out4_tmp.CLASE_GRADO = out3.CLASE_GRADO ;
out4_tmp.CODIGO_CLAGRADO = out3.CODIGO_CLAGRADO ;
out4_tmp.GRADO = out3.GRADO ;
out4_tmp.PROFESIONAL_ID = out3.PROFESIONAL_ID ;
out4_tmp.ESTADO = out3.ESTADO ;
out4_tmp.TIPO_COPCEOP = out3.TIPO_COPCEOP ;
out4 = out4_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_5 = false;










 


	tos_count_tMap_5++;

/**
 * [tMap_5 main ] stop
 */
	
	/**
	 * [tMap_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_begin ] stop
 */
// Start of branch "out4"
if(out4 != null) { 



	
	/**
	 * [tMap_6 main ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out4"
						
						);
					}
					

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_6 = false;
		
						row20Struct row20 = null;
					
						row21Struct row21 = null;
					
						row22Struct row22 = null;
					
		// ###############################
		// # Input tables (lookups)
		
		boolean rejectedInnerJoin_tMap_6 = false;
		boolean mainRowRejected_tMap_6 = false;
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row20" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow20 = false;
       		  	    	
       		  	    	
 							row20Struct row20ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row20HashKey.PERSONAS_ID = out4.PERSONAS_ID ;
                        		    		

								
		                        	row20HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row20.lookup( row20HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row20 != null && tHash_Lookup_row20.getCount(row20HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row20' and it contains more one result from keys :  row20.PERSONAS_ID = '" + row20HashKey.PERSONAS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row20Struct fromLookup_row20 = null;
							row20 = row20Default;
										 
							
								 
							
							
								if (tHash_Lookup_row20 !=null && tHash_Lookup_row20.hasNext()) { // G 099
								
							
								
								fromLookup_row20 = tHash_Lookup_row20.next();

							
							
								} // G 099
							
							

							if(fromLookup_row20 != null) {
								row20 = fromLookup_row20;
							}
							
							
							
			  							
							
                    		  	  		
								if( !rejectedInnerJoin_tMap_6 && 
									
									!(
										
										row20.FECHA != null ? row20.FECHA .compareTo(out4.FECHA  ) <= 0 : false
										
									)
									
								) { // G 016
                    		  	  		  
									fromLookup_row20 = null;
									row20 = row20Default;
                    		  	  		  		
									
								} // G 016
     	               		  	
								
     	               		  	  	  
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row21" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow21 = false;
       		  	    	
       		  	    	
 							row21Struct row21ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row21HashKey.PERSONAS_ID = out4.PERSONAS_ID ;
                        		    		

								
		                        	row21HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row21.lookup( row21HashKey );

	  							

	  							

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row21 != null && tHash_Lookup_row21.getCount(row21HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row21' and it contains more one result from keys :  row21.PERSONAS_ID = '" + row21HashKey.PERSONAS_ID + "'");
								} // G 071
							

							
                    		  	 
							   
                    		  	 
	       		  	    	row21Struct fromLookup_row21 = null;
							row21 = row21Default;
										 
							
								 
							
							
								if (tHash_Lookup_row21 !=null && tHash_Lookup_row21.hasNext()) { // G 099
								
							
								
								fromLookup_row21 = tHash_Lookup_row21.next();

							
							
								} // G 099
							
							

							if(fromLookup_row21 != null) {
								row21 = fromLookup_row21;
							}
							
							
							
			  							
							
                    		  	  		
								if( !rejectedInnerJoin_tMap_6 && 
									
									!(
										
										row21.FFINAL != null ? row21.FFINAL .compareTo(out4.FECHA  ) <= 0 : false
										
									)
									
								) { // G 016
                    		  	  		  
									fromLookup_row21 = null;
									row21 = row21Default;
                    		  	  		  		
									
								} // G 016
     	               		  	
								
     	               		  	  	  
								
	                    		  	
		                    
	            	
	           	
	            	
	            

				///////////////////////////////////////////////
				// Starting Lookup Table "row22" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow22 = false;
       		  	    	
       		  	    	
 							row22Struct row22ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_6) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_6 = false;
								
                        		    		    row22HashKey.ID = out4.PERSONAS_ID ;
                        		    		

								
		                        	row22HashKey.hashCodeDirty = true;
                        		
	  					
	  							
			  					
			  					
	  					
		  							tHash_Lookup_row22.lookup( row22HashKey );

	  							

	  							

 								
								  
								  if(!tHash_Lookup_row22.hasNext()) { // G_TM_M_090

  								
		  				
	  								
						
									
	
		  								forceLooprow22 = true;
	  					
  									
  									  		
 								
								  
								  } // G_TM_M_090

  								



							} // G_TM_M_020
			           		  	  
							
								
								else { // G 20 - G 21
   									forceLooprow22 = true;
			           		  	} // G 21
                    		  	
                    		

							
                    		  	 
							

								while ((tHash_Lookup_row22 != null && tHash_Lookup_row22.hasNext()) || forceLooprow22) { // G_TM_M_043

								
									 // CALL close loop of lookup 'row22'
									
                    		  	 
							   
                    		  	 
	       		  	    	row22Struct fromLookup_row22 = null;
							row22 = row22Default;
										 
							
								
								if(!forceLooprow22) { // G 46
								
							
								 
							
								
								fromLookup_row22 = tHash_Lookup_row22.next();

							

							if(fromLookup_row22 != null) {
								row22 = fromLookup_row22;
							}
							
							
							
			  							
								
	                    		  	
		                    
	                    	
	                    		} // G 46
	                    		  	
								forceLooprow22 = false;
									 	
							
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_6__Struct Var = Var__tMap_6;// ###############################
        // ###############################
        // # Output tables

out5 = null;


// # Output table : 'out5'
out5_tmp.PROCESOASISTENCIAL_ID = out4.PROCESOASISTENCIAL_ID ;
out5_tmp.PERSONAS_ID = out4.PERSONAS_ID ;
out5_tmp.FECHA = out4.FECHA ;
out5_tmp.SEXO_SIGLA = out4.SEXO_SIGLA ;
out5_tmp.PYP_SIGLA = out4.PYP_SIGLA ;
out5_tmp.UORG_ID = out4.UORG_ID ;
out5_tmp.GRADO_CODIGO = out4.GRADO_CODIGO ;
out5_tmp.FUERZA_SIGLA = out4.FUERZA_SIGLA ;
out5_tmp.VALOR_MENOR = out4.VALOR_MENOR ;
out5_tmp.RANGO_EDAD = out4.RANGO_EDAD ;
out5_tmp.TIPO_VALORACION = out4.TIPO_VALORACION ;
out5_tmp.MORBILIDAD = out4.MORBILIDAD ;
out5_tmp.OLEARY_VALOR = out4.OLEARY_VALOR ;
out5_tmp.OLEARY = out4.OLEARY ;
out5_tmp.BRUXISMO = out4.BRUXISMO ;
out5_tmp.MUERDE_OBJETOS = out4.MUERDE_OBJETOS ;
out5_tmp.RESPIRADOR_NASAL = out4.RESPIRADOR_NASAL ;
out5_tmp.SUCCION_DIGITAL = out4.SUCCION_DIGITAL ;
out5_tmp.ONICOFAGIA = out4.ONICOFAGIA ;
out5_tmp.COP_CEOD = out4.COP_CEOD ;
out5_tmp.CARIADOS = out4.CARIADOS ;
out5_tmp.OBTURADOS = out4.OBTURADOS ;
out5_tmp.PERDIDOS_EXTRAIDOS = out4.PERDIDOS_EXTRAIDOS ;
out5_tmp.INTCP = out4.INTCP ;
out5_tmp.DIENTES_TEMPORALES = out4.DIENTES_TEMPORALES ;
out5_tmp.DIENTES_PERMANENTES = out4.DIENTES_PERMANENTES ;
out5_tmp.PROTESIS = out4.PROTESIS ;
out5_tmp.PLACA_DENTAL = out4.PLACA_DENTAL ;
out5_tmp.ESTADO_PLACA_DENTAL = out4.ESTADO_PLACA_DENTAL ;
out5_tmp.DETARTRAJE_SUPRAGINGIVAL = out4.DETARTRAJE_SUPRAGINGIVAL ;
out5_tmp.ESTADO_SUPRAGINGIVAL = out4.ESTADO_SUPRAGINGIVAL ;
out5_tmp.FLUOR = out4.FLUOR ;
out5_tmp.ESTADO_FLUOR = out4.ESTADO_FLUOR ;
out5_tmp.RESINA = out4.RESINA ;
out5_tmp.ESTADO_RESINA = out4.ESTADO_RESINA ;
out5_tmp.PROFILAXIS = out4.PROFILAXIS ;
out5_tmp.ESTADO_PROFILAXIS = out4.ESTADO_PROFILAXIS ;
out5_tmp.SELLANTES = out4.SELLANTES ;
out5_tmp.ESTADO_SELLANTES = out4.ESTADO_SELLANTES ;
out5_tmp.FLUOROSIS = out4.FLUOROSIS ;
out5_tmp.GESTANTE = row20.GESTANTE ;
out5_tmp.VIH = row21.VIH ;
out5_tmp.TIPO_USUARIO = row22.TIPO_USUARIO ;
out5_tmp.CLASE_GRADO = out4.CLASE_GRADO ;
out5_tmp.CODIGO_CLAGRADO = out4.CODIGO_CLAGRADO ;
out5_tmp.GRADO = out4.GRADO ;
out5_tmp.PROFESIONAL_ID = out4.PROFESIONAL_ID ;
out5_tmp.ESTPTRATAMIENTO = out4.ESTADO ;
out5_tmp.TIPO_COPCEOP = out4.TIPO_COPCEOP ;
out5 = out5_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_6 = false;










 


	tos_count_tMap_6++;

/**
 * [tMap_6 main ] stop
 */
	
	/**
	 * [tMap_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_begin ] stop
 */
// Start of branch "out5"
if(out5 != null) { 



	
	/**
	 * [tOracleOutput_1 main ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"out5"
						
						);
					}
					



        whetherReject_tOracleOutput_1 = false;
                    pstmt_tOracleOutput_1.setBigDecimal(1, out5.PROCESOASISTENCIAL_ID);

            int checkCount_tOracleOutput_1 = -1;
            try (java.sql.ResultSet rs_tOracleOutput_1 = pstmt_tOracleOutput_1.executeQuery()) {
                while(rs_tOracleOutput_1.next()) {
                    checkCount_tOracleOutput_1 = rs_tOracleOutput_1.getInt(1);
                }
            }
            if(checkCount_tOracleOutput_1 > 0) {
                        pstmtUpdate_tOracleOutput_1.setBigDecimal(1, out5.PERSONAS_ID);

                        if(out5.FECHA != null) {
pstmtUpdate_tOracleOutput_1.setObject(2, new java.sql.Timestamp(out5.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmtUpdate_tOracleOutput_1.setNull(2, java.sql.Types.DATE);
}

                        if(out5.SEXO_SIGLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(3, out5.SEXO_SIGLA);
}

                        if(out5.PYP_SIGLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(4, out5.PYP_SIGLA);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(5, out5.UORG_ID);

                        if(out5.GRADO_CODIGO == null) {
pstmtUpdate_tOracleOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(6, out5.GRADO_CODIGO);
}

                        if(out5.FUERZA_SIGLA == null) {
pstmtUpdate_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(7, out5.FUERZA_SIGLA);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(8, out5.VALOR_MENOR);

                        if(out5.RANGO_EDAD == null) {
pstmtUpdate_tOracleOutput_1.setNull(9, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(9, out5.RANGO_EDAD);
}

                        if(out5.TIPO_VALORACION == null) {
pstmtUpdate_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(10, out5.TIPO_VALORACION);
}

                        if(out5.MORBILIDAD == null) {
pstmtUpdate_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(11, out5.MORBILIDAD);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(12, out5.OLEARY_VALOR);

                        if(out5.OLEARY == null) {
pstmtUpdate_tOracleOutput_1.setNull(13, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(13, out5.OLEARY);
}

                        if(out5.BRUXISMO == null) {
pstmtUpdate_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(14, out5.BRUXISMO);
}

                        if(out5.MUERDE_OBJETOS == null) {
pstmtUpdate_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(15, out5.MUERDE_OBJETOS);
}

                        if(out5.RESPIRADOR_NASAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(16, out5.RESPIRADOR_NASAL);
}

                        if(out5.SUCCION_DIGITAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(17, out5.SUCCION_DIGITAL);
}

                        if(out5.ONICOFAGIA == null) {
pstmtUpdate_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(18, out5.ONICOFAGIA);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(19, out5.COP_CEOD);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(20, out5.CARIADOS);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(21, out5.OBTURADOS);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(22, out5.PERDIDOS_EXTRAIDOS);

                        if(out5.INTCP == null) {
pstmtUpdate_tOracleOutput_1.setNull(23, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(23, out5.INTCP);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(24, out5.DIENTES_TEMPORALES);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(25, out5.DIENTES_PERMANENTES);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(26, out5.PROTESIS);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(27, out5.PLACA_DENTAL);

                        if(out5.ESTADO_PLACA_DENTAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(28, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(28, out5.ESTADO_PLACA_DENTAL);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(29, out5.DETARTRAJE_SUPRAGINGIVAL);

                        if(out5.ESTADO_SUPRAGINGIVAL == null) {
pstmtUpdate_tOracleOutput_1.setNull(30, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(30, out5.ESTADO_SUPRAGINGIVAL);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(31, out5.FLUOR);

                        if(out5.ESTADO_FLUOR == null) {
pstmtUpdate_tOracleOutput_1.setNull(32, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(32, out5.ESTADO_FLUOR);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(33, out5.RESINA);

                        if(out5.ESTADO_RESINA == null) {
pstmtUpdate_tOracleOutput_1.setNull(34, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(34, out5.ESTADO_RESINA);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(35, out5.PROFILAXIS);

                        if(out5.ESTADO_PROFILAXIS == null) {
pstmtUpdate_tOracleOutput_1.setNull(36, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(36, out5.ESTADO_PROFILAXIS);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(37, out5.SELLANTES);

                        if(out5.ESTADO_SELLANTES == null) {
pstmtUpdate_tOracleOutput_1.setNull(38, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(38, out5.ESTADO_SELLANTES);
}

                        if(out5.FLUOROSIS == null) {
pstmtUpdate_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(39, out5.FLUOROSIS);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(40, out5.GESTANTE);

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(41, out5.VIH);

                        if(out5.TIPO_USUARIO == null) {
pstmtUpdate_tOracleOutput_1.setNull(42, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(42, out5.TIPO_USUARIO);
}

                        if(out5.CLASE_GRADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(43, out5.CLASE_GRADO);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(44, out5.CODIGO_CLAGRADO);

                        if(out5.GRADO == null) {
pstmtUpdate_tOracleOutput_1.setNull(45, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(45, out5.GRADO);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(46, out5.PROFESIONAL_ID);

                        if(out5.ESTPTRATAMIENTO == null) {
pstmtUpdate_tOracleOutput_1.setNull(47, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(47, out5.ESTPTRATAMIENTO);
}

                        if(out5.TIPO_COPCEOP == null) {
pstmtUpdate_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmtUpdate_tOracleOutput_1.setString(48, out5.TIPO_COPCEOP);
}

                        pstmtUpdate_tOracleOutput_1.setBigDecimal(49 + count_tOracleOutput_1, out5.PROCESOASISTENCIAL_ID);

                try {
                    int processedCount_tOracleOutput_1 = pstmtUpdate_tOracleOutput_1.executeUpdate();
                    updatedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            } else {
                        pstmtInsert_tOracleOutput_1.setBigDecimal(1, out5.PROCESOASISTENCIAL_ID);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(2, out5.PERSONAS_ID);

                        if(out5.FECHA != null) {
pstmtInsert_tOracleOutput_1.setObject(3, new java.sql.Timestamp(out5.FECHA.getTime()),java.sql.Types.DATE);
} else {
pstmtInsert_tOracleOutput_1.setNull(3, java.sql.Types.DATE);
}

                        if(out5.SEXO_SIGLA == null) {
pstmtInsert_tOracleOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(4, out5.SEXO_SIGLA);
}

                        if(out5.PYP_SIGLA == null) {
pstmtInsert_tOracleOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(5, out5.PYP_SIGLA);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(6, out5.UORG_ID);

                        if(out5.GRADO_CODIGO == null) {
pstmtInsert_tOracleOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(7, out5.GRADO_CODIGO);
}

                        if(out5.FUERZA_SIGLA == null) {
pstmtInsert_tOracleOutput_1.setNull(8, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(8, out5.FUERZA_SIGLA);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(9, out5.VALOR_MENOR);

                        if(out5.RANGO_EDAD == null) {
pstmtInsert_tOracleOutput_1.setNull(10, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(10, out5.RANGO_EDAD);
}

                        if(out5.TIPO_VALORACION == null) {
pstmtInsert_tOracleOutput_1.setNull(11, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(11, out5.TIPO_VALORACION);
}

                        if(out5.MORBILIDAD == null) {
pstmtInsert_tOracleOutput_1.setNull(12, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(12, out5.MORBILIDAD);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(13, out5.OLEARY_VALOR);

                        if(out5.OLEARY == null) {
pstmtInsert_tOracleOutput_1.setNull(14, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(14, out5.OLEARY);
}

                        if(out5.BRUXISMO == null) {
pstmtInsert_tOracleOutput_1.setNull(15, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(15, out5.BRUXISMO);
}

                        if(out5.MUERDE_OBJETOS == null) {
pstmtInsert_tOracleOutput_1.setNull(16, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(16, out5.MUERDE_OBJETOS);
}

                        if(out5.RESPIRADOR_NASAL == null) {
pstmtInsert_tOracleOutput_1.setNull(17, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(17, out5.RESPIRADOR_NASAL);
}

                        if(out5.SUCCION_DIGITAL == null) {
pstmtInsert_tOracleOutput_1.setNull(18, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(18, out5.SUCCION_DIGITAL);
}

                        if(out5.ONICOFAGIA == null) {
pstmtInsert_tOracleOutput_1.setNull(19, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(19, out5.ONICOFAGIA);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(20, out5.COP_CEOD);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(21, out5.CARIADOS);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(22, out5.OBTURADOS);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(23, out5.PERDIDOS_EXTRAIDOS);

                        if(out5.INTCP == null) {
pstmtInsert_tOracleOutput_1.setNull(24, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(24, out5.INTCP);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(25, out5.DIENTES_TEMPORALES);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(26, out5.DIENTES_PERMANENTES);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(27, out5.PROTESIS);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(28, out5.PLACA_DENTAL);

                        if(out5.ESTADO_PLACA_DENTAL == null) {
pstmtInsert_tOracleOutput_1.setNull(29, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(29, out5.ESTADO_PLACA_DENTAL);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(30, out5.DETARTRAJE_SUPRAGINGIVAL);

                        if(out5.ESTADO_SUPRAGINGIVAL == null) {
pstmtInsert_tOracleOutput_1.setNull(31, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(31, out5.ESTADO_SUPRAGINGIVAL);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(32, out5.FLUOR);

                        if(out5.ESTADO_FLUOR == null) {
pstmtInsert_tOracleOutput_1.setNull(33, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(33, out5.ESTADO_FLUOR);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(34, out5.RESINA);

                        if(out5.ESTADO_RESINA == null) {
pstmtInsert_tOracleOutput_1.setNull(35, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(35, out5.ESTADO_RESINA);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(36, out5.PROFILAXIS);

                        if(out5.ESTADO_PROFILAXIS == null) {
pstmtInsert_tOracleOutput_1.setNull(37, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(37, out5.ESTADO_PROFILAXIS);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(38, out5.SELLANTES);

                        if(out5.ESTADO_SELLANTES == null) {
pstmtInsert_tOracleOutput_1.setNull(39, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(39, out5.ESTADO_SELLANTES);
}

                        if(out5.FLUOROSIS == null) {
pstmtInsert_tOracleOutput_1.setNull(40, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(40, out5.FLUOROSIS);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(41, out5.GESTANTE);

                        pstmtInsert_tOracleOutput_1.setBigDecimal(42, out5.VIH);

                        if(out5.TIPO_USUARIO == null) {
pstmtInsert_tOracleOutput_1.setNull(43, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(43, out5.TIPO_USUARIO);
}

                        if(out5.CLASE_GRADO == null) {
pstmtInsert_tOracleOutput_1.setNull(44, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(44, out5.CLASE_GRADO);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(45, out5.CODIGO_CLAGRADO);

                        if(out5.GRADO == null) {
pstmtInsert_tOracleOutput_1.setNull(46, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(46, out5.GRADO);
}

                        pstmtInsert_tOracleOutput_1.setBigDecimal(47, out5.PROFESIONAL_ID);

                        if(out5.ESTPTRATAMIENTO == null) {
pstmtInsert_tOracleOutput_1.setNull(48, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(48, out5.ESTPTRATAMIENTO);
}

                        if(out5.TIPO_COPCEOP == null) {
pstmtInsert_tOracleOutput_1.setNull(49, java.sql.Types.VARCHAR);
} else {pstmtInsert_tOracleOutput_1.setString(49, out5.TIPO_COPCEOP);
}

                try {
                    int processedCount_tOracleOutput_1 = pstmtInsert_tOracleOutput_1.executeUpdate();
                    insertedCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    rowsToCommitCount_tOracleOutput_1 += processedCount_tOracleOutput_1;
                    nb_line_tOracleOutput_1++;
                } catch(java.lang.Exception e_tOracleOutput_1) {
globalMap.put("tOracleOutput_1_ERROR_MESSAGE",e_tOracleOutput_1.getMessage());
                    whetherReject_tOracleOutput_1 = true;
                        nb_line_tOracleOutput_1++;
                            System.err.print(e_tOracleOutput_1.getMessage());
                }
            }
                commitCounter_tOracleOutput_1++;
                if(commitEvery_tOracleOutput_1 <= commitCounter_tOracleOutput_1) {
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    }
                    conn_tOracleOutput_1.commit();
                    if(rowsToCommitCount_tOracleOutput_1 != 0){
                    	
                    	rowsToCommitCount_tOracleOutput_1 = 0;
                    }
                    commitCounter_tOracleOutput_1=0;
                }

 


	tos_count_tOracleOutput_1++;

/**
 * [tOracleOutput_1 main ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleOutput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	

 



/**
 * [tOracleOutput_1 process_data_end ] stop
 */

} // End of branch "out5"



	
		} // close loop of lookup 'row22' // G_TM_M_043
	
	
	/**
	 * [tMap_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 process_data_end ] stop
 */

} // End of branch "out4"




	
	/**
	 * [tMap_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 process_data_end ] stop
 */

} // End of branch "out3"




	
	/**
	 * [tMap_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 process_data_end ] stop
 */

} // End of branch "out2"




	
	/**
	 * [tMap_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 process_data_end ] stop
 */

} // End of branch "out1"




	
	/**
	 * [tMap_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

}
}finally{
	if (rs_tOracleInput_1 != null) {
		rs_tOracleInput_1.close();
	}
	if (stmt_tOracleInput_1 != null) {
		stmt_tOracleInput_1.close();
	}
}

globalMap.put("tOracleInput_1_NB_LINE",nb_line_tOracleInput_1);
 

ok_Hash.put("tOracleInput_1", true);
end_Hash.put("tOracleInput_1", System.currentTimeMillis());




/**
 * [tOracleInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
					if(tHash_Lookup_row5 != null) {
						tHash_Lookup_row5.endGet();
					}
					globalMap.remove( "tHash_Lookup_row5" );

					
					
				
					if(tHash_Lookup_row6 != null) {
						tHash_Lookup_row6.endGet();
					}
					globalMap.remove( "tHash_Lookup_row6" );

					
					
				
					if(tHash_Lookup_row7 != null) {
						tHash_Lookup_row7.endGet();
					}
					globalMap.remove( "tHash_Lookup_row7" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row3");
			  	}
			  	
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row8 != null) {
						tHash_Lookup_row8.endGet();
					}
					globalMap.remove( "tHash_Lookup_row8" );

					
					
				
					if(tHash_Lookup_row9 != null) {
						tHash_Lookup_row9.endGet();
					}
					globalMap.remove( "tHash_Lookup_row9" );

					
					
				
					if(tHash_Lookup_row10 != null) {
						tHash_Lookup_row10.endGet();
					}
					globalMap.remove( "tHash_Lookup_row10" );

					
					
				
					if(tHash_Lookup_row11 != null) {
						tHash_Lookup_row11.endGet();
					}
					globalMap.remove( "tHash_Lookup_row11" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out1");
			  	}
			  	
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMap_4 end ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row13 != null) {
						tHash_Lookup_row13.endGet();
					}
					globalMap.remove( "tHash_Lookup_row13" );

					
					
				
					if(tHash_Lookup_row14 != null) {
						tHash_Lookup_row14.endGet();
					}
					globalMap.remove( "tHash_Lookup_row14" );

					
					
				
					if(tHash_Lookup_row15 != null) {
						tHash_Lookup_row15.endGet();
					}
					globalMap.remove( "tHash_Lookup_row15" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out2");
			  	}
			  	
 

ok_Hash.put("tMap_4", true);
end_Hash.put("tMap_4", System.currentTimeMillis());




/**
 * [tMap_4 end ] stop
 */

	
	/**
	 * [tMap_5 end ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row16 != null) {
						tHash_Lookup_row16.endGet();
					}
					globalMap.remove( "tHash_Lookup_row16" );

					
					
				
					if(tHash_Lookup_row17 != null) {
						tHash_Lookup_row17.endGet();
					}
					globalMap.remove( "tHash_Lookup_row17" );

					
					
				
					if(tHash_Lookup_row18 != null) {
						tHash_Lookup_row18.endGet();
					}
					globalMap.remove( "tHash_Lookup_row18" );

					
					
				
					if(tHash_Lookup_row23 != null) {
						tHash_Lookup_row23.endGet();
					}
					globalMap.remove( "tHash_Lookup_row23" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out3");
			  	}
			  	
 

ok_Hash.put("tMap_5", true);
end_Hash.put("tMap_5", System.currentTimeMillis());




/**
 * [tMap_5 end ] stop
 */

	
	/**
	 * [tMap_6 end ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row20 != null) {
						tHash_Lookup_row20.endGet();
					}
					globalMap.remove( "tHash_Lookup_row20" );

					
					
				
					if(tHash_Lookup_row21 != null) {
						tHash_Lookup_row21.endGet();
					}
					globalMap.remove( "tHash_Lookup_row21" );

					
					
				
					if(tHash_Lookup_row22 != null) {
						tHash_Lookup_row22.endGet();
					}
					globalMap.remove( "tHash_Lookup_row22" );

					
					
				
// ###############################      





				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out4");
			  	}
			  	
 

ok_Hash.put("tMap_6", true);
end_Hash.put("tMap_6", System.currentTimeMillis());




/**
 * [tMap_6 end ] stop
 */

	
	/**
	 * [tOracleOutput_1 end ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	
	



	
        if(pstmtUpdate_tOracleOutput_1 != null){
            pstmtUpdate_tOracleOutput_1.close();
            resourceMap.remove("pstmtUpdate_tOracleOutput_1");
        }
        if(pstmtInsert_tOracleOutput_1 != null){
            pstmtInsert_tOracleOutput_1.close();
            resourceMap.remove("pstmtInsert_tOracleOutput_1");
        }
        if(pstmt_tOracleOutput_1 != null) {
            pstmt_tOracleOutput_1.close();
            resourceMap.remove("pstmt_tOracleOutput_1");
        }
    resourceMap.put("statementClosed_tOracleOutput_1", true);
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
		}
		conn_tOracleOutput_1.commit();
		if(commitCounter_tOracleOutput_1 > 0 && rowsToCommitCount_tOracleOutput_1 != 0) {
			
			rowsToCommitCount_tOracleOutput_1 = 0;
		}
		commitCounter_tOracleOutput_1 = 0;
		
		
		conn_tOracleOutput_1 .close();
		
		resourceMap.put("finish_tOracleOutput_1", true);
   	

	
	nb_line_deleted_tOracleOutput_1=nb_line_deleted_tOracleOutput_1+ deletedCount_tOracleOutput_1;
	nb_line_update_tOracleOutput_1=nb_line_update_tOracleOutput_1 + updatedCount_tOracleOutput_1;
	nb_line_inserted_tOracleOutput_1=nb_line_inserted_tOracleOutput_1 + insertedCount_tOracleOutput_1;
	nb_line_rejected_tOracleOutput_1=nb_line_rejected_tOracleOutput_1 + rejectedCount_tOracleOutput_1;
	
        globalMap.put("tOracleOutput_1_NB_LINE",nb_line_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_UPDATED",nb_line_update_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_INSERTED",nb_line_inserted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_DELETED",nb_line_deleted_tOracleOutput_1);
        globalMap.put("tOracleOutput_1_NB_LINE_REJECTED", nb_line_rejected_tOracleOutput_1);
    

	



				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"out5");
			  	}
			  	
 

ok_Hash.put("tOracleOutput_1", true);
end_Hash.put("tOracleOutput_1", System.currentTimeMillis());




/**
 * [tOracleOutput_1 end ] stop
 */


















				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row20"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row21"); 
				     			
					     			//free memory for "tMap_6"
					     			globalMap.remove("tHash_Lookup_row22"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row16"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row17"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row18"); 
				     			
					     			//free memory for "tMap_5"
					     			globalMap.remove("tHash_Lookup_row23"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row13"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row14"); 
				     			
					     			//free memory for "tMap_4"
					     			globalMap.remove("tHash_Lookup_row15"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row8"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row9"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row10"); 
				     			
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row11"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row5"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row6"); 
				     			
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row7"); 
				     			
				try{
					
	
	/**
	 * [tOracleInput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_1";
	
	

 



/**
 * [tOracleInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";
	
	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";
	
	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMap_4 finally ] start
	 */

	

	
	
	currentComponent="tMap_4";
	
	

 



/**
 * [tMap_4 finally ] stop
 */

	
	/**
	 * [tMap_5 finally ] start
	 */

	

	
	
	currentComponent="tMap_5";
	
	

 



/**
 * [tMap_5 finally ] stop
 */

	
	/**
	 * [tMap_6 finally ] start
	 */

	

	
	
	currentComponent="tMap_6";
	
	

 



/**
 * [tMap_6 finally ] stop
 */

	
	/**
	 * [tOracleOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleOutput_1";
	
	



    try {
    if (resourceMap.get("statementClosed_tOracleOutput_1") == null) {
                java.sql.PreparedStatement pstmtUpdateToClose_tOracleOutput_1 = null;
                if ((pstmtUpdateToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtUpdate_tOracleOutput_1")) != null) {
                    pstmtUpdateToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtInsertToClose_tOracleOutput_1 = null;
                if ((pstmtInsertToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmtInsert_tOracleOutput_1")) != null) {
                    pstmtInsertToClose_tOracleOutput_1.close();
                }
                java.sql.PreparedStatement pstmtToClose_tOracleOutput_1 = null;
                if ((pstmtToClose_tOracleOutput_1 = (java.sql.PreparedStatement) resourceMap.remove("pstmt_tOracleOutput_1")) != null) {
                    pstmtToClose_tOracleOutput_1.close();
                }
    }
    } finally {
        if(resourceMap.get("finish_tOracleOutput_1") == null){
            java.sql.Connection ctn_tOracleOutput_1 = null;
            if((ctn_tOracleOutput_1 = (java.sql.Connection)resourceMap.get("conn_tOracleOutput_1")) != null){
                try {
                    ctn_tOracleOutput_1.close();
                } catch (java.sql.SQLException sqlEx_tOracleOutput_1) {
                    String errorMessage_tOracleOutput_1 = "failed to close the connection in tOracleOutput_1 :" + sqlEx_tOracleOutput_1.getMessage();
                    System.err.println(errorMessage_tOracleOutput_1);
                }
            }
        }
    }
 



/**
 * [tOracleOutput_1 finally ] stop
 */


















				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public Integer SANO;

				public Integer getSANO () {
					return this.SANO;
				}

				public Boolean SANOIsNullable(){
				    return true;
				}
				public Boolean SANOIsKey(){
				    return false;
				}
				public Integer SANOLength(){
				    return 0;
				}
				public Integer SANOPrecision(){
				    return null;
				}
				public String SANODefault(){
				
					return "";
				
				}
				public String SANOComment(){
				
				    return "";
				
				}
				public String SANOPattern(){
				
					return "";
				
				}
				public String SANOOriginalDbColumnName(){
				
					return "SANO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.SANO = this.SANO;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.SANO = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.SANO = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.SANO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.SANO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",SANO="+String.valueOf(SANO));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row4");
					}
				
		int tos_count_tAdvancedHash_row4 = 0;
		

			   		// connection name:row4
			   		// source node:tOracleInput_2 - inputs:(after_tOracleInput_1) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,row4,row5,row6,row7) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tOracleInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_2", false);
		start_Hash.put("tOracleInput_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_2";
	
	
		int tos_count_tOracleInput_2 = 0;
		
	


	
		    int nb_line_tOracleInput_2 = 0;
		    java.sql.Connection conn_tOracleInput_2 = null;
				conn_tOracleInput_2 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_2 = false;
				boolean isConnectionWrapped_tOracleInput_2 = !(conn_tOracleInput_2 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_2.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_2 = null;
                if (isConnectionWrapped_tOracleInput_2) {
					unwrappedOraConn_tOracleInput_2 = conn_tOracleInput_2.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_2 != null) {
                        isTimeZoneNull_tOracleInput_2 = (unwrappedOraConn_tOracleInput_2.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_2 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_2).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_2) {
					java.sql.Statement stmtGetTZ_tOracleInput_2 = conn_tOracleInput_2.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_2 = stmtGetTZ_tOracleInput_2.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_2 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_2.next()) {
						sessionTimezone_tOracleInput_2 = rsGetTZ_tOracleInput_2.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_2 && unwrappedOraConn_tOracleInput_2 != null) {
                        unwrappedOraConn_tOracleInput_2.setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_2).setSessionTimeZone(sessionTimezone_tOracleInput_2);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_2 = conn_tOracleInput_2.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_2.setFetchSize(1000);


		    String dbquery_tOracleInput_2 = "SELECT \nDIAG.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID,\n1 AS SANO\nFROM HCL_DIAGNOSTICOS DIAG\nINNER JOIN GEN"
+"_CIE10 CI ON CI.ID = DIAG.CIE10_ID\nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = DIAG.PROCESOSASISTENCIALES_ID\nWH"
+"ERE \n"+context.CONDITION+" \nCI.CODIGO = 'Z012'";
		    

		    globalMap.put("tOracleInput_2_QUERY",dbquery_tOracleInput_2);

		    java.sql.ResultSet rs_tOracleInput_2 = null;

		    try {
		    	rs_tOracleInput_2 = stmt_tOracleInput_2.executeQuery(dbquery_tOracleInput_2);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_2 = rs_tOracleInput_2.getMetaData();
		    	int colQtyInRs_tOracleInput_2 = rsmd_tOracleInput_2.getColumnCount();

		    String tmpContent_tOracleInput_2 = null;
		    
		    
		    while (rs_tOracleInput_2.next()) {
		        nb_line_tOracleInput_2++;
		        
							if(colQtyInRs_tOracleInput_2 < 1) {
								row4.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(1) != null) {
						row4.PROCESOASISTENCIAL_ID = rs_tOracleInput_2.getBigDecimal(1);
					} else {
				
						row4.PROCESOASISTENCIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_2 < 2) {
								row4.SANO = null;
							} else {
		                          
					if(rs_tOracleInput_2.getObject(2) != null) {
						row4.SANO = rs_tOracleInput_2.getInt(2);
					} else {
				
						row4.SANO = null;
					}
		                    }
					




 



/**
 * [tOracleInput_2 begin ] stop
 */
	
	/**
	 * [tOracleInput_2 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 


	tos_count_tOracleInput_2++;

/**
 * [tOracleInput_2 main ] stop
 */
	
	/**
	 * [tOracleInput_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row4"
						
						);
					}
					


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.PROCESOASISTENCIAL_ID = row4.PROCESOASISTENCIAL_ID;
				
				row4_HashRow.SANO = row4.SANO;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row4 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_2 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

}
}finally{
	if (rs_tOracleInput_2 != null) {
		rs_tOracleInput_2.close();
	}
	if (stmt_tOracleInput_2 != null) {
		stmt_tOracleInput_2.close();
	}
}

globalMap.put("tOracleInput_2_NB_LINE",nb_line_tOracleInput_2);
 

ok_Hash.put("tOracleInput_2", true);
end_Hash.put("tOracleInput_2", System.currentTimeMillis());




/**
 * [tOracleInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

tHash_Lookup_row4.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row4");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_2";
	
	

 



/**
 * [tOracleInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";
	
	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class row5Struct implements routines.system.IPersistableComparableLookupRow<row5Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public Integer CARIES;

				public Integer getCARIES () {
					return this.CARIES;
				}

				public Boolean CARIESIsNullable(){
				    return true;
				}
				public Boolean CARIESIsKey(){
				    return false;
				}
				public Integer CARIESLength(){
				    return 0;
				}
				public Integer CARIESPrecision(){
				    return null;
				}
				public String CARIESDefault(){
				
					return "";
				
				}
				public String CARIESComment(){
				
				    return "";
				
				}
				public String CARIESPattern(){
				
					return "";
				
				}
				public String CARIESOriginalDbColumnName(){
				
					return "CARIES";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row5Struct other = (row5Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row5Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.CARIES = this.CARIES;
	            
	}

	public void copyKeysDataTo(row5Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.CARIES = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.CARIES = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.CARIES, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.CARIES, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",CARIES="+String.valueOf(CARIES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row5Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row5Struct row5 = new row5Struct();




	
	/**
	 * [tAdvancedHash_row5 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row5", false);
		start_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row5");
					}
				
		int tos_count_tAdvancedHash_row5 = 0;
		

			   		// connection name:row5
			   		// source node:tOracleInput_3 - inputs:(after_tOracleInput_1) outputs:(row5,row5) | target node:tAdvancedHash_row5 - inputs:(row5) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,row4,row5,row6,row7) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row5 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row5Struct> tHash_Lookup_row5 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row5Struct>getLookup(matchingModeEnum_row5);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row5", tHash_Lookup_row5);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row5 begin ] stop
 */



	
	/**
	 * [tOracleInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_3", false);
		start_Hash.put("tOracleInput_3", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_3";
	
	
		int tos_count_tOracleInput_3 = 0;
		
	


	
		    int nb_line_tOracleInput_3 = 0;
		    java.sql.Connection conn_tOracleInput_3 = null;
				conn_tOracleInput_3 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_3 = false;
				boolean isConnectionWrapped_tOracleInput_3 = !(conn_tOracleInput_3 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_3.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_3 = null;
                if (isConnectionWrapped_tOracleInput_3) {
					unwrappedOraConn_tOracleInput_3 = conn_tOracleInput_3.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_3 != null) {
                        isTimeZoneNull_tOracleInput_3 = (unwrappedOraConn_tOracleInput_3.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_3 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_3).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_3) {
					java.sql.Statement stmtGetTZ_tOracleInput_3 = conn_tOracleInput_3.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_3 = stmtGetTZ_tOracleInput_3.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_3 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_3.next()) {
						sessionTimezone_tOracleInput_3 = rsGetTZ_tOracleInput_3.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_3 && unwrappedOraConn_tOracleInput_3 != null) {
                        unwrappedOraConn_tOracleInput_3.setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_3).setSessionTimeZone(sessionTimezone_tOracleInput_3);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_3 = conn_tOracleInput_3.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_3.setFetchSize(1000);


		    String dbquery_tOracleInput_3 = "SELECT \nDIAG.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID,\n1 AS CARIES\nFROM HCL_DIAGNOSTICOS DIAG\nINNER JOIN G"
+"EN_CIE10 CI ON CI.ID = DIAG.CIE10_ID  \nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = DIAG.PROCESOSASISTENCIALES_ID"
+"\nWHERE \n"+context.CONDITION+"  \nCI.CODIGO IN ( 'K029', 'K028', 'K023', 'K022', 'K021', 'K020' )";
		    

		    globalMap.put("tOracleInput_3_QUERY",dbquery_tOracleInput_3);

		    java.sql.ResultSet rs_tOracleInput_3 = null;

		    try {
		    	rs_tOracleInput_3 = stmt_tOracleInput_3.executeQuery(dbquery_tOracleInput_3);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_3 = rs_tOracleInput_3.getMetaData();
		    	int colQtyInRs_tOracleInput_3 = rsmd_tOracleInput_3.getColumnCount();

		    String tmpContent_tOracleInput_3 = null;
		    
		    
		    while (rs_tOracleInput_3.next()) {
		        nb_line_tOracleInput_3++;
		        
							if(colQtyInRs_tOracleInput_3 < 1) {
								row5.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(1) != null) {
						row5.PROCESOASISTENCIAL_ID = rs_tOracleInput_3.getBigDecimal(1);
					} else {
				
						row5.PROCESOASISTENCIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_3 < 2) {
								row5.CARIES = null;
							} else {
		                          
					if(rs_tOracleInput_3.getObject(2) != null) {
						row5.CARIES = rs_tOracleInput_3.getInt(2);
					} else {
				
						row5.CARIES = null;
					}
		                    }
					




 



/**
 * [tOracleInput_3 begin ] stop
 */
	
	/**
	 * [tOracleInput_3 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 


	tos_count_tOracleInput_3++;

/**
 * [tOracleInput_3 main ] stop
 */
	
	/**
	 * [tOracleInput_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row5"
						
						);
					}
					


			   
			   

					row5Struct row5_HashRow = new row5Struct();
		   	   	   
				
				row5_HashRow.PROCESOASISTENCIAL_ID = row5.PROCESOASISTENCIAL_ID;
				
				row5_HashRow.CARIES = row5.CARIES;
				
			tHash_Lookup_row5.put(row5_HashRow);
			
            




 


	tos_count_tAdvancedHash_row5++;

/**
 * [tAdvancedHash_row5 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row5 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_3 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

}
}finally{
	if (rs_tOracleInput_3 != null) {
		rs_tOracleInput_3.close();
	}
	if (stmt_tOracleInput_3 != null) {
		stmt_tOracleInput_3.close();
	}
}

globalMap.put("tOracleInput_3_NB_LINE",nb_line_tOracleInput_3);
 

ok_Hash.put("tOracleInput_3", true);
end_Hash.put("tOracleInput_3", System.currentTimeMillis());




/**
 * [tOracleInput_3 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

tHash_Lookup_row5.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row5");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row5", true);
end_Hash.put("tAdvancedHash_row5", System.currentTimeMillis());




/**
 * [tAdvancedHash_row5 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_3 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_3";
	
	

 



/**
 * [tOracleInput_3 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row5 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row5";
	
	

 



/**
 * [tAdvancedHash_row5 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row6Struct implements routines.system.IPersistableComparableLookupRow<row6Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public Integer PERIODONTAL_CARIES;

				public Integer getPERIODONTAL_CARIES () {
					return this.PERIODONTAL_CARIES;
				}

				public Boolean PERIODONTAL_CARIESIsNullable(){
				    return true;
				}
				public Boolean PERIODONTAL_CARIESIsKey(){
				    return false;
				}
				public Integer PERIODONTAL_CARIESLength(){
				    return 0;
				}
				public Integer PERIODONTAL_CARIESPrecision(){
				    return null;
				}
				public String PERIODONTAL_CARIESDefault(){
				
					return "";
				
				}
				public String PERIODONTAL_CARIESComment(){
				
				    return "";
				
				}
				public String PERIODONTAL_CARIESPattern(){
				
					return "";
				
				}
				public String PERIODONTAL_CARIESOriginalDbColumnName(){
				
					return "PERIODONTAL_CARIES";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row6Struct other = (row6Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row6Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.PERIODONTAL_CARIES = this.PERIODONTAL_CARIES;
	            
	}

	public void copyKeysDataTo(row6Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PERIODONTAL_CARIES = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PERIODONTAL_CARIES = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.PERIODONTAL_CARIES, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.PERIODONTAL_CARIES, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERIODONTAL_CARIES="+String.valueOf(PERIODONTAL_CARIES));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row6Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_5Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row6Struct row6 = new row6Struct();




	
	/**
	 * [tAdvancedHash_row6 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row6", false);
		start_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row6");
					}
				
		int tos_count_tAdvancedHash_row6 = 0;
		

			   		// connection name:row6
			   		// source node:tOracleInput_5 - inputs:(after_tOracleInput_1) outputs:(row6,row6) | target node:tAdvancedHash_row6 - inputs:(row6) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,row4,row5,row6,row7) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row6 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row6Struct> tHash_Lookup_row6 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row6Struct>getLookup(matchingModeEnum_row6);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row6", tHash_Lookup_row6);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row6 begin ] stop
 */



	
	/**
	 * [tOracleInput_5 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_5", false);
		start_Hash.put("tOracleInput_5", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_5";
	
	
		int tos_count_tOracleInput_5 = 0;
		
	


	
		    int nb_line_tOracleInput_5 = 0;
		    java.sql.Connection conn_tOracleInput_5 = null;
				conn_tOracleInput_5 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_5 = false;
				boolean isConnectionWrapped_tOracleInput_5 = !(conn_tOracleInput_5 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_5.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_5 = null;
                if (isConnectionWrapped_tOracleInput_5) {
					unwrappedOraConn_tOracleInput_5 = conn_tOracleInput_5.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_5 != null) {
                        isTimeZoneNull_tOracleInput_5 = (unwrappedOraConn_tOracleInput_5.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_5 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_5).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_5) {
					java.sql.Statement stmtGetTZ_tOracleInput_5 = conn_tOracleInput_5.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_5 = stmtGetTZ_tOracleInput_5.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_5 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_5.next()) {
						sessionTimezone_tOracleInput_5 = rsGetTZ_tOracleInput_5.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_5 && unwrappedOraConn_tOracleInput_5 != null) {
                        unwrappedOraConn_tOracleInput_5.setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_5).setSessionTimeZone(sessionTimezone_tOracleInput_5);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_5 = conn_tOracleInput_5.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_5.setFetchSize(1000);


		    String dbquery_tOracleInput_5 = "SELECT \nDIAG.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID,\n1 AS PERIODONTAL_CARIES\nFROM HCL_DIAGNOSTICOS DIAG\n"
+"INNER JOIN GEN_CIE10 CI ON CI.ID = DIAG.CIE10_ID  \nINNER JOIN HCL_DIAGRELACIONADOS DIAR ON DIAR.DIAGNOSTICOS_ID = DIAG."
+"ID \nINNER JOIN GEN_CIE10 CIR ON CIR.ID = DIAR.CIE10_ID \nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = DIAG.PROCES"
+"OSASISTENCIALES_ID\nWHERE \n"+context.CONDITION+" \n( ( CI.CODIGO  IN ( 	SELECT CIE10.CODIGO\n		FROM ODO_TSISTEMAS OTS \n		INNER JOIN ODO_CIE10_TSISTEMAS CTS ON CTS.TSI"
+"STEMAS_ID = OTS.ID \n		INNER JOIN GEN_CIE10 CIE10 ON CIE10.ID = CTS.CIE10_ID 		\n		WHERE OTS.SIGLA IN ('OPTT','OGVT') \n"
+"		AND CTS.ESTREGISTRO_ID = 1)\n    \n    AND CIR.CODIGO IN ('K029','K028','K023','K022','K021','K020') )\n    \n    OR ("
+" CI.CODIGO  IN ('K029','K028','K023','K022','K021','K020')\n    \n    AND CIR.CODIGO IN ( SELECT CIE10.CODIGO\n									"
+"			FROM ODO_TSISTEMAS OTS \n												INNER JOIN ODO_CIE10_TSISTEMAS CTS ON CTS.TSISTEMAS_ID = OTS.ID \n												IN"
+"NER JOIN GEN_CIE10 CIE10 ON CIE10.ID = CTS.CIE10_ID 		\n												WHERE OTS.SIGLA IN ('OPTT','OGVT') \n												AND"
+" CTS.ESTREGISTRO_ID = 1 ) )\n)";
		    

		    globalMap.put("tOracleInput_5_QUERY",dbquery_tOracleInput_5);

		    java.sql.ResultSet rs_tOracleInput_5 = null;

		    try {
		    	rs_tOracleInput_5 = stmt_tOracleInput_5.executeQuery(dbquery_tOracleInput_5);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_5 = rs_tOracleInput_5.getMetaData();
		    	int colQtyInRs_tOracleInput_5 = rsmd_tOracleInput_5.getColumnCount();

		    String tmpContent_tOracleInput_5 = null;
		    
		    
		    while (rs_tOracleInput_5.next()) {
		        nb_line_tOracleInput_5++;
		        
							if(colQtyInRs_tOracleInput_5 < 1) {
								row6.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(1) != null) {
						row6.PROCESOASISTENCIAL_ID = rs_tOracleInput_5.getBigDecimal(1);
					} else {
				
						row6.PROCESOASISTENCIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_5 < 2) {
								row6.PERIODONTAL_CARIES = null;
							} else {
		                          
					if(rs_tOracleInput_5.getObject(2) != null) {
						row6.PERIODONTAL_CARIES = rs_tOracleInput_5.getInt(2);
					} else {
				
						row6.PERIODONTAL_CARIES = null;
					}
		                    }
					




 



/**
 * [tOracleInput_5 begin ] stop
 */
	
	/**
	 * [tOracleInput_5 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 


	tos_count_tOracleInput_5++;

/**
 * [tOracleInput_5 main ] stop
 */
	
	/**
	 * [tOracleInput_5 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row6"
						
						);
					}
					


			   
			   

					row6Struct row6_HashRow = new row6Struct();
		   	   	   
				
				row6_HashRow.PROCESOASISTENCIAL_ID = row6.PROCESOASISTENCIAL_ID;
				
				row6_HashRow.PERIODONTAL_CARIES = row6.PERIODONTAL_CARIES;
				
			tHash_Lookup_row6.put(row6_HashRow);
			
            




 


	tos_count_tAdvancedHash_row6++;

/**
 * [tAdvancedHash_row6 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row6 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_5 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_5 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

}
}finally{
	if (rs_tOracleInput_5 != null) {
		rs_tOracleInput_5.close();
	}
	if (stmt_tOracleInput_5 != null) {
		stmt_tOracleInput_5.close();
	}
}

globalMap.put("tOracleInput_5_NB_LINE",nb_line_tOracleInput_5);
 

ok_Hash.put("tOracleInput_5", true);
end_Hash.put("tOracleInput_5", System.currentTimeMillis());




/**
 * [tOracleInput_5 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

tHash_Lookup_row6.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row6");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row6", true);
end_Hash.put("tAdvancedHash_row6", System.currentTimeMillis());




/**
 * [tAdvancedHash_row6 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_5 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_5";
	
	

 



/**
 * [tOracleInput_5 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row6 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row6";
	
	

 



/**
 * [tAdvancedHash_row6 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_5_SUBPROCESS_STATE", 1);
	}
	


public static class row7Struct implements routines.system.IPersistableComparableLookupRow<row7Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return true;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public Integer PERIODONTAL;

				public Integer getPERIODONTAL () {
					return this.PERIODONTAL;
				}

				public Boolean PERIODONTALIsNullable(){
				    return true;
				}
				public Boolean PERIODONTALIsKey(){
				    return false;
				}
				public Integer PERIODONTALLength(){
				    return 0;
				}
				public Integer PERIODONTALPrecision(){
				    return null;
				}
				public String PERIODONTALDefault(){
				
					return "";
				
				}
				public String PERIODONTALComment(){
				
				    return "";
				
				}
				public String PERIODONTALPattern(){
				
					return "";
				
				}
				public String PERIODONTALOriginalDbColumnName(){
				
					return "PERIODONTAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row7Struct other = (row7Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row7Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.PERIODONTAL = this.PERIODONTAL;
	            
	}

	public void copyKeysDataTo(row7Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	private Integer readInteger(DataInputStream dis, ObjectInputStream ois) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		Integer intReturn;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
			intReturn = unmarshaller.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, DataOutputStream dos,org.jboss.marshalling.Marshaller marshaller ) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.PERIODONTAL = readInteger(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.PERIODONTAL = readInteger(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
					writeInteger(this.PERIODONTAL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
					writeInteger(this.PERIODONTAL, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",PERIODONTAL="+String.valueOf(PERIODONTAL));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row7Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row7Struct row7 = new row7Struct();




	
	/**
	 * [tAdvancedHash_row7 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row7", false);
		start_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row7");
					}
				
		int tos_count_tAdvancedHash_row7 = 0;
		

			   		// connection name:row7
			   		// source node:tOracleInput_4 - inputs:(after_tOracleInput_1) outputs:(row7,row7) | target node:tAdvancedHash_row7 - inputs:(row7) outputs:()
			   		// linked node: tMap_1 - inputs:(row3,row4,row5,row6,row7) outputs:(out1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row7 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row7Struct> tHash_Lookup_row7 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row7Struct>getLookup(matchingModeEnum_row7);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row7", tHash_Lookup_row7);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row7 begin ] stop
 */



	
	/**
	 * [tOracleInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_4", false);
		start_Hash.put("tOracleInput_4", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_4";
	
	
		int tos_count_tOracleInput_4 = 0;
		
	


	
		    int nb_line_tOracleInput_4 = 0;
		    java.sql.Connection conn_tOracleInput_4 = null;
				conn_tOracleInput_4 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_4 = false;
				boolean isConnectionWrapped_tOracleInput_4 = !(conn_tOracleInput_4 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_4.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_4 = null;
                if (isConnectionWrapped_tOracleInput_4) {
					unwrappedOraConn_tOracleInput_4 = conn_tOracleInput_4.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_4 != null) {
                        isTimeZoneNull_tOracleInput_4 = (unwrappedOraConn_tOracleInput_4.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_4 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_4).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_4) {
					java.sql.Statement stmtGetTZ_tOracleInput_4 = conn_tOracleInput_4.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_4 = stmtGetTZ_tOracleInput_4.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_4 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_4.next()) {
						sessionTimezone_tOracleInput_4 = rsGetTZ_tOracleInput_4.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_4 && unwrappedOraConn_tOracleInput_4 != null) {
                        unwrappedOraConn_tOracleInput_4.setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_4).setSessionTimeZone(sessionTimezone_tOracleInput_4);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_4 = conn_tOracleInput_4.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_4.setFetchSize(1000);


		    String dbquery_tOracleInput_4 = "SELECT \nDIAG.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID,\n1 AS PERIODONTAL\nFROM HCL_DIAGNOSTICOS DIAG\nINNER J"
+"OIN GEN_CIE10 CI ON CI.ID = DIAG.CIE10_ID \nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = DIAG.PROCESOSASISTENCIALE"
+"S_ID\nWHERE \n"+context.CONDITION+" \n CI.CODIGO  IN (SELECT CIE10.CODIGO\n								FROM ODO_TSISTEMAS OTS \n								INNER JOIN ODO_CIE10_TSISTEMAS CTS ON "
+"CTS.TSISTEMAS_ID = OTS.ID \n								INNER JOIN GEN_CIE10 CIE10 ON CIE10.ID = CTS.CIE10_ID 		\n								WHERE OTS.SIGLA IN"
+" ('OPTT','OGVT') \n								AND CTS.ESTREGISTRO_ID = 1)";
		    

		    globalMap.put("tOracleInput_4_QUERY",dbquery_tOracleInput_4);

		    java.sql.ResultSet rs_tOracleInput_4 = null;

		    try {
		    	rs_tOracleInput_4 = stmt_tOracleInput_4.executeQuery(dbquery_tOracleInput_4);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_4 = rs_tOracleInput_4.getMetaData();
		    	int colQtyInRs_tOracleInput_4 = rsmd_tOracleInput_4.getColumnCount();

		    String tmpContent_tOracleInput_4 = null;
		    
		    
		    while (rs_tOracleInput_4.next()) {
		        nb_line_tOracleInput_4++;
		        
							if(colQtyInRs_tOracleInput_4 < 1) {
								row7.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(1) != null) {
						row7.PROCESOASISTENCIAL_ID = rs_tOracleInput_4.getBigDecimal(1);
					} else {
				
						row7.PROCESOASISTENCIAL_ID = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_4 < 2) {
								row7.PERIODONTAL = null;
							} else {
		                          
					if(rs_tOracleInput_4.getObject(2) != null) {
						row7.PERIODONTAL = rs_tOracleInput_4.getInt(2);
					} else {
				
						row7.PERIODONTAL = null;
					}
		                    }
					




 



/**
 * [tOracleInput_4 begin ] stop
 */
	
	/**
	 * [tOracleInput_4 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 


	tos_count_tOracleInput_4++;

/**
 * [tOracleInput_4 main ] stop
 */
	
	/**
	 * [tOracleInput_4 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row7"
						
						);
					}
					


			   
			   

					row7Struct row7_HashRow = new row7Struct();
		   	   	   
				
				row7_HashRow.PROCESOASISTENCIAL_ID = row7.PROCESOASISTENCIAL_ID;
				
				row7_HashRow.PERIODONTAL = row7.PERIODONTAL;
				
			tHash_Lookup_row7.put(row7_HashRow);
			
            




 


	tos_count_tAdvancedHash_row7++;

/**
 * [tAdvancedHash_row7 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row7 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_4 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_4 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

}
}finally{
	if (rs_tOracleInput_4 != null) {
		rs_tOracleInput_4.close();
	}
	if (stmt_tOracleInput_4 != null) {
		stmt_tOracleInput_4.close();
	}
}

globalMap.put("tOracleInput_4_NB_LINE",nb_line_tOracleInput_4);
 

ok_Hash.put("tOracleInput_4", true);
end_Hash.put("tOracleInput_4", System.currentTimeMillis());




/**
 * [tOracleInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

tHash_Lookup_row7.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row7");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row7", true);
end_Hash.put("tAdvancedHash_row7", System.currentTimeMillis());




/**
 * [tAdvancedHash_row7 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_4 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_4";
	
	

 



/**
 * [tOracleInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row7 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row7";
	
	

 



/**
 * [tAdvancedHash_row7 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_4_SUBPROCESS_STATE", 1);
	}
	


public static class row8Struct implements routines.system.IPersistableComparableLookupRow<row8Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public BigDecimal OLEARY_VALOR;

				public BigDecimal getOLEARY_VALOR () {
					return this.OLEARY_VALOR;
				}

				public Boolean OLEARY_VALORIsNullable(){
				    return false;
				}
				public Boolean OLEARY_VALORIsKey(){
				    return false;
				}
				public Integer OLEARY_VALORLength(){
				    return 0;
				}
				public Integer OLEARY_VALORPrecision(){
				    return null;
				}
				public String OLEARY_VALORDefault(){
				
					return "";
				
				}
				public String OLEARY_VALORComment(){
				
				    return "";
				
				}
				public String OLEARY_VALORPattern(){
				
					return "";
				
				}
				public String OLEARY_VALOROriginalDbColumnName(){
				
					return "OLEARY_VALOR";
				
				}

				
			    public String OLEARY;

				public String getOLEARY () {
					return this.OLEARY;
				}

				public Boolean OLEARYIsNullable(){
				    return false;
				}
				public Boolean OLEARYIsKey(){
				    return false;
				}
				public Integer OLEARYLength(){
				    return 100;
				}
				public Integer OLEARYPrecision(){
				    return 0;
				}
				public String OLEARYDefault(){
				
					return null;
				
				}
				public String OLEARYComment(){
				
				    return "";
				
				}
				public String OLEARYPattern(){
				
					return "";
				
				}
				public String OLEARYOriginalDbColumnName(){
				
					return "OLEARY";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row8Struct other = (row8Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row8Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.OLEARY_VALOR = this.OLEARY_VALOR;
	            other.OLEARY = this.OLEARY;
	            
	}

	public void copyKeysDataTo(row8Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.OLEARY_VALOR = (BigDecimal) ois.readObject();
					
						this.OLEARY = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.OLEARY_VALOR = (BigDecimal) objectIn.readObject();
					
						this.OLEARY = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.OLEARY_VALOR);
					
						writeString(this.OLEARY, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.OLEARY_VALOR);
					
						writeString(this.OLEARY, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",OLEARY_VALOR="+String.valueOf(OLEARY_VALOR));
		sb.append(",OLEARY="+OLEARY);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row8Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_6Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row8Struct row8 = new row8Struct();




	
	/**
	 * [tAdvancedHash_row8 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row8", false);
		start_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row8");
					}
				
		int tos_count_tAdvancedHash_row8 = 0;
		

			   		// connection name:row8
			   		// source node:tOracleInput_6 - inputs:(after_tOracleInput_1) outputs:(row8,row8) | target node:tAdvancedHash_row8 - inputs:(row8) outputs:()
			   		// linked node: tMap_2 - inputs:(out1,row8,row9,row10,row11) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row8 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row8Struct> tHash_Lookup_row8 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row8Struct>getLookup(matchingModeEnum_row8);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row8", tHash_Lookup_row8);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row8 begin ] stop
 */



	
	/**
	 * [tOracleInput_6 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_6", false);
		start_Hash.put("tOracleInput_6", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_6";
	
	
		int tos_count_tOracleInput_6 = 0;
		
	


	
		    int nb_line_tOracleInput_6 = 0;
		    java.sql.Connection conn_tOracleInput_6 = null;
				conn_tOracleInput_6 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_6 = false;
				boolean isConnectionWrapped_tOracleInput_6 = !(conn_tOracleInput_6 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_6.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_6 = null;
                if (isConnectionWrapped_tOracleInput_6) {
					unwrappedOraConn_tOracleInput_6 = conn_tOracleInput_6.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_6 != null) {
                        isTimeZoneNull_tOracleInput_6 = (unwrappedOraConn_tOracleInput_6.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_6 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_6).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_6) {
					java.sql.Statement stmtGetTZ_tOracleInput_6 = conn_tOracleInput_6.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_6 = stmtGetTZ_tOracleInput_6.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_6 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_6.next()) {
						sessionTimezone_tOracleInput_6 = rsGetTZ_tOracleInput_6.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_6 && unwrappedOraConn_tOracleInput_6 != null) {
                        unwrappedOraConn_tOracleInput_6.setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_6).setSessionTimeZone(sessionTimezone_tOracleInput_6);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_6 = conn_tOracleInput_6.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_6.setFetchSize(1000);


		    String dbquery_tOracleInput_6 = "SELECT \nODP.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID\n, ODP.PORCENTAJE AS OLEARY_VALOR\n, ODP.OLEARY \nFROM O"
+"DO_PLACABACTERIANA ODP \nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = ODP.PROCESOSASISTENCIALES_ID AND PA.ESTREGIS"
+"TRO_ID = 1  \nWHERE \n"+context.CONDITION+" \n ODP.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_6_QUERY",dbquery_tOracleInput_6);

		    java.sql.ResultSet rs_tOracleInput_6 = null;

		    try {
		    	rs_tOracleInput_6 = stmt_tOracleInput_6.executeQuery(dbquery_tOracleInput_6);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_6 = rs_tOracleInput_6.getMetaData();
		    	int colQtyInRs_tOracleInput_6 = rsmd_tOracleInput_6.getColumnCount();

		    String tmpContent_tOracleInput_6 = null;
		    
		    
		    while (rs_tOracleInput_6.next()) {
		        nb_line_tOracleInput_6++;
		        
							if(colQtyInRs_tOracleInput_6 < 1) {
								row8.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(1) != null) {
						row8.PROCESOASISTENCIAL_ID = rs_tOracleInput_6.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 2) {
								row8.OLEARY_VALOR = null;
							} else {
		                          
					if(rs_tOracleInput_6.getObject(2) != null) {
						row8.OLEARY_VALOR = rs_tOracleInput_6.getBigDecimal(2);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_6 < 3) {
								row8.OLEARY = null;
							} else {
	                         		
        	row8.OLEARY = routines.system.JDBCUtil.getString(rs_tOracleInput_6, 3, false);
		                    }
					




 



/**
 * [tOracleInput_6 begin ] stop
 */
	
	/**
	 * [tOracleInput_6 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 


	tos_count_tOracleInput_6++;

/**
 * [tOracleInput_6 main ] stop
 */
	
	/**
	 * [tOracleInput_6 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row8"
						
						);
					}
					


			   
			   

					row8Struct row8_HashRow = new row8Struct();
		   	   	   
				
				row8_HashRow.PROCESOASISTENCIAL_ID = row8.PROCESOASISTENCIAL_ID;
				
				row8_HashRow.OLEARY_VALOR = row8.OLEARY_VALOR;
				
				row8_HashRow.OLEARY = row8.OLEARY;
				
			tHash_Lookup_row8.put(row8_HashRow);
			
            




 


	tos_count_tAdvancedHash_row8++;

/**
 * [tAdvancedHash_row8 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row8 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_6 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_6 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

}
}finally{
	if (rs_tOracleInput_6 != null) {
		rs_tOracleInput_6.close();
	}
	if (stmt_tOracleInput_6 != null) {
		stmt_tOracleInput_6.close();
	}
}

globalMap.put("tOracleInput_6_NB_LINE",nb_line_tOracleInput_6);
 

ok_Hash.put("tOracleInput_6", true);
end_Hash.put("tOracleInput_6", System.currentTimeMillis());




/**
 * [tOracleInput_6 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

tHash_Lookup_row8.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row8");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row8", true);
end_Hash.put("tAdvancedHash_row8", System.currentTimeMillis());




/**
 * [tAdvancedHash_row8 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_6 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_6";
	
	

 



/**
 * [tOracleInput_6 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row8 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row8";
	
	

 



/**
 * [tAdvancedHash_row8 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_6_SUBPROCESS_STATE", 1);
	}
	


public static class row9Struct implements routines.system.IPersistableComparableLookupRow<row9Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public String BRUXISMO;

				public String getBRUXISMO () {
					return this.BRUXISMO;
				}

				public Boolean BRUXISMOIsNullable(){
				    return true;
				}
				public Boolean BRUXISMOIsKey(){
				    return false;
				}
				public Integer BRUXISMOLength(){
				    return 100;
				}
				public Integer BRUXISMOPrecision(){
				    return 0;
				}
				public String BRUXISMODefault(){
				
					return null;
				
				}
				public String BRUXISMOComment(){
				
				    return "";
				
				}
				public String BRUXISMOPattern(){
				
					return "";
				
				}
				public String BRUXISMOOriginalDbColumnName(){
				
					return "BRUXISMO";
				
				}

				
			    public String MUERDE_OBJETOS;

				public String getMUERDE_OBJETOS () {
					return this.MUERDE_OBJETOS;
				}

				public Boolean MUERDE_OBJETOSIsNullable(){
				    return true;
				}
				public Boolean MUERDE_OBJETOSIsKey(){
				    return false;
				}
				public Integer MUERDE_OBJETOSLength(){
				    return 100;
				}
				public Integer MUERDE_OBJETOSPrecision(){
				    return 0;
				}
				public String MUERDE_OBJETOSDefault(){
				
					return null;
				
				}
				public String MUERDE_OBJETOSComment(){
				
				    return "";
				
				}
				public String MUERDE_OBJETOSPattern(){
				
					return "";
				
				}
				public String MUERDE_OBJETOSOriginalDbColumnName(){
				
					return "MUERDE_OBJETOS";
				
				}

				
			    public String RESPIRADOR_NASAL;

				public String getRESPIRADOR_NASAL () {
					return this.RESPIRADOR_NASAL;
				}

				public Boolean RESPIRADOR_NASALIsNullable(){
				    return true;
				}
				public Boolean RESPIRADOR_NASALIsKey(){
				    return false;
				}
				public Integer RESPIRADOR_NASALLength(){
				    return 100;
				}
				public Integer RESPIRADOR_NASALPrecision(){
				    return 0;
				}
				public String RESPIRADOR_NASALDefault(){
				
					return null;
				
				}
				public String RESPIRADOR_NASALComment(){
				
				    return "";
				
				}
				public String RESPIRADOR_NASALPattern(){
				
					return "";
				
				}
				public String RESPIRADOR_NASALOriginalDbColumnName(){
				
					return "RESPIRADOR_NASAL";
				
				}

				
			    public String SUCCION_DIGITAL;

				public String getSUCCION_DIGITAL () {
					return this.SUCCION_DIGITAL;
				}

				public Boolean SUCCION_DIGITALIsNullable(){
				    return true;
				}
				public Boolean SUCCION_DIGITALIsKey(){
				    return false;
				}
				public Integer SUCCION_DIGITALLength(){
				    return 100;
				}
				public Integer SUCCION_DIGITALPrecision(){
				    return 0;
				}
				public String SUCCION_DIGITALDefault(){
				
					return null;
				
				}
				public String SUCCION_DIGITALComment(){
				
				    return "";
				
				}
				public String SUCCION_DIGITALPattern(){
				
					return "";
				
				}
				public String SUCCION_DIGITALOriginalDbColumnName(){
				
					return "SUCCION_DIGITAL";
				
				}

				
			    public String ONICOFAGIA;

				public String getONICOFAGIA () {
					return this.ONICOFAGIA;
				}

				public Boolean ONICOFAGIAIsNullable(){
				    return true;
				}
				public Boolean ONICOFAGIAIsKey(){
				    return false;
				}
				public Integer ONICOFAGIALength(){
				    return 100;
				}
				public Integer ONICOFAGIAPrecision(){
				    return 0;
				}
				public String ONICOFAGIADefault(){
				
					return null;
				
				}
				public String ONICOFAGIAComment(){
				
				    return "";
				
				}
				public String ONICOFAGIAPattern(){
				
					return "";
				
				}
				public String ONICOFAGIAOriginalDbColumnName(){
				
					return "ONICOFAGIA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row9Struct other = (row9Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row9Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.BRUXISMO = this.BRUXISMO;
	            other.MUERDE_OBJETOS = this.MUERDE_OBJETOS;
	            other.RESPIRADOR_NASAL = this.RESPIRADOR_NASAL;
	            other.SUCCION_DIGITAL = this.SUCCION_DIGITAL;
	            other.ONICOFAGIA = this.ONICOFAGIA;
	            
	}

	public void copyKeysDataTo(row9Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.BRUXISMO = readString(dis,ois);
					
						this.MUERDE_OBJETOS = readString(dis,ois);
					
						this.RESPIRADOR_NASAL = readString(dis,ois);
					
						this.SUCCION_DIGITAL = readString(dis,ois);
					
						this.ONICOFAGIA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.BRUXISMO = readString(dis,objectIn);
					
						this.MUERDE_OBJETOS = readString(dis,objectIn);
					
						this.RESPIRADOR_NASAL = readString(dis,objectIn);
					
						this.SUCCION_DIGITAL = readString(dis,objectIn);
					
						this.ONICOFAGIA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.BRUXISMO, dos, oos);
					
						writeString(this.MUERDE_OBJETOS, dos, oos);
					
						writeString(this.RESPIRADOR_NASAL, dos, oos);
					
						writeString(this.SUCCION_DIGITAL, dos, oos);
					
						writeString(this.ONICOFAGIA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.BRUXISMO, dos, objectOut);
					
						writeString(this.MUERDE_OBJETOS, dos, objectOut);
					
						writeString(this.RESPIRADOR_NASAL, dos, objectOut);
					
						writeString(this.SUCCION_DIGITAL, dos, objectOut);
					
						writeString(this.ONICOFAGIA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",BRUXISMO="+BRUXISMO);
		sb.append(",MUERDE_OBJETOS="+MUERDE_OBJETOS);
		sb.append(",RESPIRADOR_NASAL="+RESPIRADOR_NASAL);
		sb.append(",SUCCION_DIGITAL="+SUCCION_DIGITAL);
		sb.append(",ONICOFAGIA="+ONICOFAGIA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row9Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_7Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row9Struct row9 = new row9Struct();




	
	/**
	 * [tAdvancedHash_row9 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row9", false);
		start_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row9");
					}
				
		int tos_count_tAdvancedHash_row9 = 0;
		

			   		// connection name:row9
			   		// source node:tOracleInput_7 - inputs:(after_tOracleInput_1) outputs:(row9,row9) | target node:tAdvancedHash_row9 - inputs:(row9) outputs:()
			   		// linked node: tMap_2 - inputs:(out1,row8,row9,row10,row11) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row9 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row9Struct> tHash_Lookup_row9 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row9Struct>getLookup(matchingModeEnum_row9);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row9", tHash_Lookup_row9);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row9 begin ] stop
 */



	
	/**
	 * [tOracleInput_7 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_7", false);
		start_Hash.put("tOracleInput_7", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_7";
	
	
		int tos_count_tOracleInput_7 = 0;
		
	


	
		    int nb_line_tOracleInput_7 = 0;
		    java.sql.Connection conn_tOracleInput_7 = null;
				conn_tOracleInput_7 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_7 = false;
				boolean isConnectionWrapped_tOracleInput_7 = !(conn_tOracleInput_7 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_7.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_7 = null;
                if (isConnectionWrapped_tOracleInput_7) {
					unwrappedOraConn_tOracleInput_7 = conn_tOracleInput_7.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_7 != null) {
                        isTimeZoneNull_tOracleInput_7 = (unwrappedOraConn_tOracleInput_7.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_7 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_7).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_7) {
					java.sql.Statement stmtGetTZ_tOracleInput_7 = conn_tOracleInput_7.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_7 = stmtGetTZ_tOracleInput_7.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_7 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_7.next()) {
						sessionTimezone_tOracleInput_7 = rsGetTZ_tOracleInput_7.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_7 && unwrappedOraConn_tOracleInput_7 != null) {
                        unwrappedOraConn_tOracleInput_7.setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_7).setSessionTimeZone(sessionTimezone_tOracleInput_7);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_7 = conn_tOracleInput_7.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_7.setFetchSize(1000);


		    String dbquery_tOracleInput_7 = "SELECT * FROM \n(  \n  SELECT \n  ORE.PROCESOSASISTENCIALES_ID AS PROCESOASISTENCIAL_ID, \n  GPR.SIGLA, \n  GTR.VPREDET"
+"ERMINADO AS RTA\n  FROM ODO_RESPUESTAS ORE\n  INNER JOIN GEN_PREGUNTAS GPR ON GPR.ID = ORE.PREGUNTAS_ID \n  INNER JOIN G"
+"EN_TRESPUESTAS GTR ON GTR.ID = ORE.TRESPUESTAS_ID OR  GTR.ID = ORE.OPCION1 \n  INNER JOIN HCL_PROCESOSASISTENCIALES PA O"
+"N PA.ID = ORE.PROCESOSASISTENCIALES_ID AND PA.ESTREGISTRO_ID = 1  \n  WHERE \n"+context.CONDITION+" \n GPR.SIGLA IN ('ODO12', 'ODO15', 'ODO13', 'ODO16', 'ODO14')\n  AND ORE.ESTREGISTRO_ID = 1\n  AND GPR.ESTREGISTRO_ID "
+"= 1\n  AND GTR.ESTREGISTRO_ID = 1\n)\nPIVOT \n(\n  MIN( RTA )\n  FOR SIGLA \n  IN ( 'ODO12' AS BRUXISMO, 'ODO15' AS MUER"
+"DE_OBJETOS, 'ODO13' AS RESPIRADOR_NASAL, 'ODO16' AS SUCCION_DIGITAL, 'ODO14' AS ONICOFAGIA)\n)";
		    

		    globalMap.put("tOracleInput_7_QUERY",dbquery_tOracleInput_7);

		    java.sql.ResultSet rs_tOracleInput_7 = null;

		    try {
		    	rs_tOracleInput_7 = stmt_tOracleInput_7.executeQuery(dbquery_tOracleInput_7);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_7 = rs_tOracleInput_7.getMetaData();
		    	int colQtyInRs_tOracleInput_7 = rsmd_tOracleInput_7.getColumnCount();

		    String tmpContent_tOracleInput_7 = null;
		    
		    
		    while (rs_tOracleInput_7.next()) {
		        nb_line_tOracleInput_7++;
		        
							if(colQtyInRs_tOracleInput_7 < 1) {
								row9.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_7.getObject(1) != null) {
						row9.PROCESOASISTENCIAL_ID = rs_tOracleInput_7.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_7 < 2) {
								row9.BRUXISMO = null;
							} else {
	                         		
        	row9.BRUXISMO = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 2, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 3) {
								row9.MUERDE_OBJETOS = null;
							} else {
	                         		
        	row9.MUERDE_OBJETOS = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 3, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 4) {
								row9.RESPIRADOR_NASAL = null;
							} else {
	                         		
        	row9.RESPIRADOR_NASAL = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 4, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 5) {
								row9.SUCCION_DIGITAL = null;
							} else {
	                         		
        	row9.SUCCION_DIGITAL = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 5, false);
		                    }
							if(colQtyInRs_tOracleInput_7 < 6) {
								row9.ONICOFAGIA = null;
							} else {
	                         		
        	row9.ONICOFAGIA = routines.system.JDBCUtil.getString(rs_tOracleInput_7, 6, false);
		                    }
					




 



/**
 * [tOracleInput_7 begin ] stop
 */
	
	/**
	 * [tOracleInput_7 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 


	tos_count_tOracleInput_7++;

/**
 * [tOracleInput_7 main ] stop
 */
	
	/**
	 * [tOracleInput_7 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row9"
						
						);
					}
					


			   
			   

					row9Struct row9_HashRow = new row9Struct();
		   	   	   
				
				row9_HashRow.PROCESOASISTENCIAL_ID = row9.PROCESOASISTENCIAL_ID;
				
				row9_HashRow.BRUXISMO = row9.BRUXISMO;
				
				row9_HashRow.MUERDE_OBJETOS = row9.MUERDE_OBJETOS;
				
				row9_HashRow.RESPIRADOR_NASAL = row9.RESPIRADOR_NASAL;
				
				row9_HashRow.SUCCION_DIGITAL = row9.SUCCION_DIGITAL;
				
				row9_HashRow.ONICOFAGIA = row9.ONICOFAGIA;
				
			tHash_Lookup_row9.put(row9_HashRow);
			
            




 


	tos_count_tAdvancedHash_row9++;

/**
 * [tAdvancedHash_row9 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row9 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_7 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_7 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

}
}finally{
	if (rs_tOracleInput_7 != null) {
		rs_tOracleInput_7.close();
	}
	if (stmt_tOracleInput_7 != null) {
		stmt_tOracleInput_7.close();
	}
}

globalMap.put("tOracleInput_7_NB_LINE",nb_line_tOracleInput_7);
 

ok_Hash.put("tOracleInput_7", true);
end_Hash.put("tOracleInput_7", System.currentTimeMillis());




/**
 * [tOracleInput_7 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

tHash_Lookup_row9.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row9");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row9", true);
end_Hash.put("tAdvancedHash_row9", System.currentTimeMillis());




/**
 * [tAdvancedHash_row9 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_7 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_7";
	
	

 



/**
 * [tOracleInput_7 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row9 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row9";
	
	

 



/**
 * [tAdvancedHash_row9 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_7_SUBPROCESS_STATE", 1);
	}
	


public static class row10Struct implements routines.system.IPersistableComparableLookupRow<row10Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOSASISTENCIALES_ID;

				public BigDecimal getPROCESOSASISTENCIALES_ID () {
					return this.PROCESOSASISTENCIALES_ID;
				}

				public Boolean PROCESOSASISTENCIALES_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOSASISTENCIALES_IDIsKey(){
				    return false;
				}
				public Integer PROCESOSASISTENCIALES_IDLength(){
				    return 0;
				}
				public Integer PROCESOSASISTENCIALES_IDPrecision(){
				    return null;
				}
				public String PROCESOSASISTENCIALES_IDDefault(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDComment(){
				
				    return "";
				
				}
				public String PROCESOSASISTENCIALES_IDPattern(){
				
					return "";
				
				}
				public String PROCESOSASISTENCIALES_IDOriginalDbColumnName(){
				
					return "PROCESOSASISTENCIALES_ID";
				
				}

				
			    public BigDecimal COP_CEOD;

				public BigDecimal getCOP_CEOD () {
					return this.COP_CEOD;
				}

				public Boolean COP_CEODIsNullable(){
				    return true;
				}
				public Boolean COP_CEODIsKey(){
				    return false;
				}
				public Integer COP_CEODLength(){
				    return 0;
				}
				public Integer COP_CEODPrecision(){
				    return null;
				}
				public String COP_CEODDefault(){
				
					return "";
				
				}
				public String COP_CEODComment(){
				
				    return "";
				
				}
				public String COP_CEODPattern(){
				
					return "";
				
				}
				public String COP_CEODOriginalDbColumnName(){
				
					return "COP_CEOD";
				
				}

				
			    public BigDecimal CARIADOS;

				public BigDecimal getCARIADOS () {
					return this.CARIADOS;
				}

				public Boolean CARIADOSIsNullable(){
				    return true;
				}
				public Boolean CARIADOSIsKey(){
				    return false;
				}
				public Integer CARIADOSLength(){
				    return 0;
				}
				public Integer CARIADOSPrecision(){
				    return null;
				}
				public String CARIADOSDefault(){
				
					return "";
				
				}
				public String CARIADOSComment(){
				
				    return "";
				
				}
				public String CARIADOSPattern(){
				
					return "";
				
				}
				public String CARIADOSOriginalDbColumnName(){
				
					return "CARIADOS";
				
				}

				
			    public BigDecimal OBTURADOS;

				public BigDecimal getOBTURADOS () {
					return this.OBTURADOS;
				}

				public Boolean OBTURADOSIsNullable(){
				    return true;
				}
				public Boolean OBTURADOSIsKey(){
				    return false;
				}
				public Integer OBTURADOSLength(){
				    return 0;
				}
				public Integer OBTURADOSPrecision(){
				    return null;
				}
				public String OBTURADOSDefault(){
				
					return "";
				
				}
				public String OBTURADOSComment(){
				
				    return "";
				
				}
				public String OBTURADOSPattern(){
				
					return "";
				
				}
				public String OBTURADOSOriginalDbColumnName(){
				
					return "OBTURADOS";
				
				}

				
			    public BigDecimal PERDIDOS_EXTRAIDOS;

				public BigDecimal getPERDIDOS_EXTRAIDOS () {
					return this.PERDIDOS_EXTRAIDOS;
				}

				public Boolean PERDIDOS_EXTRAIDOSIsNullable(){
				    return true;
				}
				public Boolean PERDIDOS_EXTRAIDOSIsKey(){
				    return false;
				}
				public Integer PERDIDOS_EXTRAIDOSLength(){
				    return 0;
				}
				public Integer PERDIDOS_EXTRAIDOSPrecision(){
				    return null;
				}
				public String PERDIDOS_EXTRAIDOSDefault(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSComment(){
				
				    return "";
				
				}
				public String PERDIDOS_EXTRAIDOSPattern(){
				
					return "";
				
				}
				public String PERDIDOS_EXTRAIDOSOriginalDbColumnName(){
				
					return "PERDIDOS_EXTRAIDOS";
				
				}

				
			    public String TIPO_COPCEOP;

				public String getTIPO_COPCEOP () {
					return this.TIPO_COPCEOP;
				}

				public Boolean TIPO_COPCEOPIsNullable(){
				    return true;
				}
				public Boolean TIPO_COPCEOPIsKey(){
				    return false;
				}
				public Integer TIPO_COPCEOPLength(){
				    return 5;
				}
				public Integer TIPO_COPCEOPPrecision(){
				    return 0;
				}
				public String TIPO_COPCEOPDefault(){
				
					return null;
				
				}
				public String TIPO_COPCEOPComment(){
				
				    return "";
				
				}
				public String TIPO_COPCEOPPattern(){
				
					return "";
				
				}
				public String TIPO_COPCEOPOriginalDbColumnName(){
				
					return "TIPO_COPCEOP";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOSASISTENCIALES_ID == null) ? 0 : this.PROCESOSASISTENCIALES_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row10Struct other = (row10Struct) obj;
		
						if (this.PROCESOSASISTENCIALES_ID == null) {
							if (other.PROCESOSASISTENCIALES_ID != null)
								return false;
						
						} else if (!this.PROCESOSASISTENCIALES_ID.equals(other.PROCESOSASISTENCIALES_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row10Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            other.COP_CEOD = this.COP_CEOD;
	            other.CARIADOS = this.CARIADOS;
	            other.OBTURADOS = this.OBTURADOS;
	            other.PERDIDOS_EXTRAIDOS = this.PERDIDOS_EXTRAIDOS;
	            other.TIPO_COPCEOP = this.TIPO_COPCEOP;
	            
	}

	public void copyKeysDataTo(row10Struct other) {

		other.PROCESOSASISTENCIALES_ID = this.PROCESOSASISTENCIALES_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOSASISTENCIALES_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOSASISTENCIALES_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.COP_CEOD = (BigDecimal) ois.readObject();
					
       			    	this.CARIADOS = (BigDecimal) ois.readObject();
					
       			    	this.OBTURADOS = (BigDecimal) ois.readObject();
					
       			    	this.PERDIDOS_EXTRAIDOS = (BigDecimal) ois.readObject();
					
						this.TIPO_COPCEOP = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.COP_CEOD = (BigDecimal) objectIn.readObject();
					
       			    	this.CARIADOS = (BigDecimal) objectIn.readObject();
					
       			    	this.OBTURADOS = (BigDecimal) objectIn.readObject();
					
       			    	this.PERDIDOS_EXTRAIDOS = (BigDecimal) objectIn.readObject();
					
						this.TIPO_COPCEOP = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.COP_CEOD);
					
       			    	oos.writeObject(this.CARIADOS);
					
       			    	oos.writeObject(this.OBTURADOS);
					
       			    	oos.writeObject(this.PERDIDOS_EXTRAIDOS);
					
						writeString(this.TIPO_COPCEOP, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.COP_CEOD);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.CARIADOS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.OBTURADOS);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PERDIDOS_EXTRAIDOS);
					
						writeString(this.TIPO_COPCEOP, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOSASISTENCIALES_ID="+String.valueOf(PROCESOSASISTENCIALES_ID));
		sb.append(",COP_CEOD="+String.valueOf(COP_CEOD));
		sb.append(",CARIADOS="+String.valueOf(CARIADOS));
		sb.append(",OBTURADOS="+String.valueOf(OBTURADOS));
		sb.append(",PERDIDOS_EXTRAIDOS="+String.valueOf(PERDIDOS_EXTRAIDOS));
		sb.append(",TIPO_COPCEOP="+TIPO_COPCEOP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row10Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOSASISTENCIALES_ID, other.PROCESOSASISTENCIALES_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_10Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row10Struct row10 = new row10Struct();




	
	/**
	 * [tAdvancedHash_row10 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row10", false);
		start_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row10");
					}
				
		int tos_count_tAdvancedHash_row10 = 0;
		

			   		// connection name:row10
			   		// source node:tOracleInput_10 - inputs:(after_tOracleInput_1) outputs:(row10,row10) | target node:tAdvancedHash_row10 - inputs:(row10) outputs:()
			   		// linked node: tMap_2 - inputs:(out1,row8,row9,row10,row11) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row10 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row10Struct> tHash_Lookup_row10 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row10Struct>getLookup(matchingModeEnum_row10);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row10", tHash_Lookup_row10);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row10 begin ] stop
 */



	
	/**
	 * [tOracleInput_10 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_10", false);
		start_Hash.put("tOracleInput_10", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_10";
	
	
		int tos_count_tOracleInput_10 = 0;
		
	


	
		    int nb_line_tOracleInput_10 = 0;
		    java.sql.Connection conn_tOracleInput_10 = null;
				conn_tOracleInput_10 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_10 = false;
				boolean isConnectionWrapped_tOracleInput_10 = !(conn_tOracleInput_10 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_10.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_10 = null;
                if (isConnectionWrapped_tOracleInput_10) {
					unwrappedOraConn_tOracleInput_10 = conn_tOracleInput_10.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_10 != null) {
                        isTimeZoneNull_tOracleInput_10 = (unwrappedOraConn_tOracleInput_10.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_10 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_10).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_10) {
					java.sql.Statement stmtGetTZ_tOracleInput_10 = conn_tOracleInput_10.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_10 = stmtGetTZ_tOracleInput_10.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_10 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_10.next()) {
						sessionTimezone_tOracleInput_10 = rsGetTZ_tOracleInput_10.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_10 && unwrappedOraConn_tOracleInput_10 != null) {
                        unwrappedOraConn_tOracleInput_10.setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_10).setSessionTimeZone(sessionTimezone_tOracleInput_10);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_10 = conn_tOracleInput_10.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_10.setFetchSize(1000);


		    String dbquery_tOracleInput_10 = "SELECT \nOIN.PROCESOSASISTENCIALES_ID, \nSUM(OIN.INDICE) AS COP_CEOD, \nSUM(OIN.CARIADOS) AS CARIADOS, \nSUM(OIN.OBTURA"
+"DOS) AS OBTURADOS, \nSUM(OIN.PERDIDOS) AS PERDIDOS_EXTRAIDOS ,\nMAX(OIN.TIPO) AS TIPO_COPCEOP\nFROM ODO_COPCEOD OIN \nIN"
+"NER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = OIN.PROCESOSASISTENCIALES_ID\nWHERE \n"+context.CONDITION+"  \nPA.ESTREGISTRO_ID = 1 \nGROUP BY OIN.PROCESOSASISTENCIALES_ID";
		    

		    globalMap.put("tOracleInput_10_QUERY",dbquery_tOracleInput_10);

		    java.sql.ResultSet rs_tOracleInput_10 = null;

		    try {
		    	rs_tOracleInput_10 = stmt_tOracleInput_10.executeQuery(dbquery_tOracleInput_10);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_10 = rs_tOracleInput_10.getMetaData();
		    	int colQtyInRs_tOracleInput_10 = rsmd_tOracleInput_10.getColumnCount();

		    String tmpContent_tOracleInput_10 = null;
		    
		    
		    while (rs_tOracleInput_10.next()) {
		        nb_line_tOracleInput_10++;
		        
							if(colQtyInRs_tOracleInput_10 < 1) {
								row10.PROCESOSASISTENCIALES_ID = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(1) != null) {
						row10.PROCESOSASISTENCIALES_ID = rs_tOracleInput_10.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 2) {
								row10.COP_CEOD = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(2) != null) {
						row10.COP_CEOD = rs_tOracleInput_10.getBigDecimal(2);
					} else {
				
						row10.COP_CEOD = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 3) {
								row10.CARIADOS = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(3) != null) {
						row10.CARIADOS = rs_tOracleInput_10.getBigDecimal(3);
					} else {
				
						row10.CARIADOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 4) {
								row10.OBTURADOS = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(4) != null) {
						row10.OBTURADOS = rs_tOracleInput_10.getBigDecimal(4);
					} else {
				
						row10.OBTURADOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 5) {
								row10.PERDIDOS_EXTRAIDOS = null;
							} else {
		                          
					if(rs_tOracleInput_10.getObject(5) != null) {
						row10.PERDIDOS_EXTRAIDOS = rs_tOracleInput_10.getBigDecimal(5);
					} else {
				
						row10.PERDIDOS_EXTRAIDOS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_10 < 6) {
								row10.TIPO_COPCEOP = null;
							} else {
	                         		
        	row10.TIPO_COPCEOP = routines.system.JDBCUtil.getString(rs_tOracleInput_10, 6, false);
		                    }
					




 



/**
 * [tOracleInput_10 begin ] stop
 */
	
	/**
	 * [tOracleInput_10 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 


	tos_count_tOracleInput_10++;

/**
 * [tOracleInput_10 main ] stop
 */
	
	/**
	 * [tOracleInput_10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row10"
						
						);
					}
					


			   
			   

					row10Struct row10_HashRow = new row10Struct();
		   	   	   
				
				row10_HashRow.PROCESOSASISTENCIALES_ID = row10.PROCESOSASISTENCIALES_ID;
				
				row10_HashRow.COP_CEOD = row10.COP_CEOD;
				
				row10_HashRow.CARIADOS = row10.CARIADOS;
				
				row10_HashRow.OBTURADOS = row10.OBTURADOS;
				
				row10_HashRow.PERDIDOS_EXTRAIDOS = row10.PERDIDOS_EXTRAIDOS;
				
				row10_HashRow.TIPO_COPCEOP = row10.TIPO_COPCEOP;
				
			tHash_Lookup_row10.put(row10_HashRow);
			
            




 


	tos_count_tAdvancedHash_row10++;

/**
 * [tAdvancedHash_row10 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row10 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_10 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_10 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

}
}finally{
	if (rs_tOracleInput_10 != null) {
		rs_tOracleInput_10.close();
	}
	if (stmt_tOracleInput_10 != null) {
		stmt_tOracleInput_10.close();
	}
}

globalMap.put("tOracleInput_10_NB_LINE",nb_line_tOracleInput_10);
 

ok_Hash.put("tOracleInput_10", true);
end_Hash.put("tOracleInput_10", System.currentTimeMillis());




/**
 * [tOracleInput_10 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

tHash_Lookup_row10.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row10");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row10", true);
end_Hash.put("tAdvancedHash_row10", System.currentTimeMillis());




/**
 * [tAdvancedHash_row10 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_10 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_10";
	
	

 



/**
 * [tOracleInput_10 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row10 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row10";
	
	

 



/**
 * [tAdvancedHash_row10 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_10_SUBPROCESS_STATE", 1);
	}
	


public static class row11Struct implements routines.system.IPersistableComparableLookupRow<row11Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public String INTCP;

				public String getINTCP () {
					return this.INTCP;
				}

				public Boolean INTCPIsNullable(){
				    return false;
				}
				public Boolean INTCPIsKey(){
				    return false;
				}
				public Integer INTCPLength(){
				    return 100;
				}
				public Integer INTCPPrecision(){
				    return 0;
				}
				public String INTCPDefault(){
				
					return null;
				
				}
				public String INTCPComment(){
				
				    return "";
				
				}
				public String INTCPPattern(){
				
					return "";
				
				}
				public String INTCPOriginalDbColumnName(){
				
					return "INTCP";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row11Struct other = (row11Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row11Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.INTCP = this.INTCP;
	            
	}

	public void copyKeysDataTo(row11Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.INTCP = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.INTCP = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.INTCP, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.INTCP, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",INTCP="+INTCP);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row11Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_11Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row11Struct row11 = new row11Struct();




	
	/**
	 * [tAdvancedHash_row11 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row11", false);
		start_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row11");
					}
				
		int tos_count_tAdvancedHash_row11 = 0;
		

			   		// connection name:row11
			   		// source node:tOracleInput_11 - inputs:(after_tOracleInput_1) outputs:(row11,row11) | target node:tAdvancedHash_row11 - inputs:(row11) outputs:()
			   		// linked node: tMap_2 - inputs:(out1,row8,row9,row10,row11) outputs:(out2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row11 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row11Struct> tHash_Lookup_row11 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row11Struct>getLookup(matchingModeEnum_row11);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row11", tHash_Lookup_row11);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row11 begin ] stop
 */



	
	/**
	 * [tOracleInput_11 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_11", false);
		start_Hash.put("tOracleInput_11", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_11";
	
	
		int tos_count_tOracleInput_11 = 0;
		
	


	
		    int nb_line_tOracleInput_11 = 0;
		    java.sql.Connection conn_tOracleInput_11 = null;
				conn_tOracleInput_11 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_11 = false;
				boolean isConnectionWrapped_tOracleInput_11 = !(conn_tOracleInput_11 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_11.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_11 = null;
                if (isConnectionWrapped_tOracleInput_11) {
					unwrappedOraConn_tOracleInput_11 = conn_tOracleInput_11.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_11 != null) {
                        isTimeZoneNull_tOracleInput_11 = (unwrappedOraConn_tOracleInput_11.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_11 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_11).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_11) {
					java.sql.Statement stmtGetTZ_tOracleInput_11 = conn_tOracleInput_11.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_11 = stmtGetTZ_tOracleInput_11.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_11 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_11.next()) {
						sessionTimezone_tOracleInput_11 = rsGetTZ_tOracleInput_11.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_11 && unwrappedOraConn_tOracleInput_11 != null) {
                        unwrappedOraConn_tOracleInput_11.setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_11).setSessionTimeZone(sessionTimezone_tOracleInput_11);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_11 = conn_tOracleInput_11.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_11.setFetchSize(1000);


		    String dbquery_tOracleInput_11 = "SELECT PA.ID AS PROCESOASISTENCIAL_ID\n, TIP.VALOR AS INTCP\nFROM ODO_PERIODONTAL ODP\nINNER JOIN HCL_PROCESOSASISTENCI"
+"ALES PA ON PA.ID = ODP.PROCESOSASISTENCIALES_ID AND PA.ESTREGISTRO_ID = 1\nINNER JOIN ODO_TINDICEPERIODONTAL TIP ON TIP."
+"ID = ODP.TINDICEPERIODONTAL_ID AND TIP.ESTREGISTRO_ID = 1\nWHERE \n"+context.CONDITION+" \n ODP.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_11_QUERY",dbquery_tOracleInput_11);

		    java.sql.ResultSet rs_tOracleInput_11 = null;

		    try {
		    	rs_tOracleInput_11 = stmt_tOracleInput_11.executeQuery(dbquery_tOracleInput_11);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_11 = rs_tOracleInput_11.getMetaData();
		    	int colQtyInRs_tOracleInput_11 = rsmd_tOracleInput_11.getColumnCount();

		    String tmpContent_tOracleInput_11 = null;
		    
		    
		    while (rs_tOracleInput_11.next()) {
		        nb_line_tOracleInput_11++;
		        
							if(colQtyInRs_tOracleInput_11 < 1) {
								row11.PROCESOASISTENCIAL_ID = null;
							} else {
		                          
					if(rs_tOracleInput_11.getObject(1) != null) {
						row11.PROCESOASISTENCIAL_ID = rs_tOracleInput_11.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_11 < 2) {
								row11.INTCP = null;
							} else {
	                         		
        	row11.INTCP = routines.system.JDBCUtil.getString(rs_tOracleInput_11, 2, false);
		                    }
					




 



/**
 * [tOracleInput_11 begin ] stop
 */
	
	/**
	 * [tOracleInput_11 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 


	tos_count_tOracleInput_11++;

/**
 * [tOracleInput_11 main ] stop
 */
	
	/**
	 * [tOracleInput_11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row11"
						
						);
					}
					


			   
			   

					row11Struct row11_HashRow = new row11Struct();
		   	   	   
				
				row11_HashRow.PROCESOASISTENCIAL_ID = row11.PROCESOASISTENCIAL_ID;
				
				row11_HashRow.INTCP = row11.INTCP;
				
			tHash_Lookup_row11.put(row11_HashRow);
			
            




 


	tos_count_tAdvancedHash_row11++;

/**
 * [tAdvancedHash_row11 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row11 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_11 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_11 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

}
}finally{
	if (rs_tOracleInput_11 != null) {
		rs_tOracleInput_11.close();
	}
	if (stmt_tOracleInput_11 != null) {
		stmt_tOracleInput_11.close();
	}
}

globalMap.put("tOracleInput_11_NB_LINE",nb_line_tOracleInput_11);
 

ok_Hash.put("tOracleInput_11", true);
end_Hash.put("tOracleInput_11", System.currentTimeMillis());




/**
 * [tOracleInput_11 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

tHash_Lookup_row11.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row11");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row11", true);
end_Hash.put("tAdvancedHash_row11", System.currentTimeMillis());




/**
 * [tAdvancedHash_row11 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_11 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_11";
	
	

 



/**
 * [tOracleInput_11 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row11 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row11";
	
	

 



/**
 * [tAdvancedHash_row11 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_11_SUBPROCESS_STATE", 1);
	}
	


public static class row13Struct implements routines.system.IPersistableComparableLookupRow<row13Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PA_ID;

				public BigDecimal getPA_ID () {
					return this.PA_ID;
				}

				public Boolean PA_IDIsNullable(){
				    return false;
				}
				public Boolean PA_IDIsKey(){
				    return false;
				}
				public Integer PA_IDLength(){
				    return null;
				}
				public Integer PA_IDPrecision(){
				    return null;
				}
				public String PA_IDDefault(){
				
					return "";
				
				}
				public String PA_IDComment(){
				
				    return "";
				
				}
				public String PA_IDPattern(){
				
					return "";
				
				}
				public String PA_IDOriginalDbColumnName(){
				
					return "PA_ID";
				
				}

				
			    public BigDecimal PLACA_DENTAL;

				public BigDecimal getPLACA_DENTAL () {
					return this.PLACA_DENTAL;
				}

				public Boolean PLACA_DENTALIsNullable(){
				    return true;
				}
				public Boolean PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer PLACA_DENTALLength(){
				    return null;
				}
				public Integer PLACA_DENTALPrecision(){
				    return null;
				}
				public String PLACA_DENTALDefault(){
				
					return "";
				
				}
				public String PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String PLACA_DENTALOriginalDbColumnName(){
				
					return "PLACA_DENTAL";
				
				}

				
			    public String ESTADO_PLACA_DENTAL;

				public String getESTADO_PLACA_DENTAL () {
					return this.ESTADO_PLACA_DENTAL;
				}

				public Boolean ESTADO_PLACA_DENTALIsNullable(){
				    return false;
				}
				public Boolean ESTADO_PLACA_DENTALIsKey(){
				    return false;
				}
				public Integer ESTADO_PLACA_DENTALLength(){
				    return null;
				}
				public Integer ESTADO_PLACA_DENTALPrecision(){
				    return null;
				}
				public String ESTADO_PLACA_DENTALDefault(){
				
					return null;
				
				}
				public String ESTADO_PLACA_DENTALComment(){
				
				    return "";
				
				}
				public String ESTADO_PLACA_DENTALPattern(){
				
					return "";
				
				}
				public String ESTADO_PLACA_DENTALOriginalDbColumnName(){
				
					return "ESTADO_PLACA_DENTAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PA_ID == null) ? 0 : this.PA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row13Struct other = (row13Struct) obj;
		
						if (this.PA_ID == null) {
							if (other.PA_ID != null)
								return false;
						
						} else if (!this.PA_ID.equals(other.PA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row13Struct other) {

		other.PA_ID = this.PA_ID;
	            other.PLACA_DENTAL = this.PLACA_DENTAL;
	            other.ESTADO_PLACA_DENTAL = this.ESTADO_PLACA_DENTAL;
	            
	}

	public void copyKeysDataTo(row13Struct other) {

		other.PA_ID = this.PA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.PLACA_DENTAL = (BigDecimal) ois.readObject();
					
						this.ESTADO_PLACA_DENTAL = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.PLACA_DENTAL = (BigDecimal) objectIn.readObject();
					
						this.ESTADO_PLACA_DENTAL = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.PLACA_DENTAL);
					
						writeString(this.ESTADO_PLACA_DENTAL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PLACA_DENTAL);
					
						writeString(this.ESTADO_PLACA_DENTAL, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PA_ID="+String.valueOf(PA_ID));
		sb.append(",PLACA_DENTAL="+String.valueOf(PLACA_DENTAL));
		sb.append(",ESTADO_PLACA_DENTAL="+ESTADO_PLACA_DENTAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row13Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PA_ID, other.PA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_13Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row13Struct row13 = new row13Struct();




	
	/**
	 * [tAdvancedHash_row13 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row13", false);
		start_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row13");
					}
				
		int tos_count_tAdvancedHash_row13 = 0;
		

			   		// connection name:row13
			   		// source node:tOracleInput_13 - inputs:(after_tOracleInput_1) outputs:(row13,row13) | target node:tAdvancedHash_row13 - inputs:(row13) outputs:()
			   		// linked node: tMap_4 - inputs:(out2,row13,row14,row15) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row13 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row13Struct> tHash_Lookup_row13 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row13Struct>getLookup(matchingModeEnum_row13);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row13", tHash_Lookup_row13);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row13 begin ] stop
 */



	
	/**
	 * [tOracleInput_13 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_13", false);
		start_Hash.put("tOracleInput_13", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_13";
	
	
		int tos_count_tOracleInput_13 = 0;
		
	


	
		    int nb_line_tOracleInput_13 = 0;
		    java.sql.Connection conn_tOracleInput_13 = null;
				conn_tOracleInput_13 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_13 = false;
				boolean isConnectionWrapped_tOracleInput_13 = !(conn_tOracleInput_13 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_13.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_13 = null;
                if (isConnectionWrapped_tOracleInput_13) {
					unwrappedOraConn_tOracleInput_13 = conn_tOracleInput_13.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_13 != null) {
                        isTimeZoneNull_tOracleInput_13 = (unwrappedOraConn_tOracleInput_13.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_13 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_13).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_13) {
					java.sql.Statement stmtGetTZ_tOracleInput_13 = conn_tOracleInput_13.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_13 = stmtGetTZ_tOracleInput_13.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_13 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_13.next()) {
						sessionTimezone_tOracleInput_13 = rsGetTZ_tOracleInput_13.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_13 && unwrappedOraConn_tOracleInput_13 != null) {
                        unwrappedOraConn_tOracleInput_13.setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_13).setSessionTimeZone(sessionTimezone_tOracleInput_13);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_13 = conn_tOracleInput_13.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_13.setFetchSize(1000);


		    String dbquery_tOracleInput_13 = "SELECT \ndistinct \nODP.PROCESOSASISTENCIALES_ID as pa_id\n,1 AS PLACA_DENTAL\n,'Finalizado' AS ESTADO_PLACA_DENTAL\nFR"
+"OM ODO_PLACABACTERIANA ODP \nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = ODP.PROCESOSASISTENCIALES_ID AND PA.ESTR"
+"EGISTRO_ID = 1  \nWHERE \n"+context.CONDITION+"  \nODP.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_13_QUERY",dbquery_tOracleInput_13);

		    java.sql.ResultSet rs_tOracleInput_13 = null;

		    try {
		    	rs_tOracleInput_13 = stmt_tOracleInput_13.executeQuery(dbquery_tOracleInput_13);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_13 = rs_tOracleInput_13.getMetaData();
		    	int colQtyInRs_tOracleInput_13 = rsmd_tOracleInput_13.getColumnCount();

		    String tmpContent_tOracleInput_13 = null;
		    
		    
		    while (rs_tOracleInput_13.next()) {
		        nb_line_tOracleInput_13++;
		        
							if(colQtyInRs_tOracleInput_13 < 1) {
								row13.PA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(1) != null) {
						row13.PA_ID = rs_tOracleInput_13.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 2) {
								row13.PLACA_DENTAL = null;
							} else {
		                          
					if(rs_tOracleInput_13.getObject(2) != null) {
						row13.PLACA_DENTAL = rs_tOracleInput_13.getBigDecimal(2);
					} else {
				
						row13.PLACA_DENTAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_13 < 3) {
								row13.ESTADO_PLACA_DENTAL = null;
							} else {
	                         		
        	row13.ESTADO_PLACA_DENTAL = routines.system.JDBCUtil.getString(rs_tOracleInput_13, 3, false);
		                    }
					




 



/**
 * [tOracleInput_13 begin ] stop
 */
	
	/**
	 * [tOracleInput_13 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 


	tos_count_tOracleInput_13++;

/**
 * [tOracleInput_13 main ] stop
 */
	
	/**
	 * [tOracleInput_13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row13"
						
						);
					}
					


			   
			   

					row13Struct row13_HashRow = new row13Struct();
		   	   	   
				
				row13_HashRow.PA_ID = row13.PA_ID;
				
				row13_HashRow.PLACA_DENTAL = row13.PLACA_DENTAL;
				
				row13_HashRow.ESTADO_PLACA_DENTAL = row13.ESTADO_PLACA_DENTAL;
				
			tHash_Lookup_row13.put(row13_HashRow);
			
            




 


	tos_count_tAdvancedHash_row13++;

/**
 * [tAdvancedHash_row13 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row13 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_13 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_13 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

}
}finally{
	if (rs_tOracleInput_13 != null) {
		rs_tOracleInput_13.close();
	}
	if (stmt_tOracleInput_13 != null) {
		stmt_tOracleInput_13.close();
	}
}

globalMap.put("tOracleInput_13_NB_LINE",nb_line_tOracleInput_13);
 

ok_Hash.put("tOracleInput_13", true);
end_Hash.put("tOracleInput_13", System.currentTimeMillis());




/**
 * [tOracleInput_13 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

tHash_Lookup_row13.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row13");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row13", true);
end_Hash.put("tAdvancedHash_row13", System.currentTimeMillis());




/**
 * [tAdvancedHash_row13 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_13 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_13";
	
	

 



/**
 * [tOracleInput_13 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row13 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row13";
	
	

 



/**
 * [tAdvancedHash_row13 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_13_SUBPROCESS_STATE", 1);
	}
	


public static class row14Struct implements routines.system.IPersistableComparableLookupRow<row14Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PA_ID;

				public BigDecimal getPA_ID () {
					return this.PA_ID;
				}

				public Boolean PA_IDIsNullable(){
				    return false;
				}
				public Boolean PA_IDIsKey(){
				    return false;
				}
				public Integer PA_IDLength(){
				    return null;
				}
				public Integer PA_IDPrecision(){
				    return null;
				}
				public String PA_IDDefault(){
				
					return "";
				
				}
				public String PA_IDComment(){
				
				    return "";
				
				}
				public String PA_IDPattern(){
				
					return "";
				
				}
				public String PA_IDOriginalDbColumnName(){
				
					return "PA_ID";
				
				}

				
			    public BigDecimal DETARTRAJE_SUPRAGINGIVAL;

				public BigDecimal getDETARTRAJE_SUPRAGINGIVAL () {
					return this.DETARTRAJE_SUPRAGINGIVAL;
				}

				public Boolean DETARTRAJE_SUPRAGINGIVALIsNullable(){
				    return true;
				}
				public Boolean DETARTRAJE_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALLength(){
				    return null;
				}
				public Integer DETARTRAJE_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String DETARTRAJE_SUPRAGINGIVALDefault(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String DETARTRAJE_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "DETARTRAJE_SUPRAGINGIVAL";
				
				}

				
			    public String ESTADO_SUPRAGINGIVAL;

				public String getESTADO_SUPRAGINGIVAL () {
					return this.ESTADO_SUPRAGINGIVAL;
				}

				public Boolean ESTADO_SUPRAGINGIVALIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SUPRAGINGIVALIsKey(){
				    return false;
				}
				public Integer ESTADO_SUPRAGINGIVALLength(){
				    return null;
				}
				public Integer ESTADO_SUPRAGINGIVALPrecision(){
				    return null;
				}
				public String ESTADO_SUPRAGINGIVALDefault(){
				
					return null;
				
				}
				public String ESTADO_SUPRAGINGIVALComment(){
				
				    return "";
				
				}
				public String ESTADO_SUPRAGINGIVALPattern(){
				
					return "";
				
				}
				public String ESTADO_SUPRAGINGIVALOriginalDbColumnName(){
				
					return "ESTADO_SUPRAGINGIVAL";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PA_ID == null) ? 0 : this.PA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row14Struct other = (row14Struct) obj;
		
						if (this.PA_ID == null) {
							if (other.PA_ID != null)
								return false;
						
						} else if (!this.PA_ID.equals(other.PA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row14Struct other) {

		other.PA_ID = this.PA_ID;
	            other.DETARTRAJE_SUPRAGINGIVAL = this.DETARTRAJE_SUPRAGINGIVAL;
	            other.ESTADO_SUPRAGINGIVAL = this.ESTADO_SUPRAGINGIVAL;
	            
	}

	public void copyKeysDataTo(row14Struct other) {

		other.PA_ID = this.PA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) ois.readObject();
					
						this.ESTADO_SUPRAGINGIVAL = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.DETARTRAJE_SUPRAGINGIVAL = (BigDecimal) objectIn.readObject();
					
						this.ESTADO_SUPRAGINGIVAL = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
						writeString(this.ESTADO_SUPRAGINGIVAL, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.DETARTRAJE_SUPRAGINGIVAL);
					
						writeString(this.ESTADO_SUPRAGINGIVAL, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PA_ID="+String.valueOf(PA_ID));
		sb.append(",DETARTRAJE_SUPRAGINGIVAL="+String.valueOf(DETARTRAJE_SUPRAGINGIVAL));
		sb.append(",ESTADO_SUPRAGINGIVAL="+ESTADO_SUPRAGINGIVAL);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row14Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PA_ID, other.PA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_14Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row14Struct row14 = new row14Struct();




	
	/**
	 * [tAdvancedHash_row14 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row14", false);
		start_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row14");
					}
				
		int tos_count_tAdvancedHash_row14 = 0;
		

			   		// connection name:row14
			   		// source node:tOracleInput_14 - inputs:(after_tOracleInput_1) outputs:(row14,row14) | target node:tAdvancedHash_row14 - inputs:(row14) outputs:()
			   		// linked node: tMap_4 - inputs:(out2,row13,row14,row15) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row14 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row14Struct> tHash_Lookup_row14 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row14Struct>getLookup(matchingModeEnum_row14);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row14", tHash_Lookup_row14);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row14 begin ] stop
 */



	
	/**
	 * [tOracleInput_14 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_14", false);
		start_Hash.put("tOracleInput_14", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_14";
	
	
		int tos_count_tOracleInput_14 = 0;
		
	


	
		    int nb_line_tOracleInput_14 = 0;
		    java.sql.Connection conn_tOracleInput_14 = null;
				conn_tOracleInput_14 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_14 = false;
				boolean isConnectionWrapped_tOracleInput_14 = !(conn_tOracleInput_14 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_14.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_14 = null;
                if (isConnectionWrapped_tOracleInput_14) {
					unwrappedOraConn_tOracleInput_14 = conn_tOracleInput_14.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_14 != null) {
                        isTimeZoneNull_tOracleInput_14 = (unwrappedOraConn_tOracleInput_14.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_14 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_14).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_14) {
					java.sql.Statement stmtGetTZ_tOracleInput_14 = conn_tOracleInput_14.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_14 = stmtGetTZ_tOracleInput_14.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_14 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_14.next()) {
						sessionTimezone_tOracleInput_14 = rsGetTZ_tOracleInput_14.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_14 && unwrappedOraConn_tOracleInput_14 != null) {
                        unwrappedOraConn_tOracleInput_14.setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_14).setSessionTimeZone(sessionTimezone_tOracleInput_14);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_14 = conn_tOracleInput_14.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_14.setFetchSize(1000);


		    String dbquery_tOracleInput_14 = "select \ndistinct \nhplan.procesosasistenciales_id as pa_id\n, 1 AS DETARTRAJE_SUPRAGINGIVAL\n, dhplan.estado AS ESTADO"
+"_SUPRAGINGIVAL\nfrom odo_hplantratamiento hplan\ninner join odo_dhplantratamiento dhplan on dhplan.hplantratamiento_id ="
+" hplan.id\ninner join hcl_procesosasistenciales pa on pa.id = hplan.procesosasistenciales_id\ninner join gen_cups gcups "
+"on gcups.id = dhplan.cups_id\nwhere \n"+context.CONDITION+"  \ngcups.codigo = '997301'\nAND dhplan.estado = 'Finalizado'";
		    

		    globalMap.put("tOracleInput_14_QUERY",dbquery_tOracleInput_14);

		    java.sql.ResultSet rs_tOracleInput_14 = null;

		    try {
		    	rs_tOracleInput_14 = stmt_tOracleInput_14.executeQuery(dbquery_tOracleInput_14);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_14 = rs_tOracleInput_14.getMetaData();
		    	int colQtyInRs_tOracleInput_14 = rsmd_tOracleInput_14.getColumnCount();

		    String tmpContent_tOracleInput_14 = null;
		    
		    
		    while (rs_tOracleInput_14.next()) {
		        nb_line_tOracleInput_14++;
		        
							if(colQtyInRs_tOracleInput_14 < 1) {
								row14.PA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(1) != null) {
						row14.PA_ID = rs_tOracleInput_14.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 2) {
								row14.DETARTRAJE_SUPRAGINGIVAL = null;
							} else {
		                          
					if(rs_tOracleInput_14.getObject(2) != null) {
						row14.DETARTRAJE_SUPRAGINGIVAL = rs_tOracleInput_14.getBigDecimal(2);
					} else {
				
						row14.DETARTRAJE_SUPRAGINGIVAL = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_14 < 3) {
								row14.ESTADO_SUPRAGINGIVAL = null;
							} else {
	                         		
        	row14.ESTADO_SUPRAGINGIVAL = routines.system.JDBCUtil.getString(rs_tOracleInput_14, 3, false);
		                    }
					




 



/**
 * [tOracleInput_14 begin ] stop
 */
	
	/**
	 * [tOracleInput_14 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 


	tos_count_tOracleInput_14++;

/**
 * [tOracleInput_14 main ] stop
 */
	
	/**
	 * [tOracleInput_14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row14"
						
						);
					}
					


			   
			   

					row14Struct row14_HashRow = new row14Struct();
		   	   	   
				
				row14_HashRow.PA_ID = row14.PA_ID;
				
				row14_HashRow.DETARTRAJE_SUPRAGINGIVAL = row14.DETARTRAJE_SUPRAGINGIVAL;
				
				row14_HashRow.ESTADO_SUPRAGINGIVAL = row14.ESTADO_SUPRAGINGIVAL;
				
			tHash_Lookup_row14.put(row14_HashRow);
			
            




 


	tos_count_tAdvancedHash_row14++;

/**
 * [tAdvancedHash_row14 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row14 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_14 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_14 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

}
}finally{
	if (rs_tOracleInput_14 != null) {
		rs_tOracleInput_14.close();
	}
	if (stmt_tOracleInput_14 != null) {
		stmt_tOracleInput_14.close();
	}
}

globalMap.put("tOracleInput_14_NB_LINE",nb_line_tOracleInput_14);
 

ok_Hash.put("tOracleInput_14", true);
end_Hash.put("tOracleInput_14", System.currentTimeMillis());




/**
 * [tOracleInput_14 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

tHash_Lookup_row14.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row14");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row14", true);
end_Hash.put("tAdvancedHash_row14", System.currentTimeMillis());




/**
 * [tAdvancedHash_row14 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_14 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_14";
	
	

 



/**
 * [tOracleInput_14 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row14 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row14";
	
	

 



/**
 * [tAdvancedHash_row14 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_14_SUBPROCESS_STATE", 1);
	}
	


public static class row15Struct implements routines.system.IPersistableComparableLookupRow<row15Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PA_ID;

				public BigDecimal getPA_ID () {
					return this.PA_ID;
				}

				public Boolean PA_IDIsNullable(){
				    return false;
				}
				public Boolean PA_IDIsKey(){
				    return false;
				}
				public Integer PA_IDLength(){
				    return null;
				}
				public Integer PA_IDPrecision(){
				    return null;
				}
				public String PA_IDDefault(){
				
					return "";
				
				}
				public String PA_IDComment(){
				
				    return "";
				
				}
				public String PA_IDPattern(){
				
					return "";
				
				}
				public String PA_IDOriginalDbColumnName(){
				
					return "PA_ID";
				
				}

				
			    public BigDecimal FLUOR;

				public BigDecimal getFLUOR () {
					return this.FLUOR;
				}

				public Boolean FLUORIsNullable(){
				    return true;
				}
				public Boolean FLUORIsKey(){
				    return false;
				}
				public Integer FLUORLength(){
				    return null;
				}
				public Integer FLUORPrecision(){
				    return null;
				}
				public String FLUORDefault(){
				
					return "";
				
				}
				public String FLUORComment(){
				
				    return "";
				
				}
				public String FLUORPattern(){
				
					return "";
				
				}
				public String FLUOROriginalDbColumnName(){
				
					return "FLUOR";
				
				}

				
			    public String ESTADO_FLUOR;

				public String getESTADO_FLUOR () {
					return this.ESTADO_FLUOR;
				}

				public Boolean ESTADO_FLUORIsNullable(){
				    return false;
				}
				public Boolean ESTADO_FLUORIsKey(){
				    return false;
				}
				public Integer ESTADO_FLUORLength(){
				    return null;
				}
				public Integer ESTADO_FLUORPrecision(){
				    return null;
				}
				public String ESTADO_FLUORDefault(){
				
					return null;
				
				}
				public String ESTADO_FLUORComment(){
				
				    return "";
				
				}
				public String ESTADO_FLUORPattern(){
				
					return "";
				
				}
				public String ESTADO_FLUOROriginalDbColumnName(){
				
					return "ESTADO_FLUOR";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PA_ID == null) ? 0 : this.PA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row15Struct other = (row15Struct) obj;
		
						if (this.PA_ID == null) {
							if (other.PA_ID != null)
								return false;
						
						} else if (!this.PA_ID.equals(other.PA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row15Struct other) {

		other.PA_ID = this.PA_ID;
	            other.FLUOR = this.FLUOR;
	            other.ESTADO_FLUOR = this.ESTADO_FLUOR;
	            
	}

	public void copyKeysDataTo(row15Struct other) {

		other.PA_ID = this.PA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.FLUOR = (BigDecimal) ois.readObject();
					
						this.ESTADO_FLUOR = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.FLUOR = (BigDecimal) objectIn.readObject();
					
						this.ESTADO_FLUOR = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.FLUOR);
					
						writeString(this.ESTADO_FLUOR, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.FLUOR);
					
						writeString(this.ESTADO_FLUOR, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PA_ID="+String.valueOf(PA_ID));
		sb.append(",FLUOR="+String.valueOf(FLUOR));
		sb.append(",ESTADO_FLUOR="+ESTADO_FLUOR);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row15Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PA_ID, other.PA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_15Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row15Struct row15 = new row15Struct();




	
	/**
	 * [tAdvancedHash_row15 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row15", false);
		start_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row15");
					}
				
		int tos_count_tAdvancedHash_row15 = 0;
		

			   		// connection name:row15
			   		// source node:tOracleInput_15 - inputs:(after_tOracleInput_1) outputs:(row15,row15) | target node:tAdvancedHash_row15 - inputs:(row15) outputs:()
			   		// linked node: tMap_4 - inputs:(out2,row13,row14,row15) outputs:(out3)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row15 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row15Struct> tHash_Lookup_row15 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row15Struct>getLookup(matchingModeEnum_row15);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row15", tHash_Lookup_row15);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row15 begin ] stop
 */



	
	/**
	 * [tOracleInput_15 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_15", false);
		start_Hash.put("tOracleInput_15", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_15";
	
	
		int tos_count_tOracleInput_15 = 0;
		
	


	
		    int nb_line_tOracleInput_15 = 0;
		    java.sql.Connection conn_tOracleInput_15 = null;
				conn_tOracleInput_15 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_15 = false;
				boolean isConnectionWrapped_tOracleInput_15 = !(conn_tOracleInput_15 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_15.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_15 = null;
                if (isConnectionWrapped_tOracleInput_15) {
					unwrappedOraConn_tOracleInput_15 = conn_tOracleInput_15.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_15 != null) {
                        isTimeZoneNull_tOracleInput_15 = (unwrappedOraConn_tOracleInput_15.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_15 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_15).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_15) {
					java.sql.Statement stmtGetTZ_tOracleInput_15 = conn_tOracleInput_15.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_15 = stmtGetTZ_tOracleInput_15.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_15 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_15.next()) {
						sessionTimezone_tOracleInput_15 = rsGetTZ_tOracleInput_15.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_15 && unwrappedOraConn_tOracleInput_15 != null) {
                        unwrappedOraConn_tOracleInput_15.setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_15).setSessionTimeZone(sessionTimezone_tOracleInput_15);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_15 = conn_tOracleInput_15.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_15.setFetchSize(1000);


		    String dbquery_tOracleInput_15 = "select \ndistinct \nhplan.procesosasistenciales_id as pa_id\n, 1 AS FLUOR \n, dhplan.estado AS ESTADO_FLUOR\nfrom odo_h"
+"plantratamiento hplan\ninner join odo_dhplantratamiento dhplan on dhplan.hplantratamiento_id = hplan.id\ninner join hcl_"
+"procesosasistenciales pa on pa.id = hplan.procesosasistenciales_id\ninner join gen_cups gcups on gcups.id = dhplan.cups_"
+"id\nwhere \n"+context.CONDITION+"  \n (gcups.codigo = '997106' OR gcups.codigo = '997104' OR gcups.codigo = '997103')\nAND dhplan.estado = 'Finalizado'";
		    

		    globalMap.put("tOracleInput_15_QUERY",dbquery_tOracleInput_15);

		    java.sql.ResultSet rs_tOracleInput_15 = null;

		    try {
		    	rs_tOracleInput_15 = stmt_tOracleInput_15.executeQuery(dbquery_tOracleInput_15);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_15 = rs_tOracleInput_15.getMetaData();
		    	int colQtyInRs_tOracleInput_15 = rsmd_tOracleInput_15.getColumnCount();

		    String tmpContent_tOracleInput_15 = null;
		    
		    
		    while (rs_tOracleInput_15.next()) {
		        nb_line_tOracleInput_15++;
		        
							if(colQtyInRs_tOracleInput_15 < 1) {
								row15.PA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(1) != null) {
						row15.PA_ID = rs_tOracleInput_15.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 2) {
								row15.FLUOR = null;
							} else {
		                          
					if(rs_tOracleInput_15.getObject(2) != null) {
						row15.FLUOR = rs_tOracleInput_15.getBigDecimal(2);
					} else {
				
						row15.FLUOR = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_15 < 3) {
								row15.ESTADO_FLUOR = null;
							} else {
	                         		
        	row15.ESTADO_FLUOR = routines.system.JDBCUtil.getString(rs_tOracleInput_15, 3, false);
		                    }
					




 



/**
 * [tOracleInput_15 begin ] stop
 */
	
	/**
	 * [tOracleInput_15 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 


	tos_count_tOracleInput_15++;

/**
 * [tOracleInput_15 main ] stop
 */
	
	/**
	 * [tOracleInput_15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row15"
						
						);
					}
					


			   
			   

					row15Struct row15_HashRow = new row15Struct();
		   	   	   
				
				row15_HashRow.PA_ID = row15.PA_ID;
				
				row15_HashRow.FLUOR = row15.FLUOR;
				
				row15_HashRow.ESTADO_FLUOR = row15.ESTADO_FLUOR;
				
			tHash_Lookup_row15.put(row15_HashRow);
			
            




 


	tos_count_tAdvancedHash_row15++;

/**
 * [tAdvancedHash_row15 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row15 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_15 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_15 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

}
}finally{
	if (rs_tOracleInput_15 != null) {
		rs_tOracleInput_15.close();
	}
	if (stmt_tOracleInput_15 != null) {
		stmt_tOracleInput_15.close();
	}
}

globalMap.put("tOracleInput_15_NB_LINE",nb_line_tOracleInput_15);
 

ok_Hash.put("tOracleInput_15", true);
end_Hash.put("tOracleInput_15", System.currentTimeMillis());




/**
 * [tOracleInput_15 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

tHash_Lookup_row15.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row15");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row15", true);
end_Hash.put("tAdvancedHash_row15", System.currentTimeMillis());




/**
 * [tAdvancedHash_row15 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_15 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_15";
	
	

 



/**
 * [tOracleInput_15 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row15 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row15";
	
	

 



/**
 * [tAdvancedHash_row15 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_15_SUBPROCESS_STATE", 1);
	}
	


public static class row16Struct implements routines.system.IPersistableComparableLookupRow<row16Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PA_ID;

				public BigDecimal getPA_ID () {
					return this.PA_ID;
				}

				public Boolean PA_IDIsNullable(){
				    return false;
				}
				public Boolean PA_IDIsKey(){
				    return false;
				}
				public Integer PA_IDLength(){
				    return null;
				}
				public Integer PA_IDPrecision(){
				    return null;
				}
				public String PA_IDDefault(){
				
					return "";
				
				}
				public String PA_IDComment(){
				
				    return "";
				
				}
				public String PA_IDPattern(){
				
					return "";
				
				}
				public String PA_IDOriginalDbColumnName(){
				
					return "PA_ID";
				
				}

				
			    public BigDecimal RESINA;

				public BigDecimal getRESINA () {
					return this.RESINA;
				}

				public Boolean RESINAIsNullable(){
				    return true;
				}
				public Boolean RESINAIsKey(){
				    return false;
				}
				public Integer RESINALength(){
				    return null;
				}
				public Integer RESINAPrecision(){
				    return null;
				}
				public String RESINADefault(){
				
					return "";
				
				}
				public String RESINAComment(){
				
				    return "";
				
				}
				public String RESINAPattern(){
				
					return "";
				
				}
				public String RESINAOriginalDbColumnName(){
				
					return "RESINA";
				
				}

				
			    public String ESTADO_RESINA;

				public String getESTADO_RESINA () {
					return this.ESTADO_RESINA;
				}

				public Boolean ESTADO_RESINAIsNullable(){
				    return false;
				}
				public Boolean ESTADO_RESINAIsKey(){
				    return false;
				}
				public Integer ESTADO_RESINALength(){
				    return null;
				}
				public Integer ESTADO_RESINAPrecision(){
				    return null;
				}
				public String ESTADO_RESINADefault(){
				
					return null;
				
				}
				public String ESTADO_RESINAComment(){
				
				    return "";
				
				}
				public String ESTADO_RESINAPattern(){
				
					return "";
				
				}
				public String ESTADO_RESINAOriginalDbColumnName(){
				
					return "ESTADO_RESINA";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PA_ID == null) ? 0 : this.PA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row16Struct other = (row16Struct) obj;
		
						if (this.PA_ID == null) {
							if (other.PA_ID != null)
								return false;
						
						} else if (!this.PA_ID.equals(other.PA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row16Struct other) {

		other.PA_ID = this.PA_ID;
	            other.RESINA = this.RESINA;
	            other.ESTADO_RESINA = this.ESTADO_RESINA;
	            
	}

	public void copyKeysDataTo(row16Struct other) {

		other.PA_ID = this.PA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.RESINA = (BigDecimal) ois.readObject();
					
						this.ESTADO_RESINA = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.RESINA = (BigDecimal) objectIn.readObject();
					
						this.ESTADO_RESINA = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.RESINA);
					
						writeString(this.ESTADO_RESINA, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.RESINA);
					
						writeString(this.ESTADO_RESINA, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PA_ID="+String.valueOf(PA_ID));
		sb.append(",RESINA="+String.valueOf(RESINA));
		sb.append(",ESTADO_RESINA="+ESTADO_RESINA);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row16Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PA_ID, other.PA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_16Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row16Struct row16 = new row16Struct();




	
	/**
	 * [tAdvancedHash_row16 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row16", false);
		start_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row16");
					}
				
		int tos_count_tAdvancedHash_row16 = 0;
		

			   		// connection name:row16
			   		// source node:tOracleInput_16 - inputs:(after_tOracleInput_1) outputs:(row16,row16) | target node:tAdvancedHash_row16 - inputs:(row16) outputs:()
			   		// linked node: tMap_5 - inputs:(out3,row16,row17,row18,row23) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row16 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row16Struct> tHash_Lookup_row16 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row16Struct>getLookup(matchingModeEnum_row16);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row16", tHash_Lookup_row16);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row16 begin ] stop
 */



	
	/**
	 * [tOracleInput_16 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_16", false);
		start_Hash.put("tOracleInput_16", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_16";
	
	
		int tos_count_tOracleInput_16 = 0;
		
	


	
		    int nb_line_tOracleInput_16 = 0;
		    java.sql.Connection conn_tOracleInput_16 = null;
				conn_tOracleInput_16 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_16 = false;
				boolean isConnectionWrapped_tOracleInput_16 = !(conn_tOracleInput_16 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_16.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_16 = null;
                if (isConnectionWrapped_tOracleInput_16) {
					unwrappedOraConn_tOracleInput_16 = conn_tOracleInput_16.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_16 != null) {
                        isTimeZoneNull_tOracleInput_16 = (unwrappedOraConn_tOracleInput_16.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_16 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_16).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_16) {
					java.sql.Statement stmtGetTZ_tOracleInput_16 = conn_tOracleInput_16.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_16 = stmtGetTZ_tOracleInput_16.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_16 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_16.next()) {
						sessionTimezone_tOracleInput_16 = rsGetTZ_tOracleInput_16.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_16 && unwrappedOraConn_tOracleInput_16 != null) {
                        unwrappedOraConn_tOracleInput_16.setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_16).setSessionTimeZone(sessionTimezone_tOracleInput_16);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_16 = conn_tOracleInput_16.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_16.setFetchSize(1000);


		    String dbquery_tOracleInput_16 = "select \ndistinct \nhplan.procesosasistenciales_id as pa_id\n, 1 AS RESINA \n, dhplan.estado AS ESTADO_RESINA\nfrom odo"
+"_hplantratamiento hplan\ninner join odo_dhplantratamiento dhplan on dhplan.hplantratamiento_id = hplan.id\ninner join hc"
+"l_procesosasistenciales pa on pa.id = hplan.procesosasistenciales_id\ninner join gen_cups gcups on gcups.id = dhplan.cup"
+"s_id\nwhere \n"+context.CONDITION+"  \n gcups.codigo = '997105'\nAND dhplan.estado = 'Finalizado' ";
		    

		    globalMap.put("tOracleInput_16_QUERY",dbquery_tOracleInput_16);

		    java.sql.ResultSet rs_tOracleInput_16 = null;

		    try {
		    	rs_tOracleInput_16 = stmt_tOracleInput_16.executeQuery(dbquery_tOracleInput_16);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_16 = rs_tOracleInput_16.getMetaData();
		    	int colQtyInRs_tOracleInput_16 = rsmd_tOracleInput_16.getColumnCount();

		    String tmpContent_tOracleInput_16 = null;
		    
		    
		    while (rs_tOracleInput_16.next()) {
		        nb_line_tOracleInput_16++;
		        
							if(colQtyInRs_tOracleInput_16 < 1) {
								row16.PA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(1) != null) {
						row16.PA_ID = rs_tOracleInput_16.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 2) {
								row16.RESINA = null;
							} else {
		                          
					if(rs_tOracleInput_16.getObject(2) != null) {
						row16.RESINA = rs_tOracleInput_16.getBigDecimal(2);
					} else {
				
						row16.RESINA = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_16 < 3) {
								row16.ESTADO_RESINA = null;
							} else {
	                         		
        	row16.ESTADO_RESINA = routines.system.JDBCUtil.getString(rs_tOracleInput_16, 3, false);
		                    }
					




 



/**
 * [tOracleInput_16 begin ] stop
 */
	
	/**
	 * [tOracleInput_16 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 


	tos_count_tOracleInput_16++;

/**
 * [tOracleInput_16 main ] stop
 */
	
	/**
	 * [tOracleInput_16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row16"
						
						);
					}
					


			   
			   

					row16Struct row16_HashRow = new row16Struct();
		   	   	   
				
				row16_HashRow.PA_ID = row16.PA_ID;
				
				row16_HashRow.RESINA = row16.RESINA;
				
				row16_HashRow.ESTADO_RESINA = row16.ESTADO_RESINA;
				
			tHash_Lookup_row16.put(row16_HashRow);
			
            




 


	tos_count_tAdvancedHash_row16++;

/**
 * [tAdvancedHash_row16 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row16 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_16 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_16 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

}
}finally{
	if (rs_tOracleInput_16 != null) {
		rs_tOracleInput_16.close();
	}
	if (stmt_tOracleInput_16 != null) {
		stmt_tOracleInput_16.close();
	}
}

globalMap.put("tOracleInput_16_NB_LINE",nb_line_tOracleInput_16);
 

ok_Hash.put("tOracleInput_16", true);
end_Hash.put("tOracleInput_16", System.currentTimeMillis());




/**
 * [tOracleInput_16 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

tHash_Lookup_row16.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row16");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row16", true);
end_Hash.put("tAdvancedHash_row16", System.currentTimeMillis());




/**
 * [tAdvancedHash_row16 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_16 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_16";
	
	

 



/**
 * [tOracleInput_16 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row16 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row16";
	
	

 



/**
 * [tAdvancedHash_row16 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_16_SUBPROCESS_STATE", 1);
	}
	


public static class row17Struct implements routines.system.IPersistableComparableLookupRow<row17Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PA_ID;

				public BigDecimal getPA_ID () {
					return this.PA_ID;
				}

				public Boolean PA_IDIsNullable(){
				    return false;
				}
				public Boolean PA_IDIsKey(){
				    return false;
				}
				public Integer PA_IDLength(){
				    return null;
				}
				public Integer PA_IDPrecision(){
				    return null;
				}
				public String PA_IDDefault(){
				
					return "";
				
				}
				public String PA_IDComment(){
				
				    return "";
				
				}
				public String PA_IDPattern(){
				
					return "";
				
				}
				public String PA_IDOriginalDbColumnName(){
				
					return "PA_ID";
				
				}

				
			    public BigDecimal PROFILAXIS;

				public BigDecimal getPROFILAXIS () {
					return this.PROFILAXIS;
				}

				public Boolean PROFILAXISIsNullable(){
				    return true;
				}
				public Boolean PROFILAXISIsKey(){
				    return false;
				}
				public Integer PROFILAXISLength(){
				    return null;
				}
				public Integer PROFILAXISPrecision(){
				    return null;
				}
				public String PROFILAXISDefault(){
				
					return "";
				
				}
				public String PROFILAXISComment(){
				
				    return "";
				
				}
				public String PROFILAXISPattern(){
				
					return "";
				
				}
				public String PROFILAXISOriginalDbColumnName(){
				
					return "PROFILAXIS";
				
				}

				
			    public String ESTADO_PROFILAXIS;

				public String getESTADO_PROFILAXIS () {
					return this.ESTADO_PROFILAXIS;
				}

				public Boolean ESTADO_PROFILAXISIsNullable(){
				    return false;
				}
				public Boolean ESTADO_PROFILAXISIsKey(){
				    return false;
				}
				public Integer ESTADO_PROFILAXISLength(){
				    return null;
				}
				public Integer ESTADO_PROFILAXISPrecision(){
				    return null;
				}
				public String ESTADO_PROFILAXISDefault(){
				
					return null;
				
				}
				public String ESTADO_PROFILAXISComment(){
				
				    return "";
				
				}
				public String ESTADO_PROFILAXISPattern(){
				
					return "";
				
				}
				public String ESTADO_PROFILAXISOriginalDbColumnName(){
				
					return "ESTADO_PROFILAXIS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PA_ID == null) ? 0 : this.PA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row17Struct other = (row17Struct) obj;
		
						if (this.PA_ID == null) {
							if (other.PA_ID != null)
								return false;
						
						} else if (!this.PA_ID.equals(other.PA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row17Struct other) {

		other.PA_ID = this.PA_ID;
	            other.PROFILAXIS = this.PROFILAXIS;
	            other.ESTADO_PROFILAXIS = this.ESTADO_PROFILAXIS;
	            
	}

	public void copyKeysDataTo(row17Struct other) {

		other.PA_ID = this.PA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.PROFILAXIS = (BigDecimal) ois.readObject();
					
						this.ESTADO_PROFILAXIS = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.PROFILAXIS = (BigDecimal) objectIn.readObject();
					
						this.ESTADO_PROFILAXIS = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.PROFILAXIS);
					
						writeString(this.ESTADO_PROFILAXIS, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.PROFILAXIS);
					
						writeString(this.ESTADO_PROFILAXIS, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PA_ID="+String.valueOf(PA_ID));
		sb.append(",PROFILAXIS="+String.valueOf(PROFILAXIS));
		sb.append(",ESTADO_PROFILAXIS="+ESTADO_PROFILAXIS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row17Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PA_ID, other.PA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_17Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row17Struct row17 = new row17Struct();




	
	/**
	 * [tAdvancedHash_row17 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row17", false);
		start_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row17");
					}
				
		int tos_count_tAdvancedHash_row17 = 0;
		

			   		// connection name:row17
			   		// source node:tOracleInput_17 - inputs:(after_tOracleInput_1) outputs:(row17,row17) | target node:tAdvancedHash_row17 - inputs:(row17) outputs:()
			   		// linked node: tMap_5 - inputs:(out3,row16,row17,row18,row23) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row17 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row17Struct> tHash_Lookup_row17 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row17Struct>getLookup(matchingModeEnum_row17);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row17", tHash_Lookup_row17);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row17 begin ] stop
 */



	
	/**
	 * [tOracleInput_17 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_17", false);
		start_Hash.put("tOracleInput_17", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_17";
	
	
		int tos_count_tOracleInput_17 = 0;
		
	


	
		    int nb_line_tOracleInput_17 = 0;
		    java.sql.Connection conn_tOracleInput_17 = null;
				conn_tOracleInput_17 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_17 = false;
				boolean isConnectionWrapped_tOracleInput_17 = !(conn_tOracleInput_17 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_17.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_17 = null;
                if (isConnectionWrapped_tOracleInput_17) {
					unwrappedOraConn_tOracleInput_17 = conn_tOracleInput_17.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_17 != null) {
                        isTimeZoneNull_tOracleInput_17 = (unwrappedOraConn_tOracleInput_17.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_17 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_17).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_17) {
					java.sql.Statement stmtGetTZ_tOracleInput_17 = conn_tOracleInput_17.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_17 = stmtGetTZ_tOracleInput_17.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_17 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_17.next()) {
						sessionTimezone_tOracleInput_17 = rsGetTZ_tOracleInput_17.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_17 && unwrappedOraConn_tOracleInput_17 != null) {
                        unwrappedOraConn_tOracleInput_17.setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_17).setSessionTimeZone(sessionTimezone_tOracleInput_17);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_17 = conn_tOracleInput_17.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_17.setFetchSize(1000);


		    String dbquery_tOracleInput_17 = "SELECT \ndistinct \nODP.PROCESOSASISTENCIALES_ID as pa_id\n,1 AS PLACA_DENTAL\n,'Finalizado' AS ESTADO_PLACA_DENTAL\nFR"
+"OM ODO_PLACABACTERIANA ODP \nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = ODP.PROCESOSASISTENCIALES_ID AND PA.ESTR"
+"EGISTRO_ID = 1  \nWHERE \n"+context.CONDITION+"  \nODP.ESTREGISTRO_ID = 1";
		    

		    globalMap.put("tOracleInput_17_QUERY",dbquery_tOracleInput_17);

		    java.sql.ResultSet rs_tOracleInput_17 = null;

		    try {
		    	rs_tOracleInput_17 = stmt_tOracleInput_17.executeQuery(dbquery_tOracleInput_17);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_17 = rs_tOracleInput_17.getMetaData();
		    	int colQtyInRs_tOracleInput_17 = rsmd_tOracleInput_17.getColumnCount();

		    String tmpContent_tOracleInput_17 = null;
		    
		    
		    while (rs_tOracleInput_17.next()) {
		        nb_line_tOracleInput_17++;
		        
							if(colQtyInRs_tOracleInput_17 < 1) {
								row17.PA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(1) != null) {
						row17.PA_ID = rs_tOracleInput_17.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 2) {
								row17.PROFILAXIS = null;
							} else {
		                          
					if(rs_tOracleInput_17.getObject(2) != null) {
						row17.PROFILAXIS = rs_tOracleInput_17.getBigDecimal(2);
					} else {
				
						row17.PROFILAXIS = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_17 < 3) {
								row17.ESTADO_PROFILAXIS = null;
							} else {
	                         		
        	row17.ESTADO_PROFILAXIS = routines.system.JDBCUtil.getString(rs_tOracleInput_17, 3, false);
		                    }
					




 



/**
 * [tOracleInput_17 begin ] stop
 */
	
	/**
	 * [tOracleInput_17 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 


	tos_count_tOracleInput_17++;

/**
 * [tOracleInput_17 main ] stop
 */
	
	/**
	 * [tOracleInput_17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row17"
						
						);
					}
					


			   
			   

					row17Struct row17_HashRow = new row17Struct();
		   	   	   
				
				row17_HashRow.PA_ID = row17.PA_ID;
				
				row17_HashRow.PROFILAXIS = row17.PROFILAXIS;
				
				row17_HashRow.ESTADO_PROFILAXIS = row17.ESTADO_PROFILAXIS;
				
			tHash_Lookup_row17.put(row17_HashRow);
			
            




 


	tos_count_tAdvancedHash_row17++;

/**
 * [tAdvancedHash_row17 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row17 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_17 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_17 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

}
}finally{
	if (rs_tOracleInput_17 != null) {
		rs_tOracleInput_17.close();
	}
	if (stmt_tOracleInput_17 != null) {
		stmt_tOracleInput_17.close();
	}
}

globalMap.put("tOracleInput_17_NB_LINE",nb_line_tOracleInput_17);
 

ok_Hash.put("tOracleInput_17", true);
end_Hash.put("tOracleInput_17", System.currentTimeMillis());




/**
 * [tOracleInput_17 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

tHash_Lookup_row17.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row17");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row17", true);
end_Hash.put("tAdvancedHash_row17", System.currentTimeMillis());




/**
 * [tAdvancedHash_row17 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_17 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_17";
	
	

 



/**
 * [tOracleInput_17 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row17 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row17";
	
	

 



/**
 * [tAdvancedHash_row17 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_17_SUBPROCESS_STATE", 1);
	}
	


public static class row18Struct implements routines.system.IPersistableComparableLookupRow<row18Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PA_ID;

				public BigDecimal getPA_ID () {
					return this.PA_ID;
				}

				public Boolean PA_IDIsNullable(){
				    return false;
				}
				public Boolean PA_IDIsKey(){
				    return false;
				}
				public Integer PA_IDLength(){
				    return null;
				}
				public Integer PA_IDPrecision(){
				    return null;
				}
				public String PA_IDDefault(){
				
					return "";
				
				}
				public String PA_IDComment(){
				
				    return "";
				
				}
				public String PA_IDPattern(){
				
					return "";
				
				}
				public String PA_IDOriginalDbColumnName(){
				
					return "PA_ID";
				
				}

				
			    public BigDecimal SELLANTES;

				public BigDecimal getSELLANTES () {
					return this.SELLANTES;
				}

				public Boolean SELLANTESIsNullable(){
				    return true;
				}
				public Boolean SELLANTESIsKey(){
				    return false;
				}
				public Integer SELLANTESLength(){
				    return null;
				}
				public Integer SELLANTESPrecision(){
				    return null;
				}
				public String SELLANTESDefault(){
				
					return "";
				
				}
				public String SELLANTESComment(){
				
				    return "";
				
				}
				public String SELLANTESPattern(){
				
					return "";
				
				}
				public String SELLANTESOriginalDbColumnName(){
				
					return "SELLANTES";
				
				}

				
			    public String ESTADO_SELLANTES;

				public String getESTADO_SELLANTES () {
					return this.ESTADO_SELLANTES;
				}

				public Boolean ESTADO_SELLANTESIsNullable(){
				    return false;
				}
				public Boolean ESTADO_SELLANTESIsKey(){
				    return false;
				}
				public Integer ESTADO_SELLANTESLength(){
				    return null;
				}
				public Integer ESTADO_SELLANTESPrecision(){
				    return null;
				}
				public String ESTADO_SELLANTESDefault(){
				
					return null;
				
				}
				public String ESTADO_SELLANTESComment(){
				
				    return "";
				
				}
				public String ESTADO_SELLANTESPattern(){
				
					return "";
				
				}
				public String ESTADO_SELLANTESOriginalDbColumnName(){
				
					return "ESTADO_SELLANTES";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PA_ID == null) ? 0 : this.PA_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row18Struct other = (row18Struct) obj;
		
						if (this.PA_ID == null) {
							if (other.PA_ID != null)
								return false;
						
						} else if (!this.PA_ID.equals(other.PA_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row18Struct other) {

		other.PA_ID = this.PA_ID;
	            other.SELLANTES = this.SELLANTES;
	            other.ESTADO_SELLANTES = this.ESTADO_SELLANTES;
	            
	}

	public void copyKeysDataTo(row18Struct other) {

		other.PA_ID = this.PA_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PA_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PA_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
       			    	this.SELLANTES = (BigDecimal) ois.readObject();
					
						this.ESTADO_SELLANTES = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
       			    	this.SELLANTES = (BigDecimal) objectIn.readObject();
					
						this.ESTADO_SELLANTES = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
       			    	oos.writeObject(this.SELLANTES);
					
						writeString(this.ESTADO_SELLANTES, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.SELLANTES);
					
						writeString(this.ESTADO_SELLANTES, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PA_ID="+String.valueOf(PA_ID));
		sb.append(",SELLANTES="+String.valueOf(SELLANTES));
		sb.append(",ESTADO_SELLANTES="+ESTADO_SELLANTES);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row18Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PA_ID, other.PA_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_19Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row18Struct row18 = new row18Struct();




	
	/**
	 * [tAdvancedHash_row18 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row18", false);
		start_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row18");
					}
				
		int tos_count_tAdvancedHash_row18 = 0;
		

			   		// connection name:row18
			   		// source node:tOracleInput_19 - inputs:(after_tOracleInput_1) outputs:(row18,row18) | target node:tAdvancedHash_row18 - inputs:(row18) outputs:()
			   		// linked node: tMap_5 - inputs:(out3,row16,row17,row18,row23) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row18 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row18Struct> tHash_Lookup_row18 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row18Struct>getLookup(matchingModeEnum_row18);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row18", tHash_Lookup_row18);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row18 begin ] stop
 */



	
	/**
	 * [tOracleInput_19 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_19", false);
		start_Hash.put("tOracleInput_19", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_19";
	
	
		int tos_count_tOracleInput_19 = 0;
		
	


	
		    int nb_line_tOracleInput_19 = 0;
		    java.sql.Connection conn_tOracleInput_19 = null;
				conn_tOracleInput_19 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_19 = false;
				boolean isConnectionWrapped_tOracleInput_19 = !(conn_tOracleInput_19 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_19.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_19 = null;
                if (isConnectionWrapped_tOracleInput_19) {
					unwrappedOraConn_tOracleInput_19 = conn_tOracleInput_19.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_19 != null) {
                        isTimeZoneNull_tOracleInput_19 = (unwrappedOraConn_tOracleInput_19.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_19 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_19).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_19) {
					java.sql.Statement stmtGetTZ_tOracleInput_19 = conn_tOracleInput_19.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_19 = stmtGetTZ_tOracleInput_19.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_19 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_19.next()) {
						sessionTimezone_tOracleInput_19 = rsGetTZ_tOracleInput_19.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_19 && unwrappedOraConn_tOracleInput_19 != null) {
                        unwrappedOraConn_tOracleInput_19.setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_19).setSessionTimeZone(sessionTimezone_tOracleInput_19);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_19 = conn_tOracleInput_19.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_19.setFetchSize(1000);


		    String dbquery_tOracleInput_19 = "select \ndistinct \nhplan.procesosasistenciales_id as pa_id\n, 1 AS SELLANTES\n, dhplan.estado AS ESTADO_SELLANTES\nfro"
+"m odo_hplantratamiento hplan\ninner join odo_dhplantratamiento dhplan on dhplan.hplantratamiento_id = hplan.id\ninner jo"
+"in hcl_procesosasistenciales pa on pa.id = hplan.procesosasistenciales_id\ninner join gen_cups gcups on gcups.id = dhpla"
+"n.cups_id\nwhere \n"+context.CONDITION+"  \n (gcups.codigo = '997102' OR gcups.codigo = '997101')\nAND dhplan.estado = 'Finalizado'";
		    

		    globalMap.put("tOracleInput_19_QUERY",dbquery_tOracleInput_19);

		    java.sql.ResultSet rs_tOracleInput_19 = null;

		    try {
		    	rs_tOracleInput_19 = stmt_tOracleInput_19.executeQuery(dbquery_tOracleInput_19);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_19 = rs_tOracleInput_19.getMetaData();
		    	int colQtyInRs_tOracleInput_19 = rsmd_tOracleInput_19.getColumnCount();

		    String tmpContent_tOracleInput_19 = null;
		    
		    
		    while (rs_tOracleInput_19.next()) {
		        nb_line_tOracleInput_19++;
		        
							if(colQtyInRs_tOracleInput_19 < 1) {
								row18.PA_ID = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(1) != null) {
						row18.PA_ID = rs_tOracleInput_19.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 2) {
								row18.SELLANTES = null;
							} else {
		                          
					if(rs_tOracleInput_19.getObject(2) != null) {
						row18.SELLANTES = rs_tOracleInput_19.getBigDecimal(2);
					} else {
				
						row18.SELLANTES = null;
					}
		                    }
							if(colQtyInRs_tOracleInput_19 < 3) {
								row18.ESTADO_SELLANTES = null;
							} else {
	                         		
        	row18.ESTADO_SELLANTES = routines.system.JDBCUtil.getString(rs_tOracleInput_19, 3, false);
		                    }
					




 



/**
 * [tOracleInput_19 begin ] stop
 */
	
	/**
	 * [tOracleInput_19 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 


	tos_count_tOracleInput_19++;

/**
 * [tOracleInput_19 main ] stop
 */
	
	/**
	 * [tOracleInput_19 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row18"
						
						);
					}
					


			   
			   

					row18Struct row18_HashRow = new row18Struct();
		   	   	   
				
				row18_HashRow.PA_ID = row18.PA_ID;
				
				row18_HashRow.SELLANTES = row18.SELLANTES;
				
				row18_HashRow.ESTADO_SELLANTES = row18.ESTADO_SELLANTES;
				
			tHash_Lookup_row18.put(row18_HashRow);
			
            




 


	tos_count_tAdvancedHash_row18++;

/**
 * [tAdvancedHash_row18 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row18 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_19 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_19 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

}
}finally{
	if (rs_tOracleInput_19 != null) {
		rs_tOracleInput_19.close();
	}
	if (stmt_tOracleInput_19 != null) {
		stmt_tOracleInput_19.close();
	}
}

globalMap.put("tOracleInput_19_NB_LINE",nb_line_tOracleInput_19);
 

ok_Hash.put("tOracleInput_19", true);
end_Hash.put("tOracleInput_19", System.currentTimeMillis());




/**
 * [tOracleInput_19 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

tHash_Lookup_row18.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row18");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row18", true);
end_Hash.put("tAdvancedHash_row18", System.currentTimeMillis());




/**
 * [tAdvancedHash_row18 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_19 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_19";
	
	

 



/**
 * [tOracleInput_19 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row18 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row18";
	
	

 



/**
 * [tAdvancedHash_row18 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_19_SUBPROCESS_STATE", 1);
	}
	


public static class row20Struct implements routines.system.IPersistableComparableLookupRow<row20Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return null;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FECHA;

				public java.util.Date getFECHA () {
					return this.FECHA;
				}

				public Boolean FECHAIsNullable(){
				    return true;
				}
				public Boolean FECHAIsKey(){
				    return false;
				}
				public Integer FECHALength(){
				    return null;
				}
				public Integer FECHAPrecision(){
				    return null;
				}
				public String FECHADefault(){
				
					return null;
				
				}
				public String FECHAComment(){
				
				    return "";
				
				}
				public String FECHAPattern(){
				
					return "";
				
				}
				public String FECHAOriginalDbColumnName(){
				
					return "FECHA";
				
				}

				
			    public BigDecimal GESTANTE;

				public BigDecimal getGESTANTE () {
					return this.GESTANTE;
				}

				public Boolean GESTANTEIsNullable(){
				    return true;
				}
				public Boolean GESTANTEIsKey(){
				    return false;
				}
				public Integer GESTANTELength(){
				    return null;
				}
				public Integer GESTANTEPrecision(){
				    return null;
				}
				public String GESTANTEDefault(){
				
					return "";
				
				}
				public String GESTANTEComment(){
				
				    return "";
				
				}
				public String GESTANTEPattern(){
				
					return "";
				
				}
				public String GESTANTEOriginalDbColumnName(){
				
					return "GESTANTE";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PERSONAS_ID == null) ? 0 : this.PERSONAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row20Struct other = (row20Struct) obj;
		
						if (this.PERSONAS_ID == null) {
							if (other.PERSONAS_ID != null)
								return false;
						
						} else if (!this.PERSONAS_ID.equals(other.PERSONAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row20Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            other.FECHA = this.FECHA;
	            other.GESTANTE = this.GESTANTE;
	            
	}

	public void copyKeysDataTo(row20Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FECHA = readDate(dis,ois);
					
       			    	this.GESTANTE = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FECHA = readDate(dis,objectIn);
					
       			    	this.GESTANTE = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.FECHA, dos, oos);
					
       			    	oos.writeObject(this.GESTANTE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeDate(this.FECHA, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.GESTANTE);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FECHA="+String.valueOf(FECHA));
		sb.append(",GESTANTE="+String.valueOf(GESTANTE));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row20Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONAS_ID, other.PERSONAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_9Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row20Struct row20 = new row20Struct();




	
	/**
	 * [tAdvancedHash_row20 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row20", false);
		start_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row20";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row20");
					}
				
		int tos_count_tAdvancedHash_row20 = 0;
		

			   		// connection name:row20
			   		// source node:tOracleInput_9 - inputs:(after_tOracleInput_1) outputs:(row20,row20) | target node:tAdvancedHash_row20 - inputs:(row20) outputs:()
			   		// linked node: tMap_6 - inputs:(out4,row20,row21,row22) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row20 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row20Struct> tHash_Lookup_row20 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row20Struct>getLookup(matchingModeEnum_row20);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row20", tHash_Lookup_row20);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row20 begin ] stop
 */



	
	/**
	 * [tOracleInput_9 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_9", false);
		start_Hash.put("tOracleInput_9", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_9";
	
	
		int tos_count_tOracleInput_9 = 0;
		
	


	
		    int nb_line_tOracleInput_9 = 0;
		    java.sql.Connection conn_tOracleInput_9 = null;
				conn_tOracleInput_9 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_9 = false;
				boolean isConnectionWrapped_tOracleInput_9 = !(conn_tOracleInput_9 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_9.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_9 = null;
                if (isConnectionWrapped_tOracleInput_9) {
					unwrappedOraConn_tOracleInput_9 = conn_tOracleInput_9.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_9 != null) {
                        isTimeZoneNull_tOracleInput_9 = (unwrappedOraConn_tOracleInput_9.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_9 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_9).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_9) {
					java.sql.Statement stmtGetTZ_tOracleInput_9 = conn_tOracleInput_9.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_9 = stmtGetTZ_tOracleInput_9.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_9 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_9.next()) {
						sessionTimezone_tOracleInput_9 = rsGetTZ_tOracleInput_9.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_9 && unwrappedOraConn_tOracleInput_9 != null) {
                        unwrappedOraConn_tOracleInput_9.setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_9).setSessionTimeZone(sessionTimezone_tOracleInput_9);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_9 = conn_tOracleInput_9.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_9.setFetchSize(1000);


		    String dbquery_tOracleInput_9 = "SELECT \nDISTINCT\nPM.PERSONAS_ID\n,PM.FECHA\n,1 GESTANTE\nFROM PMP_MATERNAS PM\nLEFT JOIN PMP_DESENLACE PDE ON PDE.MAT"
+"ERNAS_ID = PM.ID AND PDE.ESTREGISTRO_ID = 1\nLEFT JOIN HCL_PROCESOSASISTENCIALES PA ON PA.PERSONAS_ID = PM.PERSONAS_ID A"
+"ND PA.ESTREGISTRO_ID = 1\nLEFT JOIN HCL_EVENTOBSTETRICO EOBS ON EOBS.PROCESOSASISTENCIALES_ID = PA.ID\nWHERE PDE.ID IS N"
+"ULL AND EOBS.ID IS NULL";
		    

		    globalMap.put("tOracleInput_9_QUERY",dbquery_tOracleInput_9);

		    java.sql.ResultSet rs_tOracleInput_9 = null;

		    try {
		    	rs_tOracleInput_9 = stmt_tOracleInput_9.executeQuery(dbquery_tOracleInput_9);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_9 = rs_tOracleInput_9.getMetaData();
		    	int colQtyInRs_tOracleInput_9 = rsmd_tOracleInput_9.getColumnCount();

		    String tmpContent_tOracleInput_9 = null;
		    
		    
		    while (rs_tOracleInput_9.next()) {
		        nb_line_tOracleInput_9++;
		        
							if(colQtyInRs_tOracleInput_9 < 1) {
								row20.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(1) != null) {
						row20.PERSONAS_ID = rs_tOracleInput_9.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_9 < 2) {
								row20.FECHA = null;
							} else {
										
			row20.FECHA = routines.system.JDBCUtil.getDate(rs_tOracleInput_9, 2);
		                    }
							if(colQtyInRs_tOracleInput_9 < 3) {
								row20.GESTANTE = null;
							} else {
		                          
					if(rs_tOracleInput_9.getObject(3) != null) {
						row20.GESTANTE = rs_tOracleInput_9.getBigDecimal(3);
					} else {
				
						row20.GESTANTE = null;
					}
		                    }
					




 



/**
 * [tOracleInput_9 begin ] stop
 */
	
	/**
	 * [tOracleInput_9 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 


	tos_count_tOracleInput_9++;

/**
 * [tOracleInput_9 main ] stop
 */
	
	/**
	 * [tOracleInput_9 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row20"
						
						);
					}
					


			   
			   

					row20Struct row20_HashRow = new row20Struct();
		   	   	   
				
				row20_HashRow.PERSONAS_ID = row20.PERSONAS_ID;
				
				row20_HashRow.FECHA = row20.FECHA;
				
				row20_HashRow.GESTANTE = row20.GESTANTE;
				
			tHash_Lookup_row20.put(row20_HashRow);
			
            




 


	tos_count_tAdvancedHash_row20++;

/**
 * [tAdvancedHash_row20 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row20 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_9 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_9 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

}
}finally{
	if (rs_tOracleInput_9 != null) {
		rs_tOracleInput_9.close();
	}
	if (stmt_tOracleInput_9 != null) {
		stmt_tOracleInput_9.close();
	}
}

globalMap.put("tOracleInput_9_NB_LINE",nb_line_tOracleInput_9);
 

ok_Hash.put("tOracleInput_9", true);
end_Hash.put("tOracleInput_9", System.currentTimeMillis());




/**
 * [tOracleInput_9 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

tHash_Lookup_row20.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row20");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row20", true);
end_Hash.put("tAdvancedHash_row20", System.currentTimeMillis());




/**
 * [tAdvancedHash_row20 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_9 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_9";
	
	

 



/**
 * [tOracleInput_9 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row20 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row20";
	
	

 



/**
 * [tAdvancedHash_row20 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_9_SUBPROCESS_STATE", 1);
	}
	


public static class row21Struct implements routines.system.IPersistableComparableLookupRow<row21Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PERSONAS_ID;

				public BigDecimal getPERSONAS_ID () {
					return this.PERSONAS_ID;
				}

				public Boolean PERSONAS_IDIsNullable(){
				    return false;
				}
				public Boolean PERSONAS_IDIsKey(){
				    return false;
				}
				public Integer PERSONAS_IDLength(){
				    return 0;
				}
				public Integer PERSONAS_IDPrecision(){
				    return null;
				}
				public String PERSONAS_IDDefault(){
				
					return "";
				
				}
				public String PERSONAS_IDComment(){
				
				    return "";
				
				}
				public String PERSONAS_IDPattern(){
				
					return "";
				
				}
				public String PERSONAS_IDOriginalDbColumnName(){
				
					return "PERSONAS_ID";
				
				}

				
			    public java.util.Date FFINAL;

				public java.util.Date getFFINAL () {
					return this.FFINAL;
				}

				public Boolean FFINALIsNullable(){
				    return true;
				}
				public Boolean FFINALIsKey(){
				    return false;
				}
				public Integer FFINALLength(){
				    return 0;
				}
				public Integer FFINALPrecision(){
				    return 0;
				}
				public String FFINALDefault(){
				
					return null;
				
				}
				public String FFINALComment(){
				
				    return "";
				
				}
				public String FFINALPattern(){
				
					return "";
				
				}
				public String FFINALOriginalDbColumnName(){
				
					return "FFINAL";
				
				}

				
			    public BigDecimal VIH;

				public BigDecimal getVIH () {
					return this.VIH;
				}

				public Boolean VIHIsNullable(){
				    return true;
				}
				public Boolean VIHIsKey(){
				    return false;
				}
				public Integer VIHLength(){
				    return 0;
				}
				public Integer VIHPrecision(){
				    return null;
				}
				public String VIHDefault(){
				
					return "";
				
				}
				public String VIHComment(){
				
				    return "";
				
				}
				public String VIHPattern(){
				
					return "";
				
				}
				public String VIHOriginalDbColumnName(){
				
					return "VIH";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PERSONAS_ID == null) ? 0 : this.PERSONAS_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row21Struct other = (row21Struct) obj;
		
						if (this.PERSONAS_ID == null) {
							if (other.PERSONAS_ID != null)
								return false;
						
						} else if (!this.PERSONAS_ID.equals(other.PERSONAS_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row21Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            other.FFINAL = this.FFINAL;
	            other.VIH = this.VIH;
	            
	}

	public void copyKeysDataTo(row21Struct other) {

		other.PERSONAS_ID = this.PERSONAS_ID;
	            	
	}




	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller ) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}
	
	private void writeDate(java.util.Date date1, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PERSONAS_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PERSONAS_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FFINAL = readDate(dis,ois);
					
       			    	this.VIH = (BigDecimal) ois.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FFINAL = readDate(dis,objectIn);
					
       			    	this.VIH = (BigDecimal) objectIn.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeDate(this.FFINAL, dos, oos);
					
       			    	oos.writeObject(this.VIH);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeDate(this.FFINAL, dos, objectOut);
					
						objectOut.clearInstanceCache();
						objectOut.writeObject(this.VIH);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PERSONAS_ID="+String.valueOf(PERSONAS_ID));
		sb.append(",FFINAL="+String.valueOf(FFINAL));
		sb.append(",VIH="+String.valueOf(VIH));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row21Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PERSONAS_ID, other.PERSONAS_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_8Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row21Struct row21 = new row21Struct();




	
	/**
	 * [tAdvancedHash_row21 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row21", false);
		start_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row21");
					}
				
		int tos_count_tAdvancedHash_row21 = 0;
		

			   		// connection name:row21
			   		// source node:tOracleInput_8 - inputs:(after_tOracleInput_1) outputs:(row21,row21) | target node:tAdvancedHash_row21 - inputs:(row21) outputs:()
			   		// linked node: tMap_6 - inputs:(out4,row20,row21,row22) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row21 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row21Struct> tHash_Lookup_row21 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row21Struct>getLookup(matchingModeEnum_row21);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row21", tHash_Lookup_row21);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row21 begin ] stop
 */



	
	/**
	 * [tOracleInput_8 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_8", false);
		start_Hash.put("tOracleInput_8", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_8";
	
	
		int tos_count_tOracleInput_8 = 0;
		
	


	
		    int nb_line_tOracleInput_8 = 0;
		    java.sql.Connection conn_tOracleInput_8 = null;
				conn_tOracleInput_8 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_8 = false;
				boolean isConnectionWrapped_tOracleInput_8 = !(conn_tOracleInput_8 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_8.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_8 = null;
                if (isConnectionWrapped_tOracleInput_8) {
					unwrappedOraConn_tOracleInput_8 = conn_tOracleInput_8.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_8 != null) {
                        isTimeZoneNull_tOracleInput_8 = (unwrappedOraConn_tOracleInput_8.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_8 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_8).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_8) {
					java.sql.Statement stmtGetTZ_tOracleInput_8 = conn_tOracleInput_8.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_8 = stmtGetTZ_tOracleInput_8.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_8 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_8.next()) {
						sessionTimezone_tOracleInput_8 = rsGetTZ_tOracleInput_8.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_8 && unwrappedOraConn_tOracleInput_8 != null) {
                        unwrappedOraConn_tOracleInput_8.setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_8).setSessionTimeZone(sessionTimezone_tOracleInput_8);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_8 = conn_tOracleInput_8.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_8.setFetchSize(1000);


		    String dbquery_tOracleInput_8 = "SELECT \nDISTINCT\nPA.PERSONAS_ID,\nPA.FFINAL,\n1 AS VIH\nFROM HCL_DIAGNOSTICOS DIAG\nINNER JOIN GEN_CIE10 CI ON CI.ID "
+"= DIAG.CIE10_ID  \nINNER JOIN HCL_PROCESOSASISTENCIALES PA ON PA.ID = DIAG.PROCESOSASISTENCIALES_ID\nWHERE \nCI.CODIGO I"
+"N ( 'B209', 'B208', 'B207', 'B206', \n               'B205', 'B204', 'B203', 'B202', \n               'B201', 'B200', 'B"
+"24X' )\nAND DIAG.TDIAGNOSTICO IN ('Confirmado Repetido','Confirmado Nuevo')";
		    

		    globalMap.put("tOracleInput_8_QUERY",dbquery_tOracleInput_8);

		    java.sql.ResultSet rs_tOracleInput_8 = null;

		    try {
		    	rs_tOracleInput_8 = stmt_tOracleInput_8.executeQuery(dbquery_tOracleInput_8);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_8 = rs_tOracleInput_8.getMetaData();
		    	int colQtyInRs_tOracleInput_8 = rsmd_tOracleInput_8.getColumnCount();

		    String tmpContent_tOracleInput_8 = null;
		    
		    
		    while (rs_tOracleInput_8.next()) {
		        nb_line_tOracleInput_8++;
		        
							if(colQtyInRs_tOracleInput_8 < 1) {
								row21.PERSONAS_ID = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(1) != null) {
						row21.PERSONAS_ID = rs_tOracleInput_8.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_8 < 2) {
								row21.FFINAL = null;
							} else {
										
			row21.FFINAL = routines.system.JDBCUtil.getDate(rs_tOracleInput_8, 2);
		                    }
							if(colQtyInRs_tOracleInput_8 < 3) {
								row21.VIH = null;
							} else {
		                          
					if(rs_tOracleInput_8.getObject(3) != null) {
						row21.VIH = rs_tOracleInput_8.getBigDecimal(3);
					} else {
				
						row21.VIH = null;
					}
		                    }
					




 



/**
 * [tOracleInput_8 begin ] stop
 */
	
	/**
	 * [tOracleInput_8 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 


	tos_count_tOracleInput_8++;

/**
 * [tOracleInput_8 main ] stop
 */
	
	/**
	 * [tOracleInput_8 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row21"
						
						);
					}
					


			   
			   

					row21Struct row21_HashRow = new row21Struct();
		   	   	   
				
				row21_HashRow.PERSONAS_ID = row21.PERSONAS_ID;
				
				row21_HashRow.FFINAL = row21.FFINAL;
				
				row21_HashRow.VIH = row21.VIH;
				
			tHash_Lookup_row21.put(row21_HashRow);
			
            




 


	tos_count_tAdvancedHash_row21++;

/**
 * [tAdvancedHash_row21 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row21 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_8 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_8 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

}
}finally{
	if (rs_tOracleInput_8 != null) {
		rs_tOracleInput_8.close();
	}
	if (stmt_tOracleInput_8 != null) {
		stmt_tOracleInput_8.close();
	}
}

globalMap.put("tOracleInput_8_NB_LINE",nb_line_tOracleInput_8);
 

ok_Hash.put("tOracleInput_8", true);
end_Hash.put("tOracleInput_8", System.currentTimeMillis());




/**
 * [tOracleInput_8 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

tHash_Lookup_row21.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row21");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row21", true);
end_Hash.put("tAdvancedHash_row21", System.currentTimeMillis());




/**
 * [tAdvancedHash_row21 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_8 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_8";
	
	

 



/**
 * [tOracleInput_8 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row21 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row21";
	
	

 



/**
 * [tAdvancedHash_row21 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_8_SUBPROCESS_STATE", 1);
	}
	


public static class row22Struct implements routines.system.IPersistableComparableLookupRow<row22Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal ID;

				public BigDecimal getID () {
					return this.ID;
				}

				public Boolean IDIsNullable(){
				    return false;
				}
				public Boolean IDIsKey(){
				    return false;
				}
				public Integer IDLength(){
				    return 0;
				}
				public Integer IDPrecision(){
				    return null;
				}
				public String IDDefault(){
				
					return "";
				
				}
				public String IDComment(){
				
				    return "";
				
				}
				public String IDPattern(){
				
					return "";
				
				}
				public String IDOriginalDbColumnName(){
				
					return "ID";
				
				}

				
			    public String TIPO_USUARIO;

				public String getTIPO_USUARIO () {
					return this.TIPO_USUARIO;
				}

				public Boolean TIPO_USUARIOIsNullable(){
				    return true;
				}
				public Boolean TIPO_USUARIOIsKey(){
				    return false;
				}
				public Integer TIPO_USUARIOLength(){
				    return 31;
				}
				public Integer TIPO_USUARIOPrecision(){
				    return 0;
				}
				public String TIPO_USUARIODefault(){
				
					return null;
				
				}
				public String TIPO_USUARIOComment(){
				
				    return "";
				
				}
				public String TIPO_USUARIOPattern(){
				
					return "";
				
				}
				public String TIPO_USUARIOOriginalDbColumnName(){
				
					return "TIPO_USUARIO";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.ID == null) ? 0 : this.ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row22Struct other = (row22Struct) obj;
		
						if (this.ID == null) {
							if (other.ID != null)
								return false;
						
						} else if (!this.ID.equals(other.ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row22Struct other) {

		other.ID = this.ID;
	            other.TIPO_USUARIO = this.TIPO_USUARIO;
	            
	}

	public void copyKeysDataTo(row22Struct other) {

		other.ID = this.ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.TIPO_USUARIO = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.TIPO_USUARIO = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.TIPO_USUARIO, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.TIPO_USUARIO, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("ID="+String.valueOf(ID));
		sb.append(",TIPO_USUARIO="+TIPO_USUARIO);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row22Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.ID, other.ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tOracleInput_18Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row22Struct row22 = new row22Struct();




	
	/**
	 * [tAdvancedHash_row22 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row22", false);
		start_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row22";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row22");
					}
				
		int tos_count_tAdvancedHash_row22 = 0;
		

			   		// connection name:row22
			   		// source node:tOracleInput_18 - inputs:(after_tOracleInput_1) outputs:(row22,row22) | target node:tAdvancedHash_row22 - inputs:(row22) outputs:()
			   		// linked node: tMap_6 - inputs:(out4,row20,row21,row22) outputs:(out5)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row22 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.ALL_MATCHES;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row22Struct> tHash_Lookup_row22 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row22Struct>getLookup(matchingModeEnum_row22);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row22", tHash_Lookup_row22);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row22 begin ] stop
 */



	
	/**
	 * [tOracleInput_18 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleInput_18", false);
		start_Hash.put("tOracleInput_18", System.currentTimeMillis());
		
	
	currentComponent="tOracleInput_18";
	
	
		int tos_count_tOracleInput_18 = 0;
		
	


	
		    int nb_line_tOracleInput_18 = 0;
		    java.sql.Connection conn_tOracleInput_18 = null;
				conn_tOracleInput_18 = (java.sql.Connection)globalMap.get("conn_tOracleConnection_1");
				
                boolean isTimeZoneNull_tOracleInput_18 = false;
				boolean isConnectionWrapped_tOracleInput_18 = !(conn_tOracleInput_18 instanceof oracle.jdbc.OracleConnection) && conn_tOracleInput_18.isWrapperFor(oracle.jdbc.OracleConnection.class);
				oracle.jdbc.OracleConnection unwrappedOraConn_tOracleInput_18 = null;
                if (isConnectionWrapped_tOracleInput_18) {
					unwrappedOraConn_tOracleInput_18 = conn_tOracleInput_18.unwrap(oracle.jdbc.OracleConnection.class);
                    if (unwrappedOraConn_tOracleInput_18 != null) {
                        isTimeZoneNull_tOracleInput_18 = (unwrappedOraConn_tOracleInput_18.getSessionTimeZone() == null);
                    }
                } else {
                    isTimeZoneNull_tOracleInput_18 = (((oracle.jdbc.OracleConnection)conn_tOracleInput_18).getSessionTimeZone() == null);
                }

				if(isTimeZoneNull_tOracleInput_18) {
					java.sql.Statement stmtGetTZ_tOracleInput_18 = conn_tOracleInput_18.createStatement();
					java.sql.ResultSet rsGetTZ_tOracleInput_18 = stmtGetTZ_tOracleInput_18.executeQuery("select sessiontimezone from dual");
					String sessionTimezone_tOracleInput_18 = java.util.TimeZone.getDefault().getID();
					while (rsGetTZ_tOracleInput_18.next()) {
						sessionTimezone_tOracleInput_18 = rsGetTZ_tOracleInput_18.getString(1);
					}
					if (isConnectionWrapped_tOracleInput_18 && unwrappedOraConn_tOracleInput_18 != null) {
                        unwrappedOraConn_tOracleInput_18.setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    } else {
                        ((oracle.jdbc.OracleConnection)conn_tOracleInput_18).setSessionTimeZone(sessionTimezone_tOracleInput_18);
                    }
				}
			
		    
			java.sql.Statement stmt_tOracleInput_18 = conn_tOracleInput_18.createStatement(java.sql.ResultSet.TYPE_FORWARD_ONLY,
																					java.sql.ResultSet.CONCUR_READ_ONLY);
			
                stmt_tOracleInput_18.setFetchSize(1000);


		    String dbquery_tOracleInput_18 = "SELECT\nDISTINCT\nGP.ID,\nCASE \nWHEN PLANAFI.CODIGO = '2' THEN 'No cotizante'\nWHEN PLANAFI.CODIGO IN ('1','3','4','5'"
+",'6','7','8','9','10') AND ATC.SIGLA='ACT' THEN 'Cotizante Activo' \nWHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8'"
+",'9','10') AND ATC.SIGLA IN ('RET','PEN') THEN 'Cotizante Pensionado / Retirado' \nWHEN PLANAFI.CODIGO IN ('11','12','13"
+"','14','15','16','17','18') THEN 'Beneficiario' \nWHEN PLANAFI.CODIGO IN ('1','3','4','5','6','7','8','9','10') AND ATC."
+"SIGLA IN ('PAR','NOC') THEN 'Otro cotizante' \nEND TIPO_USUARIO\nFROM HCL_PROCESOSASISTENCIALES PA\nINNER JOIN HCL_VALOR"
+"ACIONES VAL ON VAL.PROCESOSASISTENCIALES_ID = PA.ID \nINNER JOIN GEN_PERSONAS GP ON GP.ID = PA.PERSONAS_ID \nINNER JOIN "
+"GEN_AFILIADOS AFI ON AFI.PERSONAS_ID = GP.ID AND AFI.ESTREGISTRO_ID=1\nINNER JOIN GEN_AFILIADOS_ENTAPORTANTE AENT ON  ( "
+"AENT.AFILIADOS_ID= AFI.padre_id OR (AENT.AFILIADOS_ID = AFI.ID AND AFI.PADRE_ID IS NULL) ) AND AENT.PRINCIPAL = 1 AND AE"
+"NT.ESTREGISTRO_ID = 1\nINNER JOIN AFI_TVINCULACIONES AT ON AT.ID= AENT.TVINCULACIONES_ID\nLEFT JOIN AFI_TCOTIZACION ATC "
+"ON ATC.ID=AT.TCOTIZACION_ID\nINNER JOIN AFI_PLANAFILIACIONES PLANAFI ON PLANAFI.ID = AFI.PLANAFILIACIONES_ID AND PLANAFI"
+".ESTREGISTRO_ID=1\nWHERE \n"+context.CONDITION+"  \n VAL.ESTREGISTRO_ID =1 \nAND PA.ESTREGISTRO_ID = 1\nAND VAL.ESTADO = 'Finalizado'\nAND ( VAL.PYP_ID = (SELECT ID FR"
+"OM GEN_PYP WHERE SIGLA = 'PSO')\n      OR VAL.CUPS_ID IN ( SELECT ID FROM GEN_CUPS WHERE CODIGO = '890203' OR CODIGO = '"
+"890303' ) \n) ";
		    

		    globalMap.put("tOracleInput_18_QUERY",dbquery_tOracleInput_18);

		    java.sql.ResultSet rs_tOracleInput_18 = null;

		    try {
		    	rs_tOracleInput_18 = stmt_tOracleInput_18.executeQuery(dbquery_tOracleInput_18);
		    	java.sql.ResultSetMetaData rsmd_tOracleInput_18 = rs_tOracleInput_18.getMetaData();
		    	int colQtyInRs_tOracleInput_18 = rsmd_tOracleInput_18.getColumnCount();

		    String tmpContent_tOracleInput_18 = null;
		    
		    
		    while (rs_tOracleInput_18.next()) {
		        nb_line_tOracleInput_18++;
		        
							if(colQtyInRs_tOracleInput_18 < 1) {
								row22.ID = null;
							} else {
		                          
					if(rs_tOracleInput_18.getObject(1) != null) {
						row22.ID = rs_tOracleInput_18.getBigDecimal(1);
					} else {
				
 	                	throw new RuntimeException("Null value in non-Nullable column");
					}
		                    }
							if(colQtyInRs_tOracleInput_18 < 2) {
								row22.TIPO_USUARIO = null;
							} else {
	                         		
        	row22.TIPO_USUARIO = routines.system.JDBCUtil.getString(rs_tOracleInput_18, 2, false);
		                    }
					




 



/**
 * [tOracleInput_18 begin ] stop
 */
	
	/**
	 * [tOracleInput_18 main ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 


	tos_count_tOracleInput_18++;

/**
 * [tOracleInput_18 main ] stop
 */
	
	/**
	 * [tOracleInput_18 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row22"
						
						);
					}
					


			   
			   

					row22Struct row22_HashRow = new row22Struct();
		   	   	   
				
				row22_HashRow.ID = row22.ID;
				
				row22_HashRow.TIPO_USUARIO = row22.TIPO_USUARIO;
				
			tHash_Lookup_row22.put(row22_HashRow);
			
            




 


	tos_count_tAdvancedHash_row22++;

/**
 * [tAdvancedHash_row22 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row22 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 process_data_end ] stop
 */



	
	/**
	 * [tOracleInput_18 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 process_data_end ] stop
 */
	
	/**
	 * [tOracleInput_18 end ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

}
}finally{
	if (rs_tOracleInput_18 != null) {
		rs_tOracleInput_18.close();
	}
	if (stmt_tOracleInput_18 != null) {
		stmt_tOracleInput_18.close();
	}
}

globalMap.put("tOracleInput_18_NB_LINE",nb_line_tOracleInput_18);
 

ok_Hash.put("tOracleInput_18", true);
end_Hash.put("tOracleInput_18", System.currentTimeMillis());




/**
 * [tOracleInput_18 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

tHash_Lookup_row22.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row22");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row22", true);
end_Hash.put("tAdvancedHash_row22", System.currentTimeMillis());




/**
 * [tAdvancedHash_row22 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleInput_18 finally ] start
	 */

	

	
	
	currentComponent="tOracleInput_18";
	
	

 



/**
 * [tOracleInput_18 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row22 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row22";
	
	

 



/**
 * [tAdvancedHash_row22 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleInput_18_SUBPROCESS_STATE", 1);
	}
	


public static class row23Struct implements routines.system.IPersistableComparableLookupRow<row23Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public BigDecimal PROCESOASISTENCIAL_ID;

				public BigDecimal getPROCESOASISTENCIAL_ID () {
					return this.PROCESOASISTENCIAL_ID;
				}

				public Boolean PROCESOASISTENCIAL_IDIsNullable(){
				    return false;
				}
				public Boolean PROCESOASISTENCIAL_IDIsKey(){
				    return false;
				}
				public Integer PROCESOASISTENCIAL_IDLength(){
				    return 0;
				}
				public Integer PROCESOASISTENCIAL_IDPrecision(){
				    return null;
				}
				public String PROCESOASISTENCIAL_IDDefault(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDComment(){
				
				    return "";
				
				}
				public String PROCESOASISTENCIAL_IDPattern(){
				
					return "";
				
				}
				public String PROCESOASISTENCIAL_IDOriginalDbColumnName(){
				
					return "PROCESOASISTENCIAL_ID";
				
				}

				
			    public String FLUOROSIS;

				public String getFLUOROSIS () {
					return this.FLUOROSIS;
				}

				public Boolean FLUOROSISIsNullable(){
				    return false;
				}
				public Boolean FLUOROSISIsKey(){
				    return false;
				}
				public Integer FLUOROSISLength(){
				    return 200;
				}
				public Integer FLUOROSISPrecision(){
				    return 0;
				}
				public String FLUOROSISDefault(){
				
					return null;
				
				}
				public String FLUOROSISComment(){
				
				    return "";
				
				}
				public String FLUOROSISPattern(){
				
					return "";
				
				}
				public String FLUOROSISOriginalDbColumnName(){
				
					return "FLUOROSIS";
				
				}

				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
						result = prime * result + ((this.PROCESOASISTENCIAL_ID == null) ? 0 : this.PROCESOASISTENCIAL_ID.hashCode());
					
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row23Struct other = (row23Struct) obj;
		
						if (this.PROCESOASISTENCIAL_ID == null) {
							if (other.PROCESOASISTENCIAL_ID != null)
								return false;
						
						} else if (!this.PROCESOASISTENCIAL_ID.equals(other.PROCESOASISTENCIAL_ID))
						
							return false;
					

		return true;
    }

	public void copyDataTo(row23Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            other.FLUOROSIS = this.FLUOROSIS;
	            
	}

	public void copyKeysDataTo(row23Struct other) {

		other.PROCESOASISTENCIAL_ID = this.PROCESOASISTENCIAL_ID;
	            	
	}



	
	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(DataInputStream dis, org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			unmarshaller.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}
	
	private void writeString(String str, DataOutputStream dos, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }
    
    public void readKeysData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
						this.PROCESOASISTENCIAL_ID = (BigDecimal) dis.readObject();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		
			} catch(ClassNotFoundException eCNFE) {
				 throw new RuntimeException(eCNFE);
		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// BigDecimal
				
       			    	dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeKeysData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// BigDecimal
				
						dos.clearInstanceCache();
						dos.writeObject(this.PROCESOASISTENCIAL_ID);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.FLUOROSIS = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }
    
    public void readValuesData(DataInputStream dis, org.jboss.marshalling.Unmarshaller objectIn) {
        try {
			int length = 0;
		
						this.FLUOROSIS = readString(dis,objectIn);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.FLUOROSIS, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }
    
    public void writeValuesData(DataOutputStream dos, org.jboss.marshalling.Marshaller objectOut){
                try {

		
						writeString(this.FLUOROSIS, dos, objectOut);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}
    }


    
    public boolean supportMarshaller(){
        return true;
    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("PROCESOASISTENCIAL_ID="+String.valueOf(PROCESOASISTENCIAL_ID));
		sb.append(",FLUOROSIS="+FLUOROSIS);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row23Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.PROCESOASISTENCIAL_ID, other.PROCESOASISTENCIAL_ID);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tHashInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tHashInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row23Struct row23 = new row23Struct();




	
	/**
	 * [tAdvancedHash_row23 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row23", false);
		start_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row23";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row23");
					}
				
		int tos_count_tAdvancedHash_row23 = 0;
		

			   		// connection name:row23
			   		// source node:tHashInput_1 - inputs:(after_tOracleInput_1) outputs:(row23,row23) | target node:tAdvancedHash_row23 - inputs:(row23) outputs:()
			   		// linked node: tMap_5 - inputs:(out3,row16,row17,row18,row23) outputs:(out4)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row23 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row23Struct> tHash_Lookup_row23 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row23Struct>getLookup(matchingModeEnum_row23);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row23", tHash_Lookup_row23);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row23 begin ] stop
 */



	
	/**
	 * [tHashInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tHashInput_1", false);
		start_Hash.put("tHashInput_1", System.currentTimeMillis());
		
	
	currentComponent="tHashInput_1";
	
	
		int tos_count_tHashInput_1 = 0;
		


int nb_line_tHashInput_1 = 0;
	
org.talend.designer.components.hashfile.common.MapHashFile mf_tHashInput_1=org.talend.designer.components.hashfile.common.MapHashFile.getMapHashFile();
org.talend.designer.components.hashfile.memory.AdvancedMemoryHashFile<row24Struct> tHashFile_tHashInput_1 = mf_tHashInput_1.getAdvancedMemoryHashFile("tHashFile_Odontologia_" + pid +"_tHashOutput_2");
if(tHashFile_tHashInput_1==null) {
	throw new RuntimeException("The hash is not initialized : The hash must exist before you read from it");
}
java.util.Iterator<row24Struct> iterator_tHashInput_1 = tHashFile_tHashInput_1.iterator();
while (iterator_tHashInput_1.hasNext()) {
    row24Struct next_tHashInput_1 = iterator_tHashInput_1.next();

	row23.PROCESOASISTENCIAL_ID = next_tHashInput_1.PROCESOASISTENCIAL_ID;
	row23.FLUOROSIS = next_tHashInput_1.FLUOROSIS;

 



/**
 * [tHashInput_1 begin ] stop
 */
	
	/**
	 * [tHashInput_1 main ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 


	tos_count_tHashInput_1++;

/**
 * [tHashInput_1 main ] stop
 */
	
	/**
	 * [tHashInput_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_begin ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row23"
						
						);
					}
					


			   
			   

					row23Struct row23_HashRow = new row23Struct();
		   	   	   
				
				row23_HashRow.PROCESOASISTENCIAL_ID = row23.PROCESOASISTENCIAL_ID;
				
				row23_HashRow.FLUOROSIS = row23.FLUOROSIS;
				
			tHash_Lookup_row23.put(row23_HashRow);
			
            




 


	tos_count_tAdvancedHash_row23++;

/**
 * [tAdvancedHash_row23 main ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_begin ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 process_data_begin ] stop
 */
	
	/**
	 * [tAdvancedHash_row23 process_data_end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 process_data_end ] stop
 */



	
	/**
	 * [tHashInput_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 process_data_end ] stop
 */
	
	/**
	 * [tHashInput_1 end ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	
    

		
			nb_line_tHashInput_1++;
		}	
    	
		org.talend.designer.components.hashfile.common.MapHashFile.resourceLockMap.remove("tHashFile_Odontologia_" + pid +"_tHashOutput_2");
	


	globalMap.put("tHashInput_1_NB_LINE", nb_line_tHashInput_1);       

 

ok_Hash.put("tHashInput_1", true);
end_Hash.put("tHashInput_1", System.currentTimeMillis());




/**
 * [tHashInput_1 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

tHash_Lookup_row23.endPut();

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row23");
			  	}
			  	
 

ok_Hash.put("tAdvancedHash_row23", true);
end_Hash.put("tAdvancedHash_row23", System.currentTimeMillis());




/**
 * [tAdvancedHash_row23 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tHashInput_1 finally ] start
	 */

	

	
	
	currentComponent="tHashInput_1";
	
	

 



/**
 * [tHashInput_1 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row23 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row23";
	
	

 



/**
 * [tAdvancedHash_row23 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tHashInput_1_SUBPROCESS_STATE", 1);
	}
	


public void tPrejob_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tPrejob_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tPrejob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tPrejob_1", false);
		start_Hash.put("tPrejob_1", System.currentTimeMillis());
		
	
	currentComponent="tPrejob_1";
	
	
		int tos_count_tPrejob_1 = 0;
		

 



/**
 * [tPrejob_1 begin ] stop
 */
	
	/**
	 * [tPrejob_1 main ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 


	tos_count_tPrejob_1++;

/**
 * [tPrejob_1 main ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_begin ] stop
 */
	
	/**
	 * [tPrejob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 process_data_end ] stop
 */
	
	/**
	 * [tPrejob_1 end ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 

ok_Hash.put("tPrejob_1", true);
end_Hash.put("tPrejob_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tFileInputXML_1Process(globalMap);



/**
 * [tPrejob_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tPrejob_1 finally ] start
	 */

	

	
	
	currentComponent="tPrejob_1";
	
	

 



/**
 * [tPrejob_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tPrejob_1_SUBPROCESS_STATE", 1);
	}
	


public static class row34Struct implements routines.system.IPersistableRow<row34Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 7;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 8;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 8;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 15;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				
			    public String PathStorage;

				public String getPathStorage () {
					return this.PathStorage;
				}

				public Boolean PathStorageIsNullable(){
				    return true;
				}
				public Boolean PathStorageIsKey(){
				    return false;
				}
				public Integer PathStorageLength(){
				    return 44;
				}
				public Integer PathStoragePrecision(){
				    return 0;
				}
				public String PathStorageDefault(){
				
					return null;
				
				}
				public String PathStorageComment(){
				
				    return "";
				
				}
				public String PathStoragePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PathStorageOriginalDbColumnName(){
				
					return "PathStorage";
				
				}

				
			    public String SMTPHost;

				public String getSMTPHost () {
					return this.SMTPHost;
				}

				public Boolean SMTPHostIsNullable(){
				    return true;
				}
				public Boolean SMTPHostIsKey(){
				    return false;
				}
				public Integer SMTPHostLength(){
				    return 14;
				}
				public Integer SMTPHostPrecision(){
				    return 0;
				}
				public String SMTPHostDefault(){
				
					return null;
				
				}
				public String SMTPHostComment(){
				
				    return "";
				
				}
				public String SMTPHostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPHostOriginalDbColumnName(){
				
					return "SMTPHost";
				
				}

				
			    public String SMTPPort;

				public String getSMTPPort () {
					return this.SMTPPort;
				}

				public Boolean SMTPPortIsNullable(){
				    return true;
				}
				public Boolean SMTPPortIsKey(){
				    return false;
				}
				public Integer SMTPPortLength(){
				    return 3;
				}
				public Integer SMTPPortPrecision(){
				    return 0;
				}
				public String SMTPPortDefault(){
				
					return null;
				
				}
				public String SMTPPortComment(){
				
				    return "";
				
				}
				public String SMTPPortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SMTPPortOriginalDbColumnName(){
				
					return "SMTPPort";
				
				}

				
			    public String UsernameMail;

				public String getUsernameMail () {
					return this.UsernameMail;
				}

				public Boolean UsernameMailIsNullable(){
				    return true;
				}
				public Boolean UsernameMailIsKey(){
				    return false;
				}
				public Integer UsernameMailLength(){
				    return 34;
				}
				public Integer UsernameMailPrecision(){
				    return 0;
				}
				public String UsernameMailDefault(){
				
					return null;
				
				}
				public String UsernameMailComment(){
				
				    return "";
				
				}
				public String UsernameMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UsernameMailOriginalDbColumnName(){
				
					return "UsernameMail";
				
				}

				
			    public String PasswordMail;

				public String getPasswordMail () {
					return this.PasswordMail;
				}

				public Boolean PasswordMailIsNullable(){
				    return true;
				}
				public Boolean PasswordMailIsKey(){
				    return false;
				}
				public Integer PasswordMailLength(){
				    return 13;
				}
				public Integer PasswordMailPrecision(){
				    return 0;
				}
				public String PasswordMailDefault(){
				
					return null;
				
				}
				public String PasswordMailComment(){
				
				    return "";
				
				}
				public String PasswordMailPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordMailOriginalDbColumnName(){
				
					return "PasswordMail";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
					this.PathStorage = readString(dis);
					
					this.SMTPHost = readString(dis);
					
					this.SMTPPort = readString(dis);
					
					this.UsernameMail = readString(dis);
					
					this.PasswordMail = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
					// String
				
						writeString(this.PathStorage,dos);
					
					// String
				
						writeString(this.SMTPHost,dos);
					
					// String
				
						writeString(this.SMTPPort,dos);
					
					// String
				
						writeString(this.UsernameMail,dos);
					
					// String
				
						writeString(this.PasswordMail,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
		sb.append(",PathStorage="+PathStorage);
		sb.append(",SMTPHost="+SMTPHost);
		sb.append(",SMTPPort="+SMTPPort);
		sb.append(",UsernameMail="+UsernameMail);
		sb.append(",PasswordMail="+PasswordMail);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row34Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row34Struct row34 = new row34Struct();




	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row34");
					}
				
		int tos_count_tJavaRow_1 = 0;
		

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tFileInputXML_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_1", false);
		start_Hash.put("tFileInputXML_1", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_1";
	
	
		int tos_count_tFileInputXML_1 = 0;
		

	

int nb_line_tFileInputXML_1 = 0;

	String os_tFileInputXML_1 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_1=false;
	if(os_tFileInputXML_1.indexOf("windows") > -1 || os_tFileInputXML_1.indexOf("nt") > -1){
		isWindows_tFileInputXML_1=true;
	}
class NameSpaceTool_tFileInputXML_1 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_1{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_1 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_1 = null;
try {
	filename_tFileInputXML_1 = context.ORIGEN;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_1 != null && filename_tFileInputXML_1 instanceof String && filename_tFileInputXML_1.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_1){
		filename_tFileInputXML_1 = filename_tFileInputXML_1.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_1 = true;
org.dom4j.Document doc_tFileInputXML_1 = null;
java.io.Closeable toClose_tFileInputXML_1 = null;
try{
	if(filename_tFileInputXML_1 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_1 = (java.io.InputStream)filename_tFileInputXML_1;
		toClose_tFileInputXML_1 = inputStream_tFileInputXML_1;
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(inputStream_tFileInputXML_1);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_1 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_1)),"UTF-8");
		toClose_tFileInputXML_1 = unicodeReader_tFileInputXML_1;
		org.xml.sax.InputSource in_tFileInputXML_1= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_1);
		doc_tFileInputXML_1 = reader_tFileInputXML_1.read(in_tFileInputXML_1);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_1 = false;
} finally {
	if(toClose_tFileInputXML_1!=null) {
		toClose_tFileInputXML_1.close();
	}
}
if(isValidFile_tFileInputXML_1){
NameSpaceTool_tFileInputXML_1 nsTool_tFileInputXML_1 = new NameSpaceTool_tFileInputXML_1();
nsTool_tFileInputXML_1.countNSMap(doc_tFileInputXML_1.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_1 = nsTool_tFileInputXML_1.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_1 = doc_tFileInputXML_1.createXPath(nsTool_tFileInputXML_1.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_1.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_1); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_1.selectNodes(doc_tFileInputXML_1);	
XML_API_tFileInputXML_1 xml_api_tFileInputXML_1 = new XML_API_tFileInputXML_1();
String str_tFileInputXML_1 = "";
org.dom4j.Node node_tFileInputXML_1 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_1=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_1{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	org.dom4j.XPath xpath_7 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PathStorage","/connectionStrings"));
	xpath_7.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(7,xpath_7);
			
	org.dom4j.XPath xpath_8 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPHost","/connectionStrings"));
	xpath_8.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(8,xpath_8);
			
	org.dom4j.XPath xpath_9 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("SMTPPort","/connectionStrings"));
	xpath_9.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(9,xpath_9);
			
	org.dom4j.XPath xpath_10 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("UsernameMail","/connectionStrings"));
	xpath_10.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(10,xpath_10);
			
	org.dom4j.XPath xpath_11 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("PasswordMail","/connectionStrings"));
	xpath_11.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(11,xpath_11);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_1 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_1 xPathUtil_tFileInputXML_1 = new XPathUtil_tFileInputXML_1();
	xPathUtil_tFileInputXML_1.initXPaths(xpaths_tFileInputXML_1, nsTool_tFileInputXML_1, xmlNameSpaceMap_tFileInputXML_1);
for (org.dom4j.Node temp_tFileInputXML_1: nodeList_tFileInputXML_1) {
	if (nb_line_tFileInputXML_1>=50) {
	
		break;
	}
		nb_line_tFileInputXML_1++;
		
	row34 = null;			
	boolean whetherReject_tFileInputXML_1 = false;
	row34 = new row34Struct();
	try{
    Object obj0_tFileInputXML_1 = xpaths_tFileInputXML_1.get(0).evaluate(temp_tFileInputXML_1);
    if(obj0_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj0_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj0_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_1 instanceof String || obj0_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj0_tFileInputXML_1);
    } else if(obj0_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Host =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Host ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Host =null;
									}else{
		row34.Host = str_tFileInputXML_1;
	}
    Object obj1_tFileInputXML_1 = xpaths_tFileInputXML_1.get(1).evaluate(temp_tFileInputXML_1);
    if(obj1_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj1_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj1_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_1 instanceof String || obj1_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj1_tFileInputXML_1);
    } else if(obj1_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Port =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Port ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Port =null;
									}else{
		row34.Port = str_tFileInputXML_1;
	}
    Object obj2_tFileInputXML_1 = xpaths_tFileInputXML_1.get(2).evaluate(temp_tFileInputXML_1);
    if(obj2_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj2_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj2_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_1 instanceof String || obj2_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj2_tFileInputXML_1);
    } else if(obj2_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Sid =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Sid ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Sid =null;
									}else{
		row34.Sid = str_tFileInputXML_1;
	}
    Object obj3_tFileInputXML_1 = xpaths_tFileInputXML_1.get(3).evaluate(temp_tFileInputXML_1);
    if(obj3_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj3_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj3_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_1 instanceof String || obj3_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj3_tFileInputXML_1);
    } else if(obj3_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.ServiceName =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.ServiceName ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.ServiceName =null;
									}else{
		row34.ServiceName = str_tFileInputXML_1;
	}
    Object obj4_tFileInputXML_1 = xpaths_tFileInputXML_1.get(4).evaluate(temp_tFileInputXML_1);
    if(obj4_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj4_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj4_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_1 instanceof String || obj4_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj4_tFileInputXML_1);
    } else if(obj4_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Schema =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Schema ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Schema =null;
									}else{
		row34.Schema = str_tFileInputXML_1;
	}
    Object obj5_tFileInputXML_1 = xpaths_tFileInputXML_1.get(5).evaluate(temp_tFileInputXML_1);
    if(obj5_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj5_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj5_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_1 instanceof String || obj5_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj5_tFileInputXML_1);
    } else if(obj5_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.User =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.User ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.User =null;
									}else{
		row34.User = str_tFileInputXML_1;
	}
    Object obj6_tFileInputXML_1 = xpaths_tFileInputXML_1.get(6).evaluate(temp_tFileInputXML_1);
    if(obj6_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj6_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj6_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_1 instanceof String || obj6_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj6_tFileInputXML_1);
    } else if(obj6_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.Password =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.Password ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.Password =null;
									}else{
		row34.Password = str_tFileInputXML_1;
	}
    Object obj7_tFileInputXML_1 = xpaths_tFileInputXML_1.get(7).evaluate(temp_tFileInputXML_1);
    if(obj7_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj7_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj7_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj7_tFileInputXML_1 instanceof String || obj7_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj7_tFileInputXML_1);
    } else if(obj7_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj7_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PathStorage =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PathStorage ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PathStorage =null;
									}else{
		row34.PathStorage = str_tFileInputXML_1;
	}
    Object obj8_tFileInputXML_1 = xpaths_tFileInputXML_1.get(8).evaluate(temp_tFileInputXML_1);
    if(obj8_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj8_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj8_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj8_tFileInputXML_1 instanceof String || obj8_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj8_tFileInputXML_1);
    } else if(obj8_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj8_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPHost =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPHost ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPHost =null;
									}else{
		row34.SMTPHost = str_tFileInputXML_1;
	}
    Object obj9_tFileInputXML_1 = xpaths_tFileInputXML_1.get(9).evaluate(temp_tFileInputXML_1);
    if(obj9_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj9_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj9_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj9_tFileInputXML_1 instanceof String || obj9_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj9_tFileInputXML_1);
    } else if(obj9_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj9_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.SMTPPort =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.SMTPPort ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.SMTPPort =null;
									}else{
		row34.SMTPPort = str_tFileInputXML_1;
	}
    Object obj10_tFileInputXML_1 = xpaths_tFileInputXML_1.get(10).evaluate(temp_tFileInputXML_1);
    if(obj10_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj10_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj10_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj10_tFileInputXML_1 instanceof String || obj10_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj10_tFileInputXML_1);
    } else if(obj10_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj10_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.UsernameMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.UsernameMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.UsernameMail =null;
									}else{
		row34.UsernameMail = str_tFileInputXML_1;
	}
    Object obj11_tFileInputXML_1 = xpaths_tFileInputXML_1.get(11).evaluate(temp_tFileInputXML_1);
    if(obj11_tFileInputXML_1 == null) {
    	node_tFileInputXML_1 = null;
    	str_tFileInputXML_1 = "";
    	
    } else if(obj11_tFileInputXML_1 instanceof org.dom4j.Node) {
    	node_tFileInputXML_1 = (org.dom4j.Node)obj11_tFileInputXML_1;
    	str_tFileInputXML_1 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj11_tFileInputXML_1 instanceof String || obj11_tFileInputXML_1 instanceof Number){
    	node_tFileInputXML_1 = temp_tFileInputXML_1;
    	str_tFileInputXML_1 = String.valueOf(obj11_tFileInputXML_1);
    } else if(obj11_tFileInputXML_1 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_1 = (java.util.List<org.dom4j.Node>)obj11_tFileInputXML_1;
    	node_tFileInputXML_1 = nodes_tFileInputXML_1.size()>0 ? nodes_tFileInputXML_1.get(0) : null;
    	str_tFileInputXML_1 = node_tFileInputXML_1==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_1,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_1.isDefNull(node_tFileInputXML_1)){
											row34.PasswordMail =null;
									}else if(xml_api_tFileInputXML_1.isEmpty(node_tFileInputXML_1)){
										row34.PasswordMail ="";
									}else if(xml_api_tFileInputXML_1.isMissing(node_tFileInputXML_1 )){ 
										row34.PasswordMail =null;
									}else{
		row34.PasswordMail = str_tFileInputXML_1;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_1_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_1 = true;
                System.err.println(e.getMessage());
                row34 = null;
    }
			
			

 



/**
 * [tFileInputXML_1 begin ] stop
 */
	
	/**
	 * [tFileInputXML_1 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 


	tos_count_tFileInputXML_1++;

/**
 * [tFileInputXML_1 main ] stop
 */
	
	/**
	 * [tFileInputXML_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_begin ] stop
 */
// Start of branch "row34"
if(row34 != null) { 



	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row34"
						
						);
					}
					

    //Guarda en variables de contexto los parametros de conexión a la bd saludsis
context.db_origen_Server = row34.Host;
context.db_origen_Port = row34.Port;
context.db_origen_ServiceName = row34.ServiceName;
context.db_origen_Schema = row34.Schema;
context.db_origen_Login = row34.User;
context.db_origen_Password = row34.Password;


//Guarda en variables de contexto la fecha de ejecución y la hora de inicio

context.FECHA_EJECUCION = TalendDate.getDate("DD/MM/YYYY");
context.HORA_INICIO = TalendDate.getDate("HH:mm:ss");
context.JOB = "ODO";

//Imprime en consola el job, la fecha de ejecución y la hora de inicio
System.out.println(context.JOB+" :-Start: "+context.FECHA_EJECUCION+" "+context.HORA_INICIO);


//context.FANTERIOR = TalendDate.formatDate("dd/MM/YYYY",TalendDate.addDate(TalendDate.getCurrentDate(),-4,"DD"));

if (!context.ACTUALIZACION_TOTAL){

context.CONDITION = "( PA.FFINAL >= TO_DATE('"+context.FANTERIOR+"','DD/MM/YYYY') OR PA.ID IN ( SELECT HPLAN.PROCESOSASISTENCIALES_ID FROM ODO_HPLANTRATAMIENTO HPLAN  INNER JOIN ODO_DHPLANTRATAMIENTO DHP ON DHP.HPLANTRATAMIENTO_ID = HPLAN.ID WHERE DHP.FTRATAMIENTO  > = to_date ('"+context.FANTERIOR+"','DD/MM/YYYY'))) AND ";

context.CONDITION_PRINCIPAL = "( PA.FFINAL >= TO_DATE('"+context.FANTERIOR+"','DD/MM/YYYY') OR TRA.FFINAL > = TO_DATE ('"+context.FANTERIOR+"', 'DD/MM/YYYY') OR PA.ID IN ( SELECT HPLAN.PROCESOSASISTENCIALES_ID FROM ODO_HPLANTRATAMIENTO HPLAN  INNER JOIN ODO_DHPLANTRATAMIENTO DHP ON DHP.HPLANTRATAMIENTO_ID = HPLAN.ID WHERE DHP.FTRATAMIENTO  > = to_date ('"+context.FANTERIOR+"','DD/MM/YYYY'))) AND ";



System.out.println("Actualización diaria");

} else {

System.out.println("Actualización total");
context.CONDITION = " ";
context.CONDITION_PRINCIPAL = " ";

}


    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 process_data_end ] stop
 */

} // End of branch "row34"




	
	/**
	 * [tFileInputXML_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_1 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	


}
	}
	globalMap.put("tFileInputXML_1_NB_LINE",nb_line_tFileInputXML_1);

	

 

ok_Hash.put("tFileInputXML_1", true);
end_Hash.put("tFileInputXML_1", System.currentTimeMillis());




/**
 * [tFileInputXML_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row34");
			  	}
			  	
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk7", 0, "ok");
				}
				tOracleConnection_1Process(globalMap);



/**
 * [tJavaRow_1 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_1 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_1";
	
	

 



/**
 * [tFileInputXML_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";
	
	

 



/**
 * [tJavaRow_1 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_1_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tOracleConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_1", false);
		start_Hash.put("tOracleConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_1";
	
	
		int tos_count_tOracleConnection_1 = 0;
		
	

	
        String url_tOracleConnection_1 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_origen_Server + ")(port=" + context.db_origen_Port + "))(connect_data=(service_name=" + context.db_origen_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_1", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_1 = context.db_origen_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_1 = context.db_origen_Password; 
		String dbPwd_tOracleConnection_1 = decryptedPassword_tOracleConnection_1;
	
	
	java.sql.Connection conn_tOracleConnection_1 = null;
	
		
			String driverClass_tOracleConnection_1 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_1 = java.lang.Class.forName(driverClass_tOracleConnection_1);
			globalMap.put("driverClass_tOracleConnection_1", driverClass_tOracleConnection_1);
		
			java.util.Properties atnParamsPrope_tOracleConnection_1 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_1.put("user",dbUser_tOracleConnection_1);
			    atnParamsPrope_tOracleConnection_1.put("password",dbPwd_tOracleConnection_1);
			if(context.db_origen_AdditionalParams != null && !"\"\"".equals(context.db_origen_AdditionalParams) && !"".equals(context.db_origen_AdditionalParams)){
                atnParamsPrope_tOracleConnection_1.load(new java.io.ByteArrayInputStream(context.db_origen_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_1 = java.sql.DriverManager.getConnection(url_tOracleConnection_1, atnParamsPrope_tOracleConnection_1);

		globalMap.put("conn_tOracleConnection_1", conn_tOracleConnection_1);
	if (null != conn_tOracleConnection_1) {
		
			conn_tOracleConnection_1.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_1",context.db_origen_Server);
        globalMap.put("port_" + "tOracleConnection_1",context.db_origen_Port);
        globalMap.put("dbname_" + "tOracleConnection_1",context.db_origen_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_1", context.db_origen_Schema);
	globalMap.put("username_" + "tOracleConnection_1",context.db_origen_Login);
	globalMap.put("password_" + "tOracleConnection_1",dbPwd_tOracleConnection_1);

 



/**
 * [tOracleConnection_1 begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 


	tos_count_tOracleConnection_1++;

/**
 * [tOracleConnection_1 main ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_1 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 

ok_Hash.put("tOracleConnection_1", true);
end_Hash.put("tOracleConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk8", 0, "ok");
				}
				tFileInputXML_2Process(globalMap);



/**
 * [tOracleConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_1";
	
	

 



/**
 * [tOracleConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row35Struct implements routines.system.IPersistableRow<row35Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public String Host;

				public String getHost () {
					return this.Host;
				}

				public Boolean HostIsNullable(){
				    return true;
				}
				public Boolean HostIsKey(){
				    return false;
				}
				public Integer HostLength(){
				    return 15;
				}
				public Integer HostPrecision(){
				    return 0;
				}
				public String HostDefault(){
				
					return null;
				
				}
				public String HostComment(){
				
				    return "";
				
				}
				public String HostPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String HostOriginalDbColumnName(){
				
					return "Host";
				
				}

				
			    public String Port;

				public String getPort () {
					return this.Port;
				}

				public Boolean PortIsNullable(){
				    return true;
				}
				public Boolean PortIsKey(){
				    return false;
				}
				public Integer PortLength(){
				    return 4;
				}
				public Integer PortPrecision(){
				    return 0;
				}
				public String PortDefault(){
				
					return null;
				
				}
				public String PortComment(){
				
				    return "";
				
				}
				public String PortPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PortOriginalDbColumnName(){
				
					return "Port";
				
				}

				
			    public String Sid;

				public String getSid () {
					return this.Sid;
				}

				public Boolean SidIsNullable(){
				    return true;
				}
				public Boolean SidIsKey(){
				    return false;
				}
				public Integer SidLength(){
				    return 4;
				}
				public Integer SidPrecision(){
				    return 0;
				}
				public String SidDefault(){
				
					return null;
				
				}
				public String SidComment(){
				
				    return "";
				
				}
				public String SidPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SidOriginalDbColumnName(){
				
					return "Sid";
				
				}

				
			    public String ServiceName;

				public String getServiceName () {
					return this.ServiceName;
				}

				public Boolean ServiceNameIsNullable(){
				    return true;
				}
				public Boolean ServiceNameIsKey(){
				    return false;
				}
				public Integer ServiceNameLength(){
				    return 6;
				}
				public Integer ServiceNamePrecision(){
				    return 0;
				}
				public String ServiceNameDefault(){
				
					return null;
				
				}
				public String ServiceNameComment(){
				
				    return "";
				
				}
				public String ServiceNamePattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String ServiceNameOriginalDbColumnName(){
				
					return "ServiceName";
				
				}

				
			    public String Schema;

				public String getSchema () {
					return this.Schema;
				}

				public Boolean SchemaIsNullable(){
				    return true;
				}
				public Boolean SchemaIsKey(){
				    return false;
				}
				public Integer SchemaLength(){
				    return 12;
				}
				public Integer SchemaPrecision(){
				    return 0;
				}
				public String SchemaDefault(){
				
					return null;
				
				}
				public String SchemaComment(){
				
				    return "";
				
				}
				public String SchemaPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String SchemaOriginalDbColumnName(){
				
					return "Schema";
				
				}

				
			    public String User;

				public String getUser () {
					return this.User;
				}

				public Boolean UserIsNullable(){
				    return true;
				}
				public Boolean UserIsKey(){
				    return false;
				}
				public Integer UserLength(){
				    return 12;
				}
				public Integer UserPrecision(){
				    return 0;
				}
				public String UserDefault(){
				
					return null;
				
				}
				public String UserComment(){
				
				    return "";
				
				}
				public String UserPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String UserOriginalDbColumnName(){
				
					return "User";
				
				}

				
			    public String Password;

				public String getPassword () {
					return this.Password;
				}

				public Boolean PasswordIsNullable(){
				    return true;
				}
				public Boolean PasswordIsKey(){
				    return false;
				}
				public Integer PasswordLength(){
				    return 11;
				}
				public Integer PasswordPrecision(){
				    return 0;
				}
				public String PasswordDefault(){
				
					return null;
				
				}
				public String PasswordComment(){
				
				    return "";
				
				}
				public String PasswordPattern(){
				
					return "dd-MM-yyyy";
				
				}
				public String PasswordOriginalDbColumnName(){
				
					return "Password";
				
				}

				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.Host = readString(dis);
					
					this.Port = readString(dis);
					
					this.Sid = readString(dis);
					
					this.ServiceName = readString(dis);
					
					this.Schema = readString(dis);
					
					this.User = readString(dis);
					
					this.Password = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// String
				
						writeString(this.Host,dos);
					
					// String
				
						writeString(this.Port,dos);
					
					// String
				
						writeString(this.Sid,dos);
					
					// String
				
						writeString(this.ServiceName,dos);
					
					// String
				
						writeString(this.Schema,dos);
					
					// String
				
						writeString(this.User,dos);
					
					// String
				
						writeString(this.Password,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("Host="+Host);
		sb.append(",Port="+Port);
		sb.append(",Sid="+Sid);
		sb.append(",ServiceName="+ServiceName);
		sb.append(",Schema="+Schema);
		sb.append(",User="+User);
		sb.append(",Password="+Password);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row35Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tFileInputXML_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row35Struct row35 = new row35Struct();




	
	/**
	 * [tJavaRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_2", false);
		start_Hash.put("tJavaRow_2", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row35");
					}
				
		int tos_count_tJavaRow_2 = 0;
		

int nb_line_tJavaRow_2 = 0;

 



/**
 * [tJavaRow_2 begin ] stop
 */



	
	/**
	 * [tFileInputXML_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileInputXML_2", false);
		start_Hash.put("tFileInputXML_2", System.currentTimeMillis());
		
	
	currentComponent="tFileInputXML_2";
	
	
		int tos_count_tFileInputXML_2 = 0;
		

	

int nb_line_tFileInputXML_2 = 0;

	String os_tFileInputXML_2 = System.getProperty("os.name").toLowerCase();
	boolean isWindows_tFileInputXML_2=false;
	if(os_tFileInputXML_2.indexOf("windows") > -1 || os_tFileInputXML_2.indexOf("nt") > -1){
		isWindows_tFileInputXML_2=true;
	}
class NameSpaceTool_tFileInputXML_2 {

    public java.util.HashMap<String, String> xmlNameSpaceMap = new java.util.HashMap<String, String>();
    
	private java.util.List<String> defualtNSPath = new java.util.ArrayList<String>();

    public void countNSMap(org.dom4j.Element el) {
        for (org.dom4j.Namespace ns : (java.util.List<org.dom4j.Namespace>) el.declaredNamespaces()) {
            if (ns.getPrefix().trim().length() == 0) {
                xmlNameSpaceMap.put("pre"+defualtNSPath.size(), ns.getURI());
                String path = "";
                org.dom4j.Element elTmp = el;
                while (elTmp != null) {
                	if (elTmp.getNamespacePrefix() != null && elTmp.getNamespacePrefix().length() > 0) {
                        path = "/" + elTmp.getNamespacePrefix() + ":" + elTmp.getName() + path;
                    } else {
                        path = "/" + elTmp.getName() + path;
                    }
                    elTmp = elTmp.getParent();
                }
                defualtNSPath.add(path);
            } else {
                xmlNameSpaceMap.put(ns.getPrefix(), ns.getURI());
            }

        }
        for (org.dom4j.Element e : (java.util.List<org.dom4j.Element>) el.elements()) {
            countNSMap(e);
        }
    }
    
    private final org.talend.xpath.XPathUtil util = new  org.talend.xpath.XPathUtil();
    
    {
    	util.setDefaultNSPath(defualtNSPath);
    }
    
	public String addDefaultNSPrefix(String path) {
		return util.addDefaultNSPrefix(path);
	}
	
	public String addDefaultNSPrefix(String relativeXpression, String basePath) {
		return util.addDefaultNSPrefix(relativeXpression,basePath);
	}
    
}

class XML_API_tFileInputXML_2{
	public boolean isDefNull(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null && node instanceof org.dom4j.Element) {
        	org.dom4j.Attribute attri = ((org.dom4j.Element)node).attribute("nil");
        	if(attri != null && ("true").equals(attri.getText())){
            	return true;
            }
        }
        return false;
    }

    public boolean isMissing(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        return node == null ? true : false;
    }

    public boolean isEmpty(org.dom4j.Node node) throws javax.xml.transform.TransformerException {
        if (node != null) {
            return node.getStringValue().isEmpty();
        }
        return false;
    }
}


org.dom4j.io.SAXReader reader_tFileInputXML_2 = new org.dom4j.io.SAXReader();
Object filename_tFileInputXML_2 = null;
try {
	filename_tFileInputXML_2 = context.BODEGA;
} catch(java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	
	System.err.println(e.getMessage());
	
}
if(filename_tFileInputXML_2 != null && filename_tFileInputXML_2 instanceof String && filename_tFileInputXML_2.toString().startsWith("//")){
	if (!isWindows_tFileInputXML_2){
		filename_tFileInputXML_2 = filename_tFileInputXML_2.toString().replaceFirst("//","/");
	}
}

boolean isValidFile_tFileInputXML_2 = true;
org.dom4j.Document doc_tFileInputXML_2 = null;
java.io.Closeable toClose_tFileInputXML_2 = null;
try{
	if(filename_tFileInputXML_2 instanceof java.io.InputStream){
		java.io.InputStream inputStream_tFileInputXML_2 = (java.io.InputStream)filename_tFileInputXML_2;
		toClose_tFileInputXML_2 = inputStream_tFileInputXML_2;
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(inputStream_tFileInputXML_2);
	}else{
		java.io.Reader unicodeReader_tFileInputXML_2 = new UnicodeReader(new java.io.FileInputStream(String.valueOf(filename_tFileInputXML_2)),"UTF-8");
		toClose_tFileInputXML_2 = unicodeReader_tFileInputXML_2;
		org.xml.sax.InputSource in_tFileInputXML_2= new org.xml.sax.InputSource(unicodeReader_tFileInputXML_2);
		doc_tFileInputXML_2 = reader_tFileInputXML_2.read(in_tFileInputXML_2);
	}
}catch(java.lang.Exception e){
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
	
	System.err.println(e.getMessage());
	isValidFile_tFileInputXML_2 = false;
} finally {
	if(toClose_tFileInputXML_2!=null) {
		toClose_tFileInputXML_2.close();
	}
}
if(isValidFile_tFileInputXML_2){
NameSpaceTool_tFileInputXML_2 nsTool_tFileInputXML_2 = new NameSpaceTool_tFileInputXML_2();
nsTool_tFileInputXML_2.countNSMap(doc_tFileInputXML_2.getRootElement());
java.util.HashMap<String,String> xmlNameSpaceMap_tFileInputXML_2 = nsTool_tFileInputXML_2.xmlNameSpaceMap;  

org.dom4j.XPath x_tFileInputXML_2 = doc_tFileInputXML_2.createXPath(nsTool_tFileInputXML_2.addDefaultNSPrefix("/connectionStrings"));  
x_tFileInputXML_2.setNamespaceURIs(xmlNameSpaceMap_tFileInputXML_2); 

java.util.List<org.dom4j.Node> nodeList_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)x_tFileInputXML_2.selectNodes(doc_tFileInputXML_2);	
XML_API_tFileInputXML_2 xml_api_tFileInputXML_2 = new XML_API_tFileInputXML_2();
String str_tFileInputXML_2 = "";
org.dom4j.Node node_tFileInputXML_2 = null;

//init all mapping xpaths
java.util.Map<Integer,org.dom4j.XPath> xpaths_tFileInputXML_2=new java.util.HashMap<Integer,org.dom4j.XPath>();
	class XPathUtil_tFileInputXML_2{
	
			   public void initXPaths_0(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			       java.util.HashMap<String,String> xmlNameSpaceMap){
			
	org.dom4j.XPath xpath_0 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Host","/connectionStrings"));
	xpath_0.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(0,xpath_0);
			
	org.dom4j.XPath xpath_1 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Port","/connectionStrings"));
	xpath_1.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(1,xpath_1);
			
	org.dom4j.XPath xpath_2 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Sid","/connectionStrings"));
	xpath_2.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(2,xpath_2);
			
	org.dom4j.XPath xpath_3 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("ServiceName","/connectionStrings"));
	xpath_3.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(3,xpath_3);
			
	org.dom4j.XPath xpath_4 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Schema","/connectionStrings"));
	xpath_4.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(4,xpath_4);
			
	org.dom4j.XPath xpath_5 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("User","/connectionStrings"));
	xpath_5.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(5,xpath_5);
			
	org.dom4j.XPath xpath_6 = org.dom4j.DocumentHelper.createXPath(nsTool.addDefaultNSPrefix("Password","/connectionStrings"));
	xpath_6.setNamespaceURIs(xmlNameSpaceMap);
	
			xpaths.put(6,xpath_6);
			
	     }
	   
	      public void initXPaths(java.util.Map<Integer,org.dom4j.XPath> xpaths,NameSpaceTool_tFileInputXML_2 nsTool,
			    java.util.HashMap<String,String> xmlNameSpaceMap){
			    
			        initXPaths_0(xpaths,nsTool, xmlNameSpaceMap);
			    
		   }
	}
	XPathUtil_tFileInputXML_2 xPathUtil_tFileInputXML_2 = new XPathUtil_tFileInputXML_2();
	xPathUtil_tFileInputXML_2.initXPaths(xpaths_tFileInputXML_2, nsTool_tFileInputXML_2, xmlNameSpaceMap_tFileInputXML_2);
for (org.dom4j.Node temp_tFileInputXML_2: nodeList_tFileInputXML_2) {
	if (nb_line_tFileInputXML_2>=50) {
	
		break;
	}
		nb_line_tFileInputXML_2++;
		
	row35 = null;			
	boolean whetherReject_tFileInputXML_2 = false;
	row35 = new row35Struct();
	try{
    Object obj0_tFileInputXML_2 = xpaths_tFileInputXML_2.get(0).evaluate(temp_tFileInputXML_2);
    if(obj0_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj0_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj0_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj0_tFileInputXML_2 instanceof String || obj0_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj0_tFileInputXML_2);
    } else if(obj0_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj0_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Host =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Host ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Host =null;
									}else{
		row35.Host = str_tFileInputXML_2;
	}
    Object obj1_tFileInputXML_2 = xpaths_tFileInputXML_2.get(1).evaluate(temp_tFileInputXML_2);
    if(obj1_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj1_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj1_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj1_tFileInputXML_2 instanceof String || obj1_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj1_tFileInputXML_2);
    } else if(obj1_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj1_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Port =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Port ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Port =null;
									}else{
		row35.Port = str_tFileInputXML_2;
	}
    Object obj2_tFileInputXML_2 = xpaths_tFileInputXML_2.get(2).evaluate(temp_tFileInputXML_2);
    if(obj2_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj2_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj2_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj2_tFileInputXML_2 instanceof String || obj2_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj2_tFileInputXML_2);
    } else if(obj2_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj2_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Sid =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Sid ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Sid =null;
									}else{
		row35.Sid = str_tFileInputXML_2;
	}
    Object obj3_tFileInputXML_2 = xpaths_tFileInputXML_2.get(3).evaluate(temp_tFileInputXML_2);
    if(obj3_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj3_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj3_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj3_tFileInputXML_2 instanceof String || obj3_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj3_tFileInputXML_2);
    } else if(obj3_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj3_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.ServiceName =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.ServiceName ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.ServiceName =null;
									}else{
		row35.ServiceName = str_tFileInputXML_2;
	}
    Object obj4_tFileInputXML_2 = xpaths_tFileInputXML_2.get(4).evaluate(temp_tFileInputXML_2);
    if(obj4_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj4_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj4_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj4_tFileInputXML_2 instanceof String || obj4_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj4_tFileInputXML_2);
    } else if(obj4_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj4_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Schema =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Schema ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Schema =null;
									}else{
		row35.Schema = str_tFileInputXML_2;
	}
    Object obj5_tFileInputXML_2 = xpaths_tFileInputXML_2.get(5).evaluate(temp_tFileInputXML_2);
    if(obj5_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj5_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj5_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj5_tFileInputXML_2 instanceof String || obj5_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj5_tFileInputXML_2);
    } else if(obj5_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj5_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.User =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.User ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.User =null;
									}else{
		row35.User = str_tFileInputXML_2;
	}
    Object obj6_tFileInputXML_2 = xpaths_tFileInputXML_2.get(6).evaluate(temp_tFileInputXML_2);
    if(obj6_tFileInputXML_2 == null) {
    	node_tFileInputXML_2 = null;
    	str_tFileInputXML_2 = "";
    	
    } else if(obj6_tFileInputXML_2 instanceof org.dom4j.Node) {
    	node_tFileInputXML_2 = (org.dom4j.Node)obj6_tFileInputXML_2;
    	str_tFileInputXML_2 = org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
    } else if(obj6_tFileInputXML_2 instanceof String || obj6_tFileInputXML_2 instanceof Number){
    	node_tFileInputXML_2 = temp_tFileInputXML_2;
    	str_tFileInputXML_2 = String.valueOf(obj6_tFileInputXML_2);
    } else if(obj6_tFileInputXML_2 instanceof java.util.List){
    	java.util.List<org.dom4j.Node> nodes_tFileInputXML_2 = (java.util.List<org.dom4j.Node>)obj6_tFileInputXML_2;
    	node_tFileInputXML_2 = nodes_tFileInputXML_2.size()>0 ? nodes_tFileInputXML_2.get(0) : null;
    	str_tFileInputXML_2 = node_tFileInputXML_2==null?"":org.jaxen.function.StringFunction.evaluate(node_tFileInputXML_2,org.jaxen.dom4j.DocumentNavigator.getInstance());
	}
									if(xml_api_tFileInputXML_2.isDefNull(node_tFileInputXML_2)){
											row35.Password =null;
									}else if(xml_api_tFileInputXML_2.isEmpty(node_tFileInputXML_2)){
										row35.Password ="";
									}else if(xml_api_tFileInputXML_2.isMissing(node_tFileInputXML_2 )){ 
										row35.Password =null;
									}else{
		row35.Password = str_tFileInputXML_2;
	} 
			
    } catch (java.lang.Exception e) {
globalMap.put("tFileInputXML_2_ERROR_MESSAGE",e.getMessage());
        whetherReject_tFileInputXML_2 = true;
                System.err.println(e.getMessage());
                row35 = null;
    }
			
			

 



/**
 * [tFileInputXML_2 begin ] stop
 */
	
	/**
	 * [tFileInputXML_2 main ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 


	tos_count_tFileInputXML_2++;

/**
 * [tFileInputXML_2 main ] stop
 */
	
	/**
	 * [tFileInputXML_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_begin ] stop
 */
// Start of branch "row35"
if(row35 != null) { 



	
	/**
	 * [tJavaRow_2 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row35"
						
						);
					}
					

    //Guarda en variables de contexto los parametros para la conexión a la bodega 
context.db_destino_Server = row35.Host;
context.db_destino_Port = row35.Port;
context.db_destino_ServiceName = row35.ServiceName;
context.db_destino_Schema = row35.Schema;
context.db_destino_Login = row35.User;
context.db_destino_Password = row35.Password;

    nb_line_tJavaRow_2++;   

 


	tos_count_tJavaRow_2++;

/**
 * [tJavaRow_2 main ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_begin ] stop
 */
	
	/**
	 * [tJavaRow_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 process_data_end ] stop
 */

} // End of branch "row35"




	
	/**
	 * [tFileInputXML_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 process_data_end ] stop
 */
	
	/**
	 * [tFileInputXML_2 end ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	


}
	}
	globalMap.put("tFileInputXML_2_NB_LINE",nb_line_tFileInputXML_2);

	

 

ok_Hash.put("tFileInputXML_2", true);
end_Hash.put("tFileInputXML_2", System.currentTimeMillis());




/**
 * [tFileInputXML_2 end ] stop
 */

	
	/**
	 * [tJavaRow_2 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

globalMap.put("tJavaRow_2_NB_LINE",nb_line_tJavaRow_2);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row35");
			  	}
			  	
 

ok_Hash.put("tJavaRow_2", true);
end_Hash.put("tJavaRow_2", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk9", 0, "ok");
				}
				tOracleConnection_2Process(globalMap);



/**
 * [tJavaRow_2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tFileInputXML_2 finally ] start
	 */

	

	
	
	currentComponent="tFileInputXML_2";
	
	

 



/**
 * [tFileInputXML_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_2 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_2";
	
	

 



/**
 * [tJavaRow_2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tFileInputXML_2_SUBPROCESS_STATE", 1);
	}
	


public void tOracleConnection_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;





	
	/**
	 * [tOracleConnection_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tOracleConnection_2", false);
		start_Hash.put("tOracleConnection_2", System.currentTimeMillis());
		
	
	currentComponent="tOracleConnection_2";
	
	
		int tos_count_tOracleConnection_2 = 0;
		
	

	
        String url_tOracleConnection_2 = "jdbc:oracle:thin:@(description=(address=(protocol=tcp)(host=" + context.db_destino_Server + ")(port=" + context.db_destino_Port + "))(connect_data=(service_name=" + context.db_destino_ServiceName + ")))";
    	globalMap.put("connectionType_" + "tOracleConnection_2", "ORACLE_SERVICE_NAME");
	String dbUser_tOracleConnection_2 = context.db_destino_Login;
	
	
		
	final String decryptedPassword_tOracleConnection_2 = context.db_destino_Password; 
		String dbPwd_tOracleConnection_2 = decryptedPassword_tOracleConnection_2;
	
	
	java.sql.Connection conn_tOracleConnection_2 = null;
	
		
			String driverClass_tOracleConnection_2 = "oracle.jdbc.OracleDriver";
			java.lang.Class jdbcclazz_tOracleConnection_2 = java.lang.Class.forName(driverClass_tOracleConnection_2);
			globalMap.put("driverClass_tOracleConnection_2", driverClass_tOracleConnection_2);
		
			java.util.Properties atnParamsPrope_tOracleConnection_2 = new java.util.Properties();
			    atnParamsPrope_tOracleConnection_2.put("user",dbUser_tOracleConnection_2);
			    atnParamsPrope_tOracleConnection_2.put("password",dbPwd_tOracleConnection_2);
			if(context.db_destino_AdditionalParams != null && !"\"\"".equals(context.db_destino_AdditionalParams) && !"".equals(context.db_destino_AdditionalParams)){
                atnParamsPrope_tOracleConnection_2.load(new java.io.ByteArrayInputStream(context.db_destino_AdditionalParams.replace("&", "\n").getBytes()));
            }
         
			conn_tOracleConnection_2 = java.sql.DriverManager.getConnection(url_tOracleConnection_2, atnParamsPrope_tOracleConnection_2);

		globalMap.put("conn_tOracleConnection_2", conn_tOracleConnection_2);
	if (null != conn_tOracleConnection_2) {
		
			conn_tOracleConnection_2.setAutoCommit(true);
	}
        globalMap.put("host_" + "tOracleConnection_2",context.db_destino_Server);
        globalMap.put("port_" + "tOracleConnection_2",context.db_destino_Port);
        globalMap.put("dbname_" + "tOracleConnection_2",context.db_destino_ServiceName);

	globalMap.put("dbschema_" + "tOracleConnection_2", context.db_destino_Schema);
	globalMap.put("username_" + "tOracleConnection_2",context.db_destino_Login);
	globalMap.put("password_" + "tOracleConnection_2",dbPwd_tOracleConnection_2);

 



/**
 * [tOracleConnection_2 begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 main ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 


	tos_count_tOracleConnection_2++;

/**
 * [tOracleConnection_2 main ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_begin ] stop
 */
	
	/**
	 * [tOracleConnection_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 process_data_end ] stop
 */
	
	/**
	 * [tOracleConnection_2 end ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 

ok_Hash.put("tOracleConnection_2", true);
end_Hash.put("tOracleConnection_2", System.currentTimeMillis());




/**
 * [tOracleConnection_2 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tOracleConnection_2 finally ] start
	 */

	

	
	
	currentComponent="tOracleConnection_2";
	
	

 



/**
 * [tOracleConnection_2 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tOracleConnection_2_SUBPROCESS_STATE", 1);
	}
	


public static class row32Struct implements routines.system.IPersistableRow<row32Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row32Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row31Struct implements routines.system.IPersistableRow<row31Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row31Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row30Struct implements routines.system.IPersistableRow<row30Struct> {
    final static byte[] commonByteArrayLock_REP_INICIO_Odontologia = new byte[0];
    static byte[] commonByteArray_REP_INICIO_Odontologia = new byte[0];

	
			    public java.util.Date moment;

				public java.util.Date getMoment () {
					return this.moment;
				}

				public Boolean momentIsNullable(){
				    return true;
				}
				public Boolean momentIsKey(){
				    return false;
				}
				public Integer momentLength(){
				    return 0;
				}
				public Integer momentPrecision(){
				    return 0;
				}
				public String momentDefault(){
				
					return null;
				
				}
				public String momentComment(){
				
				    return null;
				
				}
				public String momentPattern(){
				
					return "yyyy-MM-dd HH:mm:ss";
				
				}
				public String momentOriginalDbColumnName(){
				
					return "moment";
				
				}

				
			    public String pid;

				public String getPid () {
					return this.pid;
				}

				public Boolean pidIsNullable(){
				    return true;
				}
				public Boolean pidIsKey(){
				    return false;
				}
				public Integer pidLength(){
				    return 20;
				}
				public Integer pidPrecision(){
				    return 0;
				}
				public String pidDefault(){
				
					return null;
				
				}
				public String pidComment(){
				
				    return null;
				
				}
				public String pidPattern(){
				
				    return null;
				
				}
				public String pidOriginalDbColumnName(){
				
					return "pid";
				
				}

				
			    public String root_pid;

				public String getRoot_pid () {
					return this.root_pid;
				}

				public Boolean root_pidIsNullable(){
				    return true;
				}
				public Boolean root_pidIsKey(){
				    return false;
				}
				public Integer root_pidLength(){
				    return 20;
				}
				public Integer root_pidPrecision(){
				    return 0;
				}
				public String root_pidDefault(){
				
					return null;
				
				}
				public String root_pidComment(){
				
				    return null;
				
				}
				public String root_pidPattern(){
				
				    return null;
				
				}
				public String root_pidOriginalDbColumnName(){
				
					return "root_pid";
				
				}

				
			    public String father_pid;

				public String getFather_pid () {
					return this.father_pid;
				}

				public Boolean father_pidIsNullable(){
				    return true;
				}
				public Boolean father_pidIsKey(){
				    return false;
				}
				public Integer father_pidLength(){
				    return 20;
				}
				public Integer father_pidPrecision(){
				    return 0;
				}
				public String father_pidDefault(){
				
					return null;
				
				}
				public String father_pidComment(){
				
				    return null;
				
				}
				public String father_pidPattern(){
				
				    return null;
				
				}
				public String father_pidOriginalDbColumnName(){
				
					return "father_pid";
				
				}

				
			    public String project;

				public String getProject () {
					return this.project;
				}

				public Boolean projectIsNullable(){
				    return true;
				}
				public Boolean projectIsKey(){
				    return false;
				}
				public Integer projectLength(){
				    return 50;
				}
				public Integer projectPrecision(){
				    return 0;
				}
				public String projectDefault(){
				
					return null;
				
				}
				public String projectComment(){
				
				    return null;
				
				}
				public String projectPattern(){
				
				    return null;
				
				}
				public String projectOriginalDbColumnName(){
				
					return "project";
				
				}

				
			    public String job;

				public String getJob () {
					return this.job;
				}

				public Boolean jobIsNullable(){
				    return true;
				}
				public Boolean jobIsKey(){
				    return false;
				}
				public Integer jobLength(){
				    return 255;
				}
				public Integer jobPrecision(){
				    return 0;
				}
				public String jobDefault(){
				
					return null;
				
				}
				public String jobComment(){
				
				    return null;
				
				}
				public String jobPattern(){
				
				    return null;
				
				}
				public String jobOriginalDbColumnName(){
				
					return "job";
				
				}

				
			    public String context;

				public String getContext () {
					return this.context;
				}

				public Boolean contextIsNullable(){
				    return true;
				}
				public Boolean contextIsKey(){
				    return false;
				}
				public Integer contextLength(){
				    return 50;
				}
				public Integer contextPrecision(){
				    return 0;
				}
				public String contextDefault(){
				
					return null;
				
				}
				public String contextComment(){
				
				    return null;
				
				}
				public String contextPattern(){
				
				    return null;
				
				}
				public String contextOriginalDbColumnName(){
				
					return "context";
				
				}

				
			    public Integer priority;

				public Integer getPriority () {
					return this.priority;
				}

				public Boolean priorityIsNullable(){
				    return true;
				}
				public Boolean priorityIsKey(){
				    return false;
				}
				public Integer priorityLength(){
				    return 3;
				}
				public Integer priorityPrecision(){
				    return 0;
				}
				public String priorityDefault(){
				
					return "";
				
				}
				public String priorityComment(){
				
				    return null;
				
				}
				public String priorityPattern(){
				
				    return null;
				
				}
				public String priorityOriginalDbColumnName(){
				
					return "priority";
				
				}

				
			    public String type;

				public String getType () {
					return this.type;
				}

				public Boolean typeIsNullable(){
				    return true;
				}
				public Boolean typeIsKey(){
				    return false;
				}
				public Integer typeLength(){
				    return 255;
				}
				public Integer typePrecision(){
				    return 0;
				}
				public String typeDefault(){
				
					return null;
				
				}
				public String typeComment(){
				
				    return null;
				
				}
				public String typePattern(){
				
				    return null;
				
				}
				public String typeOriginalDbColumnName(){
				
					return "type";
				
				}

				
			    public String origin;

				public String getOrigin () {
					return this.origin;
				}

				public Boolean originIsNullable(){
				    return true;
				}
				public Boolean originIsKey(){
				    return false;
				}
				public Integer originLength(){
				    return 255;
				}
				public Integer originPrecision(){
				    return 0;
				}
				public String originDefault(){
				
					return null;
				
				}
				public String originComment(){
				
				    return null;
				
				}
				public String originPattern(){
				
				    return null;
				
				}
				public String originOriginalDbColumnName(){
				
					return "origin";
				
				}

				
			    public String message;

				public String getMessage () {
					return this.message;
				}

				public Boolean messageIsNullable(){
				    return true;
				}
				public Boolean messageIsKey(){
				    return false;
				}
				public Integer messageLength(){
				    return 255;
				}
				public Integer messagePrecision(){
				    return 0;
				}
				public String messageDefault(){
				
					return null;
				
				}
				public String messageComment(){
				
				    return null;
				
				}
				public String messagePattern(){
				
				    return null;
				
				}
				public String messageOriginalDbColumnName(){
				
					return "message";
				
				}

				
			    public Integer code;

				public Integer getCode () {
					return this.code;
				}

				public Boolean codeIsNullable(){
				    return true;
				}
				public Boolean codeIsKey(){
				    return false;
				}
				public Integer codeLength(){
				    return 3;
				}
				public Integer codePrecision(){
				    return 0;
				}
				public String codeDefault(){
				
					return "";
				
				}
				public String codeComment(){
				
				    return null;
				
				}
				public String codePattern(){
				
				    return null;
				
				}
				public String codeOriginalDbColumnName(){
				
					return "code";
				
				}

				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}
	
	private java.util.Date readDate(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = unmarshaller.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(unmarshaller.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }
    
    private void writeDate(java.util.Date date1, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(date1 == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeLong(date1.getTime());
    	}
    }

	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}
	
	private String readString(org.jboss.marshalling.Unmarshaller unmarshaller) throws IOException{
		String strReturn = null;
		int length = 0;
        length = unmarshaller.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_REP_INICIO_Odontologia.length) {
				if(length < 1024 && commonByteArray_REP_INICIO_Odontologia.length == 0) {
   					commonByteArray_REP_INICIO_Odontologia = new byte[1024];
				} else {
   					commonByteArray_REP_INICIO_Odontologia = new byte[2 * length];
   				}
			}
			unmarshaller.readFully(commonByteArray_REP_INICIO_Odontologia, 0, length);
			strReturn = new String(commonByteArray_REP_INICIO_Odontologia, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
    
    private void writeString(String str, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(str == null) {
			marshaller.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
            marshaller.writeInt(byteArray.length);
            marshaller.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}
	
	private Integer readInteger(org.jboss.marshalling.Unmarshaller dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}
	
	private void writeInteger(Integer intNum, org.jboss.marshalling.Marshaller marshaller) throws IOException{
		if(intNum == null) {
			marshaller.writeByte(-1);
		} else {
			marshaller.writeByte(0);
			marshaller.writeInt(intNum);
    	}
	}

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }
    
    public void readData(org.jboss.marshalling.Unmarshaller dis) {

		synchronized(commonByteArrayLock_REP_INICIO_Odontologia) {

        	try {

        		int length = 0;
		
					this.moment = readDate(dis);
					
					this.pid = readString(dis);
					
					this.root_pid = readString(dis);
					
					this.father_pid = readString(dis);
					
					this.project = readString(dis);
					
					this.job = readString(dis);
					
					this.context = readString(dis);
					
						this.priority = readInteger(dis);
					
					this.type = readString(dis);
					
					this.origin = readString(dis);
					
					this.message = readString(dis);
					
						this.code = readInteger(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }
    
    public void writeData(org.jboss.marshalling.Marshaller dos) {
        try {

		
					// java.util.Date
				
						writeDate(this.moment,dos);
					
					// String
				
						writeString(this.pid,dos);
					
					// String
				
						writeString(this.root_pid,dos);
					
					// String
				
						writeString(this.father_pid,dos);
					
					// String
				
						writeString(this.project,dos);
					
					// String
				
						writeString(this.job,dos);
					
					// String
				
						writeString(this.context,dos);
					
					// Integer
				
						writeInteger(this.priority,dos);
					
					// String
				
						writeString(this.type,dos);
					
					// String
				
						writeString(this.origin,dos);
					
					// String
				
						writeString(this.message,dos);
					
					// Integer
				
						writeInteger(this.code,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("moment="+String.valueOf(moment));
		sb.append(",pid="+pid);
		sb.append(",root_pid="+root_pid);
		sb.append(",father_pid="+father_pid);
		sb.append(",project="+project);
		sb.append(",job="+job);
		sb.append(",context="+context);
		sb.append(",priority="+String.valueOf(priority));
		sb.append(",type="+type);
		sb.append(",origin="+origin);
		sb.append(",message="+message);
		sb.append(",code="+String.valueOf(code));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row30Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public void tLogCatcher_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	

	
		String iterateId = "";
	
	
	String currentComponent = "";
	String cLabel =  null;
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {
			// TDI-39566 avoid throwing an useless Exception
			boolean resumeIt = true;
			if (globalResumeTicket == false && resumeEntryMethodName != null) {
				String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
				resumeIt = resumeEntryMethodName.equals(currentMethodName);
			}
			if (resumeIt || globalResumeTicket) { //start the resume
				globalResumeTicket = true;



		row30Struct row30 = new row30Struct();
row30Struct row31 = row30;
row32Struct row32 = new row32Struct();






	
	/**
	 * [tRunJob_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tRunJob_1", false);
		start_Hash.put("tRunJob_1", System.currentTimeMillis());
		
	
	currentComponent="tRunJob_1";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row32");
					}
				
		int tos_count_tRunJob_1 = 0;
		
class DealChildJobLibrary_tRunJob_1 {

	public String replaceJarPathsFromCrcMap(String originalClassPathLine) throws java.lang.Exception {
		String classPathLine = "";
		String crcMapPath = new java.io.File("../crcMap").getCanonicalPath();
		if (isNeedAddLibsPath( crcMapPath)) {
			java.util.Map<String, String> crcMap = null;
			java.io.ObjectInputStream ois = new java.io.ObjectInputStream(new java.io.FileInputStream(crcMapPath)) {
				@Override
				public Class<?> resolveClass(java.io.ObjectStreamClass desc) throws java.io.IOException, ClassNotFoundException {
					if(!"java.util.HashMap".equals(desc.getName())) {
						throw new java.io.InvalidClassException("Unauthorized deserialization attempt : " + desc.getName());
					}
					return super.resolveClass(desc);
				}
			};
			crcMap = (java.util.Map<String, String>) ois.readObject();
			ois.close();
			classPathLine = addLibsPath(originalClassPathLine, crcMap);
		} else {
			classPathLine = originalClassPathLine;
		}
		return classPathLine;
	}
	
	private boolean isNeedAddLibsPath(String crcMapPath) {
		if (!(new java.io.File(crcMapPath).exists())) {// when not use cache
			return false;
		}
		return true;
	}
	
	
	private String addLibsPath(String line, java.util.Map<String, String> crcMap) {
		for (java.util.Map.Entry<String, String> entry : crcMap.entrySet()) {
			line = adaptLibPaths(line, entry);
		}
		return line;
	}
	
	private String adaptLibPaths(String line, java.util.Map.Entry<String, String> entry) {
		String jarName = entry.getValue();
		String crc = entry.getKey();
		String libStringFinder = "../lib/" + jarName;
		if (line.contains(libStringFinder)) {
			line = line.replace(libStringFinder, "../../../cache/lib/" + crc + "/" + jarName);
		} else if (line.contains(":$ROOT_PATH/" + jarName + ":")) {
			line = line.replace(":$ROOT_PATH/" + jarName + ":", ":$ROOT_PATH/../../../cache/lib/" + crc + "/" + jarName + ":");
		} else if (line.contains(";" + jarName + ";")) {
			line = line.replace(";" + jarName + ";", ";../../../cache/lib/" + crc + "/" + jarName + ";");
		}
		return line;
	}
	
}
	DealChildJobLibrary_tRunJob_1 dealChildJobLibrary_tRunJob_1 = new DealChildJobLibrary_tRunJob_1();

	class JVMArgumentHelper_tRunJob_1 {
		
		
		
		private void addClasspath(java.util.List<String> target_argument_list, String job_origin_classpath) {
			
			String extra_classpath = null;
			String path_separator = System.getProperty("path.separator");
			if (path_separator != null && path_separator.length() > 1) {
				throw new RuntimeException("path separator should be single character");
			}
			
			if(extra_classpath!=null && !extra_classpath.isEmpty()) {
				if(extra_classpath.endsWith(path_separator)) {
					target_argument_list.add(extra_classpath+job_origin_classpath);
				} else if(extra_classpath.contains(path_separator)) {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				} else if(extra_classpath.endsWith(":")) {
					target_argument_list.add(extra_classpath.replace(":", path_separator)+job_origin_classpath);
				} else if(extra_classpath.endsWith(";")) {
					target_argument_list.add(extra_classpath.replace(";", path_separator)+job_origin_classpath);
				} else if(extra_classpath.contains(":")) {
					target_argument_list.add(concatStr(extra_classpath.replace(":", path_separator), path_separator, job_origin_classpath));
				} else if(extra_classpath.contains(";")) {
					target_argument_list.add(concatStr(extra_classpath.replace(";", path_separator), path_separator, job_origin_classpath));
				} else {
					target_argument_list.add(concatStr(extra_classpath, path_separator, job_origin_classpath));
				}
				return;
			}
			
			target_argument_list.add(job_origin_classpath);
		}
		
		private String concatStr(String s1, String s2, String s3) {
			java.lang.StringBuilder strB = new java.lang.StringBuilder();
			strB.append(s1).append(s2).append(s3);
			return strB.toString();
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child) {
			addArgumentsTo(target_argument_list, argument_from_child, false);
		}
		
		public void addArgumentsTo(java.util.List<String> target_argument_list, String argument_from_child, boolean isCP) {
			if(isCP) {
				addClasspath(target_argument_list, argument_from_child);
				return;
			}
		
			
			
			
			target_argument_list.add(argument_from_child);
			
		}
		
		
	}
	
	JVMArgumentHelper_tRunJob_1 jvm_argument_helper_tRunJob_1 = new JVMArgumentHelper_tRunJob_1();
	
	String audit_jar_path_tRunJob_1 = System.getProperty("classpath.extended");
	

 



/**
 * [tRunJob_1 begin ] stop
 */



	
	/**
	 * [tJavaRow_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_3", false);
		start_Hash.put("tJavaRow_3", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row31");
					}
				
		int tos_count_tJavaRow_3 = 0;
		

int nb_line_tJavaRow_3 = 0;

 



/**
 * [tJavaRow_3 begin ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tFileOutputDelimited_2", false);
		start_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());
		
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat) {
						runStat.updateStatOnConnection(resourceMap,iterateId,0,0,"row30");
					}
				
		int tos_count_tFileOutputDelimited_2 = 0;
		

String fileName_tFileOutputDelimited_2 = "";
    fileName_tFileOutputDelimited_2 = (new java.io.File(context.LOGS_ERROR)).getAbsolutePath().replace("\\","/");
    String fullName_tFileOutputDelimited_2 = null;
    String extension_tFileOutputDelimited_2 = null;
    String directory_tFileOutputDelimited_2 = null;
    if((fileName_tFileOutputDelimited_2.indexOf("/") != -1)) {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") < fileName_tFileOutputDelimited_2.lastIndexOf("/")) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        }
        directory_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("/"));
    } else {
        if(fileName_tFileOutputDelimited_2.lastIndexOf(".") != -1) {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(0, fileName_tFileOutputDelimited_2.lastIndexOf("."));
            extension_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2.substring(fileName_tFileOutputDelimited_2.lastIndexOf("."));
        } else {
            fullName_tFileOutputDelimited_2 = fileName_tFileOutputDelimited_2;
            extension_tFileOutputDelimited_2 = "";
        }
        directory_tFileOutputDelimited_2 = "";
    }
    boolean isFileGenerated_tFileOutputDelimited_2 = true;
    java.io.File filetFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
    globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
            int nb_line_tFileOutputDelimited_2 = 0;
            int splitedFileNo_tFileOutputDelimited_2 = 0;
            int currentRow_tFileOutputDelimited_2 = 0;

            final String OUT_DELIM_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:FIELDSEPARATOR */";"/** End field tFileOutputDelimited_2:FIELDSEPARATOR */;

            final String OUT_DELIM_ROWSEP_tFileOutputDelimited_2 = /** Start field tFileOutputDelimited_2:ROWSEPARATOR */"\n"/** End field tFileOutputDelimited_2:ROWSEPARATOR */;

                    //create directory only if not exists
                    if(directory_tFileOutputDelimited_2 != null && directory_tFileOutputDelimited_2.trim().length() != 0) {
                        java.io.File dir_tFileOutputDelimited_2 = new java.io.File(directory_tFileOutputDelimited_2);
                        if(!dir_tFileOutputDelimited_2.exists()) {
                            dir_tFileOutputDelimited_2.mkdirs();
                        }
                    }

                        //routines.system.Row
                        java.io.Writer outtFileOutputDelimited_2 = null;

                        java.io.File fileToDelete_tFileOutputDelimited_2 = new java.io.File(fileName_tFileOutputDelimited_2);
                        if(fileToDelete_tFileOutputDelimited_2.exists()) {
                            fileToDelete_tFileOutputDelimited_2.delete();
                        }
                        outtFileOutputDelimited_2 = new java.io.BufferedWriter(new java.io.OutputStreamWriter(
                        new java.io.FileOutputStream(fileName_tFileOutputDelimited_2, false),"ISO-8859-15"));
                resourceMap.put("out_tFileOutputDelimited_2", outtFileOutputDelimited_2);
                                    if(filetFileOutputDelimited_2.length()==0){
                                        outtFileOutputDelimited_2.write("moment");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("root_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("father_pid");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("project");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("job");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("context");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("priority");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("type");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("origin");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("message");
                                            outtFileOutputDelimited_2.write(OUT_DELIM_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.write("code");
                                        outtFileOutputDelimited_2.write(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);
                                        outtFileOutputDelimited_2.flush();
                                    }


resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

 



/**
 * [tFileOutputDelimited_2 begin ] stop
 */



	
	/**
	 * [tLogCatcher_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogCatcher_1", false);
		start_Hash.put("tLogCatcher_1", System.currentTimeMillis());
		
	
	currentComponent="tLogCatcher_1";
	
	
		int tos_count_tLogCatcher_1 = 0;
		

try {
	for (LogCatcherUtils.LogCatcherMessage lcm : tLogCatcher_1.getMessages()) {
		row30.type = lcm.getType();
		row30.origin = (lcm.getOrigin()==null || lcm.getOrigin().length()<1 ? null : lcm.getOrigin());
		row30.priority = lcm.getPriority();
		row30.message = lcm.getMessage();
		row30.code = lcm.getCode();
		
		row30.moment = java.util.Calendar.getInstance().getTime();
	
    	row30.pid = pid;
		row30.root_pid = rootPid;
		row30.father_pid = fatherPid;
	
    	row30.project = projectName;
    	row30.job = jobName;
    	row30.context = contextStr;
    		
 



/**
 * [tLogCatcher_1 begin ] stop
 */
	
	/**
	 * [tLogCatcher_1 main ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 


	tos_count_tLogCatcher_1++;

/**
 * [tLogCatcher_1 main ] stop
 */
	
	/**
	 * [tLogCatcher_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_begin ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 main ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row30"
						
						);
					}
					


                    StringBuilder sb_tFileOutputDelimited_2 = new StringBuilder();
                            if(row30.moment != null) {
                        sb_tFileOutputDelimited_2.append(
                            FormatterUtils.format_Date(row30.moment, "yyyy-MM-dd HH:mm:ss")
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.root_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.root_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.father_pid != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.father_pid
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.project != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.project
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.job != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.job
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.context != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.context
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.priority != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.priority
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.type != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.type
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.origin != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.origin
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.message != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.message
                        );
                            }
                            sb_tFileOutputDelimited_2.append(OUT_DELIM_tFileOutputDelimited_2);
                            if(row30.code != null) {
                        sb_tFileOutputDelimited_2.append(
                            row30.code
                        );
                            }
                    sb_tFileOutputDelimited_2.append(OUT_DELIM_ROWSEP_tFileOutputDelimited_2);


                    nb_line_tFileOutputDelimited_2++;
                    resourceMap.put("nb_line_tFileOutputDelimited_2", nb_line_tFileOutputDelimited_2);

                        outtFileOutputDelimited_2.write(sb_tFileOutputDelimited_2.toString());




 
     row31 = row30;


	tos_count_tFileOutputDelimited_2++;

/**
 * [tFileOutputDelimited_2 main ] stop
 */
	
	/**
	 * [tFileOutputDelimited_2 process_data_begin ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_begin ] stop
 */

	
	/**
	 * [tJavaRow_3 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row31"
						
						);
					}
					

    /*System.out.println("Error");
System.out.println("Fecha: "+row31.moment);
System.out.println("pid: "+ row31.pid );
System.out.println("root_pid: "+ row31.root_pid);
System.out.println("father_pid: "+ row31.father_pid);
System.out.println("project " + row31.project);
System.out.println("job: "+ row31.job);
System.out.println("context: "+ row31.context);
System.out.println("priority: "+ row31.priority);
System.out.println("type: "+ row31.type);
System.out.println("origin: "+ row31.origin);
System.out.println("message: "+ row31.message);
System.out.println("code: "+ row31.code);*/

context.ESTADO_EXEC = "Fail";

    nb_line_tJavaRow_3++;   

 


	tos_count_tJavaRow_3++;

/**
 * [tJavaRow_3 main ] stop
 */
	
	/**
	 * [tJavaRow_3 process_data_begin ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_begin ] stop
 */

	
	/**
	 * [tRunJob_1 main ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
					if(execStat){
						runStat.updateStatOnConnection(iterateId,1,1
						
							,"row32"
						
						);
					}
					
	java.util.List<String> paraList_tRunJob_1 = new java.util.ArrayList<String>();
	
			
			String osName_tRunJob_1 = System.getProperty("os.name");
			if (osName_tRunJob_1 != null && osName_tRunJob_1.toLowerCase(java.util.Locale.US).startsWith("win")){
				
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
              					String classpath_tRunJob_1_5 = ".;../lib/routines.jar;../lib/log4j-slf4j-impl-2.17.1.jar;../lib/log4j-api-2.17.1.jar;../lib/log4j-core-2.17.1.jar;../lib/activation-1.1.jar;../lib/jakarta.mail-1.6.7.jar;../lib/xpathutil-1.0.0.jar;../lib/slf4j-api-1.7.34.jar;../lib/crypto-utils-7.1.16.jar;../lib/jboss-marshalling-2.0.12.Final.jar;../lib/dom4j-2.1.3.jar;../lib/jaxen-1.1.6.jar;mail_1_3.jar;";
              					
              					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
	        					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5), true);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
		      					jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "%*");
		      				
			} else {
	      		
						paraList_tRunJob_1.add("java");
						String m2 = System.getProperty("talend.component.manager.m2.repository");
						if (m2 != null){
							paraList_tRunJob_1.add("-Dtalend.component.manager.m2.repository=" + m2);
						}
						
						if (Boolean.getBoolean("propagateLoggingConfiguration")) {
							String log4j1_config_tRunJob_1 = System.getProperty("log4j.configuration");
							if (log4j1_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configuration=" + log4j1_config_tRunJob_1);
							}
							String log4j2_config_tRunJob_1 = System.getProperty("log4j.configurationFile");
							if (log4j2_config_tRunJob_1 != null){
								paraList_tRunJob_1.add("-Dlog4j.configurationFile=" + log4j2_config_tRunJob_1);
							}
							if (log4j1_config_tRunJob_1 != null || log4j2_config_tRunJob_1 != null) {
								paraList_tRunJob_1.add("-DpropagateLoggingConfiguration=true");
							}
						}
						
						if(enableLogStash){
							System.getProperties().stringPropertyNames().stream()
								.filter(it -> it.startsWith("audit."))
								.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
						}
							
						System.getProperties().stringPropertyNames().stream()
							.filter(it -> it.startsWith("runtime.lineage.") || "classpath.extended".equals(it))
							.forEach(key -> paraList_tRunJob_1.add("-D" + key + "=" + System.getProperty(key)));
					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Dtalend.component.manager.m2.repository=../lib");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xms256M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-Xmx1024M");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "-cp");
		      				
		      					String classpath_tRunJob_1_5 = ".:$ROOT_PATH:$ROOT_PATH/../lib/routines.jar:$ROOT_PATH/../lib/log4j-slf4j-impl-2.17.1.jar:$ROOT_PATH/../lib/log4j-api-2.17.1.jar:$ROOT_PATH/../lib/log4j-core-2.17.1.jar:$ROOT_PATH/../lib/activation-1.1.jar:$ROOT_PATH/../lib/jakarta.mail-1.6.7.jar:$ROOT_PATH/../lib/xpathutil-1.0.0.jar:$ROOT_PATH/../lib/slf4j-api-1.7.34.jar:$ROOT_PATH/../lib/crypto-utils-7.1.16.jar:$ROOT_PATH/../lib/jboss-marshalling-2.0.12.Final.jar:$ROOT_PATH/../lib/dom4j-2.1.3.jar:$ROOT_PATH/../lib/jaxen-1.1.6.jar:$ROOT_PATH/mail_1_3.jar:";
		      					
		      					if(audit_jar_path_tRunJob_1!=null && !audit_jar_path_tRunJob_1.isEmpty()) {
		      						classpath_tRunJob_1_5 += audit_jar_path_tRunJob_1;
		      					}
		      					
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, dealChildJobLibrary_tRunJob_1.replaceJarPathsFromCrcMap(classpath_tRunJob_1_5).replace("$ROOT_PATH",System.getProperty("user.dir")), true);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "rep_inicio.mail_1_3.Mail");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_pid="+pid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--root_pid="+rootPid);
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--father_node=tRunJob_1");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "--context=Default");
		      				
								jvm_argument_helper_tRunJob_1.addArgumentsTo(paraList_tRunJob_1, "$@");
		      				
			}

			
			
	  	
		if(enableLogStash){
			paraList_tRunJob_1.add("--audit.enabled="+enableLogStash);
		}
		
	//for feature:10589
	
		paraList_tRunJob_1.add("--stat_port=" + null);
	

	if(resuming_logs_dir_path != null){
		paraList_tRunJob_1.add("--resuming_logs_dir_path=" + resuming_logs_dir_path);
	}
	String childResumePath_tRunJob_1 = ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path);
	String tRunJobName_tRunJob_1 = ResumeUtil.getRighttRunJob(resuming_checkpoint_path);
	if("tRunJob_1".equals(tRunJobName_tRunJob_1) && childResumePath_tRunJob_1 != null){
		paraList_tRunJob_1.add("--resuming_checkpoint_path=" + ResumeUtil.getChildJobCheckPointPath(resuming_checkpoint_path));
	}
	paraList_tRunJob_1.add("--parent_part_launcher=JOB:" + jobName + "/NODE:tRunJob_1");
	
	java.util.Map<String, Object> parentContextMap_tRunJob_1 = new java.util.HashMap<String, Object>();

	

	Object obj_tRunJob_1 = null;

	
		obj_tRunJob_1 = row32.moment;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param moment=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param moment=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param moment=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("moment", obj_tRunJob_1);
	
		obj_tRunJob_1 = row32.project;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param project=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param project=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param project=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("project", obj_tRunJob_1);
	
		obj_tRunJob_1 = row32.job;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param job=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param job=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param job=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("job", obj_tRunJob_1);
	
		obj_tRunJob_1 = row32.context;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param context=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param context=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param context=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("context", obj_tRunJob_1);
	
		obj_tRunJob_1 = row32.origin;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param origin=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param origin=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param origin=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("origin", obj_tRunJob_1);
	
		obj_tRunJob_1 = row32.message;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param message=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param message=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param message=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("message", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_origen_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_origen=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_origen=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_origen=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_origen", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Server;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param server_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param server_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param server_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("server_destino", obj_tRunJob_1);
	
		obj_tRunJob_1 = context.db_destino_Login;
		if(obj_tRunJob_1!=null) {
			if (obj_tRunJob_1.getClass().getName().equals("java.util.Date")) {
				paraList_tRunJob_1.add("--context_param user_destino=" + ((java.util.Date) obj_tRunJob_1).getTime());
			} else {
				
					paraList_tRunJob_1.add("--context_param user_destino=" + RuntimeUtils.tRunJobConvertContext(obj_tRunJob_1));
					
				
			}
		} else {
			paraList_tRunJob_1.add("--context_param user_destino=" + NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY);
		}
		
		parentContextMap_tRunJob_1.put("user_destino", obj_tRunJob_1);
	
	
				class ConsoleHelper_tRunJob_1 {
					private Thread getNormalThread(Process process) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getInputStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											System.out.println(line);
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}

					private Thread getErrorThread(Process process, StringBuffer sb) {
						return new Thread() {
							public void run() {
								try {
									java.io.BufferedReader reader = new java.io.BufferedReader(
											new java.io.InputStreamReader(
													process.getErrorStream()));
									String line = "";
									try {
										while ((line = reader.readLine()) != null) {
											sb.append(line)
													.append("\n");
										}
									} finally {
										reader.close();
									}
								} catch (java.io.IOException ioe) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",ioe.getMessage());
						            
									ioe.printStackTrace();
								}
							}
						};
					}
				}
				ConsoleHelper_tRunJob_1 consoleHelper_tRunJob_1 = new ConsoleHelper_tRunJob_1();

		Runtime runtime_tRunJob_1 = Runtime.getRuntime();
		Process ps_tRunJob_1 = null;
		
		//0 indicates normal termination
        int result_tRunJob_1;
        StringBuffer errorMsg_tRunJob_1 = new StringBuffer();
        try {
            ps_tRunJob_1 = runtime_tRunJob_1.exec((String[])paraList_tRunJob_1.toArray(new String[paraList_tRunJob_1.size()]));

            Thread normal_tRunJob_1 = consoleHelper_tRunJob_1.getNormalThread(ps_tRunJob_1);
            normal_tRunJob_1.start();

            Thread error_tRunJob_1 = consoleHelper_tRunJob_1.getErrorThread(ps_tRunJob_1, errorMsg_tRunJob_1);
            error_tRunJob_1.start();

            result_tRunJob_1 = ps_tRunJob_1.waitFor();
            normal_tRunJob_1.join();
            error_tRunJob_1.join();
        } catch (ThreadDeath tde) {
globalMap.put("tRunJob_1_ERROR_MESSAGE",tde.getMessage());
            ps_tRunJob_1.destroy();
            throw tde;
        }

		globalMap.put("tRunJob_1_CHILD_RETURN_CODE",result_tRunJob_1);
		if(result_tRunJob_1 != 0){
   			globalMap.put("tRunJob_1_CHILD_EXCEPTION_STACKTRACE",errorMsg_tRunJob_1.toString());
			  
	    		throw new RuntimeException("Child job returns " + result_tRunJob_1 + ". It doesn't terminate normally.\n" + errorMsg_tRunJob_1.toString());
			
  		}

		

 


	tos_count_tRunJob_1++;

/**
 * [tRunJob_1 main ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_begin ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_begin ] stop
 */
	
	/**
	 * [tRunJob_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

 



/**
 * [tRunJob_1 process_data_end ] stop
 */



	
	/**
	 * [tJavaRow_3 process_data_end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 process_data_end ] stop
 */



	
	/**
	 * [tFileOutputDelimited_2 process_data_end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	

 



/**
 * [tFileOutputDelimited_2 process_data_end ] stop
 */



	
	/**
	 * [tLogCatcher_1 process_data_end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 process_data_end ] stop
 */
	
	/**
	 * [tLogCatcher_1 end ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	
	}
} catch (Exception e_tLogCatcher_1) {
globalMap.put("tLogCatcher_1_ERROR_MESSAGE",e_tLogCatcher_1.getMessage());
	logIgnoredError(String.format("tLogCatcher_1 - tLogCatcher failed to process log message(s) due to internal error: %s", e_tLogCatcher_1), e_tLogCatcher_1);
}

 

ok_Hash.put("tLogCatcher_1", true);
end_Hash.put("tLogCatcher_1", System.currentTimeMillis());




/**
 * [tLogCatcher_1 end ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 end ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	



		
			
					if(outtFileOutputDelimited_2!=null) {
						outtFileOutputDelimited_2.flush();
						outtFileOutputDelimited_2.close();
					}
				
				globalMap.put("tFileOutputDelimited_2_NB_LINE",nb_line_tFileOutputDelimited_2);
				globalMap.put("tFileOutputDelimited_2_FILE_NAME",fileName_tFileOutputDelimited_2);
			
		
		
		resourceMap.put("finish_tFileOutputDelimited_2", true);
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row30");
			  	}
			  	
 

ok_Hash.put("tFileOutputDelimited_2", true);
end_Hash.put("tFileOutputDelimited_2", System.currentTimeMillis());




/**
 * [tFileOutputDelimited_2 end ] stop
 */

	
	/**
	 * [tJavaRow_3 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

globalMap.put("tJavaRow_3_NB_LINE",nb_line_tJavaRow_3);
				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row31");
			  	}
			  	
 

ok_Hash.put("tJavaRow_3", true);
end_Hash.put("tJavaRow_3", System.currentTimeMillis());




/**
 * [tJavaRow_3 end ] stop
 */

	
	/**
	 * [tRunJob_1 end ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	

				if(execStat){
			  		runStat.updateStat(resourceMap,iterateId,2,0,"row32");
			  	}
			  	
 

ok_Hash.put("tRunJob_1", true);
end_Hash.put("tRunJob_1", System.currentTimeMillis());




/**
 * [tRunJob_1 end ] stop
 */









				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, cLabel, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tLogCatcher_1 finally ] start
	 */

	

	
	
	currentComponent="tLogCatcher_1";
	
	

 



/**
 * [tLogCatcher_1 finally ] stop
 */

	
	/**
	 * [tFileOutputDelimited_2 finally ] start
	 */

	

	
	
	currentComponent="tFileOutputDelimited_2";
	
	


		if(resourceMap.get("finish_tFileOutputDelimited_2") == null){ 
			
				
						java.io.Writer outtFileOutputDelimited_2 = (java.io.Writer)resourceMap.get("out_tFileOutputDelimited_2");
						if(outtFileOutputDelimited_2!=null) {
							outtFileOutputDelimited_2.flush();
							outtFileOutputDelimited_2.close();
						}
					
				
			
		}
	

 



/**
 * [tFileOutputDelimited_2 finally ] stop
 */

	
	/**
	 * [tJavaRow_3 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_3";
	
	

 



/**
 * [tJavaRow_3 finally ] stop
 */

	
	/**
	 * [tRunJob_1 finally ] start
	 */

	

	
	
	currentComponent="tRunJob_1";
	
	
	
 



/**
 * [tRunJob_1 finally ] stop
 */









				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tLogCatcher_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";
    
    private boolean enableLogStash;

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };


    protected PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";
    
    
    private final static java.util.Properties jobInfo = new java.util.Properties();
    private final static java.util.Map<String,String> mdcInfo = new java.util.HashMap<>();
    private final static java.util.concurrent.atomic.AtomicLong subJobPidCounter = new java.util.concurrent.atomic.AtomicLong();


    public static void main(String[] args){
        final Odontologia OdontologiaClass = new Odontologia();

        int exitCode = OdontologiaClass.runJobInTOS(args);

        System.exit(exitCode);
    }
	

	
	
	private void getjobInfo() {
		final String TEMPLATE_PATH = "src/main/templates/jobInfo_template.properties";
		final String BUILD_PATH = "../jobInfo.properties";
		final String path = this.getClass().getResource("").getPath();
		if(path.lastIndexOf("target") > 0) {
			final java.io.File templateFile = new java.io.File(
					path.substring(0, path.lastIndexOf("target")).concat(TEMPLATE_PATH));
			if (templateFile.exists()) {
				readJobInfo(templateFile);
				return;
			}
		}
			readJobInfo(new java.io.File(BUILD_PATH));
	}

    private void readJobInfo(java.io.File jobInfoFile){
	
        if(jobInfoFile.exists()) {
            try (java.io.InputStream is = new java.io.FileInputStream(jobInfoFile)) {
            	jobInfo.load(is);
            } catch (IOException e) {
            	 
                
            }
        }
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";
	   	
        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }
        enableLogStash = "true".equalsIgnoreCase(System.getProperty("audit.enabled"));


		
		

        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }


        if (rootPid==null) {
            rootPid = pid;
        }


        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }
        boolean inOSGi = routines.system.BundleUtils.inOSGi();

        try {
            java.util.Dictionary<String, Object> jobProperties = null;
            if (inOSGi) {
                jobProperties = routines.system.BundleUtils.getJobProperties(jobName);
    
                if (jobProperties != null && jobProperties.get("context") != null) {
                    contextStr = (String)jobProperties.get("context");
                }
            }
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Odontologia.class.getClassLoader().getResourceAsStream("rep_inicio/odontologia_1_2/contexts/" + contextStr + ".properties");
            if (inContext == null) {
                inContext = Odontologia.class.getClassLoader().getResourceAsStream("config/contexts/" + contextStr + ".properties");
            }
            if (inContext != null) {
                try {
                    //defaultProps is in order to keep the original context value
                    if(context != null && context.isEmpty()) {
    	                defaultProps.load(inContext);
    	                if (inOSGi && jobProperties != null) {
                             java.util.Enumeration<String> keys = jobProperties.keys();
                             while (keys.hasMoreElements()) {
                                 String propKey = keys.nextElement();
                                 if (defaultProps.containsKey(propKey)) {
                                     defaultProps.put(propKey, (String) jobProperties.get(propKey));
                                 }
                             }
    	                }
    	                context = new ContextProperties(defaultProps);
                    }
                } finally {
                    inContext.close();
                }
            } else if (!isDefaultContext) {
                //print info and job continue to run, for case: context_param is not empty.
                System.err.println("Could not find the context " + contextStr);
            }
            
            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
            class ContextProcessing {
                private void processContext_0() {
                        context.setContextType("db_origen_AdditionalParams", "id_String");
                        if(context.getStringValue("db_origen_AdditionalParams") == null) {
                            context.db_origen_AdditionalParams = null;
                        } else {
                            context.db_origen_AdditionalParams=(String) context.getProperty("db_origen_AdditionalParams");
                        }
                        context.setContextType("db_origen_Login", "id_String");
                        if(context.getStringValue("db_origen_Login") == null) {
                            context.db_origen_Login = null;
                        } else {
                            context.db_origen_Login=(String) context.getProperty("db_origen_Login");
                        }
                        context.setContextType("db_origen_Password", "id_Password");
                        if(context.getStringValue("db_origen_Password") == null) {
                            context.db_origen_Password = null;
                        } else {
                            String pwd_db_origen_Password_value = context.getProperty("db_origen_Password");
                            context.db_origen_Password = null;
                            if(pwd_db_origen_Password_value!=null) {
                                if(context_param.containsKey("db_origen_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_origen_Password = pwd_db_origen_Password_value;
                                } else if (!pwd_db_origen_Password_value.isEmpty()) {
                                    try {
                                        context.db_origen_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_origen_Password_value);
                                        context.put("db_origen_Password",context.db_origen_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_origen_Port", "id_String");
                        if(context.getStringValue("db_origen_Port") == null) {
                            context.db_origen_Port = null;
                        } else {
                            context.db_origen_Port=(String) context.getProperty("db_origen_Port");
                        }
                        context.setContextType("db_origen_Schema", "id_String");
                        if(context.getStringValue("db_origen_Schema") == null) {
                            context.db_origen_Schema = null;
                        } else {
                            context.db_origen_Schema=(String) context.getProperty("db_origen_Schema");
                        }
                        context.setContextType("db_origen_Server", "id_String");
                        if(context.getStringValue("db_origen_Server") == null) {
                            context.db_origen_Server = null;
                        } else {
                            context.db_origen_Server=(String) context.getProperty("db_origen_Server");
                        }
                        context.setContextType("db_origen_ServiceName", "id_String");
                        if(context.getStringValue("db_origen_ServiceName") == null) {
                            context.db_origen_ServiceName = null;
                        } else {
                            context.db_origen_ServiceName=(String) context.getProperty("db_origen_ServiceName");
                        }
                        context.setContextType("db_destino_AdditionalParams", "id_String");
                        if(context.getStringValue("db_destino_AdditionalParams") == null) {
                            context.db_destino_AdditionalParams = null;
                        } else {
                            context.db_destino_AdditionalParams=(String) context.getProperty("db_destino_AdditionalParams");
                        }
                        context.setContextType("db_destino_Login", "id_String");
                        if(context.getStringValue("db_destino_Login") == null) {
                            context.db_destino_Login = null;
                        } else {
                            context.db_destino_Login=(String) context.getProperty("db_destino_Login");
                        }
                        context.setContextType("db_destino_Password", "id_Password");
                        if(context.getStringValue("db_destino_Password") == null) {
                            context.db_destino_Password = null;
                        } else {
                            String pwd_db_destino_Password_value = context.getProperty("db_destino_Password");
                            context.db_destino_Password = null;
                            if(pwd_db_destino_Password_value!=null) {
                                if(context_param.containsKey("db_destino_Password")) {//no need to decrypt if it come from program argument or parent job runtime
                                    context.db_destino_Password = pwd_db_destino_Password_value;
                                } else if (!pwd_db_destino_Password_value.isEmpty()) {
                                    try {
                                        context.db_destino_Password = routines.system.PasswordEncryptUtil.decryptPassword(pwd_db_destino_Password_value);
                                        context.put("db_destino_Password",context.db_destino_Password);
                                    } catch (java.lang.RuntimeException e) {
                                        //do nothing
                                    }
                                }
                            }
                        }
                        context.setContextType("db_destino_Port", "id_String");
                        if(context.getStringValue("db_destino_Port") == null) {
                            context.db_destino_Port = null;
                        } else {
                            context.db_destino_Port=(String) context.getProperty("db_destino_Port");
                        }
                        context.setContextType("db_destino_Schema", "id_String");
                        if(context.getStringValue("db_destino_Schema") == null) {
                            context.db_destino_Schema = null;
                        } else {
                            context.db_destino_Schema=(String) context.getProperty("db_destino_Schema");
                        }
                        context.setContextType("db_destino_Server", "id_String");
                        if(context.getStringValue("db_destino_Server") == null) {
                            context.db_destino_Server = null;
                        } else {
                            context.db_destino_Server=(String) context.getProperty("db_destino_Server");
                        }
                        context.setContextType("db_destino_ServiceName", "id_String");
                        if(context.getStringValue("db_destino_ServiceName") == null) {
                            context.db_destino_ServiceName = null;
                        } else {
                            context.db_destino_ServiceName=(String) context.getProperty("db_destino_ServiceName");
                        }
                        context.setContextType("ACTUALIZACION_TOTAL", "id_Boolean");
                        if(context.getStringValue("ACTUALIZACION_TOTAL") == null) {
                            context.ACTUALIZACION_TOTAL = null;
                        } else {
                            try{
                                context.ACTUALIZACION_TOTAL=routines.system.ParserUtils.parseTo_Boolean (context.getProperty("ACTUALIZACION_TOTAL"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ACTUALIZACION_TOTAL", e.getMessage()));
                                context.ACTUALIZACION_TOTAL=null;
                            }
                        }
                        context.setContextType("BODEGA", "id_String");
                        if(context.getStringValue("BODEGA") == null) {
                            context.BODEGA = null;
                        } else {
                            context.BODEGA=(String) context.getProperty("BODEGA");
                        }
                        context.setContextType("CONDITION", "id_String");
                        if(context.getStringValue("CONDITION") == null) {
                            context.CONDITION = null;
                        } else {
                            context.CONDITION=(String) context.getProperty("CONDITION");
                        }
                        context.setContextType("CONDITION_PRINCIPAL", "id_String");
                        if(context.getStringValue("CONDITION_PRINCIPAL") == null) {
                            context.CONDITION_PRINCIPAL = null;
                        } else {
                            context.CONDITION_PRINCIPAL=(String) context.getProperty("CONDITION_PRINCIPAL");
                        }
                        context.setContextType("ERROR", "id_String");
                        if(context.getStringValue("ERROR") == null) {
                            context.ERROR = null;
                        } else {
                            context.ERROR=(String) context.getProperty("ERROR");
                        }
                        context.setContextType("ESTADO", "id_String");
                        if(context.getStringValue("ESTADO") == null) {
                            context.ESTADO = null;
                        } else {
                            context.ESTADO=(String) context.getProperty("ESTADO");
                        }
                        context.setContextType("ESTADO_EXEC", "id_String");
                        if(context.getStringValue("ESTADO_EXEC") == null) {
                            context.ESTADO_EXEC = null;
                        } else {
                            context.ESTADO_EXEC=(String) context.getProperty("ESTADO_EXEC");
                        }
                        context.setContextType("FANTERIOR", "id_String");
                        if(context.getStringValue("FANTERIOR") == null) {
                            context.FANTERIOR = null;
                        } else {
                            context.FANTERIOR=(String) context.getProperty("FANTERIOR");
                        }
                        context.setContextType("FECHA_EJECUCION", "id_String");
                        if(context.getStringValue("FECHA_EJECUCION") == null) {
                            context.FECHA_EJECUCION = null;
                        } else {
                            context.FECHA_EJECUCION=(String) context.getProperty("FECHA_EJECUCION");
                        }
                        context.setContextType("FECHA_TERMINACION", "id_String");
                        if(context.getStringValue("FECHA_TERMINACION") == null) {
                            context.FECHA_TERMINACION = null;
                        } else {
                            context.FECHA_TERMINACION=(String) context.getProperty("FECHA_TERMINACION");
                        }
                        context.setContextType("HORA_FINAL", "id_String");
                        if(context.getStringValue("HORA_FINAL") == null) {
                            context.HORA_FINAL = null;
                        } else {
                            context.HORA_FINAL=(String) context.getProperty("HORA_FINAL");
                        }
                        context.setContextType("HORA_INICIO", "id_String");
                        if(context.getStringValue("HORA_INICIO") == null) {
                            context.HORA_INICIO = null;
                        } else {
                            context.HORA_INICIO=(String) context.getProperty("HORA_INICIO");
                        }
                        context.setContextType("ID_SOLICITUD", "id_Integer");
                        if(context.getStringValue("ID_SOLICITUD") == null) {
                            context.ID_SOLICITUD = null;
                        } else {
                            try{
                                context.ID_SOLICITUD=routines.system.ParserUtils.parseTo_Integer (context.getProperty("ID_SOLICITUD"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "ID_SOLICITUD", e.getMessage()));
                                context.ID_SOLICITUD=null;
                            }
                        }
                        context.setContextType("JOB", "id_String");
                        if(context.getStringValue("JOB") == null) {
                            context.JOB = null;
                        } else {
                            context.JOB=(String) context.getProperty("JOB");
                        }
                        context.setContextType("LAST_DAYS", "id_Integer");
                        if(context.getStringValue("LAST_DAYS") == null) {
                            context.LAST_DAYS = null;
                        } else {
                            try{
                                context.LAST_DAYS=routines.system.ParserUtils.parseTo_Integer (context.getProperty("LAST_DAYS"));
                            } catch(NumberFormatException e){
                                System.err.println(String.format("Null value will be used for context parameter %s: %s", "LAST_DAYS", e.getMessage()));
                                context.LAST_DAYS=null;
                            }
                        }
                        context.setContextType("LOGS_ERROR", "id_String");
                        if(context.getStringValue("LOGS_ERROR") == null) {
                            context.LOGS_ERROR = null;
                        } else {
                            context.LOGS_ERROR=(String) context.getProperty("LOGS_ERROR");
                        }
                        context.setContextType("LOGS_EXECUTION", "id_String");
                        if(context.getStringValue("LOGS_EXECUTION") == null) {
                            context.LOGS_EXECUTION = null;
                        } else {
                            context.LOGS_EXECUTION=(String) context.getProperty("LOGS_EXECUTION");
                        }
                        context.setContextType("LOGS_STAT", "id_String");
                        if(context.getStringValue("LOGS_STAT") == null) {
                            context.LOGS_STAT = null;
                        } else {
                            context.LOGS_STAT=(String) context.getProperty("LOGS_STAT");
                        }
                        context.setContextType("ORIGEN", "id_String");
                        if(context.getStringValue("ORIGEN") == null) {
                            context.ORIGEN = null;
                        } else {
                            context.ORIGEN=(String) context.getProperty("ORIGEN");
                        }
                        context.setContextType("RutaSistema", "id_String");
                        if(context.getStringValue("RutaSistema") == null) {
                            context.RutaSistema = null;
                        } else {
                            context.RutaSistema=(String) context.getProperty("RutaSistema");
                        }
                } 
                public void processAllContext() {
                        processContext_0();
                }
            }

            new ContextProcessing().processAllContext();
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }

        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("db_origen_AdditionalParams")) {
                context.db_origen_AdditionalParams = (String) parentContextMap.get("db_origen_AdditionalParams");
            }if (parentContextMap.containsKey("db_origen_Login")) {
                context.db_origen_Login = (String) parentContextMap.get("db_origen_Login");
            }if (parentContextMap.containsKey("db_origen_Password")) {
                context.db_origen_Password = (java.lang.String) parentContextMap.get("db_origen_Password");
            }if (parentContextMap.containsKey("db_origen_Port")) {
                context.db_origen_Port = (String) parentContextMap.get("db_origen_Port");
            }if (parentContextMap.containsKey("db_origen_Schema")) {
                context.db_origen_Schema = (String) parentContextMap.get("db_origen_Schema");
            }if (parentContextMap.containsKey("db_origen_Server")) {
                context.db_origen_Server = (String) parentContextMap.get("db_origen_Server");
            }if (parentContextMap.containsKey("db_origen_ServiceName")) {
                context.db_origen_ServiceName = (String) parentContextMap.get("db_origen_ServiceName");
            }if (parentContextMap.containsKey("db_destino_AdditionalParams")) {
                context.db_destino_AdditionalParams = (String) parentContextMap.get("db_destino_AdditionalParams");
            }if (parentContextMap.containsKey("db_destino_Login")) {
                context.db_destino_Login = (String) parentContextMap.get("db_destino_Login");
            }if (parentContextMap.containsKey("db_destino_Password")) {
                context.db_destino_Password = (java.lang.String) parentContextMap.get("db_destino_Password");
            }if (parentContextMap.containsKey("db_destino_Port")) {
                context.db_destino_Port = (String) parentContextMap.get("db_destino_Port");
            }if (parentContextMap.containsKey("db_destino_Schema")) {
                context.db_destino_Schema = (String) parentContextMap.get("db_destino_Schema");
            }if (parentContextMap.containsKey("db_destino_Server")) {
                context.db_destino_Server = (String) parentContextMap.get("db_destino_Server");
            }if (parentContextMap.containsKey("db_destino_ServiceName")) {
                context.db_destino_ServiceName = (String) parentContextMap.get("db_destino_ServiceName");
            }if (parentContextMap.containsKey("ACTUALIZACION_TOTAL")) {
                context.ACTUALIZACION_TOTAL = (Boolean) parentContextMap.get("ACTUALIZACION_TOTAL");
            }if (parentContextMap.containsKey("BODEGA")) {
                context.BODEGA = (String) parentContextMap.get("BODEGA");
            }if (parentContextMap.containsKey("CONDITION")) {
                context.CONDITION = (String) parentContextMap.get("CONDITION");
            }if (parentContextMap.containsKey("CONDITION_PRINCIPAL")) {
                context.CONDITION_PRINCIPAL = (String) parentContextMap.get("CONDITION_PRINCIPAL");
            }if (parentContextMap.containsKey("ERROR")) {
                context.ERROR = (String) parentContextMap.get("ERROR");
            }if (parentContextMap.containsKey("ESTADO")) {
                context.ESTADO = (String) parentContextMap.get("ESTADO");
            }if (parentContextMap.containsKey("ESTADO_EXEC")) {
                context.ESTADO_EXEC = (String) parentContextMap.get("ESTADO_EXEC");
            }if (parentContextMap.containsKey("FANTERIOR")) {
                context.FANTERIOR = (String) parentContextMap.get("FANTERIOR");
            }if (parentContextMap.containsKey("FECHA_EJECUCION")) {
                context.FECHA_EJECUCION = (String) parentContextMap.get("FECHA_EJECUCION");
            }if (parentContextMap.containsKey("FECHA_TERMINACION")) {
                context.FECHA_TERMINACION = (String) parentContextMap.get("FECHA_TERMINACION");
            }if (parentContextMap.containsKey("HORA_FINAL")) {
                context.HORA_FINAL = (String) parentContextMap.get("HORA_FINAL");
            }if (parentContextMap.containsKey("HORA_INICIO")) {
                context.HORA_INICIO = (String) parentContextMap.get("HORA_INICIO");
            }if (parentContextMap.containsKey("ID_SOLICITUD")) {
                context.ID_SOLICITUD = (Integer) parentContextMap.get("ID_SOLICITUD");
            }if (parentContextMap.containsKey("JOB")) {
                context.JOB = (String) parentContextMap.get("JOB");
            }if (parentContextMap.containsKey("LAST_DAYS")) {
                context.LAST_DAYS = (Integer) parentContextMap.get("LAST_DAYS");
            }if (parentContextMap.containsKey("LOGS_ERROR")) {
                context.LOGS_ERROR = (String) parentContextMap.get("LOGS_ERROR");
            }if (parentContextMap.containsKey("LOGS_EXECUTION")) {
                context.LOGS_EXECUTION = (String) parentContextMap.get("LOGS_EXECUTION");
            }if (parentContextMap.containsKey("LOGS_STAT")) {
                context.LOGS_STAT = (String) parentContextMap.get("LOGS_STAT");
            }if (parentContextMap.containsKey("ORIGEN")) {
                context.ORIGEN = (String) parentContextMap.get("ORIGEN");
            }if (parentContextMap.containsKey("RutaSistema")) {
                context.RutaSistema = (String) parentContextMap.get("RutaSistema");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
			parametersToEncrypt.add("db_origen_Password");
			parametersToEncrypt.add("db_destino_Password");
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,ContextProperties.class,parametersToEncrypt));


if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob

try {
errorCode = null;tPrejob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPrejob_1) {
globalMap.put("tPrejob_1_SUBPROCESS_STATE", -1);

e_tPrejob_1.printStackTrace();

}




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tOracleInput_21Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tOracleInput_21) {
globalMap.put("tOracleInput_21_SUBPROCESS_STATE", -1);

e_tOracleInput_21.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob

try {
errorCode = null;tPostjob_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tPostjob_1) {
globalMap.put("tPostjob_1_SUBPROCESS_STATE", -1);

e_tPostjob_1.printStackTrace();

}



        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Odontologia");
        }



if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;


    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");
    resumeUtil.flush();


    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tOracleConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
            obj_conn = globalMap.remove("conn_tOracleConnection_2");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tOracleConnection_1", globalMap.get("conn_tOracleConnection_1"));
            connections.put("conn_tOracleConnection_2", globalMap.get("conn_tOracleConnection_2"));






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        } else if (arg.startsWith("--context_file")) {
        	String keyValue = arg.substring(15);
        	String filePath = new String(java.util.Base64.getDecoder().decode(keyValue));
        	java.nio.file.Path contextFile = java.nio.file.Paths.get(filePath);
            try (java.io.BufferedReader reader = java.nio.file.Files.newBufferedReader(contextFile)) {
                String line;
                while ((line = reader.readLine()) != null) {
                    int index = -1;
                    if ( (index = line.indexOf('=')) > -1) {
							if (line.startsWith("--context_param")) {
								if ("id_Password".equals(context_param.getContextType(line.substring(16, index)))) {
									context_param.put(line.substring(16, index), routines.system.PasswordEncryptUtil.decryptPassword(
											line.substring(index + 1)));
								} else {
									context_param.put(line.substring(16, index), line.substring(index + 1));
								}
							}else {//--context_type
								context_param.setContextType(line.substring(15, index), line.substring(index + 1));
							}
                    }
                }
            } catch (java.io.IOException e) {
            	System.err.println("Could not load the context file: " + filePath);
                e.printStackTrace();
            }
        } else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		} else if (arg.startsWith("--audit.enabled") && arg.contains("=")) {//for trunjob call
		    final int equal = arg.indexOf('=');
			final String key = arg.substring("--".length(), equal);
			System.setProperty(key, arg.substring(equal + 1));
		}
    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     1122578 characters generated by Talend Open Studio for ESB 
 *     on the October 28, 2024, 11:47:20 AM COT
 ************************************************************************************************/